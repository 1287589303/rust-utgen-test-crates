[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1121:21: 1121:41 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::Input::<'_>::new::<[u8]>(move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1121:54: 1121:68 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _7 = core::ops::Range::<usize> { start: move _8, end: move _9 },
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1121:21: 1121:69 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _7) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_13),
            _13 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1122:9: 1122:30 (#0),
                    scope: scope[1],
                },
                kind: _11 = regex_automata::meta::Regex::find::<'_, regex_automata::Input<'_>>(move _12, move _13) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_2),
            _14 = {closure@src/regex/bytes.rs:1122:35: 1122:38} { haystack: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<regex_automata::Match>::map::<regex::bytes::Match<'_>, {closure@src/regex/bytes.rs:1122:35: 1122:38}>(move _11, move _14) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1123:6: 1123:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1116:5: 1123:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex::bytes::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1120:10: 1120:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::bytes::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1117:9: 1117:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:1118:19: 1118:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1118:9: 1118:17 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1118:9: 1118:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1118:9: 1118:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:1119:16: 1119:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1119:9: 1119:14 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1119:9: 1119:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1119:9: 1119:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1121:21: 1121:69 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1121:13: 1121:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:13: 1121:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:21: 1121:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:32: 1121:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:47: 1121:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:47: 1121:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:54: 1121:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1121:54: 1121:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1122:9: 1122:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1122:9: 1122:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                },
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1122:24: 1122:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:213 ~ regex[bf8d]::regex::bytes::{impl#6}::find_at::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::Match,)) -> regex::bytes::Match<'{erased}>, bound_vars: [] },
                (&'{erased} [u8],),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1122:35: 1122:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1122:9: 1122:80 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1122:35: 1122:79 (#0),
            scope: scope[0],
        },
    },
]