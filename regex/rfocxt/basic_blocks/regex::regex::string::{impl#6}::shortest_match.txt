[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_1),
            StorageLive(_4),
            _4 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:999:9: 999:44 (#0),
                    scope: scope[0],
                },
                kind: _0 = regex::string::Regex::shortest_match_at(move _3, move _4, const 0_usize) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1000:6: 1000:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:998:5: 1000:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:998:53: 998:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:998:27: 998:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:998:44: 998:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:998:34: 998:42 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:998:34: 998:42 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:998:34: 998:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:999:9: 999:44 (#0),
                },
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:999:9: 999:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:999:9: 999:44 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:999:32: 999:40 (#0),
            scope: scope[0],
        },
    },
]