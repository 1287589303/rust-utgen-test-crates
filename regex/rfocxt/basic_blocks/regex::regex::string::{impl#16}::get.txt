[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: regex_automata::util::captures::Captures),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2101:9: 2101:28 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_automata::util::captures::Captures::get_group(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            _6 = {closure@src/regex/string.rs:2101:33: 2101:37},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2101:9: 2101:57 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<regex_automata::Span>::map::<(usize, usize), {closure@src/regex/string.rs:2101:33: 2101:37}>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2102:6: 2102:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2100:5: 2102:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2100:36: 2100:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::CaptureLocations,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2100:16: 2100:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:2100:26: 2100:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:2100:23: 2100:24 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:2100:23: 2100:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2100:23: 2100:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2101:9: 2101:57 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::Span>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2101:9: 2101:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2101:9: 2101:57 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2101:9: 2101:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2101:9: 2101:57 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2101:26: 2101:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2101:9: 2101:57 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:581 ~ regex[bf8d]::regex::string::{impl#16}::get::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::Span,)) -> (usize, usize), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2101:33: 2101:56 (#0),
            scope: scope[0],
        },
    },
]