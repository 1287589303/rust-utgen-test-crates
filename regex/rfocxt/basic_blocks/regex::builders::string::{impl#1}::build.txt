[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: builders::Builder),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:812:13: 812:45 (#0),
                    scope: scope[0],
                },
                kind: _0 = builders::Builder::build_many_string(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:813:10: 813:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:811:9: 813:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<regexset::string::RegexSet, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:811:32: 811:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} builders::string::RegexSetBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:811:22: 811:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:812:13: 812:45 (#0),
                },
            ),
        ),
        ty: &'{erased} builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:812:13: 812:25 (#0),
            scope: scope[0],
        },
    },
]