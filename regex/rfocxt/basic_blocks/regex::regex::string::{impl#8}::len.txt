[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = ((*_1).2: usize),
            StorageLive(_3),
            _3 = ((*_1).1: usize),
            _4 = SubWithOverflow(_2, _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1542:9: 1542:30 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _2, move _3) -> [success: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = move (_4.0: usize),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1543:6: 1543:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1541:5: 1543:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1541:26: 1541:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1541:16: 1541:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1542:9: 1542:30 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1542:9: 1542:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1542:9: 1542:30 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1542:20: 1542:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1542:9: 1542:30 (#0),
            scope: scope[0],
        },
    },
]