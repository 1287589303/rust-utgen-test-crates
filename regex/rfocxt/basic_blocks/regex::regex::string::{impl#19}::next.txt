[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: regex_automata::meta::CapturesMatches<'_, '_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2226:35: 2226:50 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::meta::CapturesMatches::<'_, '_>::regex(move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &(*_4),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2226:35: 2226:72 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_automata::meta::Regex::static_captures_len(move _3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut ((*_1).1: regex_automata::meta::CapturesMatches<'_, '_>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2227:9: 2227:23 (#0),
                    scope: scope[1],
                },
                kind: _6 = <regex_automata::meta::CapturesMatches<'_, '_> as core::iter::Iterator>::next(move _7) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*((*_1).0: &str)),
            StorageLive(_10),
            _10 = &_2,
            _8 = {closure@src/regex/string.rs:2227:28: 2227:34} { self: move _9, static_captures_len: move _10 },
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<regex_automata::util::captures::Captures>::map::<regex::string::Captures<'_>, {closure@src/regex/string.rs:2227:28: 2227:34}>(move _6, move _8) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2232:6: 2232:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2231:10: 2231:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:2225:5: 2232:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex::string::Captures<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2225:27: 2225:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut regex::string::CaptureMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2225:13: 2225:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:2226:35: 2226:72 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:2226:13: 2226:32 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2226:13: 2226:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2226:35: 2226:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2226:35: 2226:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::CapturesMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2226:35: 2226:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::util::captures::Captures>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2227:9: 2227:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::CapturesMatches<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2227:9: 2227:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:599 ~ regex[bf8d]::regex::string::{impl#19}::next::{closure#0}),
            [
                '{erased},
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::util::captures::Captures,)) -> regex::string::Captures<'{erased}>, bound_vars: [] },
                (&'{erased} str, &'{erased} core::option::Option<usize>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2227:28: 2231:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2227:28: 2231:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:2227:9: 2231:11 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:2227:28: 2231:10 (#0),
            scope: scope[0],
        },
    },
]