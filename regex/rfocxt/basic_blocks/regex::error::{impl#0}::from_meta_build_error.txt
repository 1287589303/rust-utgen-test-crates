[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:36:35: 36:51 (#0),
                    scope: scope[1],
                },
                kind: _2 = regex_automata::meta::BuildError::size_limit(move _3) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:36:16: 36:32 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _4) -> [1: bb2, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:36:16: 36:32 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb3, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = ((_2 as Some).0: usize),
            StorageLive(_6),
            _6 = _5,
            _0 = error::Error::CompiledTooBig(move _6),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:36:9: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:38:39: 38:57 (#0),
                    scope: scope[2],
                },
                kind: _7 = regex_automata::meta::BuildError::syntax_error(move _8) -> [return: bb5, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            PlaceMention(_7),
            _9 = discriminant(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:38:23: 38:36 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _9) -> [1: bb6, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:38:23: 38:36 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &((_7 as Some).0: &regex_syntax::Error),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:39:27: 39:42 (#0),
                    scope: scope[2],
                },
                kind: _11 = <&regex_syntax::Error as alloc::string::ToString>::to_string(move _12) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = error::Error::Syntax(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:39:42: 39:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:38:16: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            StorageLive(_14),
            _14 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:51:27: 51:42 (#0),
                    scope: scope[0],
                },
                kind: _13 = <regex_automata::meta::BuildError as alloc::string::ToString>::to_string(move _14) -> [return: bb11, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _0 = error::Error::Syntax(move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:51:42: 51:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:38:16: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:36:9: 52:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:53:5: 53:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb15, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:53:6: 53:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:53:5: 53:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/error.rs:35:5: 53:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: error::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:35:67: 35:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/error.rs:35:46: 35:62 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/error.rs:35:41: 35:44 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:35:41: 35:44 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::meta::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:35:41: 35:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:36:9: 52:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:36:35: 36:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:36:9: 52:10 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:36:35: 36:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:36:16: 36:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/error.rs:36:35: 36:51 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:36:16: 36:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:36:21: 36:31 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:37:35: 37:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:36:9: 52:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} regex_syntax::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:38:39: 38:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:36:9: 52:10 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:38:39: 38:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:38:23: 38:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _7,
                                ),
                                src/error.rs:38:39: 38:57 (#0),
                            ),
                        ),
                        pat_span: src/error.rs:38:23: 38:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:38:28: 38:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:39:27: 39:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:39:13: 39:43 (#0),
                },
            ),
        ),
        ty: &'{erased} &'{erased} regex_syntax::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:39:27: 39:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:51:27: 51:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/error.rs:51:13: 51:43 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::BuildError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/error.rs:51:27: 51:30 (#0),
            scope: scope[0],
        },
    },
]