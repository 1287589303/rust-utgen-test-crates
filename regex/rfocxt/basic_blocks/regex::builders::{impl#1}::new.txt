[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:65:21: 65:39 (#0),
                    scope: scope[0],
                },
                kind: _2 = <builders::Builder as core::default::Default>::default() -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (_2.0: alloc::vec::Vec<alloc::string::String>),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:23: 66:43 (#0),
                    scope: scope[1],
                },
                kind: _6 = <I as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = {closure@src/builders.rs:66:48: 66:51},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:23: 66:75 (#0),
                    scope: scope[1],
                },
                kind: _5 = <<I as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::map::<alloc::string::String, {closure@src/builders.rs:66:48: 66:51}>(move _6, move _8) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:9: 66:76 (#0),
                    scope: scope[1],
                },
                kind: _3 = <alloc::vec::Vec<alloc::string::String> as core::iter::Extend<alloc::string::String>>::extend::<core::iter::Map<<I as core::iter::IntoIterator>::IntoIter, {closure@src/builders.rs:66:48: 66:51}>>(move _4, move _5) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:68:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:68:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:68:6: 68:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:75: 66:76 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:74: 66:75 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:66:42: 66:43 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:68:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:68:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:60:5: 68:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:60:34: 60:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/builders.rs:60:28: 60:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:60:18: 60:26 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:60:18: 60:26 (#0),
                    },
                ),
            ),
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:60:18: 60:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:65:21: 65:39 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:65:13: 65:18 (#0),
                    },
                ),
            ),
        ),
        ty: builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:65:13: 65:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:9: 66:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:9: 66:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Projection, AliasTy { args: [I/#0], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:31 ~ regex[bf8d]::builders::{impl#1}::new::{closure#0}), [I/#0, S/#1, i16, Binder { value: extern "RustCall" fn((S/#1,)) -> alloc::string::String, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:23: 66:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#0,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:23: 66:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:23: 66:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:31 ~ regex[bf8d]::builders::{impl#1}::new::{closure#0}),
            [
                I/#0,
                S/#1,
                i16,
                Binder { value: extern "RustCall" fn((S/#1,)) -> alloc::string::String, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:66:48: 66:74 (#0),
            scope: scope[0],
        },
    },
]