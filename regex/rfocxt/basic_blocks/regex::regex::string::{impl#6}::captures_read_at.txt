[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1240:21: 1240:41 (#0),
                    scope: scope[0],
                },
                kind: _6 = regex_automata::Input::<'_>::new::<str>(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _4,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1240:54: 1240:68 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::str::<impl str>::len(move _11) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _8 = core::ops::Range::<usize> { start: move _9, end: move _10 },
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1240:21: 1240:69 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _6, move _8) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_5,
            _14 = &(*_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_2).0: regex_automata::util::captures::Captures),
            _16 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1241:9: 1241:55 (#0),
                    scope: scope[1],
                },
                kind: _12 = regex_automata::meta::Regex::search_captures(move _13, move _14, move _16) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_12),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &((*_2).0: regex_automata::util::captures::Captures),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1242:9: 1242:27 (#0),
                    scope: scope[1],
                },
                kind: _18 = regex_automata::util::captures::Captures::get_match(move _19) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &(*_3),
            _20 = {closure@src/regex/string.rs:1242:32: 1242:35} { haystack: move _21 },
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1242:9: 1242:77 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<regex_automata::Match>::map::<regex::string::Match<'_>, {closure@src/regex/string.rs:1242:32: 1242:35}>(move _18, move _20) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1243:6: 1243:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/string.rs:1234:5: 1243:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<regex::string::Match<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1239:10: 1239:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::string::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1235:9: 1235:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1236:15: 1236:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1236:9: 1236:13 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1236:9: 1236:13 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut regex::string::CaptureLocations,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1236:9: 1236:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1237:19: 1237:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1237:9: 1237:17 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1237:9: 1237:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1237:9: 1237:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/string.rs:1238:16: 1238:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1238:9: 1238:14 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1238:9: 1238:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1238:9: 1238:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/string.rs:1240:21: 1240:69 (#0),
                            ),
                        ),
                        pat_span: src/regex/string.rs:1240:13: 1240:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:13: 1240:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:21: 1240:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:32: 1240:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:47: 1240:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:47: 1240:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:54: 1240:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1240:54: 1240:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:9: 1241:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:9: 1241:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:35: 1241:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:35: 1241:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:43: 1241:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1241:43: 1241:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1242:9: 1242:77 (#0),
                },
            ),
        ),
        ty: core::option::Option<regex_automata::Match>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1242:9: 1242:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1242:9: 1242:77 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::util::captures::Captures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1242:9: 1242:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1242:9: 1242:77 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:494 ~ regex[bf8d]::regex::string::{impl#6}::captures_read_at::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::Match,)) -> regex::string::Match<'{erased}>, bound_vars: [] },
                (&'{erased} str,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1242:32: 1242:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/string.rs:1242:9: 1242:77 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/string.rs:1242:32: 1242:76 (#0),
            scope: scope[0],
        },
    },
]