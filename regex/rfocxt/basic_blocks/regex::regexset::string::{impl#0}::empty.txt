[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            _1 = [],
            FakeRead(ForLet(None), _1),
            AscribeUserType(_1, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:181:9: 181:36 (#0),
                    scope: scope[1],
                },
                kind: _4 = builders::string::RegexSetBuilder::new::<[&str; 0], &str>(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &_4,
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:181:9: 181:44 (#0),
                    scope: scope[1],
                },
                kind: _2 = builders::string::RegexSetBuilder::build(move _3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:181:9: 181:53 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::result::Result::<regexset::string::RegexSet, error::Error>::unwrap(move _2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:182:5: 182:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:182:6: 182:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:181:52: 181:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:182:5: 182:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:179:5: 182:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regexset::string::RegexSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:179:23: 179:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:180:32: 180:34 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:180:13: 180:18 (#0),
                    },
                ),
            ),
        ),
        ty: [&'{erased} str; 0_usize],
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/regexset/string.rs:180:20: 180:29 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/regexset/string.rs:180:13: 180:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:181:9: 181:53 (#0),
                },
            ),
        ),
        ty: core::result::Result<regexset::string::RegexSet, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:181:9: 181:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:181:9: 181:53 (#0),
                },
            ),
        ),
        ty: &'{erased} builders::string::RegexSetBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:181:9: 181:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:181:9: 181:53 (#0),
                },
            ),
        ),
        ty: builders::string::RegexSetBuilder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:181:9: 181:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/string.rs:181:9: 181:53 (#0),
                },
            ),
        ),
        ty: [&'{erased} str; 0_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:181:30: 181:35 (#0),
            scope: scope[0],
        },
    },
]