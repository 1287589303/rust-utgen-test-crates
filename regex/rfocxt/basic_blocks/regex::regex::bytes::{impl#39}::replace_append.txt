[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut (*((*_1).0: &mut R)),
            StorageLive(_5),
            _5 = &(*_2),
            StorageLive(_6),
            _6 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:2563:9: 2563:41 (#0),
                    scope: scope[0],
                },
                kind: _0 = <R as regex::bytes::Replacer>::replace_append(move _4, move _5, move _6) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:2564:6: 2564:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:2562:5: 2564:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2562:73: 2562:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut regex::bytes::ReplacerRef<'{erased}, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2562:23: 2562:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:2562:40: 2562:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:2562:34: 2562:38 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:2562:34: 2562:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} regex::bytes::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2562:34: 2562:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:2562:60: 2562:72 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:2562:55: 2562:58 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:2562:55: 2562:58 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2562:55: 2562:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/regex/bytes.rs:2563:9: 2563:41 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2563:9: 2563:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/regex/bytes.rs:2563:9: 2563:41 (#0),
                },
            ),
        ),
        ty: &'{erased} regex::bytes::Captures<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2563:31: 2563:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/regex/bytes.rs:2563:9: 2563:41 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:2563:37: 2563:40 (#0),
            scope: scope[0],
        },
    },
]