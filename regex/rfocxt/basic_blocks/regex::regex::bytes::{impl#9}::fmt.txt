[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_2),
            StorageLive(_5),
            StorageLive(_6),
            _6 = const "Match",
            _5 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1560:23: 1560:46 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::fmt::Formatter::<'_>::debug_struct(move _4, move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _3,
            StorageLive(_13),
            StorageLive(_14),
            _14 = const "start",
            _13 = &(*_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).1: usize),
            _16 = &(*_17),
            _15 = move _16 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1561:9: 1561:40 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::fmt::DebugStruct::<'_, '_>::field(move _12, move _13, move _15) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut (*_11),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_18),
            StorageLive(_19),
            _19 = const "end",
            _18 = &(*_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &((*_1).2: usize),
            _21 = &(*_22),
            _20 = move _21 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1561:9: 1562:37 (#0),
                    scope: scope[1],
                },
                kind: _9 = core::fmt::DebugStruct::<'_, '_>::field(move _10, move _18, move _20) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_10),
            StorageLive(_23),
            StorageLive(_24),
            _24 = const "bytes",
            _23 = &(*_24),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1563:45: 1563:60 (#0),
                    scope: scope[1],
                },
                kind: _31 = regex::bytes::Match::<'_>::as_bytes(move _32) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _30 = &_31,
            _29 = &(*(*_30)),
            _28 = regex_automata::util::escape::DebugHaystack::<'_>(move _29),
            StorageDead(_29),
            _27 = &_28,
            _26 = &(*_27),
            _25 = move _26 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1561:9: 1563:62 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::fmt::DebugStruct::<'_, '_>::field(move _8, move _23, move _25) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_8),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_24),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_33),
            _33 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1565:9: 1565:21 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugStruct::<'_, '_>::finish(move _33) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1566:6: 1566:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regex/bytes.rs:1557:5: 1566:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1557:52: 1557:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regex::bytes::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1557:12: 1557:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regex/bytes.rs:1557:22: 1557:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1557:19: 1557:20 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1557:19: 1557:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1557:19: 1557:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regex/bytes.rs:1560:23: 1560:46 (#0),
                            ),
                        ),
                        pat_span: src/regex/bytes.rs:1560:13: 1560:20 (#0),
                    },
                ),
            ),
        ),
        ty: core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1560:13: 1560:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1560:23: 1560:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1560:38: 1560:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1560:38: 1560:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1563:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1562:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1562:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1561:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1561:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:9: 1561:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:19: 1561:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:19: 1561:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:28: 1561:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:28: 1561:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1561:28: 1561:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1562:20: 1562:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1562:20: 1562:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1562:27: 1562:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1562:27: 1562:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1562:27: 1562:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:20: 1563:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:20: 1563:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:29: 1563:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::util::escape::DebugHaystack<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:29: 1563:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::util::escape::DebugHaystack<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:29: 1563:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::util::escape::DebugHaystack<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:30: 1563:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:44: 1563:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:44: 1563:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:45: 1563:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex::bytes::Match<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1563:45: 1563:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regex/bytes.rs:1565:9: 1565:21 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugStruct<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regex/bytes.rs:1565:9: 1565:12 (#0),
            scope: scope[0],
        },
    },
]