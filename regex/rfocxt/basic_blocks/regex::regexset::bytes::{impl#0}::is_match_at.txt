[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:249:28: 249:48 (#0),
                    scope: scope[0],
                },
                kind: _6 = regex_automata::Input::<'_>::new::<[u8]>(move _7) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _3,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:249:61: 249:75 (#0),
                    scope: scope[0],
                },
                kind: _10 = core::slice::<impl [u8]>::len(move _11) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _8 = core::ops::Range::<usize> { start: move _9, end: move _10 },
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:249:28: 249:76 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _6, move _8) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                    scope: scope[0],
                },
                kind: _0 = regex_automata::meta::Regex::is_match::<'_, regex_automata::Input<'_>>(move _4, move _5) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:250:6: 250:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/bytes.rs:248:5: 250:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:248:65: 248:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regexset::bytes::RegexSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:248:24: 248:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/bytes.rs:248:41: 248:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/bytes.rs:248:31: 248:39 (#0),
                            ),
                        ),
                        pat_span: src/regexset/bytes.rs:248:31: 248:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:248:31: 248:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/bytes.rs:248:55: 248:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/bytes.rs:248:48: 248:53 (#0),
                            ),
                        ),
                        pat_span: src/regexset/bytes.rs:248:48: 248:53 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:248:48: 248:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:9: 249:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:28: 249:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:28: 249:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:39: 249:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:54: 249:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:54: 249:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:61: 249:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/regexset/bytes.rs:249:9: 249:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/bytes.rs:249:61: 249:69 (#0),
            scope: scope[0],
        },
    },
]