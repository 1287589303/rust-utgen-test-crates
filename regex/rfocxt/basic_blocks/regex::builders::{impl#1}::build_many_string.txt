[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).1: regex_automata::meta::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:105:21: 107:21 (#0),
                    scope: scope[0],
                },
                kind: _5 = <regex_automata::meta::Config as core::clone::Clone>::clone(move _6) -> [return: bb1, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = regex_automata::MatchKind::All,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:105:21: 108:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::meta::Config::match_kind(move _5, move _7) -> [return: bb2, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:105:21: 109:30 (#0),
                    scope: scope[0],
                },
                kind: _3 = regex_automata::meta::Config::utf8_empty(move _4, const true) -> [return: bb3, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_8),
            _8 = regex_automata::nfa::thompson::WhichCaptures::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:105:21: 110:49 (#0),
                    scope: scope[0],
                },
                kind: _2 = regex_automata::meta::Config::which_captures(move _3, move _8) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_1).2: regex_automata::util::syntax::Config),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:111:23: 111:43 (#0),
                    scope: scope[1],
                },
                kind: _10 = <regex_automata::util::syntax::Config as core::clone::Clone>::clone(move _11) -> [return: bb5, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:111:23: 111:54 (#0),
                    scope: scope[1],
                },
                kind: _9 = regex_automata::util::syntax::Config::utf8(move _10, const true) -> [return: bb6, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &((*_1).0: alloc::vec::Vec<alloc::string::String>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:112:34: 112:54 (#0),
                    scope: scope[2],
                },
                kind: _13 = alloc::vec::Vec::<alloc::string::String>::as_slice(move _14) -> [return: bb7, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:112:24: 112:55 (#0),
                    scope: scope[2],
                },
                kind: _12 = <alloc::sync::Arc<[alloc::string::String]> as core::convert::From<&[alloc::string::String]>>::from(move _13) -> [return: bb8, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 113:29 (#0),
                    scope: scope[3],
                },
                kind: _22 = regex_automata::meta::Builder::new() -> [return: bb9, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = &mut _22,
            StorageLive(_23),
            _23 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 114:30 (#0),
                    scope: scope[3],
                },
                kind: _20 = regex_automata::meta::Builder::configure(move _21, move _23) -> [return: bb10, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = &mut (*_20),
            StorageDead(_23),
            StorageDead(_21),
            StorageLive(_24),
            _24 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 115:29 (#0),
                    scope: scope[3],
                },
                kind: _18 = regex_automata::meta::Builder::syntax(move _19, move _24) -> [return: bb11, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &(*_18),
            StorageDead(_24),
            StorageDead(_19),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &_12,
            _27 = &(*_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:116:25: 116:34 (#0),
                    scope: scope[3],
                },
                kind: _26 = <alloc::sync::Arc<[alloc::string::String]> as core::ops::Deref>::deref(move _27) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = &(*_26),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 116:35 (#0),
                    scope: scope[3],
                },
                kind: _16 = regex_automata::meta::Builder::build_many::<alloc::string::String>(move _17, move _25) -> [return: bb13, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_17),
            StorageLive(_29),
            _29 = {closure@src/builders.rs:117:18: 117:24} { patterns: move _12 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 117:60 (#0),
                    scope: scope[3],
                },
                kind: _15 = core::result::Result::<regex_automata::meta::Regex, regex_automata::meta::BuildError>::map::<regexset::string::RegexSet, {closure@src/builders.rs:117:18: 117:24}>(move _16, move _29) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:113:9: 118:51 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::result::Result::<regexset::string::RegexSet, regex_automata::meta::BuildError>::map_err::<error::Error, fn(regex_automata::meta::BuildError) -> error::Error {error::Error::from_meta_build_error}>(move _15, error::Error::from_meta_build_error) -> [return: bb15, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb16, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_28),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_22) -> [return: bb18, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:6: 119:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:118:50: 118:51 (#0),
                    scope: scope[3],
                },
                kind: drop(_15) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:117:59: 117:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:117:59: 117:60 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:114:29: 114:30 (#0),
                    scope: scope[3],
                },
                kind: drop(_23) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_22) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:110:48: 110:49 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:109:29: 109:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:108:39: 108:40 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/builders.rs:104:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<regexset::string::RegexSet, error::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:104:36: 104:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} builders::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:104:26: 104:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:105:21: 110:49 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:105:13: 105:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:105:13: 105:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:105:21: 109:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:105:21: 108:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:105:21: 107:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:105:21: 106:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::MatchKind,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:108:25: 108:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::nfa::thompson::WhichCaptures,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:110:29: 110:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:111:23: 111:54 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:111:13: 111:20 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:111:13: 111:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:111:23: 111:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:111:23: 111:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/builders.rs:112:24: 112:55 (#0),
                            ),
                        ),
                        pat_span: src/builders.rs:112:13: 112:21 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:112:13: 112:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [alloc::string::String],
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:112:34: 112:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<alloc::string::String, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:112:34: 112:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: core::result::Result<regexset::string::RegexSet, regex_automata::meta::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 117:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: core::result::Result<regex_automata::meta::Regex, regex_automata::meta::BuildError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 116:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 115:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 115:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 114:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 114:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 113:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: regex_automata::meta::Builder,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:113:9: 113:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: regex_automata::meta::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:114:24: 114:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: regex_automata::util::syntax::Config,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:115:21: 115:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} [alloc::string::String],
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:116:25: 116:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} [alloc::string::String],
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:116:25: 116:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:116:25: 116:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:116:25: 116:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/builders.rs:113:9: 118:51 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:37 ~ regex[bf8d]::builders::{impl#1}::build_many_string::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((regex_automata::meta::Regex,)) -> regexset::string::RegexSet, bound_vars: [] },
                (alloc::sync::Arc<[alloc::string::String], alloc::alloc::Global>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/builders.rs:117:18: 117:59 (#0),
            scope: scope[0],
        },
    },
]