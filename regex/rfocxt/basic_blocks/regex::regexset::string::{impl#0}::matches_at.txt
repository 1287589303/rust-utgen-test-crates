[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:326:21: 326:41 (#0),
                    scope: scope[0],
                },
                kind: _5 = regex_automata::Input::<'_>::new::<str>(move _6) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:326:54: 326:68 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::str::<impl str>::len(move _10) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _7 = core::ops::Range::<usize> { start: move _8, end: move _9 },
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:326:21: 326:69 (#0),
                    scope: scope[0],
                },
                kind: _4 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _7) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: regex_automata::meta::Regex),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:327:42: 327:65 (#0),
                    scope: scope[1],
                },
                kind: _12 = regex_automata::meta::Regex::pattern_len(move _13) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:327:26: 327:66 (#0),
                    scope: scope[1],
                },
                kind: _11 = regex_automata::PatternSet::new(move _12) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: regex_automata::meta::Regex),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_4,
            _16 = &(*_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _11,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:328:9: 328:65 (#0),
                    scope: scope[2],
                },
                kind: _14 = regex_automata::meta::Regex::which_overlapping_matches(move _15, move _16, move _18) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_14),
            StorageLive(_20),
            _20 = move _11,
            _0 = regexset::string::SetMatches(move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:329:26: 329:27 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:330:5: 330:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:330:6: 330:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:330:5: 330:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/regexset/string.rs:325:5: 330:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regexset::string::SetMatches,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:325:63: 325:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} regexset::string::RegexSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:325:23: 325:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/string.rs:325:40: 325:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:325:30: 325:38 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:325:30: 325:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:325:30: 325:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/regexset/string.rs:325:53: 325:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:325:46: 325:51 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:325:46: 325:51 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:325:46: 325:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:326:21: 326:69 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:326:13: 326:18 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:13: 326:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:21: 326:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:32: 326:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:47: 326:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:47: 326:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:54: 326:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:326:54: 326:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/regexset/string.rs:327:26: 327:66 (#0),
                            ),
                        ),
                        pat_span: src/regexset/string.rs:327:13: 327:23 (#0),
                    },
                ),
            ),
        ),
        ty: regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:327:13: 327:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:327:42: 327:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:327:42: 327:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:9: 328:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::meta::Regex,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:9: 328:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:45: 328:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} regex_automata::Input<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:45: 328:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:53: 328:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:328:53: 328:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: regex_automata::PatternSet,
        user_ty: None,
        source_info: SourceInfo {
            span: src/regexset/string.rs:329:20: 329:26 (#0),
            scope: scope[0],
        },
    },
]