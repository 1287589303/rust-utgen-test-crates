bb0
  0: StorageLive(_5)
    SourceInfo(src/regexset/bytes.rs:385:9-385:13)
  1: _5 = &(*_1)
    SourceInfo(src/regexset/bytes.rs:385:9-385:13)
  2: StorageLive(_6)
    SourceInfo(src/regexset/bytes.rs:385:30-385:37)
  3: _6 = &mut (*_2)
    SourceInfo(src/regexset/bytes.rs:385:30-385:37)
  4: StorageLive(_7)
    SourceInfo(src/regexset/bytes.rs:385:39-385:47)
  5: _7 = &(*_3)
    SourceInfo(src/regexset/bytes.rs:385:39-385:47)
  6: StorageLive(_8)
    SourceInfo(src/regexset/bytes.rs:385:49-385:54)
  7: _8 = _4
    SourceInfo(src/regexset/bytes.rs:385:49-385:54)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:385:9-385:55)
      kind: _0 = regexset::bytes::RegexSet::matches_read_at(move _5, move _6, move _7, move _8) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_8)
    SourceInfo(src/regexset/bytes.rs:385:54-385:55)
  1: StorageDead(_7)
    SourceInfo(src/regexset/bytes.rs:385:54-385:55)
  2: StorageDead(_6)
    SourceInfo(src/regexset/bytes.rs:385:54-385:55)
  3: StorageDead(_5)
    SourceInfo(src/regexset/bytes.rs:385:54-385:55)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:386:6-386:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:379:5-386:6)
      kind: resume
  }
  preds [bb0]
  succs []

