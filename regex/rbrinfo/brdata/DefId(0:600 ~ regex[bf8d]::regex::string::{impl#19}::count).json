{
  "name": "regex::regex::string::{impl#19}::count",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:2235:5:2242:6",
  "doc": "",
  "code": [
    "fn count(self) -> usize {",
    "    // This can actually be up to 2x faster than calling `next()` until",
    "    // completion, because counting matches when using a DFA only requires",
    "    // finding the end of each match. But returning a `Match` via `next()`",
    "    // requires the start of each match which, with a DFA, requires a",
    "    // reverse forward scan to find it.",
    "    self.it.count()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}