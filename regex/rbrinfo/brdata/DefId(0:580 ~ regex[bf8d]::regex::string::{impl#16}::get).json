{
  "name": "regex::regex::string::{impl#16}::get",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:2100:5:2102:6",
  "doc": "/// Returns the start and end byte offsets of the capture group at index\n/// `i`. This returns `None` if `i` is not a valid capture group or if the\n/// capture group did not match.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\n/// assert_eq!(Some((0, 17)), locs.get(0));\n/// assert_eq!(Some((0, 5)), locs.get(1));\n/// assert_eq!(Some((6, 17)), locs.get(2));\n/// ```\n",
  "code": [
    "pub fn get(&self, i: usize) -> Option<(usize, usize)> {",
    "    self.0.get_group(i).map(|sp| (sp.start, sp.end))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}