{
  "name": "regex::regex::bytes::{impl#5}::split",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:562:5:564:6",
  "doc": "/// Returns an iterator of substrings of the haystack given, delimited by a\n/// match of the regex. Namely, each element of the iterator corresponds to\n/// a part of the haystack that *isn't* matched by the regular expression.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// # Example\n///\n/// To split a string delimited by arbitrary amounts of spaces or tabs:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"[ \\t]+\").unwrap();\n/// let hay = b\"a b \\t  c\\td    e\";\n/// let fields: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(fields, vec![\n///     &b\"a\"[..], &b\"b\"[..], &b\"c\"[..], &b\"d\"[..], &b\"e\"[..],\n/// ]);\n/// ```\n///\n/// # Example: more cases\n///\n/// Basic usage:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = b\"Mary had a little lamb\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"Mary\"[..], &b\"had\"[..], &b\"a\"[..], &b\"little\"[..], &b\"lamb\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"lionXXtigerXleopard\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"lion\"[..], &b\"\"[..], &b\"tiger\"[..], &b\"leopard\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = b\"lion::tiger::leopard\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"lion\"[..], &b\"tiger\"[..], &b\"leopard\"[..]]);\n/// ```\n///\n/// If a haystack contains multiple contiguous matches, you will end up\n/// with empty spans yielded by the iterator:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"XXXXaXXbXc\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n///     &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n/// ]);\n///\n/// let re = Regex::new(r\"/\").unwrap();\n/// let hay = b\"(///)\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"(\"[..], &b\"\"[..], &b\"\"[..], &b\")\"[..]]);\n/// ```\n///\n/// Separators at the start or end of a haystack are neighbored by empty\n/// substring.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"0\").unwrap();\n/// let hay = b\"010\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![&b\"\"[..], &b\"1\"[..], &b\"\"[..]]);\n/// ```\n///\n/// When the regex can match the empty string, it splits at every byte\n/// position in the haystack. This includes between all UTF-8 code units.\n/// (The top-level [`Regex::split`](crate::Regex::split) will only split\n/// at valid UTF-8 boundaries.)\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let hay = \"â˜ƒ\".as_bytes();\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &[][..], &[b'\\xE2'][..], &[b'\\x98'][..], &[b'\\x83'][..], &[][..],\n/// ]);\n/// ```\n///\n/// Contiguous separators (commonly shows up with whitespace), can lead to\n/// possibly surprising behavior. For example, this code is correct:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = b\"    a  b c\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// assert_eq!(got, vec![\n///     &b\"\"[..], &b\"\"[..], &b\"\"[..], &b\"\"[..],\n///     &b\"a\"[..], &b\"\"[..], &b\"b\"[..], &b\"c\"[..],\n/// ]);\n/// ```\n///\n/// It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, you'd want\n/// to match contiguous space characters:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" +\").unwrap();\n/// let hay = b\"    a  b c\";\n/// let got: Vec<&[u8]> = re.split(hay).collect();\n/// // N.B. This does still include a leading empty span because ' +'\n/// // matches at the beginning of the haystack.\n/// assert_eq!(got, vec![&b\"\"[..], &b\"a\"[..], &b\"b\"[..], &b\"c\"[..]]);\n/// ```\n",
  "code": [
    "pub fn split<'r, 'h>(&'r self, haystack: &'h [u8]) -> Split<'r, 'h> {",
    "    Split { haystack, it: self.meta.split(haystack) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Split { haystack, it: self.meta.split(haystack) }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}