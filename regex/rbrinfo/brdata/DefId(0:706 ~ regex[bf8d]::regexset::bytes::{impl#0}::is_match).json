{
  "name": "regex::regexset::bytes::{impl#0}::is_match",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:214:5:216:6",
  "doc": "/// Returns true if and only if one of the regexes in this set matches\n/// the haystack given.\n///\n/// This method should be preferred if you only need to test whether any\n/// of the regexes in the set should match, but don't care about *which*\n/// regexes matched. This is because the underlying matching engine will\n/// quit immediately after seeing the first match instead of continuing to\n/// find all matches.\n///\n/// Note that as with searches using [`Regex`](crate::bytes::Regex), the\n/// expression is unanchored by default. That is, if the regex does not\n/// start with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\n/// to match anywhere in the haystack.\n///\n/// # Example\n///\n/// Tests whether a set matches somewhere in a haystack:\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new([r\"\\w+\", r\"\\d+\"]).unwrap();\n/// assert!(set.is_match(b\"foo\"));\n/// assert!(!set.is_match(\"â˜ƒ\".as_bytes()));\n/// ```\n",
  "code": [
    "pub fn is_match(&self, haystack: &[u8]) -> bool {",
    "    self.is_match_at(haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}