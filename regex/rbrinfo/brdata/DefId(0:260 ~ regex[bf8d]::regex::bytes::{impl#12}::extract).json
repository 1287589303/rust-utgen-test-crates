{
  "name": "regex::regex::bytes::{impl#12}::extract",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1784:5:1798:6",
  "doc": "/// This is a convenience routine for extracting the substrings\n/// corresponding to matching capture groups.\n///\n/// This returns a tuple where the first element corresponds to the full\n/// substring of the haystack that matched the regex. The second element is\n/// an array of substrings, with each corresponding to the substring that\n/// matched for a particular capture group.\n///\n/// # Panics\n///\n/// This panics if the number of possible matching groups in this\n/// `Captures` value is not fixed to `N` in all circumstances.\n/// More precisely, this routine only works when `N` is equivalent to\n/// [`Regex::static_captures_len`].\n///\n/// Stated more plainly, if the number of matching capture groups in a\n/// regex can vary from match to match, then this function always panics.\n///\n/// For example, `(a)(b)|(c)` could produce two matching capture groups\n/// or one matching capture group for any given match. Therefore, one\n/// cannot use `extract` with such a pattern.\n///\n/// But a pattern like `(a)(b)|(c)(d)` can be used with `extract` because\n/// the number of capture groups in every match is always equivalent,\n/// even if the capture _indices_ in each match are not.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = b\"On 2010-03-14, I became a Tenneessee lamb.\";\n/// let Some((full, [year, month, day])) =\n///     re.captures(hay).map(|caps| caps.extract()) else { return };\n/// assert_eq!(b\"2010-03-14\", full);\n/// assert_eq!(b\"2010\", year);\n/// assert_eq!(b\"03\", month);\n/// assert_eq!(b\"14\", day);\n/// ```\n///\n/// # Example: iteration\n///\n/// This example shows how to use this method when iterating over all\n/// `Captures` matches in a haystack.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"([0-9]{4})-([0-9]{2})-([0-9]{2})\").unwrap();\n/// let hay = b\"1973-01-05, 1975-08-25 and 1980-10-18\";\n///\n/// let mut dates: Vec<(&[u8], &[u8], &[u8])> = vec![];\n/// for (_, [y, m, d]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     dates.push((y, m, d));\n/// }\n/// assert_eq!(dates, vec![\n///     (&b\"1973\"[..], &b\"01\"[..], &b\"05\"[..]),\n///     (&b\"1975\"[..], &b\"08\"[..], &b\"25\"[..]),\n///     (&b\"1980\"[..], &b\"10\"[..], &b\"18\"[..]),\n/// ]);\n/// ```\n///\n/// # Example: parsing different formats\n///\n/// This API is particularly useful when you need to extract a particular\n/// value that might occur in a different format. Consider, for example,\n/// an identifier that might be in double quotes or single quotes:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r#\"id:(?:\"([^\"]+)\"|'([^']+)')\"#).unwrap();\n/// let hay = br#\"The first is id:\"foo\" and the second is id:'bar'.\"#;\n/// let mut ids = vec![];\n/// for (_, [id]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     ids.push(id);\n/// }\n/// assert_eq!(ids, vec![b\"foo\", b\"bar\"]);\n/// ```\n",
  "code": [
    "pub fn extract<const N: usize>(&self) -> (&'h [u8], [&'h [u8]; N]) {",
    "    let len = self",
    "        .static_captures_len",
    "        .expect(\"number of capture groups can vary in a match\")",
    "        .checked_sub(1)",
    "        .expect(\"number of groups is always greater than zero\");",
    "    assert_eq!(N, len, \"asked for {} groups, but must ask for {}\", N, len);",
    "    // The regex-automata variant of extract is a bit more permissive.",
    "    // It doesn't require the number of matching capturing groups to be",
    "    // static, and you can even request fewer groups than what's there. So",
    "    // this is guaranteed to never panic because we've asserted above that",
    "    // the user has requested precisely the number of groups that must be",
    "    // present in any match for this regex.",
    "    self.caps.extract_bytes(self.haystack)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 53,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}