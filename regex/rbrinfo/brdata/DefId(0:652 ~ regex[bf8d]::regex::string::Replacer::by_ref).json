{
  "name": "regex::regex::string::Replacer::by_ref",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:2474:5:2476:6",
  "doc": "/// Returns a type that implements `Replacer`, but that borrows and wraps\n/// this `Replacer`.\n///\n/// This is useful when you want to take a generic `Replacer` (which might\n/// not be cloneable) and use it without consuming it, so it can be used\n/// more than once.\n///\n/// # Example\n///\n/// ```\n/// use regex::{Regex, Replacer};\n///\n/// fn replace_all_twice<R: Replacer>(\n///     re: Regex,\n///     src: &str,\n///     mut rep: R,\n/// ) -> String {\n///     let dst = re.replace_all(src, rep.by_ref());\n///     let dst = re.replace_all(&dst, rep.by_ref());\n///     dst.into_owned()\n/// }\n/// ```\n",
  "code": [
    "fn by_ref<'r>(&'r mut self) -> ReplacerRef<'r, Self> {",
    "    ReplacerRef(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "ReplacerRef(self)",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}