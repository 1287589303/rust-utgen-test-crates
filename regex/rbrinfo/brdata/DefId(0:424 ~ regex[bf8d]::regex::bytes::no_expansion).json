{
  "name": "regex::regex::bytes::no_expansion",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": false,
  "loc": "src/regex/bytes.rs:2611:1:2617:2",
  "doc": "/// Quickly checks the given replacement string for whether interpolation\n/// should be done on it. It returns `None` if a `$` was found anywhere in the\n/// given string, which suggests interpolation needs to be done. But if there's\n/// no `$` anywhere, then interpolation definitely does not need to be done. In\n/// that case, the given string is returned as a borrowed `Cow`.\n///\n/// This is meant to be used to implement the `Replacer::no_expandsion` method\n/// in its various trait impls.\n",
  "code": [
    "fn no_expansion<T: AsRef<[u8]>>(replacement: &T) -> Option<Cow<'_, [u8]>> {",
    "    let replacement = replacement.as_ref();",
    "    match crate::find_byte::find_byte(b'$', replacement) {",
    "        Some(_) => None,",
    "        None => Some(Cow::Borrowed(replacement)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "crate::find_byte::find_byte(b'$', replacement) matches Some(_)",
          "norm": null,
          "value": "true",
          "line": 2613,
          "bound": null
        },
        {
          "cond": "crate::find_byte::find_byte(b'$', replacement) matches Some(_)",
          "norm": null,
          "value": "true",
          "line": 2613,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "crate::find_byte::find_byte(b'$', replacement) matches None",
          "norm": null,
          "value": "true",
          "line": 2613,
          "bound": null
        }
      ],
      "ret": "Some(Cow::Borrowed(replacement))",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}