{
  "name": "regex::regex::bytes::{impl#5}::splitn",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:637:5:643:6",
  "doc": "/// Returns an iterator of at most `limit` substrings of the haystack\n/// given, delimited by a match of the regex. (A `limit` of `0` will return\n/// no substrings.) Namely, each element of the iterator corresponds to a\n/// part of the haystack that *isn't* matched by the regular expression.\n/// The remainder of the haystack that is not split will be the last\n/// element in the iterator.\n///\n/// # Time complexity\n///\n/// Since iterators over all matches requires running potentially many\n/// searches on the haystack, and since each search has worst case\n/// `O(m * n)` time complexity, the overall worst case time complexity for\n/// this routine is `O(m * n^2)`.\n///\n/// Although note that the worst case time here has an upper bound given\n/// by the `limit` parameter.\n///\n/// # Example\n///\n/// Get the first two words in some haystack:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\W+\").unwrap();\n/// let hay = b\"Hey! How are you?\";\n/// let fields: Vec<&[u8]> = re.splitn(hay, 3).collect();\n/// assert_eq!(fields, vec![&b\"Hey\"[..], &b\"How\"[..], &b\"are you?\"[..]]);\n/// ```\n///\n/// # Examples: more cases\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\" \").unwrap();\n/// let hay = b\"Mary had a little lamb\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![&b\"Mary\"[..], &b\"had\"[..], &b\"a little lamb\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![&b\"\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"lionXXtigerXleopard\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 3).collect();\n/// assert_eq!(got, vec![&b\"lion\"[..], &b\"\"[..], &b\"tigerXleopard\"[..]]);\n///\n/// let re = Regex::new(r\"::\").unwrap();\n/// let hay = b\"lion::tiger::leopard\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![&b\"lion\"[..], &b\"tiger::leopard\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"abcXdef\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 1).collect();\n/// assert_eq!(got, vec![&b\"abcXdef\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"abcdef\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 2).collect();\n/// assert_eq!(got, vec![&b\"abcdef\"[..]]);\n///\n/// let re = Regex::new(r\"X\").unwrap();\n/// let hay = b\"abcXdef\";\n/// let got: Vec<&[u8]> = re.splitn(hay, 0).collect();\n/// assert!(got.is_empty());\n/// ```\n",
  "code": [
    "pub fn splitn<'r, 'h>(",
    "    &'r self,",
    "    haystack: &'h [u8],",
    "    limit: usize,",
    ") -> SplitN<'r, 'h> {",
    "    SplitN { haystack, it: self.meta.splitn(haystack, limit) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SplitN { haystack, it: self.meta.splitn(haystack, limit) }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}