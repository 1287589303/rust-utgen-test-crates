{
  "name": "regex::regex::bytes::{impl#6}::find_at",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1116:5:1123:6",
  "doc": "/// Returns the same as [`Regex::find`], but starts the search at the given\n/// offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = b\"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert_eq!(re.find(&hay[2..]).map(|m| m.range()), Some(0..4));\n/// // No match because the  assertions take the context into account.\n/// assert_eq!(re.find_at(hay, 2), None);\n/// ```\n",
  "code": [
    "pub fn find_at<'h>(",
    "    &self,",
    "    haystack: &'h [u8],",
    "    start: usize,",
    ") -> Option<Match<'h>> {",
    "    let input = Input::new(haystack).span(start..haystack.len());",
    "    self.meta.find(input).map(|m| Match::new(haystack, m.start(), m.end()))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}