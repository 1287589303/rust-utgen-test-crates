{
  "name": "regex::regex::string::{impl#8}::end",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:1524:5:1526:6",
  "doc": "/// Returns the byte offset of the end of the match in the haystack. The\n/// end of the match corresponds to the byte immediately following the last\n/// byte in the match. This means that `&slice[start..end]` works as one\n/// would expect.\n///\n/// It is guaranteed that `Match::start() <= Match::end()`.\n///\n/// This is guaranteed to fall on a valid UTF-8 codepoint boundary. That\n/// is, it will never be an offset that appears between the UTF-8 code\n/// units of a UTF-8 encoded Unicode scalar value. Consequently, it is\n/// always safe to slice the corresponding haystack using this offset.\n",
  "code": [
    "pub fn end(&self) -> usize {",
    "    self.end",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.end",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}