{
  "name": "regex::regexset::bytes::{impl#0}::patterns",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:448:5:450:6",
  "doc": "/// Returns the regex patterns that this regex set was constructed from.\n///\n/// This function can be used to determine the pattern for a match. The\n/// slice returned has exactly as many patterns givens to this regex set,\n/// and the order of the slice is the same as the order of the patterns\n/// provided to the set.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new(&[\n///     r\"\\w+\",\n///     r\"\\d+\",\n///     r\"\\pL+\",\n///     r\"foo\",\n///     r\"bar\",\n///     r\"barfoo\",\n///     r\"foobar\",\n/// ]).unwrap();\n/// let matches: Vec<_> = set\n///     .matches(b\"foobar\")\n///     .into_iter()\n///     .map(|index| &set.patterns()[index])\n///     .collect();\n/// assert_eq!(matches, vec![r\"\\w+\", r\"\\pL+\", r\"foo\", r\"bar\", r\"foobar\"]);\n/// ```\n",
  "code": [
    "pub fn patterns(&self) -> &[String] {",
    "    &self.patterns",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&self.patterns",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}