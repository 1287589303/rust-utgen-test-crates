{
  "name": "regex::regexset::bytes::{impl#2}::matched",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:528:5:530:6",
  "doc": "/// Whether the regex at the given index matched.\n///\n/// The index for a regex is determined by its insertion order upon the\n/// initial construction of a `RegexSet`, starting at `0`.\n///\n/// # Panics\n///\n/// If `index` is greater than or equal to the number of regexes in the\n/// original set that produced these matches. Equivalently, when `index`\n/// is greater than or equal to [`SetMatches::len`].\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n/// let matches = set.matches(b\"example.com\");\n/// assert!(!matches.matched(0));\n/// assert!(matches.matched(1));\n/// ```\n",
  "code": [
    "pub fn matched(&self, index: usize) -> bool {",
    "    self.0.contains(PatternID::new_unchecked(index))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}