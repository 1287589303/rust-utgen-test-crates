{
  "name": "regex::regex::bytes::{impl#6}::captures_read",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1198:5:1204:6",
  "doc": "/// This is like [`Regex::captures`], but writes the byte offsets of each\n/// capture group match into the locations given.\n///\n/// A [`CaptureLocations`] stores the same byte offsets as a [`Captures`],\n/// but does *not* store a reference to the haystack. This makes its API\n/// a bit lower level and less convenient. But in exchange, callers\n/// may allocate their own `CaptureLocations` and reuse it for multiple\n/// searches. This may be helpful if allocating a `Captures` shows up in a\n/// profile as too costly.\n///\n/// To create a `CaptureLocations` value, use the\n/// [`Regex::capture_locations`] method.\n///\n/// This also returns the overall match if one was found. When a match is\n/// found, its offsets are also always stored in `locs` at index `0`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"^([a-z]+)=(\\S*)$\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert!(re.captures_read(&mut locs, b\"id=foo123\").is_some());\n/// assert_eq!(Some((0, 9)), locs.get(0));\n/// assert_eq!(Some((0, 2)), locs.get(1));\n/// assert_eq!(Some((3, 9)), locs.get(2));\n/// ```\n",
  "code": [
    "pub fn captures_read<'h>(",
    "    &self,",
    "    locs: &mut CaptureLocations,",
    "    haystack: &'h [u8],",
    ") -> Option<Match<'h>> {",
    "    self.captures_read_at(locs, haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}