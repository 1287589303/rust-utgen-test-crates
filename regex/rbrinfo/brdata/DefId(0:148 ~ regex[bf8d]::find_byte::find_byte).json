{
  "name": "regex::find_byte::find_byte",
  "mod_info": {
    "name": "find_byte",
    "loc": "src/lib.rs:1334:1:1334:15"
  },
  "visible": true,
  "loc": "src/find_byte.rs:5:1:17:2",
  "doc": "/// Searches for the given needle in the given haystack.\n///\n/// If the perf-literal feature is enabled, then this uses the super optimized\n/// memchr crate. Otherwise, it uses the naive byte-at-a-time implementation.\n",
  "code": [
    "pub(crate) fn find_byte(needle: u8, haystack: &[u8]) -> Option<usize> {",
    "    #[cfg(not(feature = \"perf-literal\"))]",
    "    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {",
    "        haystack.iter().position(|&b| b == needle)",
    "    }",
    "",
    "    #[cfg(feature = \"perf-literal\")]",
    "    fn imp(needle: u8, haystack: &[u8]) -> Option<usize> {",
    "        memchr::memchr(needle, haystack)",
    "    }",
    "",
    "    imp(needle, haystack)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}