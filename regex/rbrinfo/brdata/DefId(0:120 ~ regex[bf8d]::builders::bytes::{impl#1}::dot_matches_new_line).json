{
  "name": "regex::builders::bytes::{impl#1}::dot_matches_new_line",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:2162:9:2168:10",
  "doc": "/// This configures dot-matches-new-line mode for the entire pattern.\n///\n/// Perhaps surprisingly, the default behavior for `.` is not to match\n/// any character, but rather, to match any character except for the\n/// line terminator (which is `\\n` by default). When this mode is\n/// enabled, the behavior changes such that `.` truly matches any\n/// character.\n///\n/// This setting can also be configured using the inline flag `s` in\n/// the pattern. For example, `(?s:.)` and `\\p{any}` are equivalent\n/// regexes.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"foo.bar\"])\n///     .dot_matches_new_line(true)\n///     .build()\n///     .unwrap();\n/// let hay = b\"foo\\nbar\";\n/// assert!(re.is_match(hay));\n/// ```\n",
  "code": [
    "pub fn dot_matches_new_line(",
    "    &mut self,",
    "    yes: bool,",
    ") -> &mut RegexSetBuilder {",
    "    self.builder.dot_matches_new_line(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}