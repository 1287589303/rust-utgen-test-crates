{
  "name": "regex::regex::bytes::{impl#6}::captures_at",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1153:5:1167:6",
  "doc": "/// Returns the same as [`Regex::captures`], but starts the search at the\n/// given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = b\"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert_eq!(&re.captures(&hay[2..]).unwrap()[0], b\"chew\");\n/// // No match because the  assertions take the context into account.\n/// assert!(re.captures_at(hay, 2).is_none());\n/// ```\n",
  "code": [
    "pub fn captures_at<'h>(",
    "    &self,",
    "    haystack: &'h [u8],",
    "    start: usize,",
    ") -> Option<Captures<'h>> {",
    "    let input = Input::new(haystack).span(start..haystack.len());",
    "    let mut caps = self.meta.create_captures();",
    "    self.meta.captures(input, &mut caps);",
    "    if caps.is_match() {",
    "        let static_captures_len = self.static_captures_len();",
    "        Some(Captures { haystack, caps, static_captures_len })",
    "    } else {",
    "        None",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "true",
          "line": 1161,
          "bound": null
        }
      ],
      "ret": "Some(Captures { haystack, caps, static_captures_len })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "caps.is_match()",
          "norm": null,
          "value": "false",
          "line": 1161,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}