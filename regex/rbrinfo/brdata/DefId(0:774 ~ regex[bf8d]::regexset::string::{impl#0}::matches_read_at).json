{
  "name": "regex::regexset::string::{impl#0}::matches_read_at",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:346:5:367:6",
  "doc": "/// Returns the same as matches, but starts the search at the given\n/// offset and stores the matches into the slice given.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// `matches` must have a length that is at least the number of regexes\n/// in this set.\n///\n/// This method returns true if and only if at least one member of\n/// `matches` is true after executing the set against `haystack`.\n",
  "code": [
    "pub fn matches_read_at(",
    "    &self,",
    "    matches: &mut [bool],",
    "    haystack: &str,",
    "    start: usize,",
    ") -> bool {",
    "    // This is pretty dumb. We should try to fix this, but the",
    "    // regex-automata API doesn't provide a way to store matches in an",
    "    // arbitrary &mut [bool]. Thankfully, this API is doc(hidden) and",
    "    // thus not public... But regex-capi currently uses it. We should",
    "    // fix regex-capi to use a PatternSet, maybe? Not sure... PatternSet",
    "    // is in regex-automata, not regex. So maybe we should just accept a",
    "    // 'SetMatches', which is basically just a newtype around PatternSet.",
    "    let mut patset = PatternSet::new(self.meta.pattern_len());",
    "    let mut input = Input::new(haystack);",
    "    input.set_start(start);",
    "    self.meta.which_overlapping_matches(&input, &mut patset);",
    "    for pid in patset.iter() {",
    "        matches[pid] = true;",
    "    }",
    "    !patset.is_empty()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "pid in patset.iter()",
          "norm": null,
          "value": "true",
          "line": 363,
          "bound": null
        },
        {
          "cond": "pid in patset.iter()",
          "norm": null,
          "value": "false",
          "line": 363,
          "bound": null
        }
      ],
      "ret": "!patset.is_empty()",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        8,
        9,
        10,
        12,
        14,
        16,
        17
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "pid in patset.iter()",
          "norm": null,
          "value": "false",
          "line": 363,
          "bound": null
        }
      ],
      "ret": "!patset.is_empty()",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}