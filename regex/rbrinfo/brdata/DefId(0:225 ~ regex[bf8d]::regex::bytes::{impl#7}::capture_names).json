{
  "name": "regex::regex::bytes::{impl#7}::capture_names",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1326:5:1328:6",
  "doc": "/// Returns an iterator over the capture names in this regex.\n///\n/// The iterator returned yields elements of type `Option<&str>`. That is,\n/// the iterator yields values for all capture groups, even ones that are\n/// unnamed. The order of the groups corresponds to the order of the group's\n/// corresponding opening parenthesis.\n///\n/// The first element of the iterator always yields the group corresponding\n/// to the overall match, and this group is always unnamed. Therefore, the\n/// iterator always yields at least one group.\n///\n/// # Example\n///\n/// This shows basic usage with a mix of named and unnamed capture groups:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(?<a>.(?<b>.))(.)(?:.)(?<c>.)\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), Some(Some(\"a\")));\n/// assert_eq!(names.next(), Some(Some(\"b\")));\n/// assert_eq!(names.next(), Some(None));\n/// // the '(?:.)' group is non-capturing and so doesn't appear here!\n/// assert_eq!(names.next(), Some(Some(\"c\")));\n/// assert_eq!(names.next(), None);\n/// ```\n///\n/// The iterator always yields at least one element, even for regexes with\n/// no capture groups and even for regexes that can never match:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n///\n/// let re = Regex::new(r\"[a&&b]\").unwrap();\n/// let mut names = re.capture_names();\n/// assert_eq!(names.next(), Some(None));\n/// assert_eq!(names.next(), None);\n/// ```\n",
  "code": [
    "pub fn capture_names(&self) -> CaptureNames<'_> {",
    "    CaptureNames(self.meta.group_info().pattern_names(PatternID::ZERO))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CaptureNames(self.meta.group_info().pattern_names(PatternID::ZERO))",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}