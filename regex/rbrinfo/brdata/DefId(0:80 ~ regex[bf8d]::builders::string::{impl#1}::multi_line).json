{
  "name": "regex::builders::string::{impl#1}::multi_line",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:940:9:943:10",
  "doc": "/// This configures multi-line mode for all of the patterns.\n///\n/// Enabling multi-line mode changes the behavior of the `^` and `$`\n/// anchor assertions. Instead of only matching at the beginning and\n/// end of a haystack, respectively, multi-line mode causes them to\n/// match at the beginning and end of a line *in addition* to the\n/// beginning and end of a haystack. More precisely, `^` will match at\n/// the position immediately following a `\\n` and `$` will match at the\n/// position immediately preceding a `\\n`.\n///\n/// The behavior of this option can be impacted by other settings too:\n///\n/// * The [`RegexSetBuilder::line_terminator`] option changes `\\n`\n/// above to any ASCII byte.\n/// * The [`RegexSetBuilder::crlf`] option changes the line terminator\n/// to be either `\\r` or `\\n`, but never at the position between a `\\r`\n/// and `\\n`.\n///\n/// This setting can also be configured using the inline flag `m` in\n/// the pattern.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSetBuilder;\n///\n/// let re = RegexSetBuilder::new([r\"^foo$\"])\n///     .multi_line(true)\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(\"\\nfoo\\n\"));\n/// ```\n",
  "code": [
    "pub fn multi_line(&mut self, yes: bool) -> &mut RegexSetBuilder {",
    "    self.builder.multi_line(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}