{
  "name": "regex::regex::bytes::{impl#5}::captures_iter",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:420:5:425:6",
  "doc": "/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Captures`].\n///\n/// This is the same as [`Regex::find_iter`], but instead of only providing\n/// access to the overall match, each value yield includes access to the\n/// matches of all capture groups in the regex. Reporting this extra match\n/// data is potentially costly, so callers should only use `captures_iter`\n/// over `find_iter` when they actually need access to the capture group\n/// matches.\n///\n/// # Time complexity\n///\n/// Note that since `captures_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// We can use this to find all movie titles and their release years in\n/// some haystack, where the movie is formatted like \"'Title' (xxxx)\":\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"'([^']+)'\\s+\\(([0-9]{4})\\)\").unwrap();\n/// let hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut movies = vec![];\n/// for (_, [title, year]) in re.captures_iter(hay).map(|c| c.extract()) {\n///     // OK because [0-9]{4} can only match valid UTF-8.\n///     let year = std::str::from_utf8(year).unwrap();\n///     movies.push((title, year.parse::<i64>()?));\n/// }\n/// assert_eq!(movies, vec![\n///     (&b\"Citizen Kane\"[..], 1941),\n///     (&b\"The Wizard of Oz\"[..], 1939),\n///     (&b\"M\"[..], 1931),\n/// ]);\n/// # Ok::<(), Box<dyn std::error::Error>>(())\n/// ```\n///\n/// Or with named groups:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"'(?<title>[^']+)'\\s+\\((?<year>[0-9]{4})\\)\").unwrap();\n/// let hay = b\"'Citizen Kane' (1941), 'The Wizard of Oz' (1939), 'M' (1931).\";\n/// let mut it = re.captures_iter(hay);\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"Citizen Kane\");\n/// assert_eq!(&caps[\"year\"], b\"1941\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"The Wizard of Oz\");\n/// assert_eq!(&caps[\"year\"], b\"1939\");\n///\n/// let caps = it.next().unwrap();\n/// assert_eq!(&caps[\"title\"], b\"M\");\n/// assert_eq!(&caps[\"year\"], b\"1931\");\n/// ```\n",
  "code": [
    "pub fn captures_iter<'r, 'h>(",
    "    &'r self,",
    "    haystack: &'h [u8],",
    ") -> CaptureMatches<'r, 'h> {",
    "    CaptureMatches { haystack, it: self.meta.captures_iter(haystack) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CaptureMatches { haystack, it: self.meta.captures_iter(haystack) }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}