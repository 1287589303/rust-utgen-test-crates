{
  "name": "regex::regex::string::{impl#6}::shortest_match_at",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:1033:5:1041:6",
  "doc": "/// Returns the same as [`Regex::shortest_match`], but starts the search at\n/// the given offset.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only match\n/// when `start == 0`.\n///\n/// If a match is found, the offset returned is relative to the beginning\n/// of the haystack, not the beginning of the search.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start` by demonstrating how it\n/// can be used to permit look-around assertions in a regex to take the\n/// surrounding context into account.\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\bchew\\b\").unwrap();\n/// let hay = \"eschew\";\n/// // We get a match here, but it's probably not intended.\n/// assert_eq!(re.shortest_match(&hay[2..]), Some(4));\n/// // No match because the  assertions take the context into account.\n/// assert_eq!(re.shortest_match_at(hay, 2), None);\n/// ```\n",
  "code": [
    "pub fn shortest_match_at(",
    "    &self,",
    "    haystack: &str,",
    "    start: usize,",
    ") -> Option<usize> {",
    "    let input =",
    "        Input::new(haystack).earliest(true).span(start..haystack.len());",
    "    self.meta.search_half(&input).map(|hm| hm.offset())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}