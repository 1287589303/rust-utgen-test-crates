{
  "name": "regex::regex::string::{impl#5}::is_match",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:204:5:206:6",
  "doc": "/// Returns true if and only if there is a match for the regex anywhere\n/// in the haystack given.\n///\n/// It is recommended to use this method if all you need to do is test\n/// whether a match exists, since the underlying matching engine may be\n/// able to do less work.\n///\n/// # Example\n///\n/// Test if some haystack contains at least one word with exactly 13\n/// Unicode word characters:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = \"I categorically deny having triskaidekaphobia.\";\n/// assert!(re.is_match(hay));\n/// ```\n",
  "code": [
    "pub fn is_match(&self, haystack: &str) -> bool {",
    "    self.is_match_at(haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}