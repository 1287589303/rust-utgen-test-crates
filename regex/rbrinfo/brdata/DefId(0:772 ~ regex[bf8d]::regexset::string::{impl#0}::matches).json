{
  "name": "regex::regexset::string::{impl#0}::matches",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:287:5:289:6",
  "doc": "/// Returns the set of regexes that match in the given haystack.\n///\n/// The set returned contains the index of each regex that matches in\n/// the given haystack. The index is in correspondence with the order of\n/// regular expressions given to `RegexSet`'s constructor.\n///\n/// The set can also be used to iterate over the matched indices. The order\n/// of iteration is always ascending with respect to the matching indices.\n///\n/// Note that as with searches using [`Regex`](crate::Regex), the\n/// expression is unanchored by default. That is, if the regex does not\n/// start with `^` or `\\A`, or end with `$` or `\\z`, then it is permitted\n/// to match anywhere in the haystack.\n///\n/// # Example\n///\n/// Tests which regular expressions match the given haystack:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"\\w+\",\n///     r\"\\d+\",\n///     r\"\\pL+\",\n///     r\"foo\",\n///     r\"bar\",\n///     r\"barfoo\",\n///     r\"foobar\",\n/// ]).unwrap();\n/// let matches: Vec<_> = set.matches(\"foobar\").into_iter().collect();\n/// assert_eq!(matches, vec![0, 2, 3, 4, 6]);\n///\n/// // You can also test whether a particular regex matched:\n/// let matches = set.matches(\"foobar\");\n/// assert!(!matches.matched(5));\n/// assert!(matches.matched(6));\n/// ```\n",
  "code": [
    "pub fn matches(&self, haystack: &str) -> SetMatches {",
    "    self.matches_at(haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}