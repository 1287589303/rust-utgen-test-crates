{
  "name": "regex::builders::string::{impl#0}::octal",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:651:9:654:10",
  "doc": "/// This configures octal mode for the entire pattern.\n///\n/// Octal syntax is a little-known way of uttering Unicode codepoints\n/// in a pattern. For example, `a`, `\\x61`, `\\u0061` and `\\141` are all\n/// equivalent patterns, where the last example shows octal syntax.\n///\n/// While supporting octal syntax isn't in and of itself a problem,\n/// it does make good error messages harder. That is, in PCRE based\n/// regex engines, syntax like `\\1` invokes a backreference, which is\n/// explicitly unsupported this library. However, many users expect\n/// backreferences to be supported. Therefore, when octal support\n/// is disabled, the error message will explicitly mention that\n/// backreferences aren't supported.\n///\n/// The default for this is `false`.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexBuilder;\n///\n/// // Normally this pattern would not compile, with an error message\n/// // about backreferences not being supported. But with octal mode\n/// // enabled, octal escape sequences work.\n/// let re = RegexBuilder::new(r\"\\141\")\n///     .octal(true)\n///     .build()\n///     .unwrap();\n/// assert!(re.is_match(\"a\"));\n/// ```\n",
  "code": [
    "pub fn octal(&mut self, yes: bool) -> &mut RegexBuilder {",
    "    self.builder.octal(yes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}