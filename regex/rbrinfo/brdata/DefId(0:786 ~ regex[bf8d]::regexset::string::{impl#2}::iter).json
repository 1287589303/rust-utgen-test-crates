{
  "name": "regex::regexset::string::{impl#2}::iter",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:600:5:602:6",
  "doc": "/// Returns an iterator over the indices of the regexes that matched.\n///\n/// This will always produces matches in ascending order, where the index\n/// yielded corresponds to the index of the regex that matched with respect\n/// to its position when initially building the set.\n///\n/// # Example\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let matches: Vec<_> = set.matches(hay).iter().collect();\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n///\n/// Note that `SetMatches` also implemnets the `IntoIterator` trait, so\n/// this method is not always needed. For example:\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[0-9]\",\n///     r\"[a-z]\",\n///     r\"[A-Z]\",\n///     r\"\\p{Greek}\",\n/// ]).unwrap();\n/// let hay = \"βa1\";\n/// let mut matches = vec![];\n/// for index in set.matches(hay) {\n///     matches.push(index);\n/// }\n/// assert_eq!(matches, vec![0, 1, 3]);\n/// ```\n",
  "code": [
    "pub fn iter(&self) -> SetMatchesIter<'_> {",
    "    SetMatchesIter(self.0.iter())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SetMatchesIter(self.0.iter())",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}