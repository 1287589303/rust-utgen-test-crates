{
  "name": "regex::regex::string::{impl#16}::len",
  "mod_info": {
    "name": "regex::string",
    "loc": "src/regex/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regex/string.rs:2137:5:2142:6",
  "doc": "/// Returns the total number of capture groups (even if they didn't match).\n/// That is, the length returned is unaffected by the result of a search.\n///\n/// This is always at least `1` since every regex has at least `1`\n/// capturing group that corresponds to the entire match.\n///\n/// # Example\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"(?<first>\\w+)\\s+(?<last>\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert_eq!(3, locs.len());\n/// re.captures_read(&mut locs, \"Bruce Springsteen\").unwrap();\n/// assert_eq!(3, locs.len());\n/// ```\n///\n/// Notice that the length is always at least `1`, regardless of the regex:\n///\n/// ```\n/// use regex::Regex;\n///\n/// let re = Regex::new(r\"\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n///\n/// // [a&&b] is a regex that never matches anything.\n/// let re = Regex::new(r\"[a&&b]\").unwrap();\n/// let locs = re.capture_locations();\n/// assert_eq!(1, locs.len());\n/// ```\n",
  "code": [
    "pub fn len(&self) -> usize {",
    "    // self.0.group_len() returns 0 if the underlying captures doesn't",
    "    // represent a match, but the behavior guaranteed for this method is",
    "    // that the length doesn't change based on a match or not.",
    "    self.0.group_info().group_len(PatternID::ZERO)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}