{
  "name": "regex::error::{impl#0}::from_meta_build_error",
  "mod_info": {
    "name": "error",
    "loc": "src/lib.rs:1333:1:1333:11"
  },
  "visible": true,
  "loc": "src/error.rs:35:5:53:6",
  "doc": "",
  "code": [
    "pub(crate) fn from_meta_build_error(err: meta::BuildError) -> Error {",
    "    if let Some(size_limit) = err.size_limit() {",
    "        Error::CompiledTooBig(size_limit)",
    "    } else if let Some(ref err) = err.syntax_error() {",
    "        Error::Syntax(err.to_string())",
    "    } else {",
    "        // This is a little suspect. Technically there are more ways for",
    "        // a meta regex to fail to build other than \"exceeded size limit\"",
    "        // and \"syntax error.\" For example, if there are too many states",
    "        // or even too many patterns. But in practice this is probably",
    "        // good enough. The worst thing that happens is that Error::Syntax",
    "        // represents an error that isn't technically a syntax error, but",
    "        // the actual message will still be shown. So... it's not too bad.",
    "        //",
    "        // We really should have made the Error type in the regex crate",
    "        // completely opaque. Rookie mistake.",
    "        Error::Syntax(err.to_string())",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(size_limit) = err.size_limit()",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        },
        {
          "cond": "let Some(ref err) = err.syntax_error()",
          "norm": null,
          "value": "true",
          "line": 38,
          "bound": null
        }
      ],
      "ret": "Error::Syntax(err.to_string())",
      "path": [
        0,
        1,
        4,
        5,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(size_limit) = err.size_limit()",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        },
        {
          "cond": "let Some(ref err) = err.syntax_error()",
          "norm": null,
          "value": "true",
          "line": 38,
          "bound": null
        }
      ],
      "ret": "Error::Syntax(err.to_string())",
      "path": [
        0,
        1,
        4,
        5,
        6,
        7,
        8,
        9,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(size_limit) = err.size_limit()",
          "norm": null,
          "value": "true",
          "line": 36,
          "bound": null
        }
      ],
      "ret": "Error::CompiledTooBig(size_limit)",
      "path": [
        0,
        1,
        2,
        3,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}