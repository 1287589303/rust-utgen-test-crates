{
  "name": "regex::regex::bytes::{impl#7}::capture_locations",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1419:5:1421:6",
  "doc": "/// Returns a fresh allocated set of capture locations that can\n/// be reused in multiple calls to [`Regex::captures_read`] or\n/// [`Regex::captures_read_at`].\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"(.)(.)(\\w+)\").unwrap();\n/// let mut locs = re.capture_locations();\n/// assert!(re.captures_read(&mut locs, b\"Padron\").is_some());\n/// assert_eq!(locs.get(0), Some((0, 6)));\n/// assert_eq!(locs.get(1), Some((0, 1)));\n/// assert_eq!(locs.get(2), Some((1, 2)));\n/// assert_eq!(locs.get(3), Some((2, 6)));\n/// ```\n",
  "code": [
    "pub fn capture_locations(&self) -> CaptureLocations {",
    "    CaptureLocations(self.meta.create_captures())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "CaptureLocations(self.meta.create_captures())",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}