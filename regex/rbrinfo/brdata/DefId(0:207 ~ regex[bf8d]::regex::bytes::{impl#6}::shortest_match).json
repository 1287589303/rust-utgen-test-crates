{
  "name": "regex::regex::bytes::{impl#6}::shortest_match",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:1011:5:1013:6",
  "doc": "/// Returns the end byte offset of the first match in the haystack given.\n///\n/// This method may have the same performance characteristics as\n/// `is_match`. Behaviorlly, it doesn't just report whether it match\n/// occurs, but also the end offset for a match. In particular, the offset\n/// returned *may be shorter* than the proper end of the leftmost-first\n/// match that you would find via [`Regex::find`].\n///\n/// Note that it is not guaranteed that this routine finds the shortest or\n/// \"earliest\" possible match. Instead, the main idea of this API is that\n/// it returns the offset at the point at which the internal regex engine\n/// has determined that a match has occurred. This may vary depending on\n/// which internal regex engine is used, and thus, the offset itself may\n/// change based on internal heuristics.\n///\n/// # Example\n///\n/// Typically, `a+` would match the entire first sequence of `a` in some\n/// haystack, but `shortest_match` *may* give up as soon as it sees the\n/// first `a`.\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"a+\").unwrap();\n/// let offset = re.shortest_match(b\"aaaaa\").unwrap();\n/// assert_eq!(offset, 1);\n/// ```\n",
  "code": [
    "pub fn shortest_match(&self, haystack: &[u8]) -> Option<usize> {",
    "    self.shortest_match_at(haystack, 0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}