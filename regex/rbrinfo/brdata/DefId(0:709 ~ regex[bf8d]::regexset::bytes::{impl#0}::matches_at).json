{
  "name": "regex::regexset::bytes::{impl#0}::matches_at",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:329:5:334:6",
  "doc": "/// Returns the set of regexes that match in the given haystack.\n///\n/// The set returned contains the index of each regex that matches in\n/// the given haystack. The index is in correspondence with the order of\n/// regular expressions given to `RegexSet`'s constructor.\n///\n/// The set can also be used to iterate over the matched indices. The order\n/// of iteration is always ascending with respect to the matching indices.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// Tests which regular expressions match the given haystack:\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\n/// let hay = b\"foobar\";\n/// // We get matches here, but it's probably not intended.\n/// let matches: Vec<_> = set.matches(&hay[3..]).into_iter().collect();\n/// assert_eq!(matches, vec![0, 1]);\n/// // No matches because the  assertions take the context into account.\n/// let matches: Vec<_> = set.matches_at(hay, 3).into_iter().collect();\n/// assert_eq!(matches, vec![]);\n/// ```\n",
  "code": [
    "pub fn matches_at(&self, haystack: &[u8], start: usize) -> SetMatches {",
    "    let input = Input::new(haystack).span(start..haystack.len());",
    "    let mut patset = PatternSet::new(self.meta.pattern_len());",
    "    self.meta.which_overlapping_matches(&input, &mut patset);",
    "    SetMatches(patset)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SetMatches(patset)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}