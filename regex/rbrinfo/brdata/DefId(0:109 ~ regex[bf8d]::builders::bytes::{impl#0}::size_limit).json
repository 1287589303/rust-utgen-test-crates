{
  "name": "regex::builders::bytes::{impl#0}::size_limit",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1869:9:1872:10",
  "doc": "/// Sets the approximate size limit, in bytes, of the compiled regex.\n///\n/// This roughly corresponds to the number of heap memory, in\n/// bytes, occupied by a single regex. If the regex would otherwise\n/// approximately exceed this limit, then compiling that regex will\n/// fail.\n///\n/// The main utility of a method like this is to avoid compiling\n/// regexes that use an unexpected amount of resources, such as\n/// time and memory. Even if the memory usage of a large regex is\n/// acceptable, its search time may not be. Namely, worst case time\n/// complexity for search is `O(m * n)`, where `m ~ len(pattern)` and\n/// `n ~ len(haystack)`. That is, search time depends, in part, on the\n/// size of the compiled regex. This means that putting a limit on the\n/// size of the regex limits how much a regex can impact search time.\n///\n/// For more information about regex size limits, see the section on\n/// [untrusted inputs](crate#untrusted-input) in the top-level crate\n/// documentation.\n///\n/// The default for this is some reasonable number that permits most\n/// patterns to compile successfully.\n///\n/// # Example\n///\n/// ```\n/// # if !cfg!(target_pointer_width = \"64\") { return; } // see #1041\n/// use regex::bytes::RegexBuilder;\n///\n/// // It may surprise you how big some seemingly small patterns can\n/// // be! Since \\w is Unicode aware, this generates a regex that can\n/// // match approximately 140,000 distinct codepoints.\n/// assert!(RegexBuilder::new(r\"\\w\").size_limit(45_000).build().is_err());\n/// ```\n",
  "code": [
    "pub fn size_limit(&mut self, bytes: usize) -> &mut RegexBuilder {",
    "    self.builder.size_limit(bytes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}