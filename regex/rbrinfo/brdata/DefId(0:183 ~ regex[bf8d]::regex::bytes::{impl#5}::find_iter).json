{
  "name": "regex::regex::bytes::{impl#5}::find_iter",
  "mod_info": {
    "name": "regex::bytes",
    "loc": "src/regex/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regex/bytes.rs:262:5:264:6",
  "doc": "/// Returns an iterator that yields successive non-overlapping matches in\n/// the given haystack. The iterator yields values of type [`Match`].\n///\n/// # Time complexity\n///\n/// Note that since `find_iter` runs potentially many searches on the\n/// haystack and since each search has worst case `O(m * n)` time\n/// complexity, the overall worst case time complexity for iteration is\n/// `O(m * n^2)`.\n///\n/// # Example\n///\n/// Find every word with exactly 13 Unicode word characters:\n///\n/// ```\n/// use regex::bytes::Regex;\n///\n/// let re = Regex::new(r\"\\b\\w{13}\\b\").unwrap();\n/// let hay = b\"Retroactively relinquishing remunerations is reprehensible.\";\n/// let matches: Vec<_> = re.find_iter(hay).map(|m| m.as_bytes()).collect();\n/// assert_eq!(matches, vec![\n///     &b\"Retroactively\"[..],\n///     &b\"relinquishing\"[..],\n///     &b\"remunerations\"[..],\n///     &b\"reprehensible\"[..],\n/// ]);\n/// ```\n",
  "code": [
    "pub fn find_iter<'r, 'h>(&'r self, haystack: &'h [u8]) -> Matches<'r, 'h> {",
    "    Matches { haystack, it: self.meta.find_iter(haystack) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Matches { haystack, it: self.meta.find_iter(haystack) }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}