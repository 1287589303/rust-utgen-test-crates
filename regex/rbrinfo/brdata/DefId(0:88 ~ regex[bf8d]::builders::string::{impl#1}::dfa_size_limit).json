{
  "name": "regex::builders::string::{impl#1}::dfa_size_limit",
  "mod_info": {
    "name": "builders::string",
    "loc": "src/builders.rs:200:1:1355:2"
  },
  "visible": true,
  "loc": "src/builders.rs:1306:9:1312:10",
  "doc": "/// Set the approximate capacity, in bytes, of the cache of transitions\n/// used by the lazy DFA.\n///\n/// While the lazy DFA isn't always used, in tends to be the most\n/// commonly use regex engine in default configurations. It tends to\n/// adopt the performance profile of a fully build DFA, but without the\n/// downside of taking worst case exponential time to build.\n///\n/// The downside is that it needs to keep a cache of transitions and\n/// states that are built while running a search, and this cache\n/// can fill up. When it fills up, the cache will reset itself. Any\n/// previously generated states and transitions will then need to be\n/// re-generated. If this happens too many times, then this library\n/// will bail out of using the lazy DFA and switch to a different regex\n/// engine.\n///\n/// If your regex provokes this particular downside of the lazy DFA,\n/// then it may be beneficial to increase its cache capacity. This will\n/// potentially reduce the frequency of cache resetting (ideally to\n/// `0`). While it won't fix all potential performance problems with\n/// the lazy DFA, increasing the cache capacity does fix some.\n///\n/// There is no easy way to determine, a priori, whether increasing\n/// this cache capacity will help. In general, the larger your regex,\n/// the more cache it's likely to use. But that isn't an ironclad rule.\n/// For example, a regex like `[01]*1[01]{N}` would normally produce a\n/// fully build DFA that is exponential in size with respect to `N`.\n/// The lazy DFA will prevent exponential space blow-up, but it cache\n/// is likely to fill up, even when it's large and even for smallish\n/// values of `N`.\n///\n/// If you aren't sure whether this helps or not, it is sensible to\n/// set this to some arbitrarily large number in testing, such as\n/// `usize::MAX`. Namely, this represents the amount of capacity that\n/// *may* be used. It's probably not a good idea to use `usize::MAX` in\n/// production though, since it implies there are no controls on heap\n/// memory used by this library during a search. In effect, set it to\n/// whatever you're willing to allocate for a single regex search.\n",
  "code": [
    "pub fn dfa_size_limit(",
    "    &mut self,",
    "    bytes: usize,",
    ") -> &mut RegexSetBuilder {",
    "    self.builder.dfa_size_limit(bytes);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}