{
  "name": "regex::regexset::bytes::{impl#0}::is_match_at",
  "mod_info": {
    "name": "regexset::bytes",
    "loc": "src/regexset/mod.rs:1:1:1:22"
  },
  "visible": true,
  "loc": "src/regexset/bytes.rs:248:5:250:6",
  "doc": "/// Returns true if and only if one of the regexes in this set matches the\n/// haystack given, with the search starting at the offset given.\n///\n/// The significance of the starting point is that it takes the surrounding\n/// context into consideration. For example, the `\\A` anchor can only\n/// match when `start == 0`.\n///\n/// # Panics\n///\n/// This panics when `start >= haystack.len() + 1`.\n///\n/// # Example\n///\n/// This example shows the significance of `start`. Namely, consider a\n/// haystack `foobar` and a desire to execute a search starting at offset\n/// `3`. You could search a substring explicitly, but then the look-around\n/// assertions won't work correctly. Instead, you can use this method to\n/// specify the start position of a search.\n///\n/// ```\n/// use regex::bytes::RegexSet;\n///\n/// let set = RegexSet::new([r\"\\bbar\\b\", r\"(?m)^bar$\"]).unwrap();\n/// let hay = b\"foobar\";\n/// // We get a match here, but it's probably not intended.\n/// assert!(set.is_match(&hay[3..]));\n/// // No match because the  assertions take the context into account.\n/// assert!(!set.is_match_at(hay, 3));\n/// ```\n",
  "code": [
    "pub fn is_match_at(&self, haystack: &[u8], start: usize) -> bool {",
    "    self.meta.is_match(Input::new(haystack).span(start..haystack.len()))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}