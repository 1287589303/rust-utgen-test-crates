{
  "name": "regex::regexset::string::{impl#2}::len",
  "mod_info": {
    "name": "regexset::string",
    "loc": "src/regexset/mod.rs:2:1:2:23"
  },
  "visible": true,
  "loc": "src/regexset/string.rs:554:5:556:6",
  "doc": "/// The total number of regexes in the set that created these matches.\n///\n/// **WARNING:** This always returns the same value as [`RegexSet::len`].\n/// In particular, it does *not* return the number of elements yielded by\n/// [`SetMatches::iter`]. The only way to determine the total number of\n/// matched regexes is to iterate over them.\n///\n/// # Example\n///\n/// Notice that this method returns the total number of regexes in the\n/// original set, and *not* the total number of regexes that matched.\n///\n/// ```\n/// use regex::RegexSet;\n///\n/// let set = RegexSet::new([\n///     r\"[a-z]+@[a-z]+\\.(com|org|net)\",\n///     r\"[a-z]+\\.(com|org|net)\",\n/// ]).unwrap();\n/// let matches = set.matches(\"example.com\");\n/// // Total number of patterns that matched.\n/// assert_eq!(1, matches.iter().count());\n/// // Total number of patterns in the set.\n/// assert_eq!(2, matches.len());\n/// ```\n",
  "code": [
    "pub fn len(&self) -> usize {",
    "    self.0.capacity()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}