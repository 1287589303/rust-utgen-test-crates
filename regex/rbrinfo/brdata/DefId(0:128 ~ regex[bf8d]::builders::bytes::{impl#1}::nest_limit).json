{
  "name": "regex::builders::bytes::{impl#1}::nest_limit",
  "mod_info": {
    "name": "builders::bytes",
    "loc": "src/builders.rs:1357:1:2539:2"
  },
  "visible": true,
  "loc": "src/builders.rs:2534:9:2537:10",
  "doc": "/// Set the nesting limit for this parser.\n///\n/// The nesting limit controls how deep the abstract syntax tree is\n/// allowed to be. If the AST exceeds the given limit (e.g., with too\n/// many nested groups), then an error is returned by the parser.\n///\n/// The purpose of this limit is to act as a heuristic to prevent stack\n/// overflow for consumers that do structural induction on an AST using\n/// explicit recursion. While this crate never does this (instead using\n/// constant stack space and moving the call stack to the heap), other\n/// crates may.\n///\n/// This limit is not checked until the entire AST is parsed.\n/// Therefore, if callers want to put a limit on the amount of heap\n/// space used, then they should impose a limit on the length, in\n/// bytes, of the concrete pattern string. In particular, this is\n/// viable since this parser implementation will limit itself to heap\n/// space proportional to the length of the pattern string. See also\n/// the [untrusted inputs](crate#untrusted-input) section in the\n/// top-level crate documentation for more information about this.\n///\n/// Note that a nest limit of `0` will return a nest limit error for\n/// most patterns but not all. For example, a nest limit of `0` permits\n/// `a` but not `ab`, since `ab` requires an explicit concatenation,\n/// which results in a nest depth of `1`. In general, a nest limit is\n/// not something that manifests in an obvious way in the concrete\n/// syntax, therefore, it should not be used in a granular way.\n///\n/// # Example\n///\n/// ```\n/// use regex::bytes::RegexSetBuilder;\n///\n/// assert!(RegexSetBuilder::new([r\"a\"]).nest_limit(0).build().is_ok());\n/// assert!(RegexSetBuilder::new([r\"ab\"]).nest_limit(0).build().is_err());\n/// ```\n",
  "code": [
    "pub fn nest_limit(&mut self, limit: u32) -> &mut RegexSetBuilder {",
    "    self.builder.nest_limit(limit);",
    "    self",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}