bb0
  0: StorageLive(_4)
    SourceInfo(src/regexset/bytes.rs:330:13-330:18)
  1: StorageLive(_5)
    SourceInfo(src/regexset/bytes.rs:330:21-330:41)
  2: StorageLive(_6)
    SourceInfo(src/regexset/bytes.rs:330:32-330:40)
  3: _6 = &(*_2)
    SourceInfo(src/regexset/bytes.rs:330:32-330:40)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:330:21-330:41)
      kind: _5 = regex_automata::Input::<'_>::new::<[u8]>(move _6) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageDead(_6)
    SourceInfo(src/regexset/bytes.rs:330:40-330:41)
  1: StorageLive(_7)
    SourceInfo(src/regexset/bytes.rs:330:47-330:68)
  2: StorageLive(_8)
    SourceInfo(src/regexset/bytes.rs:330:47-330:52)
  3: _8 = _3
    SourceInfo(src/regexset/bytes.rs:330:47-330:52)
  4: StorageLive(_9)
    SourceInfo(src/regexset/bytes.rs:330:54-330:68)
  5: StorageLive(_10)
    SourceInfo(src/regexset/bytes.rs:330:54-330:62)
  6: _10 = &(*_2)
    SourceInfo(src/regexset/bytes.rs:330:54-330:62)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:330:54-330:68)
      kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_10)
    SourceInfo(src/regexset/bytes.rs:330:67-330:68)
  1: _7 = core::ops::Range::<usize> { start: move _8, end: move _9 }
    SourceInfo(src/regexset/bytes.rs:330:47-330:68)
  2: StorageDead(_9)
    SourceInfo(src/regexset/bytes.rs:330:67-330:68)
  3: StorageDead(_8)
    SourceInfo(src/regexset/bytes.rs:330:67-330:68)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:330:21-330:69)
      kind: _4 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _7) -> [return: bb3, unwind: bb10]
  }
  preds [bb1]
  succs [bb3, bb10]

bb3
  0: StorageDead(_7)
    SourceInfo(src/regexset/bytes.rs:330:68-330:69)
  1: StorageDead(_5)
    SourceInfo(src/regexset/bytes.rs:330:68-330:69)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/regexset/bytes.rs:330:13-330:18)
  3: StorageLive(_11)
    SourceInfo(src/regexset/bytes.rs:331:13-331:23)
  4: StorageLive(_12)
    SourceInfo(src/regexset/bytes.rs:331:42-331:65)
  5: StorageLive(_13)
    SourceInfo(src/regexset/bytes.rs:331:42-331:51)
  6: _13 = &((*_1).0: regex_automata::meta::Regex)
    SourceInfo(src/regexset/bytes.rs:331:42-331:51)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:331:42-331:65)
      kind: _12 = regex_automata::meta::Regex::pattern_len(move _13) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_13)
    SourceInfo(src/regexset/bytes.rs:331:64-331:65)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:331:26-331:66)
      kind: _11 = regex_automata::PatternSet::new(move _12) -> [return: bb5, unwind: bb10]
  }
  preds [bb3]
  succs [bb5, bb10]

bb5
  0: StorageDead(_12)
    SourceInfo(src/regexset/bytes.rs:331:65-331:66)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(src/regexset/bytes.rs:331:13-331:23)
  2: StorageLive(_14)
    SourceInfo(src/regexset/bytes.rs:332:9-332:65)
  3: StorageLive(_15)
    SourceInfo(src/regexset/bytes.rs:332:9-332:18)
  4: _15 = &((*_1).0: regex_automata::meta::Regex)
    SourceInfo(src/regexset/bytes.rs:332:9-332:18)
  5: StorageLive(_16)
    SourceInfo(src/regexset/bytes.rs:332:45-332:51)
  6: StorageLive(_17)
    SourceInfo(src/regexset/bytes.rs:332:45-332:51)
  7: _17 = &_4
    SourceInfo(src/regexset/bytes.rs:332:45-332:51)
  8: _16 = &(*_17)
    SourceInfo(src/regexset/bytes.rs:332:45-332:51)
  9: StorageLive(_18)
    SourceInfo(src/regexset/bytes.rs:332:53-332:64)
  10: StorageLive(_19)
    SourceInfo(src/regexset/bytes.rs:332:53-332:64)
  11: _19 = &mut _11
    SourceInfo(src/regexset/bytes.rs:332:53-332:64)
  12: _18 = &mut (*_19)
    SourceInfo(src/regexset/bytes.rs:332:53-332:64)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:332:9-332:65)
      kind: _14 = regex_automata::meta::Regex::which_overlapping_matches(move _15, move _16, move _18) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: StorageDead(_18)
    SourceInfo(src/regexset/bytes.rs:332:64-332:65)
  1: StorageDead(_16)
    SourceInfo(src/regexset/bytes.rs:332:64-332:65)
  2: StorageDead(_15)
    SourceInfo(src/regexset/bytes.rs:332:64-332:65)
  3: StorageDead(_19)
    SourceInfo(src/regexset/bytes.rs:332:65-332:66)
  4: StorageDead(_17)
    SourceInfo(src/regexset/bytes.rs:332:65-332:66)
  5: StorageDead(_14)
    SourceInfo(src/regexset/bytes.rs:332:65-332:66)
  6: StorageLive(_20)
    SourceInfo(src/regexset/bytes.rs:333:20-333:26)
  7: _20 = move _11
    SourceInfo(src/regexset/bytes.rs:333:20-333:26)
  8: _0 = regexset::bytes::SetMatches(move _20)
    SourceInfo(src/regexset/bytes.rs:333:9-333:27)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:333:26-333:27)
      kind: drop(_20) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_20)
    SourceInfo(src/regexset/bytes.rs:333:26-333:27)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:334:5-334:6)
      kind: drop(_11) -> [return: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: StorageDead(_11)
    SourceInfo(src/regexset/bytes.rs:334:5-334:6)
  1: StorageDead(_4)
    SourceInfo(src/regexset/bytes.rs:334:5-334:6)
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:334:6-334:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:334:5-334:6)
      kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb5, bb6]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/regexset/bytes.rs:329:5-334:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb7, bb9]
  succs []

