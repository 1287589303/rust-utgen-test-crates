bb0
  0: StorageLive(_4)
    SourceInfo(src/regex/bytes.rs:1158:13-1158:18)
  1: StorageLive(_5)
    SourceInfo(src/regex/bytes.rs:1158:21-1158:41)
  2: StorageLive(_6)
    SourceInfo(src/regex/bytes.rs:1158:32-1158:40)
  3: _6 = &(*_2)
    SourceInfo(src/regex/bytes.rs:1158:32-1158:40)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1158:21-1158:41)
      kind: _5 = regex_automata::Input::<'_>::new::<[u8]>(move _6) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_6)
    SourceInfo(src/regex/bytes.rs:1158:40-1158:41)
  1: StorageLive(_7)
    SourceInfo(src/regex/bytes.rs:1158:47-1158:68)
  2: StorageLive(_8)
    SourceInfo(src/regex/bytes.rs:1158:47-1158:52)
  3: _8 = _3
    SourceInfo(src/regex/bytes.rs:1158:47-1158:52)
  4: StorageLive(_9)
    SourceInfo(src/regex/bytes.rs:1158:54-1158:68)
  5: StorageLive(_10)
    SourceInfo(src/regex/bytes.rs:1158:54-1158:62)
  6: _10 = &(*_2)
    SourceInfo(src/regex/bytes.rs:1158:54-1158:62)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1158:54-1158:68)
      kind: _9 = core::slice::<impl [u8]>::len(move _10) -> [return: bb2, unwind: bb16]
  }
  preds [bb0]
  succs [bb2, bb16]

bb2
  0: StorageDead(_10)
    SourceInfo(src/regex/bytes.rs:1158:67-1158:68)
  1: _7 = core::ops::Range::<usize> { start: move _8, end: move _9 }
    SourceInfo(src/regex/bytes.rs:1158:47-1158:68)
  2: StorageDead(_9)
    SourceInfo(src/regex/bytes.rs:1158:67-1158:68)
  3: StorageDead(_8)
    SourceInfo(src/regex/bytes.rs:1158:67-1158:68)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1158:21-1158:69)
      kind: _4 = regex_automata::Input::<'_>::span::<core::ops::Range<usize>>(move _5, move _7) -> [return: bb3, unwind: bb16]
  }
  preds [bb1]
  succs [bb3, bb16]

bb3
  0: StorageDead(_7)
    SourceInfo(src/regex/bytes.rs:1158:68-1158:69)
  1: StorageDead(_5)
    SourceInfo(src/regex/bytes.rs:1158:68-1158:69)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(src/regex/bytes.rs:1158:13-1158:18)
  3: StorageLive(_11)
    SourceInfo(src/regex/bytes.rs:1159:13-1159:21)
  4: StorageLive(_12)
    SourceInfo(src/regex/bytes.rs:1159:24-1159:33)
  5: _12 = &((*_1).0: regex_automata::meta::Regex)
    SourceInfo(src/regex/bytes.rs:1159:24-1159:33)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1159:24-1159:51)
      kind: _11 = regex_automata::meta::Regex::create_captures(move _12) -> [return: bb4, unwind: bb16]
  }
  preds [bb2]
  succs [bb4, bb16]

bb4
  0: StorageDead(_12)
    SourceInfo(src/regex/bytes.rs:1159:50-1159:51)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(src/regex/bytes.rs:1159:13-1159:21)
  2: StorageLive(_13)
    SourceInfo(src/regex/bytes.rs:1160:9-1160:45)
  3: StorageLive(_14)
    SourceInfo(src/regex/bytes.rs:1160:9-1160:18)
  4: _14 = &((*_1).0: regex_automata::meta::Regex)
    SourceInfo(src/regex/bytes.rs:1160:9-1160:18)
  5: StorageLive(_15)
    SourceInfo(src/regex/bytes.rs:1160:28-1160:33)
  6: _15 = move _4
    SourceInfo(src/regex/bytes.rs:1160:28-1160:33)
  7: StorageLive(_16)
    SourceInfo(src/regex/bytes.rs:1160:35-1160:44)
  8: StorageLive(_17)
    SourceInfo(src/regex/bytes.rs:1160:35-1160:44)
  9: _17 = &mut _11
    SourceInfo(src/regex/bytes.rs:1160:35-1160:44)
  10: _16 = &mut (*_17)
    SourceInfo(src/regex/bytes.rs:1160:35-1160:44)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1160:9-1160:45)
      kind: _13 = regex_automata::meta::Regex::captures::<'_, regex_automata::Input<'_>>(move _14, move _15, move _16) -> [return: bb5, unwind: bb15]
  }
  preds [bb3]
  succs [bb5, bb15]

bb5
  0: StorageDead(_16)
    SourceInfo(src/regex/bytes.rs:1160:44-1160:45)
  1: StorageDead(_15)
    SourceInfo(src/regex/bytes.rs:1160:44-1160:45)
  2: StorageDead(_14)
    SourceInfo(src/regex/bytes.rs:1160:44-1160:45)
  3: StorageDead(_17)
    SourceInfo(src/regex/bytes.rs:1160:45-1160:46)
  4: StorageDead(_13)
    SourceInfo(src/regex/bytes.rs:1160:45-1160:46)
  5: StorageLive(_18)
    SourceInfo(src/regex/bytes.rs:1161:12-1161:27)
  6: StorageLive(_19)
    SourceInfo(src/regex/bytes.rs:1161:12-1161:16)
  7: _19 = &_11
    SourceInfo(src/regex/bytes.rs:1161:12-1161:16)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1161:12-1161:27)
      kind: _18 = regex_automata::util::captures::Captures::is_match(move _19) -> [return: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1161:12-1161:27)
      kind: switchInt(move _18) -> [0: bb11, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb11]

bb7
  0: StorageDead(_19)
    SourceInfo(src/regex/bytes.rs:1161:26-1161:27)
  1: StorageLive(_20)
    SourceInfo(src/regex/bytes.rs:1162:17-1162:36)
  2: StorageLive(_21)
    SourceInfo(src/regex/bytes.rs:1162:39-1162:43)
  3: _21 = &(*_1)
    SourceInfo(src/regex/bytes.rs:1162:39-1162:43)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1162:39-1162:65)
      kind: _20 = regex::bytes::Regex::static_captures_len(move _21) -> [return: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: StorageDead(_21)
    SourceInfo(src/regex/bytes.rs:1162:64-1162:65)
  1: FakeRead(ForLet(None), _20)
    SourceInfo(src/regex/bytes.rs:1162:17-1162:36)
  2: StorageLive(_22)
    SourceInfo(src/regex/bytes.rs:1163:18-1163:66)
  3: StorageLive(_23)
    SourceInfo(src/regex/bytes.rs:1163:29-1163:37)
  4: _23 = &(*_2)
    SourceInfo(src/regex/bytes.rs:1163:29-1163:37)
  5: StorageLive(_24)
    SourceInfo(src/regex/bytes.rs:1163:39-1163:43)
  6: _24 = move _11
    SourceInfo(src/regex/bytes.rs:1163:39-1163:43)
  7: StorageLive(_25)
    SourceInfo(src/regex/bytes.rs:1163:45-1163:64)
  8: _25 = _20
    SourceInfo(src/regex/bytes.rs:1163:45-1163:64)
  9: _22 = regex::bytes::Captures::<'_> { haystack: move _23, caps: move _24, static_captures_len: move _25 }
    SourceInfo(src/regex/bytes.rs:1163:18-1163:66)
  10: StorageDead(_25)
    SourceInfo(src/regex/bytes.rs:1163:65-1163:66)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1163:65-1163:66)
      kind: drop(_24) -> [return: bb9, unwind: bb14]
  }
  preds [bb7]
  succs [bb9, bb14]

bb9
  0: StorageDead(_24)
    SourceInfo(src/regex/bytes.rs:1163:65-1163:66)
  1: StorageDead(_23)
    SourceInfo(src/regex/bytes.rs:1163:65-1163:66)
  2: _0 = core::option::Option::<regex::bytes::Captures<'_>>::Some(move _22)
    SourceInfo(src/regex/bytes.rs:1163:13-1163:67)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1163:66-1163:67)
      kind: drop(_22) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_22)
    SourceInfo(src/regex/bytes.rs:1163:66-1163:67)
  1: StorageDead(_20)
    SourceInfo(src/regex/bytes.rs:1164:9-1164:10)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1161:9-1166:10)
      kind: goto -> bb12
  }
  preds [bb9]
  succs [bb12]

bb11
  0: StorageDead(_19)
    SourceInfo(src/regex/bytes.rs:1161:26-1161:27)
  1: _0 = core::option::Option::<regex::bytes::Captures<'_>>::None
    SourceInfo(src/regex/bytes.rs:1165:13-1165:17)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1161:9-1166:10)
      kind: goto -> bb12
  }
  preds [bb6]
  succs [bb12]

bb12
  0: StorageDead(_18)
    SourceInfo(src/regex/bytes.rs:1166:9-1166:10)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1167:5-1167:6)
      kind: drop(_11) -> [return: bb13, unwind: bb16]
  }
  preds [bb10, bb11]
  succs [bb13, bb16]

bb13
  0: StorageDead(_11)
    SourceInfo(src/regex/bytes.rs:1167:5-1167:6)
  1: StorageDead(_4)
    SourceInfo(src/regex/bytes.rs:1167:5-1167:6)
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1167:6-1167:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1163:66-1163:67)
      kind: drop(_22) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1167:5-1167:6)
      kind: drop(_11) -> [return: bb16, unwind terminate(cleanup)]
  }
  preds [bb4, bb5, bb7, bb9, bb14]
  succs [bb16]

bb16
  Terminator {
      source_info: SourceInfo(src/regex/bytes.rs:1153:5-1167:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb12, bb15]
  succs []

