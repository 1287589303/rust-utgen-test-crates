bb0
  0: StorageLive(_4)
    SourceInfo(src/regex/string.rs:633:18-633:26)
  1: _4 = &(*_2)
    SourceInfo(src/regex/string.rs:633:18-633:26)
  2: StorageLive(_5)
    SourceInfo(src/regex/string.rs:633:32-633:65)
  3: StorageLive(_6)
    SourceInfo(src/regex/string.rs:633:32-633:41)
  4: _6 = &((*_1).0: regex_automata::meta::Regex)
    SourceInfo(src/regex/string.rs:633:32-633:41)
  5: StorageLive(_7)
    SourceInfo(src/regex/string.rs:633:49-633:57)
  6: _7 = _2
    SourceInfo(src/regex/string.rs:633:49-633:57)
  7: StorageLive(_8)
    SourceInfo(src/regex/string.rs:633:59-633:64)
  8: _8 = _3
    SourceInfo(src/regex/string.rs:633:59-633:64)
  Terminator {
      source_info: SourceInfo(src/regex/string.rs:633:32-633:65)
      kind: _5 = regex_automata::meta::Regex::splitn::<'_, &str>(move _6, move _7, move _8) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_8)
    SourceInfo(src/regex/string.rs:633:64-633:65)
  1: StorageDead(_7)
    SourceInfo(src/regex/string.rs:633:64-633:65)
  2: StorageDead(_6)
    SourceInfo(src/regex/string.rs:633:64-633:65)
  3: _0 = regex::string::SplitN::<'_, '_> { haystack: move _4, it: move _5 }
    SourceInfo(src/regex/string.rs:633:9-633:67)
  Terminator {
      source_info: SourceInfo(src/regex/string.rs:633:66-633:67)
      kind: drop(_5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(src/regex/string.rs:633:66-633:67)
  1: StorageDead(_4)
    SourceInfo(src/regex/string.rs:633:66-633:67)
  Terminator {
      source_info: SourceInfo(src/regex/string.rs:634:6-634:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/regex/string.rs:628:5-634:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

