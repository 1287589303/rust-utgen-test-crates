bb0
  0: StorageLive(_1)
    SourceInfo(src/builders.rs:52:13-52:18)
  1: StorageLive(_2)
    SourceInfo(src/builders.rs:52:21-53:50)
  2: StorageLive(_3)
    SourceInfo(src/builders.rs:52:21-52:40)
  Terminator {
      source_info: SourceInfo(src/builders.rs:52:21-52:40)
      kind: _3 = regex_automata::meta::Config::new() -> [return: bb1, unwind: bb18]
  }
  preds []
  succs [bb1, bb18]

bb1
  0: StorageLive(_4)
    SourceInfo(src/builders.rs:53:29-53:49)
  1: StorageLive(_5)
    SourceInfo(src/builders.rs:53:34-53:48)
  2: StorageLive(_6)
    SourceInfo(src/builders.rs:53:39-53:48)
  3: _7 = const 20_i32 as u32 (IntToInt)
    SourceInfo(src/builders.rs:53:39-53:48)
  4: _8 = Lt(move _7, const 64_u32)
    SourceInfo(src/builders.rs:53:39-53:48)
  Terminator {
      source_info: SourceInfo(src/builders.rs:53:39-53:48)
      kind: assert(move _8, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb2, unwind: bb17]
  }
  preds [bb0]
  succs [bb2, bb17]

bb2
  0: _6 = Shl(const 1_usize, const 20_i32)
    SourceInfo(src/builders.rs:53:39-53:48)
  1: _9 = MulWithOverflow(const 10_usize, _6)
    SourceInfo(src/builders.rs:53:34-53:48)
  Terminator {
      source_info: SourceInfo(src/builders.rs:53:34-53:48)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_usize, move _6) -> [success: bb3, unwind: bb17]
  }
  preds [bb1]
  succs [bb3, bb17]

bb3
  0: _5 = move (_9.0: usize)
    SourceInfo(src/builders.rs:53:34-53:48)
  1: StorageDead(_6)
    SourceInfo(src/builders.rs:53:47-53:48)
  2: _4 = core::option::Option::<usize>::Some(move _5)
    SourceInfo(src/builders.rs:53:29-53:49)
  3: StorageDead(_5)
    SourceInfo(src/builders.rs:53:48-53:49)
  Terminator {
      source_info: SourceInfo(src/builders.rs:52:21-53:50)
      kind: _2 = regex_automata::meta::Config::nfa_size_limit(move _3, move _4) -> [return: bb4, unwind: bb17]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_4)
    SourceInfo(src/builders.rs:53:49-53:50)
  1: StorageDead(_3)
    SourceInfo(src/builders.rs:53:49-53:50)
  2: StorageLive(_10)
    SourceInfo(src/builders.rs:54:36-54:49)
  3: StorageLive(_11)
    SourceInfo(src/builders.rs:54:40-54:49)
  4: _12 = const 20_i32 as u32 (IntToInt)
    SourceInfo(src/builders.rs:54:40-54:49)
  5: _13 = Lt(move _12, const 64_u32)
    SourceInfo(src/builders.rs:54:40-54:49)
  Terminator {
      source_info: SourceInfo(src/builders.rs:54:40-54:49)
      kind: assert(move _13, "attempt to shift left by `{}`, which would overflow", const 20_i32) -> [success: bb5, unwind: bb16]
  }
  preds [bb3]
  succs [bb5, bb16]

bb5
  0: _11 = Shl(const 1_usize, const 20_i32)
    SourceInfo(src/builders.rs:54:40-54:49)
  1: _14 = MulWithOverflow(const 2_usize, _11)
    SourceInfo(src/builders.rs:54:36-54:49)
  Terminator {
      source_info: SourceInfo(src/builders.rs:54:36-54:49)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _11) -> [success: bb6, unwind: bb16]
  }
  preds [bb4]
  succs [bb6, bb16]

bb6
  0: _10 = move (_14.0: usize)
    SourceInfo(src/builders.rs:54:36-54:49)
  1: StorageDead(_11)
    SourceInfo(src/builders.rs:54:48-54:49)
  Terminator {
      source_info: SourceInfo(src/builders.rs:52:21-54:50)
      kind: _1 = regex_automata::meta::Config::hybrid_cache_capacity(move _2, move _10) -> [return: bb7, unwind: bb16]
  }
  preds [bb5]
  succs [bb7, bb16]

bb7
  0: StorageDead(_10)
    SourceInfo(src/builders.rs:54:49-54:50)
  1: StorageDead(_2)
    SourceInfo(src/builders.rs:54:49-54:50)
  2: FakeRead(ForLet(None), _1)
    SourceInfo(src/builders.rs:52:13-52:18)
  3: StorageLive(_15)
    SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
  Terminator {
      source_info: SourceInfo(/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs:44:9-44:32)
      kind: _15 = alloc::vec::Vec::<alloc::string::String>::new() -> [return: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: StorageLive(_16)
    SourceInfo(src/builders.rs:55:33-55:38)
  1: _16 = move _1
    SourceInfo(src/builders.rs:55:33-55:38)
  2: StorageLive(_17)
    SourceInfo(src/builders.rs:55:49-55:74)
  Terminator {
      source_info: SourceInfo(src/builders.rs:55:49-55:74)
      kind: _17 = <regex_automata::util::syntax::Config as core::default::Default>::default() -> [return: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: _0 = builders::Builder { pats: move _15, metac: move _16, syntaxc: move _17 }
    SourceInfo(src/builders.rs:55:9-55:76)
  1: StorageDead(_17)
    SourceInfo(src/builders.rs:55:75-55:76)
  Terminator {
      source_info: SourceInfo(src/builders.rs:55:75-55:76)
      kind: drop(_16) -> [return: bb10, unwind: bb14]
  }
  preds [bb8]
  succs [bb10, bb14]

bb10
  0: StorageDead(_16)
    SourceInfo(src/builders.rs:55:75-55:76)
  Terminator {
      source_info: SourceInfo(src/builders.rs:55:75-55:76)
      kind: drop(_15) -> [return: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: StorageDead(_15)
    SourceInfo(src/builders.rs:55:75-55:76)
  Terminator {
      source_info: SourceInfo(src/builders.rs:56:5-56:6)
      kind: drop(_1) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_1)
    SourceInfo(src/builders.rs:56:5-56:6)
  Terminator {
      source_info: SourceInfo(src/builders.rs:56:6-56:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/builders.rs:55:75-55:76)
      kind: drop(_16) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/builders.rs:55:75-55:76)
      kind: drop(_15) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb9, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/builders.rs:56:5-56:6)
      kind: drop(_1) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb7, bb10, bb14]
  succs [bb18]

bb16
  Terminator {
      source_info: SourceInfo(src/builders.rs:54:49-54:50)
      kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb4, bb5, bb6]
  succs [bb18]

bb17
  Terminator {
      source_info: SourceInfo(src/builders.rs:53:49-53:50)
      kind: drop(_3) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb3]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/builders.rs:51:5-56:6)
      kind: resume
  }
  preds [bb0, bb11, bb15, bb16, bb17]
  succs []

