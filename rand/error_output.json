{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/libc-2480f8b345c68cc9/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/crossbeam-utils-876b3ab42f13e18e/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/libc-384c7caf153dd45a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/getrandom-4537a21348276e8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/zerocopy-e2dcbf5d140aef67/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/rayon-core-5c4347135a2d222f/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/serde-3a1c1b6abf4f2a00/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libeither-9002f41bbd7e6bf4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libeither-9002f41bbd7e6bf4.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/crossbeam-utils-9db73e04703dfb39/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/getrandom-a92d17dcd104f758/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/liblibc-78e719d219e56f98.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/liblibc-78e719d219e56f98.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/zerocopy-022e340a2c34a89a/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/rayon-core-71512b056f3de1f1/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/serde-06a75ab96ceea28d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libzerocopy-85026333d1a1561f.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libzerocopy-85026333d1a1561f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libserde-89fb024451e0eba7.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libserde-89fb024451e0eba7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_core#0.9.3","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_core/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_core/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_core-cb2d1af2ded312d2.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_core-cb2d1af2ded312d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bincode@1.3.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bincode","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libbincode-483ce7c17ae0b728.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libbincode-483ce7c17ae0b728.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_chacha#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_chacha/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_chacha/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_chacha-eccc1acf5d915124.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_chacha-eccc1acf5d915124.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_pcg#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_pcg/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_pcg","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_pcg/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_pcg-1cc8b0b61b5122b4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_pcg-1cc8b0b61b5122b4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon_core-6be1a6f658914dcd.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon_core-6be1a6f658914dcd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon-4242ed74597101c9.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon-4242ed74597101c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0407]: method `try_from_rng` is not a member of trait `TryRngCore`\n   --> src/rngs/reseeding.rs:321:7\n    |\n321 | /       fn try_from_rng<R: RngCore>(rng: &mut R) -> Result<Self, Self::Error> {  \n322 | |           Ok(ValidReseeder)  \n323 | |       }  \n    | |_______^ not a member of trait `TryRngCore`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `try_from_rng` is not a member of trait `TryRngCore`","spans":[{"byte_end":10066,"byte_start":9955,"column_end":8,"column_start":7,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"not a member of trait `TryRngCore`","line_end":323,"line_start":321,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":7,"text":"      fn try_from_rng<R: RngCore>(rng: &mut R) -> Result<Self, Self::Error> {  "},{"highlight_end":30,"highlight_start":1,"text":"          Ok(ValidReseeder)  "},{"highlight_end":8,"highlight_start":1,"text":"      }  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0425]: cannot find value `threshold_max_i64` in this scope\n   --> src/rngs/reseeding.rs:329:61\n    |\n329 |    assert_eq!(ReseedingCore::<ValidRng, ValidReseeder>::new(threshold_max_i64, reseeder).unwrap().threshold, i64::MAX);  \n    |                                                             ^^^^^^^^^^^^^^^^^ not found in this scope\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find value `threshold_max_i64` in this scope","spans":[{"byte_end":10337,"byte_start":10320,"column_end":78,"column_start":61,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"not found in this scope","line_end":329,"line_start":329,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":61,"text":"   assert_eq!(ReseedingCore::<ValidRng, ValidReseeder>::new(threshold_max_i64, reseeder).unwrap().threshold, i64::MAX);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: `()` doesn't implement `core::fmt::Display`\n   --> src/rngs/reseeding.rs:320:20\n    |\n320 |       type Error = ();  \n    |                    ^^ `()` cannot be formatted with the default formatter\n    |\n    = help: the trait `core::fmt::Display` is not implemented for `()`\n    = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\nnote: required by a bound in `rand_core::TryRngCore::Error`\n   --> /home/abezbm/rust-utgen-test-crates/rand/rand_core/src/lib.rs:222:30\n    |\n222 |     type Error: fmt::Debug + fmt::Display;\n    |                              ^^^^^^^^^^^^ required by this bound in `TryRngCore::Error`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the trait `core::fmt::Display` is not implemented for `()`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `rand_core::TryRngCore::Error`","rendered":null,"spans":[{"byte_end":8887,"byte_start":8875,"column_end":42,"column_start":30,"expansion":null,"file_name":"/home/abezbm/rust-utgen-test-crates/rand/rand_core/src/lib.rs","is_primary":true,"label":"required by this bound in `TryRngCore::Error`","line_end":222,"line_start":222,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":30,"text":"    type Error: fmt::Debug + fmt::Display;"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"`()` doesn't implement `core::fmt::Display`","spans":[{"byte_end":9945,"byte_start":9943,"column_end":22,"column_start":20,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"`()` cannot be formatted with the default formatter","line_end":320,"line_start":320,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":20,"text":"      type Error = ();  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `try_next_u32`, `try_next_u64`, `try_fill_bytes`\n   --> src/rngs/reseeding.rs:319:3\n    |\n319 |   impl TryRngCore for ValidReseeder {  \n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `try_next_u32`, `try_next_u64`, `try_fill_bytes` in implementation\n    |\n    = help: implement the missing item: `fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }`\n    = help: implement the missing item: `fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }`\n    = help: implement the missing item: `fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":10071,"byte_start":10071,"column_end":3,"column_start":3,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":"  fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }\n  ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":3,"highlight_start":3,"text":"  }  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":10071,"byte_start":10071,"column_end":3,"column_start":3,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":"  fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }\n  ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":3,"highlight_start":3,"text":"  }  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":10071,"byte_start":10071,"column_end":3,"column_start":3,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":"  fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }\n  ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":3,"highlight_start":3,"text":"  }  "}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `try_next_u32`, `try_next_u64`, `try_fill_bytes`","spans":[{"byte_end":9919,"byte_start":9886,"column_end":36,"column_start":3,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"missing `try_next_u32`, `try_next_u64`, `try_fill_bytes` in implementation","line_end":319,"line_start":319,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":3,"text":"  impl TryRngCore for ValidReseeder {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0277]: the trait bound `MockRng: rand_core::RngCore` is not satisfied\n   --> src/seq/iterator.rs:696:18\n    |\n696 |     impl Rng for MockRng {\n    |                  ^^^^^^^ the trait `DerefMut` is not implemented for `MockRng`, which is required by `MockRng: rand_core::RngCore`\n    |\n    = help: the following other types implement trait `rand_core::RngCore`:\n              BlockRng64<R>\n              BlockRng<R>\n              ChaCha12Rng\n              ChaCha20Rng\n              ChaCha8Rng\n              Lcg128CmDxsm64\n              Lcg128Xsl64\n              Lcg64Xsh32\n            and 9 others\n    = note: required for `MockRng` to implement `rand_core::RngCore`\nnote: required by a bound in `rng::Rng`\n   --> src/rng.rs:58:16\n    |\n58  | pub trait Rng: RngCore {\n    |                ^^^^^^^ required by this bound in `Rng`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the following other types implement trait `rand_core::RngCore`:\n  BlockRng64<R>\n  BlockRng<R>\n  ChaCha12Rng\n  ChaCha20Rng\n  ChaCha8Rng\n  Lcg128CmDxsm64\n  Lcg128Xsl64\n  Lcg64Xsh32\nand 9 others","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required for `MockRng` to implement `rand_core::RngCore`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"required by a bound in `rng::Rng`","rendered":null,"spans":[{"byte_end":2271,"byte_start":2264,"column_end":23,"column_start":16,"expansion":null,"file_name":"src/rng.rs","is_primary":true,"label":"required by this bound in `Rng`","line_end":58,"line_start":58,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":23,"highlight_start":16,"text":"pub trait Rng: RngCore {"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `MockRng: rand_core::RngCore` is not satisfied","spans":[{"byte_end":23406,"byte_start":23399,"column_end":25,"column_start":18,"expansion":null,"file_name":"src/seq/iterator.rs","is_primary":true,"label":"the trait `DerefMut` is not implemented for `MockRng`, which is required by `MockRng: rand_core::RngCore`","line_end":696,"line_start":696,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":18,"text":"    impl Rng for MockRng {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0382]: use of moved value: `iter`\n   --> src/seq/iterator.rs:712:24\n    |\n710 |     let iter = TestIterator { count: 1 }; // Reset to trigger selection\n    |         ---- move occurs because `iter` has type `TestIterator`, which does not implement the `Copy` trait\n711 |     let first_result = iter.choose_stable(rng);\n    |                             ------------------ `iter` moved due to this method call\n712 |    let second_result = iter.choose_stable(rng);\n    |                        ^^^^ value used here after move\n    |\nnote: `iterator::IteratorRandom::choose_stable` takes ownership of the receiver `self`, which moves `iter`\n   --> src/seq/iterator.rs:137:29\n    |\n137 |     fn choose_stable<R>(mut self, rng: &mut R) -> Option<Self::Item>\n    |                             ^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`iterator::IteratorRandom::choose_stable` takes ownership of the receiver `self`, which moves `iter`","rendered":null,"spans":[{"byte_end":5299,"byte_start":5295,"column_end":33,"column_start":29,"expansion":null,"file_name":"src/seq/iterator.rs","is_primary":true,"label":null,"line_end":137,"line_start":137,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":29,"text":"    fn choose_stable<R>(mut self, rng: &mut R) -> Option<Self::Item>"}]}]}],"code":{"code":"E0382","explanation":"A variable was used after its contents have been moved elsewhere.\n\nErroneous code example:\n\n```compile_fail,E0382\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = MyStruct{ s: 5u32 };\n    let y = x;\n    x.s = 6;\n    println!(\"{}\", x.s);\n}\n```\n\nSince `MyStruct` is a type that is not marked `Copy`, the data gets moved out\nof `x` when we set `y`. This is fundamental to Rust's ownership system: outside\nof workarounds like `Rc`, a value cannot be owned by more than one variable.\n\nSometimes we don't need to move the value. Using a reference, we can let another\nfunction borrow the value without changing its ownership. In the example below,\nwe don't actually have to move our string to `calculate_length`, we can give it\na reference to it with `&` instead.\n\n```\nfn main() {\n    let s1 = String::from(\"hello\");\n\n    let len = calculate_length(&s1);\n\n    println!(\"The length of '{}' is {}.\", s1, len);\n}\n\nfn calculate_length(s: &String) -> usize {\n    s.len()\n}\n```\n\nA mutable reference can be created with `&mut`.\n\nSometimes we don't want a reference, but a duplicate. All types marked `Clone`\ncan be duplicated by calling `.clone()`. Subsequent changes to a clone do not\naffect the original variable.\n\nMost types in the standard library are marked `Clone`. The example below\ndemonstrates using `clone()` on a string. `s1` is first set to \"many\", and then\ncopied to `s2`. Then the first character of `s1` is removed, without affecting\n`s2`. \"any many\" is printed to the console.\n\n```\nfn main() {\n    let mut s1 = String::from(\"many\");\n    let s2 = s1.clone();\n    s1.remove(0);\n    println!(\"{} {}\", s1, s2);\n}\n```\n\nIf we control the definition of a type, we can implement `Clone` on it ourselves\nwith `#[derive(Clone)]`.\n\nSome types have no ownership semantics at all and are trivial to duplicate. An\nexample is `i32` and the other number types. We don't have to call `.clone()` to\nclone them, because they are marked `Copy` in addition to `Clone`. Implicit\ncloning is more convenient in this case. We can mark our own types `Copy` if\nall their members also are marked `Copy`.\n\nIn the example below, we implement a `Point` type. Because it only stores two\nintegers, we opt-out of ownership semantics with `Copy`. Then we can\n`let p2 = p1` without `p1` being moved.\n\n```\n#[derive(Copy, Clone)]\nstruct Point { x: i32, y: i32 }\n\nfn main() {\n    let mut p1 = Point{ x: -1, y: 2 };\n    let p2 = p1;\n    p1.x = 1;\n    println!(\"p1: {}, {}\", p1.x, p1.y);\n    println!(\"p2: {}, {}\", p2.x, p2.y);\n}\n```\n\nAlternatively, if we don't control the struct's definition, or mutable shared\nownership is truly required, we can use `Rc` and `RefCell`:\n\n```\nuse std::cell::RefCell;\nuse std::rc::Rc;\n\nstruct MyStruct { s: u32 }\n\nfn main() {\n    let mut x = Rc::new(RefCell::new(MyStruct{ s: 5u32 }));\n    let y = x.clone();\n    x.borrow_mut().s = 6;\n    println!(\"{}\", x.borrow().s);\n}\n```\n\nWith this approach, x and y share ownership of the data via the `Rc` (reference\ncount type). `RefCell` essentially performs runtime borrow checking: ensuring\nthat at most one writer or multiple readers can access the data at any one time.\n\nIf you wish to learn more about ownership in Rust, start with the\n[Understanding Ownership][understanding-ownership] chapter in the Book.\n\n[understanding-ownership]: https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\n"},"level":"error","message":"use of moved value: `iter`","spans":[{"byte_end":24184,"byte_start":24166,"column_end":47,"column_start":29,"expansion":null,"file_name":"src/seq/iterator.rs","is_primary":false,"label":"`iter` moved due to this method call","line_end":711,"line_start":711,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":29,"text":"    let first_result = iter.choose_stable(rng);"}]},{"byte_end":24213,"byte_start":24209,"column_end":28,"column_start":24,"expansion":null,"file_name":"src/seq/iterator.rs","is_primary":true,"label":"value used here after move","line_end":712,"line_start":712,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":28,"highlight_start":24,"text":"   let second_result = iter.choose_stable(rng);"}]},{"byte_end":24078,"byte_start":24074,"column_end":13,"column_start":9,"expansion":null,"file_name":"src/seq/iterator.rs","is_primary":false,"label":"move occurs because `iter` has type `TestIterator`, which does not implement the `Copy` trait","line_end":710,"line_start":710,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":9,"text":"    let iter = TestIterator { count: 1 }; // Reset to trigger selection"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 6 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 6 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0277, E0382, E0407, E0425.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0277, E0382, E0407, E0425.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
{"reason":"build-finished","success":false}
