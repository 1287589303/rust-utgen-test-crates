{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/crossbeam-utils-876b3ab42f13e18e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/libc-2480f8b345c68cc9/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/libc-384c7caf153dd45a/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/crossbeam-utils-9db73e04703dfb39/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/getrandom-4537a21348276e8e/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/liblibc-78e719d219e56f98.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/liblibc-78e719d219e56f98.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/zerocopy-e2dcbf5d140aef67/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/serde-3a1c1b6abf4f2a00/build-script-build"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/getrandom-a92d17dcd104f758/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/zerocopy-022e340a2c34a89a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/rayon-core-5c4347135a2d222f/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/serde-06a75ab96ceea28d/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libeither-9002f41bbd7e6bf4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libeither-9002f41bbd7e6bf4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rmeta"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/rand/target/debug/build/rayon-core-71512b056f3de1f1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libzerocopy-85026333d1a1561f.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libzerocopy-85026333d1a1561f.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libserde-89fb024451e0eba7.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libserde-89fb024451e0eba7.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_core#0.9.3","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_core/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_core/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_core-cb2d1af2ded312d2.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_core-cb2d1af2ded312d2.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bincode@1.3.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bincode","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bincode-1.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libbincode-483ce7c17ae0b728.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/libbincode-483ce7c17ae0b728.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon_core-6be1a6f658914dcd.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon_core-6be1a6f658914dcd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_pcg#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_pcg/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_pcg","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_pcg/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_pcg-1cc8b0b61b5122b4.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_pcg-1cc8b0b61b5122b4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand/rand_chacha#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_chacha/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/abezbm/rust-utgen-test-crates/rand/rand_chacha/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_chacha-eccc1acf5d915124.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librand_chacha-eccc1acf5d915124.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon-4242ed74597101c9.rlib","/home/abezbm/rust-utgen-test-crates/rand/target/debug/deps/librayon-4242ed74597101c9.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0407]: method `next_u32` is not a member of trait `BlockRngCore`\n   --> src/rngs/reseeding.rs:307:8\n    |\n307 |        fn next_u32(&mut self) -> u32 { 44 }  \n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `BlockRngCore`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `next_u32` is not a member of trait `BlockRngCore`","spans":[{"byte_end":9601,"byte_start":9565,"column_end":44,"column_start":8,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"not a member of trait `BlockRngCore`","line_end":307,"line_start":307,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":8,"text":"       fn next_u32(&mut self) -> u32 { 44 }  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0407]: method `next_u64` is not a member of trait `BlockRngCore`\n   --> src/rngs/reseeding.rs:308:8\n    |\n308 |        fn next_u64(&mut self) -> u64 { 0 } // Added next_u64 method  \n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `BlockRngCore`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0407","explanation":"A definition of a method not in the implemented trait was given in a trait\nimplementation.\n\nErroneous code example:\n\n```compile_fail,E0407\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // error: method `b` is not a member of trait `Foo`\n}\n```\n\nPlease verify you didn't misspell the method name and you used the correct\ntrait. First example:\n\n```\ntrait Foo {\n    fn a();\n    fn b();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n    fn b() {} // ok!\n}\n```\n\nSecond example:\n\n```\ntrait Foo {\n    fn a();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn a() {}\n}\n\nimpl Bar {\n    fn b() {}\n}\n```\n"},"level":"error","message":"method `next_u64` is not a member of trait `BlockRngCore`","spans":[{"byte_end":9646,"byte_start":9611,"column_end":43,"column_start":8,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"not a member of trait `BlockRngCore`","line_end":308,"line_start":308,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":43,"highlight_start":8,"text":"       fn next_u64(&mut self) -> u64 { 0 } // Added next_u64 method  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0425]: cannot find value `expected_size` in this scope\n   --> src/rngs/reseeding.rs:323:44\n    |\n323 |    assert_eq!(size_of_val(&reseeding_rng), expected_size);  \n    |                                            ^^^^^^^^^^^^^ not found in this scope\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","message":"cannot find value `expected_size` in this scope","spans":[{"byte_end":10114,"byte_start":10101,"column_end":57,"column_start":44,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"not found in this scope","line_end":323,"line_start":323,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":44,"text":"   assert_eq!(size_of_val(&reseeding_rng), expected_size);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `Results`, `generate`\n   --> src/rngs/reseeding.rs:305:4\n    |\n305 |    impl BlockRngCore for MockRng {  \n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Results`, `generate` in implementation\n    |\n    = help: implement the missing item: `type Results = /* Type */;`\n    = help: implement the missing item: `fn generate(&mut self, _: &mut <Self as rand_core::block::BlockRngCore>::Results) { todo!() }`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `type Results = /* Type */;`","rendered":null,"spans":[{"byte_end":9677,"byte_start":9677,"column_end":4,"column_start":4,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":309,"line_start":309,"suggested_replacement":"   type Results = /* Type */;\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":4,"highlight_start":4,"text":"   }  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn generate(&mut self, _: &mut <Self as rand_core::block::BlockRngCore>::Results) { todo!() }`","rendered":null,"spans":[{"byte_end":9677,"byte_start":9677,"column_end":4,"column_start":4,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":309,"line_start":309,"suggested_replacement":"   fn generate(&mut self, _: &mut <Self as rand_core::block::BlockRngCore>::Results) { todo!() }\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":4,"highlight_start":4,"text":"   }  "}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `Results`, `generate`","spans":[{"byte_end":9527,"byte_start":9498,"column_end":33,"column_start":4,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"missing `Results`, `generate` in implementation","line_end":305,"line_start":305,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":33,"highlight_start":4,"text":"   impl BlockRngCore for MockRng {  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0046]: not all trait items implemented, missing: `Error`, `try_next_u32`, `try_next_u64`, `try_fill_bytes`\n   --> src/rngs/reseeding.rs:311:4\n    |\n311 |    impl TryRngCore for MockReseeder {}  \n    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Error`, `try_next_u32`, `try_next_u64`, `try_fill_bytes` in implementation\n    |\n    = help: implement the missing item: `type Error = /* Type */;`\n    = help: implement the missing item: `fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }`\n    = help: implement the missing item: `fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }`\n    = help: implement the missing item: `fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"implement the missing item: `type Error = /* Type */;`","rendered":null,"spans":[{"byte_end":9744,"byte_start":9744,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":311,"line_start":311,"suggested_replacement":"   type Error = /* Type */;\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":38,"text":"   impl TryRngCore for MockReseeder {}  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":9744,"byte_start":9744,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":311,"line_start":311,"suggested_replacement":"   fn try_next_u32(&mut self) -> Result<u32, <Self as rand_core::TryRngCore>::Error> { todo!() }\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":38,"text":"   impl TryRngCore for MockReseeder {}  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":9744,"byte_start":9744,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":311,"line_start":311,"suggested_replacement":"   fn try_next_u64(&mut self) -> Result<u64, <Self as rand_core::TryRngCore>::Error> { todo!() }\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":38,"text":"   impl TryRngCore for MockReseeder {}  "}]}]},{"children":[],"code":null,"level":"help","message":"implement the missing item: `fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }`","rendered":null,"spans":[{"byte_end":9744,"byte_start":9744,"column_end":38,"column_start":38,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":311,"line_start":311,"suggested_replacement":"   fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), <Self as rand_core::TryRngCore>::Error> { todo!() }\n   ","suggestion_applicability":"HasPlaceholders","text":[{"highlight_end":38,"highlight_start":38,"text":"   impl TryRngCore for MockReseeder {}  "}]}]}],"code":{"code":"E0046","explanation":"Items are missing in a trait implementation.\n\nErroneous code example:\n\n```compile_fail,E0046\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {}\n// error: not all trait items implemented, missing: `foo`\n```\n\nWhen trying to make some type implement a trait `Foo`, you must, at minimum,\nprovide implementations for all of `Foo`'s required methods (meaning the\nmethods that do not have default implementations), as well as any required\ntrait items like associated types or constants. Example:\n\n```\ntrait Foo {\n    fn foo();\n}\n\nstruct Bar;\n\nimpl Foo for Bar {\n    fn foo() {} // ok!\n}\n```\n"},"level":"error","message":"not all trait items implemented, missing: `Error`, `try_next_u32`, `try_next_u64`, `try_fill_bytes`","spans":[{"byte_end":9742,"byte_start":9710,"column_end":36,"column_start":4,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"missing `Error`, `try_next_u32`, `try_next_u64`, `try_fill_bytes` in implementation","line_end":311,"line_start":311,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":4,"text":"   impl TryRngCore for MockReseeder {}  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/rngs/reseeding.rs:321:41\n    |\n321 |    let mut reseeding_rng = ReseedingRng(core); // Added mut  \n    |                            ------------ ^^^^ expected `BlockRng<ReseedingCore<_, _>>`, found `ReseedingCore<MockRng, ...>`\n    |                            |\n    |                            arguments to this struct are incorrect\n    |\n    = note: expected struct `BlockRng<reseeding::ReseedingCore<_, _>>`\n               found struct `reseeding::ReseedingCore<MockRng, MockReseeder>`\nnote: tuple struct defined here\n   --> src/rngs/reseeding.rs:74:12\n    |\n74  | pub struct ReseedingRng<R, Rsdr>(BlockRng<ReseedingCore<R, Rsdr>>)\n    |            ^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `BlockRng<reseeding::ReseedingCore<_, _>>`\n   found struct `reseeding::ReseedingCore<MockRng, MockReseeder>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"tuple struct defined here","rendered":null,"spans":[{"byte_end":3013,"byte_start":3001,"column_end":24,"column_start":12,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":74,"line_start":74,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":24,"highlight_start":12,"text":"pub struct ReseedingRng<R, Rsdr>(BlockRng<ReseedingCore<R, Rsdr>>)"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":9993,"byte_start":9989,"column_end":45,"column_start":41,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"expected `BlockRng<ReseedingCore<_, _>>`, found `ReseedingCore<MockRng, ...>`","line_end":321,"line_start":321,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":41,"text":"   let mut reseeding_rng = ReseedingRng(core); // Added mut  "}]},{"byte_end":9988,"byte_start":9976,"column_end":40,"column_start":28,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":false,"label":"arguments to this struct are incorrect","line_end":321,"line_start":321,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":28,"text":"   let mut reseeding_rng = ReseedingRng(core); // Added mut  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `bytes_until_reseed` on type `reseeding::ReseedingRng<_, _>`\n   --> src/rngs/reseeding.rs:324:26\n    |\n324 |    assert!(reseeding_rng.bytes_until_reseed > 0);  \n    |                          ^^^^^^^^^^^^^^^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n324 |    assert!(reseeding_rng.0.core.bytes_until_reseed > 0);  \n    |                          +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":10144,"byte_start":10144,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":324,"line_start":324,"suggested_replacement":"0.core.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":26,"highlight_start":26,"text":"   assert!(reseeding_rng.bytes_until_reseed > 0);  "}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `bytes_until_reseed` on type `reseeding::ReseedingRng<_, _>`","spans":[{"byte_end":10162,"byte_start":10144,"column_end":44,"column_start":26,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"unknown field","line_end":324,"line_start":324,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":26,"text":"   assert!(reseeding_rng.bytes_until_reseed > 0);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0609]: no field `threshold` on type `reseeding::ReseedingRng<_, _>`\n   --> src/rngs/reseeding.rs:325:26\n    |\n325 |    assert!(reseeding_rng.threshold > 0);  \n    |                          ^^^^^^^^^ unknown field\n    |\nhelp: one of the expressions' fields has a field of the same name\n    |\n325 |    assert!(reseeding_rng.0.core.threshold > 0);  \n    |                          +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"one of the expressions' fields has a field of the same name","rendered":null,"spans":[{"byte_end":10196,"byte_start":10196,"column_end":26,"column_start":26,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":null,"line_end":325,"line_start":325,"suggested_replacement":"0.core.","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":26,"highlight_start":26,"text":"   assert!(reseeding_rng.threshold > 0);  "}]}]}],"code":{"code":"E0609","explanation":"Attempted to access a nonexistent field in a struct.\n\nErroneous code example:\n\n```compile_fail,E0609\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.foo); // error: no field `foo` on type `StructWithFields`\n```\n\nTo fix this error, check that you didn't misspell the field's name or that the\nfield actually exists. Example:\n\n```\nstruct StructWithFields {\n    x: u32,\n}\n\nlet s = StructWithFields { x: 0 };\nprintln!(\"{}\", s.x); // ok!\n```\n"},"level":"error","message":"no field `threshold` on type `reseeding::ReseedingRng<_, _>`","spans":[{"byte_end":10205,"byte_start":10196,"column_end":35,"column_start":26,"expansion":null,"file_name":"src/rngs/reseeding.rs","is_primary":true,"label":"unknown field","line_end":325,"line_start":325,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":26,"text":"   assert!(reseeding_rng.threshold > 0);  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 8 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 8 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0046, E0308, E0407, E0425, E0609.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0046, E0308, E0407, E0425, E0609.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/rand#0.9.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/rand/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/rust-utgen-test-crates/rand/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0046`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0046`.","spans":[]}}
{"reason":"build-finished","success":false}
