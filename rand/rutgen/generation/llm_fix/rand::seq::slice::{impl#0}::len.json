{
  "name": "rand::seq::slice::{impl#0}::len",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:369:5:371:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Self must be a non-empty slice or an empty slice of any type T; expected return values are 0 for empty slices and a positive integer for non-empty slices with varying lengths.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[];",
                "    let length = slice.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);",
                "    let slice: &[u8] = &[1, 2, 3];",
                "    let length = slice.len();",
                "    assert_eq!(length, 3);",
                "    let slice: &[u8] = &[1];",
                "    let length = slice.len();",
                "    assert_eq!(length, 1);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[];",
                "    let length = slice.len();",
                "    assert_eq!(length, 0);",
                "    let slice: &[u8] = &[1, 2, 3];",
                "    let length = slice.len();",
                "    assert_eq!(length, 3);",
                "    let slice: &[u8] = &[1];",
                "    let length = slice.len();",
                "    assert_eq!(length, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[i32] = &[1, 2, 3];",
                "    let length = slice.len();",
                "}"
              ],
              "oracle": [
                "    let slice: &[i32] = &[1, 2, 3];",
                "    let expected_length: usize = 3;",
                "    assert_eq!(length, expected_length);"
              ],
              "code": [
                "{",
                "    let slice: &[i32] = &[1, 2, 3];",
                "    let length = slice.len();",
                "    let slice: &[i32] = &[1, 2, 3];",
                "    let expected_length: usize = 3;",
                "    assert_eq!(length, expected_length);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[f64] = &[3.14];",
                "    let length = slice.len();",
                "}"
              ],
              "oracle": [
                "    length == 1",
                "    length > 0",
                "    slice.is_empty() == false",
                "    slice.len() == 1"
              ],
              "code": [
                "{",
                "    let slice: &[f64] = &[3.14];",
                "    let length = slice.len();",
                "   assert_eq!(length, 1);",
                "   assert!(length > 0);",
                "   assert!(!slice.is_empty());",
                "   assert_eq!(slice.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u8] = &[0; 1000];",
                "    let length = slice.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1000);"
              ],
              "code": [
                "{",
                "    let slice: &[u8] = &[0; 1000];",
                "    let length = slice.len();",
                "    assert_eq!(length, 1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[&str] = &[\"rust\", \"is\", \"fun\"];",
                "    let length = slice.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.len(), 3);",
                "    assert_eq!(&slice[0], &\"rust\");",
                "    assert_eq!(&slice[1], &\"is\");",
                "    assert_eq!(&slice[2], &\"fun\");",
                "    assert_eq!(slice.len(), length);",
                "    assert!(slice.choose(&rng).is_some());",
                "    assert!(slice.choose_multiple(&rng, 2).len() <= 2);"
              ],
              "code": [
                "{",
                "   let slice: &[&str] = &[\"rust\", \"is\", \"fun\"];",
                "   let length = slice.len();",
                "   assert_eq!(length, 3);",
                "   assert!(!slice.is_empty());",
                "   assert_eq!(slice.len(), 3);",
                "   assert_eq!(&slice[0], &\"rust\");",
                "   assert_eq!(&slice[1], &\"is\");",
                "   assert_eq!(&slice[2], &\"fun\");",
                "   assert_eq!(slice.len(), length);",
                "   let mut rng = crate::test::rng(414);",
                "   assert!(slice.choose(&mut rng).is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}