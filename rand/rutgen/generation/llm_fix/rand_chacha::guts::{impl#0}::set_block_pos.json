{
  "name": "rand_chacha::guts::{impl#0}::set_block_pos",
  "mod_info": {
    "name": "guts",
    "loc": "rand_chacha/src/lib.rs:97:1:97:10"
  },
  "visible": true,
  "loc": "rand_chacha/src/guts.rs:85:5:87:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "value: u64 must be within the range [0, 2^64 - 1] for valid input and to cover edge scenarios including 0, 1, 2^64 - 1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(chacha.get_block_pos(), 0);",
                "    chacha.set_block_pos(1);",
                "    assert_eq!(chacha.get_block_pos(), 1);",
                "    chacha.set_block_pos(u64::MAX);",
                "    assert_eq!(chacha.get_block_pos(), u64::MAX);",
                "    chacha.set_block_pos(42);",
                "    assert_eq!(chacha.get_block_pos(), 42);"
              ],
              "code": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(0);",
                "    assert_eq!(chacha.get_block_pos(), 0);",
                "    chacha.set_block_pos(1);",
                "    assert_eq!(chacha.get_block_pos(), 1);",
                "    chacha.set_block_pos(u64::MAX);",
                "    assert_eq!(chacha.get_block_pos(), u64::MAX);",
                "    chacha.set_block_pos(42);",
                "    assert_eq!(chacha.get_block_pos(), 42);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(chacha.get_block_pos(), 1);"
              ],
              "code": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(1);",
                "    assert_eq!(chacha.get_block_pos(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(u64::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(chacha.get_block_pos(), u64::MAX);"
              ],
              "code": [
                "{",
                "    let key = [0; 32];",
                "    let nonce = [0; 12];",
                "    let mut chacha = ChaCha::new(&key, &nonce);",
                "    chacha.set_block_pos(u64::MAX);",
                "    assert_eq!(chacha.get_block_pos(), u64::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}