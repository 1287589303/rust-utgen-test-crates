{
  "name": "rand_pcg::pcg128::{impl#4}::advance",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:191:5:208:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: mdelta > 0 at line 198 is true\n",
        "precondition: (mdelta & 1) != 0 at line 199 is true\n",
        "precondition: mdelta > 0 at line 198 is false, with bound mdelta == 0\n"
      ],
      "input_infer": "delta: 1 to UINT128_MAX (inclusive) for positive values; delta == 0 for boundary case; including scenarios where delta is a power of two, odd values, and values just below powers of two.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_advance_2);",
                "    rng.advance(4);",
                "    assert_eq!(rng.state, expected_state_after_advance_4);",
                "    rng.advance(8);",
                "    assert_eq!(rng.state, expected_state_after_advance_8);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
                "    rng.advance(u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_advance_max);",
                "    rng.advance(1);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_advance_2);",
                "    rng.advance(4);",
                "    assert_eq!(rng.state, expected_state_after_advance_4);",
                "    rng.advance(8);",
                "    assert_eq!(rng.state, expected_state_after_advance_8);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
                "    rng.advance(u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_advance_max);",
                "    rng.advance(1);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_state_after_advance_with_delta_3);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, initial_state);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_delta_1);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(3);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_delta_3);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, initial_state);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_delta_1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(16);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_state_after_16_advance);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_1_advance);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_2_advance);",
                "    rng.advance(4);",
                "    assert_eq!(rng.state, expected_state_after_4_advance);",
                "    rng.advance(8);",
                "    assert_eq!(rng.state, expected_state_after_8_advance);",
                "    rng.advance(3);",
                "    assert_eq!(rng.state, expected_state_after_3_advance);",
                "    rng.advance(15);",
                "    assert_eq!(rng.state, expected_state_after_15_advance);",
                "    rng.advance(32);",
                "    assert_eq!(rng.state, expected_state_after_32_advance);",
                "    rng.advance(u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_max_advance);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(16);",
                "    assert_eq!(rng.state, expected_state_after_16_advance);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_1_advance);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_2_advance);",
                "    rng.advance(4);",
                "    assert_eq!(rng.state, expected_state_after_4_advance);",
                "    rng.advance(8);",
                "    assert_eq!(rng.state, expected_state_after_8_advance);",
                "    rng.advance(3);",
                "    assert_eq!(rng.state, expected_state_after_3_advance);",
                "    rng.advance(15);",
                "    assert_eq!(rng.state, expected_state_after_15_advance);",
                "    rng.advance(32);",
                "    assert_eq!(rng.state, expected_state_after_32_advance);",
                "    rng.advance(u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_max_advance);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(15);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_state_after_15_advance);",
                "    assert_eq!(rng.state & 1, 1);",
                "    assert!(rng.state > 0);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(15);",
                "    assert_eq!(rng.state, expected_state_after_15_advance);",
                "    assert_eq!(rng.state & 1, 1);",
                "    assert!(rng.state > 0);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef | 1);",
                "    rng.advance(1);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
                "    rng.advance(2);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(10);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(5);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(u128::MAX);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef | 1);",
                "    rng.advance(1);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
                "    rng.advance(2);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(10);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(5);",
                "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
                "    rng.advance(u128::MAX);",
                "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: mdelta > 0 at line 198 is true\n",
        "precondition: (mdelta & 1) != 0 at line 199 is false\n",
        "precondition: mdelta > 0 at line 198 is false, with bound mdelta == 0\n"
      ],
      "input_infer": "mdelta > 0 (positive integers), mdelta == 0 (zero)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 12345); // Check state after advancing with delta = 5, mdelta should be > 0 at line 198 is true",
                "    ",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(6); // The value of mdelta = 6 leads to (mdelta & 1) != 0 being false which means iterations on both sides.",
                "    assert_eq!(rng.state, 67890); // Dummy expected state for delta = 6, replace with actual expected state.",
                "    ",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(0); // Check when delta is 0, mdelta > 0 at line 198 is false",
                "    assert_eq!(rng.state, 12345); // State should remain unchanged for delta = 0."
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(5);",
                "    assert_eq!(rng.state, 12345); // Check state after advancing with delta = 5, mdelta should be > 0 at line 198 is true",
                "    ",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(6); // The value of mdelta = 6 leads to (mdelta & 1) != 0 being false which means iterations on both sides.",
                "    assert_eq!(rng.state, 67890); // Dummy expected state for delta = 6, replace with actual expected state.",
                "    ",
                "    let mut rng = Mcg128Xsl64::new(12345);",
                "    rng.advance(0); // Check when delta is 0, mdelta > 0 at line 198 is false",
                "    assert_eq!(rng.state, 12345); // State should remain unchanged for delta = 0.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(67890);",
                "    rng.advance(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_4);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 67891); // state should remain unchanged when delta is 0",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_1);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_2);",
                "    rng.advance(3);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_3);",
                "    rng.advance(5);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_5);",
                "    rng.advance(std::u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_max);",
                "    rng.advance(0); // checking for no change",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_4);  // should still match expected_state_after_advance_with_mdelta_4"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(67890);",
                "    rng.advance(4);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_4);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 67891); // state should remain unchanged when delta is 0",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_1);",
                "    rng.advance(2);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_2);",
                "    rng.advance(3);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_3);",
                "    rng.advance(5);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_5);",
                "    rng.advance(std::u128::MAX);",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_max);",
                "    rng.advance(0); // checking for no change",
                "    assert_eq!(rng.state, expected_state_after_advance_with_mdelta_4);  // should still match expected_state_after_advance_with_mdelta_4",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(13579);",
                "    rng.advance(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 13579 | 1);",
                "    let mut rng = Mcg128Xsl64::new(13579);",
                "    rng.advance(1);",
                "    assert!(rng.state > 13579 | 1);",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2);",
                "    assert!(rng.state > 1);",
                "    let mut rng = Mcg128Xsl64::new(15);",
                "    rng.advance(3);",
                "    assert!(rng.state > 15);",
                "    let mut rng = Mcg128Xsl64::new(0);",
                "    rng.advance(10);",
                "    assert!(rng.state > 0);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(13579);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 13579 | 1);",
                "    let mut rng = Mcg128Xsl64::new(13579);",
                "    rng.advance(1);",
                "    assert!(rng.state > 13579 | 1);",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2);",
                "    assert!(rng.state > 1);",
                "    let mut rng = Mcg128Xsl64::new(15);",
                "    rng.advance(3);",
                "    assert!(rng.state > 15);",
                "    let mut rng = Mcg128Xsl64::new(0);",
                "    rng.advance(10);",
                "    assert!(rng.state > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: mdelta > 0 at line 198 is false, with bound mdelta == 0\n"
      ],
      "input_infer": "delta = 0, delta = 1, delta = (2^63 - 1), delta = (2^64), and delta = (2^128 - 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 1 | 1);",
                "    assert_eq!(rng.state, 2);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 2);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(1);",
                "    assert_eq!(rng.state, 1 | 1);",
                "    assert_eq!(rng.state, 2);",
                "    rng.advance(0);",
                "    assert_eq!(rng.state, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(63) - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(63) - 1);",
                "    assert_eq!(rng.state, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(64));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(64));",
                "    assert_eq!(rng.state, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(128) - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 1);  // Initial state should remain unchanged when delta is 0.",
                "    assert!(rng.state > 0);  // State should always be greater than 0."
              ],
              "code": [
                "{",
                "    let mut rng = Mcg128Xsl64::new(1);",
                "    rng.advance(2u128.pow(128) - 1);",
                "    assert_eq!(rng.state, 1);  // Initial state should remain unchanged when delta is 0.",
                "    assert!(rng.state > 0);  // State should always be greater than 0.",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}