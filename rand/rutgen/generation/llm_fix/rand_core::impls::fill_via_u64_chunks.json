{
  "name": "rand_core::impls::fill_via_u64_chunks",
  "mod_info": {
    "name": "impls",
    "loc": "rand_core/src/lib.rs:44:1:44:15"
  },
  "visible": true,
  "loc": "rand_core/src/impls.rs:156:1:158:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "src: non-empty array of u64 (size >= 1), dest: array of u8 (size >= 8) to size <= 64, expected return values: (consumed_u64, filled_u8) where 0 <= consumed_u64 <= length of src and 0 <= filled_u8 <= length of dest.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut src: [u64; 1] = [0x0102030405060708];",
                "    let mut dest: [u8; 8] = [0; 8];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1, 8));",
                "    assert_eq!(dest, [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]);",
                "    assert_eq!(src, [0x0102030405060708]);",
                "    assert!(dest.len() <= 8);",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());"
              ],
              "code": [
                "{",
                "    let mut src: [u64; 1] = [0x0102030405060708];",
                "    let mut dest: [u8; 8] = [0; 8];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "    assert_eq!(result, (1, 8));",
                "    assert_eq!(dest, [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01]);",
                "    assert_eq!(src, [0x0102030405060708]);",
                "    assert!(dest.len() <= 8);",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut src: [u64; 2] = [0x0102030405060708, 0x090A0B0C0D0E0F10];",
                "    let mut dest: [u8; 16] = [0; 16];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "}"
              ],
              "oracle": [
                "    let mut src: [u64; 2] = [0x0102030405060708, 0x090A0B0C0D0E0F10];",
                "    let mut dest: [u8; 16] = [0; 16];",
                "    let expected_dest: [u8; 16] = [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09];",
                "    let expected_result: (usize, usize) = (2, 16);",
                "    assert_eq!(dest, expected_dest);",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let mut src: [u64; 2] = [0x0102030405060708, 0x090A0B0C0D0E0F10];",
                "    let mut dest: [u8; 16] = [0; 16];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "    let mut src: [u64; 2] = [0x0102030405060708, 0x090A0B0C0D0E0F10];",
                "    let mut dest: [u8; 16] = [0; 16];",
                "    let expected_dest: [u8; 16] = [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09];",
                "    let expected_result: (usize, usize) = (2, 16);",
                "    assert_eq!(dest, expected_dest);",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut src: [u64; 4] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20];",
                "    let mut dest: [u8; 32] = [0; 32];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (4, 32));",
                "    assert_eq!(dest, [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x20, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19]);",
                "    assert_eq!(src, [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20]);"
              ],
              "code": [
                "{",
                "    let mut src: [u64; 4] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20];",
                "    let mut dest: [u8; 32] = [0; 32];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "    assert_eq!(result, (4, 32));",
                "    assert_eq!(dest, [0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x10, 0x0F, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x20, 0x1F, 0x1E, 0x1D, 0x1C, 0x1B, 0x1A, 0x19]);",
                "    assert_eq!(src, [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut src: [u64; 3] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718];",
                "    let mut dest: [u8; 20] = [0; 20];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (3, 20));",
                "    assert_eq!(dest, [8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0]);",
                "    assert_eq!(src, [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718]);",
                "    assert!(dest.len() >= 20);",
                "    assert!(src.len() == 3);",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());"
              ],
              "code": [
                "{",
                "    let mut src: [u64; 3] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718];",
                "    let mut dest: [u8; 20] = [0; 20];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "    assert_eq!(result, (3, 20));",
                "    assert_eq!(dest, [8, 7, 6, 5, 4, 3, 2, 1, 16, 17, 18, 19, 0, 0, 0, 0, 0, 0, 0, 0]);",
                "    assert_eq!(src, [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718]);",
                "    assert!(dest.len() >= 20);",
                "    assert!(src.len() == 3);",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut src: [u64; 5] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20, 0x2122232425262728];",
                "    let mut dest: [u8; 48] = [0; 48];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (6, 48));",
                "    assert_eq!(dest, [8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 24, 23, 22, 21, 20, 19, 18, 17, 32, 31, 30, 29, 28, 27, 26, 25, 40, 39, 38, 37, 36, 35, 34, 33]);",
                "    assert!(dest.iter().all(|&x| x != 0));",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());",
                "    assert_eq!(dest.len() % 8, 0);"
              ],
              "code": [
                "{",
                "    let mut src: [u64; 5] = [0x0102030405060708, 0x090A0B0C0D0E0F10, 0x1112131415161718, 0x191A1B1C1D1E1F20, 0x2122232425262728];",
                "    let mut dest: [u8; 48] = [0; 48];",
                "    let result = fill_via_u64_chunks(&mut src, &mut dest);",
                "    assert_eq!(result, (6, 48));",
                "    assert_eq!(dest, [8, 7, 6, 5, 4, 3, 2, 1, 16, 15, 14, 13, 12, 11, 10, 9, 24, 23, 22, 21, 20, 19, 18, 17, 32, 31, 30, 29, 28, 27, 26, 25, 40, 39, 38, 37, 36, 35, 34, 33]);",
                "    assert!(dest.iter().all(|&x| x != 0));",
                "    assert!(result.0 <= src.len());",
                "    assert!(result.1 <= dest.len());",
                "    assert_eq!(dest.len() % 8, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}