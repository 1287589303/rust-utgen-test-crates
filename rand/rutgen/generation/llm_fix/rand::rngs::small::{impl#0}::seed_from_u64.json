{
  "name": "rand::rngs::small::{impl#0}::seed_from_u64",
  "mod_info": {
    "name": "rngs::small",
    "loc": "src/rngs/mod.rs:87:1:87:11"
  },
  "visible": true,
  "loc": "src/rngs/small.rs:100:5:102:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SmallRng(Rng::seed_from_u64(state))\n"
      ],
      "input_infer": "state: u64 values within the full range of 0 to 2^64-1, including boundary values 0 and 2^64-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u64 = 0;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    assert!(matches!(rng, SmallRng(_)));",
                "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of::<SmallRng>());",
                "    assert!(rng.0.s != [0; 4]);",
                "    assert_eq!(rng, SmallRng::seed_from_u64(0));",
                "    assert_ne!(rng, SmallRng::seed_from_u64(1));",
                "    assert!(rng.0.s.iter().all(|&x| x != 0));",
                "    assert_eq!(rng.0.s.len(), 4);",
                "    assert_eq!(rng.0.s[0], rng.0.s[1]);",
                "    assert!(rng.0.s[0] != rng.0.s[2]);",
                "    assert!(rng.0.s[1] != rng.0.s[3]);"
              ],
              "code": [
                "{",
                "    let state: u64 = 0;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    assert!(matches!(rng, SmallRng(_)));",
                "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of::<SmallRng>());",
                "    assert!(rng.0.s != [0; 4]);",
                "    assert_eq!(rng, SmallRng::seed_from_u64(0));",
                "    assert_ne!(rng, SmallRng::seed_from_u64(1));",
                "    assert!(rng.0.s.iter().all(|&x| x != 0));",
                "    assert_eq!(rng.0.s.len(), 4);",
                "    assert_eq!(rng.0.s[0], rng.0.s[1]);",
                "    assert!(rng.0.s[0] != rng.0.s[2]);",
                "    assert!(rng.0.s[1] != rng.0.s[3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u64 = 1;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(1)));"
              ],
              "code": [
                "{",
                "    let state: u64 = 1;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(1)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u64 = 1 << 32;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "}"
              ],
              "oracle": [
                "    let state: u64 = 1 << 32;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    assert!(rng == SmallRng(Rng::seed_from_u64(state)));",
                "    assert!(std::mem::size_of_val(&rng) == std::mem::size_of::<SmallRng>());",
                "    assert!(rng.0.s != [0; 4]);"
              ],
              "code": [
                "{",
                "    let state: u64 = 1 << 32;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    let state: u64 = 1 << 32;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    assert!(rng == SmallRng(Rng::seed_from_u64(state)));",
                "    assert!(std::mem::size_of_val(&rng) == std::mem::size_of::<SmallRng>());",
                "    assert!(rng.0.s != [0; 4]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u64 = u64::MAX;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.0.s[0], expected_value_0);",
                "    assert_eq!(rng.0.s[1], expected_value_1);",
                "    assert_eq!(rng.0.s[2], expected_value_2);",
                "    assert_eq!(rng.0.s[3], expected_value_3);",
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(state)));",
                "    assert!(rng.0.s.iter().all(|&x| x != 0));",
                "    assert!(rng.0.s[0] < u64::MAX);",
                "    assert!(rng.0.s[1] < u64::MAX);",
                "    assert!(rng.0.s[2] < u64::MAX);",
                "    assert!(rng.0.s[3] < u64::MAX);"
              ],
              "code": [
                "{",
                "    let state: u64 = u64::MAX;",
                "    let rng = SmallRng::seed_from_u64(state);",
                "    assert_eq!(rng.0.s[0], expected_value_0);",
                "    assert_eq!(rng.0.s[1], expected_value_1);",
                "    assert_eq!(rng.0.s[2], expected_value_2);",
                "    assert_eq!(rng.0.s[3], expected_value_3);",
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(state)));",
                "    assert!(rng.0.s.iter().all(|&x| x != 0));",
                "    assert!(rng.0.s[0] < u64::MAX);",
                "    assert!(rng.0.s[1] < u64::MAX);",
                "    assert!(rng.0.s[2] < u64::MAX);",
                "    assert!(rng.0.s[3] < u64::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}