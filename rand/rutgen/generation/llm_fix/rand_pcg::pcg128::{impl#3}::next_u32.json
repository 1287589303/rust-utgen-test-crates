{
  "name": "rand_pcg::pcg128::{impl#3}::next_u32",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:141:5:143:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.next_u64() as u32\n"
      ],
      "input_infer": "self.state and self.increment must be valid u128 values; test input range for self.state: [0, U128_MAX], for self.increment: [0, U128_MAX]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 0, increment: 0 };",
                "    let result = rng.next_u32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 0, increment: 0 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 0, increment: 1 };",
                "    let result = rng.next_u32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, expected_value);",
                "    assert!(result >= 0);",
                "    assert!(result <= u32::MAX);",
                "    assert_eq!(rng.state, expected_state_after_call);",
                "    assert_eq!(rng.increment, 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 0, increment: 1 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, expected_value);",
                "    assert!(result >= 0);",
                "    assert!(result <= u32::MAX);",
                "    assert_eq!(rng.state, expected_state_after_call);",
                "    assert_eq!(rng.increment, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX, increment: 0 };",
                "    let result = rng.next_u32();",
                "}"
              ],
              "oracle": [
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX, increment: 0 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result <= u32::MAX);",
                "    rng.state = 0;",
                "    assert_eq!(rng.next_u32(), 0);",
                "    rng.increment = 1;",
                "    assert!(rng.next_u32() > 0);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX, increment: 0 };",
                "    let result = rng.next_u32();",
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX, increment: 0 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result <= u32::MAX);",
                "    rng.state = 0;",
                "    assert_eq!(rng.next_u32(), 0);",
                "    rng.increment = 1;",
                "    assert!(rng.next_u32() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX - 1, increment: u128::MAX - 1 };",
                "    let result = rng.next_u32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result < u32::MAX);",
                "    assert!(result >= 0);",
                "    assert!(rng.state != u128::MAX - 1);",
                "    assert!(rng.increment != u128::MAX - 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: u128::MAX - 1, increment: u128::MAX - 1 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result < u32::MAX);",
                "    assert!(result >= 0);",
                "    assert!(rng.state != u128::MAX - 1);",
                "    assert!(rng.increment != u128::MAX - 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 12345678901234567890, increment: 98765432109876543210 };",
                "    let result = rng.next_u32();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result >= 0);",
                "    assert!(result <= std::u32::MAX);",
                "    rng.next_u32();",
                "    assert!(rng.state != 12345678901234567890);",
                "    assert!(rng.state != 98765432109876543210);",
                "    assert_eq!(result, rng.next_u32());"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 { state: 12345678901234567890, increment: 98765432109876543210 };",
                "    let result = rng.next_u32();",
                "    assert_eq!(result, (rng.state >> 32) as u32);",
                "    assert!(result >= 0);",
                "    assert!(result <= std::u32::MAX);",
                "    rng.next_u32();",
                "    assert!(rng.state != 12345678901234567890);",
                "    assert!(rng.state != 98765432109876543210);",
                "    assert_eq!(result, rng.next_u32());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}