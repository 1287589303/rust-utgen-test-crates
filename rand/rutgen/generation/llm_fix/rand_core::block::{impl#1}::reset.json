{
  "name": "rand_core::block::{impl#1}::reset",
  "mod_info": {
    "name": "block",
    "loc": "rand_core/src/lib.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "rand_core/src/block.rs:170:5:172:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.results must be a valid instance of R::Results where R implements BlockRngCore; self.index must be a valid usize within the range of the length of results; the function should be called on a mutable instance of BlockRng<R>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: Vec::new(),",
                "        index: 0,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(block_rng.index(), 0);",
                "    assert_eq!(block_rng.results.as_ref().len(), 0);",
                "    block_rng.results.push(1);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 1);",
                "    assert_eq!(block_rng.results.as_ref().len(), 1);",
                "    block_rng.results.push(2);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 2);",
                "    assert_eq!(block_rng.results.as_ref().len(), 2);"
              ],
              "code": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: Vec::new(),",
                "        index: 0,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 0);",
                "    assert_eq!(block_rng.results.as_ref().len(), 0);",
                "    block_rng.results.push(1);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 1);",
                "    assert_eq!(block_rng.results.as_ref().len(), 1);",
                "    block_rng.results.push(2);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 2);",
                "    assert_eq!(block_rng.results.as_ref().len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![1, 2, 3, 4, 5],",
                "        index: 2,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(block_rng.index, 5);"
              ],
              "code": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![1, 2, 3, 4, 5],",
                "        index: 2,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index, 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![10, 20, 30],",
                "        index: 3,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(block_rng.index(), 3);",
                "    assert_eq!(block_rng.results.as_ref().len(), 3);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 3);",
                "    block_rng.results.push(40);",
                "    assert_eq!(block_rng.results.as_ref().len(), 4);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 4);"
              ],
              "code": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, _results: &mut Self::Results) {}",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![10, 20, 30],",
                "        index: 3,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 3);",
                "    assert_eq!(block_rng.results.as_ref().len(), 3);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 3);",
                "    block_rng.results.push(40);",
                "    assert_eq!(block_rng.results.as_ref().len(), 4);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, results: &mut Self::Results) {",
                "            results.push(255);",
                "        }",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![],",
                "        index: 0,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.core.generate(&mut block_rng.results);",
                "    block_rng.reset();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(block_rng.index(), 1);",
                "    assert_eq!(block_rng.results.as_ref().len(), 1);",
                "    assert_eq!(block_rng.results.as_mut()[0], 255);"
              ],
              "code": [
                "{",
                "    struct DummyCore;",
                "    impl BlockRngCore for DummyCore {",
                "        type Item = u8;",
                "        type Results = Vec<u8>;",
                "        fn generate(&mut self, results: &mut Self::Results) {",
                "            results.push(255);",
                "        }",
                "    }",
                "    ",
                "    let core = DummyCore;",
                "    let mut block_rng = BlockRng {",
                "        results: vec![],",
                "        index: 0,",
                "        core,",
                "    };",
                "    ",
                "    block_rng.core.generate(&mut block_rng.results);",
                "    block_rng.reset();",
                "    assert_eq!(block_rng.index(), 1);",
                "    assert_eq!(block_rng.results.as_ref().len(), 1);",
                "    assert_eq!(block_rng.results.as_mut()[0], 255);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}