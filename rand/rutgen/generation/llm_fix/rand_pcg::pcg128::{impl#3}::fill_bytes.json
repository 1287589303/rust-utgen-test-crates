{
  "name": "rand_pcg::pcg128::{impl#3}::fill_bytes",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:152:5:154:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a valid instance of Lcg128Xsl64 with a proper state and increment initialized, dest must be a mutable slice of u8 with a length between 0 and 1024 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0x1234_5678_90AB_CDEF_U128,",
                "        increment: 0xFEDC_BA98_7654_3210_U128,",
                "    };",
                "    let mut dest: [u8; 0] = [];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 0);",
                "    assert_eq!(rng.state, 0x1234_5678_90AB_CDEF_U128);",
                "    assert_eq!(rng.increment, 0xFEDC_BA98_7654_3210_U128);",
                "    rng.fill_bytes(&mut dest);",
                "    assert!(dest.is_empty());",
                "    assert_eq!(rng.state, 0x1234_5678_90AB_CDEF_U128);",
                "    assert_eq!(rng.increment, 0xFEDC_BA98_7654_3210_U128);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0x1234_5678_90AB_CDEF_U128,",
                "        increment: 0xFEDC_BA98_7654_3210_U128,",
                "    };",
                "    let mut dest: [u8; 0] = [];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 0);",
                "    assert_eq!(rng.state, 0x1234_5678_90AB_CDEF_U128);",
                "    assert_eq!(rng.increment, 0xFEDC_BA98_7654_3210_U128);",
                "    rng.fill_bytes(&mut dest);",
                "    assert!(dest.is_empty());",
                "    assert_eq!(rng.state, 0x1234_5678_90AB_CDEF_U128);",
                "    assert_eq!(rng.increment, 0xFEDC_BA98_7654_3210_U128);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0xABCD_EF01_2345_6789_U128,",
                "        increment: 0x9876_5432_10FE_DCBA_U128,",
                "    };",
                "    let mut dest: [u8; 1] = [0];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest[0], expected_value);",
                "    assert_eq!(rng.state, expected_state_after_fill);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert!(dest.iter().all(|&b| b >= 0));",
                "    assert!(dest.iter().all(|&b| b < 256));"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0xABCD_EF01_2345_6789_U128,",
                "        increment: 0x9876_5432_10FE_DCBA_U128,",
                "    };",
                "    let mut dest: [u8; 1] = [0];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest[0], expected_value);",
                "    assert_eq!(rng.state, expected_state_after_fill);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert!(dest.iter().all(|&b| b >= 0));",
                "    assert!(dest.iter().all(|&b| b < 256));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0x1A2B_3C4D_5E6F_7A8B_U128,",
                "        increment: 0xB9B8_B7B6_B5B4_B3B2_U128,",
                "    };",
                "    let mut dest: [u8; 512] = [0; 512];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 512);",
                "    assert!(!dest.iter().all(|&x| x == 0));",
                "    assert!(dest.iter().all(|&x| x <= 255));",
                "    assert!(dest.iter().any(|&x| x != 0));",
                "    assert!(dest.iter().filter(|&&x| x == 0).count() < 512);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0x1A2B_3C4D_5E6F_7A8B_U128,",
                "        increment: 0xB9B8_B7B6_B5B4_B3B2_U128,",
                "    };",
                "    let mut dest: [u8; 512] = [0; 512];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 512);",
                "    assert!(!dest.iter().all(|&x| x == 0));",
                "    assert!(dest.iter().all(|&x| x <= 255));",
                "    assert!(dest.iter().any(|&x| x != 0));",
                "    assert!(dest.iter().filter(|&&x| x == 0).count() < 512);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0xDEAD_BEEF_F00D_CAFE_U128,",
                "        increment: 0xCAFE_BABE_F00D_DEAD_U128,",
                "    };",
                "    let mut dest: [u8; 1024] = [0; 1024];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 1024);",
                "    assert_ne!(dest[0], 0);",
                "    assert_ne!(dest[511], 0);",
                "    assert_ne!(dest[1023], 0);",
                "    assert_eq!(dest.iter().filter(|&&x| x != 0).count(), 1024);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg128Xsl64 {",
                "        state: 0xDEAD_BEEF_F00D_CAFE_U128,",
                "        increment: 0xCAFE_BABE_F00D_DEAD_U128,",
                "    };",
                "    let mut dest: [u8; 1024] = [0; 1024];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 1024);",
                "    assert_ne!(dest[0], 0);",
                "    assert_ne!(dest[511], 0);",
                "    assert_ne!(dest[1023], 0);",
                "    assert_eq!(dest.iter().filter(|&&x| x != 0).count(), 1024);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}