{
  "name": "rand::rng::Rng::random_iter",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:120:5:126:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Self must implement Rng and Sized, T must be a type that can be sampled from StandardUniform distribution.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockRng {",
                "        state: u32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 1;",
                "            self.state",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: 0 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "}"
              ],
              "oracle": [
                "    let mut rng = MockRng { state: 0 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "    assert_eq!(v, vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);",
                "    assert!(v.len() == 10);",
                "    assert!(v.iter().all(|&x| x >= 1 && x <= 10));",
                "    let rng = MockRng { state: 10 };",
                "    let v: Vec<u32> = rng.random_iter().take(5).collect();",
                "    assert_eq!(v, vec![11, 12, 13, 14, 15]);",
                "    let rng = MockRng { state: 100 };",
                "    let v: Vec<u32> = rng.random_iter().take(0).collect();",
                "    assert_eq!(v, vec![]);",
                "    let rng = MockRng { state: 1 };",
                "    let v: Vec<u32> = rng.random_iter().take(2).collect();",
                "    assert_eq!(v, vec![2, 3]);"
              ],
              "code": [
                "{",
                "    struct MockRng {",
                "        state: u32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 1;",
                "            self.state",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: 0 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "    let mut rng = MockRng { state: 0 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "    assert_eq!(v, vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);",
                "    assert!(v.len() == 10);",
                "    assert!(v.iter().all(|&x| x >= 1 && x <= 10));",
                "    let rng = MockRng { state: 10 };",
                "    let v: Vec<u32> = rng.random_iter().take(5).collect();",
                "    assert_eq!(v, vec![11, 12, 13, 14, 15]);",
                "    let rng = MockRng { state: 100 };",
                "    let v: Vec<u32> = rng.random_iter().take(0).collect();",
                "    assert_eq!(v, vec![]);",
                "    let rng = MockRng { state: 1 };",
                "    let v: Vec<u32> = rng.random_iter().take(2).collect();",
                "    assert_eq!(v, vec![2, 3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockRng {",
                "        state: f32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 0.1;",
                "            (self.state * 100.0) as u32",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: 0.0 };",
                "    let v: Vec<f32> = rng.random_iter().take(10).collect();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(v.len(), 10);",
                "    assert_eq!(v[0], 0.0);",
                "    assert_eq!(v[1], 0.1);",
                "    assert_eq!(v[2], 0.2);",
                "    assert_eq!(v[3], 0.3);",
                "    assert_eq!(v[4], 0.4);",
                "    assert_eq!(v[5], 0.5);",
                "    assert_eq!(v[6], 0.6);",
                "    assert_eq!(v[7], 0.7);",
                "    assert_eq!(v[8], 0.8);",
                "    assert_eq!(v[9], 0.9);"
              ],
              "code": [
                "{",
                "    struct MockRng {",
                "        state: f32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 0.1;",
                "            (self.state * 100.0) as u32",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: 0.0 };",
                "    let v: Vec<f32> = rng.random_iter().take(10).collect();",
                "    assert_eq!(v.len(), 10);",
                "    assert_eq!(v[0], 0.0);",
                "    assert_eq!(v[1], 0.1);",
                "    assert_eq!(v[2], 0.2);",
                "    assert_eq!(v[3], 0.3);",
                "    assert_eq!(v[4], 0.4);",
                "    assert_eq!(v[5], 0.5);",
                "    assert_eq!(v[6], 0.6);",
                "    assert_eq!(v[7], 0.7);",
                "    assert_eq!(v[8], 0.8);",
                "    assert_eq!(v[9], 0.9);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockRng {",
                "        state: u32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 1;",
                "            self.state",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: u32::MAX - 10 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(&v, &[u32::MAX - 9, u32::MAX - 8, u32::MAX - 7, u32::MAX - 6, u32::MAX - 5, u32::MAX - 4, u32::MAX - 3, u32::MAX - 2, u32::MAX - 1, u32::MAX]);"
              ],
              "code": [
                "{",
                "    struct MockRng {",
                "        state: u32,",
                "    }",
                "",
                "    impl RngCore for MockRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state += 1;",
                "            self.state",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "    }",
                "",
                "    let rng = MockRng { state: u32::MAX - 10 };",
                "    let v: Vec<u32> = rng.random_iter().take(10).collect();",
                "    assert_eq!(&v, &[u32::MAX - 9, u32::MAX - 8, u32::MAX - 7, u32::MAX - 6, u32::MAX - 5, u32::MAX - 4, u32::MAX - 3, u32::MAX - 2, u32::MAX - 1, u32::MAX]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}