{
  "name": "rand_pcg::pcg128::{impl#0}::new",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:91:5:95:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "state: [0, 2^128 - 1], stream: [0, 2^128 - 1] with stream's highest bit in the range (0, 2^127 - 1) for odd increment\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0;",
                "    let stream: u128 = 0;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, 0xcafef00dd15ea5e5.wrapping_add(1));",
                "    assert_eq!(rng.increment, 1);",
                "    assert_eq!(rng.state, Lcg128Xsl64::from_state_incr(state, (stream << 1) | 1).state);",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert_eq!(Lcg128Xsl64::new(0, 0).increment % 2, 1);",
                "    assert_eq!(Lcg128Xsl64::new(0, 0).increment & 1, 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0;",
                "    let stream: u128 = 0;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, 0xcafef00dd15ea5e5.wrapping_add(1));",
                "    assert_eq!(rng.increment, 1);",
                "    assert_eq!(rng.state, Lcg128Xsl64::from_state_incr(state, (stream << 1) | 1).state);",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert_eq!(Lcg128Xsl64::new(0, 0).increment % 2, 1);",
                "    assert_eq!(Lcg128Xsl64::new(0, 0).increment & 1, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let stream: u128 = u128::MAX;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, u128::MAX.wrapping_add(1));",
                "    assert_eq!(rng.increment, (u128::MAX << 1) | 1);",
                "    assert_eq!(rng.increment % 2, 1);",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);",
                "    assert_eq!(rng.increment & 1, 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let stream: u128 = u128::MAX;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, u128::MAX.wrapping_add(1));",
                "    assert_eq!(rng.increment, (u128::MAX << 1) | 1);",
                "    assert_eq!(rng.increment % 2, 1);",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);",
                "    assert_eq!(rng.increment & 1, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX / 2;",
                "    let stream: u128 = u128::MAX / 2;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, (u128::MAX / 2).wrapping_add(((u128::MAX / 2) << 1) | 1));",
                "    assert_eq!(rng.increment, ((u128::MAX / 2) << 1) | 1);",
                "    assert!(rng.state & 1 == 0);"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX / 2;",
                "    let stream: u128 = u128::MAX / 2;",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, (u128::MAX / 2).wrapping_add(((u128::MAX / 2) << 1) | 1));",
                "    assert_eq!(rng.increment, ((u128::MAX / 2) << 1) | 1);",
                "    assert!(rng.state & 1 == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0x123456789abcdef0;",
                "    let stream: u128 = 0x7fffffffffffffff; // Highest bit is discarded.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state >= 0);",
                "    assert!(rng.increment >= 1);",
                "    assert_ne!(rng.state, 0);",
                "    assert!(rng.state < u128::MAX);",
                "    assert!(rng.increment < u128::MAX);",
                "    assert_eq!(rng.state, 0xcafef00dd15ea5e5.wrapping_add((0xa02bdbf7bb3c0a7ac28fa16a64abf96 << 1) | 1));"
              ],
              "code": [
                "{",
                "    let state: u128 = 0x123456789abcdef0;",
                "    let stream: u128 = 0x7fffffffffffffff; // Highest bit is discarded.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state >= 0);",
                "    assert!(rng.increment >= 1);",
                "    assert_ne!(rng.state, 0);",
                "    assert!(rng.state < u128::MAX);",
                "    assert!(rng.increment < u128::MAX);",
                "    assert_eq!(rng.state, 0xcafef00dd15ea5e5.wrapping_add((0xa02bdbf7bb3c0a7ac28fa16a64abf96 << 1) | 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0xaabbccddeeff0011;",
                "    let stream: u128 = 0x8000000000000000; // Highest bit set.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert_ne!(rng.state, 0xcafef00dd15ea5e5);",
                "    assert_ne!(rng.increment, 0xa02bdbf7bb3c0a7ac28fa16a64abf96);",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);",
                "    assert!(rng.state != stream);",
                "    assert_eq!(rng.state, state.wrapping_add(rng.increment));",
                "    assert!(rng.increment & 1 == 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0xaabbccddeeff0011;",
                "    let stream: u128 = 0x8000000000000000; // Highest bit set.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert_ne!(rng.state, 0xcafef00dd15ea5e5);",
                "    assert_ne!(rng.increment, 0xa02bdbf7bb3c0a7ac28fa16a64abf96);",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);",
                "    assert!(rng.state != stream);",
                "    assert_eq!(rng.state, state.wrapping_add(rng.increment));",
                "    assert!(rng.increment & 1 == 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0;",
                "    let stream: u128 = u128::MAX - 1; // Still an odd increment after masking.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state > 0);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0;",
                "    let stream: u128 = u128::MAX - 1; // Still an odd increment after masking.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    assert_eq!(rng.state, state.wrapping_add((stream << 1) | 1));",
                "    assert_eq!(rng.increment, (stream << 1) | 1);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0x1;",
                "    let stream: u128 = 0x3; // Just above the minimum for the increment to be odd.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "}"
              ],
              "oracle": [
                "    // Test case for Lcg128Xsl64::new with minimum state and stream values",
                "    let state_min: u128 = 0x0;",
                "    let stream_min: u128 = 0x1;",
                "    let rng_min = Lcg128Xsl64::new(state_min, stream_min);",
                "    assert_eq!(rng_min.state, 0x1); // Verify the state after initialization",
                "    ",
                "    // Test case for Lcg128Xsl64::new with specified default state and stream values",
                "    let state_default: u128 = 0xcafef00dd15ea5e5;",
                "    let stream_default: u128 = 0xa02bdbf7bb3c0a7ac28fa16a64abf96;",
                "    let rng_default = Lcg128Xsl64::new(state_default, stream_default);",
                "    assert_eq!(rng_default.state, state_default.wrapping_add(stream_default << 1 | 1)); // Expected state value after increment",
                "    ",
                "    // Test case for Lcg128Xsl64::new with odd stream to ensure increment is properly computed",
                "    let state_odd_stream: u128 = 0x1;",
                "    let stream_odd: u128 = 0x2;",
                "    let rng_odd = Lcg128Xsl64::new(state_odd_stream, stream_odd);",
                "    assert_eq!(rng_odd.state, state_odd_stream.wrapping_add((stream_odd << 1) | 1)); // Validate increment creates odd increment",
                "    ",
                "    // Test case for Lcg128Xsl64::new with very large state and stream values",
                "    let state_large: u128 = u128::MAX;",
                "    let stream_large: u128 = u128::MAX;",
                "    let rng_large = Lcg128Xsl64::new(state_large, stream_large);",
                "    assert_eq!(rng_large.state, state_large.wrapping_add(stream_large << 1 | 1)); // Check behavior at max values"
              ],
              "code": [
                "{",
                "    let state: u128 = 0x1;",
                "    let stream: u128 = 0x3; // Just above the minimum for the increment to be odd.",
                "    let rng = Lcg128Xsl64::new(state, stream);",
                "    // Test case for Lcg128Xsl64::new with minimum state and stream values",
                "    let state_min: u128 = 0x0;",
                "    let stream_min: u128 = 0x1;",
                "    let rng_min = Lcg128Xsl64::new(state_min, stream_min);",
                "    assert_eq!(rng_min.state, 0x1); // Verify the state after initialization",
                "    ",
                "    // Test case for Lcg128Xsl64::new with specified default state and stream values",
                "    let state_default: u128 = 0xcafef00dd15ea5e5;",
                "    let stream_default: u128 = 0xa02bdbf7bb3c0a7ac28fa16a64abf96;",
                "    let rng_default = Lcg128Xsl64::new(state_default, stream_default);",
                "    assert_eq!(rng_default.state, state_default.wrapping_add(stream_default << 1 | 1)); // Expected state value after increment",
                "    ",
                "    // Test case for Lcg128Xsl64::new with odd stream to ensure increment is properly computed",
                "    let state_odd_stream: u128 = 0x1;",
                "    let stream_odd: u128 = 0x2;",
                "    let rng_odd = Lcg128Xsl64::new(state_odd_stream, stream_odd);",
                "    assert_eq!(rng_odd.state, state_odd_stream.wrapping_add((stream_odd << 1) | 1)); // Validate increment creates odd increment",
                "    ",
                "    // Test case for Lcg128Xsl64::new with very large state and stream values",
                "    let state_large: u128 = u128::MAX;",
                "    let stream_large: u128 = u128::MAX;",
                "    let rng_large = Lcg128Xsl64::new(state_large, stream_large);",
                "    assert_eq!(rng_large.state, state_large.wrapping_add(stream_large << 1 | 1)); // Check behavior at max values",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}