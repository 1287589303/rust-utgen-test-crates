{
  "name": "rand::distr::slice::{impl#0}::num_choices",
  "mod_info": {
    "name": "distr::slice",
    "loc": "src/distr/mod.rs:100:1:100:15"
  },
  "visible": true,
  "loc": "src/distr/slice.rs:80:5:82:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.num_choices\n"
      ],
      "input_infer": "Test input conditions or ranges: slice length must be a non-zero positive integer (1 to maximum usize), valid slice containing any elements, function must ensure slice is not empty to avoid returning an error\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = &[42];",
                "    let choose = Choose::new(slice).unwrap();",
                "    let _ = choose.num_choices();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(choose.num_choices().get(), 1);",
                "    assert!(choose.num_choices().is_positive());",
                "    assert_eq!(choose.num_choices().unwrap().get(), 1);",
                "    assert_eq!(choose.num_choices().get(), NonZeroUsize::new(1).unwrap());"
              ],
              "code": [
                "{",
                " let slice = &[42];  ",
                " let choose = Choose::new(slice).unwrap();  ",
                " let num_choices = choose.num_choices();  ",
                " assert_eq!(num_choices.get(), 1);  ",
                " assert!(num_choices.get() > 0);  ",
                " assert_eq!(num_choices.get(), 1);  ",
                " assert_eq!(num_choices, NonZeroUsize::new(1).unwrap());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = &[1, 2, 3, 4, 5];",
                "    let choose = Choose::new(slice).unwrap();",
                "    let _ = choose.num_choices();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(choose.num_choices(), NonZeroUsize::new(5).unwrap());"
              ],
              "code": [
                "{",
                "    let slice = &[1, 2, 3, 4, 5];",
                "    let choose = Choose::new(slice).unwrap();",
                "    let _ = choose.num_choices();",
                "    assert_eq!(choose.num_choices(), NonZeroUsize::new(5).unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Vec<u32> = (0..std::usize::MAX).map(|x| x as u32).collect();",
                "    let choose = Choose::new(&slice).unwrap();",
                "    let _ = choose.num_choices();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(choose.num_choices(), NonZeroUsize::new(slice.len()).unwrap());"
              ],
              "code": [
                "{",
                "   use std::vec::Vec;  ",
                "   let slice: Vec<u32> = (0..std::usize::MAX).map(|x| x as u32).collect();  ",
                "   let choose = Choose::new(&slice).unwrap();  ",
                "   let _ = choose.num_choices();  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let slice: &[u32] = &[];",
                "    let _ = Choose::new(slice).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(Choose::new(&[]).is_err());",
                "    let choose = Choose::new(&[1, 2, 3]).unwrap();",
                "    assert_eq!(choose.num_choices().get(), 3);"
              ],
              "code": [
                "{",
                "   let slice: &[u32] = &[];",
                "   let _ = Choose::new(slice).unwrap();",
                "   assert!(Choose::<u32>::new(&[]).is_err());",
                "   let choose = Choose::new(&[1, 2, 3]).unwrap();",
                "   assert_eq!(choose.num_choices().get(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}