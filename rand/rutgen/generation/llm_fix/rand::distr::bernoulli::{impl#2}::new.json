{
  "name": "rand::distr::bernoulli::{impl#2}::new",
  "mod_info": {
    "name": "distr::bernoulli",
    "loc": "src/distr/mod.rs:89:1:89:15"
  },
  "visible": true,
  "loc": "src/distr/bernoulli.rs:108:5:118:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (0.0..1.0).contains(&p) at line 109 is true\n",
        "expected return value/type: Ok(Bernoulli {\n            p_int: (p * SCALE) as u64,\n        })\n"
      ],
      "input_infer": "0.0 < p < 1.0, p as a valid f64 multiple of 2^-64 within (0.0, 1.0) for precise representation as u64\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let p = 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "}"
              ],
              "oracle": [
                "    assert!(Bernoulli::new(0.0).is_ok());",
                "    assert_eq!(Bernoulli::new(0.0).unwrap().p_int, 0);",
                "    assert!(Bernoulli::new(1.0).is_ok());",
                "    assert_eq!(Bernoulli::new(1.0).unwrap().p_int, ALWAYS_TRUE);",
                "    assert!(Bernoulli::new(0.5).is_ok());",
                "    assert_eq!(Bernoulli::new(0.5).unwrap().p_int, (0.5 * SCALE) as u64);",
                "    assert!(Bernoulli::new(2.0_f64.powi(-64)).is_ok());",
                "    assert_eq!(Bernoulli::new(2.0_f64.powi(-64)).unwrap().p_int, (2.0_f64.powi(-64) * SCALE) as u64);",
                "    assert!(Bernoulli::new(-0.1).is_err());",
                "    assert!(Bernoulli::new(1.1).is_err());"
              ],
              "code": [
                "{",
                "    let p = 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "    assert!(Bernoulli::new(0.0).is_ok());",
                "    assert_eq!(Bernoulli::new(0.0).unwrap().p_int, 0);",
                "    assert!(Bernoulli::new(1.0).is_ok());",
                "    assert_eq!(Bernoulli::new(1.0).unwrap().p_int, ALWAYS_TRUE);",
                "    assert!(Bernoulli::new(0.5).is_ok());",
                "    assert_eq!(Bernoulli::new(0.5).unwrap().p_int, (0.5 * SCALE) as u64);",
                "    assert!(Bernoulli::new(2.0_f64.powi(-64)).is_ok());",
                "    assert_eq!(Bernoulli::new(2.0_f64.powi(-64)).unwrap().p_int, (2.0_f64.powi(-64) * SCALE) as u64);",
                "    assert!(Bernoulli::new(-0.1).is_err());",
                "    assert!(Bernoulli::new(1.1).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let p = 1.0_f64 - 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
                "    assert!(Bernoulli::new(-0.1).is_err());",
                "    assert!(Bernoulli::new(1.1).is_err());",
                "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
                "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: ALWAYS_TRUE - 1 }));",
                "    assert!(matches!(Bernoulli::new(1.0_f64 - 2.0_f64.powi(-64)), Ok(_)));"
              ],
              "code": [
                "{",
                "    let p = 1.0_f64 - 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
                "    assert!(Bernoulli::new(-0.1).is_err());",
                "    assert!(Bernoulli::new(1.1).is_err());",
                "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
                "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: ALWAYS_TRUE - 1 }));",
                "    assert!(matches!(Bernoulli::new(1.0_f64 - 2.0_f64.powi(-64)), Ok(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let p = 0.5;",
                "    let _ = Bernoulli::new(p);",
                "}"
              ],
              "oracle": [
                "    let p = 0.5;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    let bernoulli = result.unwrap();",
                "    assert_eq!(bernoulli.p_int, (p * SCALE) as u64);"
              ],
              "code": [
                "{",
                "    let p = 0.5;",
                "    let _ = Bernoulli::new(p);",
                "    let p = 0.5;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    let bernoulli = result.unwrap();",
                "    assert_eq!(bernoulli.p_int, (p * SCALE) as u64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "}"
              ],
              "oracle": [
                "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, (p * SCALE) as u64);",
                "    }",
                "    ",
                "    let p = 0.5_f64;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, (p * SCALE) as u64);",
                "    }",
                "    ",
                "    let p = 1.0_f64;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, ALWAYS_TRUE);",
                "    }"
              ],
              "code": [
                "{",
                "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
                "    let _ = Bernoulli::new(p);",
                "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, (p * SCALE) as u64);",
                "    }",
                "    ",
                "    let p = 0.5_f64;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, (p * SCALE) as u64);",
                "    }",
                "    ",
                "    let p = 1.0_f64;",
                "    let result = Bernoulli::new(p);",
                "    assert!(result.is_ok());",
                "    if let Ok(b) = result {",
                "    assert_eq!(b.p_int, ALWAYS_TRUE);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
                "    let _ = Bernoulli::new(p);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
                "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
                "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
                "    let expected_p_int = (p * SCALE) as u64;",
                "    assert_eq!(Bernoulli::new(p), Ok(Bernoulli { p_int: expected_p_int }));",
                "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: (0.9999999999999999 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(-0.1), Err(BernoulliError::InvalidProbability));",
                "    assert_eq!(Bernoulli::new(1.1), Err(BernoulliError::InvalidProbability));"
              ],
              "code": [
                "{",
                "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
                "    let _ = Bernoulli::new(p);",
                "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
                "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
                "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
                "    let expected_p_int = (p * SCALE) as u64;",
                "    assert_eq!(Bernoulli::new(p), Ok(Bernoulli { p_int: expected_p_int }));",
                "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: (0.9999999999999999 * SCALE) as u64 }));",
                "    assert_eq!(Bernoulli::new(-0.1), Err(BernoulliError::InvalidProbability));",
                "    assert_eq!(Bernoulli::new(1.1), Err(BernoulliError::InvalidProbability));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (0.0..1.0).contains(&p) at line 109 is false\n",
        "precondition: p == 1.0 at line 110 is true\n",
        "expected return value/type: Ok(Bernoulli { p_int: ALWAYS_TRUE })\n"
      ],
      "input_infer": "p = 1.0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(1.0);",
                "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
                "    let _ = (result, expected);",
                "}"
              ],
              "oracle": [
                "    let result = Bernoulli::new(1.0);",
                "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(1.0);",
                "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
                "    let _ = (result, expected);",
                "    let result = Bernoulli::new(1.0);",
                "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(1.1);",
                "    let expected = Err(BernoulliError::InvalidProbability);",
                "    let _ = (result, expected);",
                "}"
              ],
              "oracle": [
                "    Bernoulli::new(1.1); // Expect Err(BernoulliError::InvalidProbability)",
                "    Bernoulli::new(1.0); // Expect Ok(Bernoulli { p_int: ALWAYS_TRUE })"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(1.1);",
                "    let expected = Err(BernoulliError::InvalidProbability);",
                "    let _ = (result, expected);",
                "    Bernoulli::new(1.1); // Expect Err(BernoulliError::InvalidProbability)",
                "    Bernoulli::new(1.0); // Expect Ok(Bernoulli { p_int: ALWAYS_TRUE })",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(-0.1);",
                "    let expected = Err(BernoulliError::InvalidProbability);",
                "    let _ = (result, expected);",
                "}"
              ],
              "oracle": [
                "    Ok(Bernoulli { p_int: ALWAYS_TRUE })"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(-0.1);",
                "    let expected = Err(BernoulliError::InvalidProbability);",
                "    let _ = (result, expected);",
                "    Ok(Bernoulli { p_int: ALWAYS_TRUE })",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (0.0..1.0).contains(&p) at line 109 is false\n",
        "precondition: p == 1.0 at line 110 is false\n",
        "expected return value/type: Err(BernoulliError::InvalidProbability)\n"
      ],
      "input_infer": "p < 0.0 or p > 1.0 or p is NaN or p is a non-finite value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(-0.1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(-0.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(1.1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), BernoulliError::InvalidProbability);"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(1.1);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), BernoulliError::InvalidProbability);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(f64::NAN);",
                "}"
              ],
              "oracle": [
                "    let result = Bernoulli::new(f64::NAN);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(-0.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(1.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(2.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(f64::NAN);",
                "    let result = Bernoulli::new(f64::NAN);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(-0.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(1.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    ",
                "    let result = Bernoulli::new(2.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(f64::INFINITY);",
                "}"
              ],
              "oracle": [
                "    let result = Bernoulli::new(f64::INFINITY);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(-1.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(2.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(1.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(f64::INFINITY);",
                "    let result = Bernoulli::new(f64::INFINITY);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(-1.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(2.0);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(1.1);",
                "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = Bernoulli::new(f64::NEG_INFINITY);",
                "}"
              ],
              "oracle": [
                "    let result = Bernoulli::new(f64::NEG_INFINITY); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(-0.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(1.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(2.0); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(f64::NAN); assert_eq!(result, Err(BernoulliError::InvalidProbability));"
              ],
              "code": [
                "{",
                "    let result = Bernoulli::new(f64::NEG_INFINITY);",
                "    let result = Bernoulli::new(f64::NEG_INFINITY); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(-0.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(1.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(2.0); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "    let result = Bernoulli::new(f64::NAN); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}