{
  "name": "rand_pcg::pcg128::{impl#2}::from_seed",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:128:5:136:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Seed input must be a 32-byte array with values ranging from [0x00, 0x00, 0x00, 0x00] to [0xFF, 0xFF, 0xFF, 0xFF], ensuring at least one odd bit in the increment derived from the last 64 bits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0x00; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0x00; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, 0);",
                "    assert_eq!(rng.increment, 1);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0x00; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    let seed: [u8; 32] = [0x00; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, 0);",
                "    assert_eq!(rng.increment, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0xFF; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0xFF; 32];",
                "    let expected_state = /* calculate expected state from seed */;",
                "    let expected_increment = /* calculate expected increment from seed, ensuring it is odd */;",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0xFF; 32];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    let seed: [u8; 32] = [0xFF; 32];",
                "    let expected_state = /* calculate expected state from seed */;",
                "    let expected_increment = /* calculate expected increment from seed, ensuring it is odd */;",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state >= MIN_STATE && rng.state <= MAX_STATE);",
                "    assert_eq!(rng.increment & 1, 1);",
                "    assert_eq!(rng.state, 0x00000000000000010000000000000000 + 0x0000000000000002);",
                "    assert_eq!(rng.increment, 0x0000000000000003);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert!(rng.increment % 2 == 1);",
                "    assert!(rng.state >= MIN_STATE && rng.state <= MAX_STATE);",
                "    assert_eq!(rng.increment & 1, 1);",
                "    assert_eq!(rng.state, 0x00000000000000010000000000000000 + 0x0000000000000002);",
                "    assert_eq!(rng.increment, 0x0000000000000003);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let expected_state = 1;",
                "    let expected_increment = 1;",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    ",
                "    let seed: [u8; 32] = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, u128::MAX);",
                "    assert_eq!(rng.increment, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    ",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, 1);",
                "    assert_eq!(rng.increment, 3);",
                "    ",
                "    let seed: [u8; 32] = [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_ne!(rng.increment, 0);",
                "    assert!(rng.increment % 2 == 1);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ",
                "                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    let expected_state = 1;",
                "    let expected_increment = 1;",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    ",
                "    let seed: [u8; 32] = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,",
                "    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, u128::MAX);",
                "    assert_eq!(rng.increment, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
                "    ",
                "    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,",
                "    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, 1);",
                "    assert_eq!(rng.increment, 3);",
                "    ",
                "    let seed: [u8; 32] = [0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,",
                "    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_ne!(rng.increment, 0);",
                "    assert!(rng.increment % 2 == 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, ",
                "                          0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, ",
                "                          0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, ",
                "                          0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.state, expected_initial_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert_eq!(seed_u64[0], expected_seed_u64_0);",
                "    assert_eq!(seed_u64[1], expected_seed_u64_1);",
                "    assert_eq!(seed_u64[2], expected_seed_u64_2);",
                "    assert_eq!(seed_u64[3], expected_seed_u64_3);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, ",
                "                          0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, ",
                "                          0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, ",
                "                          0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20];",
                "    let rng = Lcg128Xsl64::from_seed(seed);",
                "    assert_eq!(rng.state, expected_initial_state);",
                "    assert_eq!(rng.increment, expected_increment);",
                "    assert_eq!(seed_u64[0], expected_seed_u64_0);",
                "    assert_eq!(seed_u64[1], expected_seed_u64_1);",
                "    assert_eq!(seed_u64[2], expected_seed_u64_2);",
                "    assert_eq!(seed_u64[3], expected_seed_u64_3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}