{
  "name": "rand::distr::weighted::weighted_index::{impl#2}::clone",
  "mod_info": {
    "name": "distr::weighted::weighted_index",
    "loc": "src/distr/weighted/mod.rs:18:1:18:20"
  },
  "visible": true,
  "loc": "src/distr/weighted/weighted_index.rs:266:5:271:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: WeightedIndexIter {\n            weighted_index: self.weighted_index,\n            index: self.index,\n        }\n"
      ],
      "input_infer": "WeightedIndex<X: SampleUniform + PartialOrd> with non-empty cumulative_weights vector, total_weight > 0, and valid index in range [0, cumulative_weights.len() - 1]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 1,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert_eq!(cloned_iter.weighted_index.cumulative_weights, weighted_index_iter.weighted_index.cumulative_weights);",
                "    assert_eq!(cloned_iter.weighted_index.total_weight, weighted_index_iter.weighted_index.total_weight);",
                "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 1,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert_eq!(cloned_iter.weighted_index.cumulative_weights, weighted_index_iter.weighted_index.cumulative_weights);",
                "    assert_eq!(cloned_iter.weighted_index.total_weight, weighted_index_iter.weighted_index.total_weight);",
                "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 2,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert!(std::ptr::eq(weighted_index_iter.weighted_index, cloned_iter.weighted_index));"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
                "    let total_weight = 6.0;",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 2,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert!(std::ptr::eq(weighted_index_iter.weighted_index, cloned_iter.weighted_index));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![5.0]; ",
                "    let total_weight = 5.0; ",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert_ne!(cloned_iter as *const _, weighted_index_iter as *const _);"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = ();",
                "    }",
                "",
                "    let cumulative_weights = vec![5.0]; ",
                "    let total_weight = 5.0; ",
                "    let weight_distribution = ();",
                "",
                "    ",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "",
                "    let weighted_index_iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    let cloned_iter = weighted_index_iter.clone();",
                "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
                "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
                "    assert_ne!(cloned_iter as *const _, weighted_index_iter as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}