{
  "name": "rand::distr::bernoulli::{impl#2}::p",
  "mod_info": {
    "name": "distr::bernoulli",
    "loc": "src/distr/mod.rs:89:1:89:15"
  },
  "visible": true,
  "loc": "src/distr/bernoulli.rs:144:5:150:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.p_int == ALWAYS_TRUE at line 145 is true\n",
        "expected return value/type: 1.0\n"
      ],
      "input_infer": "self.p_int == u64::MAX (ALWAYS_TRUE)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX };",
                "    let _result = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1.0);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX };",
                "    let _result = bernoulli.p();",
                "    assert_eq!(result, 1.0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.p_int == ALWAYS_TRUE at line 145 is false\n",
        "expected return value/type: (self.p_int as f64) / SCALE\n"
      ],
      "input_infer": "self.p_int should be in the range of 0 to u64::MAX - 1 (inclusive) for valid probabilities excluding the case when self.p_int == ALWAYS_TRUE\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    let _ = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    let result = bernoulli.p();",
                "    assert_eq!(result, 0.0 / SCALE);",
                "    assert!(result.is_finite());",
                "    assert!(result >= 0.0);",
                "    assert!(result <= 1.0);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    let _ = bernoulli.p();",
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    let result = bernoulli.p();",
                "    assert_eq!(result, 0.0 / SCALE);",
                "    assert!(result.is_finite());",
                "    assert!(result >= 0.0);",
                "    assert!(result <= 1.0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: (u64::MAX >> 1) }; ",
                "    let _ = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bernoulli.p(), (u64::MAX >> 1) as f64 / SCALE);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: (u64::MAX >> 1) }; ",
                "    let _ = bernoulli.p();",
                "    assert_eq!(bernoulli.p(), (u64::MAX >> 1) as f64 / SCALE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
                "    let _ = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bernoulli.p(), (u64::MAX - 1) as f64 / SCALE);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
                "    let _ = bernoulli.p();",
                "    assert_eq!(bernoulli.p(), (u64::MAX - 1) as f64 / SCALE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: 1 };",
                "    let _ = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bernoulli.p(), 1.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 2 };",
                "    assert_eq!(bernoulli.p(), 2.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 100 };",
                "    assert_eq!(bernoulli.p(), 100.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: ALWAYS_TRUE - 1 };",
                "    assert_eq!(bernoulli.p(), (ALWAYS_TRUE - 1) as f64 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    assert_eq!(bernoulli.p(), 0.0);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: 1 };",
                "    let _ = bernoulli.p();",
                "    assert_eq!(bernoulli.p(), 1.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 2 };",
                "    assert_eq!(bernoulli.p(), 2.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 100 };",
                "    assert_eq!(bernoulli.p(), 100.0 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: ALWAYS_TRUE - 1 };",
                "    assert_eq!(bernoulli.p(), (ALWAYS_TRUE - 1) as f64 / SCALE);",
                "    let bernoulli = Bernoulli { p_int: 0 };",
                "    assert_eq!(bernoulli.p(), 0.0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX / 10 }; ",
                "    let _ = bernoulli.p();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bernoulli.p(), (u64::MAX / 10) as f64 / SCALE);"
              ],
              "code": [
                "{",
                "    let bernoulli = Bernoulli { p_int: u64::MAX / 10 }; ",
                "    let _ = bernoulli.p();",
                "    assert_eq!(bernoulli.p(), (u64::MAX / 10) as f64 / SCALE);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}