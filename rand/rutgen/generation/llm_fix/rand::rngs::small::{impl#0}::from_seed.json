{
  "name": "rand::rngs::small::{impl#0}::from_seed",
  "mod_info": {
    "name": "rngs::small",
    "loc": "src/rngs/mod.rs:87:1:87:11"
  },
  "visible": true,
  "loc": "src/rngs/small.rs:91:5:97:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SmallRng(Rng::from_seed(seed))\n"
      ],
      "input_infer": "valid seed input: [u8; 32] with at least one non-zero byte for 64-bit platforms, and [u8; 32] for compatibility on 16/32-bit platforms; ensure boundary checks for all-zero seed arrays\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [1; 32]; // valid seed with all bytes non-zero",
                "    let rng = SmallRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng, SmallRng(Rng::from_seed(seed)));",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng.s, [0; 4]);",
                "    let seed: [u8; 32] = rand::random();",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert!(rng != SmallRng::from_seed([0; 32]));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [1; 32]; // valid seed with all bytes non-zero",
                "    let rng = SmallRng::from_seed(seed);",
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng, SmallRng(Rng::from_seed(seed)));",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng.s, [0; 4]);",
                "    let seed: [u8; 32] = rand::random();",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert!(rng != SmallRng::from_seed([0; 32]));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0; 32]; // all bytes are zero, should not return a valid state",
                "    let rng = SmallRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [1; 32]; // all bytes are one",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [255; 32]; // all bytes are 255",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]; // diverse seed",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0; 32]; // all bytes are zero, should not return a valid state",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [1; 32]; // all bytes are one",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [255; 32]; // all bytes are 255",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]; // diverse seed",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_ne!(rng, SmallRng(Rng::seed_from_u64(0)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0; 31].chain(Some(1)).collect::<Vec<_>>().try_into().unwrap(); // last byte non-zero",
                "    let rng = SmallRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0; 31].chain(Some(1)).collect::<Vec<_>>().try_into().unwrap();",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng, SmallRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "   {",
                "      let seed: [u8; 32] = {",
                "          let mut vec = vec![0; 31];",
                "          vec.push(1);",
                "          vec.try_into().unwrap() // last byte non-zero",
                "      };",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut seed: [u8; 32] = [0; 32];",
                "    seed[16] = 1; // non-zero in the middle",
                "    let rng = SmallRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, SmallRng(Rng::from_seed(&seed[..LEN].try_into().unwrap())));",
                "    assert_eq!(rng.0.s, [0, 0, 0, 0]);",
                "    seed[16] = 0;",
                "    let rng_zero = SmallRng::from_seed(seed);",
                "    assert_ne!(rng_zero.0.s, [0, 0, 0, 0]);",
                "    let rng_with_changed_seed = SmallRng::from_seed([2; 32]);",
                "    assert_ne!(rng_with_changed_seed.0.s, rng.0.s);"
              ],
              "code": [
                "{",
                "   let mut seed: [u8; 32] = [0; 32];",
                "   seed[16] = 1; // non-zero in the middle",
                "   let rng = SmallRng::from_seed(seed);",
                "   const LEN: usize = core::mem::size_of::<<Rng as SeedableRng>::Seed>();",
                "    assert_eq!(rng.0.s, [0, 0, 0, 0]);",
                "    seed[16] = 0;",
                "    let rng_zero = SmallRng::from_seed(seed);",
                "    assert_ne!(rng_zero.0.s, [0, 0, 0, 0]);",
                "    let rng_with_changed_seed = SmallRng::from_seed([2; 32]);",
                "    assert_ne!(rng_with_changed_seed.0.s, rng.0.s);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0, 1].iter().cycle().take(32).cloned().collect::<Vec<_>>().try_into().unwrap(); // alternating bytes",
                "    let rng = SmallRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0, 1].iter().cycle().take(32).cloned().collect::<Vec<_>>().try_into().unwrap();",
                "    let rng = SmallRng::from_seed(seed);",
                "    assert_eq!(rng, SmallRng(Rng::from_seed(seed)));",
                "    assert!(rng.0.s.iter().all(|&x| x != 0));",
                "    assert!(rng.0.s.len() == 4);",
                "    assert_eq!(rng.0.get_type(), \"Xoshiro256PlusPlus\");"
              ],
              "code": [
                "   {",
                "      let seed: [u8; 32] = [0, 1].iter().cycle().take(32).cloned().collect::<std::vec::Vec<_>>().try_into().unwrap(); // alternating bytes  ",
                "      let mut rng = SmallRng::from_seed(seed);  ",
                "      let seed: [u8; 32] = [0, 1].iter().cycle().take(32).cloned().collect::<std::vec::Vec<_>>().try_into().unwrap();  ",
                "      let mut rng = SmallRng::from_seed(seed);  ",
                "      assert_eq!(rng, SmallRng(Rng::from_seed(seed)));  ",
                "      assert!(rng.0.next_u64() != 0);  ",
                "      assert!(rng.0.next_u64() > 0);  ",
                "      assert_eq!(std::any::type_name::<Rng>(), \"Xoshiro256PlusPlus\");  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}