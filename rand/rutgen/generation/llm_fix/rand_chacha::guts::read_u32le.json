{
  "name": "rand_chacha::guts::read_u32le",
  "mod_info": {
    "name": "guts",
    "loc": "rand_chacha/src/lib.rs:97:1:97:10"
  },
  "visible": false,
  "loc": "rand_chacha/src/guts.rs:243:1:246:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is true\n",
        "expected return value/type: u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)\n"
      ],
      "input_infer": "Input condition: A byte slice `xs` of length exactly 4 containing any values from 0 to 255 for each byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[0, 0, 0, 0];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[255, 0, 0, 0]), 255);",
                "    assert_eq!(read_u32le(&[0, 255, 0, 0]), 65280);",
                "    assert_eq!(read_u32le(&[0, 0, 255, 0]), 16711680);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 255]), 4278190080);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[0, 0, 0, 0];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[255, 0, 0, 0]), 255);",
                "    assert_eq!(read_u32le(&[0, 255, 0, 0]), 65280);",
                "    assert_eq!(read_u32le(&[0, 0, 255, 0]), 16711680);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 255]), 4278190080);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[255, 255, 255, 255];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4294967295);",
                "    assert_eq!(result, u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24));",
                "    assert_eq!(xs.len(), 4);",
                "    assert!(result.is_u32());"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[255, 255, 255, 255];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(result, 4294967295);",
                "    assert_eq!(result, u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24));",
                "    assert_eq!(xs.len(), 4);",
                "    assert!(result.is_u32());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[128, 128, 128, 128];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x80808080);",
                "    assert_eq!(result, u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24));",
                "    assert!(xs.len() == 4);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[128, 128, 128, 128];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(result, 0x80808080);",
                "    assert_eq!(result, u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24));",
                "    assert!(xs.len() == 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x04030201);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(result, 0x04030201);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[42, 43, 44, 45];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0x2D2C2B2A);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[42, 43, 44, 45];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(result, 0x2D2C2B2A);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3];",
                "    let result = read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));",
                "    let xs_valid: &[u8] = &[1, 2, 3, 4];",
                "    let result_valid = read_u32le(xs_valid);",
                "    assert_eq!(result_valid, 67305985);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3];",
                "    let result = read_u32le(xs);",
                "    assert_eq!(result, 0);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));",
                "    let xs_valid: &[u8] = &[1, 2, 3, 4];",
                "    let result_valid = read_u32le(xs_valid);",
                "    assert_eq!(result_valid, 67305985);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (*left_val == *right_val) at line 40 is false\n"
      ],
      "input_infer": "Input: any byte array `xs` where `xs.len() != 4`, any byte array `xs` with `xs.len() == 4` containing values in the range [0, 255] for each byte.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3]; // Length is 3",
                "    read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(|| read_u32le(&[1, 2, 3]));",
                "    assert_panics!(|| read_u32le(&[1, 2]));",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3]; // Length is 3",
                "    read_u32le(xs);",
                "    assert_panics!(|| read_u32le(&[1, 2, 3]));",
                "    assert_panics!(|| read_u32le(&[1, 2]));",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4, 5]; // Length is 5",
                "    read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3, 4, 5])).is_err());",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3])).is_err());",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[])).is_err());",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1; 5])).is_err());"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4, 5]; // Length is 5",
                "    read_u32le(xs);",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3, 4, 5])).is_err());",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3])).is_err());",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[])).is_err());",
                "    assert!(std::panic::catch_unwind(|| read_u32le(&[1; 5])).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4]; // Length is 4, values in range [0, 255]",
                "    read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u32le(&[1, 2, 3, 4]), 67305985);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[12, 34, 56, 78]), 2018915346);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));  // Length < 4",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));  // Length > 4"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[1, 2, 3, 4]; // Length is 4, values in range [0, 255]",
                "    read_u32le(xs);",
                "    assert_eq!(read_u32le(&[1, 2, 3, 4]), 67305985);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[12, 34, 56, 78]), 2018915346);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));  // Length < 4",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));  // Length > 4",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[0, 0, 0, 0]; // Minimum values",
                "    read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[0xFF, 0xAB, 0xCD, 0xEF]), 0xEFCDABFF);",
                "    assert_eq!(read_u32le(&[0x12, 0x34, 0x56, 0x78]), 0x78563412);",
                "    assert_panics!(read_u32le(&[0; 3]));",
                "    assert_panics!(read_u32le(&[0; 5]));",
                "    assert_panics!(read_u32le(&[]));"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[0, 0, 0, 0]; // Minimum values",
                "    read_u32le(xs);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_eq!(read_u32le(&[0xFF, 0xAB, 0xCD, 0xEF]), 0xEFCDABFF);",
                "    assert_eq!(read_u32le(&[0x12, 0x34, 0x56, 0x78]), 0x78563412);",
                "    assert_panics!(read_u32le(&[0; 3]));",
                "    assert_panics!(read_u32le(&[0; 5]));",
                "    assert_panics!(read_u32le(&[]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs: &[u8] = &[255, 255, 255, 255]; // Maximum values",
                "    read_u32le(xs);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));"
              ],
              "code": [
                "{",
                "    let xs: &[u8] = &[255, 255, 255, 255]; // Maximum values",
                "    read_u32le(xs);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
                "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
                "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
                "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
                "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
                "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
                "    assert_panics!(read_u32le(&[1, 2, 3]));",
                "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}