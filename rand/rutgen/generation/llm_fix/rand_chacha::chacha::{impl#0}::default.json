{
  "name": "rand_chacha::chacha::{impl#0}::default",
  "mod_info": {
    "name": "chacha",
    "loc": "rand_chacha/src/lib.rs:96:1:96:12"
  },
  "visible": true,
  "loc": "rand_chacha/src/chacha.rs:31:5:42:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self([\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n            T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(), T::default(),\n        ])\n"
      ],
      "input_infer": "T: any type that implements Default trait, including boundary cases for types like i32 (0, i32::MAX, i32::MIN), f64 (0.0, f64::MAX, f64::MIN), and enum with at least one variant; ensure T is tested for both Copy and non-Copy types.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array: Array64<i32> = Array64::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_array.0, [0; 64]);",
                "    assert_eq!(_array.0.iter().all(|&x| x == 0), true);",
                "    assert_eq!(std::mem::size_of_val(&_array), 64 * std::mem::size_of::<i32>());",
                "    assert_eq!(_array.0.len(), 64);"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array: Array64<i32> = Array64::default();",
                "    assert_eq!(_array.0, [0; 64]);",
                "    assert_eq!(_array.0.iter().all(|&x| x == 0), true);",
                "    assert_eq!(std::mem::size_of_val(&_array), 64 * std::mem::size_of::<i32>());",
                "    assert_eq!(_array.0.len(), 64);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array: Array64<f64> = Array64::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_array.0, [0.0; 64]);",
                "    assert_eq!(_array.0.len(), 64);",
                "    assert!(std::mem::size_of_val(&_array) == std::mem::size_of::<Array64<f64>>());",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 64 * std::mem::size_of::<f64>());",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 512);",
                "    assert!(_array.0.iter().all(|&x| x == 0.0));"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array: Array64<f64> = Array64::default();",
                "    assert_eq!(_array.0, [0.0; 64]);",
                "    assert_eq!(_array.0.len(), 64);",
                "    assert!(std::mem::size_of_val(&_array) == std::mem::size_of::<Array64<f64>>());",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 64 * std::mem::size_of::<f64>());",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 512);",
                "    assert!(_array.0.iter().all(|&x| x == 0.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Default)]",
                "    enum TestEnum {",
                "        #[default]",
                "        Variant1,",
                "        Variant2,",
                "    }",
                "    let _array: Array64<TestEnum> = Array64::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_array.0, [TestEnum::Variant1; 64]);"
              ],
              "code": [
                "{",
                "    #[derive(Default)]",
                "    enum TestEnum {",
                "        #[default]",
                "        Variant1,",
                "        Variant2,",
                "    }",
                "    let _array: Array64<TestEnum> = Array64::default();",
                "    assert_eq!(_array.0, [TestEnum::Variant1; 64]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array_max: Array64<i32> = Array64::default();",
                "    let _array_min: Array64<i32> = Array64::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_array_max, Array64([0; 64]));",
                "    assert_eq!(_array_min, Array64([0; 64]));",
                "    let _array_custom: Array64<TestStruct> = Array64::default();",
                "    assert_eq!(_array_custom, Array64([TestStruct; 64]));"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array_max: Array64<i32> = Array64::default();",
                "    let _array_min: Array64<i32> = Array64::default();",
                "    assert_eq!(_array_max, Array64([0; 64]));",
                "    assert_eq!(_array_min, Array64([0; 64]));",
                "    let _array_custom: Array64<TestStruct> = Array64::default();",
                "    assert_eq!(_array_custom, Array64([TestStruct; 64]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array_max: Array64<f64> = Array64::default();",
                "    let _array_min: Array64<f64> = Array64::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_array_max.0, [0.0; 64]);",
                "    assert_eq!(_array_min.0, [0.0; 64]);",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 512);"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    impl Default for TestStruct {",
                "        fn default() -> Self {",
                "            TestStruct",
                "        }",
                "    }",
                "    let _array_max: Array64<f64> = Array64::default();",
                "    let _array_min: Array64<f64> = Array64::default();",
                "    assert_eq!(_array_max.0, [0.0; 64]);",
                "    assert_eq!(_array_min.0, [0.0; 64]);",
                "    assert!(std::mem::size_of::<Array64<f64>>() == 512);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}