{
  "name": "rand_core::block::{impl#3}::from_seed",
  "mod_info": {
    "name": "block",
    "loc": "rand_core/src/lib.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "rand_core/src/block.rs:241:5:243:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: valid seed values of type Self::Seed (including default instance, and edge cases with maximum and minimum potential sizes, if applicable).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 16];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let default_seed: <TestRng as SeedableRng>::Seed = Default::default();",
                "    let rng = TestRng::from_seed(default_seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.index(), 0);",
                "    assert!(rng.results.as_ref().is_empty());",
                "    assert_eq!(rng.core, TestRng::from_seed(default_seed).core);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 16];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let default_seed: <TestRng as SeedableRng>::Seed = Default::default();",
                "    let rng = TestRng::from_seed(default_seed);",
                "    assert_eq!(rng.index(), 0);",
                "    assert!(rng.results.as_ref().is_empty());",
                "    assert_eq!(rng.core, TestRng::from_seed(default_seed).core);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 32];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let maximum_seed: <TestRng as SeedableRng>::Seed = [255; 32];",
                "    let rng = TestRng::from_seed(maximum_seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.index(), 0);",
                "    assert!(matches!(rng.core, TestRng));",
                "    assert_eq!(rng.results.as_ref().len(), 0);",
                "    let minimum_seed: <TestRng as SeedableRng>::Seed = [0; 32];",
                "    let rng_min = TestRng::from_seed(minimum_seed);",
                "    assert!(matches!(rng_min.core, TestRng));",
                "    assert_eq!(rng_min.results.as_ref().len(), 0);",
                "    assert_ne!(rng, rng_min);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 32];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let maximum_seed: <TestRng as SeedableRng>::Seed = [255; 32];",
                "    let rng = TestRng::from_seed(maximum_seed);",
                "    assert_eq!(rng.index(), 0);",
                "    assert!(matches!(rng.core, TestRng));",
                "    assert_eq!(rng.results.as_ref().len(), 0);",
                "    let minimum_seed: <TestRng as SeedableRng>::Seed = [0; 32];",
                "    let rng_min = TestRng::from_seed(minimum_seed);",
                "    assert!(matches!(rng_min.core, TestRng));",
                "    assert_eq!(rng_min.results.as_ref().len(), 0);",
                "    assert_ne!(rng, rng_min);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 1];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let minimum_seed: <TestRng as SeedableRng>::Seed = [0];",
                "    let rng = TestRng::from_seed(minimum_seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.index(), 0);",
                "    assert!(rng.results.as_ref().is_empty());",
                "    let seed: <TestRng as SeedableRng>::Seed = [1];",
                "    let rng2 = TestRng::from_seed(seed);",
                "    assert_eq!(rng2.index(), 0);",
                "    assert!(rng2.results.as_ref().is_empty());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl SeedableRng for TestRng {",
                "        type Seed = [u8; 1];",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng",
                "        }",
                "        fn seed_from_u64(_state: u64) -> Self {",
                "            TestRng",
                "        }",
                "    }",
                "    ",
                "    let minimum_seed: <TestRng as SeedableRng>::Seed = [0];",
                "    let rng = TestRng::from_seed(minimum_seed);",
                "    assert_eq!(rng.index(), 0);",
                "    assert!(rng.results.as_ref().is_empty());",
                "    let seed: <TestRng as SeedableRng>::Seed = [1];",
                "    let rng2 = TestRng::from_seed(seed);",
                "    assert_eq!(rng2.index(), 0);",
                "    assert!(rng2.results.as_ref().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}