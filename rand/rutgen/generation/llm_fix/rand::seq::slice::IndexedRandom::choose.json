{
  "name": "rand::seq::slice::IndexedRandom::choose",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:52:5:61:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_empty() at line 56 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.len() == 0 and rng of any Rng type\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptySlice;",
                "",
                "    impl Index<usize> for EmptySlice {",
                "        type Output = bool;",
                "",
                "        fn index(&self, _: usize) -> &Self::Output {",
                "            &false",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for EmptySlice {",
                "        fn len(&self) -> usize {",
                "            0",
                "        }",
                "    }",
                "",
                "    let empty_slice = EmptySlice;",
                "    let mut rng = rand::rng();",
                "    let result = empty_slice.choose(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct EmptySlice;",
                "",
                "    impl Index<usize> for EmptySlice {",
                "        type Output = bool;",
                "",
                "        fn index(&self, _: usize) -> &Self::Output {",
                "            &false",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for EmptySlice {",
                "        fn len(&self) -> usize {",
                "            0",
                "        }",
                "    }",
                "",
                "    let empty_slice = EmptySlice;",
                "    let mut rng = rand::rng();",
                "    let result = empty_slice.choose(&mut rng);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyArray;",
                "",
                "    impl Index<usize> for EmptyArray {",
                "        type Output = i32;",
                "",
                "        fn index(&self, _: usize) -> &Self::Output {",
                "            &0",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for EmptyArray {",
                "        fn len(&self) -> usize {",
                "            0",
                "        }",
                "    }",
                "",
                "    let empty_array = EmptyArray;",
                "    let mut rng = rand::rng();",
                "    let result = empty_array.choose(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct EmptyArray;",
                "",
                "    impl Index<usize> for EmptyArray {",
                "        type Output = i32;",
                "",
                "        fn index(&self, _: usize) -> &Self::Output {",
                "            &0",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for EmptyArray {",
                "        fn len(&self) -> usize {",
                "            0",
                "        }",
                "    }",
                "",
                "    let empty_array = EmptyArray;",
                "    let mut rng = rand::rng();",
                "    let result = empty_array.choose(&mut rng);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_empty() at line 56 is false\n",
        "expected return value/type: Some(&self[rng.random_range(..self.len())])\n"
      ],
      "input_infer": "self.len() > 0; rng.random_range(..self.len()) in the range 0 to self.len() - 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestArray(&'static [i32]);",
                "    ",
                "    impl Index<usize> for TestArray {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for TestArray {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = TestArray(&[1, 2, 3, 4, 5]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(choices.len() > 0);",
                "    let result = choices.choose(&mut rng);",
                "    let index = rng.random_range(..choices.len());",
                "    assert_eq!(result, Some(&choices[index]));"
              ],
              "code": [
                "{",
                "    struct TestArray(&'static [i32]);",
                "    ",
                "    impl Index<usize> for TestArray {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for TestArray {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = TestArray(&[1, 2, 3, 4, 5]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "    assert!(choices.len() > 0);",
                "    let result = choices.choose(&mut rng);",
                "    let index = rng.random_range(..choices.len());",
                "    assert_eq!(result, Some(&choices[index]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestVector(Vec<i32>);",
                "    ",
                "    impl Index<usize> for TestVector {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for TestVector {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = TestVector(vec![10, 20, 30, 40, 50]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(choices.len() > 0);",
                "    assert!(choices.choose(&mut rng).is_some());",
                "    assert!(matches!(choices.choose(&mut rng), Some(&10) | Some(&20) | Some(&30) | Some(&40) | Some(&50)));",
                "    let result = choices.choose(&mut rng).unwrap();",
                "    assert!(choices.0.contains(&result));",
                "    assert!(result == &choices[0] || result == &choices[1] || result == &choices[2] || result == &choices[3] || result == &choices[4]);",
                "    assert_eq!(choices.len(), 5);"
              ],
              "code": [
                "{",
                "    struct TestVector(Vec<i32>);",
                "    ",
                "    impl Index<usize> for TestVector {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for TestVector {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = TestVector(vec![10, 20, 30, 40, 50]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "    assert!(choices.len() > 0);",
                "    assert!(choices.choose(&mut rng).is_some());",
                "    assert!(matches!(choices.choose(&mut rng), Some(&10) | Some(&20) | Some(&30) | Some(&40) | Some(&50)));",
                "    let result = choices.choose(&mut rng).unwrap();",
                "    assert!(choices.0.contains(&result));",
                "    assert!(result == &choices[0] || result == &choices[1] || result == &choices[2] || result == &choices[3] || result == &choices[4]);",
                "    assert_eq!(choices.len(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SingleElement(&'static [i32]);",
                "    ",
                "    impl Index<usize> for SingleElement {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for SingleElement {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = SingleElement(&[99]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(choices.len() > 0);",
                "    let result = choices.choose(&mut rng);",
                "    assert!(result.is_some());",
                "    let output = result.unwrap();",
                "    assert_eq!(*output, choices[0]);",
                "    assert_eq!(output, &99);"
              ],
              "code": [
                "{",
                "    struct SingleElement(&'static [i32]);",
                "    ",
                "    impl Index<usize> for SingleElement {",
                "        type Output = i32;",
                "",
                "        fn index(&self, index: usize) -> &Self::Output {",
                "            &self.0[index]",
                "        }",
                "    }",
                "",
                "    impl IndexedRandom for SingleElement {",
                "        fn len(&self) -> usize {",
                "            self.0.len()",
                "        }",
                "    }",
                "    ",
                "    let choices = SingleElement(&[99]);",
                "    let mut rng = rand::rng();",
                "    let _ = choices.choose(&mut rng);",
                "    assert!(choices.len() > 0);",
                "    let result = choices.choose(&mut rng);",
                "    assert!(result.is_some());",
                "    let output = result.unwrap();",
                "    assert_eq!(*output, choices[0]);",
                "    assert_eq!(output, &99);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}