{
  "name": "rand_pcg::pcg128cm::{impl#0}::from_state_incr",
  "mod_info": {
    "name": "pcg128cm",
    "loc": "rand_pcg/src/lib.rs:93:1:93:14"
  },
  "visible": false,
  "loc": "rand_pcg/src/pcg128cm.rs:103:5:109:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: pcg\n"
      ],
      "input_infer": "state: 0 to 2^128-1, increment: 1 to 2^128-1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, (state.wrapping_add(increment) * MULTIPLIER as u128) + increment);",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert_eq!(pcg.state, Lcg128CmDxsm64::from_state_incr(state, increment).state);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, (state.wrapping_add(increment) * MULTIPLIER as u128) + increment);",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert_eq!(pcg.state, Lcg128CmDxsm64::from_state_incr(state, increment).state);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 5;",
                "    let increment: u128 = 10;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER) + increment) % (u128::MAX + 1));",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert_eq!(pcg.increment & 1, 1);",
                "    assert_eq!(pcg.state % MULTIPLIER, (state.wrapping_mul(MULTIPLIER) + increment) % (u128::MAX + 1));"
              ],
              "code": [
                "{",
                "    let state: u128 = 5;",
                "    let increment: u128 = 10;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER) + increment) % (u128::MAX + 1));",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert_eq!(pcg.increment & 1, 1);",
                "    assert_eq!(pcg.state % MULTIPLIER, (state.wrapping_mul(MULTIPLIER) + increment) % (u128::MAX + 1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 123456789;",
                "    let increment: u128 = u128::MAX - 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, (state.wrapping_add(increment) * MULTIPLIER as u128 + increment) % u128::MAX);",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state < u128::MAX);"
              ],
              "code": [
                "{",
                "    let state: u128 = 123456789;",
                "    let increment: u128 = u128::MAX - 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, (state.wrapping_add(increment) * MULTIPLIER as u128 + increment) % u128::MAX);",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state < u128::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX - 1;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.state < u128::MAX);",
                "    assert_eq!(pcg.increment & 1, 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX - 1;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.state < u128::MAX);",
                "    assert_eq!(pcg.increment & 1, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 98765432101234567890;",
                "    let increment: u128 = 11223344556677889900;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER as u128).wrapping_add(increment));",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.increment % 2 == 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = 98765432101234567890;",
                "    let increment: u128 = 11223344556677889900;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER as u128).wrapping_add(increment));",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.increment % 2 == 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let increment: u128 = u128::MAX;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    let expected_state: u128 = (u128::MAX.wrapping_add(u128::MAX)) * MULTIPLIER + (u128::MAX << 1 | 1);",
                "    assert_eq!(pcg.state, expected_state);",
                "    assert_eq!(pcg.increment, (u128::MAX << 1) | 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let increment: u128 = u128::MAX;",
                "    let pcg = Lcg128CmDxsm64::from_state_incr(state, increment);",
                "    let expected_state: u128 = (u128::MAX.wrapping_add(u128::MAX)) * MULTIPLIER + (u128::MAX << 1 | 1);",
                "    assert_eq!(pcg.state, expected_state);",
                "    assert_eq!(pcg.increment, (u128::MAX << 1) | 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}