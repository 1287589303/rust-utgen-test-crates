{
  "name": "rand_core::impls::{impl#0}::to_le_bytes",
  "mod_info": {
    "name": "impls",
    "loc": "rand_core/src/lib.rs:44:1:44:15"
  },
  "visible": true,
  "loc": "rand_core/src/impls.rs:61:5:63:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self: u64 type input, valid u64 values (0 to 2^64-1), including boundary cases (0, 1, 2^64-1) and edge scenarios (alternating patterns, maximum and minimum values)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0;",
                "    let bytes = value.to_le_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes, [0, 0, 0, 0, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0;",
                "    let bytes = value.to_le_bytes();",
                "    assert_eq!(bytes, [0, 0, 0, 0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 1;",
                "    let bytes = value.to_le_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes, [1, 0, 0, 0, 0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let value: u64 = 1;",
                "    let bytes = value.to_le_bytes();",
                "    assert_eq!(bytes, [1, 0, 0, 0, 0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = u64::MAX;",
                "    let bytes = value.to_le_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes, [255, 255, 255, 255, 255, 255, 255, 255]);",
                "    let value_zero: u64 = 0;",
                "    let bytes_zero = value_zero.to_le_bytes();",
                "    assert_eq!(bytes_zero, [0, 0, 0, 0, 0, 0, 0, 0]);",
                "    let value_mid: u64 = 123456789;",
                "    let bytes_mid = value_mid.to_le_bytes();",
                "    assert_eq!(bytes_mid, [21, 205, 91, 7, 0, 0, 0, 0]);",
                "    let value_neg: i64 = -1;",
                "    let bytes_neg = value_neg.to_le_bytes();",
                "    assert_eq!(bytes_neg, [255, 255, 255, 255, 255, 255, 255, 255]);",
                "    let value_high: u64 = 1 << 63;",
                "    let bytes_high = value_high.to_le_bytes();",
                "    assert_eq!(bytes_high, [0, 0, 0, 0, 0, 0, 0, 128]);"
              ],
              "code": [
                "{",
                "    let value: u64 = u64::MAX;",
                "    let bytes = value.to_le_bytes();",
                "    assert_eq!(bytes, [255, 255, 255, 255, 255, 255, 255, 255]);",
                "    let value_zero: u64 = 0;",
                "    let bytes_zero = value_zero.to_le_bytes();",
                "    assert_eq!(bytes_zero, [0, 0, 0, 0, 0, 0, 0, 0]);",
                "    let value_mid: u64 = 123456789;",
                "    let bytes_mid = value_mid.to_le_bytes();",
                "    assert_eq!(bytes_mid, [21, 205, 91, 7, 0, 0, 0, 0]);",
                "    let value_neg: i64 = -1;",
                "    let bytes_neg = value_neg.to_le_bytes();",
                "    assert_eq!(bytes_neg, [255, 255, 255, 255, 255, 255, 255, 255]);",
                "    let value_high: u64 = 1 << 63;",
                "    let bytes_high = value_high.to_le_bytes();",
                "    assert_eq!(bytes_high, [0, 0, 0, 0, 0, 0, 0, 128]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0b0101010101010101010101010101010101010101010101010101010101010101;",
                "    let bytes = value.to_le_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes, [0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]);",
                "    assert_eq!(bytes.len(), 8);",
                "    assert_eq!(bytes.as_ref(), &[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]);",
                "    assert!(bytes.iter().all(|&b| b == 0x55));",
                "    assert_eq!(u64::from_le_bytes(bytes), value);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0b0101010101010101010101010101010101010101010101010101010101010101;",
                "    let bytes = value.to_le_bytes();",
                "    assert_eq!(bytes, [0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]);",
                "    assert_eq!(bytes.len(), 8);",
                "    assert_eq!(bytes.as_ref(), &[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]);",
                "    assert!(bytes.iter().all(|&b| b == 0x55));",
                "    assert_eq!(u64::from_le_bytes(bytes), value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: u64 = 0b1010101010101010101010101010101010101010101010101010101010101010;",
                "    let bytes = value.to_le_bytes();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bytes, [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]);"
              ],
              "code": [
                "{",
                "    let value: u64 = 0b1010101010101010101010101010101010101010101010101010101010101010;",
                "    let bytes = value.to_le_bytes();",
                "    assert_eq!(bytes, [0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}