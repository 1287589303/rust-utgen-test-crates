{
  "name": "rand_pcg::pcg64::{impl#3}::fill_bytes",
  "mod_info": {
    "name": "pcg64",
    "loc": "rand_pcg/src/lib.rs:94:1:94:11"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg64.rs:161:5:163:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "dest: non-null mutable slice of u8 with length ranging from 0 to 1024\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 0, increment: 0 };",
                "    let mut dest: [u8; 0] = [];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 0);",
                "    assert!(dest.is_empty());",
                "    rng.state = 1;",
                "    rng.increment = 1;",
                "    let mut dest: [u8; 10] = [0; 10];",
                "    rng.fill_bytes(&mut dest);",
                "    assert!(dest.iter().any(|&x| x != 0));",
                "    assert_eq!(rng.state, 0);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 0, increment: 0 };",
                "    let mut dest: [u8; 0] = [];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 0);",
                "    assert!(dest.is_empty());",
                "    rng.state = 1;",
                "    rng.increment = 1;",
                "    let mut dest: [u8; 10] = [0; 10];",
                "    rng.fill_bytes(&mut dest);",
                "    assert!(dest.iter().any(|&x| x != 0));",
                "    assert_eq!(rng.state, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 1, increment: 1 };",
                "    let mut dest = [0u8; 1];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 1);",
                "    assert!(dest[0] != 0);",
                "    assert!(rng.state != 1);",
                "    assert!(rng.increment != 1);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 1, increment: 1 };",
                "    let mut dest = [0u8; 1];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 1);",
                "    assert!(dest[0] != 0);",
                "    assert!(rng.state != 1);",
                "    assert!(rng.increment != 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 2, increment: 2 };",
                "    let mut dest = [0u8; 512];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 512);",
                "    assert!(dest.iter().any(|&b| b != 0));",
                "    assert!(dest.iter().all(|&b| b <= 255));",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 2, increment: 2 };",
                "    let mut dest = [0u8; 512];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 512);",
                "    assert!(dest.iter().any(|&b| b != 0));",
                "    assert!(dest.iter().all(|&b| b <= 255));",
                "    assert!(rng.state > 0);",
                "    assert!(rng.increment > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 3, increment: 3 };",
                "    let mut dest = [0u8; 1024];",
                "    rng.fill_bytes(&mut dest);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(dest.len(), 1024);",
                "    assert!(dest.iter().all(|&x| x >= 0u8));",
                "    assert!(dest.iter().all(|&x| x <= 255u8));",
                "    assert_ne!(dest, [0u8; 1024]);"
              ],
              "code": [
                "{",
                "    let mut rng = Lcg64Xsh32 { state: 3, increment: 3 };",
                "    let mut dest = [0u8; 1024];",
                "    rng.fill_bytes(&mut dest);",
                "    assert_eq!(dest.len(), 1024);",
                "    assert!(dest.iter().all(|&x| x >= 0u8));",
                "    assert!(dest.iter().all(|&x| x <= 255u8));",
                "    assert_ne!(dest, [0u8; 1024]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}