{
  "name": "rand::distr::slice::{impl#0}::new",
  "mod_info": {
    "name": "distr::slice",
    "loc": "src/distr/mod.rs:100:1:100:15"
  },
  "visible": true,
  "loc": "src/distr/slice.rs:69:5:77:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: NonZeroUsize::new(slice.len()).ok_or(Empty)? at line 70 is Err/None\n"
      ],
      "input_infer": "slice: &[] (empty slice), slice: &[1], slice: &[1, 2, 3, 4, 5] (non-empty slices with various lengths)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u32] = &[];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Empty);"
              ],
              "code": [
                "{",
                "    let slice: &[u32] = &[];",
                "    let result = Choose::new(slice);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u32] = &[1];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().slice, slice);",
                "    assert_eq!(result.unwrap().num_choices(), NonZeroUsize::new(1).unwrap());"
              ],
              "code": [
                "{",
                "    let slice: &[u32] = &[1];",
                "    let result = Choose::new(slice);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().slice, slice);",
                "    assert_eq!(result.unwrap().num_choices(), NonZeroUsize::new(1).unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), false);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().num_choices().get(), 5);",
                "    assert_eq!(result.unwrap().slice.len(), 5);",
                "    assert_eq!(result.unwrap().slice, &[1, 2, 3, 4, 5]);",
                "    ",
                "    let empty_slice: &[u32] = &[];",
                "    let result_empty = Choose::new(empty_slice);",
                "    assert_eq!(result_empty.is_err(), true);",
                "    assert_eq!(result_empty.unwrap_err(), Empty);"
              ],
              "code": [
                "{",
                "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
                "    let result = Choose::new(slice);",
                "    assert_eq!(result.is_err(), false);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap().num_choices().get(), 5);",
                "    assert_eq!(result.unwrap().slice.len(), 5);",
                "    assert_eq!(result.unwrap().slice, &[1, 2, 3, 4, 5]);",
                "    ",
                "    let empty_slice: &[u32] = &[];",
                "    let result_empty = Choose::new(empty_slice);",
                "    assert_eq!(result_empty.is_err(), true);",
                "    assert_eq!(result_empty.unwrap_err(), Empty);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: NonZeroUsize::new(slice.len()).ok_or(Empty)? at line 70 is Ok/Some\n",
        "expected return value/type: Ok(Self {\n            slice,\n            range: UniformUsize::new(0, num_choices.get()).unwrap(),\n            num_choices,\n        })\n"
      ],
      "input_infer": "slice: non-empty array of any data type\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[i32] = &[1, 2, 3, 4, 5];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let choose_instance = result.unwrap();",
                "    assert_eq!(choose_instance.slice, slice);",
                "    assert_eq!(choose_instance.num_choices().get(), 5);",
                "    assert_eq!(choose_instance.range.low, 0);",
                "    assert_eq!(choose_instance.range.range, 5);"
              ],
              "code": [
                "{",
                "    let slice: &[i32] = &[1, 2, 3, 4, 5];",
                "    let result = Choose::new(slice);",
                "    assert!(result.is_ok());",
                "    let choose_instance = result.unwrap();",
                "    assert_eq!(choose_instance.slice, slice);",
                "    assert_eq!(choose_instance.num_choices().get(), 5);",
                "    assert_eq!(choose_instance.range.low, 0);",
                "    assert_eq!(choose_instance.range.range, 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[&str] = &[\"a\", \"b\", \"c\"];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let choose_instance = result.unwrap();",
                "    assert_eq!(choose_instance.num_choices(), NonZeroUsize::new(3).unwrap());",
                "    assert_eq!(choose_instance.slice, slice);",
                "    assert_eq!(choose_instance.range, UniformUsize::new(0, 3).unwrap());"
              ],
              "code": [
                "{",
                "    let slice: &[&str] = &[\"a\", \"b\", \"c\"];",
                "    let result = Choose::new(slice);",
                "    assert!(result.is_ok());",
                "    let choose_instance = result.unwrap();",
                "    assert_eq!(choose_instance.num_choices(), NonZeroUsize::new(3).unwrap());",
                "    assert_eq!(choose_instance.slice, slice);",
                "    assert_eq!(choose_instance.range, UniformUsize::new(0, 3).unwrap());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &[f64] = &[1.1, 2.2, 3.3];",
                "    let result = Choose::new(slice);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let choose_instance = result.unwrap();",
                "    assert_eq!(choose_instance.slice, slice);",
                "    assert_eq!(choose_instance.num_choices().get(), 3);",
                "    assert_eq!(choose_instance.range.low, 0);",
                "    assert_eq!(choose_instance.range.range, 3);"
              ],
              "code": [
                "{",
                "   let slice: &[f64] = &[1.1, 2.2, 3.3];  ",
                "   let result = Choose::new(slice);  ",
                "   assert!(result.is_ok());  ",
                "   let choose_instance = result.unwrap();  ",
                "   assert_eq!(choose_instance.slice, slice);  ",
                "   assert_eq!(choose_instance.num_choices().get(), 3);  ",
                "   assert_eq!(choose_instance.range.low, 0);  ",
                "   assert_eq!(choose_instance.num_choices().get(), 3);  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}