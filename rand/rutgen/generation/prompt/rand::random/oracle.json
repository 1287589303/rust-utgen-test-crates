{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is rand\npub use rand_core;\npub use rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[cfg(feature = \"thread_rng\")]\npub use crate::rngs::thread::rng;\npub use rng::{Fill, Rng};\n#[cfg(feature = \"thread_rng\")]\nuse crate::distr::{Distribution, StandardUniform};\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[cfg(feature = \"thread_rng\")]\n#[inline]\npub fn random<T>() -> T\nwhere\n    StandardUniform: Distribution<T>,\n{\n    rng().random()\n}\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Generate a random value using the thread-local random number generator.\n///\n/// This function is shorthand for <code>[rng()].[random()](Rng::random)</code>:\n///\n/// -   See [`ThreadRng`] for documentation of the generator and security\n/// -   See [`StandardUniform`] for documentation of supported types and distributions\n///\n/// # Examples\n///\n/// ```\n/// let x = rand::random::<u8>();\n/// println!(\"{}\", x);\n///\n/// let y = rand::random::<f64>();\n/// println!(\"{}\", y);\n///\n/// if rand::random() { // generates a boolean\n///     println!(\"Better lucky than good!\");\n/// }\n/// ```\n///\n/// If you're calling `random()` repeatedly, consider using a local `rng`\n/// handle to save an initialization-check on each usage:\n///\n/// ```\n/// use rand::Rng; // provides the `random` method\n///\n/// let mut rng = rand::rng(); // a local handle to the generator\n///\n/// let mut v = vec![1, 2, 3];\n///\n/// for x in v.iter_mut() {\n///     *x = rng.random();\n/// }\n/// ```\n///\n/// [`StandardUniform`]: distr::StandardUniform\n/// [`ThreadRng`]: rngs::ThreadRng\n171 pub fn random<T>() -> T\n172 where\n173     StandardUniform: Distribution<T>,\n174 {\n175     rng().random()\n176 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}