{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/mod.rs\n// crate name is rand\nuse core::fmt;\npub use weighted_index::WeightedIndex;\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str(\n            match *self {\n                Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n                Error::InvalidWeight => {\n                    \"A weight is negative, too large or not a valid number\"\n                }\n                Error::InsufficientNonZero => \"Not enough weights > zero\",\n                Error::Overflow => \"Overflow when summing weights\",\n            },\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n107 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n108     f.write_str(match *self {\n109         Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n110         Error::InvalidWeight => \"A weight is negative, too large or not a valid number\",\n111         Error::InsufficientNonZero => \"Not enough weights > zero\",\n112         Error::Overflow => \"Overflow when summing weights\",\n113     })\n114 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}