{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/mod.rs\n// crate name is rand\nuse core::fmt;\npub use weighted_index::WeightedIndex;\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str(\n            match *self {\n                Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n                Error::InvalidWeight => {\n                    \"A weight is negative, too large or not a valid number\"\n                }\n                Error::InsufficientNonZero => \"Not enough weights > zero\",\n                Error::Overflow => \"Overflow when summing weights\",\n            },\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n107 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n108     f.write_str(match *self {\n109         Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n110         Error::InvalidWeight => \"A weight is negative, too large or not a valid number\",\n111         Error::InsufficientNonZero => \"Not enough weights > zero\",\n112         Error::Overflow => \"Overflow when summing weights\",\n113     })\n114 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}