{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/mod.rs\n// crate name is rand\nuse core::fmt;\npub use weighted_index::WeightedIndex;\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\nimpl fmt::Display for Error {\n    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n        f.write_str(\n            match *self {\n                Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n                Error::InvalidWeight => {\n                    \"A weight is negative, too large or not a valid number\"\n                }\n                Error::InsufficientNonZero => \"Not enough weights > zero\",\n                Error::Overflow => \"Overflow when summing weights\",\n            },\n        )\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n107 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n108     f.write_str(match *self {\n109         Error::InvalidInput => \"Weights sequence is empty/too long/unordered\",\n110         Error::InvalidWeight => \"A weight is negative, too large or not a valid number\",\n111         Error::InsufficientNonZero => \"Not enough weights > zero\",\n112         Error::Overflow => \"Overflow when summing weights\",\n113     })\n114 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}