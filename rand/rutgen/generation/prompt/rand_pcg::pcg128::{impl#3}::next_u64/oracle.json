{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg128Xsl64 {\n    state: u128,\n    increment: u128,\n}\nimpl RngCore for Lcg128Xsl64 {\n    #[inline]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline]\n    fn next_u64(&mut self) -> u64 {\n        self.step();\n        output_xsl_rr(self.state)\n    }\n    #[inline]\n    fn fill_bytes(&mut self, dest: &mut [u8]) {}\n}\nimpl Lcg128Xsl64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {}\n    pub fn new(state: u128, stream: u128) -> Self {\n        let increment = (stream << 1) | 1;\n        Lcg128Xsl64::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u128, increment: u128) -> Self {\n        let mut pcg = Lcg128Xsl64 { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline]\n    fn step(&mut self) {\n        self.state = self.state.wrapping_mul(MULTIPLIER).wrapping_add(self.increment);\n    }\n}\n#[inline(always)]\nfn output_xsl_rr(state: u128) -> u64 {\n    const XSHIFT: u32 = 64;\n    const ROTATE: u32 = 122;\n    let rot = (state >> ROTATE) as u32;\n    let xsl = ((state >> XSHIFT) as u64) ^ (state as u64);\n    xsl.rotate_right(rot)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n146 fn next_u64(&mut self) -> u64 {\n147     self.step();\n148     output_xsl_rr(self.state)\n149 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}