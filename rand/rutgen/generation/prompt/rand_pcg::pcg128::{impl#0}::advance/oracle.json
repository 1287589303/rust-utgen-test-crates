{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg128Xsl64 {\n    state: u128,\n    increment: u128,\n}\nimpl Lcg128Xsl64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {\n        let mut acc_mult: u128 = 1;\n        let mut acc_plus: u128 = 0;\n        let mut cur_mult = MULTIPLIER;\n        let mut cur_plus = self.increment;\n        let mut mdelta = delta;\n        while mdelta > 0 {\n            if (mdelta & 1) != 0 {\n                acc_mult = acc_mult.wrapping_mul(cur_mult);\n                acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n            }\n            cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n            cur_mult = cur_mult.wrapping_mul(cur_mult);\n            mdelta /= 2;\n        }\n        self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n    }\n    pub fn new(state: u128, stream: u128) -> Self {\n        let increment = (stream << 1) | 1;\n        Lcg128Xsl64::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u128, increment: u128) -> Self {\n        let mut pcg = Lcg128Xsl64 { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline]\n    fn step(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Multi-step advance functions (jump-ahead, jump-back)\n///\n/// The method used here is based on Brown, \"Random Number Generation\n/// with Arbitrary Stride,\", Transactions of the American Nuclear\n/// Society (Nov. 1994).  The algorithm is very similar to fast\n/// exponentiation.\n///\n/// Even though delta is an unsigned integer, we can pass a\n/// signed integer to go backwards, it just goes \"the long way round\".\n///\n/// Using this function is equivalent to calling `next_64()` `delta`\n/// number of times.\n60 pub fn advance(&mut self, delta: u128) {\n61     let mut acc_mult: u128 = 1;\n62     let mut acc_plus: u128 = 0;\n63     let mut cur_mult = MULTIPLIER;\n64     let mut cur_plus = self.increment;\n65     let mut mdelta = delta;\n66 \n67     while mdelta > 0 {\n68         if (mdelta & 1) != 0 {\n69             acc_mult = acc_mult.wrapping_mul(cur_mult);\n70             acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n71         }\n72         cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n73         cur_mult = cur_mult.wrapping_mul(cur_mult);\n74         mdelta /= 2;\n75     }\n76     self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n77 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}