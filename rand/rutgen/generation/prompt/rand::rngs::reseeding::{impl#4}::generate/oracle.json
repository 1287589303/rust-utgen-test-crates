{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/reseeding.rs\n// crate name is rand\nuse core::mem::size_of_val;\nuse rand_core::block::{BlockRng, BlockRngCore, CryptoBlockRng};\nuse rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[derive(Debug)]\nstruct ReseedingCore<R, Rsdr> {\n    inner: R,\n    reseeder: Rsdr,\n    threshold: i64,\n    bytes_until_reseed: i64,\n}\nimpl<R, Rsdr> BlockRngCore for ReseedingCore<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    type Item = <R as BlockRngCore>::Item;\n    type Results = <R as BlockRngCore>::Results;\n    fn generate(&mut self, results: &mut Self::Results) {\n        if self.bytes_until_reseed <= 0 {\n            return self.reseed_and_generate(results);\n        }\n        let num_bytes = size_of_val(results.as_ref());\n        self.bytes_until_reseed -= num_bytes as i64;\n        self.inner.generate(results);\n    }\n}\nimpl<R, Rsdr> ReseedingCore<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        let threshold = if threshold == 0 {\n            i64::MAX\n        } else if threshold <= i64::MAX as u64 {\n            threshold as i64\n        } else {\n            i64::MAX\n        };\n        let inner = R::try_from_rng(&mut reseeder)?;\n        Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })\n    }\n    fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n    #[inline(never)]\n    fn reseed_and_generate(&mut self, results: &mut <Self as BlockRngCore>::Results) {\n        trace!(\"Reseeding RNG (periodic reseed)\");\n        let num_bytes = size_of_val(results.as_ref());\n        if let Err(e) = self.reseed() {\n            warn!(\"Reseeding RNG failed: {}\", e);\n            let _ = e;\n        }\n        self.bytes_until_reseed = self.threshold - num_bytes as i64;\n        self.inner.generate(results);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n162 fn generate(&mut self, results: &mut Self::Results) {\n163     if self.bytes_until_reseed <= 0 {\n164         // We get better performance by not calling only `reseed` here\n165         // and continuing with the rest of the function, but by directly\n166         // returning from a non-inlined function.\n167         return self.reseed_and_generate(results);\n168     }\n169     let num_bytes = size_of_val(results.as_ref());\n170     self.bytes_until_reseed -= num_bytes as i64;\n171     self.inner.generate(results);\n172 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}