{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/thread.rs\n// crate name is rand\nuse core::cell::UnsafeCell;\nuse std::fmt;\nuse std::rc::Rc;\nuse std::thread_local;\nuse rand_core::{CryptoRng, RngCore};\nuse super::std::Core;\nuse crate::rngs::OsRng;\nuse crate::rngs::ReseedingRng;\nconst THREAD_RNG_RESEED_THRESHOLD: u64 = 1024 * 64;\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[derive(Debug)]\npub struct ReseedingRng<R, Rsdr>(\n    BlockRng<ReseedingCore<R, Rsdr>>,\n)\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore;\nimpl RngCore for ThreadRng {\n    #[inline(always)]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline(always)]\n    fn next_u64(&mut self) -> u64 {\n        let rng = unsafe { &mut *self.rng.get() };\n        rng.next_u64()\n    }\n    #[inline(always)]\n    fn fill_bytes(&mut self, dest: &mut [u8]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n178 fn next_u64(&mut self) -> u64 {\n179     // SAFETY: We must make sure to stop using `rng` before anyone else\n180     // creates another mutable reference\n181     let rng = unsafe { &mut *self.rng.get() };\n182     rng.next_u64()\n183 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}