{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/weighted_index.rs\n// crate name is rand\nuse super::{Error, Weight};\nuse crate::distr::uniform::{SampleBorrow, SampleUniform, UniformSampler};\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\npub struct WeightedIndexIter<'a, X: SampleUniform + PartialOrd> {\n    weighted_index: &'a WeightedIndex<X>,\n    index: usize,\n}\n#[derive(Debug, Clone, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct WeightedIndex<X: SampleUniform + PartialOrd> {\n    cumulative_weights: Vec<X>,\n    total_weight: X,\n    weight_distribution: X::Sampler,\n}\nimpl<X> Iterator for WeightedIndexIter<'_, X>\nwhere\n    X: for<'b> core::ops::SubAssign<&'b X> + SampleUniform + PartialOrd + Clone,\n{\n    type Item = X;\n    fn next(&mut self) -> Option<Self::Item> {\n        match self.weighted_index.weight(self.index) {\n            None => None,\n            Some(weight) => {\n                self.index += 1;\n                Some(weight)\n            }\n        }\n    }\n}\nimpl<X: SampleUniform + PartialOrd + Clone> WeightedIndex<X> {\n    pub fn weight(&self, index: usize) -> Option<X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {\n        use core::cmp::Ordering::*;\n        let mut weight = match index.cmp(&self.cumulative_weights.len()) {\n            Less => self.cumulative_weights[index].clone(),\n            Equal => self.total_weight.clone(),\n            Greater => return None,\n        };\n        if index > 0 {\n            weight -= &self.cumulative_weights[index - 1];\n        }\n        Some(weight)\n    }\n    pub fn weights(&self) -> WeightedIndexIter<'_, X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {}\n    pub fn total_weight(&self) -> X {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n280 fn next(&mut self) -> Option<Self::Item> {\n281     match self.weighted_index.weight(self.index) {\n282         None => None,\n283         Some(weight) => {\n284             self.index += 1;\n285             Some(weight)\n286         }\n287     }\n288 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}