{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rng.rs\n// crate name is rand\nuse crate::distr::uniform::{SampleRange, SampleUniform};\nuse crate::distr::{self, Distribution, StandardUniform};\nuse core::num::Wrapping;\nuse rand_core::RngCore;\nuse zerocopy::IntoBytes;\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Debug)]\npub struct Iter<D, R, T> {\n    distr: D,\n    rng: R,\n    phantom: core::marker::PhantomData<T>,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create an iterator that generates values using the given distribution.\n///\n/// Note: this method consumes its arguments. Use\n/// `(&mut rng).sample_iter(..)` to avoid consuming the RNG.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n/// use rand::distr::{Alphanumeric, Uniform, StandardUniform};\n///\n/// let mut rng = rand::rng();\n///\n/// // Vec of 16 x f32:\n/// let v: Vec<f32> = (&mut rng).sample_iter(StandardUniform).take(16).collect();\n///\n/// // String:\n/// let s: String = (&mut rng).sample_iter(Alphanumeric)\n///     .take(7)\n///     .map(char::from)\n///     .collect();\n///\n/// // Combined values\n/// println!(\"{:?}\", (&mut rng).sample_iter(StandardUniform).take(5)\n///                              .collect::<Vec<(f64, bool)>>());\n///\n/// // Dice-rolling:\n/// let die_range = Uniform::new_inclusive(1, 6).unwrap();\n/// let mut roll_die = (&mut rng).sample_iter(die_range);\n/// while roll_die.next().unwrap() != 6 {\n///     println!(\"Not a 6; rolling again!\");\n/// }\n/// ```\n286 fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n287 where\n288     D: Distribution<T>,\n289     Self: Sized,\n290 {\n291     distr.sample_iter(self)\n292 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}