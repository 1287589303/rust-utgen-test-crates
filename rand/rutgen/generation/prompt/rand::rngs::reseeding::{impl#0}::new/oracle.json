{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/reseeding.rs\n// crate name is rand\nuse core::mem::size_of_val;\nuse rand_core::block::{BlockRng, BlockRngCore, CryptoBlockRng};\nuse rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[derive(Debug)]\npub struct ReseedingRng<R, Rsdr>(\n    BlockRng<ReseedingCore<R, Rsdr>>,\n)\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore;\n#[derive(Debug)]\nstruct ReseedingCore<R, Rsdr> {\n    inner: R,\n    reseeder: Rsdr,\n    threshold: i64,\n    bytes_until_reseed: i64,\n}\nimpl<R, Rsdr> ReseedingRng<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    pub fn new(threshold: u64, reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(threshold, reseeder)?)))\n    }\n    pub fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n}\nimpl<R, Rsdr> ReseedingCore<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        let threshold = if threshold == 0 {\n            i64::MAX\n        } else if threshold <= i64::MAX as u64 {\n            threshold as i64\n        } else {\n            i64::MAX\n        };\n        let inner = R::try_from_rng(&mut reseeder)?;\n        Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })\n    }\n    fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n    #[inline(never)]\n    fn reseed_and_generate(&mut self, results: &mut <Self as BlockRngCore>::Results) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n/// to use as reseeder.\n///\n/// `threshold` sets the number of generated bytes after which to reseed the\n/// PRNG. Set it to zero to never reseed based on the number of generated\n/// values.\n90 pub fn new(threshold: u64, reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n91     Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(\n92         threshold, reseeder,\n93     )?)))\n94 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}