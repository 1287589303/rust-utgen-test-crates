{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/reseeding.rs\n// crate name is rand\nuse core::mem::size_of_val;\nuse rand_core::block::{BlockRng, BlockRngCore, CryptoBlockRng};\nuse rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[derive(Debug)]\npub struct ReseedingRng<R, Rsdr>(\n    BlockRng<ReseedingCore<R, Rsdr>>,\n)\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore;\n#[derive(Debug)]\nstruct ReseedingCore<R, Rsdr> {\n    inner: R,\n    reseeder: Rsdr,\n    threshold: i64,\n    bytes_until_reseed: i64,\n}\nimpl<R, Rsdr> ReseedingRng<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    pub fn new(threshold: u64, reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(threshold, reseeder)?)))\n    }\n    pub fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n}\nimpl<R, Rsdr> ReseedingCore<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        let threshold = if threshold == 0 {\n            i64::MAX\n        } else if threshold <= i64::MAX as u64 {\n            threshold as i64\n        } else {\n            i64::MAX\n        };\n        let inner = R::try_from_rng(&mut reseeder)?;\n        Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })\n    }\n    fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n    #[inline(never)]\n    fn reseed_and_generate(&mut self, results: &mut <Self as BlockRngCore>::Results) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n/// to use as reseeder.\n///\n/// `threshold` sets the number of generated bytes after which to reseed the\n/// PRNG. Set it to zero to never reseed based on the number of generated\n/// values.\n90 pub fn new(threshold: u64, reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n91     Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(\n92         threshold, reseeder,\n93     )?)))\n94 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}