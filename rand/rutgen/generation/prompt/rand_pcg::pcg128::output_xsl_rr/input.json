{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[inline(always)]\nfn output_xsl_rr(state: u128) -> u64 {\n    const XSHIFT: u32 = 64;\n    const ROTATE: u32 = 122;\n    let rot = (state >> ROTATE) as u32;\n    let xsl = ((state >> XSHIFT) as u64) ^ (state as u64);\n    xsl.rotate_right(rot)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n261 fn output_xsl_rr(state: u128) -> u64 {\n262     // Output function XSL RR (\"xorshift low (bits), random rotation\")\n263     // Constants are for 128-bit state, 64-bit output\n264     const XSHIFT: u32 = 64; // (128 - 64 + 64) / 2\n265     const ROTATE: u32 = 122; // 128 - 6\n266 \n267     let rot = (state >> ROTATE) as u32;\n268     let xsl = ((state >> XSHIFT) as u64) ^ (state as u64);\n269     xsl.rotate_right(rot)\n270 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}