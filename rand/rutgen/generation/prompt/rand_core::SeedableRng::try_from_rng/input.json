{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/lib.rs\n// crate name is rand_core\nuse core::{fmt, ops::DerefMut};\n#[cfg(feature = \"os_rng\")]\npub use os::{OsError, OsRng};\npub trait SeedableRng: Sized {\n    type Seed: Clone + Default + AsRef<[u8]> + AsMut<[u8]>;\n    fn from_seed(seed: Self::Seed) -> Self;\n    fn seed_from_u64(mut state: u64) -> Self {\n        fn pcg32(state: &mut u64) -> [u8; 4] {\n            const MUL: u64 = 6364136223846793005;\n            const INC: u64 = 11634580027462260723;\n            *state = state.wrapping_mul(MUL).wrapping_add(INC);\n            let state = *state;\n            let xorshifted = (((state >> 18) ^ state) >> 27) as u32;\n            let rot = (state >> 59) as u32;\n            let x = xorshifted.rotate_right(rot);\n            x.to_le_bytes()\n        }\n        let mut seed = Self::Seed::default();\n        let mut iter = seed.as_mut().chunks_exact_mut(4);\n        for chunk in &mut iter {\n            chunk.copy_from_slice(&pcg32(&mut state));\n        }\n        let rem = iter.into_remainder();\n        if !rem.is_empty() {\n            rem.copy_from_slice(&pcg32(&mut state)[..rem.len()]);\n        }\n        Self::from_seed(seed)\n    }\n    fn from_rng(rng: &mut impl RngCore) -> Self {\n        let mut seed = Self::Seed::default();\n        rng.fill_bytes(seed.as_mut());\n        Self::from_seed(seed)\n    }\n    fn try_from_rng<R: TryRngCore>(rng: &mut R) -> Result<Self, R::Error> {\n        let mut seed = Self::Seed::default();\n        rng.try_fill_bytes(seed.as_mut())?;\n        Ok(Self::from_seed(seed))\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn from_os_rng() -> Self {\n        match Self::try_from_os_rng() {\n            Ok(res) => res,\n            Err(err) => panic!(\"from_os_rng failed: {}\", err),\n        }\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn try_from_os_rng() -> Result<Self, getrandom::Error> {\n        let mut seed = Self::Seed::default();\n        getrandom::fill(seed.as_mut())?;\n        let res = Self::from_seed(seed);\n        Ok(res)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new PRNG seeded from a potentially fallible `Rng`.\n///\n/// See [`from_rng`][SeedableRng::from_rng] docs for more information.\n530 fn try_from_rng<R: TryRngCore>(rng: &mut R) -> Result<Self, R::Error> {\n531     let mut seed = Self::Seed::default();\n532     rng.try_fill_bytes(seed.as_mut())?;\n533     Ok(Self::from_seed(seed))\n534 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}