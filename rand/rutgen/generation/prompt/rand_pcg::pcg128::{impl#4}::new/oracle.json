{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Mcg128Xsl64 {\n    state: u128,\n}\nimpl Mcg128Xsl64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {}\n    pub fn new(state: u128) -> Self {\n        Mcg128Xsl64 { state: state | 1 }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Construct an instance compatible with PCG seed.\n///\n/// Note that PCG specifies a default value for the parameter:\n///\n/// - `state = 0xcafef00dd15ea5e5`\n215 pub fn new(state: u128) -> Self {\n216     // Force low bit to 1, as in C version (C++ uses `state | 3` instead).\n217     Mcg128Xsl64 { state: state | 1 }\n218 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}