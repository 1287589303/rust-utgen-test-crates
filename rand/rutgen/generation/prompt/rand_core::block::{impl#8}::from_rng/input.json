{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/block.rs\n// crate name is rand_core\nuse crate::impls::fill_via_chunks;\nuse crate::{CryptoRng, RngCore, SeedableRng, TryRngCore};\nuse core::fmt;\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait SeedableRng: Sized {\n    type Seed: Clone + Default + AsRef<[u8]> + AsMut<[u8]>;\n    fn from_seed(seed: Self::Seed) -> Self;\n    fn seed_from_u64(mut state: u64) -> Self {\n        fn pcg32(state: &mut u64) -> [u8; 4] {\n            const MUL: u64 = 6364136223846793005;\n            const INC: u64 = 11634580027462260723;\n            *state = state.wrapping_mul(MUL).wrapping_add(INC);\n            let state = *state;\n            let xorshifted = (((state >> 18) ^ state) >> 27) as u32;\n            let rot = (state >> 59) as u32;\n            let x = xorshifted.rotate_right(rot);\n            x.to_le_bytes()\n        }\n        let mut seed = Self::Seed::default();\n        let mut iter = seed.as_mut().chunks_exact_mut(4);\n        for chunk in &mut iter {\n            chunk.copy_from_slice(&pcg32(&mut state));\n        }\n        let rem = iter.into_remainder();\n        if !rem.is_empty() {\n            rem.copy_from_slice(&pcg32(&mut state)[..rem.len()]);\n        }\n        Self::from_seed(seed)\n    }\n    fn from_rng(rng: &mut impl RngCore) -> Self {\n        let mut seed = Self::Seed::default();\n        rng.fill_bytes(seed.as_mut());\n        Self::from_seed(seed)\n    }\n    fn try_from_rng<R: TryRngCore>(rng: &mut R) -> Result<Self, R::Error> {\n        let mut seed = Self::Seed::default();\n        rng.try_fill_bytes(seed.as_mut())?;\n        Ok(Self::from_seed(seed))\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn from_os_rng() -> Self {\n        match Self::try_from_os_rng() {\n            Ok(res) => res,\n            Err(err) => panic!(\"from_os_rng failed: {}\", err),\n        }\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn try_from_os_rng() -> Result<Self, getrandom::Error> {\n        let mut seed = Self::Seed::default();\n        getrandom::fill(seed.as_mut())?;\n        let res = Self::from_seed(seed);\n        Ok(res)\n    }\n}\npub trait RngCore {\n    fn next_u32(&mut self) -> u32;\n    fn next_u64(&mut self) -> u64;\n    fn fill_bytes(&mut self, dst: &mut [u8]);\n}\npub trait BlockRngCore {\n    type Item;\n    type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;\n    fn generate(&mut self, results: &mut Self::Results);\n}\n#[derive(Clone)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct BlockRng64<R: BlockRngCore + ?Sized> {\n    results: R::Results,\n    index: usize,\n    half_used: bool,\n    /// The *core* part of the RNG, implementing the `generate` function.\n    pub core: R,\n}\nimpl<R: BlockRngCore + SeedableRng> SeedableRng for BlockRng64<R> {\n    type Seed = R::Seed;\n    #[inline(always)]\n    fn from_seed(seed: Self::Seed) -> Self {\n        Self::new(R::from_seed(seed))\n    }\n    #[inline(always)]\n    fn seed_from_u64(seed: u64) -> Self {\n        Self::new(R::seed_from_u64(seed))\n    }\n    #[inline(always)]\n    fn from_rng(rng: &mut impl RngCore) -> Self {\n        Self::new(R::from_rng(rng))\n    }\n    #[inline(always)]\n    fn try_from_rng<S: TryRngCore>(rng: &mut S) -> Result<Self, S::Error> {\n        R::try_from_rng(rng).map(Self::new)\n    }\n}\nimpl<R: BlockRngCore> BlockRng64<R> {\n    #[inline]\n    pub fn new(core: R) -> BlockRng64<R> {\n        let results_empty = R::Results::default();\n        BlockRng64 {\n            core,\n            index: results_empty.as_ref().len(),\n            half_used: false,\n            results: results_empty,\n        }\n    }\n    #[inline(always)]\n    pub fn index(&self) -> usize {}\n    #[inline]\n    pub fn reset(&mut self) {}\n    #[inline]\n    pub fn generate_and_set(&mut self, index: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n414 fn from_rng(rng: &mut impl RngCore) -> Self {\n415     Self::new(R::from_rng(rng))\n416 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}