{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/bernoulli.rs\n// crate name is rand\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse core::fmt;\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst ALWAYS_TRUE: u64 = u64::MAX;\nconst SCALE: f64 = 2.0 * (1u64 << 63) as f64;\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Bernoulli {\n    /// Probability of success, relative to the maximal integer.\n    p_int: u64,\n}\nimpl Distribution<bool> for Bernoulli {\n    #[inline]\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> bool {\n        if self.p_int == ALWAYS_TRUE {\n            return true;\n        }\n        let v: u64 = rng.random();\n        v < self.p_int\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n155 fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> bool {\n156     // Make sure to always return true for p = 1.0.\n157     if self.p_int == ALWAYS_TRUE {\n158         return true;\n159     }\n160     let v: u64 = rng.random();\n161     v < self.p_int\n162 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}