{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/other.rs\n// crate name is rand\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::array;\nuse core::char;\nuse core::num::Wrapping;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::SampleString;\nuse crate::distr::{Distribution, StandardUniform, Uniform};\nuse crate::Rng;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::prelude::*;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::{LaneCount, MaskElement, SupportedLaneCount};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\n#[derive(Clone, Copy, Debug, Default)]\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\npub struct StandardUniform;\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\n#[cfg_attr(feature = \"serde\", serde(bound(serialize = \"X::Sampler: Serialize\")))]\n#[cfg_attr(\n    feature = \"serde\",\n    serde(bound(deserialize = \"X::Sampler: Deserialize<'de>\"))\n)]\npub struct Uniform<X: SampleUniform>(X::Sampler);\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<T> Distribution<Wrapping<T>> for StandardUniform\nwhere\n    StandardUniform: Distribution<T>,\n{\n    #[inline]\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Wrapping<T> {\n        Wrapping(rng.random())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n106 fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {\n107     // A valid `char` is either in the interval `[0, 0xD800)` or\n108     // `(0xDFFF, 0x11_0000)`. All `char`s must therefore be in\n109     // `[0, 0x11_0000)` but not in the \"gap\" `[0xD800, 0xDFFF]` which is\n110     // reserved for surrogates. This is the size of that gap.\n111     const GAP_SIZE: u32 = 0xDFFF - 0xD800 + 1;\n112 \n113     // Uniform::new(0, 0x11_0000 - GAP_SIZE) can also be used, but it\n114     // seemed slower.\n115     let range = Uniform::new(GAP_SIZE, 0x11_0000).unwrap();\n116 \n117     let mut n = range.sample(rng);\n118     if n <= 0xDFFF {\n119         n -= GAP_SIZE;\n120     }\n121     unsafe { char::from_u32_unchecked(n) }\n122 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}