{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/weighted_index.rs\n// crate name is rand\nuse super::{Error, Weight};\nuse crate::distr::uniform::{SampleBorrow, SampleUniform, UniformSampler};\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Debug, Clone, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct WeightedIndex<X: SampleUniform + PartialOrd> {\n    cumulative_weights: Vec<X>,\n    total_weight: X,\n    weight_distribution: X::Sampler,\n}\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<X: SampleUniform + PartialOrd> WeightedIndex<X> {\n    pub fn new<I>(weights: I) -> Result<WeightedIndex<X>, Error>\n    where\n        I: IntoIterator,\n        I::Item: SampleBorrow<X>,\n        X: Weight,\n    {}\n    pub fn update_weights(&mut self, new_weights: &[(usize, &X)]) -> Result<(), Error>\n    where\n        X: for<'a> core::ops::AddAssign<&'a X> + for<'a> core::ops::SubAssign<&'a X>\n            + Clone + Default,\n    {\n        if new_weights.is_empty() {\n            return Ok(());\n        }\n        let zero = <X as Default>::default();\n        let mut total_weight = self.total_weight.clone();\n        let mut prev_i = None;\n        for &(i, w) in new_weights {\n            if let Some(old_i) = prev_i {\n                if old_i >= i {\n                    return Err(Error::InvalidInput);\n                }\n            }\n            if !(*w >= zero) {\n                return Err(Error::InvalidWeight);\n            }\n            if i > self.cumulative_weights.len() {\n                return Err(Error::InvalidInput);\n            }\n            let mut old_w = if i < self.cumulative_weights.len() {\n                self.cumulative_weights[i].clone()\n            } else {\n                self.total_weight.clone()\n            };\n            if i > 0 {\n                old_w -= &self.cumulative_weights[i - 1];\n            }\n            total_weight -= &old_w;\n            total_weight += w;\n            prev_i = Some(i);\n        }\n        if total_weight <= zero {\n            return Err(Error::InsufficientNonZero);\n        }\n        let mut iter = new_weights.iter();\n        let mut prev_weight = zero.clone();\n        let mut next_new_weight = iter.next();\n        let &(first_new_index, _) = next_new_weight.unwrap();\n        let mut cumulative_weight = if first_new_index > 0 {\n            self.cumulative_weights[first_new_index - 1].clone()\n        } else {\n            zero.clone()\n        };\n        for i in first_new_index..self.cumulative_weights.len() {\n            match next_new_weight {\n                Some(&(j, w)) if i == j => {\n                    cumulative_weight += w;\n                    next_new_weight = iter.next();\n                }\n                _ => {\n                    let mut tmp = self.cumulative_weights[i].clone();\n                    tmp -= &prev_weight;\n                    cumulative_weight += &tmp;\n                }\n            }\n            prev_weight = cumulative_weight.clone();\n            core::mem::swap(&mut prev_weight, &mut self.cumulative_weights[i]);\n        }\n        self.total_weight = total_weight;\n        self.weight_distribution = X::Sampler::new(zero, self.total_weight.clone())\n            .unwrap();\n        Ok(())\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Update a subset of weights, without changing the number of weights.\n///\n/// `new_weights` must be sorted by the index.\n///\n/// Using this method instead of `new` might be more efficient if only a small number of\n/// weights is modified. No allocations are performed, unless the weight type `X` uses\n/// allocation internally.\n///\n/// In case of error, `self` is not modified. Error cases:\n/// -   [`Error::InvalidInput`] when `new_weights` are not ordered by\n///     index or an index is too large.\n/// -   [`Error::InvalidWeight`] when a weight is not-a-number or negative.\n/// -   [`Error::InsufficientNonZero`] when the sum of all weights is zero.\n///     Note that due to floating-point loss of precision, this case is not\n///     always correctly detected; usage of a fixed-point weight type may be\n///     preferred.\n///\n/// Updates take `O(N)` time. If you need to frequently update weights, consider\n/// [`rand_distr::weighted_tree`](https://docs.rs/rand_distr/*/rand_distr/weighted_tree/index.html)\n/// as an alternative where an update is `O(log N)`.\n159 pub fn update_weights(&mut self, new_weights: &[(usize, &X)]) -> Result<(), Error>\n160 where\n161     X: for<'a> core::ops::AddAssign<&'a X>\n162         + for<'a> core::ops::SubAssign<&'a X>\n163         + Clone\n164         + Default,\n165 {\n166     if new_weights.is_empty() {\n167         return Ok(());\n168     }\n169 \n170     let zero = <X as Default>::default();\n171 \n172     let mut total_weight = self.total_weight.clone();\n173 \n174     // Check for errors first, so we don't modify `self` in case something\n175     // goes wrong.\n176     let mut prev_i = None;\n177     for &(i, w) in new_weights {\n178         if let Some(old_i) = prev_i {\n179             if old_i >= i {\n180                 return Err(Error::InvalidInput);\n181             }\n182         }\n183         if !(*w >= zero) {\n184             return Err(Error::InvalidWeight);\n185         }\n186         if i > self.cumulative_weights.len() {\n187             return Err(Error::InvalidInput);\n188         }\n189 \n190         let mut old_w = if i < self.cumulative_weights.len() {\n191             self.cumulative_weights[i].clone()\n192         } else {\n193             self.total_weight.clone()\n194         };\n195         if i > 0 {\n196             old_w -= &self.cumulative_weights[i - 1];\n197         }\n198 \n199         total_weight -= &old_w;\n200         total_weight += w;\n201         prev_i = Some(i);\n202     }\n203     if total_weight <= zero {\n204         return Err(Error::InsufficientNonZero);\n205     }\n206 \n207     // Update the weights. Because we checked all the preconditions in the\n208     // previous loop, this should never panic.\n209     let mut iter = new_weights.iter();\n210 \n211     let mut prev_weight = zero.clone();\n212     let mut next_new_weight = iter.next();\n213     let &(first_new_index, _) = next_new_weight.unwrap();\n214     let mut cumulative_weight = if first_new_index > 0 {\n215         self.cumulative_weights[first_new_index - 1].clone()\n216     } else {\n217         zero.clone()\n218     };\n219     for i in first_new_index..self.cumulative_weights.len() {\n220         match next_new_weight {\n221             Some(&(j, w)) if i == j => {\n222                 cumulative_weight += w;\n223                 next_new_weight = iter.next();\n224             }\n225             _ => {\n226                 let mut tmp = self.cumulative_weights[i].clone();\n227                 tmp -= &prev_weight; // We know this is positive.\n228                 cumulative_weight += &tmp;\n229             }\n230         }\n231         prev_weight = cumulative_weight.clone();\n232         core::mem::swap(&mut prev_weight, &mut self.cumulative_weights[i]);\n233     }\n234 \n235     self.total_weight = total_weight;\n236     self.weight_distribution = X::Sampler::new(zero, self.total_weight.clone()).unwrap();\n237 \n238     Ok(())\n239 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}