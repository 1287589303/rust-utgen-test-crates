{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/mod.rs\n// crate name is rand\nuse crate::Rng;\n#[cfg(feature = \"alloc\")]\npub use super::index_::*;\npub fn sample_array<R, const N: usize>(rng: &mut R, len: usize) -> Option<[usize; N]>\nwhere\n    R: Rng + ?Sized,\n{\n    if N > len {\n        return None;\n    }\n    let mut indices = [0; N];\n    for (i, j) in (len - N..len).enumerate() {\n        let t = rng.random_range(..j + 1);\n        if let Some(pos) = indices[0..i].iter().position(|&x| x == t) {\n            indices[pos] = j;\n        }\n        indices[i] = t;\n    }\n    Some(indices)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Randomly sample exactly `N` distinct indices from `0..len`, and\n/// return them in random order (fully shuffled).\n///\n/// This is implemented via Floyd's algorithm. Time complexity is `O(N^2)`\n/// and memory complexity is `O(N)`.\n///\n/// Returns `None` if (and only if) `N > len`.\n61 pub fn sample_array<R, const N: usize>(rng: &mut R, len: usize) -> Option<[usize; N]>\n62 where\n63     R: Rng + ?Sized,\n64 {\n65     if N > len {\n66         return None;\n67     }\n68 \n69     // Floyd's algorithm\n70     let mut indices = [0; N];\n71     for (i, j) in (len - N..len).enumerate() {\n72         let t = rng.random_range(..j + 1);\n73         if let Some(pos) = indices[0..i].iter().position(|&x| x == t) {\n74             indices[pos] = j;\n75         }\n76         indices[i] = t;\n77     }\n78     Some(indices)\n79 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}