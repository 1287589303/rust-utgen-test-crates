{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/mod.rs\n// crate name is rand\nuse crate::Rng;\n#[cfg(feature = \"alloc\")]\npub use super::index_::*;\npub fn sample_array<R, const N: usize>(rng: &mut R, len: usize) -> Option<[usize; N]>\nwhere\n    R: Rng + ?Sized,\n{\n    if N > len {\n        return None;\n    }\n    let mut indices = [0; N];\n    for (i, j) in (len - N..len).enumerate() {\n        let t = rng.random_range(..j + 1);\n        if let Some(pos) = indices[0..i].iter().position(|&x| x == t) {\n            indices[pos] = j;\n        }\n        indices[i] = t;\n    }\n    Some(indices)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Randomly sample exactly `N` distinct indices from `0..len`, and\n/// return them in random order (fully shuffled).\n///\n/// This is implemented via Floyd's algorithm. Time complexity is `O(N^2)`\n/// and memory complexity is `O(N)`.\n///\n/// Returns `None` if (and only if) `N > len`.\n61 pub fn sample_array<R, const N: usize>(rng: &mut R, len: usize) -> Option<[usize; N]>\n62 where\n63     R: Rng + ?Sized,\n64 {\n65     if N > len {\n66         return None;\n67     }\n68 \n69     // Floyd's algorithm\n70     let mut indices = [0; N];\n71     for (i, j) in (len - N..len).enumerate() {\n72         let t = rng.random_range(..j + 1);\n73         if let Some(pos) = indices[0..i].iter().position(|&x| x == t) {\n74             indices[pos] = j;\n75         }\n76         indices[i] = t;\n77     }\n78     Some(indices)\n79 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}