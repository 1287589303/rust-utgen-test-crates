{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/distribution.rs\n// crate name is rand\nuse crate::Rng;\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::iter;\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Debug)]\npub struct Iter<D, R, T> {\n    distr: D,\n    rng: R,\n    phantom: core::marker::PhantomData<T>,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create an iterator that generates random values of `T`, using `rng` as\n/// the source of randomness.\n///\n/// Note that this function takes `self` by value. This works since\n/// `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,\n/// however borrowing is not automatic hence `distr.sample_iter(...)` may\n/// need to be replaced with `(&distr).sample_iter(...)` to borrow or\n/// `(&*distr).sample_iter(...)` to reborrow an existing reference.\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::{Distribution, Alphanumeric, Uniform, StandardUniform};\n///\n/// let mut rng = rand::rng();\n///\n/// // Vec of 16 x f32:\n/// let v: Vec<f32> = StandardUniform.sample_iter(&mut rng).take(16).collect();\n///\n/// // String:\n/// let s: String = Alphanumeric\n///     .sample_iter(&mut rng)\n///     .take(7)\n///     .map(char::from)\n///     .collect();\n///\n/// // Dice-rolling:\n/// let die_range = Uniform::new_inclusive(1, 6).unwrap();\n/// let mut roll_die = die_range.sample_iter(&mut rng);\n/// while roll_die.next().unwrap() != 6 {\n///     println!(\"Not a 6; rolling again!\");\n/// }\n/// ```\n72 fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n73 where\n74     R: Rng,\n75     Self: Sized,\n76 {\n77     Iter {\n78         distr: self,\n79         rng,\n80         phantom: core::marker::PhantomData,\n81     }\n82 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}