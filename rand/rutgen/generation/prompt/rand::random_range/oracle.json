{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is rand\npub use rand_core;\npub use rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[cfg(feature = \"thread_rng\")]\npub use crate::rngs::thread::rng;\npub use rng::{Fill, Rng};\n#[cfg(feature = \"thread_rng\")]\nuse crate::distr::{Distribution, StandardUniform};\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[cfg(feature = \"thread_rng\")]\n#[inline]\npub fn random_range<T, R>(range: R) -> T\nwhere\n    T: distr::uniform::SampleUniform,\n    R: distr::uniform::SampleRange<T>,\n{\n    rng().random_range(range)\n}\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Generate a random value in the given range using the thread-local random number generator.\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_range](Rng::random_range)(<var>range</var>)</code>.\n///\n/// # Example\n///\n/// ```\n/// let y: f32 = rand::random_range(0.0..=1e9);\n/// println!(\"{}\", y);\n///\n/// let words: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n/// println!(\"{}\", words[rand::random_range(..words.len())]);\n/// ```\n/// Note that the first example can also be achieved (without `collect`'ing\n/// to a `Vec`) using [`seq::IteratorRandom::choose`].\n216 pub fn random_range<T, R>(range: R) -> T\n217 where\n218     T: distr::uniform::SampleUniform,\n219     R: distr::uniform::SampleRange<T>,\n220 {\n221     rng().random_range(range)\n222 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}