{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is rand\npub use rand_core;\npub use rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[cfg(feature = \"thread_rng\")]\npub use crate::rngs::thread::rng;\npub use rng::{Fill, Rng};\n#[cfg(feature = \"thread_rng\")]\nuse crate::distr::{Distribution, StandardUniform};\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[cfg(feature = \"thread_rng\")]\n#[inline]\npub fn random_range<T, R>(range: R) -> T\nwhere\n    T: distr::uniform::SampleUniform,\n    R: distr::uniform::SampleRange<T>,\n{\n    rng().random_range(range)\n}\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Generate a random value in the given range using the thread-local random number generator.\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_range](Rng::random_range)(<var>range</var>)</code>.\n///\n/// # Example\n///\n/// ```\n/// let y: f32 = rand::random_range(0.0..=1e9);\n/// println!(\"{}\", y);\n///\n/// let words: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n/// println!(\"{}\", words[rand::random_range(..words.len())]);\n/// ```\n/// Note that the first example can also be achieved (without `collect`'ing\n/// to a `Vec`) using [`seq::IteratorRandom::choose`].\n216 pub fn random_range<T, R>(range: R) -> T\n217 where\n218     T: distr::uniform::SampleUniform,\n219     R: distr::uniform::SampleRange<T>,\n220 {\n221     rng().random_range(range)\n222 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}