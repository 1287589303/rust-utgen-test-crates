{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_chacha/src/guts.rs\n// crate name is rand_chacha\nuse ppv_lite86::{dispatch, dispatch_light128};\npub use ppv_lite86::Machine;\nuse ppv_lite86::{\n    vec128_storage, ArithOps, BitOps32, LaneWords4, MultiLane, StoreBytes, Vec4, Vec4Ext,\n    Vector,\n};\npub(crate) const BLOCK: usize = 16;\npub(crate) const BLOCK64: u64 = BLOCK as u64;\nconst LOG2_BUFBLOCKS: u64 = 2;\nconst BUFBLOCKS: u64 = 1 << LOG2_BUFBLOCKS;\npub(crate) const BUFSZ64: u64 = BLOCK64 * BUFBLOCKS;\npub(crate) const BUFSZ: usize = BUFSZ64 as usize;\nconst STREAM_PARAM_NONCE: u32 = 1;\nconst STREAM_PARAM_BLOCK: u32 = 0;\nfn read_u32le(xs: &[u8]) -> u32 {\n    assert_eq!(xs.len(), 4);\n    u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16)\n        | (u32::from(xs[3]) << 24)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n243 fn read_u32le(xs: &[u8]) -> u32 {\n244     assert_eq!(xs.len(), 4);\n245     u32::from(xs[0]) | (u32::from(xs[1]) << 8) | (u32::from(xs[2]) << 16) | (u32::from(xs[3]) << 24)\n246 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}