{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is rand\npub use rand_core;\npub use rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[cfg(feature = \"thread_rng\")]\npub use crate::rngs::thread::rng;\npub use rng::{Fill, Rng};\n#[cfg(feature = \"thread_rng\")]\nuse crate::distr::{Distribution, StandardUniform};\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[derive(Clone, Copy, Debug, Default)]\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\npub struct StandardUniform;\n#[derive(Debug)]\npub struct Iter<D, R, T> {\n    distr: D,\n    rng: R,\n    phantom: core::marker::PhantomData<T>,\n}\n#[cfg(feature = \"thread_rng\")]\n#[inline]\npub fn random_iter<T>() -> distr::Iter<StandardUniform, rngs::ThreadRng, T>\nwhere\n    StandardUniform: Distribution<T>,\n{\n    rng().random_iter()\n}\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return an iterator over [`random()`] variates\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_iter](Rng::random_iter)()</code>.\n///\n/// # Example\n///\n/// ```\n/// let v: Vec<i32> = rand::random_iter().take(5).collect();\n/// println!(\"{v:?}\");\n/// ```\n191 pub fn random_iter<T>() -> distr::Iter<StandardUniform, rngs::ThreadRng, T>\n192 where\n193     StandardUniform: Distribution<T>,\n194 {\n195     rng().random_iter()\n196 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}