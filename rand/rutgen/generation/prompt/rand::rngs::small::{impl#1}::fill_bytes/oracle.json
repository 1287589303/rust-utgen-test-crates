{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/small.rs\n// crate name is rand\n#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"16\"))]\ntype Rng = super::xoshiro128plusplus::Xoshiro128PlusPlus;\n#[cfg(target_pointer_width = \"64\")]\ntype Rng = super::xoshiro256plusplus::Xoshiro256PlusPlus;\nuse rand_core::{RngCore, SeedableRng};\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct SmallRng(Rng);\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Xoshiro256PlusPlus {\n    s: [u64; 4],\n}\nimpl RngCore for SmallRng {\n    #[inline(always)]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline(always)]\n    fn next_u64(&mut self) -> u64 {}\n    #[inline(always)]\n    fn fill_bytes(&mut self, dest: &mut [u8]) {\n        self.0.fill_bytes(dest)\n    }\n}\nimpl RngCore for Xoshiro256PlusPlus {\n    #[inline]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline]\n    fn next_u64(&mut self) -> u64 {}\n    #[inline]\n    fn fill_bytes(&mut self, dst: &mut [u8]) {\n        fill_bytes_via_next(self, dst)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n117 fn fill_bytes(&mut self, dest: &mut [u8]) {\n118     self.0.fill_bytes(dest)\n119 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}