{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/uniform.rs\n// crate name is rand\npub use float::UniformFloat;\npub use int::{UniformInt, UniformUsize};\npub use other::{UniformChar, UniformDuration};\nuse core::fmt;\nuse core::ops::{Range, RangeInclusive, RangeTo, RangeToInclusive};\nuse crate::distr::Distribution;\nuse crate::{Rng, RngCore};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\n#[cfg_attr(feature = \"serde\", serde(bound(serialize = \"X::Sampler: Serialize\")))]\n#[cfg_attr(\n    feature = \"serde\",\n    serde(bound(deserialize = \"X::Sampler: Deserialize<'de>\"))\n)]\npub struct Uniform<X: SampleUniform>(X::Sampler);\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<X: SampleUniform> Uniform<X> {\n    pub fn new<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n    where\n        B1: SampleBorrow<X> + Sized,\n        B2: SampleBorrow<X> + Sized,\n    {}\n    pub fn new_inclusive<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n    where\n        B1: SampleBorrow<X> + Sized,\n        B2: SampleBorrow<X> + Sized,\n    {\n        X::Sampler::new_inclusive(low, high).map(Uniform)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `Uniform` instance, which samples uniformly from the closed\n/// range `[low, high]` (inclusive).\n///\n/// Fails if `low > high`, or if `low`, `high` or the range `high - low` is\n/// non-finite. In release mode, only the range is checked.\n246 pub fn new_inclusive<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n247 where\n248     B1: SampleBorrow<X> + Sized,\n249     B2: SampleBorrow<X> + Sized,\n250 {\n251     X::Sampler::new_inclusive(low, high).map(Uniform)\n252 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}