{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/slice.rs\n// crate name is rand\nuse super::increasing_uniform::IncreasingUniform;\nuse super::index;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::uniform::{SampleBorrow, SampleUniform};\n#[cfg(feature = \"alloc\")]\nuse crate::distr::weighted::{Error as WeightError, Weight};\nuse crate::Rng;\nuse core::ops::{Index, IndexMut};\npub trait IndexedRandom: Index<usize> {\n    fn len(&self) -> usize;\n    #[inline]\n    fn is_empty(&self) -> bool;\n    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() { None } else { Some(&self[rng.random_range(..self.len())]) }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_multiple<R>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n    ) -> SliceChooseIter<Self, Self::Output>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }\n    }\n    fn choose_multiple_array<R, const N: usize>(\n        &self,\n        rng: &mut R,\n    ) -> Option<[Self::Output; N]>\n    where\n        Self::Output: Clone + Sized,\n        R: Rng + ?Sized,\n    {\n        let indices = index::sample_array(rng, self.len())?;\n        Some(indices.map(|index| self[index].clone()))\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted<R, F, B, X>(\n        &self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        Ok(&self[distr.sample(rng)])\n    }\n    #[cfg(feature = \"std\")]\n    fn choose_multiple_weighted<R, F, X>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n        weight: F,\n    ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> X,\n        X: Into<f64>,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        Ok(SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample_weighted(\n                    rng,\n                    self.len(),\n                    |idx| weight(&self[idx]).into(),\n                    amount,\n                )?\n                .into_iter(),\n        })\n    }\n}\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Biased sampling of `amount` distinct elements\n///\n/// Similar to [`choose_multiple`], but where the likelihood of each element's\n/// inclusion in the output may be specified. The elements are returned in an\n/// arbitrary, unspecified order.\n///\n/// The specified function `weight` maps each item `x` to a relative\n/// likelihood `weight(x)`. The probability of each item being selected is\n/// therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.\n///\n/// If all of the weights are equal, even if they are all zero, each element has\n/// an equal likelihood of being selected.\n///\n/// This implementation uses `O(length + amount)` space and `O(length)` time\n/// if the \"nightly\" feature is enabled, or `O(length)` space and\n/// `O(length + amount * log length)` time otherwise.\n///\n/// # Known issues\n///\n/// The algorithm currently used to implement this method loses accuracy\n/// when small values are used for weights.\n/// See [#1476](https://github.com/rust-random/rand/issues/1476).\n///\n/// # Example\n///\n/// ```\n/// use rand::prelude::*;\n///\n/// let choices = [('a', 2), ('b', 1), ('c', 1)];\n/// let mut rng = rand::rng();\n/// // First Draw * Second Draw = total odds\n/// // -----------------------\n/// // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.\n/// // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.\n/// // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.\n/// println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());\n/// ```\n/// [`choose_multiple`]: IndexedRandom::choose_multiple\n215 fn choose_multiple_weighted<R, F, X>(\n216     &self,\n217     rng: &mut R,\n218     amount: usize,\n219     weight: F,\n220 ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n221 where\n222     Self::Output: Sized,\n223     R: Rng + ?Sized,\n224     F: Fn(&Self::Output) -> X,\n225     X: Into<f64>,\n226 {\n227     let amount = core::cmp::min(amount, self.len());\n228     Ok(SliceChooseIter {\n229         slice: self,\n230         _phantom: Default::default(),\n231         indices: index::sample_weighted(\n232             rng,\n233             self.len(),\n234             |idx| weight(&self[idx]).into(),\n235             amount,\n236         )?\n237         .into_iter(),\n238     })\n239 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}