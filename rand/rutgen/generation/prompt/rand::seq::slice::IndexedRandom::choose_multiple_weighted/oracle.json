{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/slice.rs\n// crate name is rand\nuse super::increasing_uniform::IncreasingUniform;\nuse super::index;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::uniform::{SampleBorrow, SampleUniform};\n#[cfg(feature = \"alloc\")]\nuse crate::distr::weighted::{Error as WeightError, Weight};\nuse crate::Rng;\nuse core::ops::{Index, IndexMut};\npub trait IndexedRandom: Index<usize> {\n    fn len(&self) -> usize;\n    #[inline]\n    fn is_empty(&self) -> bool;\n    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() { None } else { Some(&self[rng.random_range(..self.len())]) }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_multiple<R>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n    ) -> SliceChooseIter<Self, Self::Output>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }\n    }\n    fn choose_multiple_array<R, const N: usize>(\n        &self,\n        rng: &mut R,\n    ) -> Option<[Self::Output; N]>\n    where\n        Self::Output: Clone + Sized,\n        R: Rng + ?Sized,\n    {\n        let indices = index::sample_array(rng, self.len())?;\n        Some(indices.map(|index| self[index].clone()))\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted<R, F, B, X>(\n        &self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        Ok(&self[distr.sample(rng)])\n    }\n    #[cfg(feature = \"std\")]\n    fn choose_multiple_weighted<R, F, X>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n        weight: F,\n    ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> X,\n        X: Into<f64>,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        Ok(SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample_weighted(\n                    rng,\n                    self.len(),\n                    |idx| weight(&self[idx]).into(),\n                    amount,\n                )?\n                .into_iter(),\n        })\n    }\n}\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Biased sampling of `amount` distinct elements\n///\n/// Similar to [`choose_multiple`], but where the likelihood of each element's\n/// inclusion in the output may be specified. The elements are returned in an\n/// arbitrary, unspecified order.\n///\n/// The specified function `weight` maps each item `x` to a relative\n/// likelihood `weight(x)`. The probability of each item being selected is\n/// therefore `weight(x) / s`, where `s` is the sum of all `weight(x)`.\n///\n/// If all of the weights are equal, even if they are all zero, each element has\n/// an equal likelihood of being selected.\n///\n/// This implementation uses `O(length + amount)` space and `O(length)` time\n/// if the \"nightly\" feature is enabled, or `O(length)` space and\n/// `O(length + amount * log length)` time otherwise.\n///\n/// # Known issues\n///\n/// The algorithm currently used to implement this method loses accuracy\n/// when small values are used for weights.\n/// See [#1476](https://github.com/rust-random/rand/issues/1476).\n///\n/// # Example\n///\n/// ```\n/// use rand::prelude::*;\n///\n/// let choices = [('a', 2), ('b', 1), ('c', 1)];\n/// let mut rng = rand::rng();\n/// // First Draw * Second Draw = total odds\n/// // -----------------------\n/// // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'b']` in some order.\n/// // (50% * 50%) + (25% * 67%) = 41.7% chance that the output is `['a', 'c']` in some order.\n/// // (25% * 33%) + (25% * 33%) = 16.6% chance that the output is `['b', 'c']` in some order.\n/// println!(\"{:?}\", choices.choose_multiple_weighted(&mut rng, 2, |item| item.1).unwrap().collect::<Vec<_>>());\n/// ```\n/// [`choose_multiple`]: IndexedRandom::choose_multiple\n215 fn choose_multiple_weighted<R, F, X>(\n216     &self,\n217     rng: &mut R,\n218     amount: usize,\n219     weight: F,\n220 ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n221 where\n222     Self::Output: Sized,\n223     R: Rng + ?Sized,\n224     F: Fn(&Self::Output) -> X,\n225     X: Into<f64>,\n226 {\n227     let amount = core::cmp::min(amount, self.len());\n228     Ok(SliceChooseIter {\n229         slice: self,\n230         _phantom: Default::default(),\n231         indices: index::sample_weighted(\n232             rng,\n233             self.len(),\n234             |idx| weight(&self[idx]).into(),\n235             amount,\n236         )?\n237         .into_iter(),\n238     })\n239 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}