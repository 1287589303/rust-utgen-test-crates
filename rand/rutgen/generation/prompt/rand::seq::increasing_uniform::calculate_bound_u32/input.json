{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/increasing_uniform.rs\n// crate name is rand\nuse crate::{Rng, RngCore};\n#[inline]\nfn calculate_bound_u32(m: u32) -> (u32, u8) {\n    debug_assert!(m > 0);\n    #[inline]\n    const fn inner(m: u32) -> (u32, u8) {\n        let mut product = m;\n        let mut current = m + 1;\n        loop {\n            if let Some(p) = u32::checked_mul(product, current) {\n                product = p;\n                current += 1;\n            } else {\n                let count = (current - m) as u8;\n                return (product, count);\n            }\n        }\n    }\n    const RESULT2: (u32, u8) = inner(2);\n    if m == 2 {\n        return RESULT2;\n    }\n    inner(m)\n}\n#[inline]\nconst fn inner(m: u32) -> (u32, u8) {\n    let mut product = m;\n    let mut current = m + 1;\n    loop {\n        if let Some(p) = u32::checked_mul(product, current) {\n            product = p;\n            current += 1;\n        } else {\n            let count = (current - m) as u8;\n            return (product, count);\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Calculates `bound`, `count` such that bound (m)*(m+1)*..*(m + remaining - 1)\n 81 fn calculate_bound_u32(m: u32) -> (u32, u8) {\n 82     debug_assert!(m > 0);\n 83     #[inline]\n 84     const fn inner(m: u32) -> (u32, u8) {\n 85         let mut product = m;\n 86         let mut current = m + 1;\n 87 \n 88         loop {\n 89             if let Some(p) = u32::checked_mul(product, current) {\n 90                 product = p;\n 91                 current += 1;\n 92             } else {\n 93                 // Count has a maximum value of 13 for when min is 1 or 2\n 94                 let count = (current - m) as u8;\n 95                 return (product, count);\n 96             }\n 97         }\n 98     }\n 99 \n100     const RESULT2: (u32, u8) = inner(2);\n101     if m == 2 {\n102         // Making this value a constant instead of recalculating it\n103         // gives a significant (~50%) performance boost for small shuffles\n104         return RESULT2;\n105     }\n106 \n107     inner(m)\n108 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}