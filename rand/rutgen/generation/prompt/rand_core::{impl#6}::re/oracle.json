{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/lib.rs\n// crate name is rand_core\nuse core::{fmt, ops::DerefMut};\n#[cfg(feature = \"os_rng\")]\npub use os::{OsError, OsRng};\npub trait RngCore {\n    fn next_u32(&mut self) -> u32;\n    fn next_u64(&mut self) -> u64;\n    fn fill_bytes(&mut self, dst: &mut [u8]);\n}\npub trait TryRngCore {\n    type Error: fmt::Debug + fmt::Display;\n    fn try_next_u32(&mut self) -> Result<u32, Self::Error>;\n    fn try_next_u64(&mut self) -> Result<u64, Self::Error>;\n    fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error>;\n    fn unwrap_err(self) -> UnwrapErr<Self>\n    where\n        Self: Sized,\n    {\n        UnwrapErr(self)\n    }\n    fn unwrap_mut(&mut self) -> UnwrapMut<'_, Self> {\n        UnwrapMut(self)\n    }\n    #[cfg(feature = \"std\")]\n    fn read_adapter(&mut self) -> RngReadAdapter<'_, Self>\n    where\n        Self: Sized,\n    {\n        RngReadAdapter { inner: self }\n    }\n}\n#[derive(Debug, Eq, PartialEq, Hash)]\npub struct UnwrapMut<'r, R: TryRngCore + ?Sized>(pub &'r mut R);\nimpl<'r, R: TryRngCore + ?Sized> UnwrapMut<'r, R> {\n    #[inline(always)]\n    pub fn re<'b>(&'b mut self) -> UnwrapMut<'b, R>\n    where\n        'r: 'b,\n    {\n        UnwrapMut(self.0)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reborrow with a new lifetime\n///\n/// Rust allows references like `&T` or `&mut T` to be \"reborrowed\" through\n/// coercion: essentially, the pointer is copied under a new, shorter, lifetime.\n/// Until rfcs#1403 lands, reborrows on user types require a method call.\n331 pub fn re<'b>(&'b mut self) -> UnwrapMut<'b, R>\n332 where\n333     'r: 'b,\n334 {\n335     UnwrapMut(self.0)\n336 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}