{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/uniform.rs\n// crate name is rand\npub use float::UniformFloat;\npub use int::{UniformInt, UniformUsize};\npub use other::{UniformChar, UniformDuration};\nuse core::fmt;\nuse core::ops::{Range, RangeInclusive, RangeTo, RangeToInclusive};\nuse crate::distr::Distribution;\nuse crate::{Rng, RngCore};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait UniformSampler: Sized {\n    type X;\n    fn new<B1, B2>(low: B1, high: B2) -> Result<Self, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized;\n    fn new_inclusive<B1, B2>(low: B1, high: B2) -> Result<Self, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized;\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X;\n    fn sample_single<R: Rng + ?Sized, B1, B2>(\n        low: B1,\n        high: B2,\n        rng: &mut R,\n    ) -> Result<Self::X, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized,\n    {\n        let uniform: Self = UniformSampler::new(low, high)?;\n        Ok(uniform.sample(rng))\n    }\n    fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(\n        low: B1,\n        high: B2,\n        rng: &mut R,\n    ) -> Result<Self::X, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized,\n    {\n        let uniform: Self = UniformSampler::new_inclusive(low, high)?;\n        Ok(uniform.sample(rng))\n    }\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sample a single value uniformly from a range with inclusive lower bound\n/// and exclusive upper bound `[low, high)`.\n///\n/// For discrete types (e.g. integers), samples will always be strictly less\n/// than `high`. For (approximations of) continuous types (e.g. `f32`, `f64`),\n/// samples may equal `high` due to loss of precision but may not be\n/// greater than `high`.\n///\n/// By default this is implemented using\n/// `UniformSampler::new(low, high).sample(rng)`. However, for some types\n/// more optimal implementations for single usage may be provided via this\n/// method (which is the case for integers and floats).\n/// Results may not be identical.\n///\n/// Note that to use this method in a generic context, the type needs to be\n/// retrieved via `SampleUniform::Sampler` as follows:\n/// ```\n/// use rand::distr::uniform::{SampleUniform, UniformSampler};\n/// # #[allow(unused)]\n/// fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {\n///     let mut rng = rand::rng();\n///     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng).unwrap()\n/// }\n/// ```\n337 fn sample_single<R: Rng + ?Sized, B1, B2>(\n338     low: B1,\n339     high: B2,\n340     rng: &mut R,\n341 ) -> Result<Self::X, Error>\n342 where\n343     B1: SampleBorrow<Self::X> + Sized,\n344     B2: SampleBorrow<Self::X> + Sized,\n345 {\n346     let uniform: Self = UniformSampler::new(low, high)?;\n347     Ok(uniform.sample(rng))\n348 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}