{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/uniform.rs\n// crate name is rand\npub use float::UniformFloat;\npub use int::{UniformInt, UniformUsize};\npub use other::{UniformChar, UniformDuration};\nuse core::fmt;\nuse core::ops::{Range, RangeInclusive, RangeTo, RangeToInclusive};\nuse crate::distr::Distribution;\nuse crate::{Rng, RngCore};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait UniformSampler: Sized {\n    type X;\n    fn new<B1, B2>(low: B1, high: B2) -> Result<Self, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized;\n    fn new_inclusive<B1, B2>(low: B1, high: B2) -> Result<Self, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized;\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X;\n    fn sample_single<R: Rng + ?Sized, B1, B2>(\n        low: B1,\n        high: B2,\n        rng: &mut R,\n    ) -> Result<Self::X, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized,\n    {\n        let uniform: Self = UniformSampler::new(low, high)?;\n        Ok(uniform.sample(rng))\n    }\n    fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(\n        low: B1,\n        high: B2,\n        rng: &mut R,\n    ) -> Result<Self::X, Error>\n    where\n        B1: SampleBorrow<Self::X> + Sized,\n        B2: SampleBorrow<Self::X> + Sized,\n    {\n        let uniform: Self = UniformSampler::new_inclusive(low, high)?;\n        Ok(uniform.sample(rng))\n    }\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sample a single value uniformly from a range with inclusive lower bound\n/// and inclusive upper bound `[low, high]`.\n///\n/// By default this is implemented using\n/// `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for\n/// some types more optimal implementations for single usage may be provided\n/// via this method.\n/// Results may not be identical.\n358 fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(\n359     low: B1,\n360     high: B2,\n361     rng: &mut R,\n362 ) -> Result<Self::X, Error>\n363 where\n364     B1: SampleBorrow<Self::X> + Sized,\n365     B2: SampleBorrow<Self::X> + Sized,\n366 {\n367     let uniform: Self = UniformSampler::new_inclusive(low, high)?;\n368     Ok(uniform.sample(rng))\n369 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}