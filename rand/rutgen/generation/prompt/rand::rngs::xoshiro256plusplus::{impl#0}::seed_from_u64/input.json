{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/xoshiro256plusplus.rs\n// crate name is rand\nuse rand_core::impls::fill_bytes_via_next;\nuse rand_core::le::read_u64_into;\nuse rand_core::{RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Xoshiro256PlusPlus {\n    s: [u64; 4],\n}\nimpl SeedableRng for Xoshiro256PlusPlus {\n    type Seed = [u8; 32];\n    #[inline]\n    fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {}\n    #[inline]\n    fn seed_from_u64(mut state: u64) -> Self {\n        const PHI: u64 = 0x9e3779b97f4a7c15;\n        let mut s = [0; 4];\n        for i in s.iter_mut() {\n            state = state.wrapping_add(PHI);\n            let mut z = state;\n            z = (z ^ (z >> 30)).wrapping_mul(0xbf58476d1ce4e5b9);\n            z = (z ^ (z >> 27)).wrapping_mul(0x94d049bb133111eb);\n            z = z ^ (z >> 31);\n            *i = z;\n        }\n        debug_assert_ne!(s, [0; 4]);\n        Xoshiro256PlusPlus { s }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `Xoshiro256PlusPlus` from a `u64` seed.\n///\n/// This uses the SplitMix64 generator internally.\n50 fn seed_from_u64(mut state: u64) -> Self {\n51     const PHI: u64 = 0x9e3779b97f4a7c15;\n52     let mut s = [0; 4];\n53     for i in s.iter_mut() {\n54         state = state.wrapping_add(PHI);\n55         let mut z = state;\n56         z = (z ^ (z >> 30)).wrapping_mul(0xbf58476d1ce4e5b9);\n57         z = (z ^ (z >> 27)).wrapping_mul(0x94d049bb133111eb);\n58         z = z ^ (z >> 31);\n59         *i = z;\n60     }\n61     // By using a non-zero PHI we are guaranteed to generate a non-zero state\n62     // Thus preventing a recursion between from_seed and seed_from_u64.\n63     debug_assert_ne!(s, [0; 4]);\n64     Xoshiro256PlusPlus { s }\n65 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}