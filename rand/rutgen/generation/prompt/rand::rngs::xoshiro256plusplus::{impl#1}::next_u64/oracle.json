{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/xoshiro256plusplus.rs\n// crate name is rand\nuse rand_core::impls::fill_bytes_via_next;\nuse rand_core::le::read_u64_into;\nuse rand_core::{RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Xoshiro256PlusPlus {\n    s: [u64; 4],\n}\nimpl RngCore for Xoshiro256PlusPlus {\n    #[inline]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline]\n    fn next_u64(&mut self) -> u64 {\n        let res = self\n            .s[0]\n            .wrapping_add(self.s[3])\n            .rotate_left(23)\n            .wrapping_add(self.s[0]);\n        let t = self.s[1] << 17;\n        self.s[2] ^= self.s[0];\n        self.s[3] ^= self.s[1];\n        self.s[1] ^= self.s[2];\n        self.s[0] ^= self.s[3];\n        self.s[2] ^= t;\n        self.s[3] = self.s[3].rotate_left(45);\n        res\n    }\n    #[inline]\n    fn fill_bytes(&mut self, dst: &mut [u8]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n78 fn next_u64(&mut self) -> u64 {\n79     let res = self.s[0]\n80         .wrapping_add(self.s[3])\n81         .rotate_left(23)\n82         .wrapping_add(self.s[0]);\n83 \n84     let t = self.s[1] << 17;\n85 \n86     self.s[2] ^= self.s[0];\n87     self.s[3] ^= self.s[1];\n88     self.s[1] ^= self.s[2];\n89     self.s[0] ^= self.s[3];\n90 \n91     self.s[2] ^= t;\n92 \n93     self.s[3] = self.s[3].rotate_left(45);\n94 \n95     res\n96 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}