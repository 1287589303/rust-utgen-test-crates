{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/bernoulli.rs\n// crate name is rand\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse core::fmt;\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst ALWAYS_TRUE: u64 = u64::MAX;\nconst SCALE: f64 = 2.0 * (1u64 << 63) as f64;\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Bernoulli {\n    /// Probability of success, relative to the maximal integer.\n    p_int: u64,\n}\nimpl Bernoulli {\n    #[inline]\n    pub fn new(p: f64) -> Result<Bernoulli, BernoulliError> {}\n    #[inline]\n    pub fn from_ratio(\n        numerator: u32,\n        denominator: u32,\n    ) -> Result<Bernoulli, BernoulliError> {}\n    #[inline]\n    pub fn p(&self) -> f64 {\n        if self.p_int == ALWAYS_TRUE { 1.0 } else { (self.p_int as f64) / SCALE }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the probability (`p`) of the distribution.\n///\n/// This value may differ slightly from the input due to loss of precision.\n144 pub fn p(&self) -> f64 {\n145     if self.p_int == ALWAYS_TRUE {\n146         1.0\n147     } else {\n148         (self.p_int as f64) / SCALE\n149     }\n150 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}