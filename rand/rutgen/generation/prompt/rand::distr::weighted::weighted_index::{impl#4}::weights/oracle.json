{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/weighted_index.rs\n// crate name is rand\nuse super::{Error, Weight};\nuse crate::distr::uniform::{SampleBorrow, SampleUniform, UniformSampler};\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Debug, Clone, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct WeightedIndex<X: SampleUniform + PartialOrd> {\n    cumulative_weights: Vec<X>,\n    total_weight: X,\n    weight_distribution: X::Sampler,\n}\npub struct WeightedIndexIter<'a, X: SampleUniform + PartialOrd> {\n    weighted_index: &'a WeightedIndex<X>,\n    index: usize,\n}\nimpl<X: SampleUniform + PartialOrd + Clone> WeightedIndex<X> {\n    pub fn weight(&self, index: usize) -> Option<X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {}\n    pub fn weights(&self) -> WeightedIndexIter<'_, X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {\n        WeightedIndexIter {\n            weighted_index: self,\n            index: 0,\n        }\n    }\n    pub fn total_weight(&self) -> X {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a lazy-loading iterator containing the current weights of this distribution.\n///\n/// If this distribution has not been updated since its creation, this will return the\n/// same weights as were passed to `new`.\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::weighted::WeightedIndex;\n///\n/// let weights = [1, 2, 3];\n/// let mut dist = WeightedIndex::new(&weights).unwrap();\n/// assert_eq!(dist.weights().collect::<Vec<_>>(), vec![1, 2, 3]);\n/// dist.update_weights(&[(0, &2)]).unwrap();\n/// assert_eq!(dist.weights().collect::<Vec<_>>(), vec![2, 2, 3]);\n/// ```\n342 pub fn weights(&self) -> WeightedIndexIter<'_, X>\n343 where\n344     X: for<'a> core::ops::SubAssign<&'a X>,\n345 {\n346     WeightedIndexIter {\n347         weighted_index: self,\n348         index: 0,\n349     }\n350 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}