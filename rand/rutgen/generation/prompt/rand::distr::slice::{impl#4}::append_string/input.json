{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/slice.rs\n// crate name is rand\nuse core::num::NonZeroUsize;\nuse crate::distr::uniform::{UniformSampler, UniformUsize};\nuse crate::distr::Distribution;\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String {\n        let mut s = String::new();\n        self.append_string(rng, &mut s, len);\n        s\n    }\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Debug, Clone, Copy)]\npub struct Choose<'a, T> {\n    slice: &'a [T],\n    range: UniformUsize,\n    num_choices: NonZeroUsize,\n}\n#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub struct UniformUsize {\n    low: usize,\n    range: usize,\n    thresh: usize,\n    #[cfg(target_pointer_width = \"64\")]\n    mode64: bool,\n}\n#[cfg(feature = \"alloc\")]\nimpl super::SampleString for Choose<'_, char> {\n    fn append_string<R: crate::Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    ) {\n        let max_char_len = if self.slice.len() < 200 {\n            self.slice\n                .iter()\n                .try_fold(\n                    1,\n                    |max_len, char| {\n                        Some(max_len.max(char.len_utf8())).filter(|len| *len < 4)\n                    },\n                )\n                .unwrap_or(4)\n        } else {\n            4\n        };\n        let mut extend_len = if max_char_len == 1 || len < 100 { len } else { len / 4 };\n        let mut remain_len = len;\n        while extend_len > 0 {\n            string.reserve(max_char_len * extend_len);\n            string.extend(self.sample_iter(&mut *rng).take(extend_len));\n            remain_len -= extend_len;\n            extend_len = extend_len.min(remain_len);\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n123 fn append_string<R: crate::Rng + ?Sized>(&self, rng: &mut R, string: &mut String, len: usize) {\n124     // Get the max char length to minimize extra space.\n125     // Limit this check to avoid searching for long slice.\n126     let max_char_len = if self.slice.len() < 200 {\n127         self.slice\n128             .iter()\n129             .try_fold(1, |max_len, char| {\n130                 // When the current max_len is 4, the result max_char_len will be 4.\n131                 Some(max_len.max(char.len_utf8())).filter(|len| *len < 4)\n132             })\n133             .unwrap_or(4)\n134     } else {\n135         4\n136     };\n137 \n138     // Split the extension of string to reuse the unused capacities.\n139     // Skip the split for small length or only ascii slice.\n140     let mut extend_len = if max_char_len == 1 || len < 100 {\n141         len\n142     } else {\n143         len / 4\n144     };\n145     let mut remain_len = len;\n146     while extend_len > 0 {\n147         string.reserve(max_char_len * extend_len);\n148         string.extend(self.sample_iter(&mut *rng).take(extend_len));\n149         remain_len -= extend_len;\n150         extend_len = extend_len.min(remain_len);\n151     }\n152 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}