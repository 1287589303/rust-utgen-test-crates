{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/std.rs\n// crate name is rand\nuse rand_core::{CryptoRng, RngCore, SeedableRng};\n#[cfg(any(test, feature = \"os_rng\"))]\npub(crate) use rand_chacha::ChaCha12Core as Core;\nuse rand_chacha::ChaCha12Rng as Rng;\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct StdRng(Rng);\nimpl RngCore for StdRng {\n    #[inline(always)]\n    fn next_u32(&mut self) -> u32 {}\n    #[inline(always)]\n    fn next_u64(&mut self) -> u64 {}\n    #[inline(always)]\n    fn fill_bytes(&mut self, dst: &mut [u8]) {\n        self.0.fill_bytes(dst)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n84 fn fill_bytes(&mut self, dst: &mut [u8]) {\n85     self.0.fill_bytes(dst)\n86 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}