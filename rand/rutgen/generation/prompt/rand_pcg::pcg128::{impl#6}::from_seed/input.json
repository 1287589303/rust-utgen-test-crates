{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Mcg128Xsl64 {\n    state: u128,\n}\nimpl SeedableRng for Mcg128Xsl64 {\n    type Seed = [u8; 16];\n    fn from_seed(seed: Self::Seed) -> Self {\n        let mut seed_u64 = [0u64; 2];\n        le::read_u64_into(&seed, &mut seed_u64);\n        let state = u128::from(seed_u64[0]) | (u128::from(seed_u64[1]) << 64);\n        Mcg128Xsl64::new(state)\n    }\n}\nimpl Mcg128Xsl64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {}\n    pub fn new(state: u128) -> Self {\n        Mcg128Xsl64 { state: state | 1 }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n233 fn from_seed(seed: Self::Seed) -> Self {\n234     // Read as if a little-endian u128 value:\n235     let mut seed_u64 = [0u64; 2];\n236     le::read_u64_into(&seed, &mut seed_u64);\n237     let state = u128::from(seed_u64[0]) | (u128::from(seed_u64[1]) << 64);\n238     Mcg128Xsl64::new(state)\n239 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}