{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/weighted_index.rs\n// crate name is rand\nuse super::{Error, Weight};\nuse crate::distr::uniform::{SampleBorrow, SampleUniform, UniformSampler};\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Weight: Clone {\n    const ZERO: Self;\n    #[allow(clippy::result_unit_err)]\n    fn checked_add_assign(&mut self, v: &Self) -> Result<(), ()>;\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Debug, Clone, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct WeightedIndex<X: SampleUniform + PartialOrd> {\n    cumulative_weights: Vec<X>,\n    total_weight: X,\n    weight_distribution: X::Sampler,\n}\n#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n#[non_exhaustive]\npub enum Error {\n    /// The input weight sequence is empty, too long, or wrongly ordered\n    InvalidInput,\n    /// A weight is negative, too large for the distribution, or not a valid number\n    InvalidWeight,\n    /// Not enough non-zero weights are available to sample values\n    ///\n    /// When attempting to sample a single value this implies that all weights\n    /// are zero. When attempting to sample `amount` values this implies that\n    /// less than `amount` weights are greater than zero.\n    InsufficientNonZero,\n    /// Overflow when calculating the sum of weights\n    Overflow,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<X: SampleUniform + PartialOrd> WeightedIndex<X> {\n    pub fn new<I>(weights: I) -> Result<WeightedIndex<X>, Error>\n    where\n        I: IntoIterator,\n        I::Item: SampleBorrow<X>,\n        X: Weight,\n    {\n        let mut iter = weights.into_iter();\n        let mut total_weight: X = iter\n            .next()\n            .ok_or(Error::InvalidInput)?\n            .borrow()\n            .clone();\n        let zero = X::ZERO;\n        if !(total_weight >= zero) {\n            return Err(Error::InvalidWeight);\n        }\n        let mut weights = Vec::<X>::with_capacity(iter.size_hint().0);\n        for w in iter {\n            if !(w.borrow() >= &zero) {\n                return Err(Error::InvalidWeight);\n            }\n            weights.push(total_weight.clone());\n            if let Err(()) = total_weight.checked_add_assign(w.borrow()) {\n                return Err(Error::Overflow);\n            }\n        }\n        if total_weight == zero {\n            return Err(Error::InsufficientNonZero);\n        }\n        let distr = X::Sampler::new(zero, total_weight.clone()).unwrap();\n        Ok(WeightedIndex {\n            cumulative_weights: weights,\n            total_weight,\n            weight_distribution: distr,\n        })\n    }\n    pub fn update_weights(&mut self, new_weights: &[(usize, &X)]) -> Result<(), Error>\n    where\n        X: for<'a> core::ops::AddAssign<&'a X> + for<'a> core::ops::SubAssign<&'a X>\n            + Clone + Default,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a new a `WeightedIndex` [`Distribution`] using the values\n/// in `weights`. The weights can use any type `X` for which an\n/// implementation of [`Uniform<X>`] exists.\n///\n/// Error cases:\n/// -   [`Error::InvalidInput`] when the iterator `weights` is empty.\n/// -   [`Error::InvalidWeight`] when a weight is not-a-number or negative.\n/// -   [`Error::InsufficientNonZero`] when the sum of all weights is zero.\n/// -   [`Error::Overflow`] when the sum of all weights overflows.\n///\n/// [`Uniform<X>`]: crate::distr::uniform::Uniform\n 99 pub fn new<I>(weights: I) -> Result<WeightedIndex<X>, Error>\n100 where\n101     I: IntoIterator,\n102     I::Item: SampleBorrow<X>,\n103     X: Weight,\n104 {\n105     let mut iter = weights.into_iter();\n106     let mut total_weight: X = iter.next().ok_or(Error::InvalidInput)?.borrow().clone();\n107 \n108     let zero = X::ZERO;\n109     if !(total_weight >= zero) {\n110         return Err(Error::InvalidWeight);\n111     }\n112 \n113     let mut weights = Vec::<X>::with_capacity(iter.size_hint().0);\n114     for w in iter {\n115         // Note that `!(w >= x)` is not equivalent to `w < x` for partially\n116         // ordered types due to NaNs which are equal to nothing.\n117         if !(w.borrow() >= &zero) {\n118             return Err(Error::InvalidWeight);\n119         }\n120         weights.push(total_weight.clone());\n121 \n122         if let Err(()) = total_weight.checked_add_assign(w.borrow()) {\n123             return Err(Error::Overflow);\n124         }\n125     }\n126 \n127     if total_weight == zero {\n128         return Err(Error::InsufficientNonZero);\n129     }\n130     let distr = X::Sampler::new(zero, total_weight.clone()).unwrap();\n131 \n132     Ok(WeightedIndex {\n133         cumulative_weights: weights,\n134         total_weight,\n135         weight_distribution: distr,\n136     })\n137 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}