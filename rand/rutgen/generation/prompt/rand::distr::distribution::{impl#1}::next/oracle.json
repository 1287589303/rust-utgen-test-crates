{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/distribution.rs\n// crate name is rand\nuse crate::Rng;\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::iter;\n#[derive(Debug)]\npub struct Iter<D, R, T> {\n    distr: D,\n    rng: R,\n    phantom: core::marker::PhantomData<T>,\n}\nimpl<D, R, T> Iterator for Iter<D, R, T>\nwhere\n    D: Distribution<T>,\n    R: Rng,\n{\n    type Item = T;\n    #[inline(always)]\n    fn next(&mut self) -> Option<T> {\n        Some(self.distr.sample(&mut self.rng))\n    }\n    fn size_hint(&self) -> (usize, Option<usize>) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n139 fn next(&mut self) -> Option<T> {\n140     // Here, self.rng may be a reference, but we must take &mut anyway.\n141     // Even if sample could take an R: Rng by value, we would need to do this\n142     // since Rng is not copyable and we cannot enforce that this is \"reborrowable\".\n143     Some(self.distr.sample(&mut self.rng))\n144 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}