{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/thread.rs\n// crate name is rand\nuse core::cell::UnsafeCell;\nuse std::fmt;\nuse std::rc::Rc;\nuse std::thread_local;\nuse rand_core::{CryptoRng, RngCore};\nuse super::std::Core;\nuse crate::rngs::OsRng;\nuse crate::rngs::ReseedingRng;\nconst THREAD_RNG_RESEED_THRESHOLD: u64 = 1024 * 64;\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[derive(Debug)]\npub struct ReseedingRng<R, Rsdr>(\n    BlockRng<ReseedingCore<R, Rsdr>>,\n)\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore;\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Access a fast, pre-initialized generator\n///\n/// This is a handle to the local [`ThreadRng`].\n///\n/// See also [`crate::rngs`] for alternatives.\n///\n/// # Example\n///\n/// ```\n/// use rand::prelude::*;\n///\n/// # fn main() {\n///\n/// let mut numbers = [1, 2, 3, 4, 5];\n/// numbers.shuffle(&mut rand::rng());\n/// println!(\"Numbers: {numbers:?}\");\n///\n/// // Using a local binding avoids an initialization-check on each usage:\n/// let mut rng = rand::rng();\n///\n/// println!(\"True or false: {}\", rng.random::<bool>());\n/// println!(\"A simulated die roll: {}\", rng.random_range(1..=6));\n/// # }\n/// ```\n///\n/// # Security\n///\n/// Refer to [`ThreadRng#Security`].\n157 pub fn rng() -> ThreadRng {\n158     let rng = THREAD_RNG_KEY.with(|t| t.clone());\n159     ThreadRng { rng }\n160 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}