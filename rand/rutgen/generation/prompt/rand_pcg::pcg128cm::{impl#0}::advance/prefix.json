{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128cm.rs\n// crate name is rand_pcg\npub type Pcg64Dxsm = Lcg128CmDxsm64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 15750249268501108917;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg128CmDxsm64 {\n    state: u128,\n    increment: u128,\n}\nimpl Lcg128CmDxsm64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {\n        let mut acc_mult: u128 = 1;\n        let mut acc_plus: u128 = 0;\n        let mut cur_mult = MULTIPLIER as u128;\n        let mut cur_plus = self.increment;\n        let mut mdelta = delta;\n        while mdelta > 0 {\n            if (mdelta & 1) != 0 {\n                acc_mult = acc_mult.wrapping_mul(cur_mult);\n                acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n            }\n            cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n            cur_mult = cur_mult.wrapping_mul(cur_mult);\n            mdelta /= 2;\n        }\n        self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n    }\n    pub fn new(state: u128, stream: u128) -> Self {\n        let increment = (stream << 1) | 1;\n        Self::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u128, increment: u128) -> Self {\n        let mut pcg = Self { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline(always)]\n    fn step(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Multi-step advance functions (jump-ahead, jump-back)\n///\n/// The method used here is based on Brown, \"Random Number Generation\n/// with Arbitrary Stride,\", Transactions of the American Nuclear\n/// Society (Nov. 1994).  The algorithm is very similar to fast\n/// exponentiation.\n///\n/// Even though delta is an unsigned integer, we can pass a\n/// signed integer to go backwards, it just goes \"the long way round\".\n///\n/// Using this function is equivalent to calling `next_64()` `delta`\n/// number of times.\n63 pub fn advance(&mut self, delta: u128) {\n64     let mut acc_mult: u128 = 1;\n65     let mut acc_plus: u128 = 0;\n66     let mut cur_mult = MULTIPLIER as u128;\n67     let mut cur_plus = self.increment;\n68     let mut mdelta = delta;\n69 \n70     while mdelta > 0 {\n71         if (mdelta & 1) != 0 {\n72             acc_mult = acc_mult.wrapping_mul(cur_mult);\n73             acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n74         }\n75         cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n76         cur_mult = cur_mult.wrapping_mul(cur_mult);\n77         mdelta /= 2;\n78     }\n79     self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n80 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}