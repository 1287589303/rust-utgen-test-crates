{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/slice.rs\n// crate name is rand\nuse super::increasing_uniform::IncreasingUniform;\nuse super::index;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::uniform::{SampleBorrow, SampleUniform};\n#[cfg(feature = \"alloc\")]\nuse crate::distr::weighted::{Error as WeightError, Weight};\nuse crate::Rng;\nuse core::ops::{Index, IndexMut};\npub trait IndexedRandom: Index<usize> {\n    fn len(&self) -> usize;\n    #[inline]\n    fn is_empty(&self) -> bool;\n    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() { None } else { Some(&self[rng.random_range(..self.len())]) }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_multiple<R>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n    ) -> SliceChooseIter<Self, Self::Output>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }\n    }\n    fn choose_multiple_array<R, const N: usize>(\n        &self,\n        rng: &mut R,\n    ) -> Option<[Self::Output; N]>\n    where\n        Self::Output: Clone + Sized,\n        R: Rng + ?Sized,\n    {\n        let indices = index::sample_array(rng, self.len())?;\n        Some(indices.map(|index| self[index].clone()))\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted<R, F, B, X>(\n        &self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        Ok(&self[distr.sample(rng)])\n    }\n    #[cfg(feature = \"std\")]\n    fn choose_multiple_weighted<R, F, X>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n        weight: F,\n    ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> X,\n        X: Into<f64>,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        Ok(SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample_weighted(\n                    rng,\n                    self.len(),\n                    |idx| weight(&self[idx]).into(),\n                    amount,\n                )?\n                .into_iter(),\n        })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Uniformly sample `amount` distinct elements from self\n///\n/// Chooses `amount` elements from the slice at random, without repetition,\n/// and in random order. The returned iterator is appropriate both for\n/// collection into a `Vec` and filling an existing buffer (see example).\n///\n/// In case this API is not sufficiently flexible, use [`index::sample`].\n///\n/// For slices, complexity is the same as [`index::sample`].\n///\n/// # Example\n/// ```\n/// use rand::seq::IndexedRandom;\n///\n/// let mut rng = &mut rand::rng();\n/// let sample = \"Hello, audience!\".as_bytes();\n///\n/// // collect the results into a vector:\n/// let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();\n///\n/// // store in a buffer:\n/// let mut buf = [0u8; 5];\n/// for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {\n///     *slot = *b;\n/// }\n/// ```\n 90 fn choose_multiple<R>(&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Output>\n 91 where\n 92     Self::Output: Sized,\n 93     R: Rng + ?Sized,\n 94 {\n 95     let amount = core::cmp::min(amount, self.len());\n 96     SliceChooseIter {\n 97         slice: self,\n 98         _phantom: Default::default(),\n 99         indices: index::sample(rng, self.len(), amount).into_iter(),\n100     }\n101 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}