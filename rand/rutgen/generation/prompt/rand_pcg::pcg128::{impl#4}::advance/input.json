{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128.rs\n// crate name is rand_pcg\npub type Pcg64 = Lcg128Xsl64;\npub type Pcg64Mcg = Mcg128Xsl64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u128 = 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Mcg128Xsl64 {\n    state: u128,\n}\nimpl Mcg128Xsl64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {\n        let mut acc_mult: u128 = 1;\n        let mut acc_plus: u128 = 0;\n        let mut cur_mult = MULTIPLIER;\n        let mut cur_plus: u128 = 0;\n        let mut mdelta = delta;\n        while mdelta > 0 {\n            if (mdelta & 1) != 0 {\n                acc_mult = acc_mult.wrapping_mul(cur_mult);\n                acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n            }\n            cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n            cur_mult = cur_mult.wrapping_mul(cur_mult);\n            mdelta /= 2;\n        }\n        self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n    }\n    pub fn new(state: u128) -> Self {\n        Mcg128Xsl64 { state: state | 1 }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Multi-step advance functions (jump-ahead, jump-back)\n///\n/// The method used here is based on Brown, \"Random Number Generation\n/// with Arbitrary Stride,\", Transactions of the American Nuclear\n/// Society (Nov. 1994).  The algorithm is very similar to fast\n/// exponentiation.\n///\n/// Even though delta is an unsigned integer, we can pass a\n/// signed integer to go backwards, it just goes \"the long way round\".\n///\n/// Using this function is equivalent to calling `next_64()` `delta`\n/// number of times.\n191 pub fn advance(&mut self, delta: u128) {\n192     let mut acc_mult: u128 = 1;\n193     let mut acc_plus: u128 = 0;\n194     let mut cur_mult = MULTIPLIER;\n195     let mut cur_plus: u128 = 0;\n196     let mut mdelta = delta;\n197 \n198     while mdelta > 0 {\n199         if (mdelta & 1) != 0 {\n200             acc_mult = acc_mult.wrapping_mul(cur_mult);\n201             acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);\n202         }\n203         cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);\n204         cur_mult = cur_mult.wrapping_mul(cur_mult);\n205         mdelta /= 2;\n206     }\n207     self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);\n208 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}