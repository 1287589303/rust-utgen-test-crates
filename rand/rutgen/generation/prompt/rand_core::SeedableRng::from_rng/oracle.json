{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/lib.rs\n// crate name is rand_core\nuse core::{fmt, ops::DerefMut};\n#[cfg(feature = \"os_rng\")]\npub use os::{OsError, OsRng};\npub trait SeedableRng: Sized {\n    type Seed: Clone + Default + AsRef<[u8]> + AsMut<[u8]>;\n    fn from_seed(seed: Self::Seed) -> Self;\n    fn seed_from_u64(mut state: u64) -> Self {\n        fn pcg32(state: &mut u64) -> [u8; 4] {\n            const MUL: u64 = 6364136223846793005;\n            const INC: u64 = 11634580027462260723;\n            *state = state.wrapping_mul(MUL).wrapping_add(INC);\n            let state = *state;\n            let xorshifted = (((state >> 18) ^ state) >> 27) as u32;\n            let rot = (state >> 59) as u32;\n            let x = xorshifted.rotate_right(rot);\n            x.to_le_bytes()\n        }\n        let mut seed = Self::Seed::default();\n        let mut iter = seed.as_mut().chunks_exact_mut(4);\n        for chunk in &mut iter {\n            chunk.copy_from_slice(&pcg32(&mut state));\n        }\n        let rem = iter.into_remainder();\n        if !rem.is_empty() {\n            rem.copy_from_slice(&pcg32(&mut state)[..rem.len()]);\n        }\n        Self::from_seed(seed)\n    }\n    fn from_rng(rng: &mut impl RngCore) -> Self {\n        let mut seed = Self::Seed::default();\n        rng.fill_bytes(seed.as_mut());\n        Self::from_seed(seed)\n    }\n    fn try_from_rng<R: TryRngCore>(rng: &mut R) -> Result<Self, R::Error> {\n        let mut seed = Self::Seed::default();\n        rng.try_fill_bytes(seed.as_mut())?;\n        Ok(Self::from_seed(seed))\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn from_os_rng() -> Self {\n        match Self::try_from_os_rng() {\n            Ok(res) => res,\n            Err(err) => panic!(\"from_os_rng failed: {}\", err),\n        }\n    }\n    #[cfg(feature = \"os_rng\")]\n    fn try_from_os_rng() -> Result<Self, getrandom::Error> {\n        let mut seed = Self::Seed::default();\n        getrandom::fill(seed.as_mut())?;\n        let res = Self::from_seed(seed);\n        Ok(res)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new PRNG seeded from an infallible `Rng`.\n///\n/// This may be useful when needing to rapidly seed many PRNGs from a master\n/// PRNG, and to allow forking of PRNGs. It may be considered deterministic.\n///\n/// The master PRNG should be at least as high quality as the child PRNGs.\n/// When seeding non-cryptographic child PRNGs, we recommend using a\n/// different algorithm for the master PRNG (ideally a CSPRNG) to avoid\n/// correlations between the child PRNGs. If this is not possible (e.g.\n/// forking using small non-crypto PRNGs) ensure that your PRNG has a good\n/// mixing function on the output or consider use of a hash function with\n/// `from_seed`.\n///\n/// Note that seeding `XorShiftRng` from another `XorShiftRng` provides an\n/// extreme example of what can go wrong: the new PRNG will be a clone\n/// of the parent.\n///\n/// PRNG implementations are allowed to assume that a good RNG is provided\n/// for seeding, and that it is cryptographically secure when appropriate.\n/// As of `rand` 0.7 / `rand_core` 0.5, implementations overriding this\n/// method should ensure the implementation satisfies reproducibility\n/// (in prior versions this was not required).\n///\n/// [`rand`]: https://docs.rs/rand\n521 fn from_rng(rng: &mut impl RngCore) -> Self {\n522     let mut seed = Self::Seed::default();\n523     rng.fill_bytes(seed.as_mut());\n524     Self::from_seed(seed)\n525 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}