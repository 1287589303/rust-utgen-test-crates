{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/slice.rs\n// crate name is rand\nuse super::increasing_uniform::IncreasingUniform;\nuse super::index;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::uniform::{SampleBorrow, SampleUniform};\n#[cfg(feature = \"alloc\")]\nuse crate::distr::weighted::{Error as WeightError, Weight};\nuse crate::Rng;\nuse core::ops::{Index, IndexMut};\npub trait SliceRandom: IndexedMutRandom {\n    fn shuffle<R>(&mut self, rng: &mut R)\n    where\n        R: Rng + ?Sized;\n    fn partial_shuffle<R>(\n        &mut self,\n        rng: &mut R,\n        amount: usize,\n    ) -> (&mut [Self::Output], &mut [Self::Output])\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized;\n}\npub trait SampleBorrow<Borrowed> {\n    fn borrow(&self) -> &Borrowed;\n}\npub trait Fill {\n    fn fill<R: Rng + ?Sized>(&mut self, rng: &mut R);\n}\ntrait UInt: Copy + PartialOrd + Ord + PartialEq + Eq + SampleUniform + Hash + AddAssign {\n    fn zero() -> Self;\n    #[cfg_attr(feature = \"alloc\", allow(dead_code))]\n    fn one() -> Self;\n    fn as_usize(self) -> usize;\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait IndexedRandom: Index<usize> {\n    fn len(&self) -> usize;\n    #[inline]\n    fn is_empty(&self) -> bool;\n    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() { None } else { Some(&self[rng.random_range(..self.len())]) }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_multiple<R>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n    ) -> SliceChooseIter<Self, Self::Output>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }\n    }\n    fn choose_multiple_array<R, const N: usize>(\n        &self,\n        rng: &mut R,\n    ) -> Option<[Self::Output; N]>\n    where\n        Self::Output: Clone + Sized,\n        R: Rng + ?Sized,\n    {\n        let indices = index::sample_array(rng, self.len())?;\n        Some(indices.map(|index| self[index].clone()))\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted<R, F, B, X>(\n        &self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        Ok(&self[distr.sample(rng)])\n    }\n    #[cfg(feature = \"std\")]\n    fn choose_multiple_weighted<R, F, X>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n        weight: F,\n    ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> X,\n        X: Into<f64>,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        Ok(SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample_weighted(\n                    rng,\n                    self.len(),\n                    |idx| weight(&self[idx]).into(),\n                    amount,\n                )?\n                .into_iter(),\n        })\n    }\n}\npub(crate) trait BoolAsSIMD: Sized {\n    fn any(self) -> bool;\n}\npub trait IndexedMutRandom: IndexedRandom + IndexMut<usize> {\n    fn choose_mut<R>(&mut self, rng: &mut R) -> Option<&mut Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() {\n            None\n        } else {\n            let len = self.len();\n            Some(&mut self[rng.random_range(..len)])\n        }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted_mut<R, F, B, X>(\n        &mut self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&mut Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        let index = distr.sample(rng);\n        Ok(&mut self[index])\n    }\n}\npub(crate) struct IncreasingUniform<R: RngCore> {\n    pub rng: R,\n    n: u32,\n    chunk: u32,\n    chunk_remaining: u8,\n}\nimpl<T> SliceRandom for [T] {\n    fn shuffle<R>(&mut self, rng: &mut R)\n    where\n        R: Rng + ?Sized,\n    {}\n    fn partial_shuffle<R>(&mut self, rng: &mut R, amount: usize) -> (&mut [T], &mut [T])\n    where\n        R: Rng + ?Sized,\n    {\n        let m = self.len().saturating_sub(amount);\n        if self.len() < (u32::MAX as usize) {\n            let mut chooser = IncreasingUniform::new(rng, m as u32);\n            for i in m..self.len() {\n                let index = chooser.next_index();\n                self.swap(i, index);\n            }\n        } else {\n            for i in m..self.len() {\n                let index = rng.random_range(..i + 1);\n                self.swap(i, index);\n            }\n        }\n        let r = self.split_at_mut(m);\n        (r.1, r.0)\n    }\n}\nimpl<R: RngCore> IncreasingUniform<R> {\n    pub fn new(rng: R, n: u32) -> Self {\n        let chunk_remaining = if n == 0 { 1 } else { 0 };\n        Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }\n    }\n    #[inline]\n    pub fn next_index(&mut self) -> usize {\n        let next_n = self.n + 1;\n        let next_chunk_remaining = self\n            .chunk_remaining\n            .checked_sub(1)\n            .unwrap_or_else(|| {\n                let (bound, remaining) = calculate_bound_u32(next_n);\n                self.chunk = self.rng.random_range(..bound);\n                remaining - 1\n            });\n        let result = if next_chunk_remaining == 0 {\n            self.chunk as usize\n        } else {\n            let r = self.chunk % next_n;\n            self.chunk /= next_n;\n            r as usize\n        };\n        self.chunk_remaining = next_chunk_remaining;\n        self.n = next_n;\n        result\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n388 fn partial_shuffle<R>(&mut self, rng: &mut R, amount: usize) -> (&mut [T], &mut [T])\n389 where\n390     R: Rng + ?Sized,\n391 {\n392     let m = self.len().saturating_sub(amount);\n393 \n394     // The algorithm below is based on Durstenfeld's algorithm for the\n395     // [Fisherâ€“Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm)\n396     // for an unbiased permutation.\n397     // It ensures that the last `amount` elements of the slice\n398     // are randomly selected from the whole slice.\n399 \n400     // `IncreasingUniform::next_index()` is faster than `Rng::random_range`\n401     // but only works for 32 bit integers\n402     // So we must use the slow method if the slice is longer than that.\n403     if self.len() < (u32::MAX as usize) {\n404         let mut chooser = IncreasingUniform::new(rng, m as u32);\n405         for i in m..self.len() {\n406             let index = chooser.next_index();\n407             self.swap(i, index);\n408         }\n409     } else {\n410         for i in m..self.len() {\n411             let index = rng.random_range(..i + 1);\n412             self.swap(i, index);\n413         }\n414     }\n415     let r = self.split_at_mut(m);\n416     (r.1, r.0)\n417 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}