{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is rand\npub use rand_core;\npub use rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[cfg(feature = \"thread_rng\")]\npub use crate::rngs::thread::rng;\npub use rng::{Fill, Rng};\n#[cfg(feature = \"thread_rng\")]\nuse crate::distr::{Distribution, StandardUniform};\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool {\n        match distr::Bernoulli::from_ratio(numerator, denominator) {\n            Ok(d) => self.sample(d),\n            Err(_) => {\n                panic!(\"p={}/{} is outside range [0.0, 1.0]\", numerator, denominator)\n            }\n        }\n    }\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[cfg(feature = \"thread_rng\")]\n#[inline]\n#[track_caller]\npub fn random_ratio(numerator: u32, denominator: u32) -> bool {\n    rng().random_ratio(numerator, denominator)\n}\npub fn rng() -> ThreadRng {\n    let rng = THREAD_RNG_KEY.with(|t| t.clone());\n    ThreadRng { rng }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a bool with a probability of `numerator/denominator` of being\n/// true.\n///\n/// That is, `random_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n/// returning true. If `numerator == denominator`, then the returned value\n/// is guaranteed to be `true`. If `numerator == 0`, then the returned\n/// value is guaranteed to be `false`.\n///\n/// See also the [`Bernoulli`] distribution, which may be faster if\n/// sampling from the same `numerator` and `denominator` repeatedly.\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_ratio](Rng::random_ratio)(<var>numerator</var>, <var>denominator</var>)</code>.\n///\n/// # Panics\n///\n/// If `denominator == 0` or `numerator > denominator`.\n///\n/// # Example\n///\n/// ```\n/// println!(\"{}\", rand::random_ratio(2, 3));\n/// ```\n///\n/// [`Bernoulli`]: distr::Bernoulli\n273 pub fn random_ratio(numerator: u32, denominator: u32) -> bool {\n274     rng().random_ratio(numerator, denominator)\n275 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}