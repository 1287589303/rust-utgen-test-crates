{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/thread.rs\n// crate name is rand\nuse core::cell::UnsafeCell;\nuse std::fmt;\nuse std::rc::Rc;\nuse std::thread_local;\nuse rand_core::{CryptoRng, RngCore};\nuse super::std::Core;\nuse crate::rngs::OsRng;\nuse crate::rngs::ReseedingRng;\nconst THREAD_RNG_RESEED_THRESHOLD: u64 = 1024 * 64;\n#[derive(Clone)]\npub struct ThreadRng {\n    rng: Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>,\n}\n#[derive(Debug)]\npub struct ReseedingRng<R, Rsdr>(\n    BlockRng<ReseedingCore<R, Rsdr>>,\n)\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore;\nimpl RngCore for ThreadRng {\n    #[inline(always)]\n    fn next_u32(&mut self) -> u32 {\n        let rng = unsafe { &mut *self.rng.get() };\n        rng.next_u32()\n    }\n    #[inline(always)]\n    fn next_u64(&mut self) -> u64 {}\n    #[inline(always)]\n    fn fill_bytes(&mut self, dest: &mut [u8]) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n170 fn next_u32(&mut self) -> u32 {\n171     // SAFETY: We must make sure to stop using `rng` before anyone else\n172     // creates another mutable reference\n173     let rng = unsafe { &mut *self.rng.get() };\n174     rng.next_u32()\n175 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}