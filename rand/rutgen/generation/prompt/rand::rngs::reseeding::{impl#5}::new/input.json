{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/reseeding.rs\n// crate name is rand\nuse core::mem::size_of_val;\nuse rand_core::block::{BlockRng, BlockRngCore, CryptoBlockRng};\nuse rand_core::{CryptoRng, RngCore, SeedableRng, TryCryptoRng, TryRngCore};\n#[derive(Debug)]\nstruct ReseedingCore<R, Rsdr> {\n    inner: R,\n    reseeder: Rsdr,\n    threshold: i64,\n    bytes_until_reseed: i64,\n}\nimpl<R, Rsdr> ReseedingCore<R, Rsdr>\nwhere\n    R: BlockRngCore + SeedableRng,\n    Rsdr: TryRngCore,\n{\n    fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n        let threshold = if threshold == 0 {\n            i64::MAX\n        } else if threshold <= i64::MAX as u64 {\n            threshold as i64\n        } else {\n            i64::MAX\n        };\n        let inner = R::try_from_rng(&mut reseeder)?;\n        Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })\n    }\n    fn reseed(&mut self) -> Result<(), Rsdr::Error> {}\n    #[inline(never)]\n    fn reseed_and_generate(&mut self, results: &mut <Self as BlockRngCore>::Results) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `ReseedingCore`.\n///\n/// `threshold` is the maximum number of bytes produced by\n/// [`BlockRngCore::generate`] before attempting reseeding.\n184 fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {\n185     // Because generating more values than `i64::MAX` takes centuries on\n186     // current hardware, we just clamp to that value.\n187     // Also we set a threshold of 0, which indicates no limit, to that\n188     // value.\n189     let threshold = if threshold == 0 {\n190         i64::MAX\n191     } else if threshold <= i64::MAX as u64 {\n192         threshold as i64\n193     } else {\n194         i64::MAX\n195     };\n196 \n197     let inner = R::try_from_rng(&mut reseeder)?;\n198 \n199     Ok(ReseedingCore {\n200         inner,\n201         reseeder,\n202         threshold,\n203         bytes_until_reseed: threshold,\n204     })\n205 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}