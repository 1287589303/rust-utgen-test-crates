{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/weighted/weighted_index.rs\n// crate name is rand\nuse super::{Error, Weight};\nuse crate::distr::uniform::{SampleBorrow, SampleUniform, UniformSampler};\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse alloc::vec::Vec;\nuse core::fmt::{self, Debug};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Debug, Clone, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct WeightedIndex<X: SampleUniform + PartialOrd> {\n    cumulative_weights: Vec<X>,\n    total_weight: X,\n    weight_distribution: X::Sampler,\n}\nimpl<X: SampleUniform + PartialOrd + Clone> WeightedIndex<X> {\n    pub fn weight(&self, index: usize) -> Option<X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {\n        use core::cmp::Ordering::*;\n        let mut weight = match index.cmp(&self.cumulative_weights.len()) {\n            Less => self.cumulative_weights[index].clone(),\n            Equal => self.total_weight.clone(),\n            Greater => return None,\n        };\n        if index > 0 {\n            weight -= &self.cumulative_weights[index - 1];\n        }\n        Some(weight)\n    }\n    pub fn weights(&self) -> WeightedIndexIter<'_, X>\n    where\n        X: for<'a> core::ops::SubAssign<&'a X>,\n    {}\n    pub fn total_weight(&self) -> X {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the weight at the given index, if it exists.\n///\n/// If the index is out of bounds, this will return `None`.\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::weighted::WeightedIndex;\n///\n/// let weights = [0, 1, 2];\n/// let dist = WeightedIndex::new(&weights).unwrap();\n/// assert_eq!(dist.weight(0), Some(0));\n/// assert_eq!(dist.weight(1), Some(1));\n/// assert_eq!(dist.weight(2), Some(2));\n/// assert_eq!(dist.weight(3), None);\n/// ```\n308 pub fn weight(&self, index: usize) -> Option<X>\n309 where\n310     X: for<'a> core::ops::SubAssign<&'a X>,\n311 {\n312     use core::cmp::Ordering::*;\n313 \n314     let mut weight = match index.cmp(&self.cumulative_weights.len()) {\n315         Less => self.cumulative_weights[index].clone(),\n316         Equal => self.total_weight.clone(),\n317         Greater => return None,\n318     };\n319 \n320     if index > 0 {\n321         weight -= &self.cumulative_weights[index - 1];\n322     }\n323     Some(weight)\n324 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}