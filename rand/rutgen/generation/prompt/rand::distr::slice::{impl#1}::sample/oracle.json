{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/slice.rs\n// crate name is rand\nuse core::num::NonZeroUsize;\nuse crate::distr::uniform::{UniformSampler, UniformUsize};\nuse crate::distr::Distribution;\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\n#[derive(Debug, Clone, Copy)]\npub struct Choose<'a, T> {\n    slice: &'a [T],\n    range: UniformUsize,\n    num_choices: NonZeroUsize,\n}\n#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub struct UniformUsize {\n    low: usize,\n    range: usize,\n    thresh: usize,\n    #[cfg(target_pointer_width = \"64\")]\n    mode64: bool,\n}\nimpl<'a, T> Distribution<&'a T> for Choose<'a, T> {\n    fn sample<R: crate::Rng + ?Sized>(&self, rng: &mut R) -> &'a T {\n        let idx = self.range.sample(rng);\n        debug_assert!(\n            idx < self.slice.len(), \"Uniform::new(0, {}) somehow returned {}\", self.slice\n            .len(), idx\n        );\n        unsafe { self.slice.get_unchecked(idx) }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 86 fn sample<R: crate::Rng + ?Sized>(&self, rng: &mut R) -> &'a T {\n 87     let idx = self.range.sample(rng);\n 88 \n 89     debug_assert!(\n 90         idx < self.slice.len(),\n 91         \"Uniform::new(0, {}) somehow returned {}\",\n 92         self.slice.len(),\n 93         idx\n 94     );\n 95 \n 96     // Safety: at construction time, it was ensured that the slice was\n 97     // non-empty, and that the `Uniform` range produces values in range\n 98     // for the slice\n 99     unsafe { self.slice.get_unchecked(idx) }\n100 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}