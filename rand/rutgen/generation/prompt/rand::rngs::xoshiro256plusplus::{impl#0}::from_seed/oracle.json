{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/xoshiro256plusplus.rs\n// crate name is rand\nuse rand_core::impls::fill_bytes_via_next;\nuse rand_core::le::read_u64_into;\nuse rand_core::{RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Xoshiro256PlusPlus {\n    s: [u64; 4],\n}\nimpl SeedableRng for Xoshiro256PlusPlus {\n    type Seed = [u8; 32];\n    #[inline]\n    fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {\n        let mut state = [0; 4];\n        read_u64_into(&seed, &mut state);\n        if state.iter().all(|&x| x == 0) {\n            return Self::seed_from_u64(0);\n        }\n        Xoshiro256PlusPlus { s: state }\n    }\n    #[inline]\n    fn seed_from_u64(mut state: u64) -> Self {\n        const PHI: u64 = 0x9e3779b97f4a7c15;\n        let mut s = [0; 4];\n        for i in s.iter_mut() {\n            state = state.wrapping_add(PHI);\n            let mut z = state;\n            z = (z ^ (z >> 30)).wrapping_mul(0xbf58476d1ce4e5b9);\n            z = (z ^ (z >> 27)).wrapping_mul(0x94d049bb133111eb);\n            z = z ^ (z >> 31);\n            *i = z;\n        }\n        debug_assert_ne!(s, [0; 4]);\n        Xoshiro256PlusPlus { s }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `Xoshiro256PlusPlus`.  If `seed` is entirely 0, it will be\n/// mapped to a different seed.\n35 fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {\n36     let mut state = [0; 4];\n37     read_u64_into(&seed, &mut state);\n38     // Check for zero on aligned integers for better code generation.\n39     // Furtermore, seed_from_u64(0) will expand to a constant when optimized.\n40     if state.iter().all(|&x| x == 0) {\n41         return Self::seed_from_u64(0);\n42     }\n43     Xoshiro256PlusPlus { s: state }\n44 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}