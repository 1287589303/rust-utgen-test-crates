{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/increasing_uniform.rs\n// crate name is rand\nuse crate::{Rng, RngCore};\npub(crate) struct IncreasingUniform<R: RngCore> {\n    pub rng: R,\n    n: u32,\n    chunk: u32,\n    chunk_remaining: u8,\n}\nimpl<R: RngCore> IncreasingUniform<R> {\n    pub fn new(rng: R, n: u32) -> Self {\n        let chunk_remaining = if n == 0 { 1 } else { 0 };\n        Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }\n    }\n    #[inline]\n    pub fn next_index(&mut self) -> usize {\n        let next_n = self.n + 1;\n        let next_chunk_remaining = self\n            .chunk_remaining\n            .checked_sub(1)\n            .unwrap_or_else(|| {\n                let (bound, remaining) = calculate_bound_u32(next_n);\n                self.chunk = self.rng.random_range(..bound);\n                remaining - 1\n            });\n        let result = if next_chunk_remaining == 0 {\n            self.chunk as usize\n        } else {\n            let r = self.chunk % next_n;\n            self.chunk /= next_n;\n            r as usize\n        };\n        self.chunk_remaining = next_chunk_remaining;\n        self.n = next_n;\n        result\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a number in [0,n] and increments n by 1.\n/// Generates new random bits as needed\n/// Panics if `n >= u32::MAX`\n40 pub fn next_index(&mut self) -> usize {\n41     let next_n = self.n + 1;\n42 \n43     // There's room for further optimisation here:\n44     // random_range uses rejection sampling (or other method; see #1196) to avoid bias.\n45     // When the initial sample is biased for range 0..bound\n46     // it may still be viable to use for a smaller bound\n47     // (especially if small biases are considered acceptable).\n48 \n49     let next_chunk_remaining = self.chunk_remaining.checked_sub(1).unwrap_or_else(|| {\n50         // If the chunk is empty, generate a new chunk\n51         let (bound, remaining) = calculate_bound_u32(next_n);\n52         // bound = (n + 1) * (n + 2) *..* (n + remaining)\n53         self.chunk = self.rng.random_range(..bound);\n54         // Chunk is a random number in\n55         // [0, (n + 1) * (n + 2) *..* (n + remaining) )\n56 \n57         remaining - 1\n58     });\n59 \n60     let result = if next_chunk_remaining == 0 {\n61         // `chunk` is a random number in the range [0..n+1)\n62         // Because `chunk_remaining` is about to be set to zero\n63         // we do not need to clear the chunk here\n64         self.chunk as usize\n65     } else {\n66         // `chunk` is a random number in a range that is a multiple of n+1\n67         // so r will be a random number in [0..n+1)\n68         let r = self.chunk % next_n;\n69         self.chunk /= next_n;\n70         r as usize\n71     };\n72 \n73     self.chunk_remaining = next_chunk_remaining;\n74     self.n = next_n;\n75     result\n76 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}