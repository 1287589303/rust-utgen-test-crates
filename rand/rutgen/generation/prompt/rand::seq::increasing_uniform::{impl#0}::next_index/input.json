{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/increasing_uniform.rs\n// crate name is rand\nuse crate::{Rng, RngCore};\npub(crate) struct IncreasingUniform<R: RngCore> {\n    pub rng: R,\n    n: u32,\n    chunk: u32,\n    chunk_remaining: u8,\n}\nimpl<R: RngCore> IncreasingUniform<R> {\n    pub fn new(rng: R, n: u32) -> Self {\n        let chunk_remaining = if n == 0 { 1 } else { 0 };\n        Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }\n    }\n    #[inline]\n    pub fn next_index(&mut self) -> usize {\n        let next_n = self.n + 1;\n        let next_chunk_remaining = self\n            .chunk_remaining\n            .checked_sub(1)\n            .unwrap_or_else(|| {\n                let (bound, remaining) = calculate_bound_u32(next_n);\n                self.chunk = self.rng.random_range(..bound);\n                remaining - 1\n            });\n        let result = if next_chunk_remaining == 0 {\n            self.chunk as usize\n        } else {\n            let r = self.chunk % next_n;\n            self.chunk /= next_n;\n            r as usize\n        };\n        self.chunk_remaining = next_chunk_remaining;\n        self.n = next_n;\n        result\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a number in [0,n] and increments n by 1.\n/// Generates new random bits as needed\n/// Panics if `n >= u32::MAX`\n40 pub fn next_index(&mut self) -> usize {\n41     let next_n = self.n + 1;\n42 \n43     // There's room for further optimisation here:\n44     // random_range uses rejection sampling (or other method; see #1196) to avoid bias.\n45     // When the initial sample is biased for range 0..bound\n46     // it may still be viable to use for a smaller bound\n47     // (especially if small biases are considered acceptable).\n48 \n49     let next_chunk_remaining = self.chunk_remaining.checked_sub(1).unwrap_or_else(|| {\n50         // If the chunk is empty, generate a new chunk\n51         let (bound, remaining) = calculate_bound_u32(next_n);\n52         // bound = (n + 1) * (n + 2) *..* (n + remaining)\n53         self.chunk = self.rng.random_range(..bound);\n54         // Chunk is a random number in\n55         // [0, (n + 1) * (n + 2) *..* (n + remaining) )\n56 \n57         remaining - 1\n58     });\n59 \n60     let result = if next_chunk_remaining == 0 {\n61         // `chunk` is a random number in the range [0..n+1)\n62         // Because `chunk_remaining` is about to be set to zero\n63         // we do not need to clear the chunk here\n64         self.chunk as usize\n65     } else {\n66         // `chunk` is a random number in a range that is a multiple of n+1\n67         // so r will be a random number in [0..n+1)\n68         let r = self.chunk % next_n;\n69         self.chunk /= next_n;\n70         r as usize\n71     };\n72 \n73     self.chunk_remaining = next_chunk_remaining;\n74     self.n = next_n;\n75     result\n76 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}