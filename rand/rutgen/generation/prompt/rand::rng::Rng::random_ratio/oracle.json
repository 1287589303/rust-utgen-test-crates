{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rng.rs\n// crate name is rand\nuse crate::distr::uniform::{SampleRange, SampleUniform};\nuse crate::distr::{self, Distribution, StandardUniform};\nuse core::num::Wrapping;\nuse rand_core::RngCore;\nuse zerocopy::IntoBytes;\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool {\n        match distr::Bernoulli::from_ratio(numerator, denominator) {\n            Ok(d) => self.sample(d),\n            Err(_) => {\n                panic!(\"p={}/{} is outside range [0.0, 1.0]\", numerator, denominator)\n            }\n        }\n    }\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Bernoulli {\n    /// Probability of success, relative to the maximal integer.\n    p_int: u64,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum BernoulliError {\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}\nimpl Bernoulli {\n    #[inline]\n    pub fn new(p: f64) -> Result<Bernoulli, BernoulliError> {}\n    #[inline]\n    pub fn from_ratio(\n        numerator: u32,\n        denominator: u32,\n    ) -> Result<Bernoulli, BernoulliError> {\n        if numerator > denominator || denominator == 0 {\n            return Err(BernoulliError::InvalidProbability);\n        }\n        if numerator == denominator {\n            return Ok(Bernoulli { p_int: ALWAYS_TRUE });\n        }\n        let p_int = ((f64::from(numerator) / f64::from(denominator)) * SCALE) as u64;\n        Ok(Bernoulli { p_int })\n    }\n    #[inline]\n    pub fn p(&self) -> f64 {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a bool with a probability of `numerator/denominator` of being\n/// true.\n///\n/// That is, `random_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n/// returning true. If `numerator == denominator`, then the returned value\n/// is guaranteed to be `true`. If `numerator == 0`, then the returned\n/// value is guaranteed to be `false`.\n///\n/// See also the [`Bernoulli`] distribution, which may be faster if\n/// sampling from the same `numerator` and `denominator` repeatedly.\n///\n/// # Panics\n///\n/// If `denominator == 0` or `numerator > denominator`.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// println!(\"{}\", rng.random_ratio(2, 3));\n/// ```\n///\n/// [`Bernoulli`]: distr::Bernoulli\n225 fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool {\n226     match distr::Bernoulli::from_ratio(numerator, denominator) {\n227         Ok(d) => self.sample(d),\n228         Err(_) => panic!(\n229             \"p={}/{} is outside range [0.0, 1.0]\",\n230             numerator, denominator\n231         ),\n232     }\n233 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}