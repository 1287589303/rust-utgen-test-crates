{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/coin_flipper.rs\n// crate name is rand\nuse crate::RngCore;\npub(crate) struct CoinFlipper<R: RngCore> {\n    pub rng: R,\n    chunk: u32,\n    chunk_remaining: u32,\n}\nimpl<R: RngCore> CoinFlipper<R> {\n    pub fn new(rng: R) -> Self {\n        Self {\n            rng,\n            chunk: 0,\n            chunk_remaining: 0,\n        }\n    }\n    #[inline]\n    pub fn random_ratio_one_over(&mut self, d: usize) -> bool {\n        debug_assert_ne!(d, 0);\n        let c = (usize::BITS - 1 - d.leading_zeros()).min(32);\n        if self.flip_c_heads(c) {\n            let numerator = 1 << c;\n            self.random_ratio(numerator, d)\n        } else {\n            false\n        }\n    }\n    #[inline]\n    fn random_ratio(&mut self, mut n: usize, d: usize) -> bool {\n        while n < d {\n            let c = n.leading_zeros().saturating_sub(d.leading_zeros() + 1).clamp(1, 32);\n            if self.flip_c_heads(c) {\n                n = n.saturating_mul(2_usize.pow(c));\n            } else {\n                if c == 1 {\n                    let next_n = n.wrapping_add(n).wrapping_sub(d);\n                    if next_n == 0 || next_n > n {\n                        return false;\n                    }\n                    n = next_n;\n                } else {\n                    return false;\n                }\n            }\n        }\n        true\n    }\n    fn flip_c_heads(&mut self, mut c: u32) -> bool {\n        debug_assert!(c <= 32);\n        loop {\n            let zeros = self.chunk.leading_zeros();\n            if zeros < c {\n                self.chunk = self.chunk.wrapping_shl(zeros + 1);\n                self.chunk_remaining = self.chunk_remaining.saturating_sub(zeros + 1);\n                return false;\n            } else {\n                if let Some(new_remaining) = self.chunk_remaining.checked_sub(c) {\n                    self.chunk_remaining = new_remaining;\n                    self.chunk <<= c;\n                    return true;\n                } else {\n                    c -= self.chunk_remaining;\n                    self.chunk = self.rng.next_u32();\n                    self.chunk_remaining = 32;\n                }\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns true with a probability of 1 / d\n/// Uses an expected two bits of randomness\n/// Panics if d == 0\n30 pub fn random_ratio_one_over(&mut self, d: usize) -> bool {\n31     debug_assert_ne!(d, 0);\n32     // This uses the same logic as `random_ratio` but is optimized for the case that\n33     // the starting numerator is one (which it always is for `Sequence::Choose()`)\n34 \n35     // In this case (but not `random_ratio`), this way of calculating c is always accurate\n36     let c = (usize::BITS - 1 - d.leading_zeros()).min(32);\n37 \n38     if self.flip_c_heads(c) {\n39         let numerator = 1 << c;\n40         self.random_ratio(numerator, d)\n41     } else {\n42         false\n43     }\n44 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}