{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/impls.rs\n// crate name is rand_core\nuse crate::RngCore;\npub fn fill_bytes_via_next<R: RngCore + ?Sized>(rng: &mut R, dest: &mut [u8]) {\n    let mut left = dest;\n    while left.len() >= 8 {\n        let (l, r) = { left }.split_at_mut(8);\n        left = r;\n        let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n        l.copy_from_slice(&chunk);\n    }\n    let n = left.len();\n    if n > 4 {\n        let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n        left.copy_from_slice(&chunk[..n]);\n    } else if n > 0 {\n        let chunk: [u8; 4] = rng.next_u32().to_le_bytes();\n        left.copy_from_slice(&chunk[..n]);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.\n///\n/// The fastest way to fill a slice is usually to work as long as possible with\n/// integers. That is why this method mostly uses `next_u64`, and only when\n/// there are 4 or less bytes remaining at the end of the slice it uses\n/// `next_u32` once.\n36 pub fn fill_bytes_via_next<R: RngCore + ?Sized>(rng: &mut R, dest: &mut [u8]) {\n37     let mut left = dest;\n38     while left.len() >= 8 {\n39         let (l, r) = { left }.split_at_mut(8);\n40         left = r;\n41         let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n42         l.copy_from_slice(&chunk);\n43     }\n44     let n = left.len();\n45     if n > 4 {\n46         let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n47         left.copy_from_slice(&chunk[..n]);\n48     } else if n > 0 {\n49         let chunk: [u8; 4] = rng.next_u32().to_le_bytes();\n50         left.copy_from_slice(&chunk[..n]);\n51     }\n52 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}