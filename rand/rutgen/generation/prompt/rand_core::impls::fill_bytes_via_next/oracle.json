{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/impls.rs\n// crate name is rand_core\nuse crate::RngCore;\npub fn fill_bytes_via_next<R: RngCore + ?Sized>(rng: &mut R, dest: &mut [u8]) {\n    let mut left = dest;\n    while left.len() >= 8 {\n        let (l, r) = { left }.split_at_mut(8);\n        left = r;\n        let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n        l.copy_from_slice(&chunk);\n    }\n    let n = left.len();\n    if n > 4 {\n        let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n        left.copy_from_slice(&chunk[..n]);\n    } else if n > 0 {\n        let chunk: [u8; 4] = rng.next_u32().to_le_bytes();\n        left.copy_from_slice(&chunk[..n]);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.\n///\n/// The fastest way to fill a slice is usually to work as long as possible with\n/// integers. That is why this method mostly uses `next_u64`, and only when\n/// there are 4 or less bytes remaining at the end of the slice it uses\n/// `next_u32` once.\n36 pub fn fill_bytes_via_next<R: RngCore + ?Sized>(rng: &mut R, dest: &mut [u8]) {\n37     let mut left = dest;\n38     while left.len() >= 8 {\n39         let (l, r) = { left }.split_at_mut(8);\n40         left = r;\n41         let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n42         l.copy_from_slice(&chunk);\n43     }\n44     let n = left.len();\n45     if n > 4 {\n46         let chunk: [u8; 8] = rng.next_u64().to_le_bytes();\n47         left.copy_from_slice(&chunk[..n]);\n48     } else if n > 0 {\n49         let chunk: [u8; 4] = rng.next_u32().to_le_bytes();\n50         left.copy_from_slice(&chunk[..n]);\n51     }\n52 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}