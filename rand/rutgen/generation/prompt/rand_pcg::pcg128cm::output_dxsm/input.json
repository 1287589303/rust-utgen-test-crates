{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128cm.rs\n// crate name is rand_pcg\npub type Pcg64Dxsm = Lcg128CmDxsm64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 15750249268501108917;\n#[inline(always)]\nfn output_dxsm(state: u128) -> u64 {\n    let mut hi = (state >> 64) as u64;\n    let mut lo = state as u64;\n    lo |= 1;\n    hi ^= hi >> 32;\n    hi = hi.wrapping_mul(MULTIPLIER);\n    hi ^= hi >> 48;\n    hi = hi.wrapping_mul(lo);\n    hi\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n164 fn output_dxsm(state: u128) -> u64 {\n165     // See https://github.com/imneme/pcg-cpp/blob/ffd522e7188bef30a00c74dc7eb9de5faff90092/include/pcg_random.hpp#L1016\n166     // for a short discussion of the construction and its original implementation.\n167     let mut hi = (state >> 64) as u64;\n168     let mut lo = state as u64;\n169 \n170     lo |= 1;\n171     hi ^= hi >> 32;\n172     hi = hi.wrapping_mul(MULTIPLIER);\n173     hi ^= hi >> 48;\n174     hi = hi.wrapping_mul(lo);\n175 \n176     hi\n177 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}