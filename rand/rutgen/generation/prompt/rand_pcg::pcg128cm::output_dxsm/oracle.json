{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128cm.rs\n// crate name is rand_pcg\npub type Pcg64Dxsm = Lcg128CmDxsm64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 15750249268501108917;\n#[inline(always)]\nfn output_dxsm(state: u128) -> u64 {\n    let mut hi = (state >> 64) as u64;\n    let mut lo = state as u64;\n    lo |= 1;\n    hi ^= hi >> 32;\n    hi = hi.wrapping_mul(MULTIPLIER);\n    hi ^= hi >> 48;\n    hi = hi.wrapping_mul(lo);\n    hi\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n164 fn output_dxsm(state: u128) -> u64 {\n165     // See https://github.com/imneme/pcg-cpp/blob/ffd522e7188bef30a00c74dc7eb9de5faff90092/include/pcg_random.hpp#L1016\n166     // for a short discussion of the construction and its original implementation.\n167     let mut hi = (state >> 64) as u64;\n168     let mut lo = state as u64;\n169 \n170     lo |= 1;\n171     hi ^= hi >> 32;\n172     hi = hi.wrapping_mul(MULTIPLIER);\n173     hi ^= hi >> 48;\n174     hi = hi.wrapping_mul(lo);\n175 \n176     hi\n177 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}