{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/other.rs\n// crate name is rand\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::array;\nuse core::char;\nuse core::num::Wrapping;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::SampleString;\nuse crate::distr::{Distribution, StandardUniform, Uniform};\nuse crate::Rng;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::prelude::*;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::{LaneCount, MaskElement, SupportedLaneCount};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String {\n        let mut s = String::new();\n        self.append_string(rng, &mut s, len);\n        s\n    }\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Clone, Copy, Debug, Default)]\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\npub struct StandardUniform;\n#[derive(Debug)]\npub struct Iter<D, R, T> {\n    distr: D,\n    rng: R,\n    phantom: core::marker::PhantomData<T>,\n}\n#[cfg(feature = \"alloc\")]\nimpl SampleString for StandardUniform {\n    fn append_string<R: Rng + ?Sized>(&self, rng: &mut R, s: &mut String, len: usize) {\n        s.reserve(4 * len);\n        s.extend(Distribution::<char>::sample_iter(self, rng).take(len));\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n127 fn append_string<R: Rng + ?Sized>(&self, rng: &mut R, s: &mut String, len: usize) {\n128     // A char is encoded with at most four bytes, thus this reservation is\n129     // guaranteed to be sufficient. We do not shrink_to_fit afterwards so\n130     // that repeated usage on the same `String` buffer does not reallocate.\n131     s.reserve(4 * len);\n132     s.extend(Distribution::<char>::sample_iter(self, rng).take(len));\n133 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}