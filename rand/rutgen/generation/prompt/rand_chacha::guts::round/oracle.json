{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_chacha/src/guts.rs\n// crate name is rand_chacha\nuse ppv_lite86::{dispatch, dispatch_light128};\npub use ppv_lite86::Machine;\nuse ppv_lite86::{\n    vec128_storage, ArithOps, BitOps32, LaneWords4, MultiLane, StoreBytes, Vec4, Vec4Ext,\n    Vector,\n};\npub(crate) const BLOCK: usize = 16;\npub(crate) const BLOCK64: u64 = BLOCK as u64;\nconst LOG2_BUFBLOCKS: u64 = 2;\nconst BUFBLOCKS: u64 = 1 << LOG2_BUFBLOCKS;\npub(crate) const BUFSZ64: u64 = BLOCK64 * BUFBLOCKS;\npub(crate) const BUFSZ: usize = BUFSZ64 as usize;\nconst STREAM_PARAM_NONCE: u32 = 1;\nconst STREAM_PARAM_BLOCK: u32 = 0;\n#[derive(Clone)]\npub struct State<V> {\n    pub(crate) a: V,\n    pub(crate) b: V,\n    pub(crate) c: V,\n    pub(crate) d: V,\n}\n#[inline(always)]\npub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {\n    x.a += x.b;\n    x.d = (x.d ^ x.a).rotate_each_word_right16();\n    x.c += x.d;\n    x.b = (x.b ^ x.c).rotate_each_word_right20();\n    x.a += x.b;\n    x.d = (x.d ^ x.a).rotate_each_word_right24();\n    x.c += x.d;\n    x.b = (x.b ^ x.c).rotate_each_word_right25();\n    x\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n45 pub(crate) fn round<V: ArithOps + BitOps32>(mut x: State<V>) -> State<V> {\n46     x.a += x.b;\n47     x.d = (x.d ^ x.a).rotate_each_word_right16();\n48     x.c += x.d;\n49     x.b = (x.b ^ x.c).rotate_each_word_right20();\n50     x.a += x.b;\n51     x.d = (x.d ^ x.a).rotate_each_word_right24();\n52     x.c += x.d;\n53     x.b = (x.b ^ x.c).rotate_each_word_right25();\n54     x\n55 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}