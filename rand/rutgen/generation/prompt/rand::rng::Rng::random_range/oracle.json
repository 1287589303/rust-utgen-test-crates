{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rng.rs\n// crate name is rand\nuse crate::distr::uniform::{SampleRange, SampleUniform};\nuse crate::distr::{self, Distribution, StandardUniform};\nuse core::num::Wrapping;\nuse rand_core::RngCore;\nuse zerocopy::IntoBytes;\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>,\n    {\n        assert!(! range.is_empty(), \"cannot sample empty range\");\n        range.sample_single(self).unwrap()\n    }\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Generate a random value in the given range.\n///\n/// This function is optimised for the case that only a single sample is\n/// made from the given range. See also the [`Uniform`] distribution\n/// type which may be faster if sampling from the same range repeatedly.\n///\n/// All types support `low..high_exclusive` and `low..=high` range syntax.\n/// Unsigned integer types also support `..high_exclusive` and `..=high` syntax.\n///\n/// # Panics\n///\n/// Panics if the range is empty, or if `high - low` overflows for floats.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n///\n/// // Exclusive range\n/// let n: u32 = rng.random_range(..10);\n/// println!(\"{}\", n);\n/// let m: f64 = rng.random_range(-40.0..1.3e5);\n/// println!(\"{}\", m);\n///\n/// // Inclusive range\n/// let n: u32 = rng.random_range(..=10);\n/// println!(\"{}\", n);\n/// ```\n///\n/// [`Uniform`]: distr::uniform::Uniform\n161 fn random_range<T, R>(&mut self, range: R) -> T\n162 where\n163     T: SampleUniform,\n164     R: SampleRange<T>,\n165 {\n166     assert!(!range.is_empty(), \"cannot sample empty range\");\n167     range.sample_single(self).unwrap()\n168 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}