{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rng.rs\n// crate name is rand\nuse crate::distr::uniform::{SampleRange, SampleUniform};\nuse crate::distr::{self, Distribution, StandardUniform};\nuse core::num::Wrapping;\nuse rand_core::RngCore;\nuse zerocopy::IntoBytes;\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample(self)\n    }\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Copy, Debug, Default)]\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\npub struct StandardUniform;\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return a random value via the [`StandardUniform`] distribution.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// let x: u32 = rng.random();\n/// println!(\"{}\", x);\n/// println!(\"{:?}\", rng.random::<(f64, bool)>());\n/// ```\n///\n/// # Arrays and tuples\n///\n/// The `rng.random()` method is able to generate arrays\n/// and tuples (up to 12 elements), so long as all element types can be\n/// generated.\n///\n/// For arrays of integers, especially for those with small element types\n/// (< 64 bit), it will likely be faster to instead use [`Rng::fill`],\n/// though note that generated values will differ.\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// let tuple: (u8, i32, char) = rng.random(); // arbitrary tuple support\n///\n/// let arr1: [f32; 32] = rng.random();        // array construction\n/// let mut arr2 = [0u8; 128];\n/// rng.fill(&mut arr2);                    // array fill\n/// ```\n///\n/// [`StandardUniform`]: distr::StandardUniform\n 95 fn random<T>(&mut self) -> T\n 96 where\n 97     StandardUniform: Distribution<T>,\n 98 {\n 99     StandardUniform.sample(self)\n100 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}