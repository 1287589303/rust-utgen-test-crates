{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg128cm.rs\n// crate name is rand_pcg\npub type Pcg64Dxsm = Lcg128CmDxsm64;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 15750249268501108917;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg128CmDxsm64 {\n    state: u128,\n    increment: u128,\n}\nimpl SeedableRng for Lcg128CmDxsm64 {\n    type Seed = [u8; 32];\n    fn from_seed(seed: Self::Seed) -> Self {\n        let mut seed_u64 = [0u64; 4];\n        le::read_u64_into(&seed, &mut seed_u64);\n        let state = u128::from(seed_u64[0]) | (u128::from(seed_u64[1]) << 64);\n        let incr = u128::from(seed_u64[2]) | (u128::from(seed_u64[3]) << 64);\n        Self::from_state_incr(state, incr | 1)\n    }\n}\nimpl Lcg128CmDxsm64 {\n    #[inline]\n    pub fn advance(&mut self, delta: u128) {}\n    pub fn new(state: u128, stream: u128) -> Self {\n        let increment = (stream << 1) | 1;\n        Self::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u128, increment: u128) -> Self {\n        let mut pcg = Self { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline(always)]\n    fn step(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// We use a single 255-bit seed to initialise the state and select a stream.\n/// One `seed` bit (lowest bit of `seed[8]`) is ignored.\n133 fn from_seed(seed: Self::Seed) -> Self {\n134     let mut seed_u64 = [0u64; 4];\n135     le::read_u64_into(&seed, &mut seed_u64);\n136     let state = u128::from(seed_u64[0]) | (u128::from(seed_u64[1]) << 64);\n137     let incr = u128::from(seed_u64[2]) | (u128::from(seed_u64[3]) << 64);\n138 \n139     // The increment must be odd, hence we discard one bit:\n140     Self::from_state_incr(state, incr | 1)\n141 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}