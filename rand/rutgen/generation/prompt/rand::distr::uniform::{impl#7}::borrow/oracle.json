{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/uniform.rs\n// crate name is rand\npub use float::UniformFloat;\npub use int::{UniformInt, UniformUsize};\npub use other::{UniformChar, UniformDuration};\nuse core::fmt;\nuse core::ops::{Range, RangeInclusive, RangeTo, RangeToInclusive};\nuse crate::distr::Distribution;\nuse crate::{Rng, RngCore};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait SampleBorrow<Borrowed> {\n    fn borrow(&self) -> &Borrowed;\n}\npub trait Fill {\n    fn fill<R: Rng + ?Sized>(&mut self, rng: &mut R);\n}\ntrait UInt: Copy + PartialOrd + Ord + PartialEq + Eq + SampleUniform + Hash + AddAssign {\n    fn zero() -> Self;\n    #[cfg_attr(feature = \"alloc\", allow(dead_code))]\n    fn one() -> Self;\n    fn as_usize(self) -> usize;\n}\npub trait SliceRandom: IndexedMutRandom {\n    fn shuffle<R>(&mut self, rng: &mut R)\n    where\n        R: Rng + ?Sized;\n    fn partial_shuffle<R>(\n        &mut self,\n        rng: &mut R,\n        amount: usize,\n    ) -> (&mut [Self::Output], &mut [Self::Output])\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized;\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\npub trait IndexedRandom: Index<usize> {\n    fn len(&self) -> usize;\n    #[inline]\n    fn is_empty(&self) -> bool;\n    fn choose<R>(&self, rng: &mut R) -> Option<&Self::Output>\n    where\n        R: Rng + ?Sized,\n    {\n        if self.is_empty() { None } else { Some(&self[rng.random_range(..self.len())]) }\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_multiple<R>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n    ) -> SliceChooseIter<Self, Self::Output>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }\n    }\n    fn choose_multiple_array<R, const N: usize>(\n        &self,\n        rng: &mut R,\n    ) -> Option<[Self::Output; N]>\n    where\n        Self::Output: Clone + Sized,\n        R: Rng + ?Sized,\n    {\n        let indices = index::sample_array(rng, self.len())?;\n        Some(indices.map(|index| self[index].clone()))\n    }\n    #[cfg(feature = \"alloc\")]\n    fn choose_weighted<R, F, B, X>(\n        &self,\n        rng: &mut R,\n        weight: F,\n    ) -> Result<&Self::Output, WeightError>\n    where\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> B,\n        B: SampleBorrow<X>,\n        X: SampleUniform + Weight + PartialOrd<X>,\n    {\n        use crate::distr::{weighted::WeightedIndex, Distribution};\n        let distr = WeightedIndex::new((0..self.len()).map(|idx| weight(&self[idx])))?;\n        Ok(&self[distr.sample(rng)])\n    }\n    #[cfg(feature = \"std\")]\n    fn choose_multiple_weighted<R, F, X>(\n        &self,\n        rng: &mut R,\n        amount: usize,\n        weight: F,\n    ) -> Result<SliceChooseIter<Self, Self::Output>, WeightError>\n    where\n        Self::Output: Sized,\n        R: Rng + ?Sized,\n        F: Fn(&Self::Output) -> X,\n        X: Into<f64>,\n    {\n        let amount = core::cmp::min(amount, self.len());\n        Ok(SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample_weighted(\n                    rng,\n                    self.len(),\n                    |idx| weight(&self[idx]).into(),\n                    amount,\n                )?\n                .into_iter(),\n        })\n    }\n}\npub(crate) trait BoolAsSIMD: Sized {\n    fn any(self) -> bool;\n}\nimpl<Borrowed> SampleBorrow<Borrowed> for &Borrowed\nwhere\n    Borrowed: SampleUniform,\n{\n    #[inline(always)]\n    fn borrow(&self) -> &Borrowed {\n        self\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n413 fn borrow(&self) -> &Borrowed {\n414     self\n415 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}