{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/other.rs\n// crate name is rand\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::array;\nuse core::char;\nuse core::num::Wrapping;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::SampleString;\nuse crate::distr::{Distribution, StandardUniform, Uniform};\nuse crate::Rng;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::prelude::*;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::{LaneCount, MaskElement, SupportedLaneCount};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\n#[derive(Debug, Clone, Copy, Default)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Alphanumeric;\nimpl Distribution<u8> for Alphanumeric {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {\n        const RANGE: u32 = 26 + 26 + 10;\n        const GEN_ASCII_STR_CHARSET: &[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                abcdefghijklmnopqrstuvwxyz\\\n                0123456789\";\n        loop {\n            let var = rng.next_u32() >> (32 - 6);\n            if var < RANGE {\n                return GEN_ASCII_STR_CHARSET[var as usize];\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n137 fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {\n138     const RANGE: u32 = 26 + 26 + 10;\n139     const GEN_ASCII_STR_CHARSET: &[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n140             abcdefghijklmnopqrstuvwxyz\\\n141             0123456789\";\n142     // We can pick from 62 characters. This is so close to a power of 2, 64,\n143     // that we can do better than `Uniform`. Use a simple bitshift and\n144     // rejection sampling. We do not use a bitmask, because for small RNGs\n145     // the most significant bits are usually of higher quality.\n146     loop {\n147         let var = rng.next_u32() >> (32 - 6);\n148         if var < RANGE {\n149             return GEN_ASCII_STR_CHARSET[var as usize];\n150         }\n151     }\n152 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}