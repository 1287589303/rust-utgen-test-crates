{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/other.rs\n// crate name is rand\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\nuse core::array;\nuse core::char;\nuse core::num::Wrapping;\n#[cfg(feature = \"alloc\")]\nuse crate::distr::SampleString;\nuse crate::distr::{Distribution, StandardUniform, Uniform};\nuse crate::Rng;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::prelude::*;\n#[cfg(feature = \"simd_support\")]\nuse core::simd::{LaneCount, MaskElement, SupportedLaneCount};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\n#[derive(Debug, Clone, Copy, Default)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Alphanumeric;\nimpl Distribution<u8> for Alphanumeric {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {\n        const RANGE: u32 = 26 + 26 + 10;\n        const GEN_ASCII_STR_CHARSET: &[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n                abcdefghijklmnopqrstuvwxyz\\\n                0123456789\";\n        loop {\n            let var = rng.next_u32() >> (32 - 6);\n            if var < RANGE {\n                return GEN_ASCII_STR_CHARSET[var as usize];\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n137 fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {\n138     const RANGE: u32 = 26 + 26 + 10;\n139     const GEN_ASCII_STR_CHARSET: &[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\n140             abcdefghijklmnopqrstuvwxyz\\\n141             0123456789\";\n142     // We can pick from 62 characters. This is so close to a power of 2, 64,\n143     // that we can do better than `Uniform`. Use a simple bitshift and\n144     // rejection sampling. We do not use a bitmask, because for small RNGs\n145     // the most significant bits are usually of higher quality.\n146     loop {\n147         let var = rng.next_u32() >> (32 - 6);\n148         if var < RANGE {\n149             return GEN_ASCII_STR_CHARSET[var as usize];\n150         }\n151     }\n152 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}