{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_core/src/impls.rs\n// crate name is rand_core\nuse crate::RngCore;\npub(crate) trait Observable: Copy {\n    type Bytes: Sized + AsRef<[u8]>;\n    fn to_le_bytes(self) -> Self::Bytes;\n}\npub(crate) fn fill_via_chunks<T: Observable>(\n    src: &[T],\n    dest: &mut [u8],\n) -> (usize, usize) {\n    let size = core::mem::size_of::<T>();\n    let mut dest = dest.chunks_exact_mut(size);\n    let mut src = src.iter();\n    let zipped = dest.by_ref().zip(src.by_ref());\n    let num_chunks = zipped.len();\n    zipped.for_each(|(dest, src)| dest.copy_from_slice(src.to_le_bytes().as_ref()));\n    let byte_len = num_chunks * size;\n    if let Some(src) = src.next() {\n        let dest = dest.into_remainder();\n        let n = dest.len();\n        if n > 0 {\n            dest.copy_from_slice(&src.to_le_bytes().as_ref()[..n]);\n            return (num_chunks + 1, byte_len + n);\n        }\n    }\n    (num_chunks, byte_len)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Fill dest from src\n///\n/// Returns `(n, byte_len)`. `src[..n]` is consumed,\n/// `dest[..byte_len]` is filled. `src[n..]` and `dest[byte_len..]` are left\n/// unaltered.\n 78 pub(crate) fn fill_via_chunks<T: Observable>(src: &[T], dest: &mut [u8]) -> (usize, usize) {\n 79     let size = core::mem::size_of::<T>();\n 80 \n 81     // Always use little endian for portability of results.\n 82 \n 83     let mut dest = dest.chunks_exact_mut(size);\n 84     let mut src = src.iter();\n 85 \n 86     let zipped = dest.by_ref().zip(src.by_ref());\n 87     let num_chunks = zipped.len();\n 88     zipped.for_each(|(dest, src)| dest.copy_from_slice(src.to_le_bytes().as_ref()));\n 89 \n 90     let byte_len = num_chunks * size;\n 91     if let Some(src) = src.next() {\n 92         // We have consumed all full chunks of dest, but not src.\n 93         let dest = dest.into_remainder();\n 94         let n = dest.len();\n 95         if n > 0 {\n 96             dest.copy_from_slice(&src.to_le_bytes().as_ref()[..n]);\n 97             return (num_chunks + 1, byte_len + n);\n 98         }\n 99     }\n100     (num_chunks, byte_len)\n101 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}