{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/coin_flipper.rs\n// crate name is rand\nuse crate::RngCore;\npub(crate) struct CoinFlipper<R: RngCore> {\n    pub rng: R,\n    chunk: u32,\n    chunk_remaining: u32,\n}\nimpl<R: RngCore> CoinFlipper<R> {\n    pub fn new(rng: R) -> Self {\n        Self {\n            rng,\n            chunk: 0,\n            chunk_remaining: 0,\n        }\n    }\n    #[inline]\n    pub fn random_ratio_one_over(&mut self, d: usize) -> bool {}\n    #[inline]\n    fn random_ratio(&mut self, mut n: usize, d: usize) -> bool {}\n    fn flip_c_heads(&mut self, mut c: u32) -> bool {\n        debug_assert!(c <= 32);\n        loop {\n            let zeros = self.chunk.leading_zeros();\n            if zeros < c {\n                self.chunk = self.chunk.wrapping_shl(zeros + 1);\n                self.chunk_remaining = self.chunk_remaining.saturating_sub(zeros + 1);\n                return false;\n            } else {\n                if let Some(new_remaining) = self.chunk_remaining.checked_sub(c) {\n                    self.chunk_remaining = new_remaining;\n                    self.chunk <<= c;\n                    return true;\n                } else {\n                    c -= self.chunk_remaining;\n                    self.chunk = self.rng.next_u32();\n                    self.chunk_remaining = 32;\n                }\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// If the next `c` bits of randomness all represent heads, consume them, return true\n/// Otherwise return false and consume the number of heads plus one.\n/// Generates new bits of randomness when necessary (in 32 bit chunks)\n/// Has a 1 in 2 to the `c` chance of returning true\n/// `c` must be less than or equal to 32\n119 fn flip_c_heads(&mut self, mut c: u32) -> bool {\n120     debug_assert!(c <= 32);\n121     // Note that zeros on the left of the chunk represent heads.\n122     // It needs to be this way round because zeros are filled in when left shifting\n123     loop {\n124         let zeros = self.chunk.leading_zeros();\n125 \n126         if zeros < c {\n127             // The happy path - we found a 1 and can return false\n128             // Note that because a 1 bit was detected,\n129             // We cannot have run out of random bits so we don't need to check\n130 \n131             // First consume all of the bits read\n132             // Using shl seems to give worse performance for size-hinted iterators\n133             self.chunk = self.chunk.wrapping_shl(zeros + 1);\n134 \n135             self.chunk_remaining = self.chunk_remaining.saturating_sub(zeros + 1);\n136             return false;\n137         } else {\n138             // The number of zeros is larger than `c`\n139             // There are two possibilities\n140             if let Some(new_remaining) = self.chunk_remaining.checked_sub(c) {\n141                 // Those zeroes were all part of our random chunk,\n142                 // throw away `c` bits of randomness and return true\n143                 self.chunk_remaining = new_remaining;\n144                 self.chunk <<= c;\n145                 return true;\n146             } else {\n147                 // Some of those zeroes were part of the random chunk\n148                 // and some were part of the space behind it\n149                 // We need to take into account only the zeroes that were random\n150                 c -= self.chunk_remaining;\n151 \n152                 // Generate a new chunk\n153                 self.chunk = self.rng.next_u32();\n154                 self.chunk_remaining = 32;\n155                 // Go back to start of loop\n156             }\n157         }\n158     }\n159 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}