{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/rngs/small.rs\n// crate name is rand\n#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"16\"))]\ntype Rng = super::xoshiro128plusplus::Xoshiro128PlusPlus;\n#[cfg(target_pointer_width = \"64\")]\ntype Rng = super::xoshiro256plusplus::Xoshiro256PlusPlus;\nuse rand_core::{RngCore, SeedableRng};\npub trait Rng: RngCore {\n    #[inline]\n    fn random<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>\n    where\n        Self: Sized,\n        StandardUniform: Distribution<T>,\n    {\n        StandardUniform.sample_iter(self)\n    }\n    #[track_caller]\n    fn random_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[track_caller]\n    fn random_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[track_caller]\n    fn random_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n    fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T;\n    fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>\n    where\n        D: Distribution<T>,\n        Self: Sized,\n    {\n        distr.sample_iter(self)\n    }\n    #[track_caller]\n    fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T);\n    #[inline]\n    #[deprecated(\n        since = \"0.9.0\",\n        note = \"Renamed to `random` to avoid conflict with the new `gen` keyword in Rust 2024.\"\n    )]\n    fn r#gen<T>(&mut self) -> T\n    where\n        StandardUniform: Distribution<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_range`\")]\n    fn gen_range<T, R>(&mut self, range: R) -> T\n    where\n        T: SampleUniform,\n        R: SampleRange<T>;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_bool`\")]\n    fn gen_bool(&mut self, p: f64) -> bool;\n    #[inline]\n    #[deprecated(since = \"0.9.0\", note = \"Renamed to `random_ratio`\")]\n    fn gen_ratio(&mut self, numerator: u32, denominator: u32) -> bool;\n}\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct SmallRng(Rng);\n#[derive(Debug, Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Xoshiro256PlusPlus {\n    s: [u64; 4],\n}\nimpl SeedableRng for SmallRng {\n    type Seed = [u8; 32];\n    #[inline(always)]\n    fn from_seed(seed: Self::Seed) -> Self {\n        const LEN: usize = core::mem::size_of::<<Rng as SeedableRng>::Seed>();\n        let seed = (&seed[..LEN]).try_into().unwrap();\n        SmallRng(Rng::from_seed(seed))\n    }\n    #[inline(always)]\n    fn seed_from_u64(state: u64) -> Self {\n        SmallRng(Rng::seed_from_u64(state))\n    }\n}\nimpl SeedableRng for Xoshiro256PlusPlus {\n    type Seed = [u8; 32];\n    #[inline]\n    fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {\n        let mut state = [0; 4];\n        read_u64_into(&seed, &mut state);\n        if state.iter().all(|&x| x == 0) {\n            return Self::seed_from_u64(0);\n        }\n        Xoshiro256PlusPlus { s: state }\n    }\n    #[inline]\n    fn seed_from_u64(mut state: u64) -> Self {\n        const PHI: u64 = 0x9e3779b97f4a7c15;\n        let mut s = [0; 4];\n        for i in s.iter_mut() {\n            state = state.wrapping_add(PHI);\n            let mut z = state;\n            z = (z ^ (z >> 30)).wrapping_mul(0xbf58476d1ce4e5b9);\n            z = (z ^ (z >> 27)).wrapping_mul(0x94d049bb133111eb);\n            z = z ^ (z >> 31);\n            *i = z;\n        }\n        debug_assert_ne!(s, [0; 4]);\n        Xoshiro256PlusPlus { s }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n91 fn from_seed(seed: Self::Seed) -> Self {\n92     // This is for compatibility with 32-bit platforms where Rng::Seed has a different seed size\n93     // With MSRV >= 1.77: let seed = *seed.first_chunk().unwrap()\n94     const LEN: usize = core::mem::size_of::<<Rng as SeedableRng>::Seed>();\n95     let seed = (&seed[..LEN]).try_into().unwrap();\n96     SmallRng(Rng::from_seed(seed))\n97 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}