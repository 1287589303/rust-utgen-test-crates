{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/uniform.rs\n// crate name is rand\npub use float::UniformFloat;\npub use int::{UniformInt, UniformUsize};\npub use other::{UniformChar, UniformDuration};\nuse core::fmt;\nuse core::ops::{Range, RangeInclusive, RangeTo, RangeToInclusive};\nuse crate::distr::Distribution;\nuse crate::{Rng, RngCore};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\npub trait SampleUniform: Sized {\n    type Sampler: UniformSampler<X = Self>;\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\n#[cfg_attr(feature = \"serde\", serde(bound(serialize = \"X::Sampler: Serialize\")))]\n#[cfg_attr(\n    feature = \"serde\",\n    serde(bound(deserialize = \"X::Sampler: Deserialize<'de>\"))\n)]\npub struct Uniform<X: SampleUniform>(X::Sampler);\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<X: SampleUniform> Uniform<X> {\n    pub fn new<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n    where\n        B1: SampleBorrow<X> + Sized,\n        B2: SampleBorrow<X> + Sized,\n    {\n        X::Sampler::new(low, high).map(Uniform)\n    }\n    pub fn new_inclusive<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n    where\n        B1: SampleBorrow<X> + Sized,\n        B2: SampleBorrow<X> + Sized,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `Uniform` instance, which samples uniformly from the half\n/// open range `[low, high)` (excluding `high`).\n///\n/// For discrete types (e.g. integers), samples will always be strictly less\n/// than `high`. For (approximations of) continuous types (e.g. `f32`, `f64`),\n/// samples may equal `high` due to loss of precision but may not be\n/// greater than `high`.\n///\n/// Fails if `low >= high`, or if `low`, `high` or the range `high - low` is\n/// non-finite. In release mode, only the range is checked.\n233 pub fn new<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>\n234 where\n235     B1: SampleBorrow<X> + Sized,\n236     B2: SampleBorrow<X> + Sized,\n237 {\n238     X::Sampler::new(low, high).map(Uniform)\n239 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}