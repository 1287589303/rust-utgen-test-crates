{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg64.rs\n// crate name is rand_pcg\npub type Pcg32 = Lcg64Xsh32;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 6364136223846793005;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg64Xsh32 {\n    state: u64,\n    increment: u64,\n}\nimpl RngCore for Lcg64Xsh32 {\n    #[inline]\n    fn next_u32(&mut self) -> u32 {\n        let state = self.state;\n        self.step();\n        const ROTATE: u32 = 59;\n        const XSHIFT: u32 = 18;\n        const SPARE: u32 = 27;\n        let rot = (state >> ROTATE) as u32;\n        let xsh = (((state >> XSHIFT) ^ state) >> SPARE) as u32;\n        xsh.rotate_right(rot)\n    }\n    #[inline]\n    fn next_u64(&mut self) -> u64 {}\n    #[inline]\n    fn fill_bytes(&mut self, dest: &mut [u8]) {}\n}\nimpl Lcg64Xsh32 {\n    #[inline]\n    pub fn advance(&mut self, delta: u64) {}\n    pub fn new(state: u64, stream: u64) -> Self {\n        let increment = (stream << 1) | 1;\n        Lcg64Xsh32::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u64, increment: u64) -> Self {\n        let mut pcg = Lcg64Xsh32 { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline]\n    fn step(&mut self) {\n        self.state = self.state.wrapping_mul(MULTIPLIER).wrapping_add(self.increment);\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n140 fn next_u32(&mut self) -> u32 {\n141     let state = self.state;\n142     self.step();\n143 \n144     // Output function XSH RR: xorshift high (bits), followed by a random rotate\n145     // Constants are for 64-bit state, 32-bit output\n146     const ROTATE: u32 = 59; // 64 - 5\n147     const XSHIFT: u32 = 18; // (5 + 32) / 2\n148     const SPARE: u32 = 27; // 64 - 32 - 5\n149 \n150     let rot = (state >> ROTATE) as u32;\n151     let xsh = (((state >> XSHIFT) ^ state) >> SPARE) as u32;\n152     xsh.rotate_right(rot)\n153 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}