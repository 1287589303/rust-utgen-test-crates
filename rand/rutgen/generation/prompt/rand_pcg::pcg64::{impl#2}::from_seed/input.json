{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// rand_pcg/src/pcg64.rs\n// crate name is rand_pcg\npub type Pcg32 = Lcg64Xsh32;\nuse core::fmt;\nuse rand_core::{impls, le, RngCore, SeedableRng};\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst MULTIPLIER: u64 = 6364136223846793005;\n#[derive(Clone, PartialEq, Eq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Lcg64Xsh32 {\n    state: u64,\n    increment: u64,\n}\nimpl SeedableRng for Lcg64Xsh32 {\n    type Seed = [u8; 16];\n    fn from_seed(seed: Self::Seed) -> Self {\n        let mut seed_u64 = [0u64; 2];\n        le::read_u64_into(&seed, &mut seed_u64);\n        Lcg64Xsh32::from_state_incr(seed_u64[0], seed_u64[1] | 1)\n    }\n}\nimpl Lcg64Xsh32 {\n    #[inline]\n    pub fn advance(&mut self, delta: u64) {}\n    pub fn new(state: u64, stream: u64) -> Self {\n        let increment = (stream << 1) | 1;\n        Lcg64Xsh32::from_state_incr(state, increment)\n    }\n    #[inline]\n    fn from_state_incr(state: u64, increment: u64) -> Self {\n        let mut pcg = Lcg64Xsh32 { state, increment };\n        pcg.state = pcg.state.wrapping_add(pcg.increment);\n        pcg.step();\n        pcg\n    }\n    #[inline]\n    fn step(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// We use a single 127-bit seed to initialise the state and select a stream.\n/// One `seed` bit (lowest bit of `seed[8]`) is ignored.\n129 fn from_seed(seed: Self::Seed) -> Self {\n130     let mut seed_u64 = [0u64; 2];\n131     le::read_u64_into(&seed, &mut seed_u64);\n132 \n133     // The increment must be odd, hence we discard one bit:\n134     Lcg64Xsh32::from_state_incr(seed_u64[0], seed_u64[1] | 1)\n135 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}