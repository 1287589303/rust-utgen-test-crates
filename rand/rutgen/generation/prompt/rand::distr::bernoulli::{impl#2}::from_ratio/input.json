{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/bernoulli.rs\n// crate name is rand\nuse crate::distr::Distribution;\nuse crate::Rng;\nuse core::fmt;\n#[cfg(feature = \"serde\")]\nuse serde::{Deserialize, Serialize};\nconst ALWAYS_TRUE: u64 = u64::MAX;\nconst SCALE: f64 = 2.0 * (1u64 << 63) as f64;\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\n#[cfg_attr(feature = \"serde\", derive(Serialize, Deserialize))]\npub struct Bernoulli {\n    /// Probability of success, relative to the maximal integer.\n    p_int: u64,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum BernoulliError {\n    /// `p < 0` or `p > 1`.\n    InvalidProbability,\n}\nimpl Bernoulli {\n    #[inline]\n    pub fn new(p: f64) -> Result<Bernoulli, BernoulliError> {}\n    #[inline]\n    pub fn from_ratio(\n        numerator: u32,\n        denominator: u32,\n    ) -> Result<Bernoulli, BernoulliError> {\n        if numerator > denominator || denominator == 0 {\n            return Err(BernoulliError::InvalidProbability);\n        }\n        if numerator == denominator {\n            return Ok(Bernoulli { p_int: ALWAYS_TRUE });\n        }\n        let p_int = ((f64::from(numerator) / f64::from(denominator)) * SCALE) as u64;\n        Ok(Bernoulli { p_int })\n    }\n    #[inline]\n    pub fn p(&self) -> f64 {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Construct a new `Bernoulli` with the probability of success of\n/// `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n/// a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.\n///\n/// return `true`. If `numerator == 0` it will always return `false`.\n/// For `numerator > denominator` and `denominator == 0`, this returns an\n/// error. Otherwise, for `numerator == denominator`, samples are always\n/// true; for `numerator == 0` samples are always false.\n129 pub fn from_ratio(numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError> {\n130     if numerator > denominator || denominator == 0 {\n131         return Err(BernoulliError::InvalidProbability);\n132     }\n133     if numerator == denominator {\n134         return Ok(Bernoulli { p_int: ALWAYS_TRUE });\n135     }\n136     let p_int = ((f64::from(numerator) / f64::from(denominator)) * SCALE) as u64;\n137     Ok(Bernoulli { p_int })\n138 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}