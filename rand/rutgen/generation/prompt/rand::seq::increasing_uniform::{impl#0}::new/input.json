{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/seq/increasing_uniform.rs\n// crate name is rand\nuse crate::{Rng, RngCore};\npub(crate) struct IncreasingUniform<R: RngCore> {\n    pub rng: R,\n    n: u32,\n    chunk: u32,\n    chunk_remaining: u8,\n}\nimpl<R: RngCore> IncreasingUniform<R> {\n    pub fn new(rng: R, n: u32) -> Self {\n        let chunk_remaining = if n == 0 { 1 } else { 0 };\n        Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }\n    }\n    #[inline]\n    pub fn next_index(&mut self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a dice roller.\n/// The next item returned will be a random number in the range [0,n]\n24 pub fn new(rng: R, n: u32) -> Self {\n25     // If n = 0, the first number returned will always be 0\n26     // so we don't need to generate a random number\n27     let chunk_remaining = if n == 0 { 1 } else { 0 };\n28     Self {\n29         rng,\n30         n,\n31         chunk: 0,\n32         chunk_remaining,\n33     }\n34 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}