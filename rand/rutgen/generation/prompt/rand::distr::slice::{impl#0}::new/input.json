{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/distr/slice.rs\n// crate name is rand\nuse core::num::NonZeroUsize;\nuse crate::distr::uniform::{UniformSampler, UniformUsize};\nuse crate::distr::Distribution;\n#[cfg(feature = \"alloc\")]\nuse alloc::string::String;\n#[cfg(feature = \"alloc\")]\npub trait SampleString {\n    fn append_string<R: Rng + ?Sized>(\n        &self,\n        rng: &mut R,\n        string: &mut String,\n        len: usize,\n    );\n    #[inline]\n    fn sample_string<R: Rng + ?Sized>(&self, rng: &mut R, len: usize) -> String;\n}\npub trait Distribution<T> {\n    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> T;\n    fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>\n    where\n        R: Rng,\n        Self: Sized,\n    {\n        Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }\n    }\n    fn map<F, S>(self, func: F) -> Map<Self, F, T, S>\n    where\n        F: Fn(T) -> S,\n        Self: Sized,\n    {\n        Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }\n    }\n}\n#[derive(Debug, Clone, Copy)]\npub struct Choose<'a, T> {\n    slice: &'a [T],\n    range: UniformUsize,\n    num_choices: NonZeroUsize,\n}\n#[derive(Debug, Clone, Copy)]\npub struct Empty;\n#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub struct UniformUsize {\n    low: usize,\n    range: usize,\n    thresh: usize,\n    #[cfg(target_pointer_width = \"64\")]\n    mode64: bool,\n}\n#[derive(Clone, Copy, Debug, PartialEq, Eq)]\npub enum Error {\n    /// `low > high`, or equal in case of exclusive range.\n    EmptyRange,\n    /// Input or range `high - low` is non-finite. Not relevant to integer types.\n    NonFinite,\n}\nimpl<'a, T> Choose<'a, T> {\n    pub fn new(slice: &'a [T]) -> Result<Self, Empty> {\n        let num_choices = NonZeroUsize::new(slice.len()).ok_or(Empty)?;\n        Ok(Self {\n            slice,\n            range: UniformUsize::new(0, num_choices.get()).unwrap(),\n            num_choices,\n        })\n    }\n    pub fn num_choices(&self) -> NonZeroUsize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Create a new `Choose` instance which samples uniformly from the slice.\n///\n/// Returns error [`Empty`] if the slice is empty.\n69 pub fn new(slice: &'a [T]) -> Result<Self, Empty> {\n70     let num_choices = NonZeroUsize::new(slice.len()).ok_or(Empty)?;\n71 \n72     Ok(Self {\n73         slice,\n74         range: UniformUsize::new(0, num_choices.get()).unwrap(),\n75         num_choices,\n76     })\n77 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}