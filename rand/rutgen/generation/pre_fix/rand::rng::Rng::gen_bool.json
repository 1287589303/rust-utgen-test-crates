{
  "name": "rand::rng::Rng::gen_bool",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:345:5:347:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "p value range: [0.0, 1.0] including boundary values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(0.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(panic_has_occurred(|| rng.gen_bool(-0.1));",
                "    assert!(panic_has_occurred(|| rng.gen_bool(1.1));",
                "    result = rng.gen_bool(0.5);",
                "    assert!(result == true || result == false);",
                "    result = rng.gen_bool(1.0);",
                "    assert_eq!(result, true);",
                "    result = rng.gen_bool(0.0);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(0.0);",
                "    assert_eq!(result, false);",
                "    assert!(panic_has_occurred(|| rng.gen_bool(-0.1));",
                "    assert!(panic_has_occurred(|| rng.gen_bool(1.1));",
                "    result = rng.gen_bool(0.5);",
                "    assert!(result == true || result == false);",
                "    result = rng.gen_bool(1.0);",
                "    assert_eq!(result, true);",
                "    result = rng.gen_bool(0.0);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(0.5);",
                "}"
              ],
              "oracle": [
                "    assert!(result == true || result == false);",
                "    assert!(rng.gen_bool(0.0) == false);",
                "    assert!(rng.gen_bool(1.0) == true);",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(-0.1); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.1); }).is_err());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(0.5);",
                "    assert!(result == true || result == false);",
                "    assert!(rng.gen_bool(0.0) == false);",
                "    assert!(rng.gen_bool(1.0) == true);",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(-0.1); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.1); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(1.0);",
                "}"
              ],
              "oracle": [
                "    let rng = TestRng;",
                "    let result = rng.gen_bool(1.0);",
                "    assert!(result == true);",
                "    let result = rng.gen_bool(0.0);",
                "    assert!(result == false);",
                "    let result = std::panic::catch_unwind(|| rng.gen_bool(-0.1));",
                "    assert!(result.is_err());",
                "    let result = std::panic::catch_unwind(|| rng.gen_bool(1.1));",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(1.0);",
                "    let rng = TestRng;",
                "    let result = rng.gen_bool(1.0);",
                "    assert!(result == true);",
                "    let result = rng.gen_bool(0.0);",
                "    assert!(result == false);",
                "    let result = std::panic::catch_unwind(|| rng.gen_bool(-0.1));",
                "    assert!(result.is_err());",
                "    let result = std::panic::catch_unwind(|| rng.gen_bool(1.1));",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(-0.1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| { rng.gen_bool(-0.1); }).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.1); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(0.0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(0.5); }).is_ok());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.0); }).is_ok());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(-0.1);",
                "    assert_eq!(std::panic::catch_unwind(|| { rng.gen_bool(-0.1); }).is_err(), true);",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.1); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(0.0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(0.5); }).is_ok());",
                "    assert!(std::panic::catch_unwind(|| { rng.gen_bool(1.0); }).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(1.1);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| rng.gen_bool(1.1)).is_err());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        // Implement required methods for RngCore",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.gen_bool(1.1);",
                "    assert!(std::panic::catch_unwind(|| rng.gen_bool(1.1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}