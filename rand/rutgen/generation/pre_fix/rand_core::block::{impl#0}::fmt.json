{
  "name": "rand_core::block::{impl#0}::fmt",
  "mod_info": {
    "name": "block",
    "loc": "rand_core/src/lib.rs:43:1:43:15"
  },
  "visible": true,
  "loc": "rand_core/src/block.rs:135:5:141:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "RngCore implementation that returns values for next_u32 and next_u64; SeedableRng with a default Seed size; a non-empty results buffer for BlockRng; ensure index ranges from 0 to length of results (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng {",
                "        counter: u32,",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.counter += 1;",
                "            self.counter",
                "        }",
                "        ",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "        ",
                "        fn fill_bytes(&mut self, dst: &mut [u8]) {",
                "            for byte in dst.iter_mut() {",
                "                *byte = self.next_u32() as u8;",
                "            }",
                "        }",
                "    }",
                "",
                "    struct TestSeed([u8; 16]);",
                "",
                "    impl Default for TestSeed {",
                "        fn default() -> Self {",
                "            TestSeed([0; 16])",
                "        }",
                "    }",
                "",
                "    impl AsRef<[u8]> for TestSeed {",
                "        fn as_ref(&self) -> &[u8] {",
                "            &self.0",
                "        }",
                "    }",
                "",
                "    impl AsMut<[u8]> for TestSeed {",
                "        fn as_mut(&mut self) -> &mut [u8] {",
                "            &mut self.0",
                "        }",
                "    }",
                "",
                "    impl SeedableRng for TestRng {",
                "        type Seed = TestSeed;",
                "",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng { counter: 0 }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng { counter: 0 };",
                "    let mut results = [0u32; 10].as_mut();",
                "    let block_rng = BlockRng {",
                "        results,",
                "        index: 0,",
                "        core: rng,",
                "    };",
                "    ",
                "    let _ = format!(\"{:?}\", block_rng);",
                "}"
              ],
              "oracle": [
                "    let block_rng = BlockRng { results, index: 0, core: rng };",
                "    assert_eq!(block_rng.index, 0);",
                "    assert_eq!(block_rng.results.as_ref().len(), 10);",
                "    assert!(fmt::Debug::fmt(&block_rng.core, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(block_rng.results.as_mut()[0], 0);",
                "    format!(\"{:?}\", block_rng);"
              ],
              "code": [
                "{",
                "    struct TestRng {",
                "        counter: u32,",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.counter += 1;",
                "            self.counter",
                "        }",
                "        ",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "        ",
                "        fn fill_bytes(&mut self, dst: &mut [u8]) {",
                "            for byte in dst.iter_mut() {",
                "                *byte = self.next_u32() as u8;",
                "            }",
                "        }",
                "    }",
                "",
                "    struct TestSeed([u8; 16]);",
                "",
                "    impl Default for TestSeed {",
                "        fn default() -> Self {",
                "            TestSeed([0; 16])",
                "        }",
                "    }",
                "",
                "    impl AsRef<[u8]> for TestSeed {",
                "        fn as_ref(&self) -> &[u8] {",
                "            &self.0",
                "        }",
                "    }",
                "",
                "    impl AsMut<[u8]> for TestSeed {",
                "        fn as_mut(&mut self) -> &mut [u8] {",
                "            &mut self.0",
                "        }",
                "    }",
                "",
                "    impl SeedableRng for TestRng {",
                "        type Seed = TestSeed;",
                "",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng { counter: 0 }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng { counter: 0 };",
                "    let mut results = [0u32; 10].as_mut();",
                "    let block_rng = BlockRng {",
                "        results,",
                "        index: 0,",
                "        core: rng,",
                "    };",
                "    ",
                "    let _ = format!(\"{:?}\", block_rng);",
                "    let block_rng = BlockRng { results, index: 0, core: rng };",
                "    assert_eq!(block_rng.index, 0);",
                "    assert_eq!(block_rng.results.as_ref().len(), 10);",
                "    assert!(fmt::Debug::fmt(&block_rng.core, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(block_rng.results.as_mut()[0], 0);",
                "    format!(\"{:?}\", block_rng);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng {",
                "        counter: u32,",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.counter += 1;",
                "            self.counter",
                "        }",
                "        ",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "        ",
                "        fn fill_bytes(&mut self, dst: &mut [u8]) {",
                "            for byte in dst.iter_mut() {",
                "                *byte = self.next_u32() as u8;",
                "            }",
                "        }",
                "    }",
                "",
                "    struct TestSeed([u8; 16]);",
                "",
                "    impl Default for TestSeed {",
                "        fn default() -> Self {",
                "            TestSeed([0; 16])",
                "        }",
                "    }",
                "",
                "    impl AsRef<[u8]> for TestSeed {",
                "        fn as_ref(&self) -> &[u8] {",
                "            &self.0",
                "        }",
                "    }",
                "",
                "    impl AsMut<[u8]> for TestSeed {",
                "        fn as_mut(&mut self) -> &mut [u8] {",
                "            &mut self.0",
                "        }",
                "    }",
                "",
                "    impl SeedableRng for TestRng {",
                "        type Seed = TestSeed;",
                "",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng { counter: 0 }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng { counter: 0 };",
                "    let mut results = [0u32; 10].as_mut();",
                "    let mut block_rng = BlockRng {",
                "        results,",
                "        index: 5,",
                "        core: rng,",
                "    };",
                "",
                "    let _ = format!(\"{:?}\", block_rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(block_rng.index, 5);",
                "    assert_eq!(block_rng.results.as_ref().len(), 10);",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"BlockRng\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"index\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"core\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"result_len\"));",
                "    assert_eq!(block_rng.core.next_u32(), 1);",
                "    block_rng.core.fill_bytes(&mut [0u8; 4]);",
                "    assert!(block_rng.results.as_mut()[0] == 1);",
                "    assert!(block_rng.results.as_mut()[1] == 2);",
                "    block_rng.index = 0;",
                "    assert!(block_rng.index < block_rng.results.as_ref().len());"
              ],
              "code": [
                "{",
                "    struct TestRng {",
                "        counter: u32,",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.counter += 1;",
                "            self.counter",
                "        }",
                "        ",
                "        fn next_u64(&mut self) -> u64 {",
                "            (self.next_u32() as u64) << 32 | (self.next_u32() as u64)",
                "        }",
                "        ",
                "        fn fill_bytes(&mut self, dst: &mut [u8]) {",
                "            for byte in dst.iter_mut() {",
                "                *byte = self.next_u32() as u8;",
                "            }",
                "        }",
                "    }",
                "",
                "    struct TestSeed([u8; 16]);",
                "",
                "    impl Default for TestSeed {",
                "        fn default() -> Self {",
                "            TestSeed([0; 16])",
                "        }",
                "    }",
                "",
                "    impl AsRef<[u8]> for TestSeed {",
                "        fn as_ref(&self) -> &[u8] {",
                "            &self.0",
                "        }",
                "    }",
                "",
                "    impl AsMut<[u8]> for TestSeed {",
                "        fn as_mut(&mut self) -> &mut [u8] {",
                "            &mut self.0",
                "        }",
                "    }",
                "",
                "    impl SeedableRng for TestRng {",
                "        type Seed = TestSeed;",
                "",
                "        fn from_seed(seed: Self::Seed) -> Self {",
                "            TestRng { counter: 0 }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng { counter: 0 };",
                "    let mut results = [0u32; 10].as_mut();",
                "    let mut block_rng = BlockRng {",
                "        results,",
                "        index: 5,",
                "        core: rng,",
                "    };",
                "",
                "    let _ = format!(\"{:?}\", block_rng);",
                "    assert_eq!(block_rng.index, 5);",
                "    assert_eq!(block_rng.results.as_ref().len(), 10);",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"BlockRng\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"index\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"core\"));",
                "    assert!(format!(\"{:?}\", block_rng).contains(\"result_len\"));",
                "    assert_eq!(block_rng.core.next_u32(), 1);",
                "    block_rng.core.fill_bytes(&mut [0u8; 4]);",
                "    assert!(block_rng.results.as_mut()[0] == 1);",
                "    assert!(block_rng.results.as_mut()[1] == 2);",
                "    block_rng.index = 0;",
                "    assert!(block_rng.index < block_rng.results.as_ref().len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}