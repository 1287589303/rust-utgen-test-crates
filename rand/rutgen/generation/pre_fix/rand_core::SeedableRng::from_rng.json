{
  "name": "rand_core::SeedableRng::from_rng",
  "mod_info": {
    "name": "",
    "loc": "rand_core/src/lib.rs:10:1:771:2"
  },
  "visible": true,
  "loc": "rand_core/src/lib.rs:521:5:525:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "- Test with a valid RngCore implementation that provides sufficient randomness, including both cryptographic and non-cryptographic RNGs; also include tests with an empty or a null RngCore instance to check for error handling or edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng {",
                "        state: u64,",
                "    }",
                "",
                "    impl TestRng {",
                "        pub fn new(seed: u64) -> Self {",
                "            Self { state: seed }",
                "        }",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state = self.state.wrapping_mul(1103515245).wrapping_add(12345) % (1 << 31);",
                "            self.state as u32",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            self.state = self.state.wrapping_mul(1103515245).wrapping_add(12345) % (1 << 63);",
                "            self.state",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self { state: self.state }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng::new(12345);",
                "    let result = MyRng::from_rng(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_valid());",
                "    assert_eq!(result.get_seed(), expected_seed);",
                "    assert_ne!(result.clone(), MyRng::from_rng(&mut rng));",
                "    assert_eq!(result.next_u32(), expected_value);",
                "    assert_eq!(result.next_u64(), expected_value_64);",
                "    assert!(result.is_deterministic_with_rng(&rng));",
                "    assert!(result.is_reproducible(12345));",
                "    assert_ne!(result, MyRng::from_rng(&mut TestRng::new(67890)));",
                "    assert!(result.from_rng(&mut another_rng).is_ok());",
                "    assert_eq!(result.try_from_rng(&mut rng), Ok(expected_result));"
              ],
              "code": [
                "{",
                "    struct TestRng {",
                "        state: u64,",
                "    }",
                "",
                "    impl TestRng {",
                "        pub fn new(seed: u64) -> Self {",
                "            Self { state: seed }",
                "        }",
                "    }",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            self.state = self.state.wrapping_mul(1103515245).wrapping_add(12345) % (1 << 31);",
                "            self.state as u32",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            self.state = self.state.wrapping_mul(1103515245).wrapping_add(12345) % (1 << 63);",
                "            self.state",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = (self.next_u32() % 256) as u8;",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self { state: self.state }",
                "        }",
                "    }",
                "",
                "    let mut rng = TestRng::new(12345);",
                "    let result = MyRng::from_rng(&mut rng);",
                "    assert!(result.is_valid());",
                "    assert_eq!(result.get_seed(), expected_seed);",
                "    assert_ne!(result.clone(), MyRng::from_rng(&mut rng));",
                "    assert_eq!(result.next_u32(), expected_value);",
                "    assert_eq!(result.next_u64(), expected_value_64);",
                "    assert!(result.is_deterministic_with_rng(&rng));",
                "    assert!(result.is_reproducible(12345));",
                "    assert_ne!(result, MyRng::from_rng(&mut TestRng::new(67890)));",
                "    assert!(result.from_rng(&mut another_rng).is_ok());",
                "    assert_eq!(result.try_from_rng(&mut rng), Ok(expected_result));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct NonCryptoRng;",
                "",
                "    impl RngCore for NonCryptoRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            42 // Fixed output for predictability in tests",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            42 // Fixed output for predictability in tests",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0; // Filling with zeroes",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self",
                "        }",
                "    }",
                "",
                "    let mut rng = NonCryptoRng;",
                "    let result = MyRng::from_rng(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.next_u32(), 42);",
                "    assert_eq!(result.next_u64(), 42);",
                "    assert!(result.fill_bytes(&mut [0; 4]).is_ok());",
                "    assert!(result.try_fill_bytes(&mut [0; 4]).is_ok());",
                "    assert!(result.clone().is_some());"
              ],
              "code": [
                "{",
                "    struct NonCryptoRng;",
                "",
                "    impl RngCore for NonCryptoRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            42 // Fixed output for predictability in tests",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            42 // Fixed output for predictability in tests",
                "        }",
                "",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0; // Filling with zeroes",
                "            }",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Error> {",
                "            self.fill_bytes(dest);",
                "            Ok(())",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self",
                "        }",
                "    }",
                "",
                "    let mut rng = NonCryptoRng;",
                "    let result = MyRng::from_rng(&mut rng);",
                "    assert_eq!(result.next_u32(), 42);",
                "    assert_eq!(result.next_u64(), 42);",
                "    assert!(result.fill_bytes(&mut [0; 4]).is_ok());",
                "    assert!(result.try_fill_bytes(&mut [0; 4]).is_ok());",
                "    assert!(result.clone().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyRng;",
                "",
                "    impl RngCore for EmptyRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0 // Always return 0",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            0 // Always return 0",
                "        }",
                "",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {",
                "            // Do nothing",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), Error> {",
                "            Ok(()) // Succeed but do nothing",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self",
                "        }",
                "    }",
                "",
                "    let mut rng = EmptyRng;",
                "    let result = MyRng::from_rng(&mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.seed(), expected_seed_value);",
                "    assert!(result.is_deterministic());",
                "    assert!(result.quality() >= minimum_quality_threshold);",
                "    assert_eq!(result.generate_random_u32(), default_value);",
                "    assert_eq!(result.generate_random_u64(), default_value);",
                "    assert_eq!(result.fill_bytes(&mut [0; 16]), Ok(()));",
                "    assert_eq!(result.try_fill_bytes(&mut [0; 16]), Ok(()));"
              ],
              "code": [
                "{",
                "    struct EmptyRng;",
                "",
                "    impl RngCore for EmptyRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0 // Always return 0",
                "        }",
                "",
                "        fn next_u64(&mut self) -> u64 {",
                "            0 // Always return 0",
                "        }",
                "",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {",
                "            // Do nothing",
                "        }",
                "",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), Error> {",
                "            Ok(()) // Succeed but do nothing",
                "        }",
                "",
                "        fn clone(&self) -> Self {",
                "            Self",
                "        }",
                "    }",
                "",
                "    let mut rng = EmptyRng;",
                "    let result = MyRng::from_rng(&mut rng);",
                "    assert_eq!(result.seed(), expected_seed_value);",
                "    assert!(result.is_deterministic());",
                "    assert!(result.quality() >= minimum_quality_threshold);",
                "    assert_eq!(result.generate_random_u32(), default_value);",
                "    assert_eq!(result.generate_random_u64(), default_value);",
                "    assert_eq!(result.fill_bytes(&mut [0; 16]), Ok(()));",
                "    assert_eq!(result.try_fill_bytes(&mut [0; 16]), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}