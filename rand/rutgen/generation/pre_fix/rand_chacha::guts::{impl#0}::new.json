{
  "name": "rand_chacha::guts::{impl#0}::new",
  "mod_info": {
    "name": "guts",
    "loc": "rand_chacha/src/lib.rs:97:1:97:10"
  },
  "visible": true,
  "loc": "rand_chacha/src/guts.rs:74:5:76:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "key: [u8; 32] filled with valid bytes (0-255); nonce: non-empty slice with length > 0 and <= 12 bytes\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key: [u8; 32] = [1; 32];",
                "    let nonce: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_chacha.b, expected_b_value);",
                "    assert_eq!(_chacha.c, expected_c_value);",
                "    assert_eq!(_chacha.d, expected_d_value);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce_value);",
                "    assert_eq!(_chacha.get_seed(), expected_seed_value);"
              ],
              "code": [
                "{",
                "    let key: [u8; 32] = [1; 32];",
                "    let nonce: &[u8] = &[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "    assert_eq!(_chacha.b, expected_b_value);",
                "    assert_eq!(_chacha.c, expected_c_value);",
                "    assert_eq!(_chacha.d, expected_d_value);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce_value);",
                "    assert_eq!(_chacha.get_seed(), expected_seed_value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key: [u8; 32] = [255; 32];",
                "    let nonce: &[u8] = &[0];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_chacha.b, expected_b_value);",
                "    assert_eq!(_chacha.c, expected_c_value);",
                "    assert_eq!(_chacha.d, expected_d_value);",
                "    assert_eq!(_chacha.get_block_pos(), expected_block_pos);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce);",
                "    assert_eq!(_chacha.get_seed(), expected_seed);"
              ],
              "code": [
                "{",
                "    let key: [u8; 32] = [255; 32];",
                "    let nonce: &[u8] = &[0];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "    assert_eq!(_chacha.b, expected_b_value);",
                "    assert_eq!(_chacha.c, expected_c_value);",
                "    assert_eq!(_chacha.d, expected_d_value);",
                "    assert_eq!(_chacha.get_block_pos(), expected_block_pos);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce);",
                "    assert_eq!(_chacha.get_seed(), expected_seed);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key: [u8; 32] = [0; 32];",
                "    let nonce: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_chacha.b, expected_b);",
                "    assert_eq!(_chacha.c, expected_c);",
                "    assert_eq!(_chacha.d, expected_d);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce);",
                "    assert_eq!(_chacha.get_seed(), expected_seed);"
              ],
              "code": [
                "{",
                "    let key: [u8; 32] = [0; 32];",
                "    let nonce: &[u8] = &[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];",
                "    let _chacha = ChaCha::new(&key, nonce);",
                "    assert_eq!(_chacha.b, expected_b);",
                "    assert_eq!(_chacha.c, expected_c);",
                "    assert_eq!(_chacha.d, expected_d);",
                "    assert_eq!(_chacha.get_nonce(), expected_nonce);",
                "    assert_eq!(_chacha.get_seed(), expected_seed);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}