{
  "name": "rand_pcg::pcg128::{impl#5}::fmt",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:223:5:225:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "state: any valid u128 value; f: any mutable reference to a fmt::Formatter; expected return: fmt::Result (Ok or Err)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 0 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");"
              ],
              "code": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 0 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 1u128 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.error().is_none());",
                "    assert!(formatter.is_fmt_joined());",
                "    assert!(formatter.has_value());",
                "    assert_eq!(rng.state, 1u128);"
              ],
              "code": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 1u128 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.error().is_none());",
                "    assert!(formatter.is_fmt_joined());",
                "    assert!(formatter.has_value());",
                "    assert_eq!(rng.state, 1u128);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Mcg128Xsl64 { state: u128::MIN };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.buffer().to_string(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(formatter.overflowed() == false);",
                "    assert!(formatter.debugging() == false);",
                "    assert!(rng.state == u128::MIN);"
              ],
              "code": [
                "{",
                "    let rng = Mcg128Xsl64 { state: u128::MIN };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.buffer().to_string(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(formatter.overflowed() == false);",
                "    assert!(formatter.debugging() == false);",
                "    assert!(rng.state == u128::MIN);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Mcg128Xsl64 { state: u128::MAX };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");"
              ],
              "code": [
                "{",
                "    let rng = Mcg128Xsl64 { state: u128::MAX };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 0x1234_5678_9abc_def0_1234_5678_9abc_def0 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.buffer(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_write_successful());",
                "    assert!(formatter.availability_check());",
                "    assert!(formatter.formatting_state() == expected_state);"
              ],
              "code": [
                "{",
                "    let rng = Mcg128Xsl64 { state: 0x1234_5678_9abc_def0_1234_5678_9abc_def0 };",
                "    let mut formatter = fmt::Formatter::new();",
                "    rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.buffer(), \"Mcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_write_successful());",
                "    assert!(formatter.availability_check());",
                "    assert!(formatter.formatting_state() == expected_state);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}