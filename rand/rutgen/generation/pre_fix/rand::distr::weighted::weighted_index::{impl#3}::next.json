{
  "name": "rand::distr::weighted::weighted_index::{impl#3}::next",
  "mod_info": {
    "name": "distr::weighted::weighted_index",
    "loc": "src/distr/weighted/mod.rs:18:1:18:20"
  },
  "visible": true,
  "loc": "src/distr/weighted/weighted_index.rs:280:5:288:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.weighted_index.weight(self.index) matches Some(weight) at line 281 is true\n",
        "expected return value/type: Some(weight)\n"
      ],
      "input_infer": "self.index values in the range [0, cumulative_weights.len()], where cumulative_weights is non-empty and contains valid SampleUniform type values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.index, 1);",
                "    assert_eq!(iter.weighted_index.weight(0), Some(SampleValue));",
                "    assert_eq!(iter.next(), Some(SampleValue));"
              ],
              "code": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 0,",
                "    };",
                "",
                "    iter.next();",
                "    assert_eq!(iter.index, 1);",
                "    assert_eq!(iter.weighted_index.weight(0), Some(SampleValue));",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 1,",
                "    };",
                "",
                "    iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.index, 2);",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.next(), None);"
              ],
              "code": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 1,",
                "    };",
                "",
                "    iter.next();",
                "    assert_eq!(iter.index, 2);",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 2,",
                "    };",
                "",
                "    iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.index, 3);"
              ],
              "code": [
                "{",
                "    struct SampleValue;",
                "    impl SampleUniform for SampleValue {",
                "        type Sampler = ();",
                "    }",
                "    ",
                "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
                "    let total_weight = SampleValue;",
                "    let weight_distribution = ();",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 2,",
                "    };",
                "",
                "    iter.next();",
                "    assert_eq!(iter.next(), Some(SampleValue));",
                "    assert_eq!(iter.index, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.weighted_index.weight(self.index) matches None at line 281 is true\n",
        "precondition: self.weighted_index.weight(self.index) matches None at line 281 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.index should be greater than or equal to the length of self.weighted_index.cumulative_weights\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = SampleType;",
                "    }",
                "",
                "    let cumulative_weights = vec![1, 2, 3]; // Sample weights",
                "    let total_weight = 6; // Total weight",
                "    let sampler = SampleType;",
                "",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution: sampler,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 3, // Index out of bounds since there are only 3 cumulative weights",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = SampleType;",
                "    }",
                "",
                "    let cumulative_weights = vec![1, 2, 3]; // Sample weights",
                "    let total_weight = 6; // Total weight",
                "    let sampler = SampleType;",
                "",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution: sampler,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 3, // Index out of bounds since there are only 3 cumulative weights",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = SampleType;",
                "    }",
                "",
                "    let cumulative_weights = vec![5, 10, 15]; // Sample weights",
                "    let total_weight = 30; // Total weight",
                "    let sampler = SampleType;",
                "",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution: sampler,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 4, // Index exceeds the bounds of cumulative_weights",
                "    };",
                "",
                "    let result = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct SampleType;",
                "    ",
                "    impl SampleUniform for SampleType {",
                "        type Sampler = SampleType;",
                "    }",
                "",
                "    let cumulative_weights = vec![5, 10, 15]; // Sample weights",
                "    let total_weight = 30; // Total weight",
                "    let sampler = SampleType;",
                "",
                "    let weighted_index = WeightedIndex {",
                "        cumulative_weights,",
                "        total_weight,",
                "        weight_distribution: sampler,",
                "    };",
                "    ",
                "    let mut iter = WeightedIndexIter {",
                "        weighted_index: &weighted_index,",
                "        index: 4, // Index exceeds the bounds of cumulative_weights",
                "    };",
                "",
                "    let result = iter.next();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}