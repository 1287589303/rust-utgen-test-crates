{
  "name": "rand::distr::uniform::UniformSampler::sample_single",
  "mod_info": {
    "name": "distr::uniform",
    "loc": "src/distr/mod.rs:101:1:101:17"
  },
  "visible": true,
  "loc": "src/distr/uniform.rs:337:5:348:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: UniformSampler::new(low, high)? at line 346 is Err/None\n"
      ],
      "input_infer": "low is greater than high, low and high are non-finite numbers, or low and high are equal; for inclusive case, low is equal to high\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 5;",
                "    let high = 3;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::EmptyRange);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 5;",
                "    let high = 3;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = f32::NAN;",
                "    let high = 3.0;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::NonFinite);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = f32::NAN;",
                "    let high = 3.0;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 1.0;",
                "    let high = f32::NAN;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
                "    assert_eq!(result, Err(Error::NonFinite));",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(Error::NonFinite)));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.as_ref().err(), Some(&Error::NonFinite));"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 1.0;",
                "    let high = f32::NAN;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert_eq!(result.is_err(), true);",
                "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
                "    assert_eq!(result, Err(Error::NonFinite));",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(Error::NonFinite)));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.as_ref().err(), Some(&Error::NonFinite));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 4;",
                "    let high = 4;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    let result = <UniformInt as UniformSampler>::sample_single(4, 4, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformFloat as UniformSampler>::sample_single(3.5, 3.5, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformChar as UniformSampler>::sample_single('a', 'a', &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformDuration as UniformSampler>::sample_single(Duration::from_secs(5), Duration::from_secs(5), &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformUsize as UniformSampler>::sample_single(10_usize, 10_usize, &mut rng); assert_eq!(result, Err(Error::EmptyRange));"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 4;",
                "    let high = 4;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "    let result = <UniformInt as UniformSampler>::sample_single(4, 4, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformFloat as UniformSampler>::sample_single(3.5, 3.5, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformChar as UniformSampler>::sample_single('a', 'a', &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformDuration as UniformSampler>::sample_single(Duration::from_secs(5), Duration::from_secs(5), &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "    let result = <UniformUsize as UniformSampler>::sample_single(10_usize, 10_usize, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 2.0;",
                "    let high = 2.0;",
                "    let result = <UniformFloat as UniformSampler>::sample_single_inclusive(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::EmptyRange);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    let low = 2.0;",
                "    let high = 2.0;",
                "    let result = <UniformFloat as UniformSampler>::sample_single_inclusive(low, high, &mut rng);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: UniformSampler::new(low, high)? at line 346 is Ok/Some\n",
        "expected return value/type: Ok(uniform.sample(rng))\n"
      ],
      "input_infer": "low and high must be finite values, low < high for exclusive ranges; for boundary tests, use examples like low = 0, high = 1, low = -(10^6), high = 10^6, low = f32::MIN, high = f32::MAX. Each should be tested with a valid Rng instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = 0;",
                "    let high = 10;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low);",
                "    assert!(sampled_value < high);",
                "    ",
                "    let low_float = 0.0;",
                "    let high_float = 10.0;",
                "    let float_result = <UniformFloat as UniformSampler>::sample_single(low_float, high_float, &mut rng);",
                "    assert!(float_result.is_ok());",
                "    let sampled_float_value = float_result.unwrap();",
                "    assert!(sampled_float_value >= low_float);",
                "    assert!(sampled_float_value <= high_float);",
                "    ",
                "    let low_inclusive = 0;",
                "    let high_inclusive = 10;",
                "    let inclusive_result = <UniformInt as UniformSampler>::sample_single_inclusive(low_inclusive, high_inclusive, &mut rng);",
                "    assert!(inclusive_result.is_ok());",
                "    let sampled_inclusive_value = inclusive_result.unwrap();",
                "    assert!(sampled_inclusive_value >= low_inclusive);",
                "    assert!(sampled_inclusive_value <= high_inclusive);",
                "    ",
                "    let empty_range_result = <UniformInt as UniformSampler>::sample_single(10, 10, &mut rng);",
                "    assert!(empty_range_result.is_err());",
                "    assert_eq!(empty_range_result.err(), Some(Error::EmptyRange));",
                "    ",
                "    let non_finite_result = <UniformFloat as UniformSampler>::sample_single(std::f32::NAN, std::f32::INFINITY, &mut rng);",
                "    assert!(non_finite_result.is_err());",
                "    assert_eq!(non_finite_result.err(), Some(Error::NonFinite));",
                "    ",
                "    let negative_range_result = <UniformInt as UniformSampler>::sample_single(10, 5, &mut rng);",
                "    assert!(negative_range_result.is_err());",
                "    assert_eq!(negative_range_result.err(), Some(Error::EmptyRange));"
              ],
              "code": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = 0;",
                "    let high = 10;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low);",
                "    assert!(sampled_value < high);",
                "    ",
                "    let low_float = 0.0;",
                "    let high_float = 10.0;",
                "    let float_result = <UniformFloat as UniformSampler>::sample_single(low_float, high_float, &mut rng);",
                "    assert!(float_result.is_ok());",
                "    let sampled_float_value = float_result.unwrap();",
                "    assert!(sampled_float_value >= low_float);",
                "    assert!(sampled_float_value <= high_float);",
                "    ",
                "    let low_inclusive = 0;",
                "    let high_inclusive = 10;",
                "    let inclusive_result = <UniformInt as UniformSampler>::sample_single_inclusive(low_inclusive, high_inclusive, &mut rng);",
                "    assert!(inclusive_result.is_ok());",
                "    let sampled_inclusive_value = inclusive_result.unwrap();",
                "    assert!(sampled_inclusive_value >= low_inclusive);",
                "    assert!(sampled_inclusive_value <= high_inclusive);",
                "    ",
                "    let empty_range_result = <UniformInt as UniformSampler>::sample_single(10, 10, &mut rng);",
                "    assert!(empty_range_result.is_err());",
                "    assert_eq!(empty_range_result.err(), Some(Error::EmptyRange));",
                "    ",
                "    let non_finite_result = <UniformFloat as UniformSampler>::sample_single(std::f32::NAN, std::f32::INFINITY, &mut rng);",
                "    assert!(non_finite_result.is_err());",
                "    assert_eq!(non_finite_result.err(), Some(Error::NonFinite));",
                "    ",
                "    let negative_range_result = <UniformInt as UniformSampler>::sample_single(10, 5, &mut rng);",
                "    assert!(negative_range_result.is_err());",
                "    assert_eq!(negative_range_result.err(), Some(Error::EmptyRange));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = -10;",
                "    let high = 0;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low && sampled_value < high);"
              ],
              "code": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = -10;",
                "    let high = 0;",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert_eq!(result.is_ok(), true);",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low && sampled_value < high);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = 0.0_f32;",
                "    let high = 1.0_f32;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low && sampled_value < high);"
              ],
              "code": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = 0.0_f32;",
                "    let high = 1.0_f32;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= low && sampled_value < high);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = f64::MIN;",
                "    let high = f64::MAX;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= f64::MIN);",
                "    assert!(sampled_value < f64::MAX);",
                "    assert!(sampled_value.is_finite());"
              ],
              "code": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = f64::MIN;",
                "    let high = f64::MAX;",
                "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_ok());",
                "    let sampled_value = result.unwrap();",
                "    assert!(sampled_value >= f64::MIN);",
                "    assert!(sampled_value < f64::MAX);",
                "    assert!(sampled_value.is_finite());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = -(10i32.pow(6));",
                "    let high = 10i32.pow(6);",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert!(result.as_ref().unwrap() >= &low);",
                "    assert!(result.as_ref().unwrap() < &high);",
                "    ",
                "    let low_f = f32::MIN;",
                "    let high_f = f32::MAX;",
                "    let result_f = <UniformFloat as UniformSampler>::sample_single(low_f, high_f, &mut rng);",
                "    assert!(result_f.is_ok());",
                "    assert!(result_f.as_ref().unwrap() >= &low_f);",
                "    assert!(result_f.as_ref().unwrap() <= &high_f);",
                "    ",
                "    let low_char = 'a';",
                "    let high_char = 'z';",
                "    let result_char = <UniformChar as UniformSampler>::sample_single(low_char, high_char, &mut rng);",
                "    assert!(result_char.is_ok());",
                "    assert!(result_char.as_ref().unwrap() >= &low_char);",
                "    assert!(result_char.as_ref().unwrap() < &high_char);",
                "    ",
                "    let low_usize = 0usize;",
                "    let high_usize = 100usize;",
                "    let result_usize = <UniformUsize as UniformSampler>::sample_single(low_usize, high_usize, &mut rng);",
                "    assert!(result_usize.is_ok());",
                "    assert!(result_usize.as_ref().unwrap() >= &low_usize);",
                "    assert!(result_usize.as_ref().unwrap() < &high_usize);"
              ],
              "code": [
                "{",
                "    struct DummyRng;",
                "    impl Rng for DummyRng {",
                "        // Implement necessary methods for DummyRng",
                "    }",
                "    ",
                "    let mut rng = DummyRng;",
                "    let low = -(10i32.pow(6));",
                "    let high = 10i32.pow(6);",
                "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
                "    assert!(result.is_ok());",
                "    assert!(result.as_ref().unwrap() >= &low);",
                "    assert!(result.as_ref().unwrap() < &high);",
                "    ",
                "    let low_f = f32::MIN;",
                "    let high_f = f32::MAX;",
                "    let result_f = <UniformFloat as UniformSampler>::sample_single(low_f, high_f, &mut rng);",
                "    assert!(result_f.is_ok());",
                "    assert!(result_f.as_ref().unwrap() >= &low_f);",
                "    assert!(result_f.as_ref().unwrap() <= &high_f);",
                "    ",
                "    let low_char = 'a';",
                "    let high_char = 'z';",
                "    let result_char = <UniformChar as UniformSampler>::sample_single(low_char, high_char, &mut rng);",
                "    assert!(result_char.is_ok());",
                "    assert!(result_char.as_ref().unwrap() >= &low_char);",
                "    assert!(result_char.as_ref().unwrap() < &high_char);",
                "    ",
                "    let low_usize = 0usize;",
                "    let high_usize = 100usize;",
                "    let result_usize = <UniformUsize as UniformSampler>::sample_single(low_usize, high_usize, &mut rng);",
                "    assert!(result_usize.is_ok());",
                "    assert!(result_usize.as_ref().unwrap() >= &low_usize);",
                "    assert!(result_usize.as_ref().unwrap() < &high_usize);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}