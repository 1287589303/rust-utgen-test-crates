{
  "name": "rand_pcg::pcg128::{impl#0}::from_state_incr",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": false,
  "loc": "rand_pcg/src/pcg128.rs:98:5:104:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: pcg\n"
      ],
      "input_infer": "state: 0 to u128::MAX, increment: 1 to u128::MAX\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert_eq!(pcg.increment, (1 << 1) | 1);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    let state: u128 = 0;",
                "    let increment: u128 = 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, state.wrapping_add(increment));",
                "    assert_eq!(pcg.increment, increment);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state != state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert_eq!(pcg.increment, (1 << 1) | 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = u128::MAX;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, state.wrapping_add(u128::MAX));",
                "    assert_eq!(pcg.increment, u128::MAX);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state <= u128::MAX.wrapping_add(u128::MAX));",
                "    assert_eq!(pcg.increment & 1, 1);",
                "    assert!(pcg.state > 0);",
                "    assert!(pcg.state < u128::MAX);"
              ],
              "code": [
                "{",
                "    let state: u128 = 0;",
                "    let increment: u128 = u128::MAX;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, state.wrapping_add(u128::MAX));",
                "    assert_eq!(pcg.increment, u128::MAX);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.state <= u128::MAX.wrapping_add(u128::MAX));",
                "    assert_eq!(pcg.increment & 1, 1);",
                "    assert!(pcg.state > 0);",
                "    assert!(pcg.state < u128::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = 1;",
                "    let increment: u128 = 2;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    let state: u128 = 1;",
                "    let increment: u128 = 2;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, 3); // Check the state after increment",
                "    assert_eq!(pcg.increment, 2); // Ensure that the increment matches",
                "    assert!(pcg.state > state); // Ensure the state has advanced from the initial state"
              ],
              "code": [
                "{",
                "    let state: u128 = 1;",
                "    let increment: u128 = 2;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    let state: u128 = 1;",
                "    let increment: u128 = 2;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, 3); // Check the state after increment",
                "    assert_eq!(pcg.increment, 2); // Ensure that the increment matches",
                "    assert!(pcg.state > state); // Ensure the state has advanced from the initial state",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX / 2;",
                "    let increment: u128 = u128::MAX / 2 + 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER).wrapping_add(increment)));",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert!(pcg.state != state);",
                "    assert_eq!(std::mem::size_of::<Lcg128Xsl64>(), 16);"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX / 2;",
                "    let increment: u128 = u128::MAX / 2 + 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER).wrapping_add(increment)));",
                "    assert_eq!(pcg.increment, (increment << 1) | 1);",
                "    assert!(pcg.state > state);",
                "    assert!(pcg.increment % 2 == 1);",
                "    assert!(pcg.state != state);",
                "    assert_eq!(std::mem::size_of::<Lcg128Xsl64>(), 16);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let increment: u128 = u128::MAX - 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(pcg.state, (u128::MAX.wrapping_add(u128::MAX - 1).wrapping_mul(MULTIPLIER) + (u128::MAX - 1)));",
                "    assert_eq!(pcg.increment, (u128::MAX - 1));"
              ],
              "code": [
                "{",
                "    let state: u128 = u128::MAX;",
                "    let increment: u128 = u128::MAX - 1;",
                "    let pcg = Lcg128Xsl64::from_state_incr(state, increment);",
                "    assert_eq!(pcg.state, (u128::MAX.wrapping_add(u128::MAX - 1).wrapping_mul(MULTIPLIER) + (u128::MAX - 1)));",
                "    assert_eq!(pcg.increment, (u128::MAX - 1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}