{
  "name": "rand_pcg::pcg128::{impl#1}::fmt",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:118:5:120:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "state: u128 in the range [0, 2^128 - 1], increment: u128 in the range [0, 2^128 - 1], fmt: &mut fmt::Formatter is valid and not null\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: 0,",
                "        increment: 0,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty());",
                "    assert!(rng.state == 0);",
                "    assert!(rng.increment == 0);",
                "    assert_eq!(rng.clone(), rng);",
                "    assert_eq!(rng, Lcg128Xsl64 { state: 0, increment: 0 });",
                "    assert!(format!(\"{:?}\", rng) == \"Lcg128Xsl64 {{}}\");"
              ],
              "code": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: 0,",
                "        increment: 0,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty());",
                "    assert!(rng.state == 0);",
                "    assert!(rng.increment == 0);",
                "    assert_eq!(rng.clone(), rng);",
                "    assert_eq!(rng, Lcg128Xsl64 { state: 0, increment: 0 });",
                "    assert!(format!(\"{:?}\", rng) == \"Lcg128Xsl64 {{}}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: u128::MAX,",
                "        increment: u128::MAX,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(formatter.debug().is_ok());",
                "    assert_eq!(rng.state, u128::MAX);",
                "    assert_eq!(rng.increment, u128::MAX);"
              ],
              "code": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: u128::MAX,",
                "        increment: u128::MAX,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(formatter.debug().is_ok());",
                "    assert_eq!(rng.state, u128::MAX);",
                "    assert_eq!(rng.increment, u128::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: u128::MAX / 2,",
                "        increment: u128::MAX / 2,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");"
              ],
              "code": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: u128::MAX / 2,",
                "        increment: u128::MAX / 2,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: 12345678901234567890,",
                "        increment: 98765432109876543210,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");"
              ],
              "code": [
                "{",
                "    let rng = Lcg128Xsl64 {",
                "        state: 12345678901234567890,",
                "        increment: 98765432109876543210,",
                "    };",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = rng.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"Lcg128Xsl64 {{}}\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}