{
  "name": "rand::rngs::xoshiro256plusplus::{impl#0}::from_seed",
  "mod_info": {
    "name": "rngs::xoshiro256plusplus",
    "loc": "src/rngs/mod.rs:94:1:94:24"
  },
  "visible": true,
  "loc": "src/rngs/xoshiro256plusplus.rs:35:5:44:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: state.iter().all(|&x| x == 0) at line 40 is true\n"
      ],
      "input_infer": "Input condition: seed should be [0; 32] (an array of 32 bytes all set to zero)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.s, Xoshiro256PlusPlus::seed_from_u64(0).s);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_eq!(rng.s, Xoshiro256PlusPlus::seed_from_u64(0).s);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    Xoshiro256PlusPlus::from_seed([0; 32]) == Xoshiro256PlusPlus::seed_from_u64(0)",
                "    Xoshiro256PlusPlus::from_seed([1; 32]).s != [0; 4]",
                "    Xoshiro256PlusPlus::from_seed([0; 32]).s == Xoshiro256PlusPlus::seed_from_u64(0).s",
                "    Xoshiro256PlusPlus::from_seed([100; 32]).s != Xoshiro256PlusPlus::from_seed([200; 32]).s"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    Xoshiro256PlusPlus::from_seed([0; 32]) == Xoshiro256PlusPlus::seed_from_u64(0)",
                "    Xoshiro256PlusPlus::from_seed([1; 32]).s != [0; 4]",
                "    Xoshiro256PlusPlus::from_seed([0; 32]).s == Xoshiro256PlusPlus::seed_from_u64(0).s",
                "    Xoshiro256PlusPlus::from_seed([100; 32]).s != Xoshiro256PlusPlus::from_seed([200; 32]).s",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, Xoshiro256PlusPlus::seed_from_u64(0));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_eq!(rng, Xoshiro256PlusPlus::seed_from_u64(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed_all_max: [u8; 32] = [255; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed_all_max);",
                "",
                "    let seed_half_zero: [u8; 32] = [0; 16].iter().chain([1; 16]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng_half_zero = Xoshiro256PlusPlus::from_seed(seed_half_zero);",
                "    ",
                "    let seed_one_zero: [u8; 32] = [0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng_one_zero = Xoshiro256PlusPlus::from_seed(seed_one_zero);",
                "}"
              ],
              "oracle": [
                "    Xoshiro256PlusPlus::from_seed([0; 32]) == Xoshiro256PlusPlus::seed_from_u64(0)",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([255; 32]).s != [0; 4]",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([0; 16].iter().chain([1; 16]).copied().collect::<Vec<u8>>().try_into().unwrap()).s != [0; 4]",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap()).s != [0; 4]"
              ],
              "code": [
                "{",
                "    let seed_all_max: [u8; 32] = [255; 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed_all_max);",
                "",
                "    let seed_half_zero: [u8; 32] = [0; 16].iter().chain([1; 16]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng_half_zero = Xoshiro256PlusPlus::from_seed(seed_half_zero);",
                "    ",
                "    let seed_one_zero: [u8; 32] = [0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng_one_zero = Xoshiro256PlusPlus::from_seed(seed_one_zero);",
                "    Xoshiro256PlusPlus::from_seed([0; 32]) == Xoshiro256PlusPlus::seed_from_u64(0)",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([255; 32]).s != [0; 4]",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([0; 16].iter().chain([1; 16]).copied().collect::<Vec<u8>>().try_into().unwrap()).s != [0; 4]",
                "    ",
                "    Xoshiro256PlusPlus::from_seed([0; 31].iter().chain([1u8]).copied().collect::<Vec<u8>>().try_into().unwrap()).s != [0; 4]",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: state.iter().all(|&x| x == 0) at line 40 is false\n",
        "expected return value/type: Xoshiro256PlusPlus { s: state }\n"
      ],
      "input_infer": "seed: [1-255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_ne!(rng.s, [0, 0, 0, 0]);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    let seed: [u8; 32] = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_ne!(rng.s, [0, 0, 0, 0]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let expected_state: [u64; 4] = /* expected values based on seed processing logic */;",
                "    assert_eq!(rng.s, expected_state);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    let seed: [u8; 32] = [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];",
                "    let expected_state: [u64; 4] = /* expected values based on seed processing logic */;",
                "    assert_eq!(rng.s, expected_state);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_eq!(rng.s, [0x3d1d5ef4c4ebedfd, 0xaa6344cbb066f4a6, 0x7a2cab7c6851c0d6, 0x488793ab000265d2]);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    let seed: [u8; 32] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_eq!(rng.s, [0x3d1d5ef4c4ebedfd, 0xaa6344cbb066f4a6, 0x7a2cab7c6851c0d6, 0x488793ab000265d2]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_ne!(rng.s, [0; 4]);",
                "    assert_eq!(rng.s[0], /* expected value based on seed */);",
                "    assert_eq!(rng.s[1], /* expected value based on seed */);",
                "    assert_eq!(rng.s[2], /* expected value based on seed */);",
                "    assert_eq!(rng.s[3], /* expected value based on seed */);"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    let seed: [u8; 32] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];",
                "    let rng = Xoshiro256PlusPlus::from_seed(seed);",
                "    assert_ne!(rng.s, [0; 4]);",
                "    assert_eq!(rng.s[0], /* expected value based on seed */);",
                "    assert_eq!(rng.s[1], /* expected value based on seed */);",
                "    assert_eq!(rng.s[2], /* expected value based on seed */);",
                "    assert_eq!(rng.s[3], /* expected value based on seed */);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}