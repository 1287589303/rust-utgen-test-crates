{
  "name": "rand::rng::Rng::random_ratio",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:225:5:233:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: distr::Bernoulli::from_ratio(numerator, denominator) matches Err(_) at line 226 is true\n"
      ],
      "input_infer": "numerator: u32 in the range [1, UINT32_MAX], denominator: u32 in the range [0, UINT32_MAX] where numerator > denominator or denominator == 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0",
                "        }",
                "        fn next_u64(&mut self) -> u64 {",
                "            0",
                "        }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0;",
                "            }",
                "        }",
                "        fn drop(&mut self) {}",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(3, 2);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_zero_denominator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(1, 0);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_numerator_exceeds_denominator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(5, 4);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_zero_numerator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(0, 1);",
                "    }"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0",
                "        }",
                "        fn next_u64(&mut self) -> u64 {",
                "            0",
                "        }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0;",
                "            }",
                "        }",
                "        fn drop(&mut self) {}",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(3, 2);",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_zero_denominator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(1, 0);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_numerator_exceeds_denominator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(5, 4);",
                "    }",
                "    ",
                "    #[should_panic]",
                "    #[test]",
                "    fn test_random_ratio_zero_numerator() {",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(0, 1);",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0",
                "        }",
                "        fn next_u64(&mut self) -> u64 {",
                "            0",
                "        }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0;",
                "            }",
                "        }",
                "        fn drop(&mut self) {}",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(1, 0);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(rng.random_ratio(1, 0));",
                "    assert_panics!(rng.random_ratio(2, 2));",
                "    assert_panics!(rng.random_ratio(3, 2));",
                "    assert_panics!(rng.random_ratio(5, 0));",
                "    assert_panics!(rng.random_ratio(4, 4));",
                "    assert_panics!(rng.random_ratio(6, 5));"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 {",
                "            0",
                "        }",
                "        fn next_u64(&mut self) -> u64 {",
                "            0",
                "        }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
                "            for byte in dest.iter_mut() {",
                "                *byte = 0;",
                "            }",
                "        }",
                "        fn drop(&mut self) {}",
                "    }",
                "",
                "    let mut rng = TestRng;",
                "    rng.random_ratio(1, 0);",
                "    assert_panics!(rng.random_ratio(1, 0));",
                "    assert_panics!(rng.random_ratio(2, 2));",
                "    assert_panics!(rng.random_ratio(3, 2));",
                "    assert_panics!(rng.random_ratio(5, 0));",
                "    assert_panics!(rng.random_ratio(4, 4));",
                "    assert_panics!(rng.random_ratio(6, 5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: distr::Bernoulli::from_ratio(numerator, denominator) matches Ok(d) at line 226 is true\n",
        "precondition: distr::Bernoulli::from_ratio(numerator, denominator) matches Ok(d) at line 226 is true\n"
      ],
      "input_infer": "numerator: 0 to denominator, denominator: 1 to max u32; cases: numerator < denominator, numerator == denominator, and numerator == 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(0, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    let result = rng.random_ratio(1, 1);",
                "    assert_eq!(result, true);",
                "    let result = rng.random_ratio(1, 2);",
                "    assert!(result == true || result == false);",
                "    let result = rng.random_ratio(2, 1);",
                "    panic!();",
                "    let result = rng.random_ratio(2, 0);",
                "    panic!();"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(0, 1);",
                "    assert_eq!(result, false);",
                "    let result = rng.random_ratio(1, 1);",
                "    assert_eq!(result, true);",
                "    let result = rng.random_ratio(1, 2);",
                "    assert!(result == true || result == false);",
                "    let result = rng.random_ratio(2, 1);",
                "    panic!();",
                "    let result = rng.random_ratio(2, 0);",
                "    panic!();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(1, 1);",
                "}"
              ],
              "oracle": [
                "    assert!(result == true);",
                "    ",
                "    let result = rng.random_ratio(0, 1);",
                "    assert!(result == false);",
                "    ",
                "    let result = rng.random_ratio(2, 3);",
                "    assert!(result == true || result == false); // Should be probabilistic",
                "    ",
                "    let result = std::panic::catch_unwind(|| { rng.random_ratio(1, 0); });",
                "    assert!(result.is_err());",
                "    ",
                "    let result = std::panic::catch_unwind(|| { rng.random_ratio(3, 2); });",
                "    assert!(result.is_err());",
                "    ",
                "    let result = rng.random_ratio(u32::MAX, u32::MAX);",
                "    assert!(result == true);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(1, 1);",
                "    assert!(result == true);",
                "    ",
                "    let result = rng.random_ratio(0, 1);",
                "    assert!(result == false);",
                "    ",
                "    let result = rng.random_ratio(2, 3);",
                "    assert!(result == true || result == false); // Should be probabilistic",
                "    ",
                "    let result = std::panic::catch_unwind(|| { rng.random_ratio(1, 0); });",
                "    assert!(result.is_err());",
                "    ",
                "    let result = std::panic::catch_unwind(|| { rng.random_ratio(3, 2); });",
                "    assert!(result.is_err());",
                "    ",
                "    let result = rng.random_ratio(u32::MAX, u32::MAX);",
                "    assert!(result == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(2, 3);",
                "}"
              ],
              "oracle": [
                "    let result_true = rng.random_ratio(2, 3); // Expect result to be true, as numerator < denominator",
                "    assert!(result_true == true || result_true == false); // Result can be true or false based on randomness",
                "    ",
                "    let result_false = rng.random_ratio(0, 3); // Expect result to be false, as numerator is 0",
                "    assert_eq!(result_false, false);",
                "    ",
                "    let result_true_full = rng.random_ratio(3, 3); // Expect result to be true, as numerator equals denominator",
                "    assert_eq!(result_true_full, true);",
                "    ",
                "    let panic = std::panic::catch_unwind(|| {",
                "    rng.random_ratio(4, 3); // This should panic, as numerator > denominator",
                "    });",
                "    assert!(panic.is_err());",
                "    ",
                "    let panic_zero_denominator = std::panic::catch_unwind(|| {",
                "    rng.random_ratio(1, 0); // This should panic, as denominator is 0",
                "    });",
                "    assert!(panic_zero_denominator.is_err());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(2, 3);",
                "    let result_true = rng.random_ratio(2, 3); // Expect result to be true, as numerator < denominator",
                "    assert!(result_true == true || result_true == false); // Result can be true or false based on randomness",
                "    ",
                "    let result_false = rng.random_ratio(0, 3); // Expect result to be false, as numerator is 0",
                "    assert_eq!(result_false, false);",
                "    ",
                "    let result_true_full = rng.random_ratio(3, 3); // Expect result to be true, as numerator equals denominator",
                "    assert_eq!(result_true_full, true);",
                "    ",
                "    let panic = std::panic::catch_unwind(|| {",
                "    rng.random_ratio(4, 3); // This should panic, as numerator > denominator",
                "    });",
                "    assert!(panic.is_err());",
                "    ",
                "    let panic_zero_denominator = std::panic::catch_unwind(|| {",
                "    rng.random_ratio(1, 0); // This should panic, as denominator is 0",
                "    });",
                "    assert!(panic_zero_denominator.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(2, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.random_ratio(2, 2), true);",
                "    assert_eq!(rng.random_ratio(0, 2), false);",
                "    #[should_panic]",
                "    rng.random_ratio(3, 2);",
                "    #[should_panic]",
                "    rng.random_ratio(2, 0);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(2, 0);",
                "    assert_eq!(rng.random_ratio(2, 2), true);",
                "    assert_eq!(rng.random_ratio(0, 2), false);",
                "    #[should_panic]",
                "    rng.random_ratio(3, 2);",
                "    #[should_panic]",
                "    rng.random_ratio(2, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(3, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.random_ratio(0, 1), false);",
                "    assert_eq!(rng.random_ratio(1, 1), true);",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(2, 0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(3, 2); }).is_ok());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(4, 2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(5, 5); }).is_ok());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
                "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::error::Error> { Ok(()) }",
                "    }",
                "",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let result = rng.random_ratio(3, 2);",
                "    assert_eq!(rng.random_ratio(0, 1), false);",
                "    assert_eq!(rng.random_ratio(1, 1), true);",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(2, 0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(3, 2); }).is_ok());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(4, 2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { rng.random_ratio(5, 5); }).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}