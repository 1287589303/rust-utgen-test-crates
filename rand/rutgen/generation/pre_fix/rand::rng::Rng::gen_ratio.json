{
  "name": "rand::rng::Rng::gen_ratio",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:352:5:354:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "numerator: 0 to UINT32_MAX, denominator: 1 to UINT32_MAX (denominator should not be zero)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(0, 1);",
                "}"
              ],
              "oracle": [
                "    assert!(rng.gen_ratio(1, 1) == true);",
                "    assert!(rng.gen_ratio(0, 2) == false);",
                "    assert!(rng.gen_ratio(10, 20) == false);",
                "    assert!(rng.gen_ratio(1, 100) == true);",
                "    assert!(rng.gen_ratio(10, 0) == false);  // denominator is zero, should panic",
                "    assert!(rng.gen_ratio(0, 0) == false);   // 0/0 case, should panic",
                "    assert!(rng.gen_ratio(50, 100) == true);",
                "    assert!(rng.gen_ratio(33, 100) == true);",
                "    assert!(rng.gen_ratio(99, 100) == true);",
                "    assert!(rng.gen_ratio(1, 0) == false);     // should panic on faulty input",
                "    assert!(rng.gen_ratio(25, 100) == true);  // true probability case through numerator/denominator"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(0, 1);",
                "    assert!(rng.gen_ratio(1, 1) == true);",
                "    assert!(rng.gen_ratio(0, 2) == false);",
                "    assert!(rng.gen_ratio(10, 20) == false);",
                "    assert!(rng.gen_ratio(1, 100) == true);",
                "    assert!(rng.gen_ratio(10, 0) == false);  // denominator is zero, should panic",
                "    assert!(rng.gen_ratio(0, 0) == false);   // 0/0 case, should panic",
                "    assert!(rng.gen_ratio(50, 100) == true);",
                "    assert!(rng.gen_ratio(33, 100) == true);",
                "    assert!(rng.gen_ratio(99, 100) == true);",
                "    assert!(rng.gen_ratio(1, 0) == false);     // should panic on faulty input",
                "    assert!(rng.gen_ratio(25, 100) == true);  // true probability case through numerator/denominator",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(UINT32_MAX, UINT32_MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.gen_ratio(1, 2), false);",
                "    assert!(rng.gen_ratio(0, 1));",
                "    assert!(rng.gen_ratio(1, 1));",
                "    assert!(rng.gen_ratio(1, 100));",
                "    assert!(rng.gen_ratio(100, 100));",
                "    assert!(rng.gen_ratio(500, 1000));",
                "    panic::catch_unwind(|| { rng.gen_ratio(1, 0); }).is_err();",
                "    panic::catch_unwind(|| { rng.gen_ratio(UINT32_MAX, UINT32_MAX + 1); }).is_err();",
                "    assert_eq!(rng.gen_ratio(0, 0), false);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(UINT32_MAX, UINT32_MAX);",
                "    assert_eq!(rng.gen_ratio(1, 2), false);",
                "    assert!(rng.gen_ratio(0, 1));",
                "    assert!(rng.gen_ratio(1, 1));",
                "    assert!(rng.gen_ratio(1, 100));",
                "    assert!(rng.gen_ratio(100, 100));",
                "    assert!(rng.gen_ratio(500, 1000));",
                "    panic::catch_unwind(|| { rng.gen_ratio(1, 0); }).is_err();",
                "    panic::catch_unwind(|| { rng.gen_ratio(UINT32_MAX, UINT32_MAX + 1); }).is_err();",
                "    assert_eq!(rng.gen_ratio(0, 0), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(1, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng.gen_ratio(1, 2), rng.random_ratio(1, 2));",
                "    assert!(rng.gen_ratio(0, 1) == false);",
                "    assert!(rng.gen_ratio(1, 1) == true);",
                "    let result_out_of_range = std::panic::catch_unwind(|| { rng.gen_ratio(1, 0); });",
                "    assert!(result_out_of_range.is_err());",
                "    assert!(result_out_of_range.err().unwrap().is::<&str>());"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(1, 2);",
                "    assert_eq!(rng.gen_ratio(1, 2), rng.random_ratio(1, 2));",
                "    assert!(rng.gen_ratio(0, 1) == false);",
                "    assert!(rng.gen_ratio(1, 1) == true);",
                "    let result_out_of_range = std::panic::catch_unwind(|| { rng.gen_ratio(1, 0); });",
                "    assert!(result_out_of_range.is_err());",
                "    assert!(result_out_of_range.err().unwrap().is::<&str>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"p=1/0 is outside range [0.0, 1.0]\")]"
              ],
              "prefix": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(1, 0);",
                "}"
              ],
              "oracle": [
                "    let _result = rng.gen_ratio(1, 0);",
                "    #[should_panic(expected = \"p=1/0 is outside range [0.0, 1.0]\")]",
                "    let _result = rng.random_ratio(1, 0);",
                "    #[should_panic(expected = \"p=0/0 is outside range [0.0, 1.0]\")]",
                "    let _result = rng.random_ratio(0, 0);"
              ],
              "code": [
                "{",
                "    struct TestRng;",
                "    impl RngCore for TestRng {",
                "        fn next_u32(&mut self) -> u32 { 0 }",
                "        fn next_u64(&mut self) -> u64 { 0 }",
                "        fn fill_bytes(&mut self, _dest: &mut [u8]) {}",
                "        fn try_fill_bytes(&mut self, _dest: &mut [u8]) -> Result<(), rand_core::Error> { Ok(()) }",
                "    }",
                "    impl Rng for TestRng {}",
                "",
                "    let mut rng = TestRng;",
                "    let _result = rng.gen_ratio(1, 0);",
                "    let _result = rng.gen_ratio(1, 0);",
                "    #[should_panic(expected = \"p=1/0 is outside range [0.0, 1.0]\")]",
                "    let _result = rng.random_ratio(1, 0);",
                "    #[should_panic(expected = \"p=0/0 is outside range [0.0, 1.0]\")]",
                "    let _result = rng.random_ratio(0, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}