{
  "name": "rand::distr::utils::IntAsSIMD::splat",
  "mod_info": {
    "name": "distr::utils",
    "loc": "src/distr/mod.rs:94:1:94:11"
  },
  "visible": true,
  "loc": "src/distr/utils.rs:255:5:257:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: scalar\n"
      ],
      "input_infer": "Test input conditions or ranges: Any value of type Self, including edge cases like minimum, maximum, and special values (e.g., negative numbers, zeros, positive numbers).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [
            "#[cfg(test)]",
            "fn test_splat_u32() {",
            "    struct U32Wrapper(u32);",
            "    ",
            "    let min_value = U32Wrapper(u32::MIN);",
            "    let zero_value = U32Wrapper(0);",
            "    let positive_value = U32Wrapper(42);",
            "    let max_value = U32Wrapper(u32::MAX);",
            "",
            "    U32Wrapper::splat(min_value.0);",
            "    U32Wrapper::splat(zero_value.0);",
            "    U32Wrapper::splat(positive_value.0);",
            "    U32Wrapper::splat(max_value.0);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_splat_i32() {",
            "    struct I32Wrapper(i32);",
            "",
            "    let min_value = I32Wrapper(i32::MIN);",
            "    let negative_value = I32Wrapper(-1);",
            "    let zero_value = I32Wrapper(0);",
            "    let positive_value = I32Wrapper(1);",
            "    let max_value = I32Wrapper(i32::MAX);",
            "",
            "    I32Wrapper::splat(min_value.0);",
            "    I32Wrapper::splat(negative_value.0);",
            "    I32Wrapper::splat(zero_value.0);",
            "    I32Wrapper::splat(positive_value.0);",
            "    I32Wrapper::splat(max_value.0);",
            "}",
            "",
            "#[cfg(test)]",
            "fn test_splat_f32() {",
            "    struct F32Wrapper(f32);",
            "",
            "    let min_value = F32Wrapper(f32::MIN);",
            "    let negative_value = F32Wrapper(-1.0);",
            "    let zero_value = F32Wrapper(0.0);",
            "    let positive_value = F32Wrapper(1.0);",
            "    let max_value = F32Wrapper(f32::MAX);",
            "",
            "    F32Wrapper::splat(min_value.0);",
            "    F32Wrapper::splat(negative_value.0);",
            "    F32Wrapper::splat(zero_value.0);",
            "    F32Wrapper::splat(positive_value.0);",
            "    F32Wrapper::splat(max_value.0);",
            "}"
          ],
          "chain_tests": []
        }
      ]
    }
  ]
}