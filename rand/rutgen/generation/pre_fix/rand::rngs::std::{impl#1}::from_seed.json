{
  "name": "rand::rngs::std::{impl#1}::from_seed",
  "mod_info": {
    "name": "rngs::std",
    "loc": "src/rngs/mod.rs:97:1:97:9"
  },
  "visible": true,
  "loc": "src/rngs/std.rs:94:5:96:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: StdRng(Rng::from_seed(seed))\n"
      ],
      "input_infer": "seed: [u8; 32] where each element is in the range 0-255, covering all possible byte values, including boundary values like [0, 0, ...0] and [255, 255, ...255]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "    let seed: [u8; 32] = [0; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [1; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [2; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [2; 32];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed_min: [u8; 32] = [0; 32];",
                "    let seed_max: [u8; 32] = [255; 32];",
                "    ",
                "    let rng_min = StdRng::from_seed(seed_min);",
                "    let rng_max = StdRng::from_seed(seed_max);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng_min, StdRng(Rng::from_seed(seed_min)));",
                "    assert_eq!(rng_max, StdRng(Rng::from_seed(seed_max)));"
              ],
              "code": [
                "{",
                "    let seed_min: [u8; 32] = [0; 32];",
                "    let seed_max: [u8; 32] = [255; 32];",
                "    ",
                "    let rng_min = StdRng::from_seed(seed_min);",
                "    let rng_max = StdRng::from_seed(seed_max);",
                "    assert_eq!(rng_min, StdRng(Rng::from_seed(seed_min)));",
                "    assert_eq!(rng_max, StdRng(Rng::from_seed(seed_max)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ",
                "                          16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];",
                "    let rng = StdRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    let seed: [u8; 32] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ",
                "                          16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];",
                "    let rng = StdRng::from_seed(seed);",
                "    let seed: [u8; 32] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let seed: [u8; 32] = [128; 16].iter().chain([64; 16].iter()).cloned().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng = StdRng::from_seed(seed);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));"
              ],
              "code": [
                "{",
                "    let seed: [u8; 32] = [128; 16].iter().chain([64; 16].iter()).cloned().collect::<Vec<u8>>().try_into().unwrap();",
                "    let rng = StdRng::from_seed(seed);",
                "    assert_eq!(rng, StdRng(Rng::from_seed(seed)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}