{
  "name": "rand::distr::weighted::weighted_index::{impl#4}::weights",
  "mod_info": {
    "name": "distr::weighted::weighted_index",
    "loc": "src/distr/weighted/mod.rs:18:1:18:20"
  },
  "visible": true,
  "loc": "src/distr/weighted/weighted_index.rs:342:5:350:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: WeightedIndexIter {\n            weighted_index: self,\n            index: 0,\n        }\n"
      ],
      "input_infer": "Valid input for `weights` must include a non-empty weights array of type `X` implementing `SampleUniform + PartialOrd`, with permissible elements including integers or float numbers greater than zero, ensuring valid indices for sampling are maintained; range check minimum length is 1.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![1, 2, 3];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 6,",
                "        weight_distribution: TestSampler,",
                "    };",
                "    ",
                "    let iter = dist.weights();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![1, 2, 3]);",
                "    assert_eq!(iter.index, 0);"
              ],
              "code": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![1, 2, 3];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 6,",
                "        weight_distribution: TestSampler,",
                "    };",
                "    ",
                "    let iter = dist.weights();",
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![1, 2, 3]);",
                "    assert_eq!(iter.index, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![4];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 4,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.weighted_index.cumulative_weights, weights);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight == 4);",
                "    assert!(iter.weight_distribution == TestSampler);",
                "    assert!(iter.weighted_index.weights().index == 0);"
              ],
              "code": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![4];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 4,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "    assert_eq!(iter.weighted_index.cumulative_weights, weights);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight == 4);",
                "    assert!(iter.weight_distribution == TestSampler);",
                "    assert!(iter.weighted_index.weights().index == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![1.5, 2.5, 3.5];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 7.5,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![1.5, 2.5, 3.5]);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight > 0.0);",
                "    assert!(iter.weighted_index.weight_distribution.is_some());"
              ],
              "code": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![1.5, 2.5, 3.5];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 7.5,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![1.5, 2.5, 3.5]);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight > 0.0);",
                "    assert!(iter.weighted_index.weight_distribution.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![100_000, 200_000, 300_000];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 600_000,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.weighted_index.cumulative_weights, weights);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight() == 600_000);"
              ],
              "code": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![100_000, 200_000, 300_000];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 600_000,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "    assert_eq!(iter.weighted_index.cumulative_weights, weights);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.total_weight() == 600_000);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![0.0, 1.0, 2.0];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 3.0,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![0.0, 1.0, 2.0]);",
                "    assert_eq!(iter.weighted_index.total_weight, 3.0);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.weights().collect::<Vec<_>>() == weights);",
                "    assert!(iter.weighted_index.weights().collect::<Vec<_>>().len() == 3);"
              ],
              "code": [
                "{",
                "    struct TestSampler;",
                "",
                "    impl SampleUniform for TestSampler {",
                "        type Sampler = TestSampler;",
                "    }",
                "",
                "    let weights = vec![0.0, 1.0, 2.0];",
                "    let dist = WeightedIndex {",
                "        cumulative_weights: weights.clone(),",
                "        total_weight: 3.0,",
                "        weight_distribution: TestSampler,",
                "    };",
                "",
                "    let iter = dist.weights();",
                "    assert_eq!(iter.weighted_index.cumulative_weights, vec![0.0, 1.0, 2.0]);",
                "    assert_eq!(iter.weighted_index.total_weight, 3.0);",
                "    assert_eq!(iter.index, 0);",
                "    assert!(iter.weighted_index.weights().collect::<Vec<_>>() == weights);",
                "    assert!(iter.weighted_index.weights().collect::<Vec<_>>().len() == 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}