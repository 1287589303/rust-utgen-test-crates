// Answer 0

#[test]
fn test_from_seed_minimal_seed() {
    let seed: [u8; 32] = [0x00; 32];
    let rng = Lcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_maximal_seed() {
    let seed: [u8; 32] = [0xFF; 32];
    let rng = Lcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_odd_increment() {
    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02];
    let rng = Lcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_boundary_increment() {
    let seed: [u8; 32] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];
    let rng = Lcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_varied_increment() {
    let seed: [u8; 32] = [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 
                          0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 
                          0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 
                          0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20];
    let rng = Lcg128Xsl64::from_seed(seed);
}

