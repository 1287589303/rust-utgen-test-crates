[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_advancing_by_1);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_advancing_by_2);",
          "    rng.advance(3);",
          "    assert_eq!(rng.state, expected_state_after_advancing_by_3);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, expected_state_after_advancing_by_1);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_advancing_by_2);",
          "    rng.advance(3);",
          "    assert_eq!(rng.state, expected_state_after_advancing_by_3);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1_000_000_000_000_000_000_000_000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_large_delta);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);",
          "    rng.advance(1);",
          "    assert!(rng.state > initial_state);",
          "    rng.advance(1);",
          "    assert!(rng.state > previous_state);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1_000_000_000_000_000_000_000_000);",
          "    assert_eq!(rng.state, expected_state_after_large_delta);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);",
          "    rng.advance(1);",
          "    assert!(rng.state > initial_state);",
          "    rng.advance(1);",
          "    assert!(rng.state > previous_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(2_000_000_000_000_000_000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_advance_with_large_delta);",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1); assert!(rng.state > 1);",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(0); assert_eq!(rng.state, 1);",
          "    let mut rng = Lcg128Xsl64::new(1, 0);",
          "    rng.advance(1); assert!(rng.state != 1);",
          "    let mut rng = Lcg128Xsl64::new(0, 1);",
          "    rng.advance(2); assert!(rng.state > 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(2_000_000_000_000_000_000);",
          "    assert_eq!(rng.state, expected_state_after_advance_with_large_delta);",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(1); assert!(rng.state > 1);",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(0); assert_eq!(rng.state, 1);",
          "    let mut rng = Lcg128Xsl64::new(1, 0);",
          "    rng.advance(1); assert!(rng.state != 1);",
          "    let mut rng = Lcg128Xsl64::new(0, 1);",
          "    rng.advance(2); assert!(rng.state > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);",
          "    let mut rng = Lcg128Xsl64::new(2, 1);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_add(2));",
          "    let mut rng = Lcg128Xsl64::new(3, 1);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_add(3)).wrapping_add(1));",
          "    let mut rng = Lcg128Xsl64::new(4, 5);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(4).wrapping_add(6)).wrapping_add(5)).wrapping_add(5)).wrapping_add(5));",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX, 1);",
          "    rng.advance(u128::MAX);",
          "    assert!(rng.state > 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 1);",
          "    let mut rng = Lcg128Xsl64::new(2, 1);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_add(2));",
          "    let mut rng = Lcg128Xsl64::new(3, 1);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_add(3)).wrapping_add(1));",
          "    let mut rng = Lcg128Xsl64::new(4, 5);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(MULTIPLIER.wrapping_mul(4).wrapping_add(6)).wrapping_add(5)).wrapping_add(5)).wrapping_add(5));",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX, 1);",
          "    rng.advance(u128::MAX);",
          "    assert!(rng.state > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]