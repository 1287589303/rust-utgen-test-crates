[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest: &mut [u8] = &mut [];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());"
        ],
        "code": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest: &mut [u8] = &mut [];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest[0], 0);",
          "    assert_eq!(dest.len(), 1);",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 16);",
          "    assert!(!dest.is_empty());",
          "    let mut rng2 = SmallRng(Xoshiro256PlusPlus { s: [1; 4] });",
          "    let mut dest2 = [0u8; 1];",
          "    rng2.fill_bytes(&mut dest2);",
          "    assert_ne!(dest2[0], dest[0]);",
          "    let mut dest3 = [0u8; 256];",
          "    rng.fill_bytes(&mut dest3);",
          "    assert_eq!(dest3.len(), 256);"
        ],
        "code": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest[0], 0);",
          "    assert_eq!(dest.len(), 1);",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 16);",
          "    assert!(!dest.is_empty());",
          "    let mut rng2 = SmallRng(Xoshiro256PlusPlus { s: [1; 4] });",
          "    let mut dest2 = [0u8; 1];",
          "    rng2.fill_bytes(&mut dest2);",
          "    assert_ne!(dest2[0], dest[0]);",
          "    let mut dest3 = [0u8; 256];",
          "    rng.fill_bytes(&mut dest3);",
          "    assert_eq!(dest3.len(), 256);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 128];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.iter().all(|&byte| byte == 0), true);",
          "    assert_eq!(dest.len(), 128);",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().any(|&byte| byte != 0));",
          "    assert_eq!(rng.fill_bytes(&mut dest), ());",
          "    assert!(dest.iter().filter(|&&byte| byte != 0).count() > 0);"
        ],
        "code": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 128];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.iter().all(|&byte| byte == 0), true);",
          "    assert_eq!(dest.len(), 128);",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().any(|&byte| byte != 0));",
          "    assert_eq!(rng.fill_bytes(&mut dest), ());",
          "    assert!(dest.iter().filter(|&&byte| byte != 0).count() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 256];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 256);",
          "    assert!(dest.iter().all(|&byte| byte == 0));",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(!dest.iter().all(|&byte| byte == 0));",
          "    assert!(dest.iter().all(|&byte| byte <= u8::MAX));"
        ],
        "code": [
          "{",
          "    let mut rng = SmallRng(Xoshiro256PlusPlus { s: [0; 4] });",
          "    let mut dest = [0u8; 256];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 256);",
          "    assert!(dest.iter().all(|&byte| byte == 0));",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(!dest.iter().all(|&byte| byte == 0));",
          "    assert!(dest.iter().all(|&byte| byte <= u8::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]