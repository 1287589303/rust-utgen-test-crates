[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Empty);"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let result = Choose::new(slice);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[1];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().slice, slice);",
          "    assert_eq!(result.unwrap().num_choices(), NonZeroUsize::new(1).unwrap());"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[1];",
          "    let result = Choose::new(slice);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().slice, slice);",
          "    assert_eq!(result.unwrap().num_choices(), NonZeroUsize::new(1).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().num_choices().get(), 5);",
          "    assert_eq!(result.unwrap().slice.len(), 5);",
          "    assert_eq!(result.unwrap().slice, &[1, 2, 3, 4, 5]);",
          "    ",
          "    let empty_slice: &[u32] = &[];",
          "    let result_empty = Choose::new(empty_slice);",
          "    assert_eq!(result_empty.is_err(), true);",
          "    assert_eq!(result_empty.unwrap_err(), Empty);"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[1, 2, 3, 4, 5];",
          "    let result = Choose::new(slice);",
          "    assert_eq!(result.is_err(), false);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().num_choices().get(), 5);",
          "    assert_eq!(result.unwrap().slice.len(), 5);",
          "    assert_eq!(result.unwrap().slice, &[1, 2, 3, 4, 5]);",
          "    ",
          "    let empty_slice: &[u32] = &[];",
          "    let result_empty = Choose::new(empty_slice);",
          "    assert_eq!(result_empty.is_err(), true);",
          "    assert_eq!(result_empty.unwrap_err(), Empty);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]