[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[i32] = &[1, 2, 3, 4, 5];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.num_choices().get(), 5);",
          "    assert_eq!(choose_instance.range.low, 0);",
          "    assert_eq!(choose_instance.range.range, 5);"
        ],
        "code": [
          "{",
          "    let slice: &[i32] = &[1, 2, 3, 4, 5];",
          "    let result = Choose::new(slice);",
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.num_choices().get(), 5);",
          "    assert_eq!(choose_instance.range.low, 0);",
          "    assert_eq!(choose_instance.range.range, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[&str] = &[\"a\", \"b\", \"c\"];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.num_choices(), NonZeroUsize::new(3).unwrap());",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.range, UniformUsize::new(0, 3).unwrap());"
        ],
        "code": [
          "{",
          "    let slice: &[&str] = &[\"a\", \"b\", \"c\"];",
          "    let result = Choose::new(slice);",
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.num_choices(), NonZeroUsize::new(3).unwrap());",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.range, UniformUsize::new(0, 3).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: &[f64] = &[1.1, 2.2, 3.3];",
          "    let result = Choose::new(slice);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.num_choices().get(), 3);",
          "    assert_eq!(choose_instance.range.low, 0);",
          "    assert_eq!(choose_instance.range.range, 3);"
        ],
        "code": [
          "{",
          "    let slice: &[f64] = &[1.1, 2.2, 3.3];",
          "    let result = Choose::new(slice);",
          "    assert!(result.is_ok());",
          "    let choose_instance = result.unwrap();",
          "    assert_eq!(choose_instance.slice, slice);",
          "    assert_eq!(choose_instance.num_choices().get(), 3);",
          "    assert_eq!(choose_instance.range.low, 0);",
          "    assert_eq!(choose_instance.range.range, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]