[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        counter: usize,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random_range(&mut self, range: std::ops::Range<usize>) -> usize {",
          "            self.counter % range.end // Simple deterministic RNG",
          "        }",
          "    }",
          "",
          "    struct TestIterator {",
          "        data: Vec<usize>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index];",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            let remaining = self.data.len() - self.index;",
          "            (remaining, Some(remaining))",
          "        }",
          "",
          "        fn nth(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n + self.index < self.data.len() {",
          "                self.index += n + 1;",
          "                Some(self.data[self.index - 1])",
          "            } else {",
          "                self.index = self.data.len();",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { counter: 0 };",
          "    let iterator = TestIterator { data: vec![1, 2], index: 0 };",
          "",
          "    let result = iterator.choose_stable(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1));",
          "    assert_eq!(rng.counter, 2);",
          "    assert!(iterator.index == 2);",
          "    assert!(iterator.size_hint() == (0, Some(0)));",
          "    assert!(iterator.nth(0).is_none());"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        counter: usize,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random_range(&mut self, range: std::ops::Range<usize>) -> usize {",
          "            self.counter % range.end // Simple deterministic RNG",
          "        }",
          "    }",
          "",
          "    struct TestIterator {",
          "        data: Vec<usize>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let result = self.data[self.index];",
          "                self.index += 1;",
          "                Some(result)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            let remaining = self.data.len() - self.index;",
          "            (remaining, Some(remaining))",
          "        }",
          "",
          "        fn nth(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n + self.index < self.data.len() {",
          "                self.index += n + 1;",
          "                Some(self.data[self.index - 1])",
          "            } else {",
          "                self.index = self.data.len();",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { counter: 0 };",
          "    let iterator = TestIterator { data: vec![1, 2], index: 0 };",
          "",
          "    let result = iterator.choose_stable(&mut rng);",
          "    assert_eq!(result, Some(1));",
          "    assert_eq!(rng.counter, 2);",
          "    assert!(iterator.index == 2);",
          "    assert!(iterator.size_hint() == (0, Some(0)));",
          "    assert!(iterator.nth(0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]