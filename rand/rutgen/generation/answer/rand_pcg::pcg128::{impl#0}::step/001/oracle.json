[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(0, 1);",
          "    rng.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0.wrapping_mul(MULTIPLIER).wrapping_add(1));"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(0, 1);",
          "    rng.step();",
          "    assert_eq!(rng.state, 0.wrapping_mul(MULTIPLIER).wrapping_add(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX, u128::MAX);",
          "    rng.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, u128::MAX.wrapping_mul(MULTIPLIER).wrapping_add(u128::MAX));"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX, u128::MAX);",
          "    rng.step();",
          "    assert_eq!(rng.state, u128::MAX.wrapping_mul(MULTIPLIER).wrapping_add(u128::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX / 2, u128::MAX / 2);",
          "    rng.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, (u128::MAX / 2).wrapping_mul(MULTIPLIER).wrapping_add(u128::MAX / 2));",
          "    assert!(rng.state < u128::MAX);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(u128::MAX / 2, u128::MAX / 2);",
          "    rng.step();",
          "    assert_eq!(rng.state, (u128::MAX / 2).wrapping_mul(MULTIPLIER).wrapping_add(u128::MAX / 2));",
          "    assert!(rng.state < u128::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 0);",
          "    rng.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645 + 0);",
          "    assert!(rng.state > 0);",
          "    assert!(rng.state != 1);",
          "    assert!(rng.state != 0);",
          "    rng.step();",
          "    assert!(rng.state > 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645);",
          "    assert!(rng.state != ranger.state);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 0);",
          "    rng.step();",
          "    assert_eq!(rng.state, 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645 + 0);",
          "    assert!(rng.state > 0);",
          "    assert!(rng.state != 1);",
          "    assert!(rng.state != 0);",
          "    rng.step();",
          "    assert!(rng.state > 0x2360_ED05_1FC6_5DA4_4385_DF64_9FCC_F645);",
          "    assert!(rng.state != ranger.state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, (1.wrapping_mul(MULTIPLIER).wrapping_add(1)));"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128Xsl64::new(1, 1);",
          "    rng.step();",
          "    assert_eq!(rng.state, (1.wrapping_mul(MULTIPLIER).wrapping_add(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]