[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(1);",
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    chacha.set_nonce(u64::MAX);",
          "    assert_eq!(chacha.get_nonce(), u64::MAX);",
          "    chacha.set_nonce(123456789);",
          "    assert_eq!(chacha.get_nonce(), 123456789);",
          "    chacha.set_nonce(0);",
          "    assert!(chacha.get_nonce() == 0);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(0);",
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(1);",
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    chacha.set_nonce(u64::MAX);",
          "    assert_eq!(chacha.get_nonce(), u64::MAX);",
          "    chacha.set_nonce(123456789);",
          "    assert_eq!(chacha.get_nonce(), 123456789);",
          "    chacha.set_nonce(0);",
          "    assert!(chacha.get_nonce() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    assert_eq!(chacha.get_block_pos(), 0);",
          "    assert!(chacha.b != vec128_storage::default());",
          "    assert!(chacha.c != vec128_storage::default());",
          "    assert!(chacha.d != vec128_storage::default());"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(1);",
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    assert_eq!(chacha.get_block_pos(), 0);",
          "    assert!(chacha.b != vec128_storage::default());",
          "    assert!(chacha.c != vec128_storage::default());",
          "    assert!(chacha.d != vec128_storage::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 2);",
          "    chacha.set_nonce(10);",
          "    assert_eq!(chacha.get_nonce(), 10);",
          "    chacha.set_nonce(0);",
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(u64::MAX);",
          "    assert_eq!(chacha.get_nonce(), u64::MAX);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(2);",
          "    assert_eq!(chacha.get_nonce(), 2);",
          "    chacha.set_nonce(10);",
          "    assert_eq!(chacha.get_nonce(), 10);",
          "    chacha.set_nonce(0);",
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(u64::MAX);",
          "    assert_eq!(chacha.get_nonce(), u64::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(18446744073709551615);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 18446744073709551615);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(18446744073709551615);",
          "    assert_eq!(chacha.get_nonce(), 18446744073709551615);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 100);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(100);",
          "    assert_eq!(chacha.get_nonce(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(123456789);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 123456789);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(123456789);",
          "    assert_eq!(chacha.get_nonce(), 123456789);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(4294967295);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(chacha.get_nonce(), 4294967295);",
          "    chacha.set_nonce(0);",
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(1);",
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    chacha.set_nonce(18446744073709551615);",
          "    assert_eq!(chacha.get_nonce(), 18446744073709551615);"
        ],
        "code": [
          "{",
          "    let key: [u8; 32] = [0; 32];",
          "    let nonce: &[u8] = &[];",
          "    let mut chacha = ChaCha::new(&key, nonce);",
          "    chacha.set_nonce(4294967295);",
          "    assert_eq!(chacha.get_nonce(), 4294967295);",
          "    chacha.set_nonce(0);",
          "    assert_eq!(chacha.get_nonce(), 0);",
          "    chacha.set_nonce(1);",
          "    assert_eq!(chacha.get_nonce(), 1);",
          "    chacha.set_nonce(18446744073709551615);",
          "    assert_eq!(chacha.get_nonce(), 18446744073709551615);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]