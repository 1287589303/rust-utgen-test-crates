[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleUniformType;",
          "    impl SampleUniform for SampleUniformType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1, 2, 3]; // 3 elements, len is 3",
          "    let total_weight = 6; // sum of weights",
          "    let weight_distribution = ();",
          "",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let result = weighted_index.weight(3); // Equal case",
          "    // The expected weight is 6 (total weight)",
          "}"
        ],
        "oracle": [
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(3);",
          "    assert_eq!(result, Some(6));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(0);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(1);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(2);",
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    struct SampleUniformType;",
          "    impl SampleUniform for SampleUniformType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1, 2, 3]; // 3 elements, len is 3",
          "    let total_weight = 6; // sum of weights",
          "    let weight_distribution = ();",
          "",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let result = weighted_index.weight(3); // Equal case",
          "    // The expected weight is 6 (total weight)",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(3);",
          "    assert_eq!(result, Some(6));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(0);",
          "    assert_eq!(result, Some(1));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(1);",
          "    assert_eq!(result, Some(2));",
          "    ",
          "    let cumulative_weights = vec![1, 2, 3];",
          "    let total_weight = 6;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "    cumulative_weights,",
          "    total_weight,",
          "    weight_distribution,",
          "    };",
          "    let result = weighted_index.weight(2);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleUniformType;",
          "    impl SampleUniform for SampleUniformType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1, 2, 3]; // 3 elements, len is 3",
          "    let total_weight = 6; // sum of weights",
          "    let weight_distribution = ();",
          "",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let result = weighted_index.weight(2); // Non-zero index case",
          "    // The expected weight is 3 (3 - 0)",
          "}"
        ],
        "oracle": [
          "    let result = weighted_index.weight(2);",
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    struct SampleUniformType;",
          "    impl SampleUniform for SampleUniformType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1, 2, 3]; // 3 elements, len is 3",
          "    let total_weight = 6; // sum of weights",
          "    let weight_distribution = ();",
          "",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let result = weighted_index.weight(2); // Non-zero index case",
          "    // The expected weight is 3 (3 - 0)",
          "    let result = weighted_index.weight(2);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]