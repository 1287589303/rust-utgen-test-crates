[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.1;",
          "    rng.random_bool(p);",
          "}"
        ],
        "oracle": [
          "    assert!(rng.random_bool(0.0) == false);",
          "    assert!(rng.random_bool(1.0) == true);",
          "    assert!(rng.random_bool(0.5) == true || rng.random_bool(0.5) == false);",
          "    assert!(rng.random_bool(0.999) == true);",
          "    assert!(rng.random_bool(0.001) == false);",
          "    panic::catch_unwind(|| { rng.random_bool(-0.1); }).unwrap_err();",
          "    panic::catch_unwind(|| { rng.random_bool(1.1); }).unwrap_err();",
          "    assert!(rng.random_bool(0.33) == true || rng.random_bool(0.33) == false);",
          "    assert_eq!(rng.random_bool(0.0), false);",
          "    assert_eq!(rng.random_bool(1.0), true);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.1;",
          "    rng.random_bool(p);",
          "    assert!(rng.random_bool(0.0) == false);",
          "    assert!(rng.random_bool(1.0) == true);",
          "    assert!(rng.random_bool(0.5) == true || rng.random_bool(0.5) == false);",
          "    assert!(rng.random_bool(0.999) == true);",
          "    assert!(rng.random_bool(0.001) == false);",
          "    panic::catch_unwind(|| { rng.random_bool(-0.1); }).unwrap_err();",
          "    panic::catch_unwind(|| { rng.random_bool(1.1); }).unwrap_err();",
          "    assert!(rng.random_bool(0.33) == true || rng.random_bool(0.33) == false);",
          "    assert_eq!(rng.random_bool(0.0), false);",
          "    assert_eq!(rng.random_bool(1.0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.5;",
          "    rng.random_bool(p);",
          "}"
        ],
        "oracle": [
          "    assert!(rng.random_bool(0.0) == false);",
          "    assert!(rng.random_bool(1.0) == true);",
          "    assert!(rng.random_bool(0.999) == true);",
          "    assert!(rng.random_bool(0.001) == false);",
          "    assert!(rng.random_bool(0.25) == false || rng.random_bool(0.25) == true);",
          "    assert!(rng.random_bool(0.75) == true || rng.random_bool(0.75) == false);",
          "    assert!(std::panic::catch_unwind(|| { rng.random_bool(-0.1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { rng.random_bool(1.1); }).is_err());"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.5;",
          "    rng.random_bool(p);",
          "    assert!(rng.random_bool(0.0) == false);",
          "    assert!(rng.random_bool(1.0) == true);",
          "    assert!(rng.random_bool(0.999) == true);",
          "    assert!(rng.random_bool(0.001) == false);",
          "    assert!(rng.random_bool(0.25) == false || rng.random_bool(0.25) == true);",
          "    assert!(rng.random_bool(0.75) == true || rng.random_bool(0.75) == false);",
          "    assert!(std::panic::catch_unwind(|| { rng.random_bool(-0.1); }).is_err());",
          "    assert!(std::panic::catch_unwind(|| { rng.random_bool(1.1); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.9;",
          "    rng.random_bool(p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.random_bool(0.0), false);",
          "    assert_eq!(rng.random_bool(1.0), true);",
          "    assert!(rng.random_bool(0.5) == false || rng.random_bool(0.5) == true);",
          "    assert!(std::panic::catch_unwind(|| rng.random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rng.random_bool(1.1)).is_err());",
          "    for _ in 0..100 { assert!(rng.random_bool(0.3) == false || rng.random_bool(0.3) == true); }",
          "    for _ in 0..100 { assert!(rng.random_bool(0.9) == false || rng.random_bool(0.9) == true); }"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        // Implement necessary methods for RngCore here",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let p = 0.9;",
          "    rng.random_bool(p);",
          "    assert_eq!(rng.random_bool(0.0), false);",
          "    assert_eq!(rng.random_bool(1.0), true);",
          "    assert!(rng.random_bool(0.5) == false || rng.random_bool(0.5) == true);",
          "    assert!(std::panic::catch_unwind(|| rng.random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rng.random_bool(1.1)).is_err());",
          "    for _ in 0..100 { assert!(rng.random_bool(0.3) == false || rng.random_bool(0.3) == true); }",
          "    for _ in 0..100 { assert!(rng.random_bool(0.9) == false || rng.random_bool(0.9) == true); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]