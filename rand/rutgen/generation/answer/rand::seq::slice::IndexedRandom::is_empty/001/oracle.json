[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 0],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let empty_array = TestArray { data: [] };",
          "    let result = empty_array.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 0],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let empty_array = TestArray { data: [] };",
          "    let result = empty_array.is_empty();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 3],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let non_empty_array = TestArray { data: [1, 2, 3] };",
          "    let result = non_empty_array.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let empty_array = TestArray { data: [] };",
          "    let result_empty = empty_array.is_empty();",
          "    assert_eq!(result_empty, true);"
        ],
        "code": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 3],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let non_empty_array = TestArray { data: [1, 2, 3] };",
          "    let result = non_empty_array.is_empty();",
          "    assert_eq!(result, false);",
          "    let empty_array = TestArray { data: [] };",
          "    let result_empty = empty_array.is_empty();",
          "    assert_eq!(result_empty, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 5],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let larger_non_empty_array = TestArray { data: [1, 2, 3, 4, 5] };",
          "    let result = larger_non_empty_array.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(!larger_non_empty_array.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestArray {",
          "        data: [i32; 5],",
          "    }",
          "",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.data[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let larger_non_empty_array = TestArray { data: [1, 2, 3, 4, 5] };",
          "    let result = larger_non_empty_array.is_empty();",
          "    assert!(!larger_non_empty_array.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]