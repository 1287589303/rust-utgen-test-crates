[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let numerator = 101;",
          "    let denominator = 100;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let numerator = 101;",
          "    let denominator = 100;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let numerator = 100;",
          "    let denominator = 0;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let numerator = 100;",
          "    let denominator = 0;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let numerator = 50;",
          "    let denominator = 50;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let numerator = 50;",
          "    let denominator = 50;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let numerator = 0;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(Bernoulli { p_int: 0 }));",
          "    ",
          "    let numerator = 1;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    ",
          "    let numerator = 2;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let numerator = 1;",
          "    let denominator = 0;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let numerator = 3;",
          "    let denominator = 3;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE }));"
        ],
        "code": [
          "{",
          "    let numerator = 0;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Ok(Bernoulli { p_int: 0 }));",
          "    ",
          "    let numerator = 1;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    ",
          "    let numerator = 2;",
          "    let denominator = 1;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let numerator = 1;",
          "    let denominator = 0;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let numerator = 3;",
          "    let denominator = 3;",
          "    let result = Bernoulli::from_ratio(numerator, denominator);",
          "    assert_eq!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]