[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::from_ratio(0, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(BernoulliError::InvalidProbability)));",
          "    let result = Bernoulli::from_ratio(1, 1);",
          "    assert!(matches!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE })));",
          "    let result = Bernoulli::from_ratio(2, 0);",
          "    assert!(matches!(result, Err(BernoulliError::InvalidProbability)));",
          "    let result = Bernoulli::from_ratio(1, 2);",
          "    assert!(matches!(result, Ok(Bernoulli { p_int })) && p_int > 0 && p_int < ALWAYS_TRUE);"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::from_ratio(0, 1);",
          "    assert!(matches!(result, Err(BernoulliError::InvalidProbability)));",
          "    let result = Bernoulli::from_ratio(1, 1);",
          "    assert!(matches!(result, Ok(Bernoulli { p_int: ALWAYS_TRUE })));",
          "    let result = Bernoulli::from_ratio(2, 0);",
          "    assert!(matches!(result, Err(BernoulliError::InvalidProbability)));",
          "    let result = Bernoulli::from_ratio(1, 2);",
          "    assert!(matches!(result, Ok(Bernoulli { p_int })) && p_int > 0 && p_int < ALWAYS_TRUE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::from_ratio(1, 1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Bernoulli { p_int: ALWAYS_TRUE });",
          "    assert!(Bernoulli::from_ratio(2, 0).is_err());",
          "    assert!(Bernoulli::from_ratio(3, 2).is_err());",
          "    assert!(Bernoulli::from_ratio(0, 1).is_ok());",
          "    assert!(Bernoulli::from_ratio(0, 0).is_err());"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::from_ratio(1, 1);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), Bernoulli { p_int: ALWAYS_TRUE });",
          "    assert!(Bernoulli::from_ratio(2, 0).is_err());",
          "    assert!(Bernoulli::from_ratio(3, 2).is_err());",
          "    assert!(Bernoulli::from_ratio(0, 1).is_ok());",
          "    assert!(Bernoulli::from_ratio(0, 0).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = Bernoulli::from_ratio(2, 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Bernoulli::from_ratio(2, 2), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert_eq!(Bernoulli::from_ratio(1, 0), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::from_ratio(3, 2), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::from_ratio(0, 3), Ok(Bernoulli { p_int: 0 }));",
          "    assert_eq!(Bernoulli::from_ratio(2, 3), Ok(Bernoulli { p_int: ((2.0 / 3.0) * SCALE) as u64 }));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::from_ratio(2, 1);",
          "    assert_eq!(Bernoulli::from_ratio(2, 2), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert_eq!(Bernoulli::from_ratio(1, 0), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::from_ratio(3, 2), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::from_ratio(0, 3), Ok(Bernoulli { p_int: 0 }));",
          "    assert_eq!(Bernoulli::from_ratio(2, 3), Ok(Bernoulli { p_int: ((2.0 / 3.0) * SCALE) as u64 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = Bernoulli::from_ratio(1, 0);",
          "}"
        ],
        "oracle": [
          "    let result = Bernoulli::from_ratio(1, 0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::from_ratio(1, 0);",
          "    let result = Bernoulli::from_ratio(1, 0);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]