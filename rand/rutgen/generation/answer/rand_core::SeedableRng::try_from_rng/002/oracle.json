[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), self.bytes.len());",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            // Normally you'd construct a RNG from the seed",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],",
          "        filled: true,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_ok(), true);",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).unwrap(), TestRng::from_seed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));",
          "    rng.filled = false;",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), self.bytes.len());",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            // Normally you'd construct a RNG from the seed",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],",
          "        filled: true,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng);",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_ok(), true);",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).unwrap(), TestRng::from_seed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));",
          "    rng.filled = false;",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), self.bytes.len());",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![],",
          "        filled: false,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng).unwrap_err();",
          "}"
        ],
        "oracle": [
          "    assert!(TestRng::try_from_rng(&mut rng).is_err());",
          "    rng.filled = true;",
          "    rng.bytes = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).unwrap(), TestRng::from_seed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));",
          "    assert!(TestRng::try_from_rng(&mut rng).is_ok());"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), self.bytes.len());",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![],",
          "        filled: false,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng).unwrap_err();",
          "    assert!(TestRng::try_from_rng(&mut rng).is_err());",
          "    rng.filled = true;",
          "    rng.bytes = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).unwrap(), TestRng::from_seed([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));",
          "    assert!(TestRng::try_from_rng(&mut rng).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), 16); // Boundary case for size",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],",
          "        filled: true,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_ok(), true);",
          "    assert!(TestRng::try_from_rng(&mut rng).unwrap() instanceof TestRng);",
          "    assert_eq!(rng.bytes.len(), 16);",
          "    assert_eq!(rng.bytes[..8], vec![1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(rng.filled, true);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        bytes: Vec<u8>,",
          "        filled: bool,",
          "    }",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), Self::Error> {",
          "            if self.filled {",
          "                let to_fill = std::cmp::min(dest.len(), 16); // Boundary case for size",
          "                dest[..to_fill].copy_from_slice(&self.bytes[..to_fill]);",
          "                Ok(())",
          "            } else {",
          "                Err(())",
          "            }",
          "        }",
          "    }",
          "",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng { bytes: Vec::new(), filled: false }",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng {",
          "        bytes: vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],",
          "        filled: true,",
          "    };",
          "    let _ = TestRng::try_from_rng(&mut rng);",
          "    assert_eq!(TestRng::try_from_rng(&mut rng).is_ok(), true);",
          "    assert!(TestRng::try_from_rng(&mut rng).unwrap() instanceof TestRng);",
          "    assert_eq!(rng.bytes.len(), 16);",
          "    assert_eq!(rng.bytes[..8], vec![1, 2, 3, 4, 5, 6, 7, 8]);",
          "    assert_eq!(rng.filled, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]