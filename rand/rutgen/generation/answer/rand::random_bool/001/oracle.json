[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = rand::random_bool(0.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err());",
          "    result = rand::random_bool(0.5);",
          "    assert!(result == true || result == false);",
          "    result = rand::random_bool(0.0);",
          "    assert_eq!(result, false);",
          "    result = rand::random_bool(1.0);",
          "    assert_eq!(result, true);",
          "    result = rand::random_bool(0.25);",
          "    assert!(result == true || result == false);",
          "    result = rand::random_bool(0.75);",
          "    assert!(result == true || result == false);"
        ],
        "code": [
          "{",
          "    let result = rand::random_bool(0.0);",
          "    assert_eq!(result, false);",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err());",
          "    result = rand::random_bool(0.5);",
          "    assert!(result == true || result == false);",
          "    result = rand::random_bool(0.0);",
          "    assert_eq!(result, false);",
          "    result = rand::random_bool(1.0);",
          "    assert_eq!(result, true);",
          "    result = rand::random_bool(0.25);",
          "    assert!(result == true || result == false);",
          "    result = rand::random_bool(0.75);",
          "    assert!(result == true || result == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = rand::random_bool(1.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    #[test]",
          "    fn test_random_bool_zero() {",
          "    let result = rand::random_bool(0.0);",
          "    assert_eq!(result, false);",
          "    }",
          "    #[test]",
          "    #[should_panic]",
          "    fn test_random_bool_negative() {",
          "    rand::random_bool(-0.1);",
          "    }",
          "    #[test]",
          "    #[should_panic]",
          "    fn test_random_bool_above_one() {",
          "    rand::random_bool(1.1);",
          "    }",
          "    #[test]",
          "    fn test_random_bool_third_probability() {",
          "    let p = 1.0 / 3.0;",
          "    let result = rand::random_bool(p);",
          "    assert!(result == true || result == false);",
          "    }",
          "    #[test]",
          "    fn test_random_bool_half_probability() {",
          "    let p = 0.5;",
          "    let result = rand::random_bool(p);",
          "    assert!(result == true || result == false);",
          "    }"
        ],
        "code": [
          "{",
          "    let result = rand::random_bool(1.0);",
          "    assert_eq!(result, true);",
          "    #[test]",
          "    fn test_random_bool_zero() {",
          "    let result = rand::random_bool(0.0);",
          "    assert_eq!(result, false);",
          "    }",
          "    #[test]",
          "    #[should_panic]",
          "    fn test_random_bool_negative() {",
          "    rand::random_bool(-0.1);",
          "    }",
          "    #[test]",
          "    #[should_panic]",
          "    fn test_random_bool_above_one() {",
          "    rand::random_bool(1.1);",
          "    }",
          "    #[test]",
          "    fn test_random_bool_third_probability() {",
          "    let p = 1.0 / 3.0;",
          "    let result = rand::random_bool(p);",
          "    assert!(result == true || result == false);",
          "    }",
          "    #[test]",
          "    fn test_random_bool_half_probability() {",
          "    let p = 0.5;",
          "    let result = rand::random_bool(p);",
          "    assert!(result == true || result == false);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = rand::random_bool(-0.1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(0.0)).is_err(), false);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(1.0)).is_err(), false);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(0.5)).is_err(), false);"
        ],
        "code": [
          "{",
          "    let result = rand::random_bool(-0.1);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err(), true);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(0.0)).is_err(), false);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(1.0)).is_err(), false);",
          "    assert_eq!(std::panic::catch_unwind(|| rand::random_bool(0.5)).is_err(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = rand::random_bool(1.1);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.0)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(0.0)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(0.5)).is_ok());"
        ],
        "code": [
          "{",
          "    let result = rand::random_bool(1.1);",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(-0.1)).is_err());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(1.0)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(0.0)).is_ok());",
          "    assert!(std::panic::catch_unwind(|| rand::random_bool(0.5)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]