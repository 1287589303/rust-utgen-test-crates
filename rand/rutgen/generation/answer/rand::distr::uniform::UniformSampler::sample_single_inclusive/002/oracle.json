[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive(1, 10, &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive(0, 0, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result1.is_ok());",
          "    assert_eq!(result1.unwrap(), sample_in_range(1, 10, &mut rng));",
          "    assert!(result2.is_ok());",
          "    assert_eq!(result2.unwrap(), 0);",
          "    assert!(UniformSampler::sample_single_inclusive(f64::NAN, 1.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(1.0, f64::NAN, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(10, 1, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(f64::INFINITY, 1.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(1.0, f64::INFINITY, &mut rng).is_err());"
        ],
        "code": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive(1, 10, &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive(0, 0, &mut rng);",
          "    assert!(result1.is_ok());",
          "    assert_eq!(result1.unwrap(), sample_in_range(1, 10, &mut rng));",
          "    assert!(result2.is_ok());",
          "    assert_eq!(result2.unwrap(), 0);",
          "    assert!(UniformSampler::sample_single_inclusive(f64::NAN, 1.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(1.0, f64::NAN, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(10, 1, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(f64::INFINITY, 1.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(1.0, f64::INFINITY, &mut rng).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive(1.0, 10.0, &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive(5.5, 5.5, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result1.is_ok());",
          "    assert_eq!(result1.unwrap(), 1.0..=10.0);",
          "    assert!(result2.is_ok());",
          "    assert_eq!(result2.unwrap(), 5.5);"
        ],
        "code": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive(1.0, 10.0, &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive(5.5, 5.5, &mut rng);",
          "    assert!(result1.is_ok());",
          "    assert_eq!(result1.unwrap(), 1.0..=10.0);",
          "    assert!(result2.is_ok());",
          "    assert_eq!(result2.unwrap(), 5.5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let _ = UniformSampler::sample_single_inclusive(10, 1, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(UniformSampler::new_inclusive(1, 10).is_ok(), true);",
          "    assert_eq!(UniformSampler::sample_single_inclusive(1, 10, &mut rng).is_ok(), true);",
          "    assert_eq!(UniformSampler::sample_single_inclusive(0.0, 5.0, &mut rng).is_ok(), true);",
          "    assert!(UniformSampler::sample_single_inclusive(10, 1, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(f64::NAN, 10.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(10.0, f64::INFINITY, &mut rng).is_err());"
        ],
        "code": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let _ = UniformSampler::sample_single_inclusive(10, 1, &mut rng);",
          "    assert_eq!(UniformSampler::new_inclusive(1, 10).is_ok(), true);",
          "    assert_eq!(UniformSampler::sample_single_inclusive(1, 10, &mut rng).is_ok(), true);",
          "    assert_eq!(UniformSampler::sample_single_inclusive(0.0, 5.0, &mut rng).is_ok(), true);",
          "    assert!(UniformSampler::sample_single_inclusive(10, 1, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(f64::NAN, 10.0, &mut rng).is_err());",
          "    assert!(UniformSampler::sample_single_inclusive(10.0, f64::INFINITY, &mut rng).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive('a', 'z', &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive('g', 'g', &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result1.is_ok());",
          "    assert!(result2.is_ok());",
          "    assert!(result1.unwrap() >= 'a' && result1.unwrap() <= 'z');",
          "    assert_eq!(result2.unwrap(), 'g');"
        ],
        "code": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let result1 = UniformSampler::sample_single_inclusive('a', 'z', &mut rng);",
          "    let result2 = UniformSampler::sample_single_inclusive('g', 'g', &mut rng);",
          "    assert!(result1.is_ok());",
          "    assert!(result2.is_ok());",
          "    assert!(result1.unwrap() >= 'a' && result1.unwrap() <= 'z');",
          "    assert_eq!(result2.unwrap(), 'g');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let _ = UniformSampler::sample_single_inclusive(f32::INFINITY, 1.0, &mut rng);",
          "}"
        ],
        "oracle": [
          "    let result = UniformSampler::sample_single_inclusive(f32::INFINITY, 1.0, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(1.0, f32::INFINITY, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(f32::NAN, 1.0, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(-1.0, 1.0, &mut rng); assert!(result.is_ok());",
          "    let result = UniformSampler::sample_single_inclusive(0.0, 0.0, &mut rng); assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct SimpleRng;",
          "    ",
          "    impl RngCore for SimpleRng {",
          "        // Implement required methods...",
          "    }",
          "    ",
          "    let mut rng = SimpleRng;",
          "    ",
          "    let _ = UniformSampler::sample_single_inclusive(f32::INFINITY, 1.0, &mut rng);",
          "    let result = UniformSampler::sample_single_inclusive(f32::INFINITY, 1.0, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(1.0, f32::INFINITY, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(f32::NAN, 1.0, &mut rng); assert_eq!(result, Err(Error::NonFinite));",
          "    let result = UniformSampler::sample_single_inclusive(-1.0, 1.0, &mut rng); assert!(result.is_ok());",
          "    let result = UniformSampler::sample_single_inclusive(0.0, 0.0, &mut rng); assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]