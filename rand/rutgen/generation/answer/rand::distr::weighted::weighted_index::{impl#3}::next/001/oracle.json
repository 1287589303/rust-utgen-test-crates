[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.index, 1);",
          "    assert_eq!(iter.weighted_index.weight(0), Some(SampleValue));",
          "    assert_eq!(iter.next(), Some(SampleValue));"
        ],
        "code": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    iter.next();",
          "    assert_eq!(iter.index, 1);",
          "    assert_eq!(iter.weighted_index.weight(0), Some(SampleValue));",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 1,",
          "    };",
          "",
          "    iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.index, 2);",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 1,",
          "    };",
          "",
          "    iter.next();",
          "    assert_eq!(iter.index, 2);",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 2,",
          "    };",
          "",
          "    iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.index, 3);"
        ],
        "code": [
          "{",
          "    struct SampleValue;",
          "    impl SampleUniform for SampleValue {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let cumulative_weights = vec![SampleValue, SampleValue, SampleValue];",
          "    let total_weight = SampleValue;",
          "    let weight_distribution = ();",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let mut iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 2,",
          "    };",
          "",
          "    iter.next();",
          "    assert_eq!(iter.next(), Some(SampleValue));",
          "    assert_eq!(iter.index, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]