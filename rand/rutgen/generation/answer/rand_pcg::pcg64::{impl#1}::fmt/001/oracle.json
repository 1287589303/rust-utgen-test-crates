[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 0, increment: 0 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "    assert!(output.contains(\"Lcg64Xsh32\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.starts_with(\"Lcg64Xsh32\"));",
          "    assert!(output.ends_with(\"{{}}\"));"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 0, increment: 0 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "    assert!(output.contains(\"Lcg64Xsh32\"));",
          "    assert!(output.len() > 0);",
          "    assert!(output.starts_with(\"Lcg64Xsh32\"));",
          "    assert!(output.ends_with(\"{{}}\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 1, increment: 1 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 1, increment: 1 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 12345, increment: 67890 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 12345, increment: 67890 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 18_446_744_073_709_551_615, increment: 18_446_744_073_709_551_615 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 18_446_744_073_709_551_615, increment: 18_446_744_073_709_551_615 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 9_223_372_036_854_775_807, increment: 9_223_372_036_854_775_807 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "    assert!(output.contains(\"Lcg64Xsh32\"));",
          "    assert!(!output.is_empty());",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.trim(), \"Lcg64Xsh32 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32 { state: 9_223_372_036_854_775_807, increment: 9_223_372_036_854_775_807 };",
          "    let mut output = String::new();",
          "    let _ = write!(&mut output, \"{:?}\", rng);",
          "    assert_eq!(output, \"Lcg64Xsh32 {{}}\");",
          "    assert!(output.contains(\"Lcg64Xsh32\"));",
          "    assert!(!output.is_empty());",
          "    assert!(output.len() > 0);",
          "    assert_eq!(output.trim(), \"Lcg64Xsh32 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]