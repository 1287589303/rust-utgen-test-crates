[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "    ",
          "    let cumulative_weights: Vec<SampleType> = Vec::new();",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let index = 0; // valid for empty weights",
          "    let iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index,",
          "    };",
          "    ",
          "    let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt::write(format!(\"{:?}\", iter)).is_ok(), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"WeightedIndexIter\"), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"weighted_index\"), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"index\"), true);",
          "    assert_eq!(iter.index, 0);",
          "    assert_eq!(iter.weighted_index.cumulative_weights.is_empty(), true);",
          "    assert_eq!(iter.weighted_index.total_weight, total_weight);"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "    ",
          "    let cumulative_weights: Vec<SampleType> = Vec::new();",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "    ",
          "    let index = 0; // valid for empty weights",
          "    let iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index,",
          "    };",
          "    ",
          "    let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    assert_eq!(fmt::write(format!(\"{:?}\", iter)).is_ok(), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"WeightedIndexIter\"), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"weighted_index\"), true);",
          "    assert_eq!(format!(\"{:?}\", iter).contains(\"index\"), true);",
          "    assert_eq!(iter.index, 0);",
          "    assert_eq!(iter.weighted_index.cumulative_weights.is_empty(), true);",
          "    assert_eq!(iter.weighted_index.total_weight, total_weight);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights = vec![SampleType, SampleType];",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    for index in 0..weighted_index.cumulative_weights.len() {",
          "        let iter = WeightedIndexIter {",
          "            weighted_index: &weighted_index,",
          "            index,",
          "        };",
          "        let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", iter), format!(",
          "    \"WeightedIndexIter {{ weighted_index: {:?}, index: {} }}\",",
          "    &weighted_index,",
          "    index",
          "    ));"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights = vec![SampleType, SampleType];",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    for index in 0..weighted_index.cumulative_weights.len() {",
          "        let iter = WeightedIndexIter {",
          "            weighted_index: &weighted_index,",
          "            index,",
          "        };",
          "        let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    }",
          "    assert_eq!(format!(\"{:?}\", iter), format!(",
          "    \"WeightedIndexIter {{ weighted_index: {:?}, index: {} }}\",",
          "    &weighted_index,",
          "    index",
          "    ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights: Vec<SampleType> = vec![SampleType; 100]; // large size",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    for index in 0..weighted_index.cumulative_weights.len() {",
          "        let iter = WeightedIndexIter {",
          "            weighted_index: &weighted_index,",
          "            index,",
          "        };",
          "        let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter)), expected_output);",
          "    assert!(weighted_index.cumulative_weights.len() > 0);",
          "    assert!(weighted_index.total_weight == total_weight);",
          "    assert!(weighted_index.weight_distribution == weight_distribution);",
          "    assert!(iter.index >= 0 && iter.index < weighted_index.cumulative_weights.len());",
          "    let debug_str = format!(\"{:?}\", iter);",
          "    assert!(debug_str.contains(\"WeightedIndexIter\"));",
          "    assert!(debug_str.contains(&format!(\"{:?}\", weighted_index)));",
          "    assert!(debug_str.contains(&iter.index.to_string()));"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights: Vec<SampleType> = vec![SampleType; 100]; // large size",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    for index in 0..weighted_index.cumulative_weights.len() {",
          "        let iter = WeightedIndexIter {",
          "            weighted_index: &weighted_index,",
          "            index,",
          "        };",
          "        let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    }",
          "    assert_eq!(fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter)), expected_output);",
          "    assert!(weighted_index.cumulative_weights.len() > 0);",
          "    assert!(weighted_index.total_weight == total_weight);",
          "    assert!(weighted_index.weight_distribution == weight_distribution);",
          "    assert!(iter.index >= 0 && iter.index < weighted_index.cumulative_weights.len());",
          "    let debug_str = format!(\"{:?}\", iter);",
          "    assert!(debug_str.contains(\"WeightedIndexIter\"));",
          "    assert!(debug_str.contains(&format!(\"{:?}\", weighted_index)));",
          "    assert!(debug_str.contains(&iter.index.to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights = vec![SampleType]; // single element",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let index = weighted_index.cumulative_weights.len(); // boundary case, should be valid if len() == 1",
          "    let iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index,",
          "    };",
          "    let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "}"
        ],
        "oracle": [
          "    let cumulative_weights = vec![SampleType];",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex { cumulative_weights, total_weight, weight_distribution };",
          "    let index = weighted_index.cumulative_weights.len();",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 1 }\");",
          "    let index = weighted_index.cumulative_weights.len() - 1;",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 0 }\");",
          "    let index = 0;",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 0 }\");"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = SampleType;",
          "    }",
          "",
          "    let cumulative_weights = vec![SampleType]; // single element",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let index = weighted_index.cumulative_weights.len(); // boundary case, should be valid if len() == 1",
          "    let iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index,",
          "    };",
          "    let _ = fmt::write(format!(\"/fmt/debug_struct: {:?}\", iter));",
          "    let cumulative_weights = vec![SampleType];",
          "    let total_weight: SampleType = SampleType;",
          "    let weight_distribution = SampleType;",
          "    let weighted_index = WeightedIndex { cumulative_weights, total_weight, weight_distribution };",
          "    let index = weighted_index.cumulative_weights.len();",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 1 }\");",
          "    let index = weighted_index.cumulative_weights.len() - 1;",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 0 }\");",
          "    let index = 0;",
          "    let iter = WeightedIndexIter { weighted_index: &weighted_index, index };",
          "    assert_eq!(format!(\"{:?}\", iter), \"WeightedIndexIter { weighted_index: WeightedIndex { cumulative_weights: [SampleType], total_weight: SampleType, weight_distribution: SampleType }, index: 0 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]