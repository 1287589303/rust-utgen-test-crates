[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 32 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    flipper.flip_c_heads(32);",
          "}"
        ],
        "oracle": [
          "    assert!(!flipper.flip_c_heads(32));",
          "    assert_eq!(flipper.chunk, 0);",
          "    assert_eq!(flipper.chunk_remaining, 0);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 32 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    flipper.flip_c_heads(32);",
          "    assert!(!flipper.flip_c_heads(32));",
          "    assert_eq!(flipper.chunk, 0);",
          "    assert_eq!(flipper.chunk_remaining, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 31 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(31);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 31 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(31);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 30 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(30);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 30 leading zeros",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(30);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 1 leading zero",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert_eq!(flipper.chunk, 0b00000000000000000000000000000000);",
          "    assert_eq!(flipper.chunk_remaining, 31);",
          "    flipper.chunk = 0b00000000000000000000000000000000;",
          "    flipper.chunk_remaining = 32;",
          "    let result = flipper.flip_c_heads(32);",
          "    assert_eq!(result, false);",
          "    assert_eq!(flipper.chunk, 0b00000000000000000000000000000000);",
          "    assert_eq!(flipper.chunk_remaining, 0);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000000000000000000000000000 };",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    flipper.chunk = 0b00000000000000000000000000000000; // 1 leading zero",
          "    flipper.chunk_remaining = 32;",
          "",
          "    let result = flipper.flip_c_heads(1);",
          "    assert_eq!(result, false);",
          "    assert_eq!(flipper.chunk, 0b00000000000000000000000000000000);",
          "    assert_eq!(flipper.chunk_remaining, 31);",
          "    flipper.chunk = 0b00000000000000000000000000000000;",
          "    flipper.chunk_remaining = 32;",
          "    let result = flipper.flip_c_heads(32);",
          "    assert_eq!(result, false);",
          "    assert_eq!(flipper.chunk, 0b00000000000000000000000000000000);",
          "    assert_eq!(flipper.chunk_remaining, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]