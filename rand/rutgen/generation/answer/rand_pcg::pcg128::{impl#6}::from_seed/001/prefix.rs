// Answer 0

#[test]
fn test_from_seed_all_zeroes() {
    let seed: [u8; 16] = [0; 16];
    let rng = Mcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_all_ones() {
    let seed: [u8; 16] = [0xFF; 16];
    let rng = Mcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_partial_zeroes() {
    let seed: [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];
    let rng = Mcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_single_byte_set() {
    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];
    let rng = Mcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_max_bytes() {
    let seed: [u8; 16] = [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80];
    let rng = Mcg128Xsl64::from_seed(seed);
}

#[test]
fn test_from_seed_alternating_bytes() {
    let seed: [u8; 16] = [0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA];
    let rng = Mcg128Xsl64::from_seed(seed);
}

