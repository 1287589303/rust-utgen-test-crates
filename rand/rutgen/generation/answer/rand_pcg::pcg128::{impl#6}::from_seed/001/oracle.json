[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);",
          "    let seed: [u8; 16] = [1; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x0001_0000_0000_0001);",
          "    let seed: [u8; 16] = [255; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00FF_FFFF_FFFF_FFFF);",
          "    let seed: [u8; 16] = [0x1A; 0x2B; 0x3C; 0x4D; 0x5E; 0x6F; 0x7A; 0x8B; 0x9C; 0xAD; 0xBE; 0xCF; 0xD0; 0xE1; 0xF2; 0xE3];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x1A2B_3C4D_5E6F_7A8B_9CAD_BE1F_E3);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 1);",
          "    let seed: [u8; 16] = [1; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x0001_0000_0000_0001);",
          "    let seed: [u8; 16] = [255; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00FF_FFFF_FFFF_FFFF);",
          "    let seed: [u8; 16] = [0x1A; 0x2B; 0x3C; 0x4D; 0x5E; 0x6F; 0x7A; 0x8B; 0x9C; 0xAD; 0xBE; 0xCF; 0xD0; 0xE1; 0xF2; 0xE3];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x1A2B_3C4D_5E6F_7A8B_9CAD_BE1F_E3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0xFF; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);",
          "    let seed: [u8; 16] = [0x00; 16];",
          "    let rng_zero = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_zero.state, 0x00000000000000000000000000000000 | 1);",
          "    let seed: [u8; 16] = [0x01; 16];",
          "    let rng_one = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_one.state, 0x01010101010101010101010101010101 | 1);",
          "    let seed: [u8; 16] = [0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng_ten = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_ten.state, 0x10000000000000000000000000000000 | 1);",
          "    let seed: [u8; 16] = [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80];",
          "    let rng_eighty = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_eighty.state, 0x80808080808080808080808080808080 | 1);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0xFF; 16];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);",
          "    let seed: [u8; 16] = [0x00; 16];",
          "    let rng_zero = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_zero.state, 0x00000000000000000000000000000000 | 1);",
          "    let seed: [u8; 16] = [0x01; 16];",
          "    let rng_one = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_one.state, 0x01010101010101010101010101010101 | 1);",
          "    let seed: [u8; 16] = [0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng_ten = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_ten.state, 0x10000000000000000000000000000000 | 1);",
          "    let seed: [u8; 16] = [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80];",
          "    let rng_eighty = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng_eighty.state, 0x80808080808080808080808080808080 | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x0F0E0D0C0B0A0908_0706050403020100 | 1);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x0F0E0D0C0B0A0908_0706050403020100 | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE);",
          "    let seed: [u8; 16] = [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state & 1, 1);",
          "    assert!(rng.state > 0);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE);",
          "    let seed: [u8; 16] = [0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x00000000000000000000000000000001);",
          "    let seed: [u8; 16] = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state & 1, 1);",
          "    assert!(rng.state > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x0080_8080_8080_8080_8080_8080_8080_8081);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0x0080_8080_8080_8080_8080_8080_8080_8081);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let seed: [u8; 16] = [0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "}"
        ],
        "oracle": [
          "    let seed: [u8; 16] = [0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0xAA55AA55AA55AA55AA55AA55AA55AA55 | 1);",
          "    let seed_zero: [u8; 16] = [0; 16];",
          "    let rng_zero = Mcg128Xsl64::from_seed(seed_zero);",
          "    assert_eq!(rng_zero.state, 1);",
          "    let seed_max: [u8; 16] = [0xFF; 16];",
          "    let rng_max = Mcg128Xsl64::from_seed(seed_max);",
          "    assert_eq!(rng_max.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);"
        ],
        "code": [
          "{",
          "    let seed: [u8; 16] = [0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    let seed: [u8; 16] = [0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA, 0x55, 0xAA];",
          "    let rng = Mcg128Xsl64::from_seed(seed);",
          "    assert_eq!(rng.state, 0xAA55AA55AA55AA55AA55AA55AA55AA55 | 1);",
          "    let seed_zero: [u8; 16] = [0; 16];",
          "    let rng_zero = Mcg128Xsl64::from_seed(seed_zero);",
          "    assert_eq!(rng_zero.state, 1);",
          "    let seed_max: [u8; 16] = [0xFF; 16];",
          "    let rng_max = Mcg128Xsl64::from_seed(seed_max);",
          "    assert_eq!(rng_max.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]