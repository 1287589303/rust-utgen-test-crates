[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [0, 0, 0, 0] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_rng.0.s, [0, 0, 0, 0]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, small_rng.next_u64());",
          "    small_rng.fill_bytes(&mut [0; 16]);",
          "    assert_eq!(small_rng.0.s, [0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [0, 0, 0, 0] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "    assert_eq!(small_rng.0.s, [0, 0, 0, 0]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, small_rng.next_u64());",
          "    small_rng.fill_bytes(&mut [0; 16]);",
          "    assert_eq!(small_rng.0.s, [0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [u64::MAX, u64::MAX, u64::MAX, u64::MAX] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_rng.0.s, [u64::MAX, u64::MAX, u64::MAX, u64::MAX]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, 0);"
        ],
        "code": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [u64::MAX, u64::MAX, u64::MAX, u64::MAX] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "    assert_eq!(small_rng.0.s, [u64::MAX, u64::MAX, u64::MAX, u64::MAX]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [1, 2, 3, 4] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_rng.0.s[0], 1);",
          "    assert_eq!(small_rng.0.s[1], 2);",
          "    assert_eq!(small_rng.0.s[2], 3);",
          "    assert_eq!(small_rng.0.s[3], 4);",
          "    assert!(small_rng.next_u64() <= u64::MAX);",
          "    assert!(small_rng.next_u64() > 0);"
        ],
        "code": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [1, 2, 3, 4] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "    assert_eq!(small_rng.0.s[0], 1);",
          "    assert_eq!(small_rng.0.s[1], 2);",
          "    assert_eq!(small_rng.0.s[2], 3);",
          "    assert_eq!(small_rng.0.s[3], 4);",
          "    assert!(small_rng.next_u64() <= u64::MAX);",
          "    assert!(small_rng.next_u64() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [5, 10, 15, 20] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(small_rng.0.s, [5, 10, 15, 20]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    small_rng.fill_bytes(&mut [0; 8]);",
          "    assert_ne!(small_rng.0.s, [5, 10, 15, 20]);",
          "    assert_ne!(small_rng.0.s[0], rng.s[0]);",
          "    assert_ne!(small_rng.0.s[1], rng.s[1]);",
          "    assert_ne!(small_rng.0.s[2], rng.s[2]);",
          "    assert_ne!(small_rng.0.s[3], rng.s[3]);"
        ],
        "code": [
          "{",
          "    let rng = Xoshiro256PlusPlus { s: [5, 10, 15, 20] };",
          "    let mut small_rng = SmallRng(rng);",
          "    small_rng.next_u64();",
          "    assert_eq!(small_rng.0.s, [5, 10, 15, 20]);",
          "    let result = small_rng.next_u64();",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    small_rng.fill_bytes(&mut [0; 8]);",
          "    assert_ne!(small_rng.0.s, [5, 10, 15, 20]);",
          "    assert_ne!(small_rng.0.s[0], rng.s[0]);",
          "    assert_ne!(small_rng.0.s[1], rng.s[1]);",
          "    assert_ne!(small_rng.0.s[2], rng.s[2]);",
          "    assert_ne!(small_rng.0.s[3], rng.s[3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]