[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 16];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 16];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 4);",
          "    assert_eq!(filled_u8, 16);",
          "    assert_eq!(dest, [1u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8]);"
        ],
        "code": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 16];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 16];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 4);",
          "    assert_eq!(filled_u8, 16);",
          "    assert_eq!(dest, [1u8, 0u8, 0u8, 0u8, 2u8, 0u8, 0u8, 0u8, 3u8, 0u8, 0u8, 0u8, 4u8, 0u8, 0u8, 0u8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 8];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 8];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    ",
          "    let mut src_empty = [];",
          "    let mut dest_empty = [0u8; 8];",
          "    let (consumed_u32_empty, filled_u8_empty) = fill_via_u32_chunks(&mut src_empty, &mut dest_empty);",
          "    assert_eq!(consumed_u32_empty, 0);",
          "    assert_eq!(filled_u8_empty, 0);",
          "    assert_eq!(dest_empty, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    ",
          "    let mut src_partial = [1u32];",
          "    let mut dest_partial = [0u8; 8];",
          "    let (consumed_u32_partial, filled_u8_partial) = fill_via_u32_chunks(&mut src_partial, &mut dest_partial);",
          "    assert_eq!(consumed_u32_partial, 1);",
          "    assert_eq!(filled_u8_partial, 4);",
          "    assert_eq!(dest_partial, [1, 0, 0, 0, 0, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 8];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 8];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    ",
          "    let mut src_empty = [];",
          "    let mut dest_empty = [0u8; 8];",
          "    let (consumed_u32_empty, filled_u8_empty) = fill_via_u32_chunks(&mut src_empty, &mut dest_empty);",
          "    assert_eq!(consumed_u32_empty, 0);",
          "    assert_eq!(filled_u8_empty, 0);",
          "    assert_eq!(dest_empty, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    ",
          "    let mut src_partial = [1u32];",
          "    let mut dest_partial = [0u8; 8];",
          "    let (consumed_u32_partial, filled_u8_partial) = fill_via_u32_chunks(&mut src_partial, &mut dest_partial);",
          "    assert_eq!(consumed_u32_partial, 1);",
          "    assert_eq!(filled_u8_partial, 4);",
          "    assert_eq!(dest_partial, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut src = [1u32, 2u32];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut src = [1u32, 2u32];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest[0..8], [1u8, 0, 0, 0, 2u8, 0, 0, 0]);",
          "    assert_eq!(src, [1u32, 2u32]);"
        ],
        "code": [
          "{",
          "    let mut src = [1u32, 2u32];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    let mut src = [1u32, 2u32];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest[0..8], [1u8, 0, 0, 0, 2u8, 0, 0, 0]);",
          "    assert_eq!(src, [1u32, 2u32]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 5];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [1, 0, 0, 0, 0]);",
          "    assert_eq!(src, [1, 2, 3]);",
          "    ",
          "    let mut src = [0u32, 0u32, 0u32];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 0);",
          "    assert_eq!(filled_u8, 0);",
          "    assert_eq!(dest, [0, 0, 0, 0]);",
          "    ",
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 10];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0, 0, 0]);",
          "    assert_eq!(src, [1, 2, 3, 4]);",
          "    ",
          "    let mut src = [1u32];",
          "    let mut dest = [0u8; 3];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 1);",
          "    assert_eq!(dest, [1, 0, 0]);",
          "    assert_eq!(src, [1]);",
          "    ",
          "    let mut src = [u32::MAX];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [255, 255, 255, 255]);",
          "    assert_eq!(src, [u32::MAX]);"
        ],
        "code": [
          "{",
          "    let mut src = [1u32, 2u32, 3u32];",
          "    let mut dest = [0u8; 5];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [1, 0, 0, 0, 0]);",
          "    assert_eq!(src, [1, 2, 3]);",
          "    ",
          "    let mut src = [0u32, 0u32, 0u32];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 0);",
          "    assert_eq!(filled_u8, 0);",
          "    assert_eq!(dest, [0, 0, 0, 0]);",
          "    ",
          "    let mut src = [1u32, 2u32, 3u32, 4u32];",
          "    let mut dest = [0u8; 10];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 8);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0, 0, 0]);",
          "    assert_eq!(src, [1, 2, 3, 4]);",
          "    ",
          "    let mut src = [1u32];",
          "    let mut dest = [0u8; 3];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 1);",
          "    assert_eq!(dest, [1, 0, 0]);",
          "    assert_eq!(src, [1]);",
          "    ",
          "    let mut src = [u32::MAX];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [255, 255, 255, 255]);",
          "    assert_eq!(src, [u32::MAX]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut src: [u32; 0] = [];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut src: [u32; 0] = [];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 0);",
          "    assert_eq!(filled_u8, 0);",
          "    assert_eq!(dest, [0, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 1] = [1];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 2] = [1, 2];",
          "    let mut dest = [0u8; 5];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest[..4], [1, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 3] = [1, 2, 3];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 3);",
          "    assert_eq!(filled_u8, 12);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0]);"
        ],
        "code": [
          "{",
          "    let mut src: [u32; 0] = [];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    let mut src: [u32; 0] = [];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 0);",
          "    assert_eq!(filled_u8, 0);",
          "    assert_eq!(dest, [0, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 1] = [1];",
          "    let mut dest = [0u8; 4];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 1);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 2] = [1, 2];",
          "    let mut dest = [0u8; 5];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 2);",
          "    assert_eq!(filled_u8, 4);",
          "    assert_eq!(dest[..4], [1, 0, 0, 0]);",
          "    ",
          "    let mut src: [u32; 3] = [1, 2, 3];",
          "    let mut dest = [0u8; 12];",
          "    let (consumed_u32, filled_u8) = fill_via_u32_chunks(&mut src, &mut dest);",
          "    assert_eq!(consumed_u32, 3);",
          "    assert_eq!(filled_u8, 12);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]