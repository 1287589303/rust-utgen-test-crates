[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    let _ = bernoulli.p();",
          "}"
        ],
        "oracle": [
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    let result = bernoulli.p();",
          "    assert_eq!(result, 0.0 / SCALE);",
          "    assert!(result.is_finite());",
          "    assert!(result >= 0.0);",
          "    assert!(result <= 1.0);"
        ],
        "code": [
          "{",
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    let _ = bernoulli.p();",
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    let result = bernoulli.p();",
          "    assert_eq!(result, 0.0 / SCALE);",
          "    assert!(result.is_finite());",
          "    assert!(result >= 0.0);",
          "    assert!(result <= 1.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bernoulli = Bernoulli { p_int: (u64::MAX >> 1) }; ",
          "    let _ = bernoulli.p();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bernoulli.p(), (u64::MAX >> 1) as f64 / SCALE);"
        ],
        "code": [
          "{",
          "    let bernoulli = Bernoulli { p_int: (u64::MAX >> 1) }; ",
          "    let _ = bernoulli.p();",
          "    assert_eq!(bernoulli.p(), (u64::MAX >> 1) as f64 / SCALE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
          "    let _ = bernoulli.p();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bernoulli.p(), (u64::MAX - 1) as f64 / SCALE);"
        ],
        "code": [
          "{",
          "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
          "    let _ = bernoulli.p();",
          "    assert_eq!(bernoulli.p(), (u64::MAX - 1) as f64 / SCALE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bernoulli = Bernoulli { p_int: 1 };",
          "    let _ = bernoulli.p();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bernoulli.p(), 1.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 2 };",
          "    assert_eq!(bernoulli.p(), 2.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 100 };",
          "    assert_eq!(bernoulli.p(), 100.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: ALWAYS_TRUE - 1 };",
          "    assert_eq!(bernoulli.p(), (ALWAYS_TRUE - 1) as f64 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    assert_eq!(bernoulli.p(), 0.0);"
        ],
        "code": [
          "{",
          "    let bernoulli = Bernoulli { p_int: 1 };",
          "    let _ = bernoulli.p();",
          "    assert_eq!(bernoulli.p(), 1.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 2 };",
          "    assert_eq!(bernoulli.p(), 2.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 100 };",
          "    assert_eq!(bernoulli.p(), 100.0 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: ALWAYS_TRUE - 1 };",
          "    assert_eq!(bernoulli.p(), (ALWAYS_TRUE - 1) as f64 / SCALE);",
          "    let bernoulli = Bernoulli { p_int: 0 };",
          "    assert_eq!(bernoulli.p(), 0.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bernoulli = Bernoulli { p_int: u64::MAX / 10 }; ",
          "    let _ = bernoulli.p();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bernoulli.p(), (u64::MAX / 10) as f64 / SCALE);"
        ],
        "code": [
          "{",
          "    let bernoulli = Bernoulli { p_int: u64::MAX / 10 }; ",
          "    let _ = bernoulli.p();",
          "    assert_eq!(bernoulli.p(), (u64::MAX / 10) as f64 / SCALE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]