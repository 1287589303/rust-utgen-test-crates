[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, vec![0u32; 1]);",
          "    assert!(std::panic::catch_unwind(|| read_u32_into(src, &mut dst)).is_err());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);",
          "    assert_eq!(dst, vec![0u32; 1]);",
          "    assert!(std::panic::catch_unwind(|| read_u32_into(src, &mut dst)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assertion_failed!(src.len() >= 4 * dst.len());",
          "    ",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);  // should panic"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);",
          "    assertion_failed!(src.len() >= 4 * dst.len());",
          "    ",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst = vec![0u32; 1];",
          "    read_u32_into(src, &mut dst);  // should panic",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0u32; 2];",
          "    read_u32_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(src.len() >= 4 * dst.len(), false);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0u32; 2];",
          "    read_u32_into(src, &mut dst);"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0u32; 2];",
          "    read_u32_into(src, &mut dst);",
          "    assert_eq!(src.len() >= 4 * dst.len(), false);",
          "    let src: &[u8] = &[1, 2, 3, 4, 5];",
          "    let mut dst = vec![0u32; 2];",
          "    read_u32_into(src, &mut dst);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]