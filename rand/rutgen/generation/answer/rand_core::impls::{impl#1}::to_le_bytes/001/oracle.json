[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 1;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 255;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 256;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 1, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = u64::MAX;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let value: u64 = 0;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 1;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 255;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 256;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 1, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = u64::MAX;",
          "    result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 1;",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 255;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 256;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 1, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 0;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = u64::MAX;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);"
        ],
        "code": [
          "{",
          "    let value: u64 = 1;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 255;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 256;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 1, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = 0;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]);",
          "    let value: u64 = u64::MAX;",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 9223372036854775807; // Middle of u64 range",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 127]);"
        ],
        "code": [
          "{",
          "    let value: u64 = 9223372036854775807; // Middle of u64 range",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 127]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: u64 = 18446744073709551615; // Maximum u64 value",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);",
          "    assert_eq!(result.len(), 8);",
          "    assert_eq!(result.as_ref(), &value.to_le_bytes());"
        ],
        "code": [
          "{",
          "    let value: u64 = 18446744073709551615; // Maximum u64 value",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [255, 255, 255, 255, 255, 255, 255, 255]);",
          "    assert_eq!(result.len(), 8);",
          "    assert_eq!(result.as_ref(), &value.to_le_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let value: i64 = -1; // Negative value, should panic if incorrect",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 8);",
          "    assert_eq!(result, value.to_le_bytes());",
          "    assert_eq!(value.to_le_bytes(), result);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result[0] == ((value >> 0) & 0xFF) as u8);",
          "    assert!(result[1] == ((value >> 8) & 0xFF) as u8);",
          "    assert!(result[2] == ((value >> 16) & 0xFF) as u8);",
          "    assert!(result[3] == ((value >> 24) & 0xFF) as u8);",
          "    assert!(result[4] == ((value >> 32) & 0xFF) as u8);",
          "    assert!(result[5] == ((value >> 40) & 0xFF) as u8);",
          "    assert!(result[6] == ((value >> 48) & 0xFF) as u8);",
          "    assert!(result[7] == ((value >> 56) & 0xFF) as u8);"
        ],
        "code": [
          "{",
          "    let value: i64 = -1; // Negative value, should panic if incorrect",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result.len(), 8);",
          "    assert_eq!(result, value.to_le_bytes());",
          "    assert_eq!(value.to_le_bytes(), result);",
          "    assert!(result.is_empty() == false);",
          "    assert!(result[0] == ((value >> 0) & 0xFF) as u8);",
          "    assert!(result[1] == ((value >> 8) & 0xFF) as u8);",
          "    assert!(result[2] == ((value >> 16) & 0xFF) as u8);",
          "    assert!(result[3] == ((value >> 24) & 0xFF) as u8);",
          "    assert!(result[4] == ((value >> 32) & 0xFF) as u8);",
          "    assert!(result[5] == ((value >> 40) & 0xFF) as u8);",
          "    assert!(result[6] == ((value >> 48) & 0xFF) as u8);",
          "    assert!(result[7] == ((value >> 56) & 0xFF) as u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let value: u128 = 18446744073709551616; // Exceeds max u64 value, should panic if incorrect",
          "    let result = value.to_le_bytes();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]); // Result should be an array of zeroes for panicking value",
          "    assert!(result.len() == 8); // Ensure the length of the returned bytes is 8",
          "    assert!(!result.is_empty()); // Ensure result is not empty",
          "    assert!(result.iter().all(|&byte| byte == 0)); // All bytes should be zero for the out-of-bounds case"
        ],
        "code": [
          "{",
          "    let value: u128 = 18446744073709551616; // Exceeds max u64 value, should panic if incorrect",
          "    let result = value.to_le_bytes();",
          "    assert_eq!(result, [0, 0, 0, 0, 0, 0, 0, 0]); // Result should be an array of zeroes for panicking value",
          "    assert!(result.len() == 8); // Ensure the length of the returned bytes is 8",
          "    assert!(!result.is_empty()); // Ensure result is not empty",
          "    assert!(result.iter().all(|&byte| byte == 0)); // All bytes should be zero for the out-of-bounds case",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]