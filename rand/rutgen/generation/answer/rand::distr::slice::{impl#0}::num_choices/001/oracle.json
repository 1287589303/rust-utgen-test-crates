[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = &[42];",
          "    let choose = Choose::new(slice).unwrap();",
          "    let _ = choose.num_choices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(choose.num_choices().get(), 1);",
          "    assert!(choose.num_choices().is_positive());",
          "    assert_eq!(choose.num_choices().unwrap().get(), 1);",
          "    assert_eq!(choose.num_choices().get(), NonZeroUsize::new(1).unwrap());"
        ],
        "code": [
          "{",
          "    let slice = &[42];",
          "    let choose = Choose::new(slice).unwrap();",
          "    let _ = choose.num_choices();",
          "    assert_eq!(choose.num_choices().get(), 1);",
          "    assert!(choose.num_choices().is_positive());",
          "    assert_eq!(choose.num_choices().unwrap().get(), 1);",
          "    assert_eq!(choose.num_choices().get(), NonZeroUsize::new(1).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice = &[1, 2, 3, 4, 5];",
          "    let choose = Choose::new(slice).unwrap();",
          "    let _ = choose.num_choices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(choose.num_choices(), NonZeroUsize::new(5).unwrap());"
        ],
        "code": [
          "{",
          "    let slice = &[1, 2, 3, 4, 5];",
          "    let choose = Choose::new(slice).unwrap();",
          "    let _ = choose.num_choices();",
          "    assert_eq!(choose.num_choices(), NonZeroUsize::new(5).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: Vec<u32> = (0..std::usize::MAX).map(|x| x as u32).collect();",
          "    let choose = Choose::new(&slice).unwrap();",
          "    let _ = choose.num_choices();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(choose.num_choices(), NonZeroUsize::new(slice.len()).unwrap());"
        ],
        "code": [
          "{",
          "    let slice: Vec<u32> = (0..std::usize::MAX).map(|x| x as u32).collect();",
          "    let choose = Choose::new(&slice).unwrap();",
          "    let _ = choose.num_choices();",
          "    assert_eq!(choose.num_choices(), NonZeroUsize::new(slice.len()).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let _ = Choose::new(slice).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(Choose::new(&[]).is_err());",
          "    let choose = Choose::new(&[1, 2, 3]).unwrap();",
          "    assert_eq!(choose.num_choices().get(), 3);"
        ],
        "code": [
          "{",
          "    let slice: &[u32] = &[];",
          "    let _ = Choose::new(slice).unwrap();",
          "    assert!(Choose::new(&[]).is_err());",
          "    let choose = Choose::new(&[1, 2, 3]).unwrap();",
          "    assert_eq!(choose.num_choices().get(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]