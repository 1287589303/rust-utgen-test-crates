[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1, 2, 3, 4] };",
          "    let mut results = vec![0; 4];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    block_rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 2);",
          "    assert_eq!(results, [1, 2, 3, 4]);",
          "    assert!(dest.len() <= 8);",
          "    assert!(block_rng.core.generate.called);",
          "    assert!(block_rng.index() < results.len());"
        ],
        "code": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1, 2, 3, 4] };",
          "    let mut results = vec![0; 4];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    block_rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 2);",
          "    assert_eq!(results, [1, 2, 3, 4]);",
          "    assert!(dest.len() <= 8);",
          "    assert!(block_rng.core.generate.called);",
          "    assert!(block_rng.index() < results.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1] }; // Only one u32 to fill the whole array.",
          "    let mut results = vec![0; 1];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    block_rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);",
          "    assert_eq!(block_rng.results.as_ref().len(), 1);",
          "    block_rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);",
          "    assert_eq!(block_rng.results.as_ref().len(), 1);",
          "    block_rng.reset();",
          "    assert_eq!(block_rng.index(), 0);",
          "    let mut dest_full: [u8; 8] = [0; 8];",
          "    block_rng.fill_bytes(&mut dest_full);",
          "    assert_eq!(dest_full, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);"
        ],
        "code": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1] }; // Only one u32 to fill the whole array.",
          "    let mut results = vec![0; 1];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    block_rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);",
          "    assert_eq!(block_rng.results.as_ref().len(), 1);",
          "    block_rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest, [1, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);",
          "    assert_eq!(block_rng.results.as_ref().len(), 1);",
          "    block_rng.reset();",
          "    assert_eq!(block_rng.index(), 0);",
          "    let mut dest_full: [u8; 8] = [0; 8];",
          "    block_rng.fill_bytes(&mut dest_full);",
          "    assert_eq!(dest_full, [1, 0, 0, 0, 0, 0, 0, 0]);",
          "    assert_eq!(block_rng.index(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1, 2] };",
          "    let mut results = vec![0; 2];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "    ",
          "    let mut dest: [u8; 8] = [0; 8];  // Enough room for two u32 values.",
          "    block_rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    assert!(block_rng.index() == 2);",
          "    assert!(block_rng.results.as_ref() == &[1, 2]);",
          "    assert!(dest.len() == 8);",
          "    assert!(block_rng.results.as_ref().len() == 2);",
          "    assert!(block_rng.index < block_rng.results.as_ref().len());"
        ],
        "code": [
          "{",
          "    struct TestCore {",
          "        data: Vec<u32>,",
          "    }",
          "",
          "    impl BlockRngCore for TestCore {",
          "        type Item = u32;",
          "        type Results = Vec<u32>;",
          "",
          "        fn generate(&mut self, results: &mut Self::Results) {",
          "            results.copy_from_slice(&self.data);",
          "        }",
          "    }",
          "",
          "    let mut test_core = TestCore { data: vec![1, 2] };",
          "    let mut results = vec![0; 2];",
          "    let mut block_rng = BlockRng::new(test_core);",
          "    ",
          "    let mut dest: [u8; 8] = [0; 8];  // Enough room for two u32 values.",
          "    block_rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest, [1, 0, 0, 0, 2, 0, 0, 0]);",
          "    assert!(block_rng.index() == 2);",
          "    assert!(block_rng.results.as_ref() == &[1, 2]);",
          "    assert!(dest.len() == 8);",
          "    assert!(block_rng.results.as_ref().len() == 2);",
          "    assert!(block_rng.index < block_rng.results.as_ref().len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]