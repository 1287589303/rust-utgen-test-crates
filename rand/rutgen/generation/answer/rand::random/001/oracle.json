[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: u8 = rand::random();",
          "}"
        ],
        "oracle": [
          "    assert!(result >= 0 && result <= 255);",
          "    assert_eq!(std::any::type_name::<u8>(), std::any::type_name_of_val(&result));",
          "    ",
          "    let result_f64: f64 = rand::random();",
          "    assert!(result_f64 >= 0.0 && result_f64 <= 1.0);",
          "    assert_eq!(std::any::type_name::<f64>(), std::any::type_name_of_val(&result_f64));",
          "    ",
          "    let result_bool: bool = rand::random();",
          "    assert!(result_bool == true || result_bool == false);"
        ],
        "code": [
          "{",
          "    let result: u8 = rand::random();",
          "    assert!(result >= 0 && result <= 255);",
          "    assert_eq!(std::any::type_name::<u8>(), std::any::type_name_of_val(&result));",
          "    ",
          "    let result_f64: f64 = rand::random();",
          "    assert!(result_f64 >= 0.0 && result_f64 <= 1.0);",
          "    assert_eq!(std::any::type_name::<f64>(), std::any::type_name_of_val(&result_f64));",
          "    ",
          "    let result_bool: bool = rand::random();",
          "    assert!(result_bool == true || result_bool == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: f32 = rand::random();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<f32>(), 4);",
          "    assert!(result >= 0.0 && result <= 1.0);"
        ],
        "code": [
          "{",
          "    let result: f32 = rand::random();",
          "    assert_eq!(std::mem::size_of::<f32>(), 4);",
          "    assert!(result >= 0.0 && result <= 1.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: f64 = rand::random();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_finite(), \"The generated random value should be finite for f64.\");",
          "    assert!(result >= 0.0 && result <= 1.0, \"The generated random value should be in the range [0.0, 1.0] for f64.\");",
          "    ",
          "    let result_u8: u8 = rand::random();",
          "    assert!(result_u8 <= 255, \"The generated random value should be in the range [0, 255] for u8.\");",
          "    ",
          "    let result_bool: bool = rand::random();",
          "    assert!(result_bool == true || result_bool == false, \"The generated random value should be a boolean (true or false).\");",
          "    ",
          "    let result_vec: Vec<f64> = (0..100).map(|_| rand::random()).collect();",
          "    for &value in &result_vec {",
          "    assert!(value.is_finite(), \"The generated random value should be finite for f64 in vector.\");",
          "    assert!(value >= 0.0 && value <= 1.0, \"All values in the vector should be in the range [0.0, 1.0] for f64.\");",
          "    }"
        ],
        "code": [
          "{",
          "    let result: f64 = rand::random();",
          "    assert!(result.is_finite(), \"The generated random value should be finite for f64.\");",
          "    assert!(result >= 0.0 && result <= 1.0, \"The generated random value should be in the range [0.0, 1.0] for f64.\");",
          "    ",
          "    let result_u8: u8 = rand::random();",
          "    assert!(result_u8 <= 255, \"The generated random value should be in the range [0, 255] for u8.\");",
          "    ",
          "    let result_bool: bool = rand::random();",
          "    assert!(result_bool == true || result_bool == false, \"The generated random value should be a boolean (true or false).\");",
          "    ",
          "    let result_vec: Vec<f64> = (0..100).map(|_| rand::random()).collect();",
          "    for &value in &result_vec {",
          "    assert!(value.is_finite(), \"The generated random value should be finite for f64 in vector.\");",
          "    assert!(value >= 0.0 && value <= 1.0, \"All values in the vector should be in the range [0.0, 1.0] for f64.\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: bool = rand::random();",
          "}"
        ],
        "oracle": [
          "    let result: u8 = rand::random(); assert!(result >= 0 && result <= 255);",
          "    let result: f64 = rand::random(); assert!(result >= 0.0 && result <= 1.0);",
          "    let result: bool = rand::random(); assert!(result == true || result == false);",
          "    let result: i32 = rand::random(); assert!(result >= i32::MIN && result <= i32::MAX);",
          "    let result: char = rand::random(); assert!(result.is_ascii());"
        ],
        "code": [
          "{",
          "    let result: bool = rand::random();",
          "    let result: u8 = rand::random(); assert!(result >= 0 && result <= 255);",
          "    let result: f64 = rand::random(); assert!(result >= 0.0 && result <= 1.0);",
          "    let result: bool = rand::random(); assert!(result == true || result == false);",
          "    let result: i32 = rand::random(); assert!(result >= i32::MIN && result <= i32::MAX);",
          "    let result: char = rand::random(); assert!(result.is_ascii());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for _ in 0..10 {",
          "        let _result_u8: u8 = rand::random();",
          "        let _result_f32: f32 = rand::random();",
          "        let _result_f64: f64 = rand::random();",
          "        let _result_bool: bool = rand::random();",
          "    }",
          "}"
        ],
        "oracle": [
          "    let result_u8: u8 = rand::random(); assert!(result_u8 >= 0 && result_u8 <= 255);",
          "    let result_f32: f32 = rand::random(); assert!(result_f32 >= f32::MIN && result_f32 <= f32::MAX);",
          "    let result_f64: f64 = rand::random(); assert!(result_f64 >= f64::MIN && result_f64 <= f64::MAX);",
          "    let result_bool: bool = rand::random(); assert!(result_bool == true || result_bool == false);"
        ],
        "code": [
          "{",
          "    for _ in 0..10 {",
          "        let _result_u8: u8 = rand::random();",
          "        let _result_f32: f32 = rand::random();",
          "        let _result_f64: f64 = rand::random();",
          "        let _result_bool: bool = rand::random();",
          "    }",
          "    let result_u8: u8 = rand::random(); assert!(result_u8 >= 0 && result_u8 <= 255);",
          "    let result_f32: f32 = rand::random(); assert!(result_f32 >= f32::MIN && result_f32 <= f32::MAX);",
          "    let result_f64: f64 = rand::random(); assert!(result_f64 >= f64::MIN && result_f64 <= f64::MAX);",
          "    let result_bool: bool = rand::random(); assert!(result_bool == true || result_bool == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]