[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 0;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string.len(), 0);",
          "    assert!(string.is_empty());",
          "    assert!(string.as_str() == \"\");"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 0;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "    assert_eq!(string.len(), 0);",
          "    assert!(string.is_empty());",
          "    assert!(string.as_str() == \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 5;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string.len(), 5);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert!(string.chars().all(|c| c.is_ascii()));",
          "    assert!(string.chars().all(|c| c.is_lowercase() || c.is_uppercase()));",
          "    assert!(string.chars().any(|c| c.is_alphabetic()));",
          "    assert!(string.bytes().all(|b| (b >= b'a' && b <= b'z') || (b >= b'A' && b <= b'Z')));",
          "    assert!(string.as_bytes().len() == len);",
          "    assert_eq!(string.chars().count(), len);",
          "    assert!(!string.is_empty());"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 5;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "    assert_eq!(string.len(), 5);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert!(string.chars().all(|c| c.is_ascii()));",
          "    assert!(string.chars().all(|c| c.is_lowercase() || c.is_uppercase()));",
          "    assert!(string.chars().any(|c| c.is_alphabetic()));",
          "    assert!(string.bytes().all(|b| (b >= b'a' && b <= b'z') || (b >= b'A' && b <= b'Z')));",
          "    assert!(string.as_bytes().len() == len);",
          "    assert_eq!(string.chars().count(), len);",
          "    assert!(!string.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 50;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "}"
        ],
        "oracle": [
          "    assert!(string.len() == len);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert_eq!(string.chars().all(|c| c.is_ascii()), true);",
          "    assert_eq!(string.chars().all(|c| c.is_alphabetic()), true);",
          "    assert!(string.capacity() >= len);"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 50;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "    assert!(string.len() == len);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert_eq!(string.chars().all(|c| c.is_ascii()), true);",
          "    assert_eq!(string.chars().all(|c| c.is_alphabetic()), true);",
          "    assert!(string.capacity() >= len);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 1000;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(string.len(), 1000);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert!(string.chars().all(|c| c.is_ascii()));",
          "    assert!(string.is_ascii());",
          "    assert!(string.chars().enumerate().all(|(i, c)| i < 1000 && c.is_ascii_alphabetic()));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut string = String::new();",
          "    let len = 1000;",
          "    let alphabetic = Alphabetic;",
          "",
          "    alphabetic.append_string(&mut rng, &mut string, len);",
          "    assert_eq!(string.len(), 1000);",
          "    assert!(string.chars().all(|c| c.is_ascii_alphabetic()));",
          "    assert!(string.chars().all(|c| c.is_ascii()));",
          "    assert!(string.is_ascii());",
          "    assert!(string.chars().enumerate().all(|(i, c)| i < 1000 && c.is_ascii_alphabetic()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]