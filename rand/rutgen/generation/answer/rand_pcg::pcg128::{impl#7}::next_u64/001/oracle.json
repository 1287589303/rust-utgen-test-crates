[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 0 };",
          "    let _result = rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    let mut rng = Mcg128Xsl64 { state: 0 };",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(0.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 1;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(1.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 2;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(2.wrapping_mul(MULTIPLIER)));",
          "    rng.state = u128::MAX;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(u128::MAX.wrapping_mul(MULTIPLIER)));"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 0 };",
          "    let _result = rng.next_u64();",
          "    let mut rng = Mcg128Xsl64 { state: 0 };",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(0.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 1;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(1.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 2;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(2.wrapping_mul(MULTIPLIER)));",
          "    rng.state = u128::MAX;",
          "    assert_eq!(rng.next_u64(), output_xsl_rr(u128::MAX.wrapping_mul(MULTIPLIER)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: u128::MAX };",
          "    let _result = rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, u128::MAX.wrapping_mul(MULTIPLIER));",
          "    assert_eq!(_result, output_xsl_rr(u128::MAX.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 0;",
          "    let _result_zero_state = rng.next_u64();",
          "    assert_eq!(_result_zero_state, output_xsl_rr(0.wrapping_mul(MULTIPLIER)));",
          "    let mut rng_small = Mcg128Xsl64 { state: 1 };",
          "    let _result_small = rng_small.next_u64();",
          "    assert_ne!(_result_small, 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: u128::MAX };",
          "    let _result = rng.next_u64();",
          "    assert_eq!(rng.state, u128::MAX.wrapping_mul(MULTIPLIER));",
          "    assert_eq!(_result, output_xsl_rr(u128::MAX.wrapping_mul(MULTIPLIER)));",
          "    rng.state = 0;",
          "    let _result_zero_state = rng.next_u64();",
          "    assert_eq!(_result_zero_state, output_xsl_rr(0.wrapping_mul(MULTIPLIER)));",
          "    let mut rng_small = Mcg128Xsl64 { state: 1 };",
          "    let _result_small = rng_small.next_u64();",
          "    assert_ne!(_result_small, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 1 };",
          "    let _result = rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);",
          "    assert_eq!(_result, output_xsl_rr(1.wrapping_mul(MULTIPLIER)));",
          "    assert!(rng.state > 1);",
          "    assert_eq!(rng.next_u64(), rng.next_u64());",
          "    assert_ne!(_result, 0);",
          "    assert_ne!(_result, output_xsl_rr(0));"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 1 };",
          "    let _result = rng.next_u64();",
          "    assert_eq!(rng.state, 1);",
          "    assert_eq!(_result, output_xsl_rr(1.wrapping_mul(MULTIPLIER)));",
          "    assert!(rng.state > 1);",
          "    assert_eq!(rng.next_u64(), rng.next_u64());",
          "    assert_ne!(_result, 0);",
          "    assert_ne!(_result, output_xsl_rr(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 12345678901234567890 };",
          "    let _result = rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 12345678901234567890);",
          "    let expected_state = rng.state.wrapping_mul(MULTIPLIER);",
          "    assert_eq!(expected_state, rng.state);",
          "    let result = rng.next_u64();",
          "    assert!(result > 0);",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, rng.next_u64());",
          "    assert!(rng.state > 12345678901234567890);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 12345678901234567890 };",
          "    let _result = rng.next_u64();",
          "    assert_eq!(rng.state, 12345678901234567890);",
          "    let expected_state = rng.state.wrapping_mul(MULTIPLIER);",
          "    assert_eq!(expected_state, rng.state);",
          "    let result = rng.next_u64();",
          "    assert!(result > 0);",
          "    assert!(result <= u64::MAX);",
          "    assert_ne!(result, rng.next_u64());",
          "    assert!(rng.state > 12345678901234567890);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 98765432109876543210 };",
          "    let _result = rng.next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 98765432109876543210);",
          "    assert!(result.is_instance_of::<u64>());",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    rng.state = 98765432109876543210;",
          "    let expected_result = output_xsl_rr(rng.state.wrapping_mul(MULTIPLIER));",
          "    assert_eq!(result, expected_result);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 98765432109876543210 };",
          "    let _result = rng.next_u64();",
          "    assert_eq!(rng.state, 98765432109876543210);",
          "    assert!(result.is_instance_of::<u64>());",
          "    assert!(result >= 0);",
          "    assert!(result <= u64::MAX);",
          "    rng.state = 98765432109876543210;",
          "    let expected_result = output_xsl_rr(rng.state.wrapping_mul(MULTIPLIER));",
          "    assert_eq!(result, expected_result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]