[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 10,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 10,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: -1,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: -1,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 0,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 0,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "    assert_eq!(_cloned.inner, original.inner.clone());",
          "    assert_eq!(_cloned.reseeder, original.reseeder.clone());",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: i64::MAX,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_cloned.inner, original.inner);",
          "    assert_eq!(_cloned.reseeder, original.reseeder);",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "    assert_ne!(_cloned as *const _, original as *const _);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: i64::MAX,",
          "        bytes_until_reseed: 5,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "    assert_eq!(_cloned.inner, original.inner);",
          "    assert_eq!(_cloned.reseeder, original.reseeder);",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "    assert_ne!(_cloned as *const _, original as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 5,",
          "        bytes_until_reseed: 0,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_cloned.inner, original.inner);",
          "    assert_eq!(_cloned.reseeder, original.reseeder);",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl BlockRngCore for TestRng {}",
          "    impl SeedableRng for TestRng {}",
          "",
          "    struct TestSeeder;",
          "    impl TryRngCore for TestSeeder {}",
          "",
          "    let rng = TestRng {};",
          "    let seeder = TestSeeder {};",
          "    let original = ReseedingCore {",
          "        inner: rng,",
          "        reseeder: seeder,",
          "        threshold: 5,",
          "        bytes_until_reseed: 0,",
          "    };",
          "",
          "    let _cloned = original.clone();",
          "    assert_eq!(_cloned.inner, original.inner);",
          "    assert_eq!(_cloned.reseeder, original.reseeder);",
          "    assert_eq!(_cloned.threshold, original.threshold);",
          "    assert_eq!(_cloned.bytes_until_reseed, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]