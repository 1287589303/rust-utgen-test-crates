[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.copy_from_slice(&[1, 2, 3, 4]);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng;",
          "    let result: Result<BlockRng64<MockRng>, ()> = BlockRng64::try_from_rng(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let block_rng = result.unwrap();",
          "    assert_eq!(block_rng.core.next_u32(), 42);",
          "    assert_eq!(block_rng.core.next_u64(), 42);",
          "    assert_eq!(block_rng.results.as_ref(), &[1, 2, 3, 4]);"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.copy_from_slice(&[1, 2, 3, 4]);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng;",
          "    let result: Result<BlockRng64<MockRng>, ()> = BlockRng64::try_from_rng(&mut rng);",
          "    assert!(result.is_ok());",
          "    let block_rng = result.unwrap();",
          "    assert_eq!(block_rng.core.next_u32(), 42);",
          "    assert_eq!(block_rng.core.next_u64(), 42);",
          "    assert_eq!(block_rng.results.as_ref(), &[1, 2, 3, 4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FailingRng;",
          "",
          "    impl RngCore for FailingRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    impl TryRngCore for FailingRng {",
          "        type Error = &'static str;",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Err(\"fail to fill bytes\")",
          "        }",
          "    }",
          "",
          "    let mut rng = FailingRng;",
          "    let result: Result<BlockRng64<FailingRng>, &'static str> = BlockRng64::try_from_rng(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(\"fail to fill bytes\"));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result.unwrap_err(), \"fail to fill bytes\");"
        ],
        "code": [
          "{",
          "    struct FailingRng;",
          "",
          "    impl RngCore for FailingRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    impl TryRngCore for FailingRng {",
          "        type Error = &'static str;",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Err(\"fail to fill bytes\")",
          "        }",
          "    }",
          "",
          "    let mut rng = FailingRng;",
          "    let result: Result<BlockRng64<FailingRng>, &'static str> = BlockRng64::try_from_rng(&mut rng);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(\"fail to fill bytes\"));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result.unwrap_err(), \"fail to fill bytes\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]