[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let uniform = result.unwrap();",
          "    let expected_start = 1;",
          "    let expected_end = 10;",
          "    assert_eq!(uniform.0.start(), &expected_start);",
          "    assert_eq!(uniform.0.end(), &expected_end);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().0.start(), range.start());",
          "    assert_eq!(result.unwrap().0.end(), range.end());",
          "    assert!(result.is_ok());",
          "    let invalid_range: RangeInclusive<i32> = 10..=1;",
          "    let result_invalid = Uniform::<SampleStruct>::try_from(invalid_range);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.err(), Some(Error::EmptyRange));"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let uniform = result.unwrap();",
          "    let expected_start = 1;",
          "    let expected_end = 10;",
          "    assert_eq!(uniform.0.start(), &expected_start);",
          "    assert_eq!(uniform.0.end(), &expected_end);",
          "    assert!(matches!(result, Ok(_)));",
          "    assert_eq!(result.unwrap().0.start(), range.start());",
          "    assert_eq!(result.unwrap().0.end(), range.end());",
          "    assert!(result.is_ok());",
          "    let invalid_range: RangeInclusive<i32> = 10..=1;",
          "    let result_invalid = Uniform::<SampleStruct>::try_from(invalid_range);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.err(), Some(Error::EmptyRange));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::EmptyRange));",
          "    let range: RangeInclusive<i32> = 10..=15;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let range: RangeInclusive<f32> = f32::INFINITY..=10.0;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result, Err(Error::NonFinite));",
          "    let range: RangeInclusive<i32> = 5..=3;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result, Err(Error::EmptyRange));"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result, Err(Error::EmptyRange));",
          "    let range: RangeInclusive<i32> = 10..=15;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let range: RangeInclusive<f32> = f32::INFINITY..=10.0;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result, Err(Error::NonFinite));",
          "    let range: RangeInclusive<i32> = 5..=3;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result, Err(Error::EmptyRange));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 10..=1;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = 10..=1;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<f64> = f64::NAN..=f64::INFINITY;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<f64> = f64::NAN..=f64::INFINITY;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = -5..=-1;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().0.start() == -5);",
          "    assert!(result.unwrap().0.end() == -1);",
          "    ",
          "    let empty_range: RangeInclusive<i32> = 1..=0;",
          "    let result_empty = Uniform::<SampleStruct>::try_from(empty_range);",
          "    assert_eq!(result_empty.is_err(), true);",
          "    assert_eq!(result_empty.err(), Some(Error::EmptyRange));",
          "    ",
          "    let non_finite_range: RangeInclusive<f32> = f32::NAN..=f32::INFINITY;",
          "    let result_non_finite = Uniform::<SampleStruct>::try_from(non_finite_range);",
          "    assert_eq!(result_non_finite.is_err(), true);",
          "    assert_eq!(result_non_finite.err(), Some(Error::NonFinite));"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    impl SampleUniform for SampleStruct {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range: RangeInclusive<i32> = -5..=-1;",
          "    let result = Uniform::<SampleStruct>::try_from(range);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(result.unwrap().0.start() == -5);",
          "    assert!(result.unwrap().0.end() == -1);",
          "    ",
          "    let empty_range: RangeInclusive<i32> = 1..=0;",
          "    let result_empty = Uniform::<SampleStruct>::try_from(empty_range);",
          "    assert_eq!(result_empty.is_err(), true);",
          "    assert_eq!(result_empty.err(), Some(Error::EmptyRange));",
          "    ",
          "    let non_finite_range: RangeInclusive<f32> = f32::NAN..=f32::INFINITY;",
          "    let result_non_finite = Uniform::<SampleStruct>::try_from(non_finite_range);",
          "    assert_eq!(result_non_finite.is_err(), true);",
          "    assert_eq!(result_non_finite.err(), Some(Error::NonFinite));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]