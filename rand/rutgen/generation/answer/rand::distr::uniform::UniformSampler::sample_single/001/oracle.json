[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 5;",
          "    let high = 3;",
          "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 5;",
          "    let high = 3;",
          "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = f32::NAN;",
          "    let high = 3.0;",
          "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = f32::NAN;",
          "    let high = 3.0;",
          "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 1.0;",
          "    let high = f32::NAN;",
          "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "    assert_eq!(result, Err(Error::NonFinite));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(Error::NonFinite)));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.as_ref().err(), Some(&Error::NonFinite));"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 1.0;",
          "    let high = f32::NAN;",
          "    let result = <UniformFloat as UniformSampler>::sample_single(low, high, &mut rng);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "    assert_eq!(result, Err(Error::NonFinite));",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(Error::NonFinite)));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.as_ref().err(), Some(&Error::NonFinite));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 4;",
          "    let high = 4;",
          "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
          "}"
        ],
        "oracle": [
          "    let result = <UniformInt as UniformSampler>::sample_single(4, 4, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformFloat as UniformSampler>::sample_single(3.5, 3.5, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformChar as UniformSampler>::sample_single('a', 'a', &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformDuration as UniformSampler>::sample_single(Duration::from_secs(5), Duration::from_secs(5), &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformUsize as UniformSampler>::sample_single(10_usize, 10_usize, &mut rng); assert_eq!(result, Err(Error::EmptyRange));"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 4;",
          "    let high = 4;",
          "    let result = <UniformInt as UniformSampler>::sample_single(low, high, &mut rng);",
          "    let result = <UniformInt as UniformSampler>::sample_single(4, 4, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformFloat as UniformSampler>::sample_single(3.5, 3.5, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformChar as UniformSampler>::sample_single('a', 'a', &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformDuration as UniformSampler>::sample_single(Duration::from_secs(5), Duration::from_secs(5), &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "    let result = <UniformUsize as UniformSampler>::sample_single(10_usize, 10_usize, &mut rng); assert_eq!(result, Err(Error::EmptyRange));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 2.0;",
          "    let high = 2.0;",
          "    let result = <UniformFloat as UniformSampler>::sample_single_inclusive(low, high, &mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) { }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let low = 2.0;",
          "    let high = 2.0;",
          "    let result = <UniformFloat as UniformSampler>::sample_single_inclusive(low, high, &mut rng);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]