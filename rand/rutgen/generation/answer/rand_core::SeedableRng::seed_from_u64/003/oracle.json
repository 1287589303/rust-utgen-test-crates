[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng",
          "        }",
          "    }",
          "    ",
          "    let state: u64 = 0;",
          "    let _rng = TestRng::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::mem::size_of::<<TestRng as SeedableRng>::Seed>(), 16);",
          "    assert_eq!(std::mem::align_of::<<TestRng as SeedableRng>::Seed>(), 8);",
          "    assert_eq!(TestRng::from_seed([0u8; 16]), TestRng);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng",
          "        }",
          "    }",
          "    ",
          "    let state: u64 = 0;",
          "    let _rng = TestRng::seed_from_u64(state);",
          "    assert_eq!(std::mem::size_of::<<TestRng as SeedableRng>::Seed>(), 16);",
          "    assert_eq!(std::mem::align_of::<<TestRng as SeedableRng>::Seed>(), 8);",
          "    assert_eq!(TestRng::from_seed([0u8; 16]), TestRng);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng",
          "        }",
          "    }",
          "    ",
          "    let state: u64 = 1;",
          "    let _rng = TestRng::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    _test_case_1_state_1_seed_size: [u8; 16]",
          "    _test_case_1_generated_from_seed: TestRng",
          "    _test_case_1_assert_chunks_iter_empty: iter.is_empty() == true",
          "    _test_case_1_assert_remainder_size: rem.len() == 0"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "    impl SeedableRng for TestRng {",
          "        type Seed = [u8; 16];",
          "        fn from_seed(seed: Self::Seed) -> Self {",
          "            TestRng",
          "        }",
          "    }",
          "    ",
          "    let state: u64 = 1;",
          "    let _rng = TestRng::seed_from_u64(state);",
          "    _test_case_1_state_1_seed_size: [u8; 16]",
          "    _test_case_1_generated_from_seed: TestRng",
          "    _test_case_1_assert_chunks_iter_empty: iter.is_empty() == true",
          "    _test_case_1_assert_remainder_size: rem.len() == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]