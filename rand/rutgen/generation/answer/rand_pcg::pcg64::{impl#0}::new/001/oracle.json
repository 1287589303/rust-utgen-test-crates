[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x0, 0x0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x1);",
          "    assert_eq!(rng.increment, 0x1);",
          "    assert_eq!(rng.state, rng.increment.wrapping_add(0x0));",
          "    let rng2 = Lcg64Xsh32::new(0xcafef00dd15ea5e5, 0xa02bdbf7bb3c0a7);",
          "    assert_eq!(rng2.increment, 0xa02bdbf7bb3c0a8);",
          "    assert!(rng2.state != rng.state);",
          "    assert_eq!(Lcg64Xsh32::new(1, 1).increment, 3);",
          "    assert_eq!(Lcg64Xsh32::new(0x0, 0x1).state, 1);",
          "    assert_eq!(Lcg64Xsh32::new(0x0, u64::MAX).increment, 1);",
          "    assert_eq!(Lcg64Xsh32::new(0, 0).state > 0);",
          "    assert!(Lcg64Xsh32::new(u64::MAX, u64::MAX).state != 0);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x0, 0x0);",
          "    assert_eq!(rng.state, 0x1);",
          "    assert_eq!(rng.increment, 0x1);",
          "    assert_eq!(rng.state, rng.increment.wrapping_add(0x0));",
          "    let rng2 = Lcg64Xsh32::new(0xcafef00dd15ea5e5, 0xa02bdbf7bb3c0a7);",
          "    assert_eq!(rng2.increment, 0xa02bdbf7bb3c0a8);",
          "    assert!(rng2.state != rng.state);",
          "    assert_eq!(Lcg64Xsh32::new(1, 1).increment, 3);",
          "    assert_eq!(Lcg64Xsh32::new(0x0, 0x1).state, 1);",
          "    assert_eq!(Lcg64Xsh32::new(0x0, u64::MAX).increment, 1);",
          "    assert_eq!(Lcg64Xsh32::new(0, 0).state > 0);",
          "    assert!(Lcg64Xsh32::new(u64::MAX, u64::MAX).state != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0xffffffffffffffff, 0x0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0xfffffffffffffffe);",
          "    assert_eq!(rng.increment, 1);",
          "    assert!(rng.state != 0xffffffffffffffff);",
          "    assert!(rng.increment % 2 != 0);",
          "    assert_eq!(rng.state, Lcg64Xsh32::from_state_incr(0xffffffffffffffff, 1).state);",
          "    assert_eq!(rng.increment, Lcg64Xsh32::from_state_incr(0xffffffffffffffff, 1).increment);",
          "    assert!(rng.state > 0);",
          "    assert!(rng.state < u64::MAX);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0xffffffffffffffff, 0x0);",
          "    assert_eq!(rng.state, 0xfffffffffffffffe);",
          "    assert_eq!(rng.increment, 1);",
          "    assert!(rng.state != 0xffffffffffffffff);",
          "    assert!(rng.increment % 2 != 0);",
          "    assert_eq!(rng.state, Lcg64Xsh32::from_state_incr(0xffffffffffffffff, 1).state);",
          "    assert_eq!(rng.increment, Lcg64Xsh32::from_state_incr(0xffffffffffffffff, 1).increment);",
          "    assert!(rng.state > 0);",
          "    assert!(rng.state < u64::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x0, 0x7ffffffffffffffe);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x0.wrapping_add(0x7ffffffffffffffe << 1 | 1));",
          "    assert_eq!(rng.increment, 0x7ffffffffffffffe << 1 | 1);",
          "    assert!(rng.state != 0xcafef00dd15ea5e5);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert_eq!(rng.increment & 1, 1);",
          "    assert_eq!(rng.state, 0x0 + rng.increment);",
          "    assert!(rng.increment > 0);",
          "    assert_eq!(rng.state, 0x0);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x0, 0x7ffffffffffffffe);",
          "    assert_eq!(rng.state, 0x0.wrapping_add(0x7ffffffffffffffe << 1 | 1));",
          "    assert_eq!(rng.increment, 0x7ffffffffffffffe << 1 | 1);",
          "    assert!(rng.state != 0xcafef00dd15ea5e5);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert_eq!(rng.increment & 1, 1);",
          "    assert_eq!(rng.state, 0x0 + rng.increment);",
          "    assert!(rng.increment > 0);",
          "    assert_eq!(rng.state, 0x0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x7fffffffffffffff, 0x3fffffffffffffff);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x7fffffffffffffff.wrapping_add(0x3fffffffffffffff << 1 | 1));",
          "    assert_eq!(rng.increment, 0x3fffffffffffffff << 1 | 1);",
          "    assert!(rng.state < 0x8000000000000000);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert_eq!(rng.increment & 1, 1);",
          "    assert_eq!(rng.state, 0x7fffffffffffffff);",
          "    assert_eq!(rng.increment, 0x7fffffffffffffff);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x7fffffffffffffff, 0x3fffffffffffffff);",
          "    assert_eq!(rng.state, 0x7fffffffffffffff.wrapping_add(0x3fffffffffffffff << 1 | 1));",
          "    assert_eq!(rng.increment, 0x3fffffffffffffff << 1 | 1);",
          "    assert!(rng.state < 0x8000000000000000);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert_eq!(rng.increment & 1, 1);",
          "    assert_eq!(rng.state, 0x7fffffffffffffff);",
          "    assert_eq!(rng.increment, 0x7fffffffffffffff);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x1234567890abcdef, 0x1ffffffffffffffe);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x1234567890abcdef.wrapping_add(0x1ffffffffffffffe << 1 | 1));",
          "    assert_eq!(rng.increment, 0x1ffffffffffffffe << 1 | 1);",
          "    assert!(rng.state != 0xcafef00dd15ea5e5);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert!(rng.state != 0);",
          "    assert!(rng.increment != 0);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0x1234567890abcdef, 0x1ffffffffffffffe);",
          "    assert_eq!(rng.state, 0x1234567890abcdef.wrapping_add(0x1ffffffffffffffe << 1 | 1));",
          "    assert_eq!(rng.increment, 0x1ffffffffffffffe << 1 | 1);",
          "    assert!(rng.state != 0xcafef00dd15ea5e5);",
          "    assert!(rng.increment % 2 == 1);",
          "    assert!(rng.state != 0);",
          "    assert!(rng.increment != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg64Xsh32::new(0xfedcba9876543210, 0x1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0xfedcba9876543210.wrapping_add((0x1 << 1) | 1));",
          "    assert_eq!(rng.increment, (0x1 << 1) | 1);",
          "    assert_eq!(rng.state, rng.state.wrapping_add(rng.increment));",
          "    assert!(rng.increment % 2 == 1);",
          "    assert!(rng.state != 0xfedcba9876543210);",
          "    assert!(rng.increment != 0x1);",
          "    assert_ne!(rng.increment, (0x0 << 1) | 1);",
          "    assert_ne!(rng.increment, (0xa02bdbf7bb3c0a7 << 1) | 1);",
          "    assert_eq!(rng.increment, 3);"
        ],
        "code": [
          "{",
          "    let rng = Lcg64Xsh32::new(0xfedcba9876543210, 0x1);",
          "    assert_eq!(rng.state, 0xfedcba9876543210.wrapping_add((0x1 << 1) | 1));",
          "    assert_eq!(rng.increment, (0x1 << 1) | 1);",
          "    assert_eq!(rng.state, rng.state.wrapping_add(rng.increment));",
          "    assert!(rng.increment % 2 == 1);",
          "    assert!(rng.state != 0xfedcba9876543210);",
          "    assert!(rng.increment != 0x1);",
          "    assert_ne!(rng.increment, (0x0 << 1) | 1);",
          "    assert_ne!(rng.increment, (0xa02bdbf7bb3c0a7 << 1) | 1);",
          "    assert_eq!(rng.increment, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]