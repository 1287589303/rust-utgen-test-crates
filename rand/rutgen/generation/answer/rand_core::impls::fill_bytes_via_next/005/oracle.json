[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0x123456789abcdef0 };",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98]);",
          "    dest = [0; 8];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]);",
          "    dest = [0; 5];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98, 0x76]);",
          "    dest = [0; 0];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, []);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0x123456789abcdef0 };",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98]);",
          "    dest = [0; 8];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98, 0x76, 0x54, 0x32, 0x10]);",
          "    dest = [0; 5];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xf0, 0xde, 0xba, 0x98, 0x76]);",
          "    dest = [0; 0];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, []);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0xdeadbeef };",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, [0xef, 0xbe, 0xad, 0xde]);",
          "    assert_ne!(dest[0], 0);",
          "    assert!(dest.iter().all(|&x| x >= 0x00 && x <= 0xff));",
          "    assert!(dest.len() == 4);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0xdeadbeef };",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, [0xef, 0xbe, 0xad, 0xde]);",
          "    assert_ne!(dest[0], 0);",
          "    assert!(dest.iter().all(|&x| x >= 0x00 && x <= 0xff));",
          "    assert!(dest.len() == 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0x1 };",
          "    let mut dest: [u8; 0] = [];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, []);",
          "    assert_eq!(rng.value, 0x1);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value as u32",
          "        }",
          "",
          "        fn next_u64(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            dest.copy_from_slice(&self.next_u32().to_le_bytes());",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 0x1 };",
          "    let mut dest: [u8; 0] = [];",
          "    fill_bytes_via_next(&mut rng, &mut dest);",
          "    assert_eq!(dest, []);",
          "    assert_eq!(rng.value, 0x1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]