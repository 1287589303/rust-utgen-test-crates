[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 0;",
          "    let rng = Mcg128Xsl64::new(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 | 1);",
          "    let state = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);",
          "    let state = 0x1234567890ABCDEF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0x1234567890ABCDEF | 1);",
          "    let state = u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, u128::MAX | 1);"
        ],
        "code": [
          "{",
          "    let state = 0;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 1);",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 | 1);",
          "    let state = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 1);",
          "    let state = 0x1234567890ABCDEF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, 0x1234567890ABCDEF | 1);",
          "    let state = u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, u128::MAX | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 1;",
          "    let rng = Mcg128Xsl64::new(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, state | 1);",
          "    assert_eq!(rng.state, 1);",
          "    let state = 0x0;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = 0xCAFEOF00DD15EA5E5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = std::u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);"
        ],
        "code": [
          "{",
          "    let state = 1;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    assert_eq!(rng.state, 1);",
          "    let state = 0x0;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = 0xCAFEOF00DD15EA5E5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    let state = std::u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, u128::MAX | 1);",
          "    let state = 0;",
          "    let rng_zero = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_zero.state, 0 | 1);",
          "    let state = 0x1234567890abcdef;",
          "    let rng_custom = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_custom.state, 0x1234567890abcdef | 1);",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng_cafe = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_cafe.state, 0xcafef00dd15ea5e5 | 1);"
        ],
        "code": [
          "{",
          "    let state = u128::MAX;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, u128::MAX | 1);",
          "    let state = 0;",
          "    let rng_zero = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_zero.state, 0 | 1);",
          "    let state = 0x1234567890abcdef;",
          "    let rng_custom = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_custom.state, 0x1234567890abcdef | 1);",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng_cafe = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng_cafe.state, 0xcafef00dd15ea5e5 | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, state | 1);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 | 1);",
          "    assert!(rng.state % 2 == 1);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 + 1);"
        ],
        "code": [
          "{",
          "    let state = 0xcafef00dd15ea5e5;",
          "    let rng = Mcg128Xsl64::new(state);",
          "    assert_eq!(rng.state, state | 1);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 | 1);",
          "    assert!(rng.state % 2 == 1);",
          "    assert_eq!(rng.state, 0xcafef00dd15ea5e5 + 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]