[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = 12345; // any valid u64 value",
          "    let stream: u64 = 67890; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 12346);"
        ],
        "code": [
          "{",
          "    let state: u64 = 12345; // any valid u64 value",
          "    let stream: u64 = 67890; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 12346);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = 0; // minimum valid u64 value",
          "    let stream: u64 = 1; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, (state.wrapping_add(stream << 1 | 1)));"
        ],
        "code": [
          "{",
          "    let state: u64 = 0; // minimum valid u64 value",
          "    let stream: u64 = 1; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, (state.wrapping_add(stream << 1 | 1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = u64::MAX; // maximum valid u64 value",
          "    let stream: u64 = 1; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, state.wrapping_add(stream << 1 | 1));"
        ],
        "code": [
          "{",
          "    let state: u64 = u64::MAX; // maximum valid u64 value",
          "    let stream: u64 = 1; // any valid u64 value",
          "    let mut rng = Lcg64Xsh32::new(state, stream);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, state.wrapping_add(stream << 1 | 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]