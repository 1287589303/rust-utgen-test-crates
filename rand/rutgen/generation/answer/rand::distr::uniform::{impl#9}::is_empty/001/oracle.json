[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = 5..=4;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = i32::MAX..=i32::MAX;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = i32::MIN..=i32::MIN;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = 5..=4;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = i32::MAX..=i32::MAX;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: RangeInclusive<i32> = i32::MIN..=i32::MIN;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let empty_range: RangeInclusive<i32> = 10..=1;",
          "    let empty_result = empty_range.is_empty();",
          "    assert_eq!(empty_result, true);",
          "    let single_element_range: RangeInclusive<i32> = 5..=5;",
          "    let single_result = single_element_range.is_empty();",
          "    assert_eq!(single_result, false);",
          "    let negative_range: RangeInclusive<i32> = -5..=-1;",
          "    let negative_result = negative_range.is_empty();",
          "    assert_eq!(negative_result, false);",
          "    let reversed_negative_range: RangeInclusive<i32> = -1..=-5;",
          "    let reversed_negative_result = reversed_negative_range.is_empty();",
          "    assert_eq!(reversed_negative_result, true);"
        ],
        "code": [
          "{",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let empty_range: RangeInclusive<i32> = 10..=1;",
          "    let empty_result = empty_range.is_empty();",
          "    assert_eq!(empty_result, true);",
          "    let single_element_range: RangeInclusive<i32> = 5..=5;",
          "    let single_result = single_element_range.is_empty();",
          "    assert_eq!(single_result, false);",
          "    let negative_range: RangeInclusive<i32> = -5..=-1;",
          "    let negative_result = negative_range.is_empty();",
          "    assert_eq!(negative_result, false);",
          "    let reversed_negative_range: RangeInclusive<i32> = -1..=-5;",
          "    let reversed_negative_result = reversed_negative_range.is_empty();",
          "    assert_eq!(reversed_negative_result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: RangeInclusive<i32> = 10..=1;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(range.is_empty());",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    assert!(!range.is_empty());",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    assert!(!range.is_empty());",
          "    let range: RangeInclusive<i32> = 3..=2;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    assert!(range.is_empty());"
        ],
        "code": [
          "{",
          "    let range: RangeInclusive<i32> = 10..=1;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    assert!(range.is_empty());",
          "    let range: RangeInclusive<i32> = 1..=10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    assert!(!range.is_empty());",
          "    let range: RangeInclusive<i32> = 5..=5;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    assert!(!range.is_empty());",
          "    let range: RangeInclusive<i32> = 3..=2;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    assert!(range.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]