[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut array = Array64([0u8; 64]);",
          "    let slice: &mut [u8] = array.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut array = Array64([0u8; 64]);",
          "    let slice: &mut [u8] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice.as_mut_ptr(), array.0.as_mut_ptr());",
          "    slice[0] = 1;",
          "    assert_eq!(array.0[0], 1);",
          "    slice[1] = 2;",
          "    assert_eq!(array.0[1], 2);",
          "    slice[2] = 3;",
          "    assert_eq!(array.0[2], 3);",
          "    assert!(slice.is_mut());"
        ],
        "code": [
          "{",
          "    let mut array = Array64([0u8; 64]);",
          "    let slice: &mut [u8] = array.as_mut();",
          "    let mut array = Array64([0u8; 64]);",
          "    let slice: &mut [u8] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice.as_mut_ptr(), array.0.as_mut_ptr());",
          "    slice[0] = 1;",
          "    assert_eq!(array.0[0], 1);",
          "    slice[1] = 2;",
          "    assert_eq!(array.0[1], 2);",
          "    slice[2] = 3;",
          "    assert_eq!(array.0[2], 3);",
          "    assert!(slice.is_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut array = Array64([0u32; 64]);",
          "    let slice: &mut [u32] = array.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut array = Array64([0u32; 64]);",
          "    let slice: &mut [u32] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert!(slice as *mut [u32] == &mut array.0 as *mut [u32]);",
          "    slice[0] = 42;",
          "    assert_eq!(array.0[0], 42);",
          "    let recovered_slice: &mut [u32] = array.as_mut();",
          "    assert_eq!(recovered_slice[0], 42);"
        ],
        "code": [
          "{",
          "    let mut array = Array64([0u32; 64]);",
          "    let slice: &mut [u32] = array.as_mut();",
          "    let mut array = Array64([0u32; 64]);",
          "    let slice: &mut [u32] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert!(slice as *mut [u32] == &mut array.0 as *mut [u32]);",
          "    slice[0] = 42;",
          "    assert_eq!(array.0[0], 42);",
          "    let recovered_slice: &mut [u32] = array.as_mut();",
          "    assert_eq!(recovered_slice[0], 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut array = Array64([0.0f64; 64]);",
          "    let slice: &mut [f64] = array.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut array = Array64([0.0f64; 64]);",
          "    let slice: &mut [f64] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(&slice[0..4], &[0.0f64, 0.0f64, 0.0f64, 0.0f64]);",
          "    assert!(slice.as_mut_ptr() == array.0.as_mut_ptr());",
          "    slice[0] = 1.0;",
          "    assert_eq!(array.0[0], 1.0);",
          "    assert_eq!(slice[0], 1.0);"
        ],
        "code": [
          "{",
          "    let mut array = Array64([0.0f64; 64]);",
          "    let slice: &mut [f64] = array.as_mut();",
          "    let mut array = Array64([0.0f64; 64]);",
          "    let slice: &mut [f64] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(&slice[0..4], &[0.0f64, 0.0f64, 0.0f64, 0.0f64]);",
          "    assert!(slice.as_mut_ptr() == array.0.as_mut_ptr());",
          "    slice[0] = 1.0;",
          "    assert_eq!(array.0[0], 1.0);",
          "    assert_eq!(slice[0], 1.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut array = Array64(['a'; 64]);",
          "    let slice: &mut [char] = array.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut array = Array64(['a'; 64]);",
          "    let slice: &mut [char] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice[0], 'a');",
          "    assert_eq!(slice[63], 'a');"
        ],
        "code": [
          "{",
          "    let mut array = Array64(['a'; 64]);",
          "    let slice: &mut [char] = array.as_mut();",
          "    let mut array = Array64(['a'; 64]);",
          "    let slice: &mut [char] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice[0], 'a');",
          "    assert_eq!(slice[63], 'a');",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut array = Array64([String::from(\"\"); 64]);",
          "    let slice: &mut [String] = array.as_mut();",
          "}"
        ],
        "oracle": [
          "    let mut array = Array64([String::from(\"\"); 64]);",
          "    let slice: &mut [String] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice.as_mut_ptr(), array.0.as_mut_ptr());",
          "    assert!(slice as *mut _ == &mut array.0 as *mut _);"
        ],
        "code": [
          "{",
          "    let mut array = Array64([String::from(\"\"); 64]);",
          "    let slice: &mut [String] = array.as_mut();",
          "    let mut array = Array64([String::from(\"\"); 64]);",
          "    let slice: &mut [String] = array.as_mut();",
          "    assert_eq!(slice.len(), 64);",
          "    assert_eq!(slice.as_mut_ptr(), array.0.as_mut_ptr());",
          "    assert!(slice as *mut _ == &mut array.0 as *mut _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]