[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<i32> = 5..3;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let range_empty: Range<i32> = 4..4;",
          "    let result_empty = range_empty.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let range_non_empty: Range<i32> = 2..5;",
          "    let result_non_empty = range_non_empty.is_empty();",
          "    assert_eq!(result_non_empty, false);",
          "    let range_equal: Range<i32> = 6..6;",
          "    let result_equal = range_equal.is_empty();",
          "    assert_eq!(result_equal, true);"
        ],
        "code": [
          "{",
          "    let range: Range<i32> = 5..3;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range_empty: Range<i32> = 4..4;",
          "    let result_empty = range_empty.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let range_non_empty: Range<i32> = 2..5;",
          "    let result_non_empty = range_non_empty.is_empty();",
          "    assert_eq!(result_non_empty, false);",
          "    let range_equal: Range<i32> = 6..6;",
          "    let result_equal = range_equal.is_empty();",
          "    assert_eq!(result_equal, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<i32> = 4..4;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(range.is_empty(), true);",
          "    ",
          "    let range: Range<i32> = 3..5;",
          "    assert_eq!(range.is_empty(), false);",
          "    ",
          "    let range: Range<i32> = 10..5;",
          "    assert_eq!(range.is_empty(), true);",
          "    ",
          "    let range: Range<i32> = 0..1;",
          "    assert_eq!(range.is_empty(), false);",
          "    ",
          "    let range: Range<i32> = 7..7;",
          "    assert_eq!(range.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let range: Range<i32> = 4..4;",
          "    let result = range.is_empty();",
          "    assert_eq!(range.is_empty(), true);",
          "    ",
          "    let range: Range<i32> = 3..5;",
          "    assert_eq!(range.is_empty(), false);",
          "    ",
          "    let range: Range<i32> = 10..5;",
          "    assert_eq!(range.is_empty(), true);",
          "    ",
          "    let range: Range<i32> = 0..1;",
          "    assert_eq!(range.is_empty(), false);",
          "    ",
          "    let range: Range<i32> = 7..7;",
          "    assert_eq!(range.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<i32> = 1..10;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let empty_range: Range<i32> = 10..10;",
          "    let result_empty = empty_range.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let negative_range: Range<i32> = -5..-3;",
          "    let result_negative = negative_range.is_empty();",
          "    assert_eq!(result_negative, false);",
          "    let reverse_range: Range<i32> = 5..2;",
          "    let result_reverse = reverse_range.is_empty();",
          "    assert_eq!(result_reverse, true);"
        ],
        "code": [
          "{",
          "    let range: Range<i32> = 1..10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let empty_range: Range<i32> = 10..10;",
          "    let result_empty = empty_range.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let negative_range: Range<i32> = -5..-3;",
          "    let result_negative = negative_range.is_empty();",
          "    assert_eq!(result_negative, false);",
          "    let reverse_range: Range<i32> = 5..2;",
          "    let result_reverse = reverse_range.is_empty();",
          "    assert_eq!(result_reverse, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<f32> = 3.0..2.0;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let range: Range<f32> = 2.0..3.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<f32> = 5.0..5.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: Range<f32> = 1.0..1.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let range: Range<f32> = 3.0..2.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: Range<f32> = 2.0..3.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<f32> = 5.0..5.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: Range<f32> = 1.0..1.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<f32> = 2.0..2.0;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    ",
          "    let range: Range<f32> = 1.0..2.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<i32> = 5..10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<i32> = 10..10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    ",
          "    let range: Range<u32> = 0..1;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<usize> = 2..=2;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let range: Range<f32> = 2.0..2.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    ",
          "    let range: Range<f32> = 1.0..2.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<i32> = 5..10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<i32> = 10..10;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    ",
          "    let range: Range<u32> = 0..1;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    ",
          "    let range: Range<usize> = 2..=2;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<f32> = 0.0..1.0;",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let empty_range: Range<f32> = 1.0..1.0;",
          "    let empty_result = empty_range.is_empty();",
          "    assert_eq!(empty_result, true);",
          "    let negative_range: Range<f32> = 1.0..0.0;",
          "    let negative_result = negative_range.is_empty();",
          "    assert_eq!(negative_result, true);",
          "    let range_with_negative: Range<f32> = -1.0..1.0;",
          "    let non_empty_result = range_with_negative.is_empty();",
          "    assert_eq!(non_empty_result, false);",
          "    let large_range: Range<i32> = 1..100;",
          "    let large_result = large_range.is_empty();",
          "    assert_eq!(large_result, false);",
          "    let inclusive_empty_range: RangeInclusive<f32> = 1.0..=1.0;",
          "    let inclusive_empty_result = inclusive_empty_range.is_empty();",
          "    assert_eq!(inclusive_empty_result, true);",
          "    let inclusive_non_empty_range: RangeInclusive<f32> = 0.0..=1.0;",
          "    let inclusive_non_empty_result = inclusive_non_empty_range.is_empty();",
          "    assert_eq!(inclusive_non_empty_result, false);"
        ],
        "code": [
          "{",
          "    let range: Range<f32> = 0.0..1.0;",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let empty_range: Range<f32> = 1.0..1.0;",
          "    let empty_result = empty_range.is_empty();",
          "    assert_eq!(empty_result, true);",
          "    let negative_range: Range<f32> = 1.0..0.0;",
          "    let negative_result = negative_range.is_empty();",
          "    assert_eq!(negative_result, true);",
          "    let range_with_negative: Range<f32> = -1.0..1.0;",
          "    let non_empty_result = range_with_negative.is_empty();",
          "    assert_eq!(non_empty_result, false);",
          "    let large_range: Range<i32> = 1..100;",
          "    let large_result = large_range.is_empty();",
          "    assert_eq!(large_result, false);",
          "    let inclusive_empty_range: RangeInclusive<f32> = 1.0..=1.0;",
          "    let inclusive_empty_result = inclusive_empty_range.is_empty();",
          "    assert_eq!(inclusive_empty_result, true);",
          "    let inclusive_non_empty_range: RangeInclusive<f32> = 0.0..=1.0;",
          "    let inclusive_non_empty_result = inclusive_non_empty_range.is_empty();",
          "    assert_eq!(inclusive_non_empty_result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<char> = 'c'..'a';",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let range: Range<char> = 'a'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'a'..='a';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'b'..='a';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let range: Range<char> = 'c'..'a';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: Range<char> = 'a'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'a'..='a';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'b'..='a';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<char> = 'b'..'b';",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let range: Range<char> = 'a'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'c'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    let range: Range<char> = 'b'..'b';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "    let range: Range<char> = 'a'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let range: Range<char> = 'c'..'c';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let range: Range<char> = 'a'..'z';",
          "    let result = range.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let empty_range: Range<char> = 'z'..'a';",
          "    let result_empty = empty_range.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let single_element_range: Range<char> = 'a'..'a';",
          "    let result_single = single_element_range.is_empty();",
          "    assert_eq!(result_single, true);",
          "    let range_equal: Range<char> = 'a'..='a';",
          "    let result_equal = range_equal.is_empty();",
          "    assert_eq!(result_equal, false);"
        ],
        "code": [
          "{",
          "    let range: Range<char> = 'a'..'z';",
          "    let result = range.is_empty();",
          "    assert_eq!(result, false);",
          "    let empty_range: Range<char> = 'z'..'a';",
          "    let result_empty = empty_range.is_empty();",
          "    assert_eq!(result_empty, true);",
          "    let single_element_range: Range<char> = 'a'..'a';",
          "    let result_single = single_element_range.is_empty();",
          "    assert_eq!(result_single, true);",
          "    let range_equal: Range<char> = 'a'..='a';",
          "    let result_equal = range_equal.is_empty();",
          "    assert_eq!(result_equal, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]