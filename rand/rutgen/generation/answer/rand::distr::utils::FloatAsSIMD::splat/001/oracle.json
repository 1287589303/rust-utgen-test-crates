[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::NEG_INFINITY);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, FloatWrapper(f64::NEG_INFINITY));",
          "    assert_eq!(result, FloatWrapper(f64::INFINITY));",
          "    assert_eq!(result, FloatWrapper(0.0));",
          "    assert_eq!(result, FloatWrapper(-1.0));",
          "    assert_eq!(result, FloatWrapper(1.0));",
          "    assert_eq!(result, FloatWrapper(f64::NAN));",
          "    assert_eq!(result, FloatWrapper(3.14));",
          "    assert_eq!(result, FloatWrapper(-3.14));",
          "    assert_eq!(result, FloatWrapper(f64::EPSILON));",
          "    assert_eq!(result, FloatWrapper(f64::MAX));",
          "    assert_eq!(result, FloatWrapper(f64::MIN));"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::NEG_INFINITY);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert_eq!(result, FloatWrapper(f64::NEG_INFINITY));",
          "    assert_eq!(result, FloatWrapper(f64::INFINITY));",
          "    assert_eq!(result, FloatWrapper(0.0));",
          "    assert_eq!(result, FloatWrapper(-1.0));",
          "    assert_eq!(result, FloatWrapper(1.0));",
          "    assert_eq!(result, FloatWrapper(f64::NAN));",
          "    assert_eq!(result, FloatWrapper(3.14));",
          "    assert_eq!(result, FloatWrapper(-3.14));",
          "    assert_eq!(result, FloatWrapper(f64::EPSILON));",
          "    assert_eq!(result, FloatWrapper(f64::MAX));",
          "    assert_eq!(result, FloatWrapper(f64::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(0.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 0.0);",
          "    assert_eq!(result.0, input.0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(0.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(-1.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(3.14)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(100.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(-100.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(1.5)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(2.718)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(0.999)).0);"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(0.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert_eq!(result.0, 0.0);",
          "    assert_eq!(result.0, input.0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(0.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(-1.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(3.14)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(100.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(-100.0)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(1.5)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(2.718)).0);",
          "    assert_eq!(result.0, FloatWrapper::splat(FloatWrapper(0.999)).0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::INFINITY);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, FloatWrapper(f64::INFINITY));",
          "    assert_eq!(FloatWrapper::splat(0.0), FloatWrapper(0.0));",
          "    assert_eq!(FloatWrapper::splat(-5.0), FloatWrapper(-5.0));",
          "    assert_eq!(FloatWrapper::splat(f64::NAN), FloatWrapper(f64::NAN));",
          "    assert_eq!(FloatWrapper::splat(f64::MAX), FloatWrapper(f64::MAX));",
          "    assert_eq!(FloatWrapper::splat(f64::MIN), FloatWrapper(f64::MIN));"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::INFINITY);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert_eq!(result, FloatWrapper(f64::INFINITY));",
          "    assert_eq!(FloatWrapper::splat(0.0), FloatWrapper(0.0));",
          "    assert_eq!(FloatWrapper::splat(-5.0), FloatWrapper(-5.0));",
          "    assert_eq!(FloatWrapper::splat(f64::NAN), FloatWrapper(f64::NAN));",
          "    assert_eq!(FloatWrapper::splat(f64::MAX), FloatWrapper(f64::MAX));",
          "    assert_eq!(FloatWrapper::splat(f64::MIN), FloatWrapper(f64::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::NAN);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_nan());",
          "    assert_eq!(result, input.0);",
          "    assert_eq!(result, FloatWrapper::splat(f64::INFINITY));",
          "    assert_eq!(result, FloatWrapper::splat(0.0));",
          "    assert_eq!(result, FloatWrapper::splat(-1.0));",
          "    assert_eq!(result, FloatWrapper::splat(1.0));"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(f64::NAN);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert!(result.is_nan());",
          "    assert_eq!(result, input.0);",
          "    assert_eq!(result, FloatWrapper::splat(f64::INFINITY));",
          "    assert_eq!(result, FloatWrapper::splat(0.0));",
          "    assert_eq!(result, FloatWrapper::splat(-1.0));",
          "    assert_eq!(result, FloatWrapper::splat(1.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(-1.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, -1.0);"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(-1.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert_eq!(result.0, -1.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(1.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 1.0);"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f64);",
          "    ",
          "    let input = FloatWrapper(1.0);",
          "    let result = FloatWrapper::splat(input.0);",
          "    assert_eq!(result.0, 1.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]