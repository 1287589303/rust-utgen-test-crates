[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    rng.state = 12345;",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    rng.increment = 67890;",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 0);",
          "    assert!(dest.is_empty());",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    rng.state = 12345;",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "    rng.increment = 67890;",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.len() == 1);",
          "    assert!(dest[0] >= 0u8);",
          "    assert!(dest[0] <= 255u8);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "    assert!(dest.len() == 1);",
          "    assert!(dest[0] >= 0u8);",
          "    assert!(dest[0] <= 255u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 16);",
          "    assert!(dest.iter().any(|&x| x != 0);",
          "    assert!(dest.iter().all(|&x| x <= 255);",
          "    assert!(dest.iter().all(|&x| x >= 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 16);",
          "    assert!(dest.iter().any(|&x| x != 0);",
          "    assert!(dest.iter().all(|&x| x <= 255);",
          "    assert!(dest.iter().all(|&x| x >= 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1024];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 1024);",
          "    assert!(dest.iter().any(|&b| b != 0));",
          "    assert!(dest.iter().all(|&b| b <= 255));",
          "    assert!(dest.iter().all(|&b| b >= 0));",
          "    assert!(rng.state != 0);",
          "    assert!(rng.increment != 0);",
          "    assert!(rng.fill_bytes(&mut dest).is_none());"
        ],
        "code": [
          "{",
          "    let mut rng = Lcg128CmDxsm64 { state: 0, increment: 0 };",
          "    let mut dest = [0u8; 1024];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 1024);",
          "    assert!(dest.iter().any(|&b| b != 0));",
          "    assert!(dest.iter().all(|&b| b <= 255));",
          "    assert!(dest.iter().all(|&b| b >= 0));",
          "    assert!(rng.state != 0);",
          "    assert!(rng.increment != 0);",
          "    assert!(rng.fill_bytes(&mut dest).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]