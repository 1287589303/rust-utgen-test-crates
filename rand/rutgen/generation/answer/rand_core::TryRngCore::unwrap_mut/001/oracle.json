[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(42)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(84)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let result = rng.unwrap_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, UnwrapMut(&mut rng));",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<UnwrapMut<TestRng>>());",
          "    assert_eq!(std::any::type_name_of_val(&result), \"rand_core::UnwrapMut<&mut rand_core::TestRng>\");",
          "    assert!(std::ptr::eq(result.0, &mut rng));",
          "    assert!(std::mem::needs_drop::<UnwrapMut<TestRng>>());"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(42)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(84)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let result = rng.unwrap_mut();",
          "    assert_eq!(result, UnwrapMut(&mut rng));",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<UnwrapMut<TestRng>>());",
          "    assert_eq!(std::any::type_name_of_val(&result), \"rand_core::UnwrapMut<&mut rand_core::TestRng>\");",
          "    assert!(std::ptr::eq(result.0, &mut rng));",
          "    assert!(std::mem::needs_drop::<UnwrapMut<TestRng>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(42)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(84)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let _result1 = rng.unwrap_mut();",
          "    let _result2 = rng.unwrap_mut();",
          "}"
        ],
        "oracle": [
          "    let mut rng = TestRng;",
          "    let result = rng.unwrap_mut();",
          "    assert_eq!(result, UnwrapMut(&mut rng));",
          "    let result2 = rng.unwrap_mut();",
          "    assert_eq!(result2, UnwrapMut(&mut rng));"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl TryRngCore for TestRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(42)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(84)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let _result1 = rng.unwrap_mut();",
          "    let _result2 = rng.unwrap_mut();",
          "    let mut rng = TestRng;",
          "    let result = rng.unwrap_mut();",
          "    assert_eq!(result, UnwrapMut(&mut rng));",
          "    let result2 = rng.unwrap_mut();",
          "    assert_eq!(result2, UnwrapMut(&mut rng));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyRng;",
          "",
          "    impl TryRngCore for EmptyRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(0)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(0)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = EmptyRng;",
          "    let result = rng.unwrap_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0 as *const _ as usize, &mut rng as *mut _ as usize);",
          "    assert!(std::mem::size_of_val(&result) == std::mem::size_of::<UnwrapMut<EmptyRng>>());",
          "    assert!(std::ptr::eq(result.0, &mut rng));"
        ],
        "code": [
          "{",
          "    struct EmptyRng;",
          "",
          "    impl TryRngCore for EmptyRng {",
          "        type Error = ();",
          "",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> {",
          "            Ok(0)",
          "        }",
          "",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> {",
          "            Ok(0)",
          "        }",
          "",
          "        fn try_fill_bytes(&mut self, _dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = EmptyRng;",
          "    let result = rng.unwrap_mut();",
          "    assert_eq!(result.0 as *const _ as usize, &mut rng as *mut _ as usize);",
          "    assert!(std::mem::size_of_val(&result) == std::mem::size_of::<UnwrapMut<EmptyRng>>());",
          "    assert!(std::ptr::eq(result.0, &mut rng));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]