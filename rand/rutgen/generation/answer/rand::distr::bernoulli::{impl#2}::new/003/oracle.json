[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(-0.1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(-0.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(1.1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), BernoulliError::InvalidProbability);"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(1.1);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), BernoulliError::InvalidProbability);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(f64::NAN);",
          "}"
        ],
        "oracle": [
          "    let result = Bernoulli::new(f64::NAN);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(-0.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(1.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(2.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(f64::NAN);",
          "    let result = Bernoulli::new(f64::NAN);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(-0.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(1.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    ",
          "    let result = Bernoulli::new(2.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(f64::INFINITY);",
          "}"
        ],
        "oracle": [
          "    let result = Bernoulli::new(f64::INFINITY);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(-1.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(2.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(1.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(f64::INFINITY);",
          "    let result = Bernoulli::new(f64::INFINITY);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(-1.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(2.0);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(1.1);",
          "    assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(f64::NEG_INFINITY);",
          "}"
        ],
        "oracle": [
          "    let result = Bernoulli::new(f64::NEG_INFINITY); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(-0.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(1.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(2.0); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(f64::NAN); assert_eq!(result, Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(f64::NEG_INFINITY);",
          "    let result = Bernoulli::new(f64::NEG_INFINITY); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(-0.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(1.1); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(2.0); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "    let result = Bernoulli::new(f64::NAN); assert_eq!(result, Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]