[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let p = 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "}"
        ],
        "oracle": [
          "    assert!(Bernoulli::new(0.0).is_ok());",
          "    assert_eq!(Bernoulli::new(0.0).unwrap().p_int, 0);",
          "    assert!(Bernoulli::new(1.0).is_ok());",
          "    assert_eq!(Bernoulli::new(1.0).unwrap().p_int, ALWAYS_TRUE);",
          "    assert!(Bernoulli::new(0.5).is_ok());",
          "    assert_eq!(Bernoulli::new(0.5).unwrap().p_int, (0.5 * SCALE) as u64);",
          "    assert!(Bernoulli::new(2.0_f64.powi(-64)).is_ok());",
          "    assert_eq!(Bernoulli::new(2.0_f64.powi(-64)).unwrap().p_int, (2.0_f64.powi(-64) * SCALE) as u64);",
          "    assert!(Bernoulli::new(-0.1).is_err());",
          "    assert!(Bernoulli::new(1.1).is_err());"
        ],
        "code": [
          "{",
          "    let p = 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "    assert!(Bernoulli::new(0.0).is_ok());",
          "    assert_eq!(Bernoulli::new(0.0).unwrap().p_int, 0);",
          "    assert!(Bernoulli::new(1.0).is_ok());",
          "    assert_eq!(Bernoulli::new(1.0).unwrap().p_int, ALWAYS_TRUE);",
          "    assert!(Bernoulli::new(0.5).is_ok());",
          "    assert_eq!(Bernoulli::new(0.5).unwrap().p_int, (0.5 * SCALE) as u64);",
          "    assert!(Bernoulli::new(2.0_f64.powi(-64)).is_ok());",
          "    assert_eq!(Bernoulli::new(2.0_f64.powi(-64)).unwrap().p_int, (2.0_f64.powi(-64) * SCALE) as u64);",
          "    assert!(Bernoulli::new(-0.1).is_err());",
          "    assert!(Bernoulli::new(1.1).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let p = 1.0_f64 - 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert!(Bernoulli::new(-0.1).is_err());",
          "    assert!(Bernoulli::new(1.1).is_err());",
          "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
          "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: ALWAYS_TRUE - 1 }));",
          "    assert!(matches!(Bernoulli::new(1.0_f64 - 2.0_f64.powi(-64)), Ok(_)));"
        ],
        "code": [
          "{",
          "    let p = 1.0_f64 - 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert!(Bernoulli::new(-0.1).is_err());",
          "    assert!(Bernoulli::new(1.1).is_err());",
          "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
          "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: ALWAYS_TRUE - 1 }));",
          "    assert!(matches!(Bernoulli::new(1.0_f64 - 2.0_f64.powi(-64)), Ok(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let p = 0.5;",
          "    let _ = Bernoulli::new(p);",
          "}"
        ],
        "oracle": [
          "    let p = 0.5;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    let bernoulli = result.unwrap();",
          "    assert_eq!(bernoulli.p_int, (p * SCALE) as u64);"
        ],
        "code": [
          "{",
          "    let p = 0.5;",
          "    let _ = Bernoulli::new(p);",
          "    let p = 0.5;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    let bernoulli = result.unwrap();",
          "    assert_eq!(bernoulli.p_int, (p * SCALE) as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "}"
        ],
        "oracle": [
          "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, (p * SCALE) as u64);",
          "    }",
          "    ",
          "    let p = 0.5_f64;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, (p * SCALE) as u64);",
          "    }",
          "    ",
          "    let p = 1.0_f64;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, ALWAYS_TRUE);",
          "    }"
        ],
        "code": [
          "{",
          "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
          "    let _ = Bernoulli::new(p);",
          "    let p = 0.0_f64 + 2.0_f64.powi(-64);",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, (p * SCALE) as u64);",
          "    }",
          "    ",
          "    let p = 0.5_f64;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, (p * SCALE) as u64);",
          "    }",
          "    ",
          "    let p = 1.0_f64;",
          "    let result = Bernoulli::new(p);",
          "    assert!(result.is_ok());",
          "    if let Ok(b) = result {",
          "    assert_eq!(b.p_int, ALWAYS_TRUE);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
          "    let _ = Bernoulli::new(p);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
          "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
          "    let expected_p_int = (p * SCALE) as u64;",
          "    assert_eq!(Bernoulli::new(p), Ok(Bernoulli { p_int: expected_p_int }));",
          "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: (0.9999999999999999 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(-0.1), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::new(1.1), Err(BernoulliError::InvalidProbability));"
        ],
        "code": [
          "{",
          "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
          "    let _ = Bernoulli::new(p);",
          "    assert_eq!(Bernoulli::new(1.0), Ok(Bernoulli { p_int: ALWAYS_TRUE }));",
          "    assert_eq!(Bernoulli::new(0.0), Ok(Bernoulli { p_int: 0 }));",
          "    let p = 1.0_f64 - 2.0_f64.powi(-63);",
          "    let expected_p_int = (p * SCALE) as u64;",
          "    assert_eq!(Bernoulli::new(p), Ok(Bernoulli { p_int: expected_p_int }));",
          "    assert_eq!(Bernoulli::new(0.5), Ok(Bernoulli { p_int: (0.5 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(0.9999999999999999), Ok(Bernoulli { p_int: (0.9999999999999999 * SCALE) as u64 }));",
          "    assert_eq!(Bernoulli::new(-0.1), Err(BernoulliError::InvalidProbability));",
          "    assert_eq!(Bernoulli::new(1.1), Err(BernoulliError::InvalidProbability));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]