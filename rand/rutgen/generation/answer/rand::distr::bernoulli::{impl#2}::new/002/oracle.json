[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(1.0);",
          "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
          "    let _ = (result, expected);",
          "}"
        ],
        "oracle": [
          "    let result = Bernoulli::new(1.0);",
          "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(1.0);",
          "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
          "    let _ = (result, expected);",
          "    let result = Bernoulli::new(1.0);",
          "    let expected = Ok(Bernoulli { p_int: ALWAYS_TRUE });",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(1.1);",
          "    let expected = Err(BernoulliError::InvalidProbability);",
          "    let _ = (result, expected);",
          "}"
        ],
        "oracle": [
          "    Bernoulli::new(1.1); // Expect Err(BernoulliError::InvalidProbability)",
          "    Bernoulli::new(1.0); // Expect Ok(Bernoulli { p_int: ALWAYS_TRUE })"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(1.1);",
          "    let expected = Err(BernoulliError::InvalidProbability);",
          "    let _ = (result, expected);",
          "    Bernoulli::new(1.1); // Expect Err(BernoulliError::InvalidProbability)",
          "    Bernoulli::new(1.0); // Expect Ok(Bernoulli { p_int: ALWAYS_TRUE })",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = Bernoulli::new(-0.1);",
          "    let expected = Err(BernoulliError::InvalidProbability);",
          "    let _ = (result, expected);",
          "}"
        ],
        "oracle": [
          "    Ok(Bernoulli { p_int: ALWAYS_TRUE })"
        ],
        "code": [
          "{",
          "    let result = Bernoulli::new(-0.1);",
          "    let expected = Err(BernoulliError::InvalidProbability);",
          "    let _ = (result, expected);",
          "    Ok(Bernoulli { p_int: ALWAYS_TRUE })",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]