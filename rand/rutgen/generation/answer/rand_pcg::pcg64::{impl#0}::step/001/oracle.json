[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(0, 1);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, 6364136223846793006);",
          "    assert_eq!(pcg.increment, 3);",
          "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER).wrapping_add(pcg.increment));",
          "    pcg.state = 1;",
          "    pcg.step();",
          "    assert!(pcg.state > 1);",
          "    pcg.state = u64::MAX;",
          "    pcg.step();",
          "    assert!(pcg.state < u64::MAX);",
          "    pcg.state = 0;",
          "    pcg.step();",
          "    assert_eq!(pcg.state, pcg.increment);"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(0, 1);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, 6364136223846793006);",
          "    assert_eq!(pcg.increment, 3);",
          "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER).wrapping_add(pcg.increment));",
          "    pcg.state = 1;",
          "    pcg.step();",
          "    assert!(pcg.state > 1);",
          "    pcg.state = u64::MAX;",
          "    pcg.step();",
          "    assert!(pcg.state < u64::MAX);",
          "    pcg.state = 0;",
          "    pcg.step();",
          "    assert_eq!(pcg.state, pcg.increment);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(u64::MAX, u64::MAX);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, (u64::MAX.wrapping_mul(MULTIPLIER)).wrapping_add(u64::MAX));"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(u64::MAX, u64::MAX);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, (u64::MAX.wrapping_mul(MULTIPLIER)).wrapping_add(u64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(0, 2);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, 6364136223846793005);",
          "    assert_eq!(pcg.increment, 3);",
          "    assert!(pcg.state != 0);"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(0, 2);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, 6364136223846793005);",
          "    assert_eq!(pcg.increment, 3);",
          "    assert!(pcg.state != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(u64::MAX - 1, 1);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, (u64::MAX - 1).wrapping_mul(MULTIPLIER).wrapping_add(1));"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(u64::MAX - 1, 1);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, (u64::MAX - 1).wrapping_mul(MULTIPLIER).wrapping_add(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(12345678901234567890, 987654321098765432);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, 12345678901234567890.wrapping_mul(MULTIPLIER).wrapping_add(987654321098765432));"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(12345678901234567890, 987654321098765432);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, 12345678901234567890.wrapping_mul(MULTIPLIER).wrapping_add(987654321098765432));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(1, 2);",
          "    pcg.step();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, 6364136223846793007);",
          "    assert_ne!(pcg.increment, 0);",
          "    assert_eq!(pcg.increment, 5);",
          "    assert!(pcg.state > 1);",
          "    assert!(pcg.state < 6364136223846793008);",
          "    assert_eq!(Lcg64Xsh32::new(0, 0).state, 1);",
          "    assert_eq!(Lcg64Xsh32::new(u64::MAX, 1).state, 6364136223846793008);",
          "    assert_eq!(Lcg64Xsh32::new(1, u64::MAX).state, 6364136223846793009);",
          "    assert!(pcg.state != pcg.increment);",
          "    pcg.advance(10);",
          "    assert!(pcg.state > 6364136223846793007);"
        ],
        "code": [
          "{",
          "    let mut pcg = Lcg64Xsh32::new(1, 2);",
          "    pcg.step();",
          "    assert_eq!(pcg.state, 6364136223846793007);",
          "    assert_ne!(pcg.increment, 0);",
          "    assert_eq!(pcg.increment, 5);",
          "    assert!(pcg.state > 1);",
          "    assert!(pcg.state < 6364136223846793008);",
          "    assert_eq!(Lcg64Xsh32::new(0, 0).state, 1);",
          "    assert_eq!(Lcg64Xsh32::new(u64::MAX, 1).state, 6364136223846793008);",
          "    assert_eq!(Lcg64Xsh32::new(1, u64::MAX).state, 6364136223846793009);",
          "    assert!(pcg.state != pcg.increment);",
          "    pcg.advance(10);",
          "    assert!(pcg.state > 6364136223846793007);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]