[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(0, &TestWeight { value: 0.0 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 3.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 0.0 }, TestWeight { value: 2.0 }]);",
          "    assert!(weighted_index.cumulative_weights.len() == 2);",
          "    assert!(weighted_index.weight_distribution == ());",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(0, &TestWeight { value: 0.0 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(result.is_ok());",
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 3.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 0.0 }, TestWeight { value: 2.0 }]);",
          "    assert!(weighted_index.cumulative_weights.len() == 2);",
          "    assert!(weighted_index.weight_distribution == ());",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights: Vec<(usize, &TestWeight)> = vec![];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 3.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }]);"
        ],
        "code": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights: Vec<(usize, &TestWeight)> = vec![];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(result.is_ok());",
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 3.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(1, &TestWeight { value: -0.5 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(matches!(result, Err(Error::InvalidWeight)));",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(weighted_index.update_weights(&[]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 2.0 }), (0, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: -0.1 })]), Err(Error::InvalidWeight)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 2.0 }), (2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 2.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 0.0 })]), Err(Error::InsufficientNonZero)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 5.0 }), (0, &TestWeight { value: 3.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: -2.0 })]), Err(Error::InvalidWeight)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 1.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 2.0 }), (2, &TestWeight { value: 3.0 })]), Err(Error::InvalidInput)));"
        ],
        "code": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 2.0 }],",
          "        total_weight: TestWeight { value: 3.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(1, &TestWeight { value: -0.5 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(matches!(result, Err(Error::InvalidWeight)));",
          "    assert!(matches!(weighted_index.update_weights(&[]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 2.0 }), (0, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: -0.1 })]), Err(Error::InvalidWeight)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 2.0 }), (2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 2.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 0.0 })]), Err(Error::InsufficientNonZero)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 5.0 }), (0, &TestWeight { value: 3.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(2, &TestWeight { value: 1.0 })]), Err(Error::InvalidInput)));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: -2.0 })]), Err(Error::InvalidWeight)));",
          "    assert!(matches!(weighted_index.update_weights(&[(1, &TestWeight { value: 1.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 0.0 })]), Ok(())));",
          "    assert!(matches!(weighted_index.update_weights(&[(0, &TestWeight { value: 1.0 }), (1, &TestWeight { value: 2.0 }), (2, &TestWeight { value: 3.0 })]), Err(Error::InvalidInput)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 1.0 }],",
          "        total_weight: TestWeight { value: 2.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(0, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 0.0 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(matches!(result, Err(Error::InsufficientNonZero)));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 2.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 1.0 }, TestWeight { value: 1.0 }]);"
        ],
        "code": [
          "{",
          "    struct TestWeight {",
          "        value: f64,",
          "    }",
          "",
          "    impl SampleUniform for TestWeight {",
          "        type Sampler = ();",
          "    }",
          "",
          "    impl Weight for TestWeight {}",
          "",
          "    let mut weighted_index = WeightedIndex {",
          "        cumulative_weights: vec![TestWeight { value: 1.0 }, TestWeight { value: 1.0 }],",
          "        total_weight: TestWeight { value: 2.0 },",
          "        weight_distribution: (),",
          "    };",
          "",
          "    let new_weights = vec![(0, &TestWeight { value: 0.0 }), (1, &TestWeight { value: 0.0 })];",
          "",
          "    let result = weighted_index.update_weights(&new_weights);",
          "    assert!(matches!(result, Err(Error::InsufficientNonZero)));",
          "    assert_eq!(weighted_index.total_weight, TestWeight { value: 2.0 });",
          "    assert_eq!(weighted_index.cumulative_weights, vec![TestWeight { value: 1.0 }, TestWeight { value: 1.0 }]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]