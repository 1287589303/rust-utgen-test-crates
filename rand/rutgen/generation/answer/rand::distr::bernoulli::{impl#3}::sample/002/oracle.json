[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 10 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(rng.value < bernoulli.p_int);",
          "    assert!(bernoulli.p_int > 0);",
          "    assert!(bernoulli.p_int < ALWAYS_TRUE);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 10 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "    assert_eq!(result, true);",
          "    assert!(rng.value < bernoulli.p_int);",
          "    assert!(bernoulli.p_int > 0);",
          "    assert!(bernoulli.p_int < ALWAYS_TRUE);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 20 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(result == true);",
          "    assert!(result == (rng.value < bernoulli.p_int));",
          "    assert_eq!(bernoulli.p_int, 20);",
          "    assert!(bernoulli.p_int != ALWAYS_TRUE);",
          "    assert!(rng.random() == 20);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 20 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "    assert!(result == true);",
          "    assert!(result == (rng.value < bernoulli.p_int));",
          "    assert_eq!(bernoulli.p_int, 20);",
          "    assert!(bernoulli.p_int != ALWAYS_TRUE);",
          "    assert!(rng.random() == 20);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 30 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(result == false);",
          "    assert!(rng.value == 30);",
          "    assert!(bernoully.p_int == 20);",
          "    bernoulli.sample(&mut TestRng { value: 10 });",
          "    bernoulli.sample(&mut TestRng { value: 15 });",
          "    bernoulli.sample(&mut TestRng { value: 25 });",
          "    bernoulli.sample(&mut TestRng { value: 20 });",
          "    let bernoulli_high = Bernoulli { p_int: u64::MAX };",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: 0 }) == true);",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: 1 }) == true);",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: u64::MAX }) == true);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: 30 };",
          "    let bernoulli = Bernoulli { p_int: 20 };",
          "    let result = bernoulli.sample(&mut rng);",
          "    assert_eq!(result, false);",
          "    assert!(result == false);",
          "    assert!(rng.value == 30);",
          "    assert!(bernoully.p_int == 20);",
          "    bernoulli.sample(&mut TestRng { value: 10 });",
          "    bernoulli.sample(&mut TestRng { value: 15 });",
          "    bernoulli.sample(&mut TestRng { value: 25 });",
          "    bernoulli.sample(&mut TestRng { value: 20 });",
          "    let bernoulli_high = Bernoulli { p_int: u64::MAX };",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: 0 }) == true);",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: 1 }) == true);",
          "    assert!(bernoulli_high.sample(&mut TestRng { value: u64::MAX }) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: u64::MAX };",
          "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
          "    let result = bernoulli.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(rng.value >= bernoulli.p_int);",
          "    assert!(result == false);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        value: u64,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn random(&mut self) -> u64 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { value: u64::MAX };",
          "    let bernoulli = Bernoulli { p_int: u64::MAX - 1 };",
          "    let result = bernoulli.sample(&mut rng);",
          "    assert_eq!(result, false);",
          "    assert!(rng.value >= bernoulli.p_int);",
          "    assert!(result == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]