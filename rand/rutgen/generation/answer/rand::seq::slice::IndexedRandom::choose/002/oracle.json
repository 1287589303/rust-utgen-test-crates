[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestArray(&'static [i32]);",
          "    ",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = TestArray(&[1, 2, 3, 4, 5]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(choices.len() > 0);",
          "    let result = choices.choose(&mut rng);",
          "    let index = rng.random_range(..choices.len());",
          "    assert_eq!(result, Some(&choices[index]));"
        ],
        "code": [
          "{",
          "    struct TestArray(&'static [i32]);",
          "    ",
          "    impl Index<usize> for TestArray {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestArray {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = TestArray(&[1, 2, 3, 4, 5]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "    assert!(choices.len() > 0);",
          "    let result = choices.choose(&mut rng);",
          "    let index = rng.random_range(..choices.len());",
          "    assert_eq!(result, Some(&choices[index]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestVector(Vec<i32>);",
          "    ",
          "    impl Index<usize> for TestVector {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestVector {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = TestVector(vec![10, 20, 30, 40, 50]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(choices.len() > 0);",
          "    assert!(choices.choose(&mut rng).is_some());",
          "    assert!(matches!(choices.choose(&mut rng), Some(&10) | Some(&20) | Some(&30) | Some(&40) | Some(&50)));",
          "    let result = choices.choose(&mut rng).unwrap();",
          "    assert!(choices.0.contains(&result));",
          "    assert!(result == &choices[0] || result == &choices[1] || result == &choices[2] || result == &choices[3] || result == &choices[4]);",
          "    assert_eq!(choices.len(), 5);"
        ],
        "code": [
          "{",
          "    struct TestVector(Vec<i32>);",
          "    ",
          "    impl Index<usize> for TestVector {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for TestVector {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = TestVector(vec![10, 20, 30, 40, 50]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "    assert!(choices.len() > 0);",
          "    assert!(choices.choose(&mut rng).is_some());",
          "    assert!(matches!(choices.choose(&mut rng), Some(&10) | Some(&20) | Some(&30) | Some(&40) | Some(&50)));",
          "    let result = choices.choose(&mut rng).unwrap();",
          "    assert!(choices.0.contains(&result));",
          "    assert!(result == &choices[0] || result == &choices[1] || result == &choices[2] || result == &choices[3] || result == &choices[4]);",
          "    assert_eq!(choices.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElement(&'static [i32]);",
          "    ",
          "    impl Index<usize> for SingleElement {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for SingleElement {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = SingleElement(&[99]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(choices.len() > 0);",
          "    let result = choices.choose(&mut rng);",
          "    assert!(result.is_some());",
          "    let output = result.unwrap();",
          "    assert_eq!(*output, choices[0]);",
          "    assert_eq!(output, &99);"
        ],
        "code": [
          "{",
          "    struct SingleElement(&'static [i32]);",
          "    ",
          "    impl Index<usize> for SingleElement {",
          "        type Output = i32;",
          "",
          "        fn index(&self, index: usize) -> &Self::Output {",
          "            &self.0[index]",
          "        }",
          "    }",
          "",
          "    impl IndexedRandom for SingleElement {",
          "        fn len(&self) -> usize {",
          "            self.0.len()",
          "        }",
          "    }",
          "    ",
          "    let choices = SingleElement(&[99]);",
          "    let mut rng = rand::rng();",
          "    let _ = choices.choose(&mut rng);",
          "    assert!(choices.len() > 0);",
          "    let result = choices.choose(&mut rng);",
          "    assert!(result.is_some());",
          "    let output = result.unwrap();",
          "    assert_eq!(*output, choices[0]);",
          "    assert_eq!(output, &99);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]