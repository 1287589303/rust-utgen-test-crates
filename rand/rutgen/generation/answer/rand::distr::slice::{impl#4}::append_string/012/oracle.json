[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let slice: [char; 200] = ['a'; 200];",
          "    let rng = &mut rand::thread_rng();",
          "    let mut result_string = String::new();",
          "    let choose = Choose {",
          "        slice: &slice,",
          "        range: UniformUsize { low: 0, range: 200, thresh: 200, mode64: false },",
          "        num_choices: NonZeroUsize::new(1).unwrap(),",
          "    };",
          "",
          "    choose.append_string(rng, &mut result_string, 100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_string.len(), 0);",
          "    assert!(result_string.is_empty());",
          "    assert!(result_string.chars().all(|c| c.len_utf8() < 4));",
          "    assert_eq!(result_string.chars().count(), 0);",
          "    assert_eq!(choose.slice.len(), 200);",
          "    assert_eq!(choose.num_choices.get(), 1);",
          "    assert_eq!(choose.range.low, 0);",
          "    assert_eq!(choose.range.range, 200);",
          "    assert_eq!(choose.range.thresh, 200);",
          "    assert_eq!(choose.range.mode64, false);"
        ],
        "code": [
          "{",
          "    let slice: [char; 200] = ['a'; 200];",
          "    let rng = &mut rand::thread_rng();",
          "    let mut result_string = String::new();",
          "    let choose = Choose {",
          "        slice: &slice,",
          "        range: UniformUsize { low: 0, range: 200, thresh: 200, mode64: false },",
          "        num_choices: NonZeroUsize::new(1).unwrap(),",
          "    };",
          "",
          "    choose.append_string(rng, &mut result_string, 100);",
          "    assert_eq!(result_string.len(), 0);",
          "    assert!(result_string.is_empty());",
          "    assert!(result_string.chars().all(|c| c.len_utf8() < 4));",
          "    assert_eq!(result_string.chars().count(), 0);",
          "    assert_eq!(choose.slice.len(), 200);",
          "    assert_eq!(choose.num_choices.get(), 1);",
          "    assert_eq!(choose.range.low, 0);",
          "    assert_eq!(choose.range.range, 200);",
          "    assert_eq!(choose.range.thresh, 200);",
          "    assert_eq!(choose.range.mode64, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]