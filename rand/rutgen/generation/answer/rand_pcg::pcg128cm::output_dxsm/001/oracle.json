[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 0;",
          "    let result = output_dxsm(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, expected_hi_value_for_state_0);",
          "    assert_eq!(result, output_dxsm(0));",
          "    assert!(result.is::<u64>());",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_1);",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_max);",
          "    let state: u128 = 12345678901234567890;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_12345678901234567890);",
          "    let state: u128 = 98765432109876543210;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_98765432109876543210);",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_large);"
        ],
        "code": [
          "{",
          "    let state: u128 = 0;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_0);",
          "    assert_eq!(result, output_dxsm(0));",
          "    assert!(result.is::<u64>());",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_1);",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_max);",
          "    let state: u128 = 12345678901234567890;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_12345678901234567890);",
          "    let state: u128 = 98765432109876543210;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_98765432109876543210);",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_large);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "}"
        ],
        "oracle": [
          "    let state: u128 = 1;",
          "    let expected: u64 = 15750249268501108917;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = 0;",
          "    let expected: u64 = 1;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = 2;",
          "    let expected: u64 = 31500498537002217835;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = u128::MAX;",
          "    let expected: u64 = 17965151661003154663;",
          "    assert_eq!(output_dxsm(state), expected);"
        ],
        "code": [
          "{",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "    let state: u128 = 1;",
          "    let expected: u64 = 15750249268501108917;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = 0;",
          "    let expected: u64 = 1;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = 2;",
          "    let expected: u64 = 31500498537002217835;",
          "    assert_eq!(output_dxsm(state), expected);",
          "    let state: u128 = u128::MAX;",
          "    let expected: u64 = 17965151661003154663;",
          "    assert_eq!(output_dxsm(state), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = u64::MAX as u128;",
          "    let result = output_dxsm(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, expected_value_for_u64::MAX);",
          "    ",
          "    let state: u128 = 0;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_zero);",
          "    ",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_one);",
          "    ",
          "    let state: u128 = 2;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_two);",
          "    ",
          "    let state: u128 = 12345678901234567890;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_specific_state);",
          "    ",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_u128::MAX);"
        ],
        "code": [
          "{",
          "    let state: u128 = u64::MAX as u128;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_u64::MAX);",
          "    ",
          "    let state: u128 = 0;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_zero);",
          "    ",
          "    let state: u128 = 1;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_one);",
          "    ",
          "    let state: u128 = 2;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_two);",
          "    ",
          "    let state: u128 = 12345678901234567890;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_specific_state);",
          "    ",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_value_for_u128::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 1 << 64;",
          "    let result = output_dxsm(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, expected_hi_value_for_state_1 << 64);",
          "    assert!(result.is::<u64>());",
          "    assert!(result > 0);",
          "    assert!(result < u64::MAX);",
          "    let state: u128 = 0;",
          "    let result_zero_state = output_dxsm(state);",
          "    assert_eq!(result_zero_state, expected_hi_value_for_state_0);",
          "    let state: u128 = std::u128::MAX;",
          "    let result_max_state = output_dxsm(state);",
          "    assert_eq!(result_max_state, expected_hi_value_for_state_max);"
        ],
        "code": [
          "{",
          "    let state: u128 = 1 << 64;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(result, expected_hi_value_for_state_1 << 64);",
          "    assert!(result.is::<u64>());",
          "    assert!(result > 0);",
          "    assert!(result < u64::MAX);",
          "    let state: u128 = 0;",
          "    let result_zero_state = output_dxsm(state);",
          "    assert_eq!(result_zero_state, expected_hi_value_for_state_0);",
          "    let state: u128 = std::u128::MAX;",
          "    let result_max_state = output_dxsm(state);",
          "    assert_eq!(result_max_state, expected_hi_value_for_state_max);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output_dxsm(u128::MAX), 11665514189082022497);",
          "    assert_eq!(output_dxsm(0), 15750249268501108917);",
          "    assert_eq!(output_dxsm(1), 11585754035320583457);",
          "    assert_eq!(output_dxsm(2), 16812351307755974107);",
          "    assert_eq!(output_dxsm(123456789), 12442979659812984314);",
          "    assert_eq!(output_dxsm(999999999999999999999), 12107366095949974220);",
          "    assert_eq!(output_dxsm(123456789012345678901234567890), 11602965165364738572);",
          "    assert_eq!(output_dxsm(512), 16618445711032415327);",
          "    assert_eq!(output_dxsm(340282366920938463463374607431768211455), 7048215936763333495);",
          "    assert_eq!(output_dxsm(987654321012345678901234567890123456789), 15029530075992057408);"
        ],
        "code": [
          "{",
          "    let state: u128 = u128::MAX;",
          "    let result = output_dxsm(state);",
          "    assert_eq!(output_dxsm(u128::MAX), 11665514189082022497);",
          "    assert_eq!(output_dxsm(0), 15750249268501108917);",
          "    assert_eq!(output_dxsm(1), 11585754035320583457);",
          "    assert_eq!(output_dxsm(2), 16812351307755974107);",
          "    assert_eq!(output_dxsm(123456789), 12442979659812984314);",
          "    assert_eq!(output_dxsm(999999999999999999999), 12107366095949974220);",
          "    assert_eq!(output_dxsm(123456789012345678901234567890), 11602965165364738572);",
          "    assert_eq!(output_dxsm(512), 16618445711032415327);",
          "    assert_eq!(output_dxsm(340282366920938463463374607431768211455), 7048215936763333495);",
          "    assert_eq!(output_dxsm(987654321012345678901234567890123456789), 15029530075992057408);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]