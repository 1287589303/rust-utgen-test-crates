[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 2, 3]; // Length is 3",
          "    let mut dst: [u64; 1] = [0]; // dst has length 1, requires src of length at least 8",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst: [u64; 1] = [0];",
          "    read_u64_into(src, &mut dst);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 2, 3]; // Length is 3",
          "    let mut dst: [u64; 1] = [0]; // dst has length 1, requires src of length at least 8",
          "    read_u64_into(src, &mut dst);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let src: &[u8] = &[1, 2, 3];",
          "    let mut dst: [u64; 1] = [0];",
          "    read_u64_into(src, &mut dst);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7]; // Length is 7",
          "    let mut dst: [u64; 1] = [0]; // dst has length 1",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(panic::catch_unwind(|| read_u64_into(&[1, 2, 3, 4, 5, 6, 7], &mut [0])).is_err());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6, 7]; // Length is 7",
          "    let mut dst: [u64; 1] = [0]; // dst has length 1",
          "    read_u64_into(src, &mut dst);",
          "    assert!(panic::catch_unwind(|| read_u64_into(&[1, 2, 3, 4, 5, 6, 7], &mut [0])).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6]; // Length is 6",
          "    let mut dst: [u64; 2] = [0, 0]; // dst has length 2, requires src of length at least 16",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[1, 2, 3, 4, 5, 6], &mut [0u64; 2])).is_err());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 2, 3, 4, 5, 6]; // Length is 6",
          "    let mut dst: [u64; 2] = [0, 0]; // dst has length 2, requires src of length at least 16",
          "    read_u64_into(src, &mut dst);",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[1, 2, 3, 4, 5, 6], &mut [0u64; 2])).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]