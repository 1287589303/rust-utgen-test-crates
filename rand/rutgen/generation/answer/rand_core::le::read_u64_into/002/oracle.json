[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst: &mut [u64] = &mut [];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[0u8; 8], &mut [0u64; 1])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[], &mut [0u64; 1])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[0u8; 16], &mut [0u64; 3])).is_ok());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst: &mut [u64] = &mut [];",
          "    read_u64_into(src, &mut dst);",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[0u8; 8], &mut [0u64; 1])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[], &mut [0u64; 1])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(&[0u8; 16], &mut [0u64; 3])).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(dst.len() == 1);",
          "    assert_eq!(dst[0], 1);",
          "    assert!(src.len() == 8);",
          "    assert!(src.len() >= 8 * dst.len());",
          "    assert!(dst.iter().all(|&x| x == 0));"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0];",
          "    read_u64_into(src, &mut dst);",
          "    assert!(dst.len() == 1);",
          "    assert_eq!(dst[0], 1);",
          "    assert!(src.len() == 8);",
          "    assert!(src.len() >= 8 * dst.len());",
          "    assert!(dst.iter().all(|&x| x == 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 2);",
          "    assert!(std::panic::catch_unwind(|| { let _ = read_u64_into(&src[..8], &mut [0]); }).is_err());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0];",
          "    read_u64_into(src, &mut dst);",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 2);",
          "    assert!(std::panic::catch_unwind(|| { let _ = read_u64_into(&src[..8], &mut [0]); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0, 0];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 2);",
          "    assert_eq!(dst[2], 3);"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0, 0];",
          "    read_u64_into(src, &mut dst);",
          "    assert_eq!(dst[0], 1);",
          "    assert_eq!(dst[1], 2);",
          "    assert_eq!(dst[2], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst: &mut [u64] = &mut [0];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(src.len(), 8 * dst.len());",
          "    assert!(src.len() >= 8 * dst.len());",
          "    assert!(dst.len() == 0);",
          "    assert!(src.len() == 0);",
          "    assert!(dst.is_empty());",
          "    assert!(src.is_empty());",
          "    assert!(src.len() < 8 * dst.len());",
          "    assert!(dst.len() > 0);"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[];",
          "    let mut dst: &mut [u64] = &mut [0];",
          "    read_u64_into(src, &mut dst);",
          "    assert_eq!(src.len(), 8 * dst.len());",
          "    assert!(src.len() >= 8 * dst.len());",
          "    assert!(dst.len() == 0);",
          "    assert!(src.len() == 0);",
          "    assert!(dst.is_empty());",
          "    assert!(src.is_empty());",
          "    assert!(src.len() < 8 * dst.len());",
          "    assert!(dst.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, &[0, 0]);",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(src, &mut dst)).is_err());",
          "    src.len() >= 8 * dst.len();",
          "    dst.iter().all(|&x| x == 0);",
          "    assert!(src.chunks_exact(8).count() < dst.len());",
          "    assert!(dst.len() == 2);",
          "    assert!(dst.len() > 0);",
          "    assert!(src.len() == 7);",
          "    assert!(src.len() < 8 * dst.len());",
          "    assert!(out.len() < dst.len());"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [0, 0];",
          "    read_u64_into(src, &mut dst);",
          "    assert_eq!(dst, &[0, 0]);",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(src, &mut dst)).is_err());",
          "    src.len() >= 8 * dst.len();",
          "    dst.iter().all(|&x| x == 0);",
          "    assert!(src.chunks_exact(8).count() < dst.len());",
          "    assert!(dst.len() == 2);",
          "    assert!(dst.len() > 0);",
          "    assert!(src.len() == 7);",
          "    assert!(src.len() < 8 * dst.len());",
          "    assert!(out.len() < dst.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [];",
          "    read_u64_into(src, &mut dst);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| read_u64_into(src, &mut dst)).is_err());",
          "    dst.len().eq(&0);"
        ],
        "code": [
          "{",
          "    let src: &[u8] = &[1, 0, 0, 0, 0, 0, 0, 0];",
          "    let mut dst: &mut [u64] = &mut [];",
          "    read_u64_into(src, &mut dst);",
          "    assert!(std::panic::catch_unwind(|| read_u64_into(src, &mut dst)).is_err());",
          "    dst.len().eq(&0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]