[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.state += 1;",
          "            self.state",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, 1);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 2);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 3);",
          "    rng.state = 100;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 101);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 102);",
          "    rng.state = u32::MAX;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 0);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 1);"
        ],
        "code": [
          "{",
          "    struct TestRng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.state += 1;",
          "            self.state",
          "        }",
          "    }",
          "",
          "    let mut rng = TestRng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 1);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 2);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 3);",
          "    rng.state = 100;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 101);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 102);",
          "    rng.state = u32::MAX;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 0);",
          "    rng.next_u32(); // Advance RNG state",
          "    assert_eq!(value, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HighValueRng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for HighValueRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.state = u32::MAX;",
          "            self.state",
          "        }",
          "    }",
          "",
          "    let mut rng = HighValueRng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Wrapping(u32::MAX as u16));"
        ],
        "code": [
          "{",
          "    struct HighValueRng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for HighValueRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.state = u32::MAX;",
          "            self.state",
          "        }",
          "    }",
          "",
          "    let mut rng = HighValueRng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, Wrapping(u32::MAX as u16));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroRng;",
          "",
          "    impl Rng for ZeroRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "    }",
          "",
          "    let mut rng = ZeroRng;",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, 0);"
        ],
        "code": [
          "{",
          "    struct ZeroRng;",
          "",
          "    impl Rng for ZeroRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "    }",
          "",
          "    let mut rng = ZeroRng;",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MaxU16Rng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for MaxU16Rng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            65535 // value that is still within u16 limit when cast",
          "        }",
          "    }",
          "",
          "    let mut rng = MaxU16Rng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Wrapping(65535));"
        ],
        "code": [
          "{",
          "    struct MaxU16Rng {",
          "        state: u32,",
          "    }",
          "",
          "    impl Rng for MaxU16Rng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            65535 // value that is still within u16 limit when cast",
          "        }",
          "    }",
          "",
          "    let mut rng = MaxU16Rng { state: 0 };",
          "    let uniform = StandardUniform;",
          "    let value = uniform.sample(&mut rng);",
          "    assert_eq!(value, Wrapping(65535));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]