[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = 0;",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.s, [0x9e3779b97f4a7c15, 0x9e3779b97f4a7c15 ^ (0x9e3779b97f4a7c15.wrapping_add(0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb)), 0x9e3779b97f4a7c15.wrapping_add(2 * 0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(2 * 0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb), 0x9e3779b97f4a7c15.wrapping_add(3 * 0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(3 * 0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb)]);",
          "    ",
          "    assert_ne!(rng.s, [0; 4]);"
        ],
        "code": [
          "{",
          "    let state: u64 = 0;",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "    assert_eq!(rng.s, [0x9e3779b97f4a7c15, 0x9e3779b97f4a7c15 ^ (0x9e3779b97f4a7c15.wrapping_add(0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb)), 0x9e3779b97f4a7c15.wrapping_add(2 * 0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(2 * 0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb), 0x9e3779b97f4a7c15.wrapping_add(3 * 0x9e3779b97f4a7c15 >> 30).wrapping_mul(0xbf58476d1ce4e5b9).wrapping_add(3 * 0x9e3779b97f4a7c15 >> 27).wrapping_mul(0x94d049bb133111eb)]);",
          "    ",
          "    assert_ne!(rng.s, [0; 4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = u64::MAX; ",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.s.len(), 4);",
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert!(rng.s.iter().all(|&x| x != 0));",
          "    assert!(rng.s[0] > 0);",
          "    assert!(rng.s[1] > 0);",
          "    assert!(rng.s[2] > 0);",
          "    assert!(rng.s[3] > 0);"
        ],
        "code": [
          "{",
          "    let state: u64 = u64::MAX; ",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "    assert_eq!(rng.s.len(), 4);",
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert!(rng.s.iter().all(|&x| x != 0));",
          "    assert!(rng.s[0] > 0);",
          "    assert!(rng.s[1] > 0);",
          "    assert!(rng.s[2] > 0);",
          "    assert!(rng.s[3] > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = u64::MAX - 1; ",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.s.len(), 4);",
          "    assert!(rng.s.iter().any(|&val| val != 0));",
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert!(rng.s.iter().all(|&val| val <= u64::MAX));"
        ],
        "code": [
          "{",
          "    let state: u64 = u64::MAX - 1; ",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "    assert_eq!(rng.s.len(), 4);",
          "    assert!(rng.s.iter().any(|&val| val != 0));",
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert!(rng.s.iter().all(|&val| val <= u64::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u64 = 12345678901234567890;",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "}"
        ],
        "oracle": [
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert_eq!(rng.s.iter().all(|&x| x != 0), true);"
        ],
        "code": [
          "{",
          "    let state: u64 = 12345678901234567890;",
          "    let rng = Xoshiro256PlusPlus::seed_from_u64(state);",
          "    assert_ne!(rng.s, [0; 4]);",
          "    assert_eq!(rng.s.iter().all(|&x| x != 0), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]