[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = thread_rng();",
          "}"
        ],
        "oracle": [
          "    assert!(rng.is_some());",
          "    assert!(rng.clone().rng.get().is_null() == false);",
          "    assert_eq!(std::mem::size_of::<ThreadRng>(), std::mem::size_of::<Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>>());",
          "    assert!(rng.rng.get() as *const _ != std::ptr::null());",
          "    assert!(rng.rng.get() as *const _ != rng.rng.get() as *const Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>::null());"
        ],
        "code": [
          "{",
          "    let rng = thread_rng();",
          "    assert!(rng.is_some());",
          "    assert!(rng.clone().rng.get().is_null() == false);",
          "    assert_eq!(std::mem::size_of::<ThreadRng>(), std::mem::size_of::<Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>>());",
          "    assert!(rng.rng.get() as *const _ != std::ptr::null());",
          "    assert!(rng.rng.get() as *const _ != rng.rng.get() as *const Rc<UnsafeCell<ReseedingRng<Core, OsRng>>>::null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng1 = thread_rng();",
          "    let rng2 = thread_rng();",
          "    let rng3 = thread_rng();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng1, rng2);",
          "    assert_eq!(rng1, rng3);",
          "    assert_ne!(rng2, rng3);"
        ],
        "code": [
          "{",
          "    let rng1 = thread_rng();",
          "    let rng2 = thread_rng();",
          "    let rng3 = thread_rng();",
          "    assert_eq!(rng1, rng2);",
          "    assert_eq!(rng1, rng3);",
          "    assert_ne!(rng2, rng3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = thread_rng();",
          "    let rng_clone = rng.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(rng.is_some());",
          "    assert!(rng_clone.is_some());",
          "    assert_ne!(rng, rng_clone);",
          "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of_val(&rng_clone));",
          "    assert!(std::ptr::eq(&*rng.rng.get(), &*rng_clone.rng.get()));",
          "    assert!(rng_clone.is_clone_of(&rng));"
        ],
        "code": [
          "{",
          "    let rng = thread_rng();",
          "    let rng_clone = rng.clone();",
          "    assert!(rng.is_some());",
          "    assert!(rng_clone.is_some());",
          "    assert_ne!(rng, rng_clone);",
          "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of_val(&rng_clone));",
          "    assert!(std::ptr::eq(&*rng.rng.get(), &*rng_clone.rng.get()));",
          "    assert!(rng_clone.is_clone_of(&rng));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = thread_rng();",
          "}"
        ],
        "oracle": [
          "    assert!(rng.is_some());",
          "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of::<ThreadRng>());",
          "    assert!(std::any::TypeId::of::<ThreadRng>() == std::any::TypeId::of::<ThreadRng>());",
          "    assert!(rng.clone() == rng);",
          "    assert!(rng.rng.is_valid());"
        ],
        "code": [
          "{",
          "    let rng = thread_rng();",
          "    assert!(rng.is_some());",
          "    assert_eq!(std::mem::size_of_val(&rng), std::mem::size_of::<ThreadRng>());",
          "    assert!(std::any::TypeId::of::<ThreadRng>() == std::any::TypeId::of::<ThreadRng>());",
          "    assert!(rng.clone() == rng);",
          "    assert!(rng.rng.is_valid());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = thread_rng();",
          "    let rng_from_another_thread = std::thread::spawn(|| thread_rng()).join().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::intrinsics::size_of::<ThreadRng>(), std::intrinsics::size_of::<ThreadRng>());",
          "    assert!(std::mem::valid_ptr(rng.rng));",
          "    assert!(std::mem::valid_ptr(rng_from_another_thread.rng));",
          "    assert_ne!(rng as *const _, rng_from_another_thread as *const _);",
          "    assert!(std::thread::current().id() != std::thread::spawn(|| std::thread::current().id()).join().unwrap());",
          "    assert!(rng.rng != rng_from_another_thread.rng);"
        ],
        "code": [
          "{",
          "    let rng = thread_rng();",
          "    let rng_from_another_thread = std::thread::spawn(|| thread_rng()).join().unwrap();",
          "    assert_eq!(std::intrinsics::size_of::<ThreadRng>(), std::intrinsics::size_of::<ThreadRng>());",
          "    assert!(std::mem::valid_ptr(rng.rng));",
          "    assert!(std::mem::valid_ptr(rng_from_another_thread.rng));",
          "    assert_ne!(rng as *const _, rng_from_another_thread as *const _);",
          "    assert!(std::thread::current().id() != std::thread::spawn(|| std::thread::current().id()).join().unwrap());",
          "    assert!(rng.rng != rng_from_another_thread.rng);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]