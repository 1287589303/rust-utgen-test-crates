[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 1.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().0.start, 1.0);",
          "    assert_eq!(result.unwrap().0.end, 5.0);",
          "    ",
          "    let range_invalid = Range { start: 5.0, end: 1.0 };",
          "    let result_invalid = Uniform::<FiniteSampleUniform>::try_from(range_invalid);",
          "    assert!(matches!(result_invalid, Err(Error::EmptyRange)));",
          "    ",
          "    let range_non_finite = Range { start: f32::NAN, end: 5.0 };",
          "    let result_non_finite = Uniform::<FiniteSampleUniform>::try_from(range_non_finite);",
          "    assert!(matches!(result_non_finite, Err(Error::NonFinite)));"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 1.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().0.start, 1.0);",
          "    assert_eq!(result.unwrap().0.end, 5.0);",
          "    ",
          "    let range_invalid = Range { start: 5.0, end: 1.0 };",
          "    let result_invalid = Uniform::<FiniteSampleUniform>::try_from(range_invalid);",
          "    assert!(matches!(result_invalid, Err(Error::EmptyRange)));",
          "    ",
          "    let range_non_finite = Range { start: f32::NAN, end: 5.0 };",
          "    let result_non_finite = Uniform::<FiniteSampleUniform>::try_from(range_non_finite);",
          "    assert!(matches!(result_non_finite, Err(Error::NonFinite)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::EmptyRange));"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert_eq!(result, Err(Error::EmptyRange));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: std::f32::NAN, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "    ",
          "    let range = Range { start: 5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
          "    ",
          "    let range = Range { start: 0.0, end: 10.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let uniform_sample = result.unwrap();",
          "    assert_eq!(uniform_sample, Uniform::new(0.0, 10.0));"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: std::f32::NAN, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::NonFinite);",
          "    ",
          "    let range = Range { start: 5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::EmptyRange);",
          "    ",
          "    let range = Range { start: 0.0, end: 10.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let uniform_sample = result.unwrap();",
          "    assert_eq!(uniform_sample, Uniform::new(0.0, 10.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 1.0, end: std::f32::INFINITY };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err(), Some(Error::NonFinite));"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: 1.0, end: std::f32::INFINITY };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err(), Some(Error::NonFinite));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: -5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().0.start, -5.0);",
          "    assert_eq!(result.unwrap().0.end, 5.0);",
          "    assert_eq!(result.unwrap().1, Error::NonFinite);"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: -5.0, end: 5.0 };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap().0.start, -5.0);",
          "    assert_eq!(result.unwrap().0.end, 5.0);",
          "    assert_eq!(result.unwrap().1, Error::NonFinite);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: std::f32::MIN, end: std::f32::MAX };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    let uniform = result.unwrap();",
          "    assert_eq!(uniform, Uniform::<FiniteSampleUniform>::new(std::f32::MIN, std::f32::MAX));",
          "    ",
          "    let invalid_range = Range { start: std::f32::MAX, end: std::f32::MIN };",
          "    let result_invalid = Uniform::<FiniteSampleUniform>::try_from(invalid_range);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.unwrap_err(), Error::EmptyRange);"
        ],
        "code": [
          "{",
          "    struct FiniteSampleUniform;",
          "    impl SampleUniform for FiniteSampleUniform {",
          "        type Sampler = ();",
          "    }",
          "    ",
          "    let range = Range { start: std::f32::MIN, end: std::f32::MAX };",
          "    let result = Uniform::<FiniteSampleUniform>::try_from(range);",
          "    assert!(result.is_ok());",
          "    let uniform = result.unwrap();",
          "    assert_eq!(uniform, Uniform::<FiniteSampleUniform>::new(std::f32::MIN, std::f32::MAX));",
          "    ",
          "    let invalid_range = Range { start: std::f32::MAX, end: std::f32::MIN };",
          "    let result_invalid = Uniform::<FiniteSampleUniform>::try_from(invalid_range);",
          "    assert!(result_invalid.is_err());",
          "    assert_eq!(result_invalid.unwrap_err(), Error::EmptyRange);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]