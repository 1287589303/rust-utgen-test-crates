[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 1 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 1);",
          "    assert_ne!(dest[0], 0);",
          "    assert!(dest[0] <= u8::MAX);",
          "    assert!(dest.iter().all(|&x| x >= 0));",
          "    assert!(rng.state != 1 || dest[0] != 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 1 };",
          "    let mut dest = [0u8; 1];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 1);",
          "    assert_ne!(dest[0], 0);",
          "    assert!(dest[0] <= u8::MAX);",
          "    assert!(dest.iter().all(|&x| x >= 0));",
          "    assert!(rng.state != 1 || dest[0] != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 2 };",
          "    let mut dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 16);",
          "    assert!(dest.iter().all(|&byte| byte <= 255));",
          "    assert!(dest.iter().any(|&byte| byte != 0));",
          "    assert_ne!(dest, [0u8; 16]);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 2 };",
          "    let mut dest = [0u8; 16];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 16);",
          "    assert!(dest.iter().all(|&byte| byte <= 255));",
          "    assert!(dest.iter().any(|&byte| byte != 0));",
          "    assert_ne!(dest, [0u8; 16]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 3 };",
          "    let mut dest = [0u8; 32];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 32);",
          "    assert!(dest.iter().all(|&x| x >= 0));",
          "    assert!(dest.iter().all(|&x| x <= 255));",
          "    assert_ne!(dest, [0u8; 32]);",
          "    assert_ne!(dest, rng.state.to_le_bytes());"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 3 };",
          "    let mut dest = [0u8; 32];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 32);",
          "    assert!(dest.iter().all(|&x| x >= 0));",
          "    assert!(dest.iter().all(|&x| x <= 255));",
          "    assert_ne!(dest, [0u8; 32]);",
          "    assert_ne!(dest, rng.state.to_le_bytes());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 4 };",
          "    let mut dest = [0u8; 128];",
          "    rng.fill_bytes(&mut dest);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest.len(), 128);",
          "    assert_ne!(dest, [0; 128]);",
          "    assert!(dest.iter().all(|&x| x <= 255));",
          "    assert!(dest.iter().any(|&x| x != 0));",
          "    let initial_state = rng.state;",
          "    rng.fill_bytes(&mut dest);",
          "    assert_ne!(rng.state, initial_state);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64 { state: 4 };",
          "    let mut dest = [0u8; 128];",
          "    rng.fill_bytes(&mut dest);",
          "    assert_eq!(dest.len(), 128);",
          "    assert_ne!(dest, [0; 128]);",
          "    assert!(dest.iter().all(|&x| x <= 255));",
          "    assert!(dest.iter().any(|&x| x != 0));",
          "    let initial_state = rng.state;",
          "    rng.fill_bytes(&mut dest);",
          "    assert_ne!(rng.state, initial_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]