[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<f64> = vec![];",
          "    let result = WeightedIndex::new(weights);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::InvalidInput));"
        ],
        "code": [
          "{",
          "    let weights: Vec<f64> = vec![];",
          "    let result = WeightedIndex::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidInput));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<f64> = vec![f64::NAN];",
          "    let result = WeightedIndex::new(weights);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::InvalidWeight);"
        ],
        "code": [
          "{",
          "    let weights: Vec<f64> = vec![f64::NAN];",
          "    let result = WeightedIndex::new(weights);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), Error::InvalidWeight);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<f64> = vec![-1.0];",
          "    let result = WeightedIndex::new(weights);",
          "}"
        ],
        "oracle": [
          "    let weights: Vec<f64> = vec![-1.0];",
          "    let result = WeightedIndex::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidWeight));"
        ],
        "code": [
          "{",
          "    let weights: Vec<f64> = vec![-1.0];",
          "    let result = WeightedIndex::new(weights);",
          "    let weights: Vec<f64> = vec![-1.0];",
          "    let result = WeightedIndex::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<f64> = vec![0.0, -1.0];",
          "    let result = WeightedIndex::new(weights);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::InvalidWeight));"
        ],
        "code": [
          "{",
          "    let weights: Vec<f64> = vec![0.0, -1.0];",
          "    let result = WeightedIndex::new(weights);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(Error::InvalidWeight));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<f64> = vec![0.0, f64::NAN];",
          "    let result = WeightedIndex::new(weights);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::InvalidWeight));"
        ],
        "code": [
          "{",
          "    let weights: Vec<f64> = vec![0.0, f64::NAN];",
          "    let result = WeightedIndex::new(weights);",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]