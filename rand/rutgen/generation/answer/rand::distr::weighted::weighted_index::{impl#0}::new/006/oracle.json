[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights: Vec<i32> = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "}"
        ],
        "oracle": [
          "    result.unwrap_err() == Error::InvalidInput",
          "    let weights: Vec<i32> = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InsufficientNonZero",
          "    let weights: Vec<i32> = vec![5, -1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InvalidWeight",
          "    let weights: Vec<i32> = vec![1, 2, 3];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.is_ok()",
          "    let weights: Vec<i32> = vec![0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InsufficientNonZero"
        ],
        "code": [
          "{",
          "    let weights: Vec<i32> = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InvalidInput",
          "    let weights: Vec<i32> = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InsufficientNonZero",
          "    let weights: Vec<i32> = vec![5, -1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InvalidWeight",
          "    let weights: Vec<i32> = vec![1, 2, 3];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.is_ok()",
          "    let weights: Vec<i32> = vec![0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    result.unwrap_err() == Error::InsufficientNonZero",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights = vec![0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "}"
        ],
        "oracle": [
          "    let weights = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidInput));",
          "    ",
          "    let weights = vec![-1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "    ",
          "    let weights = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InsufficientNonZero));",
          "    ",
          "    let weights = vec![i32::MAX, 1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::Overflow));"
        ],
        "code": [
          "{",
          "    let weights = vec![0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    let weights = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidInput));",
          "    ",
          "    let weights = vec![-1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "    ",
          "    let weights = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InsufficientNonZero));",
          "    ",
          "    let weights = vec![i32::MAX, 1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::Overflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let weights = vec![-1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "    let weights = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidInput));",
          "    let weights = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InsufficientNonZero));"
        ],
        "code": [
          "{",
          "    let weights = vec![-1];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidWeight));",
          "    let weights = vec![];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InvalidInput));",
          "    let weights = vec![0, 0];",
          "    let result = WeightedIndex::<i32>::new(weights);",
          "    assert_eq!(result, Err(Error::InsufficientNonZero));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]