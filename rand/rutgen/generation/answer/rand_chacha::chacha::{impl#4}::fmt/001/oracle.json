[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugType;",
          "",
          "    impl fmt::Debug for DebugType {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"DebugType\")",
          "        }",
          "    }",
          "",
          "    let array: Array64<DebugType> = Array64([DebugType; 64]);",
          "    let mut buffer = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buffer);",
          "",
          "    array.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"Array64 {{}}\");"
        ],
        "code": [
          "{",
          "    struct DebugType;",
          "",
          "    impl fmt::Debug for DebugType {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"DebugType\")",
          "        }",
          "    }",
          "",
          "    let array: Array64<DebugType> = Array64([DebugType; 64]);",
          "    let mut buffer = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buffer);",
          "",
          "    array.fmt(formatter);",
          "    assert_eq!(buffer, \"Array64 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherDebugType;",
          "",
          "    impl fmt::Debug for AnotherDebugType {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherDebugType\")",
          "        }",
          "    }",
          "",
          "    let array: Array64<AnotherDebugType> = Array64([AnotherDebugType; 64]);",
          "    let mut buffer = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buffer);",
          "",
          "    array.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"Array64 {{}}\");",
          "    assert!(formatter.is_empty());",
          "    assert!(buffer.len() > 0);"
        ],
        "code": [
          "{",
          "    struct AnotherDebugType;",
          "",
          "    impl fmt::Debug for AnotherDebugType {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherDebugType\")",
          "        }",
          "    }",
          "",
          "    let array: Array64<AnotherDebugType> = Array64([AnotherDebugType; 64]);",
          "    let mut buffer = String::new();",
          "    let formatter = &mut fmt::Formatter::new(&mut buffer);",
          "",
          "    array.fmt(formatter);",
          "    assert_eq!(buffer, \"Array64 {{}}\");",
          "    assert!(formatter.is_empty());",
          "    assert!(buffer.len() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]