[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "        fn next_u64(&mut self) -> u64 {",
          "            0",
          "        }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 0;",
          "            }",
          "        }",
          "        fn drop(&mut self) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(3, 2);",
          "}"
        ],
        "oracle": [
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_zero_denominator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(1, 0);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_numerator_exceeds_denominator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(5, 4);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_zero_numerator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(0, 1);",
          "    }"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "        fn next_u64(&mut self) -> u64 {",
          "            0",
          "        }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 0;",
          "            }",
          "        }",
          "        fn drop(&mut self) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(3, 2);",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_zero_denominator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(1, 0);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_numerator_exceeds_denominator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(5, 4);",
          "    }",
          "    ",
          "    #[should_panic]",
          "    #[test]",
          "    fn test_random_ratio_zero_numerator() {",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(0, 1);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "        fn next_u64(&mut self) -> u64 {",
          "            0",
          "        }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 0;",
          "            }",
          "        }",
          "        fn drop(&mut self) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(1, 0);",
          "}"
        ],
        "oracle": [
          "    assert_panics!(rng.random_ratio(1, 0));",
          "    assert_panics!(rng.random_ratio(2, 2));",
          "    assert_panics!(rng.random_ratio(3, 2));",
          "    assert_panics!(rng.random_ratio(5, 0));",
          "    assert_panics!(rng.random_ratio(4, 4));",
          "    assert_panics!(rng.random_ratio(6, 5));"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0",
          "        }",
          "        fn next_u64(&mut self) -> u64 {",
          "            0",
          "        }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 0;",
          "            }",
          "        }",
          "        fn drop(&mut self) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    rng.random_ratio(1, 0);",
          "    assert_panics!(rng.random_ratio(1, 0));",
          "    assert_panics!(rng.random_ratio(2, 2));",
          "    assert_panics!(rng.random_ratio(3, 2));",
          "    assert_panics!(rng.random_ratio(5, 0));",
          "    assert_panics!(rng.random_ratio(4, 4));",
          "    assert_panics!(rng.random_ratio(6, 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]