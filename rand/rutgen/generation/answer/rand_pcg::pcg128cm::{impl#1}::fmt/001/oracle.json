[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 0,",
          "        increment: 0,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 0,",
          "        increment: 0,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 12345678901234567890,",
          "        increment: 98765432109876543210,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.write_str(\"Test\").is_ok());",
          "    assert!(formatter.write_str(\"Lcg128CmDxsm64 {{}}\").is_ok());"
        ],
        "code": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 12345678901234567890,",
          "        increment: 98765432109876543210,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.write_str(\"Test\").is_ok());",
          "    assert!(formatter.write_str(\"Lcg128CmDxsm64 {{}}\").is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: u128::MAX,",
          "        increment: u128::MAX,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buf.len(), 22);",
          "    assert_eq!(formatter.buf, \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.error.is_none());",
          "    assert!(formatter.write_called);"
        ],
        "code": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: u128::MAX,",
          "        increment: u128::MAX,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.buf.len(), 22);",
          "    assert_eq!(formatter.buf, \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.error.is_none());",
          "    assert!(formatter.write_called);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 0,",
          "        increment: u128::MAX,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.flags() == fmt::Formatter::default().flags());",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.alternate().is_none());",
          "    assert!(formatter.fill() == ' ');",
          "    assert!(formatter.width().is_none());",
          "    assert_eq!(rng.state, 0);",
          "    assert_eq!(rng.increment, u128::MAX);"
        ],
        "code": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: 0,",
          "        increment: u128::MAX,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), \"Lcg128CmDxsm64 {{}}\");",
          "    assert!(formatter.flags() == fmt::Formatter::default().flags());",
          "    assert!(formatter.precision().is_none());",
          "    assert!(formatter.alternate().is_none());",
          "    assert!(formatter.fill() == ' ');",
          "    assert!(formatter.width().is_none());",
          "    assert_eq!(rng.state, 0);",
          "    assert_eq!(rng.increment, u128::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: u128::MAX,",
          "        increment: 0,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "}"
        ],
        "oracle": [
          "    let rng = Lcg128CmDxsm64 { state: u128::MAX, increment: 0 };",
          "    let expected_output = \"Lcg128CmDxsm64 {{}}\";",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), expected_output);"
        ],
        "code": [
          "{",
          "    let rng = Lcg128CmDxsm64 {",
          "        state: u128::MAX,",
          "        increment: 0,",
          "    };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    let rng = Lcg128CmDxsm64 { state: u128::MAX, increment: 0 };",
          "    let expected_output = \"Lcg128CmDxsm64 {{}}\";",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter).unwrap();",
          "    assert_eq!(formatter.to_string(), expected_output);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]