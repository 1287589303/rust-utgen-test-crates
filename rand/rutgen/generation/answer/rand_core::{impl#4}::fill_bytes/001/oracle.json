[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.fill(1);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 1];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [1]);",
          "    let mut dst_empty: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dst_empty);",
          "    assert!(dst_empty.is_empty());",
          "    let mut dst_large = [0u8; 10];",
          "    rng.fill_bytes(&mut dst_large);",
          "    assert_eq!(dst_large, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);",
          "    let result: Result<(), ()> = rng.0.try_fill_bytes(&mut dst);",
          "    assert!(result.is_ok());",
          "    let err_result: Result<(), ()> = rng.0.try_fill_bytes(&mut dst);",
          "    expected_error(result.unwrap_err());"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.fill(1);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 1];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst, [1]);",
          "    let mut dst_empty: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dst_empty);",
          "    assert!(dst_empty.is_empty());",
          "    let mut dst_large = [0u8; 10];",
          "    rng.fill_bytes(&mut dst_large);",
          "    assert_eq!(dst_large, [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);",
          "    let result: Result<(), ()> = rng.0.try_fill_bytes(&mut dst);",
          "    assert!(result.is_ok());",
          "    let err_result: Result<(), ()> = rng.0.try_fill_bytes(&mut dst);",
          "    expected_error(result.unwrap_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.fill(2);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 1024];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst[0], 2);",
          "    assert_eq!(dst[1], 2);",
          "    assert_eq!(dst[1023], 2);",
          "    assert!(dst.iter().all(|&b| b == 2));"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            dst.fill(2);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 1024];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst[0], 2);",
          "    assert_eq!(dst[1], 2);",
          "    assert_eq!(dst[1023], 2);",
          "    assert!(dst.iter().all(|&b| b == 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            for byte in dst.iter_mut() {",
          "                *byte = 3;",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 512];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst, [3; 512]);",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 0]), Ok(()));",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 1]), Ok(()));",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 512]), Ok(()));",
          "    assert!(matches!(rng.0.try_fill_bytes(&mut [0u8; 512]), Ok(_)));",
          "    assert!(matches!(rng.0.try_fill_bytes(&mut dst), Ok(_)));",
          "    assert!(matches!(rng.0.try_next_u32(), Ok(0)));",
          "    assert!(matches!(rng.0.try_next_u64(), Ok(0)));"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    ",
          "    impl TryRngCore for MockRng {",
          "        type Error = ();",
          "        ",
          "        fn try_next_u32(&mut self) -> Result<u32, Self::Error> { Ok(0) }",
          "        fn try_next_u64(&mut self) -> Result<u64, Self::Error> { Ok(0) }",
          "        ",
          "        fn try_fill_bytes(&mut self, dst: &mut [u8]) -> Result<(), Self::Error> {",
          "            for byte in dst.iter_mut() {",
          "                *byte = 3;",
          "            }",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut rng = UnwrapErr(MockRng);",
          "    let mut dst = [0u8; 512];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst, [3; 512]);",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 0]), Ok(()));",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 1]), Ok(()));",
          "    assert_eq!(rng.0.try_fill_bytes(&mut [0u8; 512]), Ok(()));",
          "    assert!(matches!(rng.0.try_fill_bytes(&mut [0u8; 512]), Ok(_)));",
          "    assert!(matches!(rng.0.try_fill_bytes(&mut dst), Ok(_)));",
          "    assert!(matches!(rng.0.try_next_u32(), Ok(0)));",
          "    assert!(matches!(rng.0.try_next_u64(), Ok(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]