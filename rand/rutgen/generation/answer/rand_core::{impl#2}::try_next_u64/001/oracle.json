[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let _result = rng.try_next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(0));"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl RngCore for TestRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 0 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let _result = rng.try_next_u64();",
          "    assert_eq!(_result, Ok(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MaxRng;",
          "",
          "    impl RngCore for MaxRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { u64::MAX }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = MaxRng;",
          "    let _result = rng.try_next_u64();",
          "}"
        ],
        "oracle": [
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), u64::MAX);"
        ],
        "code": [
          "{",
          "    struct MaxRng;",
          "",
          "    impl RngCore for MaxRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { u64::MAX }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = MaxRng;",
          "    let _result = rng.try_next_u64();",
          "    assert!(_result.is_ok());",
          "    assert_eq!(_result.unwrap(), u64::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MidRng;",
          "",
          "    impl RngCore for MidRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 1234567890123456789 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = MidRng;",
          "    let _result = rng.try_next_u64();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Ok(1234567890123456789));"
        ],
        "code": [
          "{",
          "    struct MidRng;",
          "",
          "    impl RngCore for MidRng {",
          "        fn next_u32(&mut self) -> u32 { 0 }",
          "        fn next_u64(&mut self) -> u64 { 1234567890123456789 }",
          "        fn fill_bytes(&mut self, _dst: &mut [u8]) {}",
          "    }",
          "",
          "    let mut rng = MidRng;",
          "    let _result = rng.try_next_u64();",
          "    assert_eq!(_result, Ok(1234567890123456789));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]