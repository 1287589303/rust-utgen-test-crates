[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 0;",
          "    let _result = output_xsl_rr(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output_xsl_rr(0), 0);",
          "    assert_eq!(output_xsl_rr(1), 1);",
          "    assert_eq!(output_xsl_rr(u128::MAX), 16384);",
          "    assert_eq!(output_xsl_rr(0x1234567890abcdef0123456789abcdef), expected_value_for_state);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), expected_value_for_max_state);",
          "    assert_eq!(output_xsl_rr(0x00000000000000000000000000000001), expected_value_for_one);",
          "    assert_eq!(output_xsl_rr(0x80000000000000000000000000000000), expected_value_for_half_max);"
        ],
        "code": [
          "{",
          "    let state: u128 = 0;",
          "    let _result = output_xsl_rr(state);",
          "    assert_eq!(output_xsl_rr(0), 0);",
          "    assert_eq!(output_xsl_rr(1), 1);",
          "    assert_eq!(output_xsl_rr(u128::MAX), 16384);",
          "    assert_eq!(output_xsl_rr(0x1234567890abcdef0123456789abcdef), expected_value_for_state);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), expected_value_for_max_state);",
          "    assert_eq!(output_xsl_rr(0x00000000000000000000000000000001), expected_value_for_one);",
          "    assert_eq!(output_xsl_rr(0x80000000000000000000000000000000), expected_value_for_half_max);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 1;",
          "    let _result = output_xsl_rr(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output_xsl_rr(0), 0);",
          "    assert_eq!(output_xsl_rr(1), 1);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x1234567890ABCDEF1234567890ABCDEF), expected_value_for_state_0x1234567890ABCDEF1234567890ABCDEF);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFF0000000000000000), expected_value_for_state_0xFFFFFFFFFFFFFFFF0000000000000000);",
          "    assert_eq!(output_xsl_rr(0x0), 0);",
          "    assert_ne!(output_xsl_rr(2), output_xsl_rr(1));",
          "    assert_ne!(output_xsl_rr(3), output_xsl_rr(5));"
        ],
        "code": [
          "{",
          "    let state: u128 = 1;",
          "    let _result = output_xsl_rr(state);",
          "    assert_eq!(output_xsl_rr(0), 0);",
          "    assert_eq!(output_xsl_rr(1), 1);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), 0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x1234567890ABCDEF1234567890ABCDEF), expected_value_for_state_0x1234567890ABCDEF1234567890ABCDEF);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFF0000000000000000), expected_value_for_state_0xFFFFFFFFFFFFFFFF0000000000000000);",
          "    assert_eq!(output_xsl_rr(0x0), 0);",
          "    assert_ne!(output_xsl_rr(2), output_xsl_rr(1));",
          "    assert_ne!(output_xsl_rr(3), output_xsl_rr(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 0x80000000000000000000000000000000;",
          "    let _result = output_xsl_rr(state);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(output_xsl_rr(0x80000000000000000000000000000000), expected_value_for_state_0x80000000000000000000000000000000);",
          "    assert_eq!(output_xsl_rr(0x00000000000000000000000000000000), expected_value_for_state_0x00000000000000000000000000000000);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), expected_value_for_state_0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x1234567890ABCDEF0123456789ABCDEF), expected_value_for_state_0x1234567890ABCDEF0123456789ABCDEF);",
          "    assert_eq!(output_xsl_rr(0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF), expected_value_for_state_0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF);",
          "    assert_eq!(output_xsl_rr(0x1), expected_value_for_state_0x1);",
          "    assert_eq!(output_xsl_rr(0xA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0), expected_value_for_state_0xA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFF), expected_value_for_state_0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x8000000000000000), expected_value_for_state_0x8000000000000000);",
          "    assert_eq!(output_xsl_rr(0x7FFFFFFFFFFFFFFF), expected_value_for_state_0x7FFFFFFFFFFFFFFF);"
        ],
        "code": [
          "{",
          "    let state: u128 = 0x80000000000000000000000000000000;",
          "    let _result = output_xsl_rr(state);",
          "    assert_eq!(output_xsl_rr(0x80000000000000000000000000000000), expected_value_for_state_0x80000000000000000000000000000000);",
          "    assert_eq!(output_xsl_rr(0x00000000000000000000000000000000), expected_value_for_state_0x00000000000000000000000000000000);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF), expected_value_for_state_0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x1234567890ABCDEF0123456789ABCDEF), expected_value_for_state_0x1234567890ABCDEF0123456789ABCDEF);",
          "    assert_eq!(output_xsl_rr(0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF), expected_value_for_state_0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF);",
          "    assert_eq!(output_xsl_rr(0x1), expected_value_for_state_0x1);",
          "    assert_eq!(output_xsl_rr(0xA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0), expected_value_for_state_0xA0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0);",
          "    assert_eq!(output_xsl_rr(0xFFFFFFFFFFFFFFFF), expected_value_for_state_0xFFFFFFFFFFFFFFFF);",
          "    assert_eq!(output_xsl_rr(0x8000000000000000), expected_value_for_state_0x8000000000000000);",
          "    assert_eq!(output_xsl_rr(0x7FFFFFFFFFFFFFFF), expected_value_for_state_0x7FFFFFFFFFFFFFFF);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let _result = output_xsl_rr(state);",
          "}"
        ],
        "oracle": [
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, 0xFFFFFFFFFFFFFFFF);",
          "    let state: u128 = 0x00000000000000000000000000000000;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, 0x0000000000000000);",
          "    let state: u128 = 0x1234567890ABCDEF1234567890ABCDEF;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);",
          "    let state: u128 = 0x80000000000000000000000000000000;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);"
        ],
        "code": [
          "{",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let _result = output_xsl_rr(state);",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, 0xFFFFFFFFFFFFFFFF);",
          "    let state: u128 = 0x00000000000000000000000000000000;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, 0x0000000000000000);",
          "    let state: u128 = 0x1234567890ABCDEF1234567890ABCDEF;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);",
          "    let state: u128 = 0x80000000000000000000000000000000;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);",
          "    let state: u128 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE;",
          "    let expected_result = output_xsl_rr(state);",
          "    assert_eq!(expected_result, <expected_value_based_on_logic>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]