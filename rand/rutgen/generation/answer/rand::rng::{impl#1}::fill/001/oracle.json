[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut array: [u8; 10] = [0; 10];",
          "    let mut rng = MockRng;",
          "    array.fill(&mut rng);",
          "}"
        ],
        "oracle": [
          "    array == [42, 42, 42, 42, 42, 42, 42, 42, 42, 42]"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut array: [u8; 10] = [0; 10];",
          "    let mut rng = MockRng;",
          "    array.fill(&mut rng);",
          "    array == [42, 42, 42, 42, 42, 42, 42, 42, 42, 42]",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut slice: &mut [u8] = &mut [0; 5];",
          "    let mut rng = MockRng;",
          "    slice.fill(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice, &[42, 42, 42, 42, 42]);"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut slice: &mut [u8] = &mut [0; 5];",
          "    let mut rng = MockRng;",
          "    slice.fill(&mut rng);",
          "    assert_eq!(slice, &[42, 42, 42, 42, 42]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut array: [u8; 0] = [];",
          "    let mut rng = MockRng;",
          "    array.fill(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(array.is_empty());",
          "    assert_eq!(array.len(), 0);",
          "    assert_eq!(array, []);",
          "    let mut array_1: [u8; 1] = [0];",
          "    array_1.fill(&mut rng);",
          "    assert_eq!(array_1, [42]);",
          "    let mut array_5: [u8; 5] = [0, 0, 0, 0, 0];",
          "    array_5.fill(&mut rng);",
          "    assert_eq!(array_5, [42, 42, 42, 42, 42]);",
          "    let mut array_n: [u8; 10] = [0; 10];",
          "    array_n.fill(&mut rng);",
          "    assert_eq!(array_n, [42; 10]);"
        ],
        "code": [
          "{",
          "    struct MockRng;",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 { 42 }",
          "        fn next_u64(&mut self) -> u64 { 42 }",
          "        fn fill_bytes(&mut self, dest: &mut [u8]) {",
          "            for byte in dest.iter_mut() {",
          "                *byte = 42;",
          "            }",
          "        }",
          "        fn try_fill_bytes(&mut self, dest: &mut [u8]) -> Result<(), rand_core::Error> {",
          "            self.fill_bytes(dest);",
          "            Ok(())",
          "        }",
          "    }",
          "",
          "    let mut array: [u8; 0] = [];",
          "    let mut rng = MockRng;",
          "    array.fill(&mut rng);",
          "    assert!(array.is_empty());",
          "    assert_eq!(array.len(), 0);",
          "    assert_eq!(array, []);",
          "    let mut array_1: [u8; 1] = [0];",
          "    array_1.fill(&mut rng);",
          "    assert_eq!(array_1, [42]);",
          "    let mut array_5: [u8; 5] = [0, 0, 0, 0, 0];",
          "    array_5.fill(&mut rng);",
          "    assert_eq!(array_5, [42, 42, 42, 42, 42]);",
          "    let mut array_n: [u8; 10] = [0; 10];",
          "    array_n.fill(&mut rng);",
          "    assert_eq!(array_n, [42; 10]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]