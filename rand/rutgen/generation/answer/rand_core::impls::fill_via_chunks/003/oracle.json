[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[derive(Copy, Clone)]",
      "struct TestType(u32);",
      "",
      "impl Observable for TestType {",
      "    type Bytes = [u8; 4];",
      "    fn to_le_bytes(self) -> Self::Bytes {",
      "        self.0.to_le_bytes()",
      "    }",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[TestType] = &[TestType(1), TestType(2)];",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    let expected_chunks = 2; // Two elements in src",
          "    let expected_bytes = 8;   // 2 * size of TestType (4 bytes)",
          "    let _ = (result.0, expected_chunks);",
          "    let _ = (result.1, expected_bytes);",
          "}"
        ],
        "oracle": [
          "    let src: &[TestType] = &[TestType(1), TestType(2)];",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 2);",
          "    assert_eq!(result.1, 8);",
          "    assert_eq!(&dest, &[1, 0, 0, 0, 2, 0, 0, 0]);",
          "    src: &[TestType] = &[TestType(1)];",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 1);",
          "    assert_eq!(result.1, 4);",
          "    assert_eq!(&dest, &[1, 0, 0, 0]);",
          "    src: &[TestType] = &[];",
          "    let mut dest: [u8; 0] = [];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 0);",
          "    assert_eq!(result.1, 0);"
        ],
        "code": [
          "{",
          "    let src: &[TestType] = &[TestType(1), TestType(2)];",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    let expected_chunks = 2; // Two elements in src",
          "    let expected_bytes = 8;   // 2 * size of TestType (4 bytes)",
          "    let _ = (result.0, expected_chunks);",
          "    let _ = (result.1, expected_bytes);",
          "    let src: &[TestType] = &[TestType(1), TestType(2)];",
          "    let mut dest: [u8; 8] = [0; 8];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 2);",
          "    assert_eq!(result.1, 8);",
          "    assert_eq!(&dest, &[1, 0, 0, 0, 2, 0, 0, 0]);",
          "    src: &[TestType] = &[TestType(1)];",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 1);",
          "    assert_eq!(result.1, 4);",
          "    assert_eq!(&dest, &[1, 0, 0, 0]);",
          "    src: &[TestType] = &[];",
          "    let mut dest: [u8; 0] = [];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result.0, 0);",
          "    assert_eq!(result.1, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let src: &[TestType] = &[TestType(3)];",
          "    let mut dest: [u8; 4] = [0; 4]; // Exact size of one TestType",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    let expected_chunks = 1; // One element in src",
          "    let expected_bytes = 4;  // 1 * size of TestType (4 bytes)",
          "    let _ = (result.0, expected_chunks);",
          "    let _ = (result.1, expected_bytes);",
          "}"
        ],
        "oracle": [
          "    let src: &[TestType] = &[TestType(3)];",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result, (1, 4));"
        ],
        "code": [
          "{",
          "    let src: &[TestType] = &[TestType(3)];",
          "    let mut dest: [u8; 4] = [0; 4]; // Exact size of one TestType",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    let expected_chunks = 1; // One element in src",
          "    let expected_bytes = 4;  // 1 * size of TestType (4 bytes)",
          "    let _ = (result.0, expected_chunks);",
          "    let _ = (result.1, expected_bytes);",
          "    let src: &[TestType] = &[TestType(3)];",
          "    let mut dest: [u8; 4] = [0; 4];",
          "    let result = fill_via_chunks(src, &mut dest);",
          "    assert_eq!(result, (1, 4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]