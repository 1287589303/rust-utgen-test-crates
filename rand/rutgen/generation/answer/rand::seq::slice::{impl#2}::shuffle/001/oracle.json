[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl Rng for TestRng {",
          "        // Implement required methods for Rng trait",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let mut slice = [42];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], 42);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl Rng for TestRng {",
          "        // Implement required methods for Rng trait",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let mut slice = [42];",
          "    slice.shuffle(&mut rng);",
          "    assert_eq!(slice.len(), 1);",
          "    assert_eq!(slice[0], 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestRng;",
          "",
          "    impl Rng for TestRng {",
          "        // Implement required methods for Rng trait",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let mut slice: [i32; 0] = [];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 0);",
          "    assert_eq!(slice, []);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(slice.len(), 1);",
          "    let mut single_element_slice: [i32; 1] = [42];",
          "    single_element_slice.shuffle(&mut rng);",
          "    assert_eq!(single_element_slice.len(), 1);",
          "    assert_eq!(single_element_slice[0], 42);"
        ],
        "code": [
          "{",
          "    struct TestRng;",
          "",
          "    impl Rng for TestRng {",
          "        // Implement required methods for Rng trait",
          "    }",
          "",
          "    let mut rng = TestRng;",
          "    let mut slice: [i32; 0] = [];",
          "    slice.shuffle(&mut rng);",
          "    assert_eq!(slice.len(), 0);",
          "    assert_eq!(slice, []);",
          "    assert!(slice.is_empty());",
          "    assert_eq!(slice.len(), 1);",
          "    let mut single_element_slice: [i32; 1] = [42];",
          "    single_element_slice.shuffle(&mut rng);",
          "    assert_eq!(single_element_slice.len(), 1);",
          "    assert_eq!(single_element_slice[0], 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]