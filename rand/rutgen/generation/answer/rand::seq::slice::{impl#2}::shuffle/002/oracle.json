[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [i32] = &mut [1, 2, 3, 4, 5];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(slice.len() > 1);",
          "    assert_eq!(slice.len(), 5);",
          "    let original_slice = slice.to_vec();",
          "    slice.shuffle(&mut rng);",
          "    assert_ne!(original_slice, slice.to_vec());",
          "    assert!(slice.iter().all(|&x| original_slice.contains(&x)));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [i32] = &mut [1, 2, 3, 4, 5];",
          "    slice.shuffle(&mut rng);",
          "    assert!(slice.len() > 1);",
          "    assert_eq!(slice.len(), 5);",
          "    let original_slice = slice.to_vec();",
          "    slice.shuffle(&mut rng);",
          "    assert_ne!(original_slice, slice.to_vec());",
          "    assert!(slice.iter().all(|&x| original_slice.contains(&x)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [u64] = &mut [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 10);",
          "    assert!(!slice.windows(2).all(|w| w[0] <= w[1]));",
          "    assert!(slice.contains(&10));",
          "    assert!(slice.contains(&20));",
          "    assert!(slice.contains(&30));",
          "    assert!(slice.contains(&40));",
          "    assert!(slice.contains(&50));",
          "    assert!(slice.contains(&60));",
          "    assert!(slice.contains(&70));",
          "    assert!(slice.contains(&80));",
          "    assert!(slice.contains(&90));",
          "    assert!(slice.contains(&100));",
          "    assert_eq!(slice.iter().count(), 10);",
          "    assert_eq!(slice.iter().filter(|&&x| x % 10 == 0).count(), 10);",
          "    assert!(slice.iter().any(|&x| x > 50));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [u64] = &mut [10, 20, 30, 40, 50, 60, 70, 80, 90, 100];",
          "    slice.shuffle(&mut rng);",
          "    assert_eq!(slice.len(), 10);",
          "    assert!(!slice.windows(2).all(|w| w[0] <= w[1]));",
          "    assert!(slice.contains(&10));",
          "    assert!(slice.contains(&20));",
          "    assert!(slice.contains(&30));",
          "    assert!(slice.contains(&40));",
          "    assert!(slice.contains(&50));",
          "    assert!(slice.contains(&60));",
          "    assert!(slice.contains(&70));",
          "    assert!(slice.contains(&80));",
          "    assert!(slice.contains(&90));",
          "    assert!(slice.contains(&100));",
          "    assert_eq!(slice.iter().count(), 10);",
          "    assert_eq!(slice.iter().filter(|&&x| x % 10 == 0).count(), 10);",
          "    assert!(slice.iter().any(|&x| x > 50));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [f32] = &mut [1.1, 2.2, 3.3, 4.4];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert!(slice.len() == 4);",
          "    assert!(slice.contains(&1.1));",
          "    assert!(slice.contains(&2.2));",
          "    assert!(slice.contains(&3.3));",
          "    assert!(slice.contains(&4.4));",
          "    assert!(slice[0] != 1.1 || slice[1] != 2.2 || slice[2] != 3.3 || slice[3] != 4.4);",
          "    assert!(slice.iter().all(|&x| x == 1.1 || x == 2.2 || x == 3.3 || x == 4.4));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [f32] = &mut [1.1, 2.2, 3.3, 4.4];",
          "    slice.shuffle(&mut rng);",
          "    assert!(slice.len() == 4);",
          "    assert!(slice.contains(&1.1));",
          "    assert!(slice.contains(&2.2));",
          "    assert!(slice.contains(&3.3));",
          "    assert!(slice.contains(&4.4));",
          "    assert!(slice[0] != 1.1 || slice[1] != 2.2 || slice[2] != 3.3 || slice[3] != 4.4);",
          "    assert!(slice.iter().all(|&x| x == 1.1 || x == 2.2 || x == 3.3 || x == 4.4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [&str] = &mut [\"apple\", \"banana\", \"cherry\"];",
          "    slice.shuffle(&mut rng);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.contains(&\"apple\"));",
          "    assert!(slice.contains(&\"banana\"));",
          "    assert!(slice.contains(&\"cherry\"));",
          "    assert_ne!(slice[0], slice[1]);",
          "    assert_ne!(slice[1], slice[2]);",
          "    assert_ne!(slice[0], slice[2]);",
          "    assert!(slice != [\"apple\", \"banana\", \"cherry\"]);"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: &mut [&str] = &mut [\"apple\", \"banana\", \"cherry\"];",
          "    slice.shuffle(&mut rng);",
          "    assert_eq!(slice.len(), 3);",
          "    assert!(slice.contains(&\"apple\"));",
          "    assert!(slice.contains(&\"banana\"));",
          "    assert!(slice.contains(&\"cherry\"));",
          "    assert_ne!(slice[0], slice[1]);",
          "    assert_ne!(slice[1], slice[2]);",
          "    assert_ne!(slice[0], slice[2]);",
          "    assert!(slice != [\"apple\", \"banana\", \"cherry\"]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]