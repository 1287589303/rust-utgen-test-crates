[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 0;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, increment);",
          "    assert_eq!(pcg.state, Lcg64Xsh32::from_state_incr(0, 1).state);",
          "    assert_eq!(pcg.increment, Lcg64Xsh32::from_state_incr(0, 1).increment);",
          "    assert_eq!(pcg.state, 1);",
          "    assert_eq!(pcg.increment, 1);"
        ],
        "code": [
          "{",
          "    let state = 0;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, increment);",
          "    assert_eq!(pcg.state, Lcg64Xsh32::from_state_incr(0, 1).state);",
          "    assert_eq!(pcg.increment, Lcg64Xsh32::from_state_incr(0, 1).increment);",
          "    assert_eq!(pcg.state, 1);",
          "    assert_eq!(pcg.increment, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = u64::MAX;",
          "    let increment = u64::MAX;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, (u64::MAX.wrapping_add(u64::MAX)).wrapping_mul(MULTIPLIER).wrapping_add(u64::MAX));",
          "    assert_eq!(pcg.increment, u64::MAX);",
          "    assert!(pcg.state != u64::MAX);"
        ],
        "code": [
          "{",
          "    let state = u64::MAX;",
          "    let increment = u64::MAX;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (u64::MAX.wrapping_add(u64::MAX)).wrapping_mul(MULTIPLIER).wrapping_add(u64::MAX));",
          "    assert_eq!(pcg.increment, u64::MAX);",
          "    assert!(pcg.state != u64::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = u64::MAX / 2;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, state.wrapping_add(increment).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, increment);",
          "    assert_ne!(pcg.state, state);",
          "    assert!(pcg.state < u64::MAX);"
        ],
        "code": [
          "{",
          "    let state = u64::MAX / 2;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, state.wrapping_add(increment).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, increment);",
          "    assert_ne!(pcg.state, state);",
          "    assert!(pcg.state < u64::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = u64::MAX - 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    let state = u64::MAX - 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (u64::MAX - 1).wrapping_add(1).wrapping_mul(MULTIPLIER).wrapping_add(1));",
          "    assert_eq!(pcg.increment, 1);",
          "    assert_eq!(pcg, Lcg64Xsh32::from_state_incr(state, increment));"
        ],
        "code": [
          "{",
          "    let state = u64::MAX - 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    let state = u64::MAX - 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (u64::MAX - 1).wrapping_add(1).wrapping_mul(MULTIPLIER).wrapping_add(1));",
          "    assert_eq!(pcg.increment, 1);",
          "    assert_eq!(pcg, Lcg64Xsh32::from_state_incr(state, increment));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 1;",
          "    let increment = u64::MAX - 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    let state = 1;",
          "    let increment = u64::MAX - 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);"
        ],
        "code": [
          "{",
          "    let state = 1;",
          "    let increment = u64::MAX - 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    let state = 1;",
          "    let increment = u64::MAX - 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    let state = 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);"
        ],
        "code": [
          "{",
          "    let state = 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    let state = 1;",
          "    let increment = 1;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment)).wrapping_mul(MULTIPLIER).wrapping_add(increment));",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 0;",
          "    let increment = u64::MAX;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pcg.state, (0.wrapping_add(u64::MAX)).wrapping_mul(MULTIPLIER).wrapping_add(u64::MAX));",
          "    assert_eq!(pcg.increment, u64::MAX);",
          "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER).wrapping_add(pcg.increment));",
          "    assert!(pcg.state != 0);"
        ],
        "code": [
          "{",
          "    let state = 0;",
          "    let increment = u64::MAX;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (0.wrapping_add(u64::MAX)).wrapping_mul(MULTIPLIER).wrapping_add(u64::MAX));",
          "    assert_eq!(pcg.increment, u64::MAX);",
          "    assert_eq!(pcg.state, pcg.state.wrapping_mul(MULTIPLIER).wrapping_add(pcg.increment));",
          "    assert!(pcg.state != 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let state = 0;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "}"
        ],
        "oracle": [
          "    let state = 0;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER) + increment) % u64::MAX);",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);",
          "    assert!(pcg.state != state);",
          "    assert!(pcg.increment % 2 == 1);"
        ],
        "code": [
          "{",
          "    let state = 0;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    let state = 0;",
          "    let increment = u64::MAX / 2;",
          "    let pcg = Lcg64Xsh32::from_state_incr(state, increment);",
          "    assert_eq!(pcg.state, (state.wrapping_add(increment).wrapping_mul(MULTIPLIER) + increment) % u64::MAX);",
          "    assert_eq!(pcg.increment, (increment << 1) | 1);",
          "    assert!(pcg.state != state);",
          "    assert!(pcg.increment % 2 == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]