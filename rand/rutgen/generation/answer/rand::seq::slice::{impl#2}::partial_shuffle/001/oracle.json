[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 0;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, &mut [1, 2, 3, 4, 5]);",
          "    assert_eq!(result.1, &mut []);",
          "    assert!(slice.len() == 5);",
          "    assert!(slice == [1, 2, 3, 4, 5]);"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 0;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0, &mut [1, 2, 3, 4, 5]);",
          "    assert_eq!(result.1, &mut []);",
          "    assert!(slice.len() == 5);",
          "    assert!(slice == [1, 2, 3, 4, 5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = slice.len();",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = slice.len();",
          "    assert_eq!(slice.len(), 5);",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.1.len(), 5);",
          "    assert!(result.1.iter().all(|&x| [1, 2, 3, 4, 5].contains(&x)));",
          "    assert!(result.0.is_empty());",
          "    let original_slice = [1, 2, 3, 4, 5];",
          "    assert!(result.1.iter().all(|&x| original_slice.contains(&x)));",
          "    assert!(result.1.iter().count() == slice.len() - amount);",
          "    slice.partial_shuffle(&mut rng, 0);",
          "    assert_eq!(slice, original_slice);"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = slice.len();",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = slice.len();",
          "    assert_eq!(slice.len(), 5);",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 0);",
          "    assert_eq!(result.1.len(), 5);",
          "    assert!(result.1.iter().all(|&x| [1, 2, 3, 4, 5].contains(&x)));",
          "    assert!(result.0.is_empty());",
          "    let original_slice = [1, 2, 3, 4, 5];",
          "    assert!(result.1.iter().all(|&x| original_slice.contains(&x)));",
          "    assert!(result.1.iter().count() == slice.len() - amount);",
          "    slice.partial_shuffle(&mut rng, 0);",
          "    assert_eq!(slice, original_slice);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 3;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 3;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 3);",
          "    assert_eq!(result.1.len(), 2);",
          "    assert!(result.0.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5));",
          "    assert!(result.1.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5));",
          "    assert!(result.0.len() + result.1.len() == slice.len());",
          "    assert_eq!(&slice[..], &[result.1, result.0].concat());"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 3;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    let mut slice = [1, 2, 3, 4, 5];",
          "    let amount = 3;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 3);",
          "    assert_eq!(result.1.len(), 2);",
          "    assert!(result.0.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5));",
          "    assert!(result.1.iter().all(|&x| x == 1 || x == 2 || x == 3 || x == 4 || x == 5));",
          "    assert!(result.0.len() + result.1.len() == slice.len());",
          "    assert_eq!(&slice[..], &[result.1, result.0].concat());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2];",
          "    let amount = 1;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.1.len(), 1);",
          "    assert!(result.1.iter().all(|&x| x == 1 || x == 2));",
          "    assert!(result.0.iter().all(|&x| x == 1 || x == 2));",
          "    assert!(result.0.iter().chain(result.1.iter()).collect::<Vec<_>>().len() == 2);",
          "    assert!(result.1 != result.0);",
          "    assert!(result.1.contains(&1) || result.1.contains(&2));",
          "    assert!(result.0.contains(&1) || result.0.contains(&2));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2];",
          "    let amount = 1;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 1);",
          "    assert_eq!(result.1.len(), 1);",
          "    assert!(result.1.iter().all(|&x| x == 1 || x == 2));",
          "    assert!(result.0.iter().all(|&x| x == 1 || x == 2));",
          "    assert!(result.0.iter().chain(result.1.iter()).collect::<Vec<_>>().len() == 2);",
          "    assert!(result.1 != result.0);",
          "    assert!(result.1.contains(&1) || result.1.contains(&2));",
          "    assert!(result.0.contains(&1) || result.0.contains(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: Vec<u32> = (1..1000).collect();",
          "    let amount = 500;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: Vec<u32> = (1..1000).collect();",
          "    let amount = 500;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 500);",
          "    assert_eq!(result.1.len(), 500);",
          "    assert_eq!(result.0.iter().chain(result.1.iter()).collect::<Vec<_>>(), slice);",
          "    assert!(slice.len() < (u32::MAX as usize));"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: Vec<u32> = (1..1000).collect();",
          "    let amount = 500;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice: Vec<u32> = (1..1000).collect();",
          "    let amount = 500;",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert_eq!(result.0.len(), 500);",
          "    assert_eq!(result.1.len(), 500);",
          "    assert_eq!(result.0.iter().chain(result.1.iter()).collect::<Vec<_>>(), slice);",
          "    assert!(slice.len() < (u32::MAX as usize));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3];",
          "    let amount = 5; // intentionally exceeding the length of the slice",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "}"
        ],
        "oracle": [
          "    assert!(result.0.len() == 0);",
          "    assert!(result.1.len() == slice.len());",
          "    assert_eq!(slice, [1, 2, 3]);",
          "    assert!(result.1 as *const _ == slice.as_mut_ptr());",
          "    assert!(slice.len() == 3);"
        ],
        "code": [
          "{",
          "    let mut rng = rand::thread_rng();",
          "    let mut slice = [1, 2, 3];",
          "    let amount = 5; // intentionally exceeding the length of the slice",
          "    let result = slice.partial_shuffle(&mut rng, amount);",
          "    assert!(result.0.len() == 0);",
          "    assert!(result.1.len() == slice.len());",
          "    assert_eq!(slice, [1, 2, 3]);",
          "    assert!(result.1 as *const _ == slice.as_mut_ptr());",
          "    assert!(slice.len() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]