[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 2; // n == d/2",
          "    let d = 4; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 2; // n == d/2",
          "    let d = 4; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 3; // n == d/2",
          "    let d = 6; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 3; // n == d/2",
          "    let d = 6; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 4; // n == d/2",
          "    let d = 8; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(coin_flipper.chunk_remaining == 0);",
          "    assert!(coin_flipper.chunk == 0b00000000_00000000_00000000_00000000);",
          "    assert!(n == d);",
          "    assert!(n < d == false);",
          "    assert!(next_n == n);",
          "    assert!(next_n > n == false);",
          "    assert!(self.flip_c_heads(1) == false);",
          "    assert!(c == 1);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 4; // n == d/2",
          "    let d = 8; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "    assert_eq!(result, true);",
          "    assert!(coin_flipper.chunk_remaining == 0);",
          "    assert!(coin_flipper.chunk == 0b00000000_00000000_00000000_00000000);",
          "    assert!(n == d);",
          "    assert!(n < d == false);",
          "    assert!(next_n == n);",
          "    assert!(next_n > n == false);",
          "    assert!(self.flip_c_heads(1) == false);",
          "    assert!(c == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 5; // n == d/2",
          "    let d = 10; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // All tails",
          "        }",
          "    }",
          "",
          "    let mut coin_flipper = CoinFlipper::new(DummyRng);",
          "    let n = 5; // n == d/2",
          "    let d = 10; // d being an even number greater than 0",
          "    let result = coin_flipper.random_ratio(n, d);",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]