[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 15; // Example n",
          "    let d = 32; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flipper.random_ratio(15, 32), false);",
          "    assert!(flipper.chunk_remaining == 0);",
          "    assert!(flipper.chunk == 0);",
          "    assert!(flipper.rng == DummyRng);",
          "    assert_eq!(flipper.random_ratio(1, 2), false);",
          "    assert_eq!(flipper.random_ratio(7, 14), false);",
          "    assert_eq!(flipper.random_ratio(10, 20), false);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 15; // Example n",
          "    let d = 32; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "    assert_eq!(flipper.random_ratio(15, 32), false);",
          "    assert!(flipper.chunk_remaining == 0);",
          "    assert!(flipper.chunk == 0);",
          "    assert!(flipper.rng == DummyRng);",
          "    assert_eq!(flipper.random_ratio(1, 2), false);",
          "    assert_eq!(flipper.random_ratio(7, 14), false);",
          "    assert_eq!(flipper.random_ratio(10, 20), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 7; // Example n",
          "    let d = 16; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    flipper.random_ratio(7, 16) == false;",
          "    flipper.chunk_remaining == 0;",
          "    flipper.chunk == 0;",
          "    flipper.chunk_remaining == 32;",
          "    flipper.flip_c_heads(1) == false;",
          "    flipper.random_ratio(10, 20) == false;",
          "    flipper.random_ratio(5, 12) == false;",
          "    flipper.random_ratio(1, 3) == false;",
          "    flipper.random_ratio(3, 7) == false;",
          "    flipper.random_ratio(7, 10) == false;"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 7; // Example n",
          "    let d = 16; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "    flipper.random_ratio(7, 16) == false;",
          "    flipper.chunk_remaining == 0;",
          "    flipper.chunk == 0;",
          "    flipper.chunk_remaining == 32;",
          "    flipper.flip_c_heads(1) == false;",
          "    flipper.random_ratio(10, 20) == false;",
          "    flipper.random_ratio(5, 12) == false;",
          "    flipper.random_ratio(1, 3) == false;",
          "    flipper.random_ratio(3, 7) == false;",
          "    flipper.random_ratio(7, 10) == false;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 3; // Example n",
          "    let d = 8; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(flipper.random_ratio(3, 8), false);"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl RngCore for DummyRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            0b00000000_00000000_00000000_00000000 // Simulate a coin flip with all tails",
          "        }",
          "        fn fill_bytes(&mut self, _: &mut [u8]) {}",
          "        fn try_fill_bytes(&mut self, _: &mut [u8]) -> Result<(), rand::Error> { Ok(()) }",
          "    }",
          "",
          "    let mut rng = DummyRng;",
          "    let mut flipper = CoinFlipper::new(rng);",
          "    let n = 3; // Example n",
          "    let d = 8; // d must be greater than n",
          "    flipper.random_ratio(n, d);",
          "    assert_eq!(flipper.random_ratio(3, 8), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]