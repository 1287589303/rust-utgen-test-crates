[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000000 }; // All heads",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 1;",
          "    let d = 4; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    coin_flipper.random_ratio(1, 4) == false;",
          "    coin_flipper.chunk == 0;",
          "    coin_flipper.chunk_remaining == 0;",
          "    coin_flipper.rng.next_u32() == 0b00000000_00000000_00000000_00000000;",
          "    coin_flipper.random_ratio(1, 4) is called with precondition n < d;",
          "    self.flip_c_heads(c) returns false for c > 1;",
          "    next_n != 0 when wrapping_add(n) prevents overflow;"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000000 }; // All heads",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 1;",
          "    let d = 4; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "    coin_flipper.random_ratio(1, 4) == false;",
          "    coin_flipper.chunk == 0;",
          "    coin_flipper.chunk_remaining == 0;",
          "    coin_flipper.rng.next_u32() == 0b00000000_00000000_00000000_00000000;",
          "    coin_flipper.random_ratio(1, 4) is called with precondition n < d;",
          "    self.flip_c_heads(c) returns false for c > 1;",
          "    next_n != 0 when wrapping_add(n) prevents overflow;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000001 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 1;",
          "    let d = 5; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(coin_flipper.random_ratio(1, 5), false);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000001 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 1;",
          "    let d = 5; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "    assert_eq!(coin_flipper.random_ratio(1, 5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000010 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 3;",
          "    let d = 8; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(coin_flipper.random_ratio(3, 8), false);",
          "    coin_flipper.chunk = 0b00000000_00000000_00000000_00000010;",
          "    coin_flipper.chunk_remaining = 1;",
          "    coin_flipper.random_ratio(3, 8);",
          "    assert!(coin_flipper.chunk_remaining < 1);",
          "    assert!(coin_flipper.chunk == 0b00000000_00000000_00000000_00000000);",
          "    assert_eq!(coin_flipper.random_ratio(3, 8), false);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000010 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 3;",
          "    let d = 8; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "    assert_eq!(coin_flipper.random_ratio(3, 8), false);",
          "    coin_flipper.chunk = 0b00000000_00000000_00000000_00000010;",
          "    coin_flipper.chunk_remaining = 1;",
          "    coin_flipper.random_ratio(3, 8);",
          "    assert!(coin_flipper.chunk_remaining < 1);",
          "    assert!(coin_flipper.chunk == 0b00000000_00000000_00000000_00000000);",
          "    assert_eq!(coin_flipper.random_ratio(3, 8), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000011 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 2;",
          "    let d = 7; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(coin_flipper.random_ratio(2, 7), false);",
          "    assert_eq!(coin_flipper.chunk_remaining, 0);",
          "    assert_eq!(coin_flipper.chunk, 0b00000000_00000000_00000000_00000011);",
          "    assert!(coin_flipper.chunk_remaining < 32);"
        ],
        "code": [
          "{",
          "    struct MockRng {",
          "        value: u32,",
          "    }",
          "",
          "    impl RngCore for MockRng {",
          "        fn next_u32(&mut self) -> u32 {",
          "            self.value",
          "        }",
          "    }",
          "",
          "    let mut rng = MockRng { value: 0b00000000_00000000_00000000_00000011 }; // Tails on first coin flip",
          "    let mut coin_flipper = CoinFlipper::new(rng);",
          "    let n = 2;",
          "    let d = 7; // d > 2",
          "    coin_flipper.random_ratio(n, d);",
          "    assert_eq!(coin_flipper.random_ratio(2, 7), false);",
          "    assert_eq!(coin_flipper.chunk_remaining, 0);",
          "    assert_eq!(coin_flipper.chunk, 0b00000000_00000000_00000000_00000011);",
          "    assert!(coin_flipper.chunk_remaining < 32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]