[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct DummyReseeder;",
          "    impl TryRngCore for DummyReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let reseeder = DummyReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(0, reseeder);",
          "}"
        ],
        "oracle": [
          "    result.is_err();",
          "    assert_eq!(result.err(), Some(()));",
          "    result.is_ok();",
          "    assert!(result.is_err());",
          "    result.unwrap_err();"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct DummyReseeder;",
          "    impl TryRngCore for DummyReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let reseeder = DummyReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(0, reseeder);",
          "    result.is_err();",
          "    assert_eq!(result.err(), Some(()));",
          "    result.is_ok();",
          "    assert!(result.is_err());",
          "    result.unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct DummyReseeder;",
          "    impl TryRngCore for DummyReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let reseeder = DummyReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(1 << 64, reseeder);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ());",
          "    assert!(result.is_err());",
          "    let reseeder = DummyReseeder;",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(0, reseeder);",
          "    assert!(result.is_ok());",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(u64::MAX, reseeder);",
          "    assert!(result.is_err());",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(1, reseeder);",
          "    assert!(result.is_ok());"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct DummyReseeder;",
          "    impl TryRngCore for DummyReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let reseeder = DummyReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(1 << 64, reseeder);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), ());",
          "    assert!(result.is_err());",
          "    let reseeder = DummyReseeder;",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(0, reseeder);",
          "    assert!(result.is_ok());",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(u64::MAX, reseeder);",
          "    assert!(result.is_err());",
          "    let result = ReseedingRng::<DummyRng, DummyReseeder>::new(1, reseeder);",
          "    assert!(result.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct InvalidReseeder;",
          "    impl TryRngCore for InvalidReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let invalid_reseeder = InvalidReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, InvalidReseeder>::new(100, invalid_reseeder);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(result.unwrap_err().is_err());",
          "    assert!(result.unwrap_err().is_none());",
          "    assert_eq!(size_of_val(&result), 0);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result.err(), Some(()));",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    struct DummyRng;",
          "    impl SeedableRng for DummyRng {}",
          "    impl BlockRngCore for DummyRng {}",
          "    struct InvalidReseeder;",
          "    impl TryRngCore for InvalidReseeder {",
          "        type Error = ();",
          "    }",
          "    ",
          "    let invalid_reseeder = InvalidReseeder;",
          "    ",
          "    let result = ReseedingRng::<DummyRng, InvalidReseeder>::new(100, invalid_reseeder);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), ());",
          "    assert!(result.unwrap_err().is_err());",
          "    assert!(result.unwrap_err().is_none());",
          "    assert_eq!(size_of_val(&result), 0);",
          "    assert!(result.is_err());",
          "    assert!(matches!(result, Err(_)));",
          "    assert_eq!(result.err(), Some(()));",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]