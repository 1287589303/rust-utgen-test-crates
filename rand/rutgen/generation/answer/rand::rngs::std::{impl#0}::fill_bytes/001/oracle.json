[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 1] = [0; 1];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 1);",
          "    assert!(dst[0] >= 0);",
          "    assert!(dst[0] <= 255);",
          "    assert_ne!(dst[0], 0);"
        ],
        "code": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 1] = [0; 1];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 1);",
          "    assert!(dst[0] >= 0);",
          "    assert!(dst[0] <= 255);",
          "    assert_ne!(dst[0], 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 256] = [0; 256];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 256);",
          "    assert!(dst.iter().all(|&byte| byte == 0));",
          "    rng.fill_bytes(&mut dst);",
          "    assert!(!dst.iter().all(|&byte| byte == 0));",
          "    assert!(dst.iter().all(|&byte| byte <= 255));"
        ],
        "code": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 256] = [0; 256];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 256);",
          "    assert!(dst.iter().all(|&byte| byte == 0));",
          "    rng.fill_bytes(&mut dst);",
          "    assert!(!dst.iter().all(|&byte| byte == 0));",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 4096] = [0; 4096];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 4096);",
          "    assert_ne!(dst[0], dst[1]);",
          "    assert_ne!(dst[0], dst[2]);",
          "    assert_ne!(dst[1], dst[2]);",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert!(dst.iter().any(|&byte| byte != 0));"
        ],
        "code": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 4096] = [0; 4096];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 4096);",
          "    assert_ne!(dst[0], dst[1]);",
          "    assert_ne!(dst[0], dst[2]);",
          "    assert_ne!(dst[1], dst[2]);",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert!(dst.iter().any(|&byte| byte != 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 4095] = [0; 4095];",
          "    rng.fill_bytes(&mut dst);",
          "    let mut dst: [u8; 2] = [0; 2];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.iter().all(|&b| b == 0), true);",
          "    assert!(dst.len() == 4095);",
          "    assert!(dst[0] != dst[1] || dst[0] != dst[2]);",
          "    assert!(dst[0] <= 255 && dst[0] >= 0);",
          "    assert!(dst[1] <= 255 && dst[1] >= 0);",
          "    assert!(dst[2] <= 255 && dst[2] >= 0);",
          "    assert!(dst[4094] <= 255 && dst[4094] >= 0);",
          "    assert!(dst[4095] <= 255 && dst[4095] >= 0);",
          "    assert_eq!(dst[0..2].iter().all(|&b| b == 0), true);",
          "    assert!(dst.iter().any(|&b| b != 0));",
          "    test_rng_is_deterministic();"
        ],
        "code": [
          "{",
          "    let mut rng = StdRng(Rng::from_seed([0u8; 32]));",
          "    let mut dst: [u8; 4095] = [0; 4095];",
          "    rng.fill_bytes(&mut dst);",
          "    let mut dst: [u8; 2] = [0; 2];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.iter().all(|&b| b == 0), true);",
          "    assert!(dst.len() == 4095);",
          "    assert!(dst[0] != dst[1] || dst[0] != dst[2]);",
          "    assert!(dst[0] <= 255 && dst[0] >= 0);",
          "    assert!(dst[1] <= 255 && dst[1] >= 0);",
          "    assert!(dst[2] <= 255 && dst[2] >= 0);",
          "    assert!(dst[4094] <= 255 && dst[4094] >= 0);",
          "    assert!(dst[4095] <= 255 && dst[4095] >= 0);",
          "    assert_eq!(dst[0..2].iter().all(|&b| b == 0), true);",
          "    assert!(dst.iter().any(|&b| b != 0));",
          "    test_rng_is_deterministic();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]