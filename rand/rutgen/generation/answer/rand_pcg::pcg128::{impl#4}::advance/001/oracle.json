[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_advance_2);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, expected_state_after_advance_4);",
          "    rng.advance(8);",
          "    assert_eq!(rng.state, expected_state_after_advance_8);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
          "    rng.advance(u128::MAX);",
          "    assert_eq!(rng.state, expected_state_after_advance_max);",
          "    rng.advance(1);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_advance_2);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, expected_state_after_advance_4);",
          "    rng.advance(8);",
          "    assert_eq!(rng.state, expected_state_after_advance_8);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x2360_ed05_1fc6_5da4_4385_df64_9fcc_f645);",
          "    rng.advance(u128::MAX);",
          "    assert_eq!(rng.state, expected_state_after_advance_max);",
          "    rng.advance(1);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_advance_with_delta_3);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, expected_state_after_advance_with_delta_1);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(3);",
          "    assert_eq!(rng.state, expected_state_after_advance_with_delta_3);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, initial_state);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, expected_state_after_advance_with_delta_1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(16);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_16_advance);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, expected_state_after_1_advance);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_2_advance);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, expected_state_after_4_advance);",
          "    rng.advance(8);",
          "    assert_eq!(rng.state, expected_state_after_8_advance);",
          "    rng.advance(3);",
          "    assert_eq!(rng.state, expected_state_after_3_advance);",
          "    rng.advance(15);",
          "    assert_eq!(rng.state, expected_state_after_15_advance);",
          "    rng.advance(32);",
          "    assert_eq!(rng.state, expected_state_after_32_advance);",
          "    rng.advance(u128::MAX);",
          "    assert_eq!(rng.state, expected_state_after_max_advance);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(16);",
          "    assert_eq!(rng.state, expected_state_after_16_advance);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, expected_state_after_1_advance);",
          "    rng.advance(2);",
          "    assert_eq!(rng.state, expected_state_after_2_advance);",
          "    rng.advance(4);",
          "    assert_eq!(rng.state, expected_state_after_4_advance);",
          "    rng.advance(8);",
          "    assert_eq!(rng.state, expected_state_after_8_advance);",
          "    rng.advance(3);",
          "    assert_eq!(rng.state, expected_state_after_3_advance);",
          "    rng.advance(15);",
          "    assert_eq!(rng.state, expected_state_after_15_advance);",
          "    rng.advance(32);",
          "    assert_eq!(rng.state, expected_state_after_32_advance);",
          "    rng.advance(u128::MAX);",
          "    assert_eq!(rng.state, expected_state_after_max_advance);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(15);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, expected_state_after_15_advance);",
          "    assert_eq!(rng.state & 1, 1);",
          "    assert!(rng.state > 0);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(15);",
          "    assert_eq!(rng.state, expected_state_after_15_advance);",
          "    assert_eq!(rng.state & 1, 1);",
          "    assert!(rng.state > 0);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef | 1);",
          "    rng.advance(1);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
          "    rng.advance(2);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(10);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(5);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(u128::MAX);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(0x1234567890abcdef1234567890abcdef);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 0x1234567890abcdef1234567890abcdef | 1);",
          "    rng.advance(1);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
          "    rng.advance(2);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(10);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(5);",
          "    assert!(rng.state > (0x1234567890abcdef1234567890abcdef | 1));",
          "    rng.advance(u128::MAX);",
          "    assert!(rng.state != 0x1234567890abcdef1234567890abcdef | 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]