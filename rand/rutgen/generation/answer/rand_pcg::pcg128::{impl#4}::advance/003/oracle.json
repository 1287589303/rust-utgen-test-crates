[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1 | 1);",
          "    assert_eq!(rng.state, 2);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 2);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(1);",
          "    assert_eq!(rng.state, 1 | 1);",
          "    assert_eq!(rng.state, 2);",
          "    rng.advance(0);",
          "    assert_eq!(rng.state, 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(63) - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(63) - 1);",
          "    assert_eq!(rng.state, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(64));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);"
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(64));",
          "    assert_eq!(rng.state, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(128) - 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(rng.state, 1);  // Initial state should remain unchanged when delta is 0.",
          "    assert!(rng.state > 0);  // State should always be greater than 0."
        ],
        "code": [
          "{",
          "    let mut rng = Mcg128Xsl64::new(1);",
          "    rng.advance(2u128.pow(128) - 1);",
          "    assert_eq!(rng.state, 1);  // Initial state should remain unchanged when delta is 0.",
          "    assert!(rng.state > 0);  // State should always be greater than 0.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]