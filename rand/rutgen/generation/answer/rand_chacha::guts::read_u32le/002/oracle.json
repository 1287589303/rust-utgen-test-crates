[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3]; // Length is 3",
          "    read_u32le(xs);",
          "}"
        ],
        "oracle": [
          "    assert_panics!(|| read_u32le(&[1, 2, 3]));",
          "    assert_panics!(|| read_u32le(&[1, 2]));",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);"
        ],
        "code": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3]; // Length is 3",
          "    read_u32le(xs);",
          "    assert_panics!(|| read_u32le(&[1, 2, 3]));",
          "    assert_panics!(|| read_u32le(&[1, 2]));",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3, 4, 5]; // Length is 5",
          "    read_u32le(xs);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3, 4, 5])).is_err());",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1; 5])).is_err());"
        ],
        "code": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3, 4, 5]; // Length is 5",
          "    read_u32le(xs);",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3, 4, 5])).is_err());",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1, 2, 3])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[])).is_err());",
          "    assert!(std::panic::catch_unwind(|| read_u32le(&[1; 5])).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3, 4]; // Length is 4, values in range [0, 255]",
          "    read_u32le(xs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_u32le(&[1, 2, 3, 4]), 67305985);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_eq!(read_u32le(&[12, 34, 56, 78]), 2018915346);",
          "    assert_panics!(read_u32le(&[1, 2, 3]));  // Length < 4",
          "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));  // Length > 4"
        ],
        "code": [
          "{",
          "    let xs: &[u8] = &[1, 2, 3, 4]; // Length is 4, values in range [0, 255]",
          "    read_u32le(xs);",
          "    assert_eq!(read_u32le(&[1, 2, 3, 4]), 67305985);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_eq!(read_u32le(&[12, 34, 56, 78]), 2018915346);",
          "    assert_panics!(read_u32le(&[1, 2, 3]));  // Length < 4",
          "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));  // Length > 4",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let xs: &[u8] = &[0, 0, 0, 0]; // Minimum values",
          "    read_u32le(xs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_eq!(read_u32le(&[0xFF, 0xAB, 0xCD, 0xEF]), 0xEFCDABFF);",
          "    assert_eq!(read_u32le(&[0x12, 0x34, 0x56, 0x78]), 0x78563412);",
          "    assert_panics!(read_u32le(&[0; 3]));",
          "    assert_panics!(read_u32le(&[0; 5]));",
          "    assert_panics!(read_u32le(&[]));"
        ],
        "code": [
          "{",
          "    let xs: &[u8] = &[0, 0, 0, 0]; // Minimum values",
          "    read_u32le(xs);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_eq!(read_u32le(&[0xFF, 0xAB, 0xCD, 0xEF]), 0xEFCDABFF);",
          "    assert_eq!(read_u32le(&[0x12, 0x34, 0x56, 0x78]), 0x78563412);",
          "    assert_panics!(read_u32le(&[0; 3]));",
          "    assert_panics!(read_u32le(&[0; 5]));",
          "    assert_panics!(read_u32le(&[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let xs: &[u8] = &[255, 255, 255, 255]; // Maximum values",
          "    read_u32le(xs);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_panics!(read_u32le(&[1, 2, 3]));",
          "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let xs: &[u8] = &[255, 255, 255, 255]; // Maximum values",
          "    read_u32le(xs);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 0]), 0);",
          "    assert_eq!(read_u32le(&[1, 0, 0, 0]), 1);",
          "    assert_eq!(read_u32le(&[0, 1, 0, 0]), 256);",
          "    assert_eq!(read_u32le(&[0, 0, 1, 0]), 65536);",
          "    assert_eq!(read_u32le(&[0, 0, 0, 1]), 16777216);",
          "    assert_eq!(read_u32le(&[255, 255, 255, 255]), 4294967295);",
          "    assert_panics!(read_u32le(&[1, 2, 3]));",
          "    assert_panics!(read_u32le(&[1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]