[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 0 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 0 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 1u128 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.error().is_none());",
          "    assert!(formatter.is_fmt_joined());",
          "    assert!(formatter.has_value());",
          "    assert_eq!(rng.state, 1u128);"
        ],
        "code": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 1u128 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.error().is_none());",
          "    assert!(formatter.is_fmt_joined());",
          "    assert!(formatter.has_value());",
          "    assert_eq!(rng.state, 1u128);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Mcg128Xsl64 { state: u128::MIN };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().to_string(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.overflowed() == false);",
          "    assert!(formatter.debugging() == false);",
          "    assert!(rng.state == u128::MIN);"
        ],
        "code": [
          "{",
          "    let rng = Mcg128Xsl64 { state: u128::MIN };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().to_string(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.is_empty() == false);",
          "    assert!(formatter.overflowed() == false);",
          "    assert!(formatter.debugging() == false);",
          "    assert!(rng.state == u128::MIN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Mcg128Xsl64 { state: u128::MAX };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");"
        ],
        "code": [
          "{",
          "    let rng = Mcg128Xsl64 { state: u128::MAX };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Mcg128Xsl64 {{}}\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 0x1234_5678_9abc_def0_1234_5678_9abc_def0 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.is_write_successful());",
          "    assert!(formatter.availability_check());",
          "    assert!(formatter.formatting_state() == expected_state);"
        ],
        "code": [
          "{",
          "    let rng = Mcg128Xsl64 { state: 0x1234_5678_9abc_def0_1234_5678_9abc_def0 };",
          "    let mut formatter = fmt::Formatter::new();",
          "    rng.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer(), \"Mcg128Xsl64 {{}}\");",
          "    assert!(formatter.is_write_successful());",
          "    assert!(formatter.availability_check());",
          "    assert!(formatter.formatting_state() == expected_state);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]