[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [1, 2, 3, 4] };",
          "    let mut dst: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 0);",
          "    assert!(dst.is_empty());",
          "    assert!(rng.s == [1, 2, 3, 4]);"
        ],
        "code": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [1, 2, 3, 4] };",
          "    let mut dst: [u8; 0] = [];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 0);",
          "    assert!(dst.is_empty());",
          "    assert!(rng.s == [1, 2, 3, 4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [5, 6, 7, 8] };",
          "    let mut dst = [0u8; 1];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 1);",
          "    assert!(dst[0] >= 0);",
          "    assert!(dst[0] <= 255);",
          "    assert!(rng.s == [5, 6, 7, 8]);"
        ],
        "code": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [5, 6, 7, 8] };",
          "    let mut dst = [0u8; 1];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 1);",
          "    assert!(dst[0] >= 0);",
          "    assert!(dst[0] <= 255);",
          "    assert!(rng.s == [5, 6, 7, 8]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [9, 10, 11, 12] };",
          "    let mut dst = [0u8; 512];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 512);",
          "    assert!(dst.iter().all(|&byte| byte >= 0));",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert_ne!(dst, [0u8; 512]);",
          "    assert!(dst.iter().sum::<u8>() > 0);"
        ],
        "code": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [9, 10, 11, 12] };",
          "    let mut dst = [0u8; 512];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 512);",
          "    assert!(dst.iter().all(|&byte| byte >= 0));",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert_ne!(dst, [0u8; 512]);",
          "    assert!(dst.iter().sum::<u8>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [13, 14, 15, 16] };",
          "    let mut dst = [0u8; 1024];",
          "    rng.fill_bytes(&mut dst);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dst.len(), 1024);",
          "    assert_ne!(dst, [0u8; 1024]);",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert!(dst.iter().any(|&byte| byte != 0));",
          "    assert_eq!(rng.s, [13, 14, 15, 16]);"
        ],
        "code": [
          "{",
          "    let mut rng = Xoshiro256PlusPlus { s: [13, 14, 15, 16] };",
          "    let mut dst = [0u8; 1024];",
          "    rng.fill_bytes(&mut dst);",
          "    assert_eq!(dst.len(), 1024);",
          "    assert_ne!(dst, [0u8; 1024]);",
          "    assert!(dst.iter().all(|&byte| byte <= 255));",
          "    assert!(dst.iter().any(|&byte| byte != 0));",
          "    assert_eq!(rng.s, [13, 14, 15, 16]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]