[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 1,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert_eq!(cloned_iter.weighted_index.cumulative_weights, weighted_index_iter.weighted_index.cumulative_weights);",
          "    assert_eq!(cloned_iter.weighted_index.total_weight, weighted_index_iter.weighted_index.total_weight);",
          "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 1,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert_eq!(cloned_iter.weighted_index.cumulative_weights, weighted_index_iter.weighted_index.cumulative_weights);",
          "    assert_eq!(cloned_iter.weighted_index.total_weight, weighted_index_iter.weighted_index.total_weight);",
          "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert!(std::ptr::eq(cloned_iter.weighted_index, weighted_index_iter.weighted_index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 2,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert!(std::ptr::eq(weighted_index_iter.weighted_index, cloned_iter.weighted_index));"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![1.0, 2.0, 3.0];",
          "    let total_weight = 6.0;",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 2,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert!(std::ptr::eq(weighted_index_iter.weighted_index, cloned_iter.weighted_index));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![5.0]; ",
          "    let total_weight = 5.0; ",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert_ne!(cloned_iter as *const _, weighted_index_iter as *const _);"
        ],
        "code": [
          "{",
          "    struct SampleType;",
          "    ",
          "    impl SampleUniform for SampleType {",
          "        type Sampler = ();",
          "    }",
          "",
          "    let cumulative_weights = vec![5.0]; ",
          "    let total_weight = 5.0; ",
          "    let weight_distribution = ();",
          "",
          "    ",
          "    let weighted_index = WeightedIndex {",
          "        cumulative_weights,",
          "        total_weight,",
          "        weight_distribution,",
          "    };",
          "",
          "    let weighted_index_iter = WeightedIndexIter {",
          "        weighted_index: &weighted_index,",
          "        index: 0,",
          "    };",
          "",
          "    let cloned_iter = weighted_index_iter.clone();",
          "    assert_eq!(cloned_iter.weighted_index, weighted_index_iter.weighted_index);",
          "    assert_eq!(cloned_iter.index, weighted_index_iter.index);",
          "    assert_ne!(cloned_iter as *const _, weighted_index_iter as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]