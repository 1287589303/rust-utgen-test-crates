{
  "name": "rand::rngs::reseeding::{impl#5}::new",
  "mod_info": {
    "name": "rngs::reseeding",
    "loc": "src/rngs/mod.rs:80:1:80:15"
  },
  "visible": false,
  "loc": "src/rngs/reseeding.rs:184:5:205:6",
  "doc": "/// Create a new `ReseedingCore`.\n///\n/// `threshold` is the maximum number of bytes produced by\n/// [`BlockRngCore::generate`] before attempting reseeding.\n",
  "code": [
    "fn new(threshold: u64, mut reseeder: Rsdr) -> Result<Self, Rsdr::Error> {",
    "    // Because generating more values than `i64::MAX` takes centuries on",
    "    // current hardware, we just clamp to that value.",
    "    // Also we set a threshold of 0, which indicates no limit, to that",
    "    // value.",
    "    let threshold = if threshold == 0 {",
    "        i64::MAX",
    "    } else if threshold <= i64::MAX as u64 {",
    "        threshold as i64",
    "    } else {",
    "        i64::MAX",
    "    };",
    "",
    "    let inner = R::try_from_rng(&mut reseeder)?;",
    "",
    "    Ok(ReseedingCore {",
    "        inner,",
    "        reseeder,",
    "        threshold,",
    "        bytes_until_reseed: threshold,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 6,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "false",
          "line": 189,
          "bound": null
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        6,
        7,
        8,
        10,
        12,
        13,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "false",
          "line": 189,
          "bound": null
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        }
      ],
      "ret": "Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })",
      "path": [
        0,
        1,
        6,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "threshold <= i64::MAX as u64",
          "norm": "i64::MAX as u64 >= threshold",
          "value": "true",
          "line": 191,
          "bound": "threshold == i64::MAX as u64"
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "threshold <= i64::MAX as u64",
          "norm": "i64::MAX as u64 >= threshold",
          "value": "true",
          "line": 191,
          "bound": "threshold == i64::MAX as u64"
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        }
      ],
      "ret": "Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })",
      "path": [
        0,
        2,
        3,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "threshold <= i64::MAX as u64",
          "norm": "i64::MAX as u64 >= threshold",
          "value": "false",
          "line": 191,
          "bound": null
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "threshold == 0",
          "norm": "0 == threshold",
          "value": "true",
          "line": 189,
          "bound": null
        },
        {
          "cond": "threshold <= i64::MAX as u64",
          "norm": "i64::MAX as u64 >= threshold",
          "value": "false",
          "line": 191,
          "bound": null
        },
        {
          "cond": "R::try_from_rng(&mut reseeder)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        }
      ],
      "ret": "Ok(ReseedingCore {\n            inner,\n            reseeder,\n            threshold,\n            bytes_until_reseed: threshold,\n        })",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        14,
        15,
        16,
        17,
        18,
        19,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}