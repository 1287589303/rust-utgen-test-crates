{
  "name": "rand::rngs::reseeding::{impl#5}::reseed_and_generate",
  "mod_info": {
    "name": "rngs::reseeding",
    "loc": "src/rngs/mod.rs:80:1:80:15"
  },
  "visible": false,
  "loc": "src/rngs/reseeding.rs:216:5:228:6",
  "doc": "",
  "code": [
    "fn reseed_and_generate(&mut self, results: &mut <Self as BlockRngCore>::Results) {",
    "    trace!(\"Reseeding RNG (periodic reseed)\");",
    "",
    "    let num_bytes = size_of_val(results.as_ref());",
    "",
    "    if let Err(e) = self.reseed() {",
    "        warn!(\"Reseeding RNG failed: {}\", e);",
    "        let _ = e;",
    "    }",
    "",
    "    self.bytes_until_reseed = self.threshold - num_bytes as i64;",
    "    self.inner.generate(results);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Err(e) = self.reseed()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Err(e) = self.reseed()",
          "norm": null,
          "value": "true",
          "line": 221,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}