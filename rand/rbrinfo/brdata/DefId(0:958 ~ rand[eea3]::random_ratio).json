{
  "name": "rand::random_ratio",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:10:1:331:2"
  },
  "visible": true,
  "loc": "src/lib.rs:273:1:275:2",
  "doc": "/// Return a bool with a probability of `numerator/denominator` of being\n/// true.\n///\n/// That is, `random_ratio(2, 3)` has chance of 2 in 3, or about 67%, of\n/// returning true. If `numerator == denominator`, then the returned value\n/// is guaranteed to be `true`. If `numerator == 0`, then the returned\n/// value is guaranteed to be `false`.\n///\n/// See also the [`Bernoulli`] distribution, which may be faster if\n/// sampling from the same `numerator` and `denominator` repeatedly.\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_ratio](Rng::random_ratio)(<var>numerator</var>, <var>denominator</var>)</code>.\n///\n/// # Panics\n///\n/// If `denominator == 0` or `numerator > denominator`.\n///\n/// # Example\n///\n/// ```\n/// println!(\"{}\", rand::random_ratio(2, 3));\n/// ```\n///\n/// [`Bernoulli`]: distr::Bernoulli\n",
  "code": [
    "pub fn random_ratio(numerator: u32, denominator: u32) -> bool {",
    "    rng().random_ratio(numerator, denominator)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}