{
  "name": "rand::distr::distribution::Distribution::map",
  "mod_info": {
    "name": "distr::distribution",
    "loc": "src/distr/mod.rs:90:1:90:18"
  },
  "visible": true,
  "loc": "src/distr/distribution.rs:97:5:107:6",
  "doc": "/// Map sampled values to type `S`\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::{Distribution, Uniform};\n///\n/// let die = Uniform::new_inclusive(1, 6).unwrap();\n/// let even_number = die.map(|num| num % 2 == 0);\n/// while !even_number.sample(&mut rand::rng()) {\n///     println!(\"Still odd; rolling again!\");\n/// }\n/// ```\n",
  "code": [
    "fn map<F, S>(self, func: F) -> Map<Self, F, T, S>",
    "where",
    "    F: Fn(T) -> S,",
    "    Self: Sized,",
    "{",
    "    Map {",
    "        distr: self,",
    "        func,",
    "        phantom: core::marker::PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Map {\n            distr: self,\n            func,\n            phantom: core::marker::PhantomData,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}