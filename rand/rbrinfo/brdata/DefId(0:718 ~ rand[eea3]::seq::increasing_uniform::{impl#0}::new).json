{
  "name": "rand::seq::increasing_uniform::{impl#0}::new",
  "mod_info": {
    "name": "seq::increasing_uniform",
    "loc": "src/seq/mod.rs:30:1:30:24"
  },
  "visible": true,
  "loc": "src/seq/increasing_uniform.rs:24:5:34:6",
  "doc": "/// Create a dice roller.\n/// The next item returned will be a random number in the range [0,n]\n",
  "code": [
    "pub fn new(rng: R, n: u32) -> Self {",
    "    // If n = 0, the first number returned will always be 0",
    "    // so we don't need to generate a random number",
    "    let chunk_remaining = if n == 0 { 1 } else { 0 };",
    "    Self {",
    "        rng,",
    "        n,",
    "        chunk: 0,",
    "        chunk_remaining,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 27,
          "bound": null
        }
      ],
      "ret": "Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }",
      "path": [
        0,
        1,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 27,
          "bound": null
        }
      ],
      "ret": "Self {\n            rng,\n            n,\n            chunk: 0,\n            chunk_remaining,\n        }",
      "path": [
        0,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}