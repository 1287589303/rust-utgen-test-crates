{
  "name": "rand::seq::index_::sample_weighted",
  "mod_info": {
    "name": "seq::index_",
    "loc": "src/seq/mod.rs:36:1:36:12"
  },
  "visible": true,
  "loc": "src/seq/index.rs:302:1:329:2",
  "doc": "/// Randomly sample exactly `amount` distinct indices from `0..length`\n///\n/// Results are in arbitrary order (there is no guarantee of shuffling or\n/// ordering).\n///\n/// Function `weight` is called once for each index to provide weights.\n///\n/// This method is used internally by the slice sampling methods, but it can\n/// sometimes be useful to have the indices themselves so this is provided as\n/// an alternative.\n///\n/// Error cases:\n/// -   [`WeightError::InvalidWeight`] when a weight is not-a-number or negative.\n/// -   [`WeightError::InsufficientNonZero`] when fewer than `amount` weights are positive.\n///\n/// This implementation uses `O(length + amount)` space and `O(length)` time.\n",
  "code": [
    "pub fn sample_weighted<R, F, X>(",
    "    rng: &mut R,",
    "    length: usize,",
    "    weight: F,",
    "    amount: usize,",
    ") -> Result<IndexVec, WeightError>",
    "where",
    "    R: Rng + ?Sized,",
    "    F: Fn(usize) -> X,",
    "    X: Into<f64>,",
    "{",
    "    if length > (u32::MAX as usize) {",
    "        #[cfg(target_pointer_width = \"32\")]",
    "        unreachable!();",
    "",
    "        #[cfg(target_pointer_width = \"64\")]",
    "        {",
    "            let amount = amount as u64;",
    "            let length = length as u64;",
    "            sample_efraimidis_spirakis(rng, length, weight, amount)",
    "        }",
    "    } else {",
    "        assert!(amount <= u32::MAX as usize);",
    "        let amount = amount as u32;",
    "        let length = length as u32;",
    "        sample_efraimidis_spirakis(rng, length, weight, amount)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "length > (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) < length",
          "value": "true",
          "line": 313,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "length > (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) < length",
          "value": "false",
          "line": 313,
          "bound": "length == (u32::MAX as usize)"
        },
        {
          "cond": "amount <= u32::MAX as usize",
          "norm": null,
          "value": "true",
          "line": 324,
          "bound": "amount == u32::MAX as usize"
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "length > (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) < length",
          "value": "false",
          "line": 313,
          "bound": "length == (u32::MAX as usize)"
        },
        {
          "cond": "amount <= u32::MAX as usize",
          "norm": null,
          "value": "false",
          "line": 324,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        5,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}