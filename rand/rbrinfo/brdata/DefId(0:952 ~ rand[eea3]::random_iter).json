{
  "name": "rand::random_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:10:1:331:2"
  },
  "visible": true,
  "loc": "src/lib.rs:191:1:196:2",
  "doc": "/// Return an iterator over [`random()`] variates\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_iter](Rng::random_iter)()</code>.\n///\n/// # Example\n///\n/// ```\n/// let v: Vec<i32> = rand::random_iter().take(5).collect();\n/// println!(\"{v:?}\");\n/// ```\n",
  "code": [
    "pub fn random_iter<T>() -> distr::Iter<StandardUniform, rngs::ThreadRng, T>",
    "where",
    "    StandardUniform: Distribution<T>,",
    "{",
    "    rng().random_iter()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}