{
  "name": "rand::distr::uniform::other::{impl#1}::sample",
  "mod_info": {
    "name": "distr::uniform::other",
    "loc": "src/distr/uniform.rs:108:1:108:11"
  },
  "visible": true,
  "loc": "src/distr/uniform_other.rs:81:5:90:6",
  "doc": "",
  "code": [
    "fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Self::X {",
    "    let mut x = self.sampler.sample(rng);",
    "    if x >= CHAR_SURROGATE_START {",
    "        x += CHAR_SURROGATE_LEN;",
    "    }",
    "    // SAFETY: x must not be in surrogate range or greater than char::MAX.",
    "    // This relies on range constructors which accept char arguments.",
    "    // Validity of input char values is assumed.",
    "    unsafe { core::char::from_u32_unchecked(x) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "x >= CHAR_SURROGATE_START",
          "norm": "CHAR_SURROGATE_START <= x",
          "value": "true",
          "line": 83,
          "bound": "x == CHAR_SURROGATE_START"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "x >= CHAR_SURROGATE_START",
          "norm": "CHAR_SURROGATE_START <= x",
          "value": "false",
          "line": 83,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}