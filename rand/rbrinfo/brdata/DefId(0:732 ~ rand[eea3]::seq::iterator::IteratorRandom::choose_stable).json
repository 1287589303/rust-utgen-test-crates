{
  "name": "rand::seq::iterator::IteratorRandom::choose_stable",
  "mod_info": {
    "name": "seq::iterator",
    "loc": "src/seq/mod.rs:31:1:31:14"
  },
  "visible": true,
  "loc": "src/seq/iterator.rs:137:5:178:6",
  "doc": "/// Uniformly sample one element (stable)\n///\n/// This method is very similar to [`choose`] except that the result\n/// only depends on the length of the iterator and the values produced by\n/// `rng`. Notably for any iterator of a given length this will make the\n/// same requests to `rng` and if the same sequence of values are produced\n/// the same index will be selected from `self`. This may be useful if you\n/// need consistent results no matter what type of iterator you are working\n/// with. If you do not need this stability prefer [`choose`].\n///\n/// Note that this method still uses [`Iterator::size_hint`] to skip\n/// constructing elements where possible, however the selection and `rng`\n/// calls are the same in the face of this optimization. If you want to\n/// force every element to be created regardless call `.inspect(|e| ())`.\n///\n/// [`choose`]: IteratorRandom::choose\n",
  "code": [
    "fn choose_stable<R>(mut self, rng: &mut R) -> Option<Self::Item>",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    let mut consumed = 0;",
    "    let mut result = None;",
    "    let mut coin_flipper = CoinFlipper::new(rng);",
    "",
    "    loop {",
    "        // Currently the only way to skip elements is `nth()`. So we need to",
    "        // store what index to access next here.",
    "        // This should be replaced by `advance_by()` once it is stable:",
    "        // https://github.com/rust-lang/rust/issues/77404",
    "        let mut next = 0;",
    "",
    "        let (lower, _) = self.size_hint();",
    "        if lower >= 2 {",
    "            let highest_selected = (0..lower)",
    "                .filter(|ix| coin_flipper.random_ratio_one_over(consumed + ix + 1))",
    "                .last();",
    "",
    "            consumed += lower;",
    "            next = lower;",
    "",
    "            if let Some(ix) = highest_selected {",
    "                result = self.nth(ix);",
    "                next -= ix + 1;",
    "                debug_assert!(result.is_some(), \"iterator shorter than size_hint().0\");",
    "            }",
    "        }",
    "",
    "        let elem = self.nth(next);",
    "        if elem.is_none() {",
    "            return result;",
    "        }",
    "",
    "        if coin_flipper.random_ratio_one_over(consumed + 1) {",
    "            result = elem;",
    "        }",
    "        consumed += 1;",
    "    }",
    "}"
  ],
  "size": {
    "chain": 14,
    "contra": 10,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        24,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        24,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        41,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        24,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        38,
        39,
        40,
        41,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        23,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        41,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        23,
        25,
        27,
        28,
        29,
        31,
        32,
        33,
        38,
        39,
        40,
        41,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        46,
        47,
        48
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        24,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        23,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "true",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        34,
        35,
        37,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        46,
        47,
        48
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        38,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        24,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "true",
          "line": 164,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "true",
          "line": 169,
          "bound": null
        }
      ],
      "ret": "result",
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        38,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        19,
        23,
        25,
        27,
        28,
        29,
        30,
        42,
        43,
        44
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 14,
      "conds": [
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "false",
          "line": 153,
          "bound": null
        },
        {
          "cond": "elem.is_none()",
          "norm": null,
          "value": "false",
          "line": 169,
          "bound": null
        },
        {
          "cond": "coin_flipper.random_ratio_one_over(consumed + 1)",
          "norm": null,
          "value": "false",
          "line": 173,
          "bound": null
        },
        {
          "cond": "lower >= 2",
          "norm": "2 <= lower",
          "value": "true",
          "line": 153,
          "bound": "lower == 2"
        },
        {
          "cond": "let Some(ix) = highest_selected",
          "norm": null,
          "value": "true",
          "line": 161,
          "bound": null
        },
        {
          "cond": "result.is_some()",
          "norm": null,
          "value": "false",
          "line": 164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        26,
        27,
        28,
        29,
        31,
        32,
        33,
        38,
        39,
        40,
        41,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        18,
        20,
        21,
        46,
        47,
        48
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}