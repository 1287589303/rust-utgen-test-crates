{
  "name": "rand::distr::uniform::other::{impl#2}::append_string",
  "mod_info": {
    "name": "distr::uniform::other",
    "loc": "src/distr/uniform.rs:108:1:108:11"
  },
  "visible": true,
  "loc": "src/distr/uniform_other.rs:95:5:110:6",
  "doc": "",
  "code": [
    "fn append_string<R: Rng + ?Sized>(",
    "    &self,",
    "    rng: &mut R,",
    "    string: &mut alloc::string::String,",
    "    len: usize,",
    ") {",
    "    // Getting the hi value to assume the required length to reserve in string.",
    "    let mut hi = self.0.sampler.low + self.0.sampler.range - 1;",
    "    if hi >= CHAR_SURROGATE_START {",
    "        hi += CHAR_SURROGATE_LEN;",
    "    }",
    "    // Get the utf8 length of hi to minimize extra space.",
    "    let max_char_len = char::from_u32(hi).map(char::len_utf8).unwrap_or(4);",
    "    string.reserve(max_char_len * len);",
    "    string.extend(self.sample_iter(rng).take(len))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "hi >= CHAR_SURROGATE_START",
          "norm": "CHAR_SURROGATE_START <= hi",
          "value": "true",
          "line": 103,
          "bound": "hi == CHAR_SURROGATE_START"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "hi >= CHAR_SURROGATE_START",
          "norm": "CHAR_SURROGATE_START <= hi",
          "value": "false",
          "line": 103,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}