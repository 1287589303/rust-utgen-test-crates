{
  "name": "rand::distr::slice::{impl#1}::sample",
  "mod_info": {
    "name": "distr::slice",
    "loc": "src/distr/mod.rs:100:1:100:15"
  },
  "visible": true,
  "loc": "src/distr/slice.rs:86:5:100:6",
  "doc": "",
  "code": [
    "fn sample<R: crate::Rng + ?Sized>(&self, rng: &mut R) -> &'a T {",
    "    let idx = self.range.sample(rng);",
    "",
    "    debug_assert!(",
    "        idx < self.slice.len(),",
    "        \"Uniform::new(0, {}) somehow returned {}\",",
    "        self.slice.len(),",
    "        idx",
    "    );",
    "",
    "    // Safety: at construction time, it was ensured that the slice was",
    "    // non-empty, and that the `Uniform` range produces values in range",
    "    // for the slice",
    "    unsafe { self.slice.get_unchecked(idx) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "idx < self.slice.len()",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": "self.slice.get_unchecked(idx)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "idx < self.slice.len()",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": "idx == self.slice.len()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}