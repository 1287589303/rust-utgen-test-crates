{
  "name": "rand::distr::weighted::weighted_index::{impl#4}::weights",
  "mod_info": {
    "name": "distr::weighted::weighted_index",
    "loc": "src/distr/weighted/mod.rs:18:1:18:20"
  },
  "visible": true,
  "loc": "src/distr/weighted/weighted_index.rs:342:5:350:6",
  "doc": "/// Returns a lazy-loading iterator containing the current weights of this distribution.\n///\n/// If this distribution has not been updated since its creation, this will return the\n/// same weights as were passed to `new`.\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::weighted::WeightedIndex;\n///\n/// let weights = [1, 2, 3];\n/// let mut dist = WeightedIndex::new(&weights).unwrap();\n/// assert_eq!(dist.weights().collect::<Vec<_>>(), vec![1, 2, 3]);\n/// dist.update_weights(&[(0, &2)]).unwrap();\n/// assert_eq!(dist.weights().collect::<Vec<_>>(), vec![2, 2, 3]);\n/// ```\n",
  "code": [
    "pub fn weights(&self) -> WeightedIndexIter<'_, X>",
    "where",
    "    X: for<'a> core::ops::SubAssign<&'a X>,",
    "{",
    "    WeightedIndexIter {",
    "        weighted_index: self,",
    "        index: 0,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "WeightedIndexIter {\n            weighted_index: self,\n            index: 0,\n        }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}