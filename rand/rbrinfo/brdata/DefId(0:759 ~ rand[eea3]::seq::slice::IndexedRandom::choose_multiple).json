{
  "name": "rand::seq::slice::IndexedRandom::choose_multiple",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:90:5:101:6",
  "doc": "/// Uniformly sample `amount` distinct elements from self\n///\n/// Chooses `amount` elements from the slice at random, without repetition,\n/// and in random order. The returned iterator is appropriate both for\n/// collection into a `Vec` and filling an existing buffer (see example).\n///\n/// In case this API is not sufficiently flexible, use [`index::sample`].\n///\n/// For slices, complexity is the same as [`index::sample`].\n///\n/// # Example\n/// ```\n/// use rand::seq::IndexedRandom;\n///\n/// let mut rng = &mut rand::rng();\n/// let sample = \"Hello, audience!\".as_bytes();\n///\n/// // collect the results into a vector:\n/// let v: Vec<u8> = sample.choose_multiple(&mut rng, 3).cloned().collect();\n///\n/// // store in a buffer:\n/// let mut buf = [0u8; 5];\n/// for (b, slot) in sample.choose_multiple(&mut rng, buf.len()).zip(buf.iter_mut()) {\n///     *slot = *b;\n/// }\n/// ```\n",
  "code": [
    "fn choose_multiple<R>(&self, rng: &mut R, amount: usize) -> SliceChooseIter<Self, Self::Output>",
    "where",
    "    Self::Output: Sized,",
    "    R: Rng + ?Sized,",
    "{",
    "    let amount = core::cmp::min(amount, self.len());",
    "    SliceChooseIter {",
    "        slice: self,",
    "        _phantom: Default::default(),",
    "        indices: index::sample(rng, self.len(), amount).into_iter(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SliceChooseIter {\n            slice: self,\n            _phantom: Default::default(),\n            indices: index::sample(rng, self.len(), amount).into_iter(),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}