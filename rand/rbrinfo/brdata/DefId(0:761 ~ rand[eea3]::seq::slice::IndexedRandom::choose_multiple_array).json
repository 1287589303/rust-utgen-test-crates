{
  "name": "rand::seq::slice::IndexedRandom::choose_multiple_array",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:119:5:126:6",
  "doc": "/// Uniformly sample a fixed-size array of distinct elements from self\n///\n/// Chooses `N` elements from the slice at random, without repetition,\n/// and in random order.\n///\n/// For slices, complexity is the same as [`index::sample_array`].\n///\n/// # Example\n/// ```\n/// use rand::seq::IndexedRandom;\n///\n/// let mut rng = &mut rand::rng();\n/// let sample = \"Hello, audience!\".as_bytes();\n///\n/// let a: [u8; 3] = sample.choose_multiple_array(&mut rng).unwrap();\n/// ```\n",
  "code": [
    "fn choose_multiple_array<R, const N: usize>(&self, rng: &mut R) -> Option<[Self::Output; N]>",
    "where",
    "    Self::Output: Clone + Sized,",
    "    R: Rng + ?Sized,",
    "{",
    "    let indices = index::sample_array(rng, self.len())?;",
    "    Some(indices.map(|index| self[index].clone()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index::sample_array(rng, self.len())?",
          "norm": null,
          "value": "Err/None",
          "line": 124,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        7,
        8,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index::sample_array(rng, self.len())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 124,
          "bound": null
        }
      ],
      "ret": "Some(indices.map(|index| self[index].clone()))",
      "path": [
        0,
        1,
        2,
        3,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}