{
  "name": "rand::random_range",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:10:1:331:2"
  },
  "visible": true,
  "loc": "src/lib.rs:216:1:222:2",
  "doc": "/// Generate a random value in the given range using the thread-local random number generator.\n///\n/// This function is shorthand for\n/// <code>[rng()].[random_range](Rng::random_range)(<var>range</var>)</code>.\n///\n/// # Example\n///\n/// ```\n/// let y: f32 = rand::random_range(0.0..=1e9);\n/// println!(\"{}\", y);\n///\n/// let words: Vec<&str> = \"Mary had a little lamb\".split(' ').collect();\n/// println!(\"{}\", words[rand::random_range(..words.len())]);\n/// ```\n/// Note that the first example can also be achieved (without `collect`'ing\n/// to a `Vec`) using [`seq::IteratorRandom::choose`].\n",
  "code": [
    "pub fn random_range<T, R>(range: R) -> T",
    "where",
    "    T: distr::uniform::SampleUniform,",
    "    R: distr::uniform::SampleRange<T>,",
    "{",
    "    rng().random_range(range)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}