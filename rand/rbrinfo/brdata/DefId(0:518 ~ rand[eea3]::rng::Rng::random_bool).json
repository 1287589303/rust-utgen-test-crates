{
  "name": "rand::rng::Rng::random_bool",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:191:5:196:6",
  "doc": "/// Return a bool with a probability `p` of being true.\n///\n/// See also the [`Bernoulli`] distribution, which may be faster if\n/// sampling from the same probability repeatedly.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// println!(\"{}\", rng.random_bool(1.0 / 3.0));\n/// ```\n///\n/// # Panics\n///\n/// If `p < 0` or `p > 1`.\n///\n/// [`Bernoulli`]: distr::Bernoulli\n",
  "code": [
    "fn random_bool(&mut self, p: f64) -> bool {",
    "    match distr::Bernoulli::new(p) {",
    "        Ok(d) => self.sample(d),",
    "        Err(_) => panic!(\"p={:?} is outside range [0.0, 1.0]\", p),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "distr::Bernoulli::new(p) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 192,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "distr::Bernoulli::new(p) matches Ok(d)",
          "norm": null,
          "value": "true",
          "line": 192,
          "bound": null
        },
        {
          "cond": "distr::Bernoulli::new(p) matches Ok(d)",
          "norm": null,
          "value": "true",
          "line": 192,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}