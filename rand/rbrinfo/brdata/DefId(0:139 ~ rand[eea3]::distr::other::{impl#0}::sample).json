{
  "name": "rand::distr::other::{impl#0}::sample",
  "mod_info": {
    "name": "distr::other",
    "loc": "src/distr/mod.rs:93:1:93:11"
  },
  "visible": true,
  "loc": "src/distr/other.rs:106:5:122:6",
  "doc": "",
  "code": [
    "fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> char {",
    "    // A valid `char` is either in the interval `[0, 0xD800)` or",
    "    // `(0xDFFF, 0x11_0000)`. All `char`s must therefore be in",
    "    // `[0, 0x11_0000)` but not in the \"gap\" `[0xD800, 0xDFFF]` which is",
    "    // reserved for surrogates. This is the size of that gap.",
    "    const GAP_SIZE: u32 = 0xDFFF - 0xD800 + 1;",
    "",
    "    // Uniform::new(0, 0x11_0000 - GAP_SIZE) can also be used, but it",
    "    // seemed slower.",
    "    let range = Uniform::new(GAP_SIZE, 0x11_0000).unwrap();",
    "",
    "    let mut n = range.sample(rng);",
    "    if n <= 0xDFFF {",
    "        n -= GAP_SIZE;",
    "    }",
    "    unsafe { char::from_u32_unchecked(n) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "n <= 0xDFFF",
          "norm": "0xDFFF >= n",
          "value": "true",
          "line": 118,
          "bound": "n == 0xDFFF"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "n <= 0xDFFF",
          "norm": "0xDFFF >= n",
          "value": "false",
          "line": 118,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}