{
  "name": "rand::rngs::xoshiro256plusplus::{impl#0}::from_seed",
  "mod_info": {
    "name": "rngs::xoshiro256plusplus",
    "loc": "src/rngs/mod.rs:94:1:94:24"
  },
  "visible": true,
  "loc": "src/rngs/xoshiro256plusplus.rs:35:5:44:6",
  "doc": "/// Create a new `Xoshiro256PlusPlus`.  If `seed` is entirely 0, it will be\n/// mapped to a different seed.\n",
  "code": [
    "fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {",
    "    let mut state = [0; 4];",
    "    read_u64_into(&seed, &mut state);",
    "    // Check for zero on aligned integers for better code generation.",
    "    // Furtermore, seed_from_u64(0) will expand to a constant when optimized.",
    "    if state.iter().all(|&x| x == 0) {",
    "        return Self::seed_from_u64(0);",
    "    }",
    "    Xoshiro256PlusPlus { s: state }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "state.iter().all(|&x| x == 0)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "state.iter().all(|&x| x == 0)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Xoshiro256PlusPlus { s: state }",
      "path": [
        0,
        1,
        2,
        3,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}