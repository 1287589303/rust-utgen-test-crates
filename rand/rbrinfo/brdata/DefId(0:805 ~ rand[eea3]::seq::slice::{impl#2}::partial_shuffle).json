{
  "name": "rand::seq::slice::{impl#2}::partial_shuffle",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:388:5:417:6",
  "doc": "",
  "code": [
    "fn partial_shuffle<R>(&mut self, rng: &mut R, amount: usize) -> (&mut [T], &mut [T])",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    let m = self.len().saturating_sub(amount);",
    "",
    "    // The algorithm below is based on Durstenfeld's algorithm for the",
    "    // [Fisherâ€“Yates shuffle](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm)",
    "    // for an unbiased permutation.",
    "    // It ensures that the last `amount` elements of the slice",
    "    // are randomly selected from the whole slice.",
    "",
    "    // `IncreasingUniform::next_index()` is faster than `Rng::random_range`",
    "    // but only works for 32 bit integers",
    "    // So we must use the slow method if the slice is longer than that.",
    "    if self.len() < (u32::MAX as usize) {",
    "        let mut chooser = IncreasingUniform::new(rng, m as u32);",
    "        for i in m..self.len() {",
    "            let index = chooser.next_index();",
    "            self.swap(i, index);",
    "        }",
    "    } else {",
    "        for i in m..self.len() {",
    "            let index = rng.random_range(..i + 1);",
    "            self.swap(i, index);",
    "        }",
    "    }",
    "    let r = self.split_at_mut(m);",
    "    (r.1, r.0)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.len() < (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) > self.len()",
          "value": "true",
          "line": 403,
          "bound": null
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "true",
          "line": 405,
          "bound": null
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "false",
          "line": 405,
          "bound": null
        }
      ],
      "ret": "(r.1, r.0)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        13,
        15,
        16,
        8,
        9,
        10,
        12,
        14,
        30,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.len() < (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) > self.len()",
          "value": "true",
          "line": 403,
          "bound": null
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "false",
          "line": 405,
          "bound": null
        }
      ],
      "ret": "(r.1, r.0)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        14,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.len() < (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) > self.len()",
          "value": "false",
          "line": 403,
          "bound": "self.len() == (u32::MAX as usize)"
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "true",
          "line": 410,
          "bound": null
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        }
      ],
      "ret": "(r.1, r.0)",
      "path": [
        0,
        1,
        2,
        3,
        17,
        18,
        19,
        20,
        21,
        22,
        25,
        27,
        28,
        29,
        20,
        21,
        22,
        24,
        26,
        30,
        31
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.len() < (u32::MAX as usize)",
          "norm": "(u32::MAX as usize) > self.len()",
          "value": "false",
          "line": 403,
          "bound": "self.len() == (u32::MAX as usize)"
        },
        {
          "cond": "i in m..self.len()",
          "norm": null,
          "value": "false",
          "line": 410,
          "bound": null
        }
      ],
      "ret": "(r.1, r.0)",
      "path": [
        0,
        1,
        2,
        3,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        26,
        30,
        31
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}