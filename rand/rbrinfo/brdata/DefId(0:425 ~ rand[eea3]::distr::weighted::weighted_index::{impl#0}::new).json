{
  "name": "rand::distr::weighted::weighted_index::{impl#0}::new",
  "mod_info": {
    "name": "distr::weighted::weighted_index",
    "loc": "src/distr/weighted/mod.rs:18:1:18:20"
  },
  "visible": true,
  "loc": "src/distr/weighted/weighted_index.rs:99:5:137:6",
  "doc": "/// Creates a new a `WeightedIndex` [`Distribution`] using the values\n/// in `weights`. The weights can use any type `X` for which an\n/// implementation of [`Uniform<X>`] exists.\n///\n/// Error cases:\n/// -   [`Error::InvalidInput`] when the iterator `weights` is empty.\n/// -   [`Error::InvalidWeight`] when a weight is not-a-number or negative.\n/// -   [`Error::InsufficientNonZero`] when the sum of all weights is zero.\n/// -   [`Error::Overflow`] when the sum of all weights overflows.\n///\n/// [`Uniform<X>`]: crate::distr::uniform::Uniform\n",
  "code": [
    "pub fn new<I>(weights: I) -> Result<WeightedIndex<X>, Error>",
    "where",
    "    I: IntoIterator,",
    "    I::Item: SampleBorrow<X>,",
    "    X: Weight,",
    "{",
    "    let mut iter = weights.into_iter();",
    "    let mut total_weight: X = iter.next().ok_or(Error::InvalidInput)?.borrow().clone();",
    "",
    "    let zero = X::ZERO;",
    "    if !(total_weight >= zero) {",
    "        return Err(Error::InvalidWeight);",
    "    }",
    "",
    "    let mut weights = Vec::<X>::with_capacity(iter.size_hint().0);",
    "    for w in iter {",
    "        // Note that `!(w >= x)` is not equivalent to `w < x` for partially",
    "        // ordered types due to NaNs which are equal to nothing.",
    "        if !(w.borrow() >= &zero) {",
    "            return Err(Error::InvalidWeight);",
    "        }",
    "        weights.push(total_weight.clone());",
    "",
    "        if let Err(()) = total_weight.checked_add_assign(w.borrow()) {",
    "            return Err(Error::Overflow);",
    "        }",
    "    }",
    "",
    "    if total_weight == zero {",
    "        return Err(Error::InsufficientNonZero);",
    "    }",
    "    let distr = X::Sampler::new(zero, total_weight.clone()).unwrap();",
    "",
    "    Ok(WeightedIndex {",
    "        cumulative_weights: weights,",
    "        total_weight,",
    "        weight_distribution: distr,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 8,
    "contra": 2,
    "min_set": 6
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Err/None",
          "line": 106,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        68,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "true",
          "line": 114,
          "bound": null
        },
        {
          "cond": "(w.borrow() >= &zero)",
          "norm": "&zero <= w.borrow()",
          "value": "true",
          "line": 117,
          "bound": "w.borrow() == &zero"
        },
        {
          "cond": "let Err(()) = total_weight.checked_add_assign(w.borrow())",
          "norm": null,
          "value": "true",
          "line": 122,
          "bound": null
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "false",
          "line": 114,
          "bound": null
        },
        {
          "cond": "total_weight == zero",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "Err(Error::InsufficientNonZero)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        38,
        39,
        40,
        21,
        22,
        23,
        25,
        27,
        41,
        42,
        43,
        44,
        45,
        64,
        65,
        66,
        67,
        69,
        70,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "true",
          "line": 114,
          "bound": null
        },
        {
          "cond": "(w.borrow() >= &zero)",
          "norm": "&zero <= w.borrow()",
          "value": "true",
          "line": 117,
          "bound": "w.borrow() == &zero"
        },
        {
          "cond": "let Err(()) = total_weight.checked_add_assign(w.borrow())",
          "norm": null,
          "value": "true",
          "line": 122,
          "bound": null
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "false",
          "line": 114,
          "bound": null
        },
        {
          "cond": "total_weight == zero",
          "norm": null,
          "value": "false",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "Ok(WeightedIndex {\n            cumulative_weights: weights,\n            total_weight,\n            weight_distribution: distr,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        38,
        39,
        40,
        21,
        22,
        23,
        25,
        27,
        41,
        42,
        43,
        44,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        71
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "true",
          "line": 114,
          "bound": null
        },
        {
          "cond": "(w.borrow() >= &zero)",
          "norm": "&zero <= w.borrow()",
          "value": "true",
          "line": 117,
          "bound": "w.borrow() == &zero"
        },
        {
          "cond": "let Err(()) = total_weight.checked_add_assign(w.borrow())",
          "norm": null,
          "value": "true",
          "line": 122,
          "bound": null
        }
      ],
      "ret": "Err(Error::Overflow)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        30,
        32,
        33,
        34,
        35,
        36,
        37,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "true",
          "line": 114,
          "bound": null
        },
        {
          "cond": "(w.borrow() >= &zero)",
          "norm": "&zero <= w.borrow()",
          "value": "false",
          "line": 117,
          "bound": null
        }
      ],
      "ret": "Err(Error::InvalidWeight)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        26,
        28,
        29,
        31,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "false",
          "line": 114,
          "bound": null
        },
        {
          "cond": "total_weight == zero",
          "norm": null,
          "value": "true",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "Err(Error::InsufficientNonZero)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        41,
        42,
        43,
        44,
        45,
        64,
        65,
        66,
        67,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": "total_weight == zero"
        },
        {
          "cond": "w in iter",
          "norm": null,
          "value": "false",
          "line": 114,
          "bound": null
        },
        {
          "cond": "total_weight == zero",
          "norm": null,
          "value": "false",
          "line": 127,
          "bound": null
        }
      ],
      "ret": "Ok(WeightedIndex {\n            cumulative_weights: weights,\n            total_weight,\n            weight_distribution: distr,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        41,
        42,
        43,
        44,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        71
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "iter.next().ok_or(Error::InvalidInput)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 106,
          "bound": null
        },
        {
          "cond": "(total_weight >= zero)",
          "norm": null,
          "value": "false",
          "line": 109,
          "bound": null
        }
      ],
      "ret": "Err(Error::InvalidWeight)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        14,
        15,
        17,
        66,
        67,
        69,
        70,
        71
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}