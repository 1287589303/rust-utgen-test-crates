{
  "name": "rand::distr::bernoulli::{impl#3}::sample",
  "mod_info": {
    "name": "distr::bernoulli",
    "loc": "src/distr/mod.rs:89:1:89:15"
  },
  "visible": true,
  "loc": "src/distr/bernoulli.rs:155:5:162:6",
  "doc": "",
  "code": [
    "fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> bool {",
    "    // Make sure to always return true for p = 1.0.",
    "    if self.p_int == ALWAYS_TRUE {",
    "        return true;",
    "    }",
    "    let v: u64 = rng.random();",
    "    v < self.p_int",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.p_int == ALWAYS_TRUE",
          "norm": "ALWAYS_TRUE == self.p_int",
          "value": "true",
          "line": 157,
          "bound": null
        }
      ],
      "ret": "true",
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.p_int == ALWAYS_TRUE",
          "norm": "ALWAYS_TRUE == self.p_int",
          "value": "false",
          "line": 157,
          "bound": null
        }
      ],
      "ret": "v < self.p_int",
      "path": [
        0,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}