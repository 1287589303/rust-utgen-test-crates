{
  "name": "rand::rngs::small::{impl#0}::from_seed",
  "mod_info": {
    "name": "rngs::small",
    "loc": "src/rngs/mod.rs:87:1:87:11"
  },
  "visible": true,
  "loc": "src/rngs/small.rs:91:5:97:6",
  "doc": "",
  "code": [
    "fn from_seed(seed: Self::Seed) -> Self {",
    "    // This is for compatibility with 32-bit platforms where Rng::Seed has a different seed size",
    "    // With MSRV >= 1.77: let seed = *seed.first_chunk().unwrap()",
    "    const LEN: usize = core::mem::size_of::<<Rng as SeedableRng>::Seed>();",
    "    let seed = (&seed[..LEN]).try_into().unwrap();",
    "    SmallRng(Rng::from_seed(seed))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SmallRng(Rng::from_seed(seed))",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}