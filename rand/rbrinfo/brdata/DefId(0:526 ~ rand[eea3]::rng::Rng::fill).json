{
  "name": "rand::rng::Rng::fill",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:314:5:316:6",
  "doc": "/// Fill any type implementing [`Fill`] with random data\n///\n/// This method is implemented for types which may be safely reinterpreted\n/// as an (aligned) `[u8]` slice then filled with random data. It is often\n/// faster than using [`Rng::random`] but not value-equivalent.\n///\n/// The distribution is expected to be uniform with portable results, but\n/// this cannot be guaranteed for third-party implementations.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut arr = [0i8; 20];\n/// rand::rng().fill(&mut arr[..]);\n/// ```\n///\n/// [`fill_bytes`]: RngCore::fill_bytes\n",
  "code": [
    "fn fill<T: Fill + ?Sized>(&mut self, dest: &mut T) {",
    "    dest.fill(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}