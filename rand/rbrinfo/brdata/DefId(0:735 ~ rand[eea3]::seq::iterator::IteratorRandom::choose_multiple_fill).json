{
  "name": "rand::seq::iterator::IteratorRandom::choose_multiple_fill",
  "mod_info": {
    "name": "seq::iterator",
    "loc": "src/seq/mod.rs:31:1:31:14"
  },
  "visible": true,
  "loc": "src/seq/iterator.rs:195:5:219:6",
  "doc": "/// Uniformly sample `amount` distinct elements into a buffer\n///\n/// Collects values at random from the iterator into a supplied buffer\n/// until that buffer is filled.\n///\n/// Although the elements are selected randomly, the order of elements in\n/// the buffer is neither stable nor fully random. If random ordering is\n/// desired, shuffle the result.\n///\n/// Returns the number of elements added to the buffer. This equals the length\n/// of the buffer unless the iterator contains insufficient elements, in which\n/// case this equals the number of elements available.\n///\n/// Complexity is `O(n)` where `n` is the length of the iterator.\n/// For slices, prefer [`IndexedRandom::choose_multiple`].\n",
  "code": [
    "fn choose_multiple_fill<R>(mut self, rng: &mut R, buf: &mut [Self::Item]) -> usize",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    let amount = buf.len();",
    "    let mut len = 0;",
    "    while len < amount {",
    "        if let Some(elem) = self.next() {",
    "            buf[len] = elem;",
    "            len += 1;",
    "        } else {",
    "            // Iterator exhausted; stop early",
    "            return len;",
    "        }",
    "    }",
    "",
    "    // Continue, since the iterator was not exhausted",
    "    for (i, elem) in self.enumerate() {",
    "        let k = rng.random_range(..i + 1 + amount);",
    "        if let Some(slot) = buf.get_mut(k) {",
    "            *slot = elem;",
    "        }",
    "    }",
    "    len",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 5,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "true",
          "line": 201,
          "bound": null
        },
        {
          "cond": "let Some(elem) = self.next()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        13,
        42,
        43
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "true",
          "line": 201,
          "bound": null
        },
        {
          "cond": "let Some(elem) = self.next()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "let Some(slot) = buf.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        28,
        29,
        35,
        36,
        37,
        38,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "true",
          "line": 201,
          "bound": null
        },
        {
          "cond": "let Some(elem) = self.next()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "let Some(slot) = buf.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "true",
          "line": 201,
          "bound": null
        },
        {
          "cond": "let Some(elem) = self.next()",
          "norm": null,
          "value": "true",
          "line": 202,
          "bound": null
        },
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        11,
        12,
        14,
        15,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "let Some(slot) = buf.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        28,
        29,
        35,
        36,
        37,
        38,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 212,
          "bound": null
        },
        {
          "cond": "let Some(slot) = buf.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 214,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        38,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "len < amount",
          "norm": "amount > len",
          "value": "false",
          "line": 201,
          "bound": "len == amount"
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 212,
          "bound": null
        }
      ],
      "ret": "len",
      "path": [
        0,
        1,
        2,
        3,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        25,
        39,
        40,
        41,
        43
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}