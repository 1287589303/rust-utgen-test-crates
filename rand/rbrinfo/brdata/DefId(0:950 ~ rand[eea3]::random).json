{
  "name": "rand::random",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:10:1:331:2"
  },
  "visible": true,
  "loc": "src/lib.rs:171:1:176:2",
  "doc": "/// Generate a random value using the thread-local random number generator.\n///\n/// This function is shorthand for <code>[rng()].[random()](Rng::random)</code>:\n///\n/// -   See [`ThreadRng`] for documentation of the generator and security\n/// -   See [`StandardUniform`] for documentation of supported types and distributions\n///\n/// # Examples\n///\n/// ```\n/// let x = rand::random::<u8>();\n/// println!(\"{}\", x);\n///\n/// let y = rand::random::<f64>();\n/// println!(\"{}\", y);\n///\n/// if rand::random() { // generates a boolean\n///     println!(\"Better lucky than good!\");\n/// }\n/// ```\n///\n/// If you're calling `random()` repeatedly, consider using a local `rng`\n/// handle to save an initialization-check on each usage:\n///\n/// ```\n/// use rand::Rng; // provides the `random` method\n///\n/// let mut rng = rand::rng(); // a local handle to the generator\n///\n/// let mut v = vec![1, 2, 3];\n///\n/// for x in v.iter_mut() {\n///     *x = rng.random();\n/// }\n/// ```\n///\n/// [`StandardUniform`]: distr::StandardUniform\n/// [`ThreadRng`]: rngs::ThreadRng\n",
  "code": [
    "pub fn random<T>() -> T",
    "where",
    "    StandardUniform: Distribution<T>,",
    "{",
    "    rng().random()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}