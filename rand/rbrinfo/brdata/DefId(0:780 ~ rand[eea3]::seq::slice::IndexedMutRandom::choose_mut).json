{
  "name": "rand::seq::slice::IndexedMutRandom::choose_mut",
  "mod_info": {
    "name": "seq::slice",
    "loc": "src/seq/mod.rs:32:1:32:11"
  },
  "visible": true,
  "loc": "src/seq/slice.rs:253:5:263:6",
  "doc": "/// Uniformly sample one element (mut)\n///\n/// Returns a mutable reference to one uniformly-sampled random element of\n/// the slice, or `None` if the slice is empty.\n///\n/// For slices, complexity is `O(1)`.\n",
  "code": [
    "fn choose_mut<R>(&mut self, rng: &mut R) -> Option<&mut Self::Output>",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    if self.is_empty() {",
    "        None",
    "    } else {",
    "        let len = self.len();",
    "        Some(&mut self[rng.random_range(..len)])",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "true",
          "line": 257,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "false",
          "line": 257,
          "bound": null
        }
      ],
      "ret": "Some(&mut self[rng.random_range(..len)])",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}