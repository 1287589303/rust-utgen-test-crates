{
  "name": "rand::distr::uniform::other::{impl#4}::new_inclusive",
  "mod_info": {
    "name": "distr::uniform::other",
    "loc": "src/distr/uniform.rs:108:1:108:11"
  },
  "visible": true,
  "loc": "src/distr/uniform_other.rs:163:5:213:6",
  "doc": "",
  "code": [
    "fn new_inclusive<B1, B2>(low_b: B1, high_b: B2) -> Result<Self, Error>",
    "where",
    "    B1: SampleBorrow<Self::X> + Sized,",
    "    B2: SampleBorrow<Self::X> + Sized,",
    "{",
    "    let low = *low_b.borrow();",
    "    let high = *high_b.borrow();",
    "    if !(low <= high) {",
    "        return Err(Error::EmptyRange);",
    "    }",
    "",
    "    let low_s = low.as_secs();",
    "    let low_n = low.subsec_nanos();",
    "    let mut high_s = high.as_secs();",
    "    let mut high_n = high.subsec_nanos();",
    "",
    "    if high_n < low_n {",
    "        high_s -= 1;",
    "        high_n += 1_000_000_000;",
    "    }",
    "",
    "    let mode = if low_s == high_s {",
    "        UniformDurationMode::Small {",
    "            secs: low_s,",
    "            nanos: Uniform::new_inclusive(low_n, high_n)?,",
    "        }",
    "    } else {",
    "        let max = high_s",
    "            .checked_mul(1_000_000_000)",
    "            .and_then(|n| n.checked_add(u64::from(high_n)));",
    "",
    "        if let Some(higher_bound) = max {",
    "            let lower_bound = low_s * 1_000_000_000 + u64::from(low_n);",
    "            UniformDurationMode::Medium {",
    "                nanos: Uniform::new_inclusive(lower_bound, higher_bound)?,",
    "            }",
    "        } else {",
    "            // An offset is applied to simplify generation of nanoseconds",
    "            let max_nanos = high_n - low_n;",
    "            UniformDurationMode::Large {",
    "                max_secs: high_s,",
    "                max_nanos,",
    "                secs: Uniform::new_inclusive(low_s, high_s)?,",
    "            }",
    "        }",
    "    };",
    "    Ok(UniformDuration {",
    "        mode,",
    "        offset: low_n,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 13,
    "contra": 0,
    "min_set": 7
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_n, high_n)?",
          "norm": null,
          "value": "Err/None",
          "line": 187,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_n, high_n)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        15,
        16,
        17,
        20,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_s, high_s)?",
          "norm": null,
          "value": "Err/None",
          "line": 205,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        23,
        24,
        25,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        50,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_s, high_s)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 205,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        23,
        24,
        25,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(lower_bound, higher_bound)?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        50,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "true",
          "line": 179,
          "bound": null
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(lower_bound, higher_bound)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        47,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_n, high_n)?",
          "norm": null,
          "value": "Err/None",
          "line": 187,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        19,
        21,
        22,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 8,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "true",
          "line": 184,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_n, high_n)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 187,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        15,
        16,
        17,
        20,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 9,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_s, high_s)?",
          "norm": null,
          "value": "Err/None",
          "line": 205,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        23,
        24,
        25,
        38,
        39,
        40,
        41,
        43,
        45,
        46,
        50,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 10,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(low_s, high_s)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 205,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        23,
        24,
        25,
        38,
        39,
        40,
        41,
        44,
        47,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 11,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(lower_bound, higher_bound)?",
          "norm": null,
          "value": "Err/None",
          "line": 197,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        34,
        36,
        37,
        50,
        51,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 12,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 170,
          "bound": "low == high"
        },
        {
          "cond": "high_n < low_n",
          "norm": null,
          "value": "false",
          "line": 179,
          "bound": "high_n == low_n"
        },
        {
          "cond": "low_s == high_s",
          "norm": "high_s == low_s",
          "value": "false",
          "line": 184,
          "bound": null
        },
        {
          "cond": "let Some(higher_bound) = max",
          "norm": null,
          "value": "true",
          "line": 194,
          "bound": null
        },
        {
          "cond": "Uniform::new_inclusive(lower_bound, higher_bound)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 197,
          "bound": null
        }
      ],
      "ret": "Ok(UniformDuration {\n            mode,\n            offset: low_n,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35,
        47,
        48,
        49,
        54
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 13,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "false",
          "line": 170,
          "bound": null
        }
      ],
      "ret": "Err(Error::EmptyRange)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        52,
        53,
        54
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}