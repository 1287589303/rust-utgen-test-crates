{
  "name": "rand::distr::uniform::{impl#2}::new",
  "mod_info": {
    "name": "distr::uniform",
    "loc": "src/distr/mod.rs:101:1:101:17"
  },
  "visible": true,
  "loc": "src/distr/uniform.rs:233:5:239:6",
  "doc": "/// Create a new `Uniform` instance, which samples uniformly from the half\n/// open range `[low, high)` (excluding `high`).\n///\n/// For discrete types (e.g. integers), samples will always be strictly less\n/// than `high`. For (approximations of) continuous types (e.g. `f32`, `f64`),\n/// samples may equal `high` due to loss of precision but may not be\n/// greater than `high`.\n///\n/// Fails if `low >= high`, or if `low`, `high` or the range `high - low` is\n/// non-finite. In release mode, only the range is checked.\n",
  "code": [
    "pub fn new<B1, B2>(low: B1, high: B2) -> Result<Uniform<X>, Error>",
    "where",
    "    B1: SampleBorrow<X> + Sized,",
    "    B2: SampleBorrow<X> + Sized,",
    "{",
    "    X::Sampler::new(low, high).map(Uniform)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}