{
  "name": "rand::rng::Rng::random_iter",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:120:5:126:6",
  "doc": "/// Return an iterator over [`random`](Self::random) variates\n///\n/// This is a just a wrapper over [`Rng::sample_iter`] using\n/// [`distr::StandardUniform`].\n///\n/// Note: this method consumes its argument. Use\n/// `(&mut rng).random_iter()` to avoid consuming the RNG.\n///\n/// # Example\n///\n/// ```\n/// use rand::{rngs::mock::StepRng, Rng};\n///\n/// let rng = StepRng::new(1, 1);\n/// let v: Vec<i32> = rng.random_iter().take(5).collect();\n/// assert_eq!(&v, &[1, 2, 3, 4, 5]);\n/// ```\n",
  "code": [
    "fn random_iter<T>(self) -> distr::Iter<StandardUniform, Self, T>",
    "where",
    "    Self: Sized,",
    "    StandardUniform: Distribution<T>,",
    "{",
    "    StandardUniform.sample_iter(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}