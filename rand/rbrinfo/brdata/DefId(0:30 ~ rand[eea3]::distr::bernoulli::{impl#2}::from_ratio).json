{
  "name": "rand::distr::bernoulli::{impl#2}::from_ratio",
  "mod_info": {
    "name": "distr::bernoulli",
    "loc": "src/distr/mod.rs:89:1:89:15"
  },
  "visible": true,
  "loc": "src/distr/bernoulli.rs:129:5:138:6",
  "doc": "/// Construct a new `Bernoulli` with the probability of success of\n/// `numerator`-in-`denominator`. I.e. `new_ratio(2, 3)` will return\n/// a `Bernoulli` with a 2-in-3 chance, or about 67%, of returning `true`.\n///\n/// return `true`. If `numerator == 0` it will always return `false`.\n/// For `numerator > denominator` and `denominator == 0`, this returns an\n/// error. Otherwise, for `numerator == denominator`, samples are always\n/// true; for `numerator == 0` samples are always false.\n",
  "code": [
    "pub fn from_ratio(numerator: u32, denominator: u32) -> Result<Bernoulli, BernoulliError> {",
    "    if numerator > denominator || denominator == 0 {",
    "        return Err(BernoulliError::InvalidProbability);",
    "    }",
    "    if numerator == denominator {",
    "        return Ok(Bernoulli { p_int: ALWAYS_TRUE });",
    "    }",
    "    let p_int = ((f64::from(numerator) / f64::from(denominator)) * SCALE) as u64;",
    "    Ok(Bernoulli { p_int })",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "numerator > denominator",
          "norm": "denominator < numerator",
          "value": "true",
          "line": 130,
          "bound": null
        }
      ],
      "ret": "Err(BernoulliError::InvalidProbability)",
      "path": [
        0,
        1,
        4,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "numerator > denominator",
          "norm": "denominator < numerator",
          "value": "false",
          "line": 130,
          "bound": "numerator == denominator"
        },
        {
          "cond": "denominator == 0",
          "norm": "0 == denominator",
          "value": "false",
          "line": 130,
          "bound": null
        }
      ],
      "ret": "Err(BernoulliError::InvalidProbability)",
      "path": [
        0,
        2,
        3,
        4,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "numerator > denominator",
          "norm": "denominator < numerator",
          "value": "false",
          "line": 130,
          "bound": "numerator == denominator"
        },
        {
          "cond": "denominator == 0",
          "norm": "0 == denominator",
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "numerator == denominator",
          "norm": "denominator == numerator",
          "value": "true",
          "line": 133,
          "bound": null
        }
      ],
      "ret": "Ok(Bernoulli { p_int: ALWAYS_TRUE })",
      "path": [
        0,
        2,
        5,
        6,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "numerator > denominator",
          "norm": "denominator < numerator",
          "value": "false",
          "line": 130,
          "bound": "numerator == denominator"
        },
        {
          "cond": "denominator == 0",
          "norm": "0 == denominator",
          "value": "true",
          "line": 130,
          "bound": null
        },
        {
          "cond": "numerator == denominator",
          "norm": "denominator == numerator",
          "value": "false",
          "line": 133,
          "bound": null
        }
      ],
      "ret": "Ok(Bernoulli { p_int })",
      "path": [
        0,
        2,
        5,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}