{
  "name": "rand::rng::Rng::random",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:95:5:100:6",
  "doc": "/// Return a random value via the [`StandardUniform`] distribution.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// let x: u32 = rng.random();\n/// println!(\"{}\", x);\n/// println!(\"{:?}\", rng.random::<(f64, bool)>());\n/// ```\n///\n/// # Arrays and tuples\n///\n/// The `rng.random()` method is able to generate arrays\n/// and tuples (up to 12 elements), so long as all element types can be\n/// generated.\n///\n/// For arrays of integers, especially for those with small element types\n/// (< 64 bit), it will likely be faster to instead use [`Rng::fill`],\n/// though note that generated values will differ.\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n/// let tuple: (u8, i32, char) = rng.random(); // arbitrary tuple support\n///\n/// let arr1: [f32; 32] = rng.random();        // array construction\n/// let mut arr2 = [0u8; 128];\n/// rng.fill(&mut arr2);                    // array fill\n/// ```\n///\n/// [`StandardUniform`]: distr::StandardUniform\n",
  "code": [
    "fn random<T>(&mut self) -> T",
    "where",
    "    StandardUniform: Distribution<T>,",
    "{",
    "    StandardUniform.sample(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}