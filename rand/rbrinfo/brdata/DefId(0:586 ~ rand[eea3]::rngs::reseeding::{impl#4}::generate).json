{
  "name": "rand::rngs::reseeding::{impl#4}::generate",
  "mod_info": {
    "name": "rngs::reseeding",
    "loc": "src/rngs/mod.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/rngs/reseeding.rs:162:5:172:6",
  "doc": "",
  "code": [
    "fn generate(&mut self, results: &mut Self::Results) {",
    "    if self.bytes_until_reseed <= 0 {",
    "        // We get better performance by not calling only `reseed` here",
    "        // and continuing with the rest of the function, but by directly",
    "        // returning from a non-inlined function.",
    "        return self.reseed_and_generate(results);",
    "    }",
    "    let num_bytes = size_of_val(results.as_ref());",
    "    self.bytes_until_reseed -= num_bytes as i64;",
    "    self.inner.generate(results);",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.bytes_until_reseed <= 0",
          "norm": "0 >= self.bytes_until_reseed",
          "value": "true",
          "line": 163,
          "bound": "self.bytes_until_reseed == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.bytes_until_reseed <= 0",
          "norm": "0 >= self.bytes_until_reseed",
          "value": "false",
          "line": 163,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}