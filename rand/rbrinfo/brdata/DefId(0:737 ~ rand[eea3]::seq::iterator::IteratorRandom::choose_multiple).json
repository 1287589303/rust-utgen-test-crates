{
  "name": "rand::seq::iterator::IteratorRandom::choose_multiple",
  "mod_info": {
    "name": "seq::iterator",
    "loc": "src/seq/mod.rs:31:1:31:14"
  },
  "visible": true,
  "loc": "src/seq/iterator.rs:236:5:260:6",
  "doc": "/// Uniformly sample `amount` distinct elements into a [`Vec`]\n///\n/// This is equivalent to `choose_multiple_fill` except for the result type.\n///\n/// Although the elements are selected randomly, the order of elements in\n/// the buffer is neither stable nor fully random. If random ordering is\n/// desired, shuffle the result.\n///\n/// The length of the returned vector equals `amount` unless the iterator\n/// contains insufficient elements, in which case it equals the number of\n/// elements available.\n///\n/// Complexity is `O(n)` where `n` is the length of the iterator.\n/// For slices, prefer [`IndexedRandom::choose_multiple`].\n",
  "code": [
    "fn choose_multiple<R>(mut self, rng: &mut R, amount: usize) -> Vec<Self::Item>",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    let mut reservoir = Vec::with_capacity(amount);",
    "    reservoir.extend(self.by_ref().take(amount));",
    "",
    "    // Continue unless the iterator was exhausted",
    "    //",
    "    // note: this prevents iterators that \"restart\" from causing problems.",
    "    // If the iterator stops once, then so do we.",
    "    if reservoir.len() == amount {",
    "        for (i, elem) in self.enumerate() {",
    "            let k = rng.random_range(..i + 1 + amount);",
    "            if let Some(slot) = reservoir.get_mut(k) {",
    "                *slot = elem;",
    "            }",
    "        }",
    "    } else {",
    "        // Don't hang onto extra memory. There is a corner case where",
    "        // `amount` was much less than `self.len()`.",
    "        reservoir.shrink_to_fit();",
    "    }",
    "    reservoir",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "reservoir.len() == amount",
          "norm": "amount == reservoir.len()",
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 248,
          "bound": null
        },
        {
          "cond": "let Some(slot) = reservoir.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 248,
          "bound": null
        }
      ],
      "ret": "reservoir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        26,
        27,
        28,
        29,
        9,
        10,
        11,
        13,
        15,
        30,
        31,
        32,
        35,
        36,
        37
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "reservoir.len() == amount",
          "norm": "amount == reservoir.len()",
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "true",
          "line": 248,
          "bound": null
        },
        {
          "cond": "let Some(slot) = reservoir.get_mut(k)",
          "norm": null,
          "value": "true",
          "line": 250,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 248,
          "bound": null
        }
      ],
      "ret": "reservoir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        25,
        27,
        28,
        29,
        9,
        10,
        11,
        13,
        15,
        30,
        31,
        32,
        35,
        36,
        37
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "reservoir.len() == amount",
          "norm": "amount == reservoir.len()",
          "value": "true",
          "line": 247,
          "bound": null
        },
        {
          "cond": "(i, elem) in self.enumerate()",
          "norm": null,
          "value": "false",
          "line": 248,
          "bound": null
        }
      ],
      "ret": "reservoir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        30,
        31,
        32,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "reservoir.len() == amount",
          "norm": "amount == reservoir.len()",
          "value": "false",
          "line": 247,
          "bound": null
        }
      ],
      "ret": "reservoir",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        33,
        34,
        35,
        36,
        37
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}