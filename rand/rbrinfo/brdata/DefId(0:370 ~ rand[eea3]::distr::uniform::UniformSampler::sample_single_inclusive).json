{
  "name": "rand::distr::uniform::UniformSampler::sample_single_inclusive",
  "mod_info": {
    "name": "distr::uniform",
    "loc": "src/distr/mod.rs:101:1:101:17"
  },
  "visible": true,
  "loc": "src/distr/uniform.rs:358:5:369:6",
  "doc": "/// Sample a single value uniformly from a range with inclusive lower bound\n/// and inclusive upper bound `[low, high]`.\n///\n/// By default this is implemented using\n/// `UniformSampler::new_inclusive(low, high).sample(rng)`. However, for\n/// some types more optimal implementations for single usage may be provided\n/// via this method.\n/// Results may not be identical.\n",
  "code": [
    "fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(",
    "    low: B1,",
    "    high: B2,",
    "    rng: &mut R,",
    ") -> Result<Self::X, Error>",
    "where",
    "    B1: SampleBorrow<Self::X> + Sized,",
    "    B2: SampleBorrow<Self::X> + Sized,",
    "{",
    "    let uniform: Self = UniformSampler::new_inclusive(low, high)?;",
    "    Ok(uniform.sample(rng))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "UniformSampler::new_inclusive(low, high)?",
          "norm": null,
          "value": "Err/None",
          "line": 367,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "UniformSampler::new_inclusive(low, high)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 367,
          "bound": null
        }
      ],
      "ret": "Ok(uniform.sample(rng))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}