{
  "name": "rand::seq::index_::sample_inplace",
  "mod_info": {
    "name": "seq::index_",
    "loc": "src/seq/mod.rs:36:1:36:12"
  },
  "visible": false,
  "loc": "src/seq/index.rs:472:1:486:2",
  "doc": "/// Randomly sample exactly `amount` indices from `0..length`, using an inplace\n/// partial Fisher-Yates method.\n/// Sample an amount of indices using an inplace partial fisher yates method.\n///\n/// This allocates the entire `length` of indices and randomizes only the first `amount`.\n/// It then truncates to `amount` and returns.\n///\n/// This method is not appropriate for large `length` and potentially uses a lot\n/// of memory; because of this we only implement for `u32` index (which improves\n/// performance in all cases).\n///\n/// Set-up is `O(length)` time and memory and shuffling is `O(amount)` time.\n",
  "code": [
    "fn sample_inplace<R>(rng: &mut R, length: u32, amount: u32) -> IndexVec",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    debug_assert!(amount <= length);",
    "    let mut indices: Vec<u32> = Vec::with_capacity(length as usize);",
    "    indices.extend(0..length);",
    "    for i in 0..amount {",
    "        let j: u32 = rng.random_range(i..length);",
    "        indices.swap(i as usize, j as usize);",
    "    }",
    "    indices.truncate(amount as usize);",
    "    debug_assert_eq!(indices.len(), amount as usize);",
    "    IndexVec::from(indices)",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 476,
          "bound": "amount == length"
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        9,
        10,
        11,
        13,
        15,
        19,
        20,
        21,
        22,
        25,
        26,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 476,
          "bound": "amount == length"
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "true",
          "line": 479,
          "bound": null
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        9,
        10,
        11,
        13,
        15,
        19,
        20,
        21,
        23,
        29,
        30
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 476,
          "bound": "amount == length"
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        19,
        20,
        21,
        22,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 476,
          "bound": "amount == length"
        },
        {
          "cond": "i in 0..amount",
          "norm": null,
          "value": "false",
          "line": 479,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        19,
        20,
        21,
        23,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "false",
          "line": 476,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}