{
  "name": "rand::distr::bernoulli::{impl#2}::new",
  "mod_info": {
    "name": "distr::bernoulli",
    "loc": "src/distr/mod.rs:89:1:89:15"
  },
  "visible": true,
  "loc": "src/distr/bernoulli.rs:108:5:118:6",
  "doc": "/// Construct a new `Bernoulli` with the given probability of success `p`.\n///\n/// # Precision\n///\n/// For `p = 1.0`, the resulting distribution will always generate true.\n/// For `p = 0.0`, the resulting distribution will always generate false.\n///\n/// This method is accurate for any input `p` in the range `[0, 1]` which is\n/// a multiple of 2<sup>-64</sup>. (Note that not all multiples of\n/// 2<sup>-64</sup> in `[0, 1]` can be represented as a `f64`.)\n",
  "code": [
    "pub fn new(p: f64) -> Result<Bernoulli, BernoulliError> {",
    "    if !(0.0..1.0).contains(&p) {",
    "        if p == 1.0 {",
    "            return Ok(Bernoulli { p_int: ALWAYS_TRUE });",
    "        }",
    "        return Err(BernoulliError::InvalidProbability);",
    "    }",
    "    Ok(Bernoulli {",
    "        p_int: (p * SCALE) as u64,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(0.0..1.0).contains(&p)",
          "norm": null,
          "value": "true",
          "line": 109,
          "bound": null
        }
      ],
      "ret": "Ok(Bernoulli {\n            p_int: (p * SCALE) as u64,\n        })",
      "path": [
        0,
        1,
        2,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(0.0..1.0).contains(&p)",
          "norm": null,
          "value": "false",
          "line": 109,
          "bound": null
        },
        {
          "cond": "p == 1.0",
          "norm": "1.0 == p",
          "value": "true",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "Ok(Bernoulli { p_int: ALWAYS_TRUE })",
      "path": [
        0,
        1,
        3,
        4,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(0.0..1.0).contains(&p)",
          "norm": null,
          "value": "false",
          "line": 109,
          "bound": null
        },
        {
          "cond": "p == 1.0",
          "norm": "1.0 == p",
          "value": "false",
          "line": 110,
          "bound": null
        }
      ],
      "ret": "Err(BernoulliError::InvalidProbability)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}