{
  "name": "rand::rngs::reseeding::{impl#0}::new",
  "mod_info": {
    "name": "rngs::reseeding",
    "loc": "src/rngs/mod.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/rngs/reseeding.rs:90:5:94:6",
  "doc": "/// Create a new `ReseedingRng` from an existing PRNG, combined with a RNG\n/// to use as reseeder.\n///\n/// `threshold` sets the number of generated bytes after which to reseed the\n/// PRNG. Set it to zero to never reseed based on the number of generated\n/// values.\n",
  "code": [
    "pub fn new(threshold: u64, reseeder: Rsdr) -> Result<Self, Rsdr::Error> {",
    "    Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(",
    "        threshold, reseeder,",
    "    )?)))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ReseedingCore::new(\n            threshold, reseeder,\n        )?",
          "norm": null,
          "value": "Err/None",
          "line": 91,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ReseedingCore::new(\n            threshold, reseeder,\n        )?",
          "norm": null,
          "value": "Ok/Some",
          "line": 91,
          "bound": null
        }
      ],
      "ret": "Ok(ReseedingRng(BlockRng::new(ReseedingCore::new(\n            threshold, reseeder,\n        )?)))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}