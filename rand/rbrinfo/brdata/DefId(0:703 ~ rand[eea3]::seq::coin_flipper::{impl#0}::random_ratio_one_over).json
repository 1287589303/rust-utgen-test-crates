{
  "name": "rand::seq::coin_flipper::{impl#0}::random_ratio_one_over",
  "mod_info": {
    "name": "seq::coin_flipper",
    "loc": "src/seq/mod.rs:29:1:29:18"
  },
  "visible": true,
  "loc": "src/seq/coin_flipper.rs:30:5:44:6",
  "doc": "/// Returns true with a probability of 1 / d\n/// Uses an expected two bits of randomness\n/// Panics if d == 0\n",
  "code": [
    "pub fn random_ratio_one_over(&mut self, d: usize) -> bool {",
    "    debug_assert_ne!(d, 0);",
    "    // This uses the same logic as `random_ratio` but is optimized for the case that",
    "    // the starting numerator is one (which it always is for `Sequence::Choose()`)",
    "",
    "    // In this case (but not `random_ratio`), this way of calculating c is always accurate",
    "    let c = (usize::BITS - 1 - d.leading_zeros()).min(32);",
    "",
    "    if self.flip_c_heads(c) {",
    "        let numerator = 1 << c;",
    "        self.random_ratio(numerator, d)",
    "    } else {",
    "        false",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "self.flip_c_heads(c)",
          "norm": null,
          "value": "true",
          "line": 38,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "self.flip_c_heads(c)",
          "norm": null,
          "value": "false",
          "line": 38,
          "bound": null
        }
      ],
      "ret": "false",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}