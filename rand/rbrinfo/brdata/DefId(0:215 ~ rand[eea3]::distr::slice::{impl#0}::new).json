{
  "name": "rand::distr::slice::{impl#0}::new",
  "mod_info": {
    "name": "distr::slice",
    "loc": "src/distr/mod.rs:100:1:100:15"
  },
  "visible": true,
  "loc": "src/distr/slice.rs:69:5:77:6",
  "doc": "/// Create a new `Choose` instance which samples uniformly from the slice.\n///\n/// Returns error [`Empty`] if the slice is empty.\n",
  "code": [
    "pub fn new(slice: &'a [T]) -> Result<Self, Empty> {",
    "    let num_choices = NonZeroUsize::new(slice.len()).ok_or(Empty)?;",
    "",
    "    Ok(Self {",
    "        slice,",
    "        range: UniformUsize::new(0, num_choices.get()).unwrap(),",
    "        num_choices,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "NonZeroUsize::new(slice.len()).ok_or(Empty)?",
          "norm": null,
          "value": "Err/None",
          "line": 70,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "NonZeroUsize::new(slice.len()).ok_or(Empty)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 70,
          "bound": null
        }
      ],
      "ret": "Ok(Self {\n            slice,\n            range: UniformUsize::new(0, num_choices.get()).unwrap(),\n            num_choices,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}