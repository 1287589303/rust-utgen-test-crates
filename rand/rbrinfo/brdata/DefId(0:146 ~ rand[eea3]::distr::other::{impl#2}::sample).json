{
  "name": "rand::distr::other::{impl#2}::sample",
  "mod_info": {
    "name": "distr::other",
    "loc": "src/distr/mod.rs:93:1:93:11"
  },
  "visible": true,
  "loc": "src/distr/other.rs:137:5:152:6",
  "doc": "",
  "code": [
    "fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u8 {",
    "    const RANGE: u32 = 26 + 26 + 10;",
    "    const GEN_ASCII_STR_CHARSET: &[u8] = b\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\",
    "            abcdefghijklmnopqrstuvwxyz\\",
    "            0123456789\";",
    "    // We can pick from 62 characters. This is so close to a power of 2, 64,",
    "    // that we can do better than `Uniform`. Use a simple bitshift and",
    "    // rejection sampling. We do not use a bitmask, because for small RNGs",
    "    // the most significant bits are usually of higher quality.",
    "    loop {",
    "        let var = rng.next_u32() >> (32 - 6);",
    "        if var < RANGE {",
    "            return GEN_ASCII_STR_CHARSET[var as usize];",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "var < RANGE",
          "norm": "RANGE > var",
          "value": "true",
          "line": 148,
          "bound": null
        }
      ],
      "ret": "GEN_ASCII_STR_CHARSET[var as usize]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "var < RANGE",
          "norm": "RANGE > var",
          "value": "false",
          "line": 148,
          "bound": "var == RANGE"
        },
        {
          "cond": "var < RANGE",
          "norm": "RANGE > var",
          "value": "true",
          "line": 148,
          "bound": null
        }
      ],
      "ret": "GEN_ASCII_STR_CHARSET[var as usize]",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}