{
  "name": "rand::distr::distribution::Distribution::sample_iter",
  "mod_info": {
    "name": "distr::distribution",
    "loc": "src/distr/mod.rs:90:1:90:18"
  },
  "visible": true,
  "loc": "src/distr/distribution.rs:72:5:82:6",
  "doc": "/// Create an iterator that generates random values of `T`, using `rng` as\n/// the source of randomness.\n///\n/// Note that this function takes `self` by value. This works since\n/// `Distribution<T>` is impl'd for `&D` where `D: Distribution<T>`,\n/// however borrowing is not automatic hence `distr.sample_iter(...)` may\n/// need to be replaced with `(&distr).sample_iter(...)` to borrow or\n/// `(&*distr).sample_iter(...)` to reborrow an existing reference.\n///\n/// # Example\n///\n/// ```\n/// use rand::distr::{Distribution, Alphanumeric, Uniform, StandardUniform};\n///\n/// let mut rng = rand::rng();\n///\n/// // Vec of 16 x f32:\n/// let v: Vec<f32> = StandardUniform.sample_iter(&mut rng).take(16).collect();\n///\n/// // String:\n/// let s: String = Alphanumeric\n///     .sample_iter(&mut rng)\n///     .take(7)\n///     .map(char::from)\n///     .collect();\n///\n/// // Dice-rolling:\n/// let die_range = Uniform::new_inclusive(1, 6).unwrap();\n/// let mut roll_die = die_range.sample_iter(&mut rng);\n/// while roll_die.next().unwrap() != 6 {\n///     println!(\"Not a 6; rolling again!\");\n/// }\n/// ```\n",
  "code": [
    "fn sample_iter<R>(self, rng: R) -> Iter<Self, R, T>",
    "where",
    "    R: Rng,",
    "    Self: Sized,",
    "{",
    "    Iter {",
    "        distr: self,",
    "        rng,",
    "        phantom: core::marker::PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Iter {\n            distr: self,\n            rng,\n            phantom: core::marker::PhantomData,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}