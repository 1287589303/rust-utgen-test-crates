{
  "name": "rand::rng::Rng::sample",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:249:5:251:6",
  "doc": "/// Sample a new value, using the given distribution.\n///\n/// ### Example\n///\n/// ```\n/// use rand::Rng;\n/// use rand::distr::Uniform;\n///\n/// let mut rng = rand::rng();\n/// let x = rng.sample(Uniform::new(10u32, 15).unwrap());\n/// // Type annotation requires two types, the type and distribution; the\n/// // distribution can be inferred.\n/// let y = rng.sample::<u16, _>(Uniform::new(10, 15).unwrap());\n/// ```\n",
  "code": [
    "fn sample<T, D: Distribution<T>>(&mut self, distr: D) -> T {",
    "    distr.sample(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}