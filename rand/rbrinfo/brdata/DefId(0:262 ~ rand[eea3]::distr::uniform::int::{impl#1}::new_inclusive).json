{
  "name": "rand::distr::uniform::int::{impl#1}::new_inclusive",
  "mod_info": {
    "name": "distr::uniform::int",
    "loc": "src/distr/uniform.rs:103:1:103:9"
  },
  "visible": true,
  "loc": "src/distr/uniform_int.rs:440:5:481:6",
  "doc": "",
  "code": [
    "fn new_inclusive<B1, B2>(low_b: B1, high_b: B2) -> Result<Self, Error>",
    "where",
    "    B1: SampleBorrow<Self::X> + Sized,",
    "    B2: SampleBorrow<Self::X> + Sized,",
    "{",
    "    let low = *low_b.borrow();",
    "    let high = *high_b.borrow();",
    "    if !(low <= high) {",
    "        return Err(Error::EmptyRange);",
    "    }",
    "",
    "    #[cfg(target_pointer_width = \"64\")]",
    "    let mode64 = high > (u32::MAX as usize);",
    "    #[cfg(target_pointer_width = \"32\")]",
    "    let mode64 = false;",
    "",
    "    let (range, thresh);",
    "    if cfg!(target_pointer_width = \"64\") && !mode64 {",
    "        let range32 = (high as u32).wrapping_sub(low as u32).wrapping_add(1);",
    "        range = range32 as usize;",
    "        thresh = if range32 > 0 {",
    "            (range32.wrapping_neg() % range32) as usize",
    "        } else {",
    "            0",
    "        };",
    "    } else {",
    "        range = high.wrapping_sub(low).wrapping_add(1);",
    "        thresh = if range > 0 {",
    "            range.wrapping_neg() % range",
    "        } else {",
    "            0",
    "        };",
    "    }",
    "",
    "    Ok(UniformUsize {",
    "        low,",
    "        range,",
    "        thresh,",
    "        #[cfg(target_pointer_width = \"64\")]",
    "        mode64,",
    "    })",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 447,
          "bound": "low == high"
        },
        {
          "cond": "mode64",
          "norm": null,
          "value": "true",
          "line": 457,
          "bound": null
        },
        {
          "cond": "range > 0",
          "norm": "0 < range",
          "value": "true",
          "line": 467,
          "bound": null
        }
      ],
      "ret": "Ok(UniformUsize {\n            low,\n            range,\n            thresh,\n            #[cfg(target_pointer_width = \"64\")]\n            mode64,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        23,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 447,
          "bound": "low == high"
        },
        {
          "cond": "mode64",
          "norm": null,
          "value": "true",
          "line": 457,
          "bound": null
        },
        {
          "cond": "range > 0",
          "norm": "0 < range",
          "value": "false",
          "line": 467,
          "bound": "range == 0"
        }
      ],
      "ret": "Ok(UniformUsize {\n            low,\n            range,\n            thresh,\n            #[cfg(target_pointer_width = \"64\")]\n            mode64,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        14,
        15,
        16,
        20,
        21,
        22,
        23,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 447,
          "bound": "low == high"
        },
        {
          "cond": "mode64",
          "norm": null,
          "value": "false",
          "line": 457,
          "bound": null
        },
        {
          "cond": "range32 > 0",
          "norm": "0 < range32",
          "value": "true",
          "line": 460,
          "bound": null
        }
      ],
      "ret": "Ok(UniformUsize {\n            low,\n            range,\n            thresh,\n            #[cfg(target_pointer_width = \"64\")]\n            mode64,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        22,
        23,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "true",
          "line": 447,
          "bound": "low == high"
        },
        {
          "cond": "mode64",
          "norm": null,
          "value": "false",
          "line": 457,
          "bound": null
        },
        {
          "cond": "range32 > 0",
          "norm": "0 < range32",
          "value": "false",
          "line": 460,
          "bound": "range32 == 0"
        }
      ],
      "ret": "Ok(UniformUsize {\n            low,\n            range,\n            thresh,\n            #[cfg(target_pointer_width = \"64\")]\n            mode64,\n        })",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        12,
        13,
        22,
        23,
        25
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "(low <= high)",
          "norm": "high >= low",
          "value": "false",
          "line": 447,
          "bound": null
        }
      ],
      "ret": "Err(Error::EmptyRange)",
      "path": [
        0,
        1,
        2,
        4,
        24,
        25
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}