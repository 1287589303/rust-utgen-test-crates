{
  "name": "rand::seq::index_::sample_rejection",
  "mod_info": {
    "name": "seq::index_",
    "loc": "src/seq/mod.rs:36:1:36:12"
  },
  "visible": false,
  "loc": "src/seq/index.rs:539:1:561:2",
  "doc": "/// Randomly sample exactly `amount` indices from `0..length`, using rejection\n/// sampling.\n///\n/// Since `amount <<< length` there is a low chance of a random sample in\n/// `0..length` being a duplicate. We test for duplicates and resample where\n/// necessary. The algorithm is `O(amount)` time and memory.\n///\n/// This function  is generic over X primarily so that results are value-stable\n/// over 32-bit and 64-bit platforms.\n",
  "code": [
    "fn sample_rejection<X: UInt, R>(rng: &mut R, length: X, amount: X) -> IndexVec",
    "where",
    "    R: Rng + ?Sized,",
    "    IndexVec: From<Vec<X>>,",
    "{",
    "    debug_assert!(amount < length);",
    "    #[cfg(feature = \"std\")]",
    "    let mut cache = HashSet::with_capacity(amount.as_usize());",
    "    #[cfg(not(feature = \"std\"))]",
    "    let mut cache = BTreeSet::new();",
    "    let distr = Uniform::new(X::zero(), length).unwrap();",
    "    let mut indices = Vec::with_capacity(amount.as_usize());",
    "    for _ in 0..amount.as_usize() {",
    "        let mut pos = distr.sample(rng);",
    "        while !cache.insert(pos) {",
    "            pos = distr.sample(rng);",
    "        }",
    "        indices.push(pos);",
    "    }",
    "",
    "    debug_assert_eq!(indices.len(), amount.as_usize());",
    "    IndexVec::from(indices)",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 4,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "true",
          "line": 551,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        30,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "true",
          "line": 551,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        27,
        30,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        36,
        43,
        44,
        46,
        47
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "true",
          "line": 551,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        28,
        29,
        24,
        25,
        26,
        27,
        30,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "true",
          "line": 551,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "false",
          "line": 553,
          "bound": null
        },
        {
          "cond": "cache.insert(pos)",
          "norm": null,
          "value": "true",
          "line": 553,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        21,
        23,
        24,
        25,
        26,
        28,
        29,
        24,
        25,
        26,
        27,
        30,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        36,
        43,
        44,
        46,
        47
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        35,
        37,
        38,
        39,
        40,
        41
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "true",
          "line": 544,
          "bound": null
        },
        {
          "cond": "_ in 0..amount.as_usize()",
          "norm": null,
          "value": "false",
          "line": 551,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        20,
        22,
        31,
        33,
        34,
        36,
        43,
        44,
        46,
        47
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "amount < length",
          "norm": null,
          "value": "false",
          "line": 544,
          "bound": "amount == length"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        47
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}