{
  "name": "rand::rngs::thread::rng",
  "mod_info": {
    "name": "rngs::thread",
    "loc": "src/rngs/mod.rs:99:1:99:23"
  },
  "visible": true,
  "loc": "src/rngs/thread.rs:157:1:160:2",
  "doc": "/// Access a fast, pre-initialized generator\n///\n/// This is a handle to the local [`ThreadRng`].\n///\n/// See also [`crate::rngs`] for alternatives.\n///\n/// # Example\n///\n/// ```\n/// use rand::prelude::*;\n///\n/// # fn main() {\n///\n/// let mut numbers = [1, 2, 3, 4, 5];\n/// numbers.shuffle(&mut rand::rng());\n/// println!(\"Numbers: {numbers:?}\");\n///\n/// // Using a local binding avoids an initialization-check on each usage:\n/// let mut rng = rand::rng();\n///\n/// println!(\"True or false: {}\", rng.random::<bool>());\n/// println!(\"A simulated die roll: {}\", rng.random_range(1..=6));\n/// # }\n/// ```\n///\n/// # Security\n///\n/// Refer to [`ThreadRng#Security`].\n",
  "code": [
    "pub fn rng() -> ThreadRng {",
    "    let rng = THREAD_RNG_KEY.with(|t| t.clone());",
    "    ThreadRng { rng }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "ThreadRng { rng }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}