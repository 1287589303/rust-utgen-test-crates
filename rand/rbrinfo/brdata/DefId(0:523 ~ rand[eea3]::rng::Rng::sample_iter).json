{
  "name": "rand::rng::Rng::sample_iter",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:286:5:292:6",
  "doc": "/// Create an iterator that generates values using the given distribution.\n///\n/// Note: this method consumes its arguments. Use\n/// `(&mut rng).sample_iter(..)` to avoid consuming the RNG.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n/// use rand::distr::{Alphanumeric, Uniform, StandardUniform};\n///\n/// let mut rng = rand::rng();\n///\n/// // Vec of 16 x f32:\n/// let v: Vec<f32> = (&mut rng).sample_iter(StandardUniform).take(16).collect();\n///\n/// // String:\n/// let s: String = (&mut rng).sample_iter(Alphanumeric)\n///     .take(7)\n///     .map(char::from)\n///     .collect();\n///\n/// // Combined values\n/// println!(\"{:?}\", (&mut rng).sample_iter(StandardUniform).take(5)\n///                              .collect::<Vec<(f64, bool)>>());\n///\n/// // Dice-rolling:\n/// let die_range = Uniform::new_inclusive(1, 6).unwrap();\n/// let mut roll_die = (&mut rng).sample_iter(die_range);\n/// while roll_die.next().unwrap() != 6 {\n///     println!(\"Not a 6; rolling again!\");\n/// }\n/// ```\n",
  "code": [
    "fn sample_iter<T, D>(self, distr: D) -> distr::Iter<D, Self, T>",
    "where",
    "    D: Distribution<T>,",
    "    Self: Sized,",
    "{",
    "    distr.sample_iter(self)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}