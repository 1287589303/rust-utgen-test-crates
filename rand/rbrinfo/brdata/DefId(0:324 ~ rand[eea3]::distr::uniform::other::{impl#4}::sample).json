{
  "name": "rand::distr::uniform::other::{impl#4}::sample",
  "mod_info": {
    "name": "distr::uniform::other",
    "loc": "src/distr/uniform.rs:108:1:108:11"
  },
  "visible": true,
  "loc": "src/distr/uniform_other.rs:216:5:243:6",
  "doc": "",
  "code": [
    "fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> Duration {",
    "    match self.mode {",
    "        UniformDurationMode::Small { secs, nanos } => {",
    "            let n = nanos.sample(rng);",
    "            Duration::new(secs, n)",
    "        }",
    "        UniformDurationMode::Medium { nanos } => {",
    "            let nanos = nanos.sample(rng);",
    "            Duration::new(nanos / 1_000_000_000, (nanos % 1_000_000_000) as u32)",
    "        }",
    "        UniformDurationMode::Large {",
    "            max_secs,",
    "            max_nanos,",
    "            secs,",
    "        } => {",
    "            // constant folding means this is at least as fast as `Rng::sample(Range)`",
    "            let nano_range = Uniform::new(0, 1_000_000_000).unwrap();",
    "            loop {",
    "                let s = secs.sample(rng);",
    "                let n = nano_range.sample(rng);",
    "                if !(s == max_secs && n > max_nanos) {",
    "                    let sum = n + self.offset;",
    "                    break Duration::new(s, sum);",
    "                }",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 1,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.mode matches UniformDurationMode::Large {\n                max_secs,\n                max_nanos,\n                secs,\n            }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "s == max_secs",
          "norm": "max_secs == s",
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "n > max_nanos",
          "norm": "max_nanos < n",
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "s == max_secs",
          "norm": "max_secs == s",
          "value": "false",
          "line": 236,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.mode matches UniformDurationMode::Large {\n                max_secs,\n                max_nanos,\n                secs,\n            }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "s == max_secs",
          "norm": "max_secs == s",
          "value": "true",
          "line": 236,
          "bound": null
        },
        {
          "cond": "n > max_nanos",
          "norm": "max_nanos < n",
          "value": "false",
          "line": 236,
          "bound": "n == max_nanos"
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        23,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.mode matches UniformDurationMode::Large {\n                max_secs,\n                max_nanos,\n                secs,\n            }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "s == max_secs",
          "norm": "max_secs == s",
          "value": "false",
          "line": 236,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        13,
        14,
        15,
        16,
        17,
        18,
        22,
        23,
        24,
        25,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.mode matches UniformDurationMode::Medium { nanos }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "self.mode matches UniformDurationMode::Medium { nanos }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        8,
        9,
        10,
        11,
        12,
        26
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "self.mode matches UniformDurationMode::Small { secs, nanos }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        },
        {
          "cond": "self.mode matches UniformDurationMode::Small { secs, nanos }",
          "norm": null,
          "value": "true",
          "line": 217,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        5,
        6,
        7,
        26
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}