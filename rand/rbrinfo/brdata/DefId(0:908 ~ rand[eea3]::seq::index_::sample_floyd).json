{
  "name": "rand::seq::index_::sample_floyd",
  "mod_info": {
    "name": "seq::index_",
    "loc": "src/seq/mod.rs:36:1:36:12"
  },
  "visible": false,
  "loc": "src/seq/index.rs:441:1:458:2",
  "doc": "/// Randomly sample exactly `amount` indices from `0..length`, using Floyd's\n/// combination algorithm.\n///\n/// The output values are fully shuffled. (Overhead is under 50%.)\n///\n/// This implementation uses `O(amount)` memory and `O(amount^2)` time.\n",
  "code": [
    "fn sample_floyd<R>(rng: &mut R, length: u32, amount: u32) -> IndexVec",
    "where",
    "    R: Rng + ?Sized,",
    "{",
    "    // Note that the values returned by `rng.random_range()` can be",
    "    // inferred from the returned vector by working backwards from",
    "    // the last entry. This bijection proves the algorithm fair.",
    "    debug_assert!(amount <= length);",
    "    let mut indices = Vec::with_capacity(amount as usize);",
    "    for j in length - amount..length {",
    "        let t = rng.random_range(..=j);",
    "        if let Some(pos) = indices.iter().position(|&x| x == t) {",
    "            indices[pos] = j;",
    "        }",
    "        indices.push(t);",
    "    }",
    "    IndexVec::from(indices)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": "amount == length"
        },
        {
          "cond": "j in length - amount..length",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(pos) = indices.iter().position(|&x| x == t)",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "j in length - amount..length",
          "norm": null,
          "value": "false",
          "line": 450,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        23,
        24,
        25,
        9,
        10,
        11,
        13,
        15,
        26,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": "amount == length"
        },
        {
          "cond": "j in length - amount..length",
          "norm": null,
          "value": "true",
          "line": 450,
          "bound": null
        },
        {
          "cond": "let Some(pos) = indices.iter().position(|&x| x == t)",
          "norm": null,
          "value": "true",
          "line": 452,
          "bound": null
        },
        {
          "cond": "j in length - amount..length",
          "norm": null,
          "value": "false",
          "line": 450,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        24,
        25,
        9,
        10,
        11,
        13,
        15,
        26,
        27
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "true",
          "line": 448,
          "bound": "amount == length"
        },
        {
          "cond": "j in length - amount..length",
          "norm": null,
          "value": "false",
          "line": 450,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "amount <= length",
          "norm": null,
          "value": "false",
          "line": 448,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        30
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}