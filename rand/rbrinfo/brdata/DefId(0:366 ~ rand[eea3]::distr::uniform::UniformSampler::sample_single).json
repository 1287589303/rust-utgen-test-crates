{
  "name": "rand::distr::uniform::UniformSampler::sample_single",
  "mod_info": {
    "name": "distr::uniform",
    "loc": "src/distr/mod.rs:101:1:101:17"
  },
  "visible": true,
  "loc": "src/distr/uniform.rs:337:5:348:6",
  "doc": "/// Sample a single value uniformly from a range with inclusive lower bound\n/// and exclusive upper bound `[low, high)`.\n///\n/// For discrete types (e.g. integers), samples will always be strictly less\n/// than `high`. For (approximations of) continuous types (e.g. `f32`, `f64`),\n/// samples may equal `high` due to loss of precision but may not be\n/// greater than `high`.\n///\n/// By default this is implemented using\n/// `UniformSampler::new(low, high).sample(rng)`. However, for some types\n/// more optimal implementations for single usage may be provided via this\n/// method (which is the case for integers and floats).\n/// Results may not be identical.\n///\n/// Note that to use this method in a generic context, the type needs to be\n/// retrieved via `SampleUniform::Sampler` as follows:\n/// ```\n/// use rand::distr::uniform::{SampleUniform, UniformSampler};\n/// # #[allow(unused)]\n/// fn sample_from_range<T: SampleUniform>(lb: T, ub: T) -> T {\n///     let mut rng = rand::rng();\n///     <T as SampleUniform>::Sampler::sample_single(lb, ub, &mut rng).unwrap()\n/// }\n/// ```\n",
  "code": [
    "fn sample_single<R: Rng + ?Sized, B1, B2>(",
    "    low: B1,",
    "    high: B2,",
    "    rng: &mut R,",
    ") -> Result<Self::X, Error>",
    "where",
    "    B1: SampleBorrow<Self::X> + Sized,",
    "    B2: SampleBorrow<Self::X> + Sized,",
    "{",
    "    let uniform: Self = UniformSampler::new(low, high)?;",
    "    Ok(uniform.sample(rng))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "UniformSampler::new(low, high)?",
          "norm": null,
          "value": "Err/None",
          "line": 346,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "UniformSampler::new(low, high)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 346,
          "bound": null
        }
      ],
      "ret": "Ok(uniform.sample(rng))",
      "path": [
        0,
        1,
        2,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}