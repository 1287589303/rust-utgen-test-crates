{
  "name": "rand::rng::Rng::random_range",
  "mod_info": {
    "name": "rng",
    "loc": "src/lib.rs:108:1:108:9"
  },
  "visible": true,
  "loc": "src/rng.rs:161:5:168:6",
  "doc": "/// Generate a random value in the given range.\n///\n/// This function is optimised for the case that only a single sample is\n/// made from the given range. See also the [`Uniform`] distribution\n/// type which may be faster if sampling from the same range repeatedly.\n///\n/// All types support `low..high_exclusive` and `low..=high` range syntax.\n/// Unsigned integer types also support `..high_exclusive` and `..=high` syntax.\n///\n/// # Panics\n///\n/// Panics if the range is empty, or if `high - low` overflows for floats.\n///\n/// # Example\n///\n/// ```\n/// use rand::Rng;\n///\n/// let mut rng = rand::rng();\n///\n/// // Exclusive range\n/// let n: u32 = rng.random_range(..10);\n/// println!(\"{}\", n);\n/// let m: f64 = rng.random_range(-40.0..1.3e5);\n/// println!(\"{}\", m);\n///\n/// // Inclusive range\n/// let n: u32 = rng.random_range(..=10);\n/// println!(\"{}\", n);\n/// ```\n///\n/// [`Uniform`]: distr::uniform::Uniform\n",
  "code": [
    "fn random_range<T, R>(&mut self, range: R) -> T",
    "where",
    "    T: SampleUniform,",
    "    R: SampleRange<T>,",
    "{",
    "    assert!(!range.is_empty(), \"cannot sample empty range\");",
    "    range.sample_single(self).unwrap()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "range.is_empty()",
          "norm": null,
          "value": "true",
          "line": 166,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "range.is_empty()",
          "norm": null,
          "value": "false",
          "line": 166,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}