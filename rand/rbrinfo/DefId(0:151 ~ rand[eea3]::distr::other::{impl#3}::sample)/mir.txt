bb0
  0: StorageLive(_3)
    SourceInfo(src/distr/other.rs:159:13-159:19)
  1: StorageLive(_4)
    SourceInfo(src/distr/other.rs:159:22-159:48)
  2: StorageLive(_5)
    SourceInfo(src/distr/other.rs:159:22-159:25)
  3: _5 = &mut (*_2)
    SourceInfo(src/distr/other.rs:159:22-159:25)
  4: StorageLive(_6)
    SourceInfo(src/distr/other.rs:159:39-159:47)
  5: _6 = core::ops::Range::<u8> { start: const 0_u8, end: const <distr::other::Alphabetic as distr::distribution::Distribution<u8>>::sample::RANGE }
    SourceInfo(src/distr/other.rs:159:39-159:47)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:159:22-159:48)
      kind: _4 = <R as rng::Rng>::random_range::<u8, core::ops::Range<u8>>(move _5, move _6) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: StorageDead(_6)
    SourceInfo(src/distr/other.rs:159:47-159:48)
  1: StorageDead(_5)
    SourceInfo(src/distr/other.rs:159:47-159:48)
  2: _7 = AddWithOverflow(_4, const 65_u8)
    SourceInfo(src/distr/other.rs:159:22-159:55)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:159:22-159:55)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 65_u8) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _3 = move (_7.0: u8)
    SourceInfo(src/distr/other.rs:159:22-159:55)
  1: StorageDead(_4)
    SourceInfo(src/distr/other.rs:159:54-159:55)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/distr/other.rs:159:13-159:19)
  3: StorageLive(_8)
    SourceInfo(src/distr/other.rs:162:9-162:15)
  4: _8 = _3
    SourceInfo(src/distr/other.rs:162:9-162:15)
  5: StorageLive(_9)
    SourceInfo(src/distr/other.rs:162:18-162:59)
  6: StorageLive(_10)
    SourceInfo(src/distr/other.rs:162:18-162:39)
  7: StorageLive(_11)
    SourceInfo(src/distr/other.rs:162:18-162:33)
  8: StorageLive(_12)
    SourceInfo(src/distr/other.rs:162:19-162:25)
  9: _12 = _3
    SourceInfo(src/distr/other.rs:162:19-162:25)
  10: _11 = Gt(move _12, const 90_u8)
    SourceInfo(src/distr/other.rs:162:18-162:33)
  11: StorageDead(_12)
    SourceInfo(src/distr/other.rs:162:32-162:33)
  12: _10 = move _11 as u8 (IntToInt)
    SourceInfo(src/distr/other.rs:162:18-162:39)
  13: StorageDead(_11)
    SourceInfo(src/distr/other.rs:162:38-162:39)
  14: StorageLive(_13)
    SourceInfo(src/distr/other.rs:162:42-162:59)
  15: StorageLive(_14)
    SourceInfo(src/distr/other.rs:162:43-162:54)
  16: _15 = SubWithOverflow(const 97_u8, const 90_u8)
    SourceInfo(src/distr/other.rs:162:43-162:54)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:162:43-162:54)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", const 97_u8, const 90_u8) -> [success: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: _14 = move (_15.0: u8)
    SourceInfo(src/distr/other.rs:162:43-162:54)
  1: _16 = SubWithOverflow(_14, const 1_u8)
    SourceInfo(src/distr/other.rs:162:42-162:59)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:162:42-162:59)
      kind: assert(!move (_16.1: bool), "attempt to compute `{} - {}`, which would overflow", move _14, const 1_u8) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _13 = move (_16.0: u8)
    SourceInfo(src/distr/other.rs:162:42-162:59)
  1: StorageDead(_14)
    SourceInfo(src/distr/other.rs:162:58-162:59)
  2: _17 = MulWithOverflow(_10, _13)
    SourceInfo(src/distr/other.rs:162:18-162:59)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:162:18-162:59)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} * {}`, which would overflow", move _10, move _13) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _9 = move (_17.0: u8)
    SourceInfo(src/distr/other.rs:162:18-162:59)
  1: StorageDead(_13)
    SourceInfo(src/distr/other.rs:162:58-162:59)
  2: StorageDead(_10)
    SourceInfo(src/distr/other.rs:162:58-162:59)
  3: _18 = AddWithOverflow(_8, _9)
    SourceInfo(src/distr/other.rs:162:9-162:59)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:162:9-162:59)
      kind: assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, move _9) -> [success: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: _0 = move (_18.0: u8)
    SourceInfo(src/distr/other.rs:162:9-162:59)
  1: StorageDead(_9)
    SourceInfo(src/distr/other.rs:162:58-162:59)
  2: StorageDead(_8)
    SourceInfo(src/distr/other.rs:162:58-162:59)
  3: StorageDead(_3)
    SourceInfo(src/distr/other.rs:163:5-163:6)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:163:6-163:6)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:156:5-163:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

