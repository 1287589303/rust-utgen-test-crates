bb0
  0: StorageLive(_3)
    SourceInfo(src/distr/weighted/mod.rs:108:9-108:10)
  1: _3 = &mut (*_2)
    SourceInfo(src/distr/weighted/mod.rs:108:9-108:10)
  2: StorageLive(_4)
    SourceInfo(src/distr/weighted/mod.rs:108:21-113:10)
  3: PlaceMention((*_1))
    SourceInfo(src/distr/weighted/mod.rs:108:27-108:32)
  4: _5 = discriminant((*_1))
    SourceInfo(src/distr/weighted/mod.rs:108:27-108:32)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:108:21-108:32)
      kind: switchInt(move _5) -> [0: bb2, 1: bb3, 2: bb4, 3: bb5, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3, bb4, bb5]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(src/distr/weighted/mod.rs:108:27-108:32)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:108:27-108:32)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:109:13-109:32)
      kind: falseEdge -> [real: bb6, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb6]

bb3
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:110:13-110:33)
      kind: falseEdge -> [real: bb7, imaginary: bb4]
  }
  preds [bb0, bb2]
  succs [bb4, bb7]

bb4
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:111:13-111:39)
      kind: falseEdge -> [real: bb8, imaginary: bb5]
  }
  preds [bb0, bb3]
  succs [bb5, bb8]

bb5
  0: StorageLive(_9)
    SourceInfo(src/distr/weighted/mod.rs:112:32-112:63)
  1: _9 = const "Overflow when summing weights"
    SourceInfo(src/distr/weighted/mod.rs:112:32-112:63)
  2: _4 = &(*_9)
    SourceInfo(src/distr/weighted/mod.rs:112:32-112:63)
  3: StorageDead(_9)
    SourceInfo(src/distr/weighted/mod.rs:112:62-112:63)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:112:62-112:63)
      kind: goto -> bb9
  }
  preds [bb0, bb4]
  succs [bb9]

bb6
  0: StorageLive(_6)
    SourceInfo(src/distr/weighted/mod.rs:109:36-109:82)
  1: _6 = const "Weights sequence is empty/too long/unordered"
    SourceInfo(src/distr/weighted/mod.rs:109:36-109:82)
  2: _4 = &(*_6)
    SourceInfo(src/distr/weighted/mod.rs:109:36-109:82)
  3: StorageDead(_6)
    SourceInfo(src/distr/weighted/mod.rs:109:81-109:82)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:109:81-109:82)
      kind: goto -> bb9
  }
  preds [bb2]
  succs [bb9]

bb7
  0: StorageLive(_7)
    SourceInfo(src/distr/weighted/mod.rs:110:37-110:92)
  1: _7 = const "A weight is negative, too large or not a valid number"
    SourceInfo(src/distr/weighted/mod.rs:110:37-110:92)
  2: _4 = &(*_7)
    SourceInfo(src/distr/weighted/mod.rs:110:37-110:92)
  3: StorageDead(_7)
    SourceInfo(src/distr/weighted/mod.rs:110:91-110:92)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:110:91-110:92)
      kind: goto -> bb9
  }
  preds [bb3]
  succs [bb9]

bb8
  0: StorageLive(_8)
    SourceInfo(src/distr/weighted/mod.rs:111:43-111:70)
  1: _8 = const "Not enough weights > zero"
    SourceInfo(src/distr/weighted/mod.rs:111:43-111:70)
  2: _4 = &(*_8)
    SourceInfo(src/distr/weighted/mod.rs:111:43-111:70)
  3: StorageDead(_8)
    SourceInfo(src/distr/weighted/mod.rs:111:69-111:70)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:111:69-111:70)
      kind: goto -> bb9
  }
  preds [bb4]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:108:9-113:11)
      kind: _0 = core::fmt::Formatter::<'_>::write_str(move _3, move _4) -> [return: bb10, unwind: bb11]
  }
  preds [bb5, bb6, bb7, bb8]
  succs [bb10, bb11]

bb10
  0: StorageDead(_4)
    SourceInfo(src/distr/weighted/mod.rs:113:10-113:11)
  1: StorageDead(_3)
    SourceInfo(src/distr/weighted/mod.rs:113:10-113:11)
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:114:6-114:6)
      kind: return
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(src/distr/weighted/mod.rs:107:5-114:6)
      kind: resume
  }
  preds [bb9]
  succs []

