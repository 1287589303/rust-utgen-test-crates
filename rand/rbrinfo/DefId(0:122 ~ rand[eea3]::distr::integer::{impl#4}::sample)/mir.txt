bb0
  0: StorageLive(_3)
    SourceInfo(src/distr/integer.rs:60:13-60:14)
  1: StorageLive(_4)
    SourceInfo(src/distr/integer.rs:60:28-60:42)
  2: StorageLive(_5)
    SourceInfo(src/distr/integer.rs:60:28-60:31)
  3: _5 = &mut (*_2)
    SourceInfo(src/distr/integer.rs:60:28-60:31)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:60:28-60:42)
      kind: _4 = <R as rand_core::RngCore>::next_u64(move _5) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_5)
    SourceInfo(src/distr/integer.rs:60:41-60:42)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:60:17-60:43)
      kind: _3 = <u128 as core::convert::From<u64>>::from(move _4) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_4)
    SourceInfo(src/distr/integer.rs:60:42-60:43)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/distr/integer.rs:60:13-60:14)
  2: StorageLive(_6)
    SourceInfo(src/distr/integer.rs:61:13-61:14)
  3: StorageLive(_7)
    SourceInfo(src/distr/integer.rs:61:28-61:42)
  4: StorageLive(_8)
    SourceInfo(src/distr/integer.rs:61:28-61:31)
  5: _8 = &mut (*_2)
    SourceInfo(src/distr/integer.rs:61:28-61:31)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:61:28-61:42)
      kind: _7 = <R as rand_core::RngCore>::next_u64(move _8) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_8)
    SourceInfo(src/distr/integer.rs:61:41-61:42)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:61:17-61:43)
      kind: _6 = <u128 as core::convert::From<u64>>::from(move _7) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_7)
    SourceInfo(src/distr/integer.rs:61:42-61:43)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(src/distr/integer.rs:61:13-61:14)
  2: StorageLive(_9)
    SourceInfo(src/distr/integer.rs:62:9-62:18)
  3: StorageLive(_10)
    SourceInfo(src/distr/integer.rs:62:10-62:11)
  4: _10 = _6
    SourceInfo(src/distr/integer.rs:62:10-62:11)
  5: _11 = const 64_i32 as u32 (IntToInt)
    SourceInfo(src/distr/integer.rs:62:9-62:18)
  6: _12 = Lt(move _11, const 128_u32)
    SourceInfo(src/distr/integer.rs:62:9-62:18)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:62:9-62:18)
      kind: assert(move _12, "attempt to shift left by `{}`, which would overflow", const 64_i32) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _9 = Shl(move _10, const 64_i32)
    SourceInfo(src/distr/integer.rs:62:9-62:18)
  1: StorageDead(_10)
    SourceInfo(src/distr/integer.rs:62:17-62:18)
  2: StorageLive(_13)
    SourceInfo(src/distr/integer.rs:62:21-62:22)
  3: _13 = _3
    SourceInfo(src/distr/integer.rs:62:21-62:22)
  4: _0 = BitOr(move _9, move _13)
    SourceInfo(src/distr/integer.rs:62:9-62:22)
  5: StorageDead(_13)
    SourceInfo(src/distr/integer.rs:62:21-62:22)
  6: StorageDead(_9)
    SourceInfo(src/distr/integer.rs:62:21-62:22)
  7: StorageDead(_6)
    SourceInfo(src/distr/integer.rs:63:5-63:6)
  8: StorageDead(_3)
    SourceInfo(src/distr/integer.rs:63:5-63:6)
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:63:6-63:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/distr/integer.rs:58:5-63:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

