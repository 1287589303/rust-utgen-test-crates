bb0
  0: StorageLive(_3)
    SourceInfo(src/seq/mod.rs:65:9-67:10)
  1: StorageLive(_4)
    SourceInfo(src/seq/mod.rs:65:12-65:19)
  2: StorageLive(_5)
    SourceInfo(src/seq/mod.rs:65:16-65:19)
  3: _5 = _2
    SourceInfo(src/seq/mod.rs:65:16-65:19)
  4: _4 = Gt(const N, move _5)
    SourceInfo(src/seq/mod.rs:65:12-65:19)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:65:12-65:19)
      kind: switchInt(move _4) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_5)
    SourceInfo(src/seq/mod.rs:65:18-65:19)
  1: _0 = core::option::Option::<[usize; N]>::None
    SourceInfo(src/seq/mod.rs:66:20-66:24)
  2: StorageDead(_4)
    SourceInfo(src/seq/mod.rs:67:9-67:10)
  3: StorageDead(_3)
    SourceInfo(src/seq/mod.rs:67:9-67:10)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:79:6-79:6)
      kind: goto -> bb24
  }
  preds [bb0]
  succs [bb24]

bb2
  0: StorageDead(_5)
    SourceInfo(src/seq/mod.rs:65:18-65:19)
  1: _3 = const ()
    SourceInfo(src/seq/mod.rs:67:10-67:10)
  2: StorageDead(_4)
    SourceInfo(src/seq/mod.rs:67:9-67:10)
  3: StorageDead(_3)
    SourceInfo(src/seq/mod.rs:67:9-67:10)
  4: StorageLive(_7)
    SourceInfo(src/seq/mod.rs:70:13-70:24)
  5: _7 = [const 0_usize; N]
    SourceInfo(src/seq/mod.rs:70:27-70:33)
  6: FakeRead(ForLet(None), _7)
    SourceInfo(src/seq/mod.rs:70:13-70:24)
  7: StorageLive(_8)
    SourceInfo(src/seq/mod.rs:71:9-77:10)
  8: StorageLive(_9)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  9: StorageLive(_10)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  10: StorageLive(_11)
    SourceInfo(src/seq/mod.rs:71:23-71:37)
  11: StorageLive(_12)
    SourceInfo(src/seq/mod.rs:71:24-71:31)
  12: StorageLive(_13)
    SourceInfo(src/seq/mod.rs:71:24-71:27)
  13: _13 = _2
    SourceInfo(src/seq/mod.rs:71:24-71:27)
  14: _14 = SubWithOverflow(_13, const N)
    SourceInfo(src/seq/mod.rs:71:24-71:31)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:24-71:31)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const N) -> [success: bb3, unwind: bb25]
  }
  preds [bb0]
  succs [bb3, bb25]

bb3
  0: _12 = move (_14.0: usize)
    SourceInfo(src/seq/mod.rs:71:24-71:31)
  1: StorageDead(_13)
    SourceInfo(src/seq/mod.rs:71:30-71:31)
  2: StorageLive(_15)
    SourceInfo(src/seq/mod.rs:71:33-71:36)
  3: _15 = _2
    SourceInfo(src/seq/mod.rs:71:33-71:36)
  4: _11 = core::ops::Range::<usize> { start: move _12, end: move _15 }
    SourceInfo(src/seq/mod.rs:71:23-71:37)
  5: StorageDead(_15)
    SourceInfo(src/seq/mod.rs:71:36-71:37)
  6: StorageDead(_12)
    SourceInfo(src/seq/mod.rs:71:36-71:37)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:23-71:49)
      kind: _10 = <core::ops::Range<usize> as core::iter::Iterator>::enumerate(move _11) -> [return: bb4, unwind: bb25]
  }
  preds [bb2]
  succs [bb4, bb25]

bb4
  0: StorageDead(_11)
    SourceInfo(src/seq/mod.rs:71:48-71:49)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:23-71:49)
      kind: _9 = <core::iter::Enumerate<core::ops::Range<usize>> as core::iter::IntoIterator>::into_iter(move _10) -> [return: bb5, unwind: bb25]
  }
  preds [bb3]
  succs [bb5, bb25]

bb5
  0: StorageDead(_10)
    SourceInfo(src/seq/mod.rs:71:48-71:49)
  1: PlaceMention(_9)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  2: StorageLive(_16)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  3: _16 = move _9
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:9-77:10)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:9-77:10)
      kind: falseUnwind -> [real: bb7, unwind: bb25]
  }
  preds [bb5, bb23]
  succs [bb7, bb25]

bb7
  0: StorageLive(_18)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  1: StorageLive(_19)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  2: StorageLive(_20)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  3: StorageLive(_21)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  4: _21 = &mut _16
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  5: _20 = &mut (*_21)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:23-71:49)
      kind: _19 = <core::iter::Enumerate<core::ops::Range<usize>> as core::iter::Iterator>::next(move _20) -> [return: bb8, unwind: bb25]
  }
  preds [bb6]
  succs [bb8, bb25]

bb8
  0: StorageDead(_20)
    SourceInfo(src/seq/mod.rs:71:48-71:49)
  1: PlaceMention(_19)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  2: _22 = discriminant(_19)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:23-71:49)
      kind: switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb9]
  }
  preds [bb7]
  succs [bb9, bb10, bb11]

bb9
  0: FakeRead(ForMatchedPlace(None), _19)
    SourceInfo(src/seq/mod.rs:71:23-71:49)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:23-71:49)
      kind: unreachable
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:9-77:10)
      kind: falseEdge -> [real: bb12, imaginary: bb11]
  }
  preds [bb8]
  succs [bb11, bb12]

bb11
  0: StorageLive(_24)
    SourceInfo(src/seq/mod.rs:71:14-71:15)
  1: _24 = (((_19 as Some).0: (usize, usize)).0: usize)
    SourceInfo(src/seq/mod.rs:71:14-71:15)
  2: StorageLive(_25)
    SourceInfo(src/seq/mod.rs:71:17-71:18)
  3: _25 = (((_19 as Some).0: (usize, usize)).1: usize)
    SourceInfo(src/seq/mod.rs:71:17-71:18)
  4: StorageLive(_26)
    SourceInfo(src/seq/mod.rs:72:17-72:18)
  5: StorageLive(_27)
    SourceInfo(src/seq/mod.rs:72:21-72:24)
  6: _27 = &mut (*_1)
    SourceInfo(src/seq/mod.rs:72:21-72:24)
  7: StorageLive(_28)
    SourceInfo(src/seq/mod.rs:72:38-72:45)
  8: StorageLive(_29)
    SourceInfo(src/seq/mod.rs:72:40-72:45)
  9: StorageLive(_30)
    SourceInfo(src/seq/mod.rs:72:40-72:41)
  10: _30 = _25
    SourceInfo(src/seq/mod.rs:72:40-72:41)
  11: _31 = AddWithOverflow(_30, const 1_usize)
    SourceInfo(src/seq/mod.rs:72:40-72:45)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:72:40-72:45)
      kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> [success: bb13, unwind: bb25]
  }
  preds [bb8, bb10]
  succs [bb13, bb25]

bb12
  0: _8 = const ()
    SourceInfo(src/seq/mod.rs:71:9-77:10)
  1: StorageDead(_21)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  2: StorageDead(_19)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  3: StorageDead(_18)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  4: StorageDead(_16)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  5: StorageDead(_9)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  6: StorageDead(_8)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  7: StorageLive(_53)
    SourceInfo(src/seq/mod.rs:78:14-78:21)
  8: _53 = _7
    SourceInfo(src/seq/mod.rs:78:14-78:21)
  9: _0 = core::option::Option::<[usize; N]>::Some(move _53)
    SourceInfo(src/seq/mod.rs:78:9-78:22)
  10: StorageDead(_53)
    SourceInfo(src/seq/mod.rs:78:21-78:22)
  11: StorageDead(_7)
    SourceInfo(src/seq/mod.rs:79:5-79:6)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:79:6-79:6)
      kind: goto -> bb24
  }
  preds [bb10]
  succs [bb24]

bb13
  0: _29 = move (_31.0: usize)
    SourceInfo(src/seq/mod.rs:72:40-72:45)
  1: StorageDead(_30)
    SourceInfo(src/seq/mod.rs:72:44-72:45)
  2: _28 = core::ops::RangeTo::<usize> { end: move _29 }
    SourceInfo(src/seq/mod.rs:72:38-72:45)
  3: StorageDead(_29)
    SourceInfo(src/seq/mod.rs:72:44-72:45)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:72:21-72:46)
      kind: _26 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _27, move _28) -> [return: bb14, unwind: bb25]
  }
  preds [bb11]
  succs [bb14, bb25]

bb14
  0: StorageDead(_28)
    SourceInfo(src/seq/mod.rs:72:45-72:46)
  1: StorageDead(_27)
    SourceInfo(src/seq/mod.rs:72:45-72:46)
  2: FakeRead(ForLet(None), _26)
    SourceInfo(src/seq/mod.rs:72:17-72:18)
  3: StorageLive(_32)
    SourceInfo(src/seq/mod.rs:73:13-75:14)
  4: StorageLive(_33)
    SourceInfo(src/seq/mod.rs:73:32-73:74)
  5: StorageLive(_34)
    SourceInfo(src/seq/mod.rs:73:32-73:52)
  6: StorageLive(_35)
    SourceInfo(src/seq/mod.rs:73:32-73:52)
  7: StorageLive(_36)
    SourceInfo(src/seq/mod.rs:73:32-73:45)
  8: StorageLive(_37)
    SourceInfo(src/seq/mod.rs:73:39-73:45)
  9: StorageLive(_38)
    SourceInfo(src/seq/mod.rs:73:32-73:39)
  10: _38 = &_7
    SourceInfo(src/seq/mod.rs:73:32-73:39)
  11: StorageLive(_39)
    SourceInfo(src/seq/mod.rs:73:40-73:44)
  12: StorageLive(_40)
    SourceInfo(src/seq/mod.rs:73:43-73:44)
  13: _40 = _24
    SourceInfo(src/seq/mod.rs:73:43-73:44)
  14: _39 = core::ops::Range::<usize> { start: const 0_usize, end: move _40 }
    SourceInfo(src/seq/mod.rs:73:40-73:44)
  15: StorageDead(_40)
    SourceInfo(src/seq/mod.rs:73:43-73:44)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:39-73:45)
      kind: _37 = <[usize; N] as core::ops::Index<core::ops::Range<usize>>>::index(move _38, move _39) -> [return: bb15, unwind: bb25]
  }
  preds [bb13]
  succs [bb15, bb25]

bb15
  0: _36 = &(*_37)
    SourceInfo(src/seq/mod.rs:73:32-73:45)
  1: StorageDead(_39)
    SourceInfo(src/seq/mod.rs:73:44-73:45)
  2: StorageDead(_38)
    SourceInfo(src/seq/mod.rs:73:44-73:45)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:32-73:52)
      kind: _35 = core::slice::<impl [usize]>::iter(move _36) -> [return: bb16, unwind: bb25]
  }
  preds [bb14]
  succs [bb16, bb25]

bb16
  0: _34 = &mut _35
    SourceInfo(src/seq/mod.rs:73:32-73:52)
  1: StorageDead(_36)
    SourceInfo(src/seq/mod.rs:73:51-73:52)
  2: StorageLive(_41)
    SourceInfo(src/seq/mod.rs:73:62-73:73)
  3: StorageLive(_42)
    SourceInfo(src/seq/mod.rs:73:62-73:73)
  4: _42 = &_26
    SourceInfo(src/seq/mod.rs:73:62-73:73)
  5: _41 = {closure@src/seq/mod.rs:73:62: 73:66} { t: move _42 }
    SourceInfo(src/seq/mod.rs:73:62-73:73)
  6: StorageDead(_42)
    SourceInfo(src/seq/mod.rs:73:65-73:66)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:32-73:74)
      kind: _33 = <core::slice::Iter<'_, usize> as core::iter::Iterator>::position::<{closure@src/seq/mod.rs:73:62: 73:66}>(move _34, move _41) -> [return: bb17, unwind: bb25]
  }
  preds [bb15]
  succs [bb17, bb25]

bb17
  0: StorageDead(_41)
    SourceInfo(src/seq/mod.rs:73:73-73:74)
  1: StorageDead(_34)
    SourceInfo(src/seq/mod.rs:73:73-73:74)
  2: PlaceMention(_33)
    SourceInfo(src/seq/mod.rs:73:32-73:74)
  3: _43 = discriminant(_33)
    SourceInfo(src/seq/mod.rs:73:32-73:74)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:20-73:29)
      kind: switchInt(move _43) -> [1: bb18, otherwise: bb21]
  }
  preds [bb16]
  succs [bb18, bb21]

bb18
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:20-73:29)
      kind: falseEdge -> [real: bb19, imaginary: bb21]
  }
  preds [bb17]
  succs [bb19, bb21]

bb19
  0: StorageLive(_44)
    SourceInfo(src/seq/mod.rs:73:25-73:28)
  1: _44 = ((_33 as Some).0: usize)
    SourceInfo(src/seq/mod.rs:73:25-73:28)
  2: StorageLive(_45)
    SourceInfo(src/seq/mod.rs:74:32-74:33)
  3: _45 = _25
    SourceInfo(src/seq/mod.rs:74:32-74:33)
  4: StorageLive(_46)
    SourceInfo(src/seq/mod.rs:74:25-74:28)
  5: _46 = _44
    SourceInfo(src/seq/mod.rs:74:25-74:28)
  6: _47 = Len(_7)
    SourceInfo(src/seq/mod.rs:74:17-74:29)
  7: _48 = Lt(_46, _47)
    SourceInfo(src/seq/mod.rs:74:17-74:29)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:74:17-74:29)
      kind: assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb20, unwind: bb25]
  }
  preds [bb18]
  succs [bb20, bb25]

bb20
  0: _7[_46] = move _45
    SourceInfo(src/seq/mod.rs:74:17-74:33)
  1: StorageDead(_45)
    SourceInfo(src/seq/mod.rs:74:32-74:33)
  2: StorageDead(_46)
    SourceInfo(src/seq/mod.rs:74:33-74:34)
  3: _32 = const ()
    SourceInfo(src/seq/mod.rs:73:75-75:14)
  4: StorageDead(_44)
    SourceInfo(src/seq/mod.rs:75:13-75:14)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:13-75:14)
      kind: goto -> bb22
  }
  preds [bb19]
  succs [bb22]

bb21
  0: _32 = const ()
    SourceInfo(src/seq/mod.rs:75:14-75:14)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:73:13-75:14)
      kind: goto -> bb22
  }
  preds [bb17, bb18]
  succs [bb22]

bb22
  0: StorageDead(_37)
    SourceInfo(src/seq/mod.rs:75:13-75:14)
  1: StorageDead(_35)
    SourceInfo(src/seq/mod.rs:75:13-75:14)
  2: StorageDead(_33)
    SourceInfo(src/seq/mod.rs:75:13-75:14)
  3: StorageDead(_32)
    SourceInfo(src/seq/mod.rs:75:13-75:14)
  4: StorageLive(_49)
    SourceInfo(src/seq/mod.rs:76:26-76:27)
  5: _49 = _26
    SourceInfo(src/seq/mod.rs:76:26-76:27)
  6: StorageLive(_50)
    SourceInfo(src/seq/mod.rs:76:21-76:22)
  7: _50 = _24
    SourceInfo(src/seq/mod.rs:76:21-76:22)
  8: _51 = Len(_7)
    SourceInfo(src/seq/mod.rs:76:13-76:23)
  9: _52 = Lt(_50, _51)
    SourceInfo(src/seq/mod.rs:76:13-76:23)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:76:13-76:23)
      kind: assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> [success: bb23, unwind: bb25]
  }
  preds [bb20, bb21]
  succs [bb23, bb25]

bb23
  0: _7[_50] = move _49
    SourceInfo(src/seq/mod.rs:76:13-76:27)
  1: StorageDead(_49)
    SourceInfo(src/seq/mod.rs:76:26-76:27)
  2: StorageDead(_50)
    SourceInfo(src/seq/mod.rs:76:27-76:28)
  3: _18 = const ()
    SourceInfo(src/seq/mod.rs:71:50-77:10)
  4: StorageDead(_26)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  5: StorageDead(_25)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  6: StorageDead(_24)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  7: StorageDead(_21)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  8: StorageDead(_19)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  9: StorageDead(_18)
    SourceInfo(src/seq/mod.rs:77:9-77:10)
  10: _17 = const ()
    SourceInfo(src/seq/mod.rs:71:9-77:10)
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:71:9-77:10)
      kind: goto -> bb6
  }
  preds [bb22]
  succs [bb6]

bb24
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:79:6-79:6)
      kind: return
  }
  preds [bb1, bb12]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(src/seq/mod.rs:61:5-79:6)
      kind: resume
  }
  preds [bb2, bb3, bb4, bb6, bb7, bb11, bb13, bb14, bb15, bb16, bb19, bb22]
  succs []

