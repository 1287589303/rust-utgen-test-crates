bb0
  0: StorageLive(_2)
    SourceInfo(src/distr/bernoulli.rs:145:12-145:37)
  1: StorageLive(_3)
    SourceInfo(src/distr/bernoulli.rs:145:12-145:22)
  2: _3 = ((*_1).0: u64)
    SourceInfo(src/distr/bernoulli.rs:145:12-145:22)
  3: _2 = Eq(move _3, const distr::bernoulli::ALWAYS_TRUE)
    SourceInfo(src/distr/bernoulli.rs:145:12-145:37)
  Terminator {
      source_info: SourceInfo(src/distr/bernoulli.rs:145:12-145:37)
      kind: switchInt(move _2) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(src/distr/bernoulli.rs:145:36-145:37)
  1: _0 = const 1f64
    SourceInfo(src/distr/bernoulli.rs:146:13-146:16)
  Terminator {
      source_info: SourceInfo(src/distr/bernoulli.rs:145:9-149:10)
      kind: goto -> bb3
  }
  preds [bb0]
  succs [bb3]

bb2
  0: StorageDead(_3)
    SourceInfo(src/distr/bernoulli.rs:145:36-145:37)
  1: StorageLive(_4)
    SourceInfo(src/distr/bernoulli.rs:148:13-148:32)
  2: StorageLive(_5)
    SourceInfo(src/distr/bernoulli.rs:148:14-148:24)
  3: _5 = ((*_1).0: u64)
    SourceInfo(src/distr/bernoulli.rs:148:14-148:24)
  4: _4 = move _5 as f64 (IntToFloat)
    SourceInfo(src/distr/bernoulli.rs:148:13-148:32)
  5: StorageDead(_5)
    SourceInfo(src/distr/bernoulli.rs:148:31-148:32)
  6: _0 = Div(move _4, const distr::bernoulli::SCALE)
    SourceInfo(src/distr/bernoulli.rs:148:13-148:40)
  7: StorageDead(_4)
    SourceInfo(src/distr/bernoulli.rs:148:39-148:40)
  Terminator {
      source_info: SourceInfo(src/distr/bernoulli.rs:145:9-149:10)
      kind: goto -> bb3
  }
  preds [bb0]
  succs [bb3]

bb3
  0: StorageDead(_2)
    SourceInfo(src/distr/bernoulli.rs:149:9-149:10)
  Terminator {
      source_info: SourceInfo(src/distr/bernoulli.rs:150:6-150:6)
      kind: return
  }
  preds [bb1, bb2]
  succs []

