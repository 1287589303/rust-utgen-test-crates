bb0
  0: StorageLive(_5)
    SourceInfo(src/distr/slice.rs:126:13-126:25)
  1: StorageLive(_6)
    SourceInfo(src/distr/slice.rs:126:31-126:53)
  2: StorageLive(_7)
    SourceInfo(src/distr/slice.rs:126:31-126:47)
  3: StorageLive(_8)
    SourceInfo(src/distr/slice.rs:126:31-126:41)
  4: _8 = &(*((*_1).0: &[char]))
    SourceInfo(src/distr/slice.rs:126:31-126:41)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:126:31-126:47)
      kind: _7 = core::slice::<impl [char]>::len(move _8) -> [return: bb1, unwind: bb26]
  }
  preds []
  succs [bb1, bb26]

bb1
  0: StorageDead(_8)
    SourceInfo(src/distr/slice.rs:126:46-126:47)
  1: _6 = Lt(move _7, const 200_usize)
    SourceInfo(src/distr/slice.rs:126:31-126:53)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:126:31-126:53)
      kind: switchInt(move _6) -> [0: bb6, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_7)
    SourceInfo(src/distr/slice.rs:126:52-126:53)
  1: StorageLive(_9)
    SourceInfo(src/distr/slice.rs:127:13-132:19)
  2: StorageLive(_10)
    SourceInfo(src/distr/slice.rs:127:13-128:24)
  3: StorageLive(_11)
    SourceInfo(src/distr/slice.rs:127:13-128:24)
  4: StorageLive(_12)
    SourceInfo(src/distr/slice.rs:127:13-127:23)
  5: _12 = &(*((*_1).0: &[char]))
    SourceInfo(src/distr/slice.rs:127:13-127:23)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:127:13-128:24)
      kind: _11 = core::slice::<impl [char]>::iter(move _12) -> [return: bb3, unwind: bb26]
  }
  preds [bb1]
  succs [bb3, bb26]

bb3
  0: _10 = &mut _11
    SourceInfo(src/distr/slice.rs:127:13-128:24)
  1: StorageDead(_12)
    SourceInfo(src/distr/slice.rs:128:23-128:24)
  2: StorageLive(_13)
    SourceInfo(src/distr/slice.rs:129:30-132:18)
  3: _13 = {closure@src/distr/slice.rs:129:30: 129:45}
    SourceInfo(src/distr/slice.rs:129:30-132:18)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:127:13-132:19)
      kind: _9 = <core::slice::Iter<'_, char> as core::iter::Iterator>::try_fold::<usize, {closure@src/distr/slice.rs:129:30: 129:45}, core::option::Option<usize>>(move _10, const 1_usize, move _13) -> [return: bb4, unwind: bb26]
  }
  preds [bb2]
  succs [bb4, bb26]

bb4
  0: StorageDead(_13)
    SourceInfo(src/distr/slice.rs:132:18-132:19)
  1: StorageDead(_10)
    SourceInfo(src/distr/slice.rs:132:18-132:19)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:127:13-133:30)
      kind: _5 = core::option::Option::<usize>::unwrap_or(move _9, const 4_usize) -> [return: bb5, unwind: bb26]
  }
  preds [bb3]
  succs [bb5, bb26]

bb5
  0: StorageDead(_9)
    SourceInfo(src/distr/slice.rs:133:29-133:30)
  1: StorageDead(_11)
    SourceInfo(src/distr/slice.rs:134:9-134:10)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:126:28-136:10)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_7)
    SourceInfo(src/distr/slice.rs:126:52-126:53)
  1: _5 = const 4_usize
    SourceInfo(src/distr/slice.rs:135:13-135:14)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:126:28-136:10)
      kind: goto -> bb7
  }
  preds [bb1]
  succs [bb7]

bb7
  0: StorageDead(_6)
    SourceInfo(src/distr/slice.rs:136:9-136:10)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(src/distr/slice.rs:126:13-126:25)
  2: StorageLive(_14)
    SourceInfo(src/distr/slice.rs:140:13-140:27)
  3: StorageLive(_15)
    SourceInfo(src/distr/slice.rs:140:33-140:50)
  4: StorageLive(_16)
    SourceInfo(src/distr/slice.rs:140:33-140:45)
  5: _16 = _5
    SourceInfo(src/distr/slice.rs:140:33-140:45)
  6: _15 = Eq(move _16, const 1_usize)
    SourceInfo(src/distr/slice.rs:140:33-140:50)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:33-140:50)
      kind: switchInt(move _15) -> [0: bb9, otherwise: bb8]
  }
  preds [bb5, bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_16)
    SourceInfo(src/distr/slice.rs:140:49-140:50)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:64-142:10)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb9
  0: StorageDead(_16)
    SourceInfo(src/distr/slice.rs:140:49-140:50)
  1: StorageLive(_17)
    SourceInfo(src/distr/slice.rs:140:54-140:63)
  2: StorageLive(_18)
    SourceInfo(src/distr/slice.rs:140:54-140:57)
  3: _18 = _4
    SourceInfo(src/distr/slice.rs:140:54-140:57)
  4: _17 = Lt(move _18, const 100_usize)
    SourceInfo(src/distr/slice.rs:140:54-140:63)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:54-140:63)
      kind: switchInt(move _17) -> [0: bb12, otherwise: bb10]
  }
  preds [bb7]
  succs [bb10, bb12]

bb10
  0: StorageDead(_18)
    SourceInfo(src/distr/slice.rs:140:62-140:63)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:64-142:10)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  0: _14 = _4
    SourceInfo(src/distr/slice.rs:141:13-141:16)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:30-144:10)
      kind: goto -> bb14
  }
  preds [bb8, bb10]
  succs [bb14]

bb12
  0: StorageDead(_18)
    SourceInfo(src/distr/slice.rs:140:62-140:63)
  1: StorageLive(_19)
    SourceInfo(src/distr/slice.rs:143:13-143:16)
  2: _19 = _4
    SourceInfo(src/distr/slice.rs:143:13-143:16)
  3: _20 = Eq(const 4_usize, const 0_usize)
    SourceInfo(src/distr/slice.rs:143:13-143:20)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:143:13-143:20)
      kind: assert(!move _20, "attempt to divide `{}` by zero", _19) -> [success: bb13, unwind: bb26]
  }
  preds [bb9]
  succs [bb13, bb26]

bb13
  0: _14 = Div(move _19, const 4_usize)
    SourceInfo(src/distr/slice.rs:143:13-143:20)
  1: StorageDead(_19)
    SourceInfo(src/distr/slice.rs:143:19-143:20)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:140:30-144:10)
      kind: goto -> bb14
  }
  preds [bb12]
  succs [bb14]

bb14
  0: StorageDead(_17)
    SourceInfo(src/distr/slice.rs:144:9-144:10)
  1: StorageDead(_15)
    SourceInfo(src/distr/slice.rs:144:9-144:10)
  2: FakeRead(ForLet(None), _14)
    SourceInfo(src/distr/slice.rs:140:13-140:27)
  3: StorageLive(_21)
    SourceInfo(src/distr/slice.rs:145:13-145:27)
  4: _21 = _4
    SourceInfo(src/distr/slice.rs:145:30-145:33)
  5: FakeRead(ForLet(None), _21)
    SourceInfo(src/distr/slice.rs:145:13-145:27)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:146:9-151:10)
      kind: goto -> bb15
  }
  preds [bb11, bb13]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:146:9-151:10)
      kind: falseUnwind -> [real: bb16, unwind: bb26]
  }
  preds [bb14, bb24]
  succs [bb16, bb26]

bb16
  0: StorageLive(_23)
    SourceInfo(src/distr/slice.rs:146:15-146:29)
  1: StorageLive(_24)
    SourceInfo(src/distr/slice.rs:146:15-146:25)
  2: _24 = _14
    SourceInfo(src/distr/slice.rs:146:15-146:25)
  3: _23 = Gt(move _24, const 0_usize)
    SourceInfo(src/distr/slice.rs:146:15-146:29)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:146:15-146:29)
      kind: switchInt(move _23) -> [0: bb25, otherwise: bb17]
  }
  preds [bb15]
  succs [bb17, bb25]

bb17
  0: StorageDead(_24)
    SourceInfo(src/distr/slice.rs:146:28-146:29)
  1: StorageLive(_25)
    SourceInfo(src/distr/slice.rs:147:13-147:54)
  2: StorageLive(_26)
    SourceInfo(src/distr/slice.rs:147:13-147:19)
  3: _26 = &mut (*_3)
    SourceInfo(src/distr/slice.rs:147:13-147:19)
  4: StorageLive(_27)
    SourceInfo(src/distr/slice.rs:147:28-147:53)
  5: StorageLive(_28)
    SourceInfo(src/distr/slice.rs:147:28-147:40)
  6: _28 = _5
    SourceInfo(src/distr/slice.rs:147:28-147:40)
  7: StorageLive(_29)
    SourceInfo(src/distr/slice.rs:147:43-147:53)
  8: _29 = _14
    SourceInfo(src/distr/slice.rs:147:43-147:53)
  9: _30 = MulWithOverflow(_28, _29)
    SourceInfo(src/distr/slice.rs:147:28-147:53)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:147:28-147:53)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", move _28, move _29) -> [success: bb18, unwind: bb26]
  }
  preds [bb16]
  succs [bb18, bb26]

bb18
  0: _27 = move (_30.0: usize)
    SourceInfo(src/distr/slice.rs:147:28-147:53)
  1: StorageDead(_29)
    SourceInfo(src/distr/slice.rs:147:52-147:53)
  2: StorageDead(_28)
    SourceInfo(src/distr/slice.rs:147:52-147:53)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:147:13-147:54)
      kind: _25 = alloc::string::String::reserve(move _26, move _27) -> [return: bb19, unwind: bb26]
  }
  preds [bb17]
  succs [bb19, bb26]

bb19
  0: StorageDead(_27)
    SourceInfo(src/distr/slice.rs:147:53-147:54)
  1: StorageDead(_26)
    SourceInfo(src/distr/slice.rs:147:53-147:54)
  2: StorageDead(_25)
    SourceInfo(src/distr/slice.rs:147:54-147:55)
  3: StorageLive(_31)
    SourceInfo(src/distr/slice.rs:148:13-148:72)
  4: StorageLive(_32)
    SourceInfo(src/distr/slice.rs:148:13-148:19)
  5: _32 = &mut (*_3)
    SourceInfo(src/distr/slice.rs:148:13-148:19)
  6: StorageLive(_33)
    SourceInfo(src/distr/slice.rs:148:27-148:71)
  7: StorageLive(_34)
    SourceInfo(src/distr/slice.rs:148:27-148:54)
  8: StorageLive(_35)
    SourceInfo(src/distr/slice.rs:148:27-148:31)
  9: _35 = &(*_1)
    SourceInfo(src/distr/slice.rs:148:27-148:31)
  10: StorageLive(_36)
    SourceInfo(src/distr/slice.rs:148:44-148:53)
  11: _36 = &mut (*_2)
    SourceInfo(src/distr/slice.rs:148:44-148:53)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:148:27-148:54)
      kind: _34 = <&distr::slice::Choose<'_, char> as distr::distribution::Distribution<&char>>::sample_iter::<&mut R>(move _35, move _36) -> [return: bb20, unwind: bb26]
  }
  preds [bb18]
  succs [bb20, bb26]

bb20
  0: StorageDead(_36)
    SourceInfo(src/distr/slice.rs:148:53-148:54)
  1: StorageDead(_35)
    SourceInfo(src/distr/slice.rs:148:53-148:54)
  2: StorageLive(_37)
    SourceInfo(src/distr/slice.rs:148:60-148:70)
  3: _37 = _14
    SourceInfo(src/distr/slice.rs:148:60-148:70)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:148:27-148:71)
      kind: _33 = <distr::distribution::Iter<&distr::slice::Choose<'_, char>, &mut R, &char> as core::iter::Iterator>::take(move _34, move _37) -> [return: bb21, unwind: bb26]
  }
  preds [bb19]
  succs [bb21, bb26]

bb21
  0: StorageDead(_37)
    SourceInfo(src/distr/slice.rs:148:70-148:71)
  1: StorageDead(_34)
    SourceInfo(src/distr/slice.rs:148:70-148:71)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:148:13-148:72)
      kind: _31 = <alloc::string::String as core::iter::Extend<&char>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::slice::Choose<'_, char>, &mut R, &char>>>(move _32, move _33) -> [return: bb22, unwind: bb26]
  }
  preds [bb20]
  succs [bb22, bb26]

bb22
  0: StorageDead(_33)
    SourceInfo(src/distr/slice.rs:148:71-148:72)
  1: StorageDead(_32)
    SourceInfo(src/distr/slice.rs:148:71-148:72)
  2: StorageDead(_31)
    SourceInfo(src/distr/slice.rs:148:72-148:73)
  3: StorageLive(_38)
    SourceInfo(src/distr/slice.rs:149:27-149:37)
  4: _38 = _14
    SourceInfo(src/distr/slice.rs:149:27-149:37)
  5: _39 = SubWithOverflow(_21, _38)
    SourceInfo(src/distr/slice.rs:149:13-149:37)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:149:13-149:37)
      kind: assert(!move (_39.1: bool), "attempt to compute `{} - {}`, which would overflow", _21, move _38) -> [success: bb23, unwind: bb26]
  }
  preds [bb21]
  succs [bb23, bb26]

bb23
  0: _21 = move (_39.0: usize)
    SourceInfo(src/distr/slice.rs:149:13-149:37)
  1: StorageDead(_38)
    SourceInfo(src/distr/slice.rs:149:36-149:37)
  2: StorageLive(_40)
    SourceInfo(src/distr/slice.rs:150:26-150:52)
  3: StorageLive(_41)
    SourceInfo(src/distr/slice.rs:150:26-150:36)
  4: _41 = _14
    SourceInfo(src/distr/slice.rs:150:26-150:36)
  5: StorageLive(_42)
    SourceInfo(src/distr/slice.rs:150:41-150:51)
  6: _42 = _21
    SourceInfo(src/distr/slice.rs:150:41-150:51)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:150:26-150:52)
      kind: _40 = <usize as core::cmp::Ord>::min(move _41, move _42) -> [return: bb24, unwind: bb26]
  }
  preds [bb22]
  succs [bb24, bb26]

bb24
  0: StorageDead(_42)
    SourceInfo(src/distr/slice.rs:150:51-150:52)
  1: StorageDead(_41)
    SourceInfo(src/distr/slice.rs:150:51-150:52)
  2: _14 = move _40
    SourceInfo(src/distr/slice.rs:150:13-150:52)
  3: StorageDead(_40)
    SourceInfo(src/distr/slice.rs:150:51-150:52)
  4: _22 = const ()
    SourceInfo(src/distr/slice.rs:146:30-151:10)
  5: StorageDead(_23)
    SourceInfo(src/distr/slice.rs:151:9-151:10)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:146:9-151:10)
      kind: goto -> bb15
  }
  preds [bb23]
  succs [bb15]

bb25
  0: StorageDead(_24)
    SourceInfo(src/distr/slice.rs:146:28-146:29)
  1: StorageLive(_44)
    SourceInfo(src/distr/slice.rs:146:9-151:10)
  2: _0 = const ()
    SourceInfo(src/distr/slice.rs:146:9-151:10)
  3: StorageDead(_44)
    SourceInfo(src/distr/slice.rs:151:9-151:10)
  4: StorageDead(_23)
    SourceInfo(src/distr/slice.rs:151:9-151:10)
  5: StorageDead(_21)
    SourceInfo(src/distr/slice.rs:152:5-152:6)
  6: StorageDead(_14)
    SourceInfo(src/distr/slice.rs:152:5-152:6)
  7: StorageDead(_5)
    SourceInfo(src/distr/slice.rs:152:5-152:6)
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:152:6-152:6)
      kind: return
  }
  preds [bb16]
  succs []

bb26
  Terminator {
      source_info: SourceInfo(src/distr/slice.rs:123:5-152:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb4, bb12, bb15, bb17, bb18, bb19, bb20, bb21, bb22, bb23]
  succs []

