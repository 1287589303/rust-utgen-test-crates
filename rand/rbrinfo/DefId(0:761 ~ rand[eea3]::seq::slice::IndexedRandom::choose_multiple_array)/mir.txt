bb0
  0: StorageLive(_3)
    SourceInfo(src/seq/slice.rs:124:13-124:20)
  1: StorageLive(_4)
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  2: StorageLive(_5)
    SourceInfo(src/seq/slice.rs:124:23-124:59)
  3: StorageLive(_6)
    SourceInfo(src/seq/slice.rs:124:43-124:46)
  4: _6 = &mut (*_2)
    SourceInfo(src/seq/slice.rs:124:43-124:46)
  5: StorageLive(_7)
    SourceInfo(src/seq/slice.rs:124:48-124:58)
  6: StorageLive(_8)
    SourceInfo(src/seq/slice.rs:124:48-124:52)
  7: _8 = &(*_1)
    SourceInfo(src/seq/slice.rs:124:48-124:52)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:48-124:58)
      kind: _7 = <Self as seq::slice::IndexedRandom>::len(move _8) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_8)
    SourceInfo(src/seq/slice.rs:124:57-124:58)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:23-124:59)
      kind: _5 = seq::index::sample_array::<R, N>(move _6, move _7) -> [return: bb2, unwind: bb12]
  }
  preds [bb0]
  succs [bb2, bb12]

bb2
  0: StorageDead(_7)
    SourceInfo(src/seq/slice.rs:124:58-124:59)
  1: StorageDead(_6)
    SourceInfo(src/seq/slice.rs:124:58-124:59)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:23-124:60)
      kind: _4 = <core::option::Option<[usize; N]> as core::ops::Try>::branch(move _5) -> [return: bb3, unwind: bb12]
  }
  preds [bb1]
  succs [bb3, bb12]

bb3
  0: StorageDead(_5)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  1: PlaceMention(_4)
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  2: _9 = discriminant(_4)
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:23-124:60)
      kind: switchInt(move _9) -> [0: bb6, 1: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5, bb6]

bb4
  0: FakeRead(ForMatchedPlace(None), _4)
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:23-124:60)
      kind: unreachable
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:59-124:60)
      kind: falseEdge -> [real: bb7, imaginary: bb6]
  }
  preds [bb3]
  succs [bb6, bb7]

bb6
  0: StorageLive(_13)
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  1: _13 = ((_4 as Continue).0: [usize; N])
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  2: _3 = _13
    SourceInfo(src/seq/slice.rs:124:23-124:60)
  3: StorageDead(_13)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(src/seq/slice.rs:124:13-124:20)
  5: StorageDead(_4)
    SourceInfo(src/seq/slice.rs:124:60-124:61)
  6: StorageLive(_14)
    SourceInfo(src/seq/slice.rs:125:14-125:54)
  7: StorageLive(_15)
    SourceInfo(src/seq/slice.rs:125:14-125:21)
  8: _15 = _3
    SourceInfo(src/seq/slice.rs:125:14-125:21)
  9: StorageLive(_16)
    SourceInfo(src/seq/slice.rs:125:26-125:53)
  10: StorageLive(_17)
    SourceInfo(src/seq/slice.rs:125:26-125:53)
  11: _17 = &(*_1)
    SourceInfo(src/seq/slice.rs:125:26-125:53)
  12: _16 = {closure@src/seq/slice.rs:125:26: 125:33} { self: move _17 }
    SourceInfo(src/seq/slice.rs:125:26-125:53)
  13: StorageDead(_17)
    SourceInfo(src/seq/slice.rs:125:32-125:33)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:125:14-125:54)
      kind: _14 = core::array::<impl [usize; N]>::map::<{closure@src/seq/slice.rs:125:26: 125:33}, <Self as core::ops::Index<usize>>::Output>(move _15, move _16) -> [return: bb9, unwind: bb12]
  }
  preds [bb3, bb5]
  succs [bb9, bb12]

bb7
  0: StorageLive(_10)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  1: _10 = ((_4 as Break).0: core::option::Option<core::convert::Infallible>)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  2: StorageLive(_12)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  3: _12 = _10
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:124:23-124:60)
      kind: _0 = <core::option::Option<[<Self as core::ops::Index<usize>>::Output; N]> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _12) -> [return: bb8, unwind: bb12]
  }
  preds [bb5]
  succs [bb8, bb12]

bb8
  0: StorageDead(_12)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  1: StorageDead(_10)
    SourceInfo(src/seq/slice.rs:124:59-124:60)
  2: StorageDead(_4)
    SourceInfo(src/seq/slice.rs:124:60-124:61)
  3: StorageDead(_3)
    SourceInfo(src/seq/slice.rs:126:5-126:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:126:6-126:6)
      kind: goto -> bb11
  }
  preds [bb7]
  succs [bb11]

bb9
  0: StorageDead(_16)
    SourceInfo(src/seq/slice.rs:125:53-125:54)
  1: StorageDead(_15)
    SourceInfo(src/seq/slice.rs:125:53-125:54)
  2: _0 = core::option::Option::<[<Self as core::ops::Index<usize>>::Output; N]>::Some(move _14)
    SourceInfo(src/seq/slice.rs:125:9-125:55)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:125:54-125:55)
      kind: drop(_14) -> [return: bb10, unwind: bb12]
  }
  preds [bb6]
  succs [bb10, bb12]

bb10
  0: StorageDead(_14)
    SourceInfo(src/seq/slice.rs:125:54-125:55)
  1: StorageDead(_3)
    SourceInfo(src/seq/slice.rs:126:5-126:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:126:6-126:6)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:126:6-126:6)
      kind: return
  }
  preds [bb8, bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:119:5-126:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb6, bb7, bb9]
  succs []

