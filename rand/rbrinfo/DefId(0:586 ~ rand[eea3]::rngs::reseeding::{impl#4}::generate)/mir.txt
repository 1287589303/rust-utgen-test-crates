bb0
  0: StorageLive(_3)
    SourceInfo(src/rngs/reseeding.rs:163:9-168:10)
  1: StorageLive(_4)
    SourceInfo(src/rngs/reseeding.rs:163:12-163:40)
  2: StorageLive(_5)
    SourceInfo(src/rngs/reseeding.rs:163:12-163:35)
  3: _5 = ((*_1).3: i64)
    SourceInfo(src/rngs/reseeding.rs:163:12-163:35)
  4: _4 = Le(move _5, const 0_i64)
    SourceInfo(src/rngs/reseeding.rs:163:12-163:40)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:163:12-163:40)
      kind: switchInt(move _4) -> [0: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_5)
    SourceInfo(src/rngs/reseeding.rs:163:39-163:40)
  1: StorageLive(_7)
    SourceInfo(src/rngs/reseeding.rs:167:20-167:24)
  2: _7 = &mut (*_1)
    SourceInfo(src/rngs/reseeding.rs:167:20-167:24)
  3: StorageLive(_8)
    SourceInfo(src/rngs/reseeding.rs:167:45-167:52)
  4: _8 = &mut (*_2)
    SourceInfo(src/rngs/reseeding.rs:167:45-167:52)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:167:20-167:53)
      kind: _0 = rngs::reseeding::ReseedingCore::<R, Rsdr>::reseed_and_generate(move _7, move _8) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_8)
    SourceInfo(src/rngs/reseeding.rs:167:52-167:53)
  1: StorageDead(_7)
    SourceInfo(src/rngs/reseeding.rs:167:52-167:53)
  2: StorageDead(_4)
    SourceInfo(src/rngs/reseeding.rs:168:9-168:10)
  3: StorageDead(_3)
    SourceInfo(src/rngs/reseeding.rs:168:9-168:10)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:172:6-172:6)
      kind: goto -> bb8
  }
  preds [bb1]
  succs [bb8]

bb3
  0: StorageDead(_5)
    SourceInfo(src/rngs/reseeding.rs:163:39-163:40)
  1: _3 = const ()
    SourceInfo(src/rngs/reseeding.rs:168:10-168:10)
  2: StorageDead(_4)
    SourceInfo(src/rngs/reseeding.rs:168:9-168:10)
  3: StorageDead(_3)
    SourceInfo(src/rngs/reseeding.rs:168:9-168:10)
  4: StorageLive(_9)
    SourceInfo(src/rngs/reseeding.rs:169:13-169:22)
  5: StorageLive(_10)
    SourceInfo(src/rngs/reseeding.rs:169:37-169:53)
  6: StorageLive(_11)
    SourceInfo(src/rngs/reseeding.rs:169:37-169:53)
  7: StorageLive(_12)
    SourceInfo(src/rngs/reseeding.rs:169:37-169:44)
  8: _12 = &_2
    SourceInfo(src/rngs/reseeding.rs:169:37-169:44)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:169:37-169:53)
      kind: _11 = <&mut <R as rand_core::block::BlockRngCore>::Results as core::convert::AsRef<[<R as rand_core::block::BlockRngCore>::Item]>>::as_ref(move _12) -> [return: bb4, unwind: bb9]
  }
  preds [bb0]
  succs [bb4, bb9]

bb4
  0: _10 = &(*_11)
    SourceInfo(src/rngs/reseeding.rs:169:37-169:53)
  1: StorageDead(_12)
    SourceInfo(src/rngs/reseeding.rs:169:52-169:53)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:169:25-169:54)
      kind: _9 = core::mem::size_of_val::<[<R as rand_core::block::BlockRngCore>::Item]>(move _10) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: StorageDead(_10)
    SourceInfo(src/rngs/reseeding.rs:169:53-169:54)
  1: FakeRead(ForLet(None), _9)
    SourceInfo(src/rngs/reseeding.rs:169:13-169:22)
  2: StorageDead(_11)
    SourceInfo(src/rngs/reseeding.rs:169:54-169:55)
  3: StorageLive(_13)
    SourceInfo(src/rngs/reseeding.rs:170:36-170:52)
  4: StorageLive(_14)
    SourceInfo(src/rngs/reseeding.rs:170:36-170:45)
  5: _14 = _9
    SourceInfo(src/rngs/reseeding.rs:170:36-170:45)
  6: _13 = move _14 as i64 (IntToInt)
    SourceInfo(src/rngs/reseeding.rs:170:36-170:52)
  7: StorageDead(_14)
    SourceInfo(src/rngs/reseeding.rs:170:51-170:52)
  8: _15 = SubWithOverflow(((*_1).3: i64), _13)
    SourceInfo(src/rngs/reseeding.rs:170:9-170:52)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:170:9-170:52)
      kind: assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).3: i64), move _13) -> [success: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: ((*_1).3: i64) = move (_15.0: i64)
    SourceInfo(src/rngs/reseeding.rs:170:9-170:52)
  1: StorageDead(_13)
    SourceInfo(src/rngs/reseeding.rs:170:51-170:52)
  2: StorageLive(_16)
    SourceInfo(src/rngs/reseeding.rs:171:9-171:37)
  3: StorageLive(_17)
    SourceInfo(src/rngs/reseeding.rs:171:9-171:19)
  4: _17 = &mut ((*_1).0: R)
    SourceInfo(src/rngs/reseeding.rs:171:9-171:19)
  5: StorageLive(_18)
    SourceInfo(src/rngs/reseeding.rs:171:29-171:36)
  6: _18 = &mut (*_2)
    SourceInfo(src/rngs/reseeding.rs:171:29-171:36)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:171:9-171:37)
      kind: _16 = <R as rand_core::block::BlockRngCore>::generate(move _17, move _18) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_18)
    SourceInfo(src/rngs/reseeding.rs:171:36-171:37)
  1: StorageDead(_17)
    SourceInfo(src/rngs/reseeding.rs:171:36-171:37)
  2: StorageDead(_16)
    SourceInfo(src/rngs/reseeding.rs:171:37-171:38)
  3: _0 = const ()
    SourceInfo(src/rngs/reseeding.rs:162:57-172:6)
  4: StorageDead(_9)
    SourceInfo(src/rngs/reseeding.rs:172:5-172:6)
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:172:6-172:6)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:172:6-172:6)
      kind: return
  }
  preds [bb2, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/rngs/reseeding.rs:162:5-172:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb6]
  succs []

