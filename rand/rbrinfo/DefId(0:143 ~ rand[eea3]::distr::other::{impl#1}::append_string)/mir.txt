bb0
  0: StorageLive(_5)
    SourceInfo(src/distr/other.rs:131:9-131:27)
  1: StorageLive(_6)
    SourceInfo(src/distr/other.rs:131:9-131:10)
  2: _6 = &mut (*_3)
    SourceInfo(src/distr/other.rs:131:9-131:10)
  3: StorageLive(_7)
    SourceInfo(src/distr/other.rs:131:19-131:26)
  4: StorageLive(_8)
    SourceInfo(src/distr/other.rs:131:23-131:26)
  5: _8 = _4
    SourceInfo(src/distr/other.rs:131:23-131:26)
  6: _9 = MulWithOverflow(const 4_usize, _8)
    SourceInfo(src/distr/other.rs:131:19-131:26)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:131:19-131:26)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, move _8) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _7 = move (_9.0: usize)
    SourceInfo(src/distr/other.rs:131:19-131:26)
  1: StorageDead(_8)
    SourceInfo(src/distr/other.rs:131:25-131:26)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:131:9-131:27)
      kind: _5 = alloc::string::String::reserve(move _6, move _7) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_7)
    SourceInfo(src/distr/other.rs:131:26-131:27)
  1: StorageDead(_6)
    SourceInfo(src/distr/other.rs:131:26-131:27)
  2: StorageDead(_5)
    SourceInfo(src/distr/other.rs:131:27-131:28)
  3: StorageLive(_10)
    SourceInfo(src/distr/other.rs:132:9-132:73)
  4: StorageLive(_11)
    SourceInfo(src/distr/other.rs:132:9-132:10)
  5: _11 = &mut (*_3)
    SourceInfo(src/distr/other.rs:132:9-132:10)
  6: StorageLive(_12)
    SourceInfo(src/distr/other.rs:132:18-132:72)
  7: StorageLive(_13)
    SourceInfo(src/distr/other.rs:132:18-132:62)
  8: StorageLive(_14)
    SourceInfo(src/distr/other.rs:132:52-132:56)
  9: _14 = _1
    SourceInfo(src/distr/other.rs:132:52-132:56)
  10: StorageLive(_15)
    SourceInfo(src/distr/other.rs:132:58-132:61)
  11: _15 = move _2
    SourceInfo(src/distr/other.rs:132:58-132:61)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:132:18-132:62)
      kind: _13 = <&distr::StandardUniform as distr::distribution::Distribution<char>>::sample_iter::<&mut R>(move _14, move _15) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_15)
    SourceInfo(src/distr/other.rs:132:61-132:62)
  1: StorageDead(_14)
    SourceInfo(src/distr/other.rs:132:61-132:62)
  2: StorageLive(_16)
    SourceInfo(src/distr/other.rs:132:68-132:71)
  3: _16 = _4
    SourceInfo(src/distr/other.rs:132:68-132:71)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:132:18-132:72)
      kind: _12 = <distr::distribution::Iter<&distr::StandardUniform, &mut R, char> as core::iter::Iterator>::take(move _13, move _16) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_16)
    SourceInfo(src/distr/other.rs:132:71-132:72)
  1: StorageDead(_13)
    SourceInfo(src/distr/other.rs:132:71-132:72)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:132:9-132:73)
      kind: _10 = <alloc::string::String as core::iter::Extend<char>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::StandardUniform, &mut R, char>>>(move _11, move _12) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_12)
    SourceInfo(src/distr/other.rs:132:72-132:73)
  1: StorageDead(_11)
    SourceInfo(src/distr/other.rs:132:72-132:73)
  2: StorageDead(_10)
    SourceInfo(src/distr/other.rs:132:73-132:74)
  3: _0 = const ()
    SourceInfo(src/distr/other.rs:127:87-133:6)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:133:6-133:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:127:5-133:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

