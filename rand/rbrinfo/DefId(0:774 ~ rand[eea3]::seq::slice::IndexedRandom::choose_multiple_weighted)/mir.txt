bb0
  0: StorageLive(_5)
    SourceInfo(src/seq/slice.rs:227:13-227:19)
  1: StorageLive(_6)
    SourceInfo(src/seq/slice.rs:227:37-227:43)
  2: _6 = _3
    SourceInfo(src/seq/slice.rs:227:37-227:43)
  3: StorageLive(_7)
    SourceInfo(src/seq/slice.rs:227:45-227:55)
  4: StorageLive(_8)
    SourceInfo(src/seq/slice.rs:227:45-227:49)
  5: _8 = &(*_1)
    SourceInfo(src/seq/slice.rs:227:45-227:49)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:227:45-227:55)
      kind: _7 = <Self as seq::slice::IndexedRandom>::len(move _8) -> [return: bb1, unwind: bb23]
  }
  preds []
  succs [bb1, bb23]

bb1
  0: StorageDead(_8)
    SourceInfo(src/seq/slice.rs:227:54-227:55)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:227:22-227:56)
      kind: _5 = core::cmp::min::<usize>(move _6, move _7) -> [return: bb2, unwind: bb23]
  }
  preds [bb0]
  succs [bb2, bb23]

bb2
  0: StorageDead(_7)
    SourceInfo(src/seq/slice.rs:227:55-227:56)
  1: StorageDead(_6)
    SourceInfo(src/seq/slice.rs:227:55-227:56)
  2: FakeRead(ForLet(None), _5)
    SourceInfo(src/seq/slice.rs:227:13-227:19)
  3: StorageLive(_9)
    SourceInfo(src/seq/slice.rs:228:12-238:10)
  4: StorageLive(_10)
    SourceInfo(src/seq/slice.rs:229:20-229:24)
  5: _10 = &(*_1)
    SourceInfo(src/seq/slice.rs:229:20-229:24)
  6: StorageLive(_11)
    SourceInfo(src/seq/slice.rs:230:23-230:41)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:230:23-230:41)
      kind: _11 = <core::marker::PhantomData<<Self as core::ops::Index<usize>>::Output> as core::default::Default>::default() -> [return: bb3, unwind: bb23]
  }
  preds [bb1]
  succs [bb3, bb23]

bb3
  0: StorageLive(_12)
    SourceInfo(src/seq/slice.rs:231:22-237:25)
  1: StorageLive(_13)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  2: StorageLive(_14)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  3: StorageLive(_15)
    SourceInfo(src/seq/slice.rs:231:22-236:14)
  4: StorageLive(_16)
    SourceInfo(src/seq/slice.rs:232:17-232:20)
  5: _16 = &mut (*_2)
    SourceInfo(src/seq/slice.rs:232:17-232:20)
  6: StorageLive(_17)
    SourceInfo(src/seq/slice.rs:233:17-233:27)
  7: StorageLive(_18)
    SourceInfo(src/seq/slice.rs:233:17-233:21)
  8: _18 = &(*_1)
    SourceInfo(src/seq/slice.rs:233:17-233:21)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:233:17-233:27)
      kind: _17 = <Self as seq::slice::IndexedRandom>::len(move _18) -> [return: bb4, unwind: bb23]
  }
  preds [bb2]
  succs [bb4, bb23]

bb4
  0: StorageDead(_18)
    SourceInfo(src/seq/slice.rs:233:26-233:27)
  1: StorageLive(_19)
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  2: StorageLive(_20)
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  3: _20 = &_4
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  4: StorageLive(_21)
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  5: _21 = &(*_1)
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  6: _19 = {closure@src/seq/slice.rs:234:17: 234:22} { weight: move _20, self: move _21 }
    SourceInfo(src/seq/slice.rs:234:17-234:48)
  7: StorageDead(_21)
    SourceInfo(src/seq/slice.rs:234:21-234:22)
  8: StorageDead(_20)
    SourceInfo(src/seq/slice.rs:234:21-234:22)
  9: StorageLive(_22)
    SourceInfo(src/seq/slice.rs:235:17-235:23)
  10: _22 = _5
    SourceInfo(src/seq/slice.rs:235:17-235:23)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-236:14)
      kind: _15 = seq::index_::sample_weighted::<R, {closure@src/seq/slice.rs:234:17: 234:22}, f64>(move _16, move _17, move _19, move _22) -> [return: bb5, unwind: bb23]
  }
  preds [bb3]
  succs [bb5, bb23]

bb5
  0: StorageDead(_22)
    SourceInfo(src/seq/slice.rs:236:13-236:14)
  1: StorageDead(_19)
    SourceInfo(src/seq/slice.rs:236:13-236:14)
  2: StorageDead(_17)
    SourceInfo(src/seq/slice.rs:236:13-236:14)
  3: StorageDead(_16)
    SourceInfo(src/seq/slice.rs:236:13-236:14)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-236:15)
      kind: _14 = <core::result::Result<seq::index_::IndexVec, distr::weighted::Error> as core::ops::Try>::branch(move _15) -> [return: bb6, unwind: bb22]
  }
  preds [bb4]
  succs [bb6, bb22]

bb6
  0: StorageDead(_15)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  1: PlaceMention(_14)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  2: _23 = discriminant(_14)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-236:15)
      kind: switchInt(move _23) -> [0: bb9, 1: bb8, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb8, bb9]

bb7
  0: FakeRead(ForMatchedPlace(None), _14)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-236:15)
      kind: unreachable
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:236:14-236:15)
      kind: falseEdge -> [real: bb10, imaginary: bb9]
  }
  preds [bb6]
  succs [bb9, bb10]

bb9
  0: StorageLive(_27)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  1: _27 = move ((_14 as Continue).0: seq::index_::IndexVec)
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  2: _13 = move _27
    SourceInfo(src/seq/slice.rs:231:22-236:15)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:236:14-236:15)
      kind: drop(_27) -> [return: bb12, unwind: bb21]
  }
  preds [bb6, bb8]
  succs [bb12, bb21]

bb10
  0: StorageLive(_24)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  1: _24 = ((_14 as Break).0: core::result::Result<core::convert::Infallible, distr::weighted::Error>)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  2: StorageLive(_26)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  3: _26 = _24
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-236:15)
      kind: _0 = <core::result::Result<seq::slice::SliceChooseIter<'_, Self, <Self as core::ops::Index<usize>>::Output>, distr::weighted::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, distr::weighted::Error>>>::from_residual(move _26) -> [return: bb11, unwind: bb21]
  }
  preds [bb8]
  succs [bb11, bb21]

bb11
  0: StorageDead(_26)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  1: StorageDead(_24)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  2: StorageDead(_13)
    SourceInfo(src/seq/slice.rs:237:24-237:25)
  3: StorageDead(_12)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  4: StorageDead(_11)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  5: StorageDead(_10)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  6: StorageDead(_9)
    SourceInfo(src/seq/slice.rs:238:10-238:11)
  7: StorageDead(_5)
    SourceInfo(src/seq/slice.rs:239:5-239:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_14) -> [return: bb17, unwind: bb23]
  }
  preds [bb10]
  succs [bb17, bb23]

bb12
  0: StorageDead(_27)
    SourceInfo(src/seq/slice.rs:236:14-236:15)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:231:22-237:25)
      kind: _12 = <seq::index_::IndexVec as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb13, unwind: bb20]
  }
  preds [bb9]
  succs [bb13, bb20]

bb13
  0: StorageDead(_13)
    SourceInfo(src/seq/slice.rs:237:24-237:25)
  1: _9 = seq::slice::SliceChooseIter::<'_, Self, <Self as core::ops::Index<usize>>::Output> { slice: move _10, _phantom: move _11, indices: move _12 }
    SourceInfo(src/seq/slice.rs:228:12-238:10)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:238:9-238:10)
      kind: drop(_12) -> [return: bb14, unwind: bb19]
  }
  preds [bb12]
  succs [bb14, bb19]

bb14
  0: StorageDead(_12)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  1: StorageDead(_11)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  2: StorageDead(_10)
    SourceInfo(src/seq/slice.rs:238:9-238:10)
  3: _0 = core::result::Result::<seq::slice::SliceChooseIter<'_, Self, <Self as core::ops::Index<usize>>::Output>, distr::weighted::Error>::Ok(move _9)
    SourceInfo(src/seq/slice.rs:228:9-238:11)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:238:10-238:11)
      kind: drop(_9) -> [return: bb15, unwind: bb21]
  }
  preds [bb13]
  succs [bb15, bb21]

bb15
  0: StorageDead(_9)
    SourceInfo(src/seq/slice.rs:238:10-238:11)
  1: StorageDead(_5)
    SourceInfo(src/seq/slice.rs:239:5-239:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_14) -> [return: bb16, unwind: bb23]
  }
  preds [bb14]
  succs [bb16, bb23]

bb16
  0: StorageDead(_14)
    SourceInfo(src/seq/slice.rs:239:5-239:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_4) -> [return: bb18, unwind: bb24]
  }
  preds [bb15]
  succs [bb18, bb24]

bb17
  0: StorageDead(_14)
    SourceInfo(src/seq/slice.rs:239:5-239:6)
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_4) -> [return: bb18, unwind: bb24]
  }
  preds [bb11]
  succs [bb18, bb24]

bb18
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:6-239:6)
      kind: return
  }
  preds [bb16, bb17]
  succs []

bb19
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:238:10-238:11)
      kind: drop(_9) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb13]
  succs [bb21]

bb20
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:237:24-237:25)
      kind: drop(_13) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb12]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_14) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb9, bb10, bb14, bb19, bb20]
  succs [bb23]

bb22
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:236:14-236:15)
      kind: drop(_15) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:239:5-239:6)
      kind: drop(_4) -> [return: bb24, unwind terminate(cleanup)]
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb11, bb15, bb21, bb22]
  succs [bb24]

bb24
  Terminator {
      source_info: SourceInfo(src/seq/slice.rs:215:5-239:6)
      kind: resume
  }
  preds [bb16, bb17, bb23]
  succs []

