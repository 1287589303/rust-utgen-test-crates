bb0
  0: StorageLive(_3)
    SourceInfo(src/distr/other.rs:146:9-151:10)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:146:9-151:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:146:9-151:10)
      kind: falseUnwind -> [real: bb2, unwind: bb9]
  }
  preds [bb0, bb8]
  succs [bb2, bb9]

bb2
  0: StorageLive(_5)
    SourceInfo(src/distr/other.rs:147:17-147:20)
  1: StorageLive(_6)
    SourceInfo(src/distr/other.rs:147:23-147:37)
  2: StorageLive(_7)
    SourceInfo(src/distr/other.rs:147:23-147:26)
  3: _7 = &mut (*_2)
    SourceInfo(src/distr/other.rs:147:23-147:26)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:147:23-147:37)
      kind: _6 = <R as rand_core::RngCore>::next_u32(move _7) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_7)
    SourceInfo(src/distr/other.rs:147:36-147:37)
  1: StorageLive(_8)
    SourceInfo(src/distr/other.rs:147:41-147:49)
  2: _9 = SubWithOverflow(const 32_i32, const 6_i32)
    SourceInfo(src/distr/other.rs:147:41-147:49)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:147:41-147:49)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", const 32_i32, const 6_i32) -> [success: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: _8 = move (_9.0: i32)
    SourceInfo(src/distr/other.rs:147:41-147:49)
  1: _10 = _8 as u32 (IntToInt)
    SourceInfo(src/distr/other.rs:147:23-147:49)
  2: _11 = Lt(move _10, const 32_u32)
    SourceInfo(src/distr/other.rs:147:23-147:49)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:147:23-147:49)
      kind: assert(move _11, "attempt to shift right by `{}`, which would overflow", _8) -> [success: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _5 = Shr(move _6, move _8)
    SourceInfo(src/distr/other.rs:147:23-147:49)
  1: StorageDead(_8)
    SourceInfo(src/distr/other.rs:147:48-147:49)
  2: StorageDead(_6)
    SourceInfo(src/distr/other.rs:147:48-147:49)
  3: FakeRead(ForLet(None), _5)
    SourceInfo(src/distr/other.rs:147:17-147:20)
  4: StorageLive(_12)
    SourceInfo(src/distr/other.rs:148:16-148:27)
  5: StorageLive(_13)
    SourceInfo(src/distr/other.rs:148:16-148:19)
  6: _13 = _5
    SourceInfo(src/distr/other.rs:148:16-148:19)
  7: _12 = Lt(move _13, const <distr::other::Alphanumeric as distr::distribution::Distribution<u8>>::sample::RANGE)
    SourceInfo(src/distr/other.rs:148:16-148:27)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:148:16-148:27)
      kind: switchInt(move _12) -> [0: bb8, otherwise: bb6]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: StorageDead(_13)
    SourceInfo(src/distr/other.rs:148:26-148:27)
  1: StorageLive(_15)
    SourceInfo(src/distr/other.rs:149:24-149:45)
  2: _15 = const <distr::other::Alphanumeric as distr::distribution::Distribution<u8>>::sample::GEN_ASCII_STR_CHARSET
    SourceInfo(src/distr/other.rs:149:24-149:45)
  3: StorageLive(_16)
    SourceInfo(src/distr/other.rs:149:46-149:58)
  4: StorageLive(_17)
    SourceInfo(src/distr/other.rs:149:46-149:49)
  5: _17 = _5
    SourceInfo(src/distr/other.rs:149:46-149:49)
  6: _16 = move _17 as usize (IntToInt)
    SourceInfo(src/distr/other.rs:149:46-149:58)
  7: StorageDead(_17)
    SourceInfo(src/distr/other.rs:149:57-149:58)
  8: _18 = Len((*_15))
    SourceInfo(src/distr/other.rs:149:24-149:59)
  9: _19 = Lt(_16, _18)
    SourceInfo(src/distr/other.rs:149:24-149:59)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:149:24-149:59)
      kind: assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _16) -> [success: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: _0 = (*_15)[_16]
    SourceInfo(src/distr/other.rs:149:24-149:59)
  1: StorageDead(_16)
    SourceInfo(src/distr/other.rs:149:59-149:60)
  2: StorageDead(_15)
    SourceInfo(src/distr/other.rs:149:59-149:60)
  3: StorageDead(_12)
    SourceInfo(src/distr/other.rs:150:13-150:14)
  4: StorageDead(_5)
    SourceInfo(src/distr/other.rs:151:9-151:10)
  5: StorageDead(_3)
    SourceInfo(src/distr/other.rs:151:9-151:10)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:152:6-152:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  0: StorageDead(_13)
    SourceInfo(src/distr/other.rs:148:26-148:27)
  1: _4 = const ()
    SourceInfo(src/distr/other.rs:150:14-150:14)
  2: StorageDead(_12)
    SourceInfo(src/distr/other.rs:150:13-150:14)
  3: StorageDead(_5)
    SourceInfo(src/distr/other.rs:151:9-151:10)
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:146:9-151:10)
      kind: goto -> bb1
  }
  preds [bb5]
  succs [bb1]

bb9
  Terminator {
      source_info: SourceInfo(src/distr/other.rs:137:5-152:6)
      kind: resume
  }
  preds [bb1, bb2, bb3, bb4, bb6]
  succs []

