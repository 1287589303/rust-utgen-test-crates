bb0
  0: StorageLive(_3)
    SourceInfo(src/lib.rs:274:5-274:10)
  1: StorageLive(_4)
    SourceInfo(src/lib.rs:274:5-274:10)
  Terminator {
      source_info: SourceInfo(src/lib.rs:274:5-274:10)
      kind: _4 = rngs::thread::rng() -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: _3 = &mut _4
    SourceInfo(src/lib.rs:274:5-274:10)
  1: StorageLive(_5)
    SourceInfo(src/lib.rs:274:24-274:33)
  2: _5 = _1
    SourceInfo(src/lib.rs:274:24-274:33)
  3: StorageLive(_6)
    SourceInfo(src/lib.rs:274:35-274:46)
  4: _6 = _2
    SourceInfo(src/lib.rs:274:35-274:46)
  Terminator {
      source_info: SourceInfo(src/lib.rs:274:5-274:47)
      kind: _0 = <rngs::thread::ThreadRng as rng::Rng>::random_ratio(move _3, move _5, move _6) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: StorageDead(_6)
    SourceInfo(src/lib.rs:274:46-274:47)
  1: StorageDead(_5)
    SourceInfo(src/lib.rs:274:46-274:47)
  2: StorageDead(_3)
    SourceInfo(src/lib.rs:274:46-274:47)
  Terminator {
      source_info: SourceInfo(src/lib.rs:275:1-275:2)
      kind: drop(_4) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_4)
    SourceInfo(src/lib.rs:275:1-275:2)
  Terminator {
      source_info: SourceInfo(src/lib.rs:275:2-275:2)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/lib.rs:275:1-275:2)
      kind: drop(_4) -> [return: bb5, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(src/lib.rs:273:1-275:2)
      kind: resume
  }
  preds [bb0, bb2, bb4]
  succs []

