bb0
  0: StorageLive(_2)
    SourceInfo(rand_chacha/src/chacha.rs:192:21-192:36)
  1: StorageLive(_3)
    SourceInfo(rand_chacha/src/chacha.rs:193:25-193:38)
  2: StorageLive(_4)
    SourceInfo(rand_chacha/src/chacha.rs:193:41-193:60)
  3: _4 = &((((*_1).0: rand_core::block::BlockRng<chacha::ChaCha8Core>).2: chacha::ChaCha8Core).0: guts::ChaCha)
    SourceInfo(rand_chacha/src/chacha.rs:193:41-193:60)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:193:41-193:76)
      kind: _3 = guts::ChaCha::get_block_pos(move _4) -> [return: bb1, unwind: bb15]
  }
  preds []
  succs [bb1, bb15]

bb1
  0: StorageDead(_4)
    SourceInfo(rand_chacha/src/chacha.rs:193:75-193:76)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(rand_chacha/src/chacha.rs:193:25-193:38)
  2: StorageLive(_5)
    SourceInfo(rand_chacha/src/chacha.rs:194:39-194:52)
  3: _5 = _3
    SourceInfo(rand_chacha/src/chacha.rs:194:39-194:52)
  4: StorageLive(_6)
    SourceInfo(rand_chacha/src/chacha.rs:194:54-194:71)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:194:54-194:71)
      kind: _6 = <u8 as std::convert::Into<u64>>::into(const chacha::BUF_BLOCKS) -> [return: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:194:21-194:72)
      kind: _2 = core::num::<impl u64>::wrapping_sub(move _5, move _6) -> [return: bb3, unwind: bb15]
  }
  preds [bb1]
  succs [bb3, bb15]

bb3
  0: StorageDead(_6)
    SourceInfo(rand_chacha/src/chacha.rs:194:71-194:72)
  1: StorageDead(_5)
    SourceInfo(rand_chacha/src/chacha.rs:194:71-194:72)
  2: StorageDead(_3)
    SourceInfo(rand_chacha/src/chacha.rs:195:17-195:18)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(rand_chacha/src/chacha.rs:192:21-192:36)
  4: StorageLive(_9)
    SourceInfo(rand_chacha/src/chacha.rs:196:63-201:18)
  5: StorageLive(_10)
    SourceInfo(rand_chacha/src/chacha.rs:197:25-197:41)
  6: StorageLive(_11)
    SourceInfo(rand_chacha/src/chacha.rs:197:44-197:60)
  7: StorageLive(_12)
    SourceInfo(rand_chacha/src/chacha.rs:197:44-197:52)
  8: _12 = &((*_1).0: rand_core::block::BlockRng<chacha::ChaCha8Core>)
    SourceInfo(rand_chacha/src/chacha.rs:197:44-197:52)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:197:44-197:60)
      kind: _11 = rand_core::block::BlockRng::<chacha::ChaCha8Core>::index(move _12) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: StorageDead(_12)
    SourceInfo(rand_chacha/src/chacha.rs:197:59-197:60)
  1: _10 = move _11 as u64 (IntToInt)
    SourceInfo(rand_chacha/src/chacha.rs:197:44-197:67)
  2: StorageDead(_11)
    SourceInfo(rand_chacha/src/chacha.rs:197:66-197:67)
  3: FakeRead(ForLet(None), _10)
    SourceInfo(rand_chacha/src/chacha.rs:197:25-197:41)
  4: StorageLive(_13)
    SourceInfo(rand_chacha/src/chacha.rs:198:25-198:36)
  5: StorageLive(_14)
    SourceInfo(rand_chacha/src/chacha.rs:198:39-198:55)
  6: _14 = _10
    SourceInfo(rand_chacha/src/chacha.rs:198:39-198:55)
  7: StorageLive(_15)
    SourceInfo(rand_chacha/src/chacha.rs:198:58-198:80)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:198:58-198:80)
      kind: _15 = <u64 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb5, unwind: bb15]
  }
  preds [bb3]
  succs [bb5, bb15]

bb5
  0: _16 = Eq(_15, const 0_u64)
    SourceInfo(rand_chacha/src/chacha.rs:198:39-198:80)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:198:39-198:80)
      kind: assert(!move _16, "attempt to divide `{}` by zero", _14) -> [success: bb6, unwind: bb15]
  }
  preds [bb4]
  succs [bb6, bb15]

bb6
  0: _13 = Div(move _14, move _15)
    SourceInfo(rand_chacha/src/chacha.rs:198:39-198:80)
  1: StorageDead(_15)
    SourceInfo(rand_chacha/src/chacha.rs:198:79-198:80)
  2: StorageDead(_14)
    SourceInfo(rand_chacha/src/chacha.rs:198:79-198:80)
  3: FakeRead(ForLet(None), _13)
    SourceInfo(rand_chacha/src/chacha.rs:198:25-198:36)
  4: StorageLive(_17)
    SourceInfo(rand_chacha/src/chacha.rs:199:25-199:35)
  5: StorageLive(_18)
    SourceInfo(rand_chacha/src/chacha.rs:199:38-199:54)
  6: _18 = _10
    SourceInfo(rand_chacha/src/chacha.rs:199:38-199:54)
  7: StorageLive(_19)
    SourceInfo(rand_chacha/src/chacha.rs:199:57-199:79)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:199:57-199:79)
      kind: _19 = <u64 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  0: _20 = Eq(_19, const 0_u64)
    SourceInfo(rand_chacha/src/chacha.rs:199:38-199:79)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:199:38-199:79)
      kind: assert(!move _20, "attempt to calculate the remainder of `{}` with a divisor of zero", _18) -> [success: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _17 = Rem(move _18, move _19)
    SourceInfo(rand_chacha/src/chacha.rs:199:38-199:79)
  1: StorageDead(_19)
    SourceInfo(rand_chacha/src/chacha.rs:199:78-199:79)
  2: StorageDead(_18)
    SourceInfo(rand_chacha/src/chacha.rs:199:78-199:79)
  3: FakeRead(ForLet(None), _17)
    SourceInfo(rand_chacha/src/chacha.rs:199:25-199:35)
  4: StorageLive(_21)
    SourceInfo(rand_chacha/src/chacha.rs:200:22-200:33)
  5: _21 = _13
    SourceInfo(rand_chacha/src/chacha.rs:200:22-200:33)
  6: StorageLive(_22)
    SourceInfo(rand_chacha/src/chacha.rs:200:35-200:45)
  7: _22 = _17
    SourceInfo(rand_chacha/src/chacha.rs:200:35-200:45)
  8: _9 = (move _21, move _22)
    SourceInfo(rand_chacha/src/chacha.rs:200:21-200:46)
  9: StorageDead(_22)
    SourceInfo(rand_chacha/src/chacha.rs:200:45-200:46)
  10: StorageDead(_21)
    SourceInfo(rand_chacha/src/chacha.rs:200:45-200:46)
  11: StorageDead(_17)
    SourceInfo(rand_chacha/src/chacha.rs:201:17-201:18)
  12: StorageDead(_13)
    SourceInfo(rand_chacha/src/chacha.rs:201:17-201:18)
  13: StorageDead(_10)
    SourceInfo(rand_chacha/src/chacha.rs:201:17-201:18)
  14: PlaceMention(_9)
    SourceInfo(rand_chacha/src/chacha.rs:196:63-201:18)
  15: StorageLive(_7)
    SourceInfo(rand_chacha/src/chacha.rs:196:22-196:39)
  16: _7 = (_9.0: u64)
    SourceInfo(rand_chacha/src/chacha.rs:196:22-196:39)
  17: StorageLive(_8)
    SourceInfo(rand_chacha/src/chacha.rs:196:41-196:59)
  18: _8 = (_9.1: u64)
    SourceInfo(rand_chacha/src/chacha.rs:196:41-196:59)
  19: StorageDead(_9)
    SourceInfo(rand_chacha/src/chacha.rs:201:18-201:19)
  20: StorageLive(_23)
    SourceInfo(rand_chacha/src/chacha.rs:202:21-202:30)
  21: StorageLive(_24)
    SourceInfo(rand_chacha/src/chacha.rs:202:51-202:66)
  22: _24 = _2
    SourceInfo(rand_chacha/src/chacha.rs:202:51-202:66)
  23: StorageLive(_25)
    SourceInfo(rand_chacha/src/chacha.rs:202:68-202:85)
  24: _25 = _7
    SourceInfo(rand_chacha/src/chacha.rs:202:68-202:85)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:202:33-202:86)
      kind: _23 = core::num::<impl u64>::wrapping_add(move _24, move _25) -> [return: bb9, unwind: bb15]
  }
  preds [bb7]
  succs [bb9, bb15]

bb9
  0: StorageDead(_25)
    SourceInfo(rand_chacha/src/chacha.rs:202:85-202:86)
  1: StorageDead(_24)
    SourceInfo(rand_chacha/src/chacha.rs:202:85-202:86)
  2: FakeRead(ForLet(None), _23)
    SourceInfo(rand_chacha/src/chacha.rs:202:21-202:30)
  3: StorageLive(_26)
    SourceInfo(rand_chacha/src/chacha.rs:203:21-203:36)
  4: StorageLive(_27)
    SourceInfo(rand_chacha/src/chacha.rs:203:39-203:60)
  5: StorageLive(_28)
    SourceInfo(rand_chacha/src/chacha.rs:203:50-203:59)
  6: _28 = _23
    SourceInfo(rand_chacha/src/chacha.rs:203:50-203:59)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:203:39-203:60)
      kind: _27 = <u128 as std::convert::From<u64>>::from(move _28) -> [return: bb10, unwind: bb15]
  }
  preds [bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_28)
    SourceInfo(rand_chacha/src/chacha.rs:203:59-203:60)
  1: StorageLive(_29)
    SourceInfo(rand_chacha/src/chacha.rs:203:63-203:86)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:203:63-203:86)
      kind: _29 = <u128 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb11, unwind: bb15]
  }
  preds [bb9]
  succs [bb11, bb15]

bb11
  0: _30 = MulWithOverflow(_27, _29)
    SourceInfo(rand_chacha/src/chacha.rs:203:39-203:86)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:203:39-203:86)
      kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", move _27, move _29) -> [success: bb12, unwind: bb15]
  }
  preds [bb10]
  succs [bb12, bb15]

bb12
  0: _26 = move (_30.0: u128)
    SourceInfo(rand_chacha/src/chacha.rs:203:39-203:86)
  1: StorageDead(_29)
    SourceInfo(rand_chacha/src/chacha.rs:203:85-203:86)
  2: StorageDead(_27)
    SourceInfo(rand_chacha/src/chacha.rs:203:85-203:86)
  3: FakeRead(ForLet(None), _26)
    SourceInfo(rand_chacha/src/chacha.rs:203:21-203:36)
  4: StorageLive(_31)
    SourceInfo(rand_chacha/src/chacha.rs:204:17-204:32)
  5: _31 = _26
    SourceInfo(rand_chacha/src/chacha.rs:204:17-204:32)
  6: StorageLive(_32)
    SourceInfo(rand_chacha/src/chacha.rs:204:35-204:65)
  7: StorageLive(_33)
    SourceInfo(rand_chacha/src/chacha.rs:204:46-204:64)
  8: _33 = _8
    SourceInfo(rand_chacha/src/chacha.rs:204:46-204:64)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:204:35-204:65)
      kind: _32 = <u128 as std::convert::From<u64>>::from(move _33) -> [return: bb13, unwind: bb15]
  }
  preds [bb11]
  succs [bb13, bb15]

bb13
  0: StorageDead(_33)
    SourceInfo(rand_chacha/src/chacha.rs:204:64-204:65)
  1: _34 = AddWithOverflow(_31, _32)
    SourceInfo(rand_chacha/src/chacha.rs:204:17-204:65)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:204:17-204:65)
      kind: assert(!move (_34.1: bool), "attempt to compute `{} + {}`, which would overflow", move _31, move _32) -> [success: bb14, unwind: bb15]
  }
  preds [bb12]
  succs [bb14, bb15]

bb14
  0: _0 = move (_34.0: u128)
    SourceInfo(rand_chacha/src/chacha.rs:204:17-204:65)
  1: StorageDead(_32)
    SourceInfo(rand_chacha/src/chacha.rs:204:64-204:65)
  2: StorageDead(_31)
    SourceInfo(rand_chacha/src/chacha.rs:204:64-204:65)
  3: StorageDead(_26)
    SourceInfo(rand_chacha/src/chacha.rs:205:13-205:14)
  4: StorageDead(_23)
    SourceInfo(rand_chacha/src/chacha.rs:205:13-205:14)
  5: StorageDead(_8)
    SourceInfo(rand_chacha/src/chacha.rs:205:13-205:14)
  6: StorageDead(_7)
    SourceInfo(rand_chacha/src/chacha.rs:205:13-205:14)
  7: StorageDead(_2)
    SourceInfo(rand_chacha/src/chacha.rs:205:13-205:14)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:205:14-205:14)
      kind: return
  }
  preds [bb13]
  succs []

bb15
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:191:13-205:14)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11, bb12, bb13]
  succs []

