bb0
  0: StorageLive(_3)
    SourceInfo(rand_chacha/src/chacha.rs:214:21-214:26)
  1: StorageLive(_4)
    SourceInfo(rand_chacha/src/chacha.rs:214:29-214:68)
  2: StorageLive(_5)
    SourceInfo(rand_chacha/src/chacha.rs:214:30-214:41)
  3: _5 = _2
    SourceInfo(rand_chacha/src/chacha.rs:214:30-214:41)
  4: StorageLive(_6)
    SourceInfo(rand_chacha/src/chacha.rs:214:44-214:67)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:214:44-214:67)
      kind: _6 = <u128 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb1, unwind: bb7]
  }
  preds []
  succs [bb1, bb7]

bb1
  0: _7 = Eq(_6, const 0_u128)
    SourceInfo(rand_chacha/src/chacha.rs:214:29-214:68)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:214:29-214:68)
      kind: assert(!move _7, "attempt to divide `{}` by zero", _5) -> [success: bb2, unwind: bb7]
  }
  preds [bb0]
  succs [bb2, bb7]

bb2
  0: _4 = Div(move _5, move _6)
    SourceInfo(rand_chacha/src/chacha.rs:214:29-214:68)
  1: StorageDead(_6)
    SourceInfo(rand_chacha/src/chacha.rs:214:67-214:68)
  2: StorageDead(_5)
    SourceInfo(rand_chacha/src/chacha.rs:214:67-214:68)
  3: _3 = move _4 as u64 (IntToInt)
    SourceInfo(rand_chacha/src/chacha.rs:214:29-214:75)
  4: StorageDead(_4)
    SourceInfo(rand_chacha/src/chacha.rs:214:74-214:75)
  5: FakeRead(ForLet(None), _3)
    SourceInfo(rand_chacha/src/chacha.rs:214:21-214:26)
  6: StorageLive(_8)
    SourceInfo(rand_chacha/src/chacha.rs:215:17-215:57)
  7: StorageLive(_9)
    SourceInfo(rand_chacha/src/chacha.rs:215:17-215:36)
  8: _9 = &mut ((((*_1).0: rand_core::block::BlockRng<chacha::ChaCha8Core>).2: chacha::ChaCha8Core).0: guts::ChaCha)
    SourceInfo(rand_chacha/src/chacha.rs:215:17-215:36)
  9: StorageLive(_10)
    SourceInfo(rand_chacha/src/chacha.rs:215:51-215:56)
  10: _10 = _3
    SourceInfo(rand_chacha/src/chacha.rs:215:51-215:56)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:215:17-215:57)
      kind: _8 = guts::ChaCha::set_block_pos(move _9, move _10) -> [return: bb3, unwind: bb7]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_10)
    SourceInfo(rand_chacha/src/chacha.rs:215:56-215:57)
  1: StorageDead(_9)
    SourceInfo(rand_chacha/src/chacha.rs:215:56-215:57)
  2: StorageDead(_8)
    SourceInfo(rand_chacha/src/chacha.rs:215:57-215:58)
  3: StorageLive(_11)
    SourceInfo(rand_chacha/src/chacha.rs:216:17-217:88)
  4: StorageLive(_12)
    SourceInfo(rand_chacha/src/chacha.rs:216:17-216:25)
  5: _12 = &mut ((*_1).0: rand_core::block::BlockRng<chacha::ChaCha8Core>)
    SourceInfo(rand_chacha/src/chacha.rs:216:17-216:25)
  6: StorageLive(_13)
    SourceInfo(rand_chacha/src/chacha.rs:217:39-217:87)
  7: StorageLive(_14)
    SourceInfo(rand_chacha/src/chacha.rs:217:39-217:78)
  8: StorageLive(_15)
    SourceInfo(rand_chacha/src/chacha.rs:217:40-217:51)
  9: _15 = _2
    SourceInfo(rand_chacha/src/chacha.rs:217:40-217:51)
  10: StorageLive(_16)
    SourceInfo(rand_chacha/src/chacha.rs:217:54-217:77)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:217:54-217:77)
      kind: _16 = <u128 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _17 = Eq(_16, const 0_u128)
    SourceInfo(rand_chacha/src/chacha.rs:217:39-217:78)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:217:39-217:78)
      kind: assert(!move _17, "attempt to calculate the remainder of `{}` with a divisor of zero", _15) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _14 = Rem(move _15, move _16)
    SourceInfo(rand_chacha/src/chacha.rs:217:39-217:78)
  1: StorageDead(_16)
    SourceInfo(rand_chacha/src/chacha.rs:217:77-217:78)
  2: StorageDead(_15)
    SourceInfo(rand_chacha/src/chacha.rs:217:77-217:78)
  3: _13 = move _14 as usize (IntToInt)
    SourceInfo(rand_chacha/src/chacha.rs:217:39-217:87)
  4: StorageDead(_14)
    SourceInfo(rand_chacha/src/chacha.rs:217:86-217:87)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:216:17-217:88)
      kind: _11 = rand_core::block::BlockRng::<chacha::ChaCha8Core>::generate_and_set(move _12, move _13) -> [return: bb6, unwind: bb7]
  }
  preds [bb4]
  succs [bb6, bb7]

bb6
  0: StorageDead(_13)
    SourceInfo(rand_chacha/src/chacha.rs:217:87-217:88)
  1: StorageDead(_12)
    SourceInfo(rand_chacha/src/chacha.rs:217:87-217:88)
  2: StorageDead(_11)
    SourceInfo(rand_chacha/src/chacha.rs:217:88-217:89)
  3: _0 = const ()
    SourceInfo(rand_chacha/src/chacha.rs:213:63-218:14)
  4: StorageDead(_3)
    SourceInfo(rand_chacha/src/chacha.rs:218:13-218:14)
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:218:14-218:14)
      kind: return
  }
  preds [bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(rand_chacha/src/chacha.rs:213:13-218:14)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5]
  succs []

