{
  "name": "rand_chacha::chacha::{impl#45}::get_word_pos",
  "mod_info": {
    "name": "chacha",
    "loc": "rand_chacha/src/lib.rs:96:1:96:12"
  },
  "visible": true,
  "loc": "rand_chacha/src/chacha.rs:191:13:205:14",
  "doc": "/// Get the offset from the start of the stream, in 32-bit words.\n///\n/// Since the generated blocks are 16 words (2<sup>4</sup>) long and the\n/// counter is 64-bits, the offset is a 68-bit number. Sub-word offsets are\n/// not supported, hence the result can simply be multiplied by 4 to get a\n/// byte-offset.\n",
  "code": [
    "pub fn get_word_pos(&self) -> u128 {",
    "    let buf_start_block = {",
    "        let buf_end_block = self.rng.core.state.get_block_pos();",
    "        u64::wrapping_sub(buf_end_block, BUF_BLOCKS.into())",
    "    };",
    "    let (buf_offset_blocks, block_offset_words) = {",
    "        let buf_offset_words = self.rng.index() as u64;",
    "        let blocks_part = buf_offset_words / u64::from(BLOCK_WORDS);",
    "        let words_part = buf_offset_words % u64::from(BLOCK_WORDS);",
    "        (blocks_part, words_part)",
    "    };",
    "    let pos_block = u64::wrapping_add(buf_start_block, buf_offset_blocks);",
    "    let pos_block_words = u128::from(pos_block) * u128::from(BLOCK_WORDS);",
    "    pos_block_words + u128::from(block_offset_words)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "pos_block_words + u128::from(block_offset_words)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}