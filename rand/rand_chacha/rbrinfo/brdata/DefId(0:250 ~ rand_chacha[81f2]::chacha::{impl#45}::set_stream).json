{
  "name": "rand_chacha::chacha::{impl#45}::set_stream",
  "mod_info": {
    "name": "chacha",
    "loc": "rand_chacha/src/lib.rs:96:1:96:12"
  },
  "visible": true,
  "loc": "rand_chacha/src/chacha.rs:232:13:238:14",
  "doc": "/// Set the stream number.\n///\n/// This is initialized to zero; 2<sup>64</sup> unique streams of output\n/// are available per seed/key.\n///\n/// Note that in order to reproduce ChaCha output with a specific 64-bit\n/// nonce, one can convert that nonce to a `u64` in little-endian fashion\n/// and pass to this function. In theory a 96-bit nonce can be used by\n/// passing the last 64-bits to this function and using the first 32-bits as\n/// the most significant half of the 64-bit counter (which may be set\n/// indirectly via `set_word_pos`), but this is not directly supported.\n",
  "code": [
    "pub fn set_stream(&mut self, stream: u64) {",
    "    self.rng.core.state.set_nonce(stream);",
    "    if self.rng.index() != 64 {",
    "        let wp = self.get_word_pos();",
    "        self.set_word_pos(wp);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.rng.index() != 64",
          "norm": "64 != self.rng.index()",
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.rng.index() != 64",
          "norm": "64 != self.rng.index()",
          "value": "false",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}