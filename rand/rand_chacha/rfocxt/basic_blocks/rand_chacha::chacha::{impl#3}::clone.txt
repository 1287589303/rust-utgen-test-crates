[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:59:23: 59:38 (#0),
                    scope: scope[0],
                },
                kind: _2 = <chacha::Array64<T> as std::default::Default>::default() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (_2.0: [T; 64]),
            _4 = move _5 as &mut [T] (PointerCoercion(Unsize)),
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).0: [T; 64]),
            _7 = &(*_8),
            _6 = move _7 as &[T] (PointerCoercion(Unsize)),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:60:9: 60:39 (#0),
                    scope: scope[1],
                },
                kind: _3 = core::slice::<impl [T]>::copy_from_slice(move _4, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_8),
            StorageDead(_3),
            _0 = move _2,
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:62:6: 62:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:58:5: 62:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: chacha::Array64<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:58:24: 58:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} chacha::Array64<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:58:14: 58:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_chacha/src/chacha.rs:59:23: 59:38 (#0),
                            ),
                        ),
                        pat_span: rand_chacha/src/chacha.rs:59:13: 59:20 (#0),
                    },
                ),
            ),
        ),
        ty: chacha::Array64<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:59:13: 59:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:9: 60:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:9: 60:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [T/#0; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:9: 60:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:31: 60:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:31: 60:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0; 64_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:60:31: 60:38 (#0),
            scope: scope[0],
        },
    },
]