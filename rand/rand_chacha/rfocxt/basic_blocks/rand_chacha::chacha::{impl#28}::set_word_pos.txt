[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:214:44: 214:67 (#19),
                    scope: scope[0],
                },
                kind: _6 = <u128 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = Eq(_6, const 0_u128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:214:29: 214:68 (#19),
                    scope: scope[0],
                },
                kind: assert(!move _7, "attempt to divide `{}` by zero", _5) -> [success: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Div(move _5, move _6),
            StorageDead(_6),
            StorageDead(_5),
            _3 = move _4 as u64 (IntToInt),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((((*_1).0: rand_core::block::BlockRng<chacha::ChaCha12Core>).2: chacha::ChaCha12Core).0: guts::ChaCha),
            StorageLive(_10),
            _10 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:215:17: 215:57 (#19),
                    scope: scope[1],
                },
                kind: _8 = guts::ChaCha::set_block_pos(move _9, move _10) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).0: rand_core::block::BlockRng<chacha::ChaCha12Core>),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:217:54: 217:77 (#19),
                    scope: scope[1],
                },
                kind: _16 = <u128 as std::convert::From<u8>>::from(const chacha::BLOCK_WORDS) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = Eq(_16, const 0_u128),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:217:39: 217:78 (#19),
                    scope: scope[1],
                },
                kind: assert(!move _17, "attempt to calculate the remainder of `{}` with a divisor of zero", _15) -> [success: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = Rem(move _15, move _16),
            StorageDead(_16),
            StorageDead(_15),
            _13 = move _14 as usize (IntToInt),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:216:17: 217:88 (#19),
                    scope: scope[1],
                },
                kind: _11 = rand_core::block::BlockRng::<chacha::ChaCha12Core>::generate_and_set(move _12, move _13) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            _0 = const (),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:218:14: 218:14 (#19),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:213:13: 218:14 (#19),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:213:62: 213:62 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut chacha::ChaCha12Rng,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:213:33: 213:42 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_chacha/src/chacha.rs:213:57: 213:61 (#19),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_chacha/src/chacha.rs:213:44: 213:55 (#19),
                            ),
                        ),
                        pat_span: rand_chacha/src/chacha.rs:213:44: 213:55 (#19),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:213:44: 213:55 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_chacha/src/chacha.rs:214:29: 214:75 (#19),
                            ),
                        ),
                        pat_span: rand_chacha/src/chacha.rs:214:21: 214:26 (#19),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:214:21: 214:26 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:214:29: 214:68 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:214:30: 214:41 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:214:44: 214:67 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:214:29: 214:68 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:215:17: 215:57 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut guts::ChaCha,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:215:17: 215:36 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:215:51: 215:56 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:216:17: 217:88 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rand_core::block::BlockRng<chacha::ChaCha12Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:216:17: 216:25 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:217:39: 217:87 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:217:39: 217:78 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:217:40: 217:51 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:217:54: 217:77 (#19),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:217:39: 217:78 (#19),
            scope: scope[0],
        },
    },
]