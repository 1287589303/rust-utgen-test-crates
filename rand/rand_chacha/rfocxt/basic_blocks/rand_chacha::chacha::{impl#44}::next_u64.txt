[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).0: rand_core::block::BlockRng<chacha::ChaCha8Core>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:171:17: 171:36 (#30),
                    scope: scope[0],
                },
                kind: _0 = <rand_core::block::BlockRng<chacha::ChaCha8Core> as rand_core::RngCore>::next_u64(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:172:14: 172:14 (#30),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_chacha/src/chacha.rs:170:13: 172:14 (#30),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:170:39: 170:42 (#30),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut chacha::ChaCha8Rng,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:170:25: 170:34 (#30),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_chacha/src/chacha.rs:171:17: 171:36 (#30),
                },
            ),
        ),
        ty: &'{erased} mut rand_core::block::BlockRng<chacha::ChaCha8Core>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_chacha/src/chacha.rs:171:17: 171:25 (#30),
            scope: scope[0],
        },
    },
]