[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = ((*_1).1: usize),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:370:26: 370:47 (#0),
                    scope: scope[0],
                },
                kind: _7 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _8) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:370:26: 370:53 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u64]>::len(move _6) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _3 = Ge(move _4, move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:370:12: 370:53 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut ((*_1).3: R),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_1).0: <R as block::BlockRngCore>::Results),
            _11 = &mut (*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:371:13: 371:50 (#0),
                    scope: scope[0],
                },
                kind: _9 = <R as block::BlockRngCore>::generate(move _10, move _11) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_12),
            StorageDead(_9),
            ((*_1).1: usize) = const 0_usize,
            _2 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:370:9: 373:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_4),
            _2 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:370:9: 373:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:375:21: 375:42 (#0),
                    scope: scope[0],
                },
                kind: _14 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _15) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            _16 = ((*_1).1: usize),
            _17 = Len((*_14)),
            _18 = Lt(_16, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:375:21: 375:54 (#0),
                    scope: scope[0],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = (*_14)[_16],
            FakeRead(ForLet(None), _13),
            StorageDead(_16),
            StorageDead(_14),
            _19 = AddWithOverflow(((*_1).1: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:376:9: 376:24 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_19.0: usize),
            ((*_1).2: bool) = const false,
            _0 = _13,
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:379:6: 379:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:369:5: 379:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:369:31: 369:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut block::BlockRng64<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:369:17: 369:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:9: 373:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:12: 370:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:12: 370:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:26: 370:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:26: 370:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:26: 370:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:370:26: 370:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:371:13: 371:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:371:13: 371:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:371:32: 371:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:371:32: 371:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:375:21: 375:54 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:375:13: 375:18 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:13: 375:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:21: 375:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:21: 375:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:43: 375:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:21: 375:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:375:21: 375:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:376:9: 376:24 (#0),
            scope: scope[0],
        },
    },
]