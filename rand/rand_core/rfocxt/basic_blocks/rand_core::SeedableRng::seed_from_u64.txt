[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:484:24: 484:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = <<Self as SeedableRng>::Seed as core::default::Default>::default() -> [return: bb1, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:485:24: 485:37 (#0),
                    scope: scope[1],
                },
                kind: _5 = <<Self as SeedableRng>::Seed as core::convert::AsMut<[u8]>>::as_mut(move _6) -> [return: bb2, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:485:24: 485:57 (#0),
                    scope: scope[1],
                },
                kind: _3 = core::slice::<impl [u8]>::chunks_exact_mut(move _4, const 4_usize) -> [return: bb3, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:22: 486:31 (#52),
                    scope: scope[2],
                },
                kind: _8 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb4, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:9: 488:10 (#51),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:9: 488:10 (#51),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _10,
            _14 = &mut (*_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:22: 486:31 (#52),
                    scope: scope[3],
                },
                kind: _13 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::next(move _14) -> [return: bb7, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            PlaceMention(_13),
            _16 = discriminant(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:22: 486:31 (#52),
                    scope: scope[3],
                },
                kind: switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:22: 486:31 (#52),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:9: 488:10 (#51),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = move ((_13 as Some).0: &mut [u8]),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut (*_18),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _1,
            _25 = &mut (*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:487:36: 487:53 (#0),
                    scope: scope[4],
                },
                kind: _24 = SeedableRng::seed_from_u64::pcg32(move _25) -> [return: bb12, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = const (),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_27),
            StorageLive(_28),
            _28 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:489:19: 489:40 (#0),
                    scope: scope[2],
                },
                kind: _27 = core::slice::ChunksExactMut::<'_, u8>::into_remainder(move _28) -> [return: bb14, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = &_24,
            _22 = &(*_23),
            _21 = move _22 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:487:13: 487:54 (#0),
                    scope: scope[4],
                },
                kind: _19 = core::slice::<impl [u8]>::copy_from_slice(move _20, move _21) -> [return: bb13, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_19),
            _12 = const (),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:486:9: 488:10 (#51),
                    scope: scope[3],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:490:13: 490:27 (#0),
                    scope: scope[5],
                },
                kind: _30 = core::slice::<impl [u8]>::is_empty(move _31) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:490:13: 490:27 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _30) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:490:9: 492:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut (*_27),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &mut _1,
            _39 = &mut (*_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:491:34: 491:51 (#0),
                    scope: scope[5],
                },
                kind: _38 = SeedableRng::seed_from_u64::pcg32(move _39) -> [return: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = &_38,
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:491:54: 491:63 (#0),
                    scope: scope[5],
                },
                kind: _42 = core::slice::<impl [u8]>::len(move _43) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            _41 = core::ops::RangeTo::<usize> { end: move _42 },
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:491:51: 491:64 (#0),
                    scope: scope[5],
                },
                kind: _36 = <[u8; 4] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _37, move _41) -> [return: bb20, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_37),
            _35 = &(*_36),
            _34 = &(*_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:491:13: 491:65 (#0),
                    scope: scope[5],
                },
                kind: _32 = core::slice::<impl [u8]>::copy_from_slice(move _33, move _34) -> [return: bb21, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_40),
            StorageDead(_38),
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_32),
            _29 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:490:9: 492:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_44),
            _44 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:494:9: 494:30 (#0),
                    scope: scope[5],
                },
                kind: _0 = <Self as SeedableRng>::from_seed(move _44) -> [return: bb23, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_27),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:495:5: 495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb24, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:495:6: 495:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:494:29: 494:30 (#0),
                    scope: scope[5],
                },
                kind: drop(_44) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:495:5: 495:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:466:5: 495:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:466:41: 466:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/lib.rs:466:33: 466:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:466:22: 466:31 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:466:22: 466:31 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:466:22: 466:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:484:24: 484:45 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:484:13: 484:21 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:484:13: 484:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:485:24: 485:57 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:485:13: 485:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:485:13: 485:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:485:24: 485:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:485:24: 485:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:485:24: 485:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:9: 488:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                rand_core/src/lib.rs:486:22: 486:31 (#52),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:486:22: 486:31 (#52),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:466:5: 495:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut [u8]>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:22: 486:31 (#52),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:9: 488:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:9: 488:10 (#51),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _13,
                                ),
                                rand_core/src/lib.rs:486:22: 486:31 (#52),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:486:13: 486:18 (#53),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:486:13: 486:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:13: 487:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:13: 487:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:35: 487:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:35: 487:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:35: 487:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:36: 487:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:42: 487:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:487:42: 487:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:489:19: 489:40 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:489:13: 489:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:489:13: 489:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:489:19: 489:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:490:9: 492:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:490:13: 490:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:490:13: 490:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:13: 491:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:13: 491:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:33: 491:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:33: 491:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:51: 491:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:34: 491:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 4_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:34: 491:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:40: 491:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:40: 491:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:52: 491:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:54: 491:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:491:54: 491:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:494:9: 494:30 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:494:25: 494:29 (#0),
            scope: scope[0],
        },
    },
]