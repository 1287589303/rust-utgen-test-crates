[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:36:13: 36:22 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:36:30: 36:39 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::slice::<impl [u64]>::len(move _9) -> [return: bb2, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _10 = MulWithOverflow(const 8_usize, _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:36:26: 36:39 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const 8_usize, move _8) -> [success: bb3, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move (_10.0: usize),
            StorageDead(_8),
            _4 = Ge(move _5, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:36:13: 36:39 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:39 (#0),
                    scope: scope[0],
                },
                kind: _14 = core::slice::<impl [u64]>::iter_mut(move _15) -> [return: bb6, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:36:5: 36:40 (#11),
                    scope: scope[0],
                },
                kind: _11 = core::panicking::panic(const "assertion failed: src.len() >= 8 * dst.len()") -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:44: 37:63 (#0),
                    scope: scope[0],
                },
                kind: _16 = core::slice::<impl [u8]>::chunks_exact(move _17, const 8_usize) -> [return: bb7, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:64 (#0),
                    scope: scope[0],
                },
                kind: _13 = <core::slice::IterMut<'_, u64> as core::iter::Iterator>::zip::<core::slice::ChunksExact<'_, u8>>(move _14, move _16) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:64 (#49),
                    scope: scope[0],
                },
                kind: _12 = <core::iter::Zip<core::slice::IterMut<'_, u64>, core::slice::ChunksExact<'_, u8>> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb9, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            StorageLive(_18),
            _18 = move _12,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _18,
            _22 = &mut (*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:64 (#49),
                    scope: scope[1],
                },
                kind: _21 = <core::iter::Zip<core::slice::IterMut<'_, u64>, core::slice::ChunksExact<'_, u8>> as core::iter::Iterator>::next(move _22) -> [return: bb12, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:64 (#49),
                    scope: scope[1],
                },
                kind: switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:25: 37:64 (#49),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb16, imaginary: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move (((_21 as Some).0: (&mut u64, &[u8])).0: &mut u64),
            StorageLive(_27),
            _27 = (((_21 as Some).0: (&mut u64, &[u8])).1: &[u8]),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &(*_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:38:35: 38:51 (#0),
                    scope: scope[2],
                },
                kind: _30 = <&[u8] as core::convert::TryInto<[u8; 8]>>::try_into(move _31) -> [return: bb17, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:40:2: 40:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:38:35: 38:60 (#0),
                    scope: scope[2],
                },
                kind: _29 = core::result::Result::<[u8; 8], core::array::TryFromSliceError>::unwrap(move _30) -> [return: bb18, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:38:16: 38:61 (#0),
                    scope: scope[2],
                },
                kind: _28 = core::num::<impl u64>::from_le_bytes(move _29) -> [return: bb19, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            (*_26) = move _28,
            StorageDead(_28),
            _20 = const (),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/le.rs:35:1: 40:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:35:50: 35:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/le.rs:35:27: 35:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/le.rs:35:22: 35:25 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/le.rs:35:22: 35:25 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:35:22: 35:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/le.rs:35:39: 35:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/le.rs:35:34: 35:37 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/le.rs:35:34: 35:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:35:34: 35:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:5: 36:40 (#11),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:13: 36:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:13: 36:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:13: 36:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:26: 36:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:30: 36:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:30: 36:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:26: 36:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:36:5: 36:40 (#11),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:36:5: 36:40 (#11),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: core::iter::Zip<core::slice::IterMut<'{erased}, u64>, core::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: core::iter::Zip<core::slice::IterMut<'{erased}, u64>, core::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: &'{erased} mut [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: core::slice::ChunksExact<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:44: 37:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/le.rs:37:5: 39:6 (#48),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:44: 37:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                rand_core/src/le.rs:37:25: 37:64 (#49),
                            ),
                        ),
                        pat_span: rand_core/src/le.rs:37:25: 37:64 (#49),
                    },
                ),
            ),
        ),
        ty: core::iter::Zip<core::slice::IterMut<'{erased}, u64>, core::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:35:1: 40:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} mut u64, &'{erased} [u8])>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::slice::IterMut<'{erased}, u64>, core::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Zip<core::slice::IterMut<'{erased}, u64>, core::slice::ChunksExact<'{erased}, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:25: 37:64 (#49),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:5: 39:6 (#48),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:5: 39:6 (#48),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                rand_core/src/le.rs:37:25: 37:64 (#49),
                            ),
                        ),
                        pat_span: rand_core/src/le.rs:37:9: 37:21 (#50),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:10: 37:13 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                rand_core/src/le.rs:37:25: 37:64 (#49),
                            ),
                        ),
                        pat_span: rand_core/src/le.rs:37:9: 37:21 (#50),
                    },
                ),
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:37:15: 37:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:38:16: 38:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u8; 8_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:38:35: 38:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 8_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:38:35: 38:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/le.rs:38:35: 38:40 (#0),
            scope: scope[0],
        },
    },
]