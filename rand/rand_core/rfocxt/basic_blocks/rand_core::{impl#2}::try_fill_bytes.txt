[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            _5 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:272:9: 272:29 (#0),
                    scope: scope[0],
                },
                kind: _3 = <R as RngCore>::fill_bytes(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_6),
            _6 = (),
            _0 = core::result::Result::<(), core::convert::Infallible>::Ok(move _6),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:274:6: 274:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:271:5: 274:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:271:53: 271:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:271:23: 271:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/lib.rs:271:39: 271:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:271:34: 271:37 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:271:34: 271:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:271:34: 271:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:272:9: 272:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:272:9: 272:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:272:25: 272:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:273:12: 273:14 (#0),
            scope: scope[0],
        },
    },
]