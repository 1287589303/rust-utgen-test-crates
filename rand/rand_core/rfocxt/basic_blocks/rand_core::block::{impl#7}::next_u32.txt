[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = ((*_1).1: usize),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).2: bool),
            _4 = move _5 as usize (IntToInt),
            StorageDead(_5),
            _6 = SubWithOverflow(_3, _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:351:25: 351:61 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> [success: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_6.0: usize),
            StorageDead(_4),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _2,
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:352:21: 352:42 (#0),
                    scope: scope[1],
                },
                kind: _12 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _13) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:352:21: 352:48 (#0),
                    scope: scope[1],
                },
                kind: _10 = core::slice::<impl [u64]>::len(move _11) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _8 = Ge(move _9, move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:352:12: 352:48 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _8) -> [0: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut ((*_1).3: R),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_1).0: <R as block::BlockRngCore>::Results),
            _16 = &mut (*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:353:13: 353:50 (#0),
                    scope: scope[1],
                },
                kind: _14 = <R as block::BlockRngCore>::generate(move _15, move _16) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_17),
            StorageDead(_14),
            ((*_1).1: usize) = const 0_usize,
            _2 = const 0_usize,
            ((*_1).2: bool) = const false,
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:352:9: 358:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:352:9: 358:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = ((*_1).2: bool),
            _19 = move _20 as usize (IntToInt),
            StorageDead(_20),
            _21 = MulWithOverflow(const 32_usize, _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:360:21: 360:51 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", const 32_usize, move _19) -> [success: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = move (_21.0: usize),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_22),
            _22 = ((*_1).2: bool),
            ((*_1).2: bool) = Not(move _22),
            StorageDead(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = ((*_1).2: bool),
            _23 = move _24 as usize (IntToInt),
            StorageDead(_24),
            _25 = AddWithOverflow(((*_1).1: usize), _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:363:9: 363:46 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _23) -> [success: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_25.0: usize),
            StorageDead(_23),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:365:10: 365:31 (#0),
                    scope: scope[2],
                },
                kind: _28 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _29) -> [return: bb10, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageLive(_30),
            _30 = _2,
            _31 = Len((*_28)),
            _32 = Lt(_30, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:365:10: 365:38 (#0),
                    scope: scope[2],
                },
                kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = (*_28)[_30],
            StorageLive(_33),
            _33 = _18,
            _34 = Lt(_33, const 64_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:365:9: 365:48 (#0),
                    scope: scope[2],
                },
                kind: assert(move _34, "attempt to shift right by `{}`, which would overflow", _33) -> [success: bb12, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = Shr(move _27, move _33),
            StorageDead(_33),
            StorageDead(_27),
            _0 = move _26 as u32 (IntToInt),
            StorageDead(_26),
            StorageDead(_18),
            StorageDead(_2),
            StorageDead(_30),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:366:6: 366:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:350:5: 366:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:350:31: 350:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut block::BlockRng64<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:350:17: 350:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:351:25: 351:61 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:351:13: 351:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:351:13: 351:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:351:25: 351:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:351:38: 351:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:351:38: 351:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:351:25: 351:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:9: 358:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:12: 352:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:12: 352:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:21: 352:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:21: 352:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:21: 352:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:352:21: 352:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:353:13: 353:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:353:13: 353:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:353:32: 353:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:353:32: 353:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:360:21: 360:51 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:360:13: 360:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:360:13: 360:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:360:26: 360:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:360:27: 360:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:360:21: 360:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:362:27: 362:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:363:23: 363:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:363:23: 363:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:363:9: 363:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:9: 365:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:10: 365:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:10: 365:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:10: 365:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:32: 365:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:10: 365:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:10: 365:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:365:9: 365:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:42: 365:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:365:9: 365:48 (#0),
            scope: scope[0],
        },
    },
]