[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:522:24: 522:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = <<Self as SeedableRng>::Seed as core::default::Default>::default() -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:523:24: 523:37 (#0),
                    scope: scope[1],
                },
                kind: _6 = <<Self as SeedableRng>::Seed as core::convert::AsMut<[u8]>>::as_mut(move _7) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:523:9: 523:38 (#0),
                    scope: scope[1],
                },
                kind: _3 = <impl RngCore as RngCore>::fill_bytes(move _4, move _5) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_8),
            _8 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:524:9: 524:30 (#0),
                    scope: scope[1],
                },
                kind: _0 = <Self as SeedableRng>::from_seed(move _8) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:525:5: 525:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:525:6: 525:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:524:29: 524:30 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:525:5: 525:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:521:5: 525:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:521:44: 521:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/lib.rs:521:22: 521:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:521:17: 521:20 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:521:17: 521:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut impl RngCore/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:521:17: 521:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/lib.rs:522:24: 522:45 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/lib.rs:522:13: 522:21 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:522:13: 522:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:523:9: 523:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut impl RngCore/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:523:9: 523:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:523:24: 523:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:523:24: 523:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:523:24: 523:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:524:9: 524:30 (#0),
                },
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(0:151 ~ rand_core[dfa3]::SeedableRng::Seed),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:524:25: 524:29 (#0),
            scope: scope[0],
        },
    },
]