[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:310:29: 310:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = <<R as block::BlockRngCore>::Results as core::default::Default>::default() -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = move _1,
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:313:20: 313:42 (#0),
                    scope: scope[1],
                },
                kind: _6 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[<R as block::BlockRngCore>::Item]>>::as_ref(move _7) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:313:20: 313:48 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::slice::<impl [<R as block::BlockRngCore>::Item]>::len(move _5) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_8),
            _8 = move _2,
            _0 = block::BlockRng64::<R> { results: move _8, index: move _4, half_used: const false, core: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:316:9: 316:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:316:9: 316:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:317:5: 317:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:317:5: 317:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:317:6: 317:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:316:9: 316:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:317:5: 317:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:317:5: 317:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:309:5: 317:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: block::BlockRng64<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:309:28: 309:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/block.rs:309:22: 309:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:309:16: 309:20 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:309:16: 309:20 (#0),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:309:16: 309:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:310:29: 310:50 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:310:13: 310:26 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#0,
                ],
                def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:310:13: 310:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:312:13: 312:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:313:20: 313:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:311:9: 316:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:16 ~ rand_core[dfa3]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:313:20: 313:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:311:9: 316:10 (#0),
                },
            ),
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:16 ~ rand_core[dfa3]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:313:20: 313:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:311:9: 316:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:313:20: 313:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#0,
                ],
                def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:315:22: 315:35 (#0),
            scope: scope[0],
        },
    },
]