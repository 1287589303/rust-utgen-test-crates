[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = const 0_usize,
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:224:9: 233:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:224:9: 233:10 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb2, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:224:26: 224:36 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _5 = Lt(move _6, move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:224:15: 224:36 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb17, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = ((*_1).1: usize),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:225:30: 225:51 (#0),
                    scope: scope[1],
                },
                kind: _14 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _15) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:225:30: 225:57 (#0),
                    scope: scope[1],
                },
                kind: _12 = core::slice::<impl [u32]>::len(move _13) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _10 = Ge(move _11, move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:225:16: 225:57 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _10) -> [0: bb9, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:226:17: 226:41 (#0),
                    scope: scope[1],
                },
                kind: _16 = block::BlockRng::<R>::generate_and_set(move _17, const 0_usize) -> [return: bb8, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:225:13: 227:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_12),
            StorageDead(_11),
            _9 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:225:13: 227:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut ((*_1).0: <R as block::BlockRngCore>::Results),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:229:34: 229:55 (#0),
                    scope: scope[1],
                },
                kind: _25 = <<R as block::BlockRngCore>::Results as core::convert::AsMut<[u32]>>::as_mut(move _26) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = &(*_25),
            StorageDead(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = ((*_1).1: usize),
            _27 = core::ops::RangeFrom::<usize> { start: move _28 },
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:229:55: 229:69 (#0),
                    scope: scope[1],
                },
                kind: _23 = <[u32] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _24, move _27) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_24),
            _22 = &(*_23),
            _21 = &(*_22),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut (*_2),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _3,
            _33 = core::ops::RangeFrom::<usize> { start: move _34 },
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:229:80: 229:92 (#0),
                    scope: scope[1],
                },
                kind: _31 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _32, move _33) -> [return: bb13, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            _30 = &mut (*_31),
            _29 = &mut (*_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:229:17: 229:93 (#0),
                    scope: scope[1],
                },
                kind: _20 = impls::fill_via_chunks::<u32>(move _21, move _29) -> [return: bb14, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_21),
            PlaceMention(_20),
            StorageLive(_18),
            _18 = (_20.0: usize),
            StorageLive(_19),
            _19 = (_20.1: usize),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_25),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_20),
            StorageLive(_35),
            _35 = _18,
            _36 = AddWithOverflow(((*_1).1: usize), _35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:231:13: 231:39 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _35) -> [success: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_36.0: usize),
            StorageDead(_35),
            StorageLive(_37),
            _37 = _19,
            _38 = AddWithOverflow(_3, _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:232:13: 232:34 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _37) -> [success: bb16, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_38.0: usize),
            StorageDead(_37),
            _4 = const (),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:224:9: 233:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb1,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_40),
            _0 = const (),
            StorageDead(_40),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:234:6: 234:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:222:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:222:46: 222:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut block::BlockRng<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:222:19: 222:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/block.rs:222:36: 222:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:222:30: 222:34 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:222:30: 222:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:222:30: 222:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:223:28: 223:29 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:223:13: 223:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:223:13: 223:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:222:5: 234:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/block.rs:224:9: 233:10 (#29),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:15: 224:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/block.rs:224:9: 233:10 (#29),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:15: 224:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/block.rs:224:9: 233:10 (#29),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:26: 224:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/block.rs:224:9: 233:10 (#29),
                },
            ),
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:26: 224:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:13: 227:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:16: 225:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:16: 225:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:30: 225:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:30: 225:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:30: 225:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:225:30: 225:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:226:17: 226:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut block::BlockRng<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:226:17: 226:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                rand_core/src/block.rs:229:17: 229:93 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:228:17: 228:42 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:228:18: 228:30 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                rand_core/src/block.rs:229:17: 229:93 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:228:17: 228:42 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:228:32: 228:41 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:17: 229:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:33: 229:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:33: 229:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:55: 229:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:34: 229:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u32],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:34: 229:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:17 ~ rand_core[dfa3]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:34: 229:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:56: 229:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:56: 229:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:71: 229:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:71: 229:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:80: 229:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:76: 229:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeFrom<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:81: 229:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:229:81: 229:89 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:231:27: 231:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:231:13: 231:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:232:25: 232:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:232:13: 232:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/block.rs:224:9: 233:10 (#29),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:9: 233:10 (#29),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:9: 233:10 (#29),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:224:9: 233:10 (#29),
            scope: scope[0],
        },
    },
]