[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:164:9: 164:25 (#0),
                    scope: scope[0],
                },
                kind: _3 = <T as core::ops::DerefMut>::deref_mut(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:164:9: 164:36 (#0),
                    scope: scope[0],
                },
                kind: _0 = <<T as core::ops::Deref>::Target as RngCore>::next_u32(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:165:6: 165:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:163:5: 165:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:163:31: 163:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:163:17: 163:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:164:9: 164:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [T/#0], def_id: DefId(1:3552 ~ core[a245]::ops::deref::Deref::Target) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:164:9: 164:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:164:9: 164:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [T/#0], def_id: DefId(1:3552 ~ core[a245]::ops::deref::Deref::Target) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:164:9: 164:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:164:9: 164:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:164:9: 164:13 (#0),
            scope: scope[0],
        },
    },
]