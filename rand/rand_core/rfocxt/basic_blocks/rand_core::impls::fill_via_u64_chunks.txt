[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &(*_1),
            StorageLive(_4),
            _4 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:157:5: 157:31 (#0),
                    scope: scope[0],
                },
                kind: _0 = impls::fill_via_chunks::<u64>(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:158:2: 158:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:156:1: 158:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:156:65: 156:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/impls.rs:156:33: 156:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:156:28: 156:31 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:156:28: 156:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:156:28: 156:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/impls.rs:156:51: 156:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:156:45: 156:49 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:156:45: 156:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:156:45: 156:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/impls.rs:157:5: 157:31 (#0),
                },
            ),
        ),
        ty: &'{erased} [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:157:21: 157:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/impls.rs:157:5: 157:31 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:157:26: 157:30 (#0),
            scope: scope[0],
        },
    },
]