[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: R),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:308:9: 308:30 (#0),
                    scope: scope[0],
                },
                kind: _2 = <R as TryRngCore>::try_next_u64(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:308:9: 308:39 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<u64, <R as TryRngCore>::Error>::unwrap(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:309:6: 309:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:308:38: 308:39 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/lib.rs:307:5: 309:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:307:31: 307:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut UnwrapErr<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:307:17: 307:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:308:9: 308:39 (#0),
                },
            ),
        ),
        ty: core::result::Result<u64, Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(0:116 ~ rand_core[dfa3]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:308:9: 308:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/lib.rs:308:9: 308:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/lib.rs:308:9: 308:15 (#0),
            scope: scope[0],
        },
    },
]