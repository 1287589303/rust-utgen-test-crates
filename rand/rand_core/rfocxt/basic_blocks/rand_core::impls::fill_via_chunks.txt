[
    BasicBlockData {
        statements: [
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:79:16: 79:41 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::mem::size_of::<T>() -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_2),
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:83:20: 83:47 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::slice::<impl [u8]>::chunks_exact_mut(move _5, move _6) -> [return: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:84:19: 84:29 (#0),
                    scope: scope[2],
                },
                kind: _7 = core::slice::<impl [T]>::iter(move _8) -> [return: bb3, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:86:18: 86:31 (#0),
                    scope: scope[3],
                },
                kind: _11 = <core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::by_ref(move _12) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut (*_11),
            StorageDead(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:86:36: 86:48 (#0),
                    scope: scope[3],
                },
                kind: _13 = <core::slice::Iter<'_, T> as core::iter::Iterator>::by_ref(move _14) -> [return: bb5, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:86:18: 86:49 (#0),
                    scope: scope[3],
                },
                kind: _9 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::zip::<&mut core::slice::Iter<'_, T>>(move _10, move _13) -> [return: bb6, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_11),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:87:22: 87:34 (#0),
                    scope: scope[4],
                },
                kind: _15 = <core::iter::Zip<&mut core::slice::ChunksExactMut<'_, u8>, &mut core::slice::Iter<'_, T>> as core::iter::ExactSizeIterator>::len(move _16) -> [return: bb7, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_17),
            StorageLive(_18),
            _18 = move _9,
            StorageLive(_19),
            _19 = {closure@rand_core/src/impls.rs:88:21: 88:34},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:88:5: 88:84 (#0),
                    scope: scope[5],
                },
                kind: _17 = <core::iter::Zip<&mut core::slice::ChunksExactMut<'_, u8>, &mut core::slice::Iter<'_, T>> as core::iter::Iterator>::for_each::<{closure@rand_core/src/impls.rs:88:21: 88:34}>(move _18, move _19) -> [return: bb8, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _15,
            StorageLive(_22),
            _22 = _3,
            _23 = MulWithOverflow(_21, _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:90:20: 90:37 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, move _22) -> [success: bb9, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = move (_23.0: usize),
            StorageDead(_22),
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:91:24: 91:34 (#0),
                    scope: scope[7],
                },
                kind: _25 = <core::slice::Iter<'_, T> as core::iter::Iterator>::next(move _26) -> [return: bb10, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            PlaceMention(_25),
            _27 = discriminant(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:91:12: 91:21 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _27) -> [1: bb11, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:91:12: 91:21 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_25 as Some).0: &T),
            StorageLive(_29),
            StorageLive(_30),
            _30 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:93:20: 93:41 (#0),
                    scope: scope[7],
                },
                kind: _29 = core::slice::ChunksExactMut::<'_, u8>::into_remainder(move _30) -> [return: bb13, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:94:17: 94:27 (#0),
                    scope: scope[8],
                },
                kind: _31 = core::slice::<impl [u8]>::len(move _32) -> [return: bb14, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageLive(_33),
            StorageLive(_34),
            _34 = _31,
            _33 = Gt(move _34, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:95:12: 95:17 (#0),
                    scope: scope[9],
                },
                kind: switchInt(move _33) -> [0: bb23, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &mut (*_29),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = (*_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:35: 96:52 (#0),
                    scope: scope[9],
                },
                kind: _44 = <T as impls::Observable>::to_le_bytes(move _45) -> [return: bb16, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _43 = &_44,
            StorageDead(_45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:35: 96:61 (#0),
                    scope: scope[9],
                },
                kind: _42 = <<T as impls::Observable>::Bytes as core::convert::AsRef<[u8]>>::as_ref(move _43) -> [return: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &(*_42),
            StorageDead(_43),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _31,
            _46 = core::ops::RangeTo::<usize> { end: move _47 },
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:61: 96:66 (#0),
                    scope: scope[9],
                },
                kind: _40 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _41, move _46) -> [return: bb18, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_41),
            _39 = &(*_40),
            _38 = &(*_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:13: 96:67 (#0),
                    scope: scope[9],
                },
                kind: _36 = core::slice::<impl [u8]>::copy_from_slice(move _37, move _38) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:67: 96:68 (#0),
                    scope: scope[9],
                },
                kind: drop(_44) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_42),
            StorageDead(_40),
            StorageDead(_39),
            StorageDead(_36),
            StorageLive(_48),
            StorageLive(_49),
            _49 = _15,
            _50 = AddWithOverflow(_49, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:97:21: 97:35 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, const 1_usize) -> [success: bb21, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _48 = move (_50.0: usize),
            StorageDead(_49),
            StorageLive(_51),
            StorageLive(_52),
            _52 = _20,
            StorageLive(_53),
            _53 = _31,
            _54 = AddWithOverflow(_52, _53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:97:37: 97:49 (#0),
                    scope: scope[9],
                },
                kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", move _52, move _53) -> [success: bb22, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = move (_54.0: usize),
            StorageDead(_53),
            StorageDead(_52),
            _0 = (move _48, move _51),
            StorageDead(_51),
            StorageDead(_48),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:101:2: 101:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _24 = const (),
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:91:5: 99:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _24 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:91:5: 99:6 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageLive(_55),
            _55 = _15,
            StorageLive(_56),
            _56 = _20,
            _0 = (move _55, move _56),
            StorageDead(_56),
            StorageDead(_55),
            StorageDead(_20),
            StorageDead(_15),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:101:2: 101:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb26,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:101:2: 101:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:96:67: 96:68 (#0),
                    scope: scope[9],
                },
                kind: drop(_44) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/impls.rs:78:1: 101:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:78:77: 78:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/impls.rs:78:51: 78:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:78:46: 78:49 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:78:46: 78:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:78:46: 78:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/impls.rs:78:63: 78:72 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:78:57: 78:61 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:78:57: 78:61 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:78:57: 78:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:79:16: 79:41 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:79:9: 79:13 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:79:9: 79:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:83:20: 83:47 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:83:9: 83:17 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:83:9: 83:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:83:20: 83:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:83:42: 83:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:84:19: 84:29 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:84:9: 84:16 (#0),
                    },
                ),
            ),
        ),
        ty: core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:84:9: 84:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:84:19: 84:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:86:18: 86:49 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:86:9: 86:15 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Zip<&'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>, &'{erased} mut core::slice::Iter<'{erased}, T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:9: 86:15 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:18: 86:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:18: 86:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:18: 86:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:36: 86:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:86:36: 86:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:87:22: 87:34 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:87:9: 87:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:87:9: 87:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::iter::Zip<&'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>, &'{erased} mut core::slice::Iter<'{erased}, T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:87:22: 87:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:88:5: 88:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Zip<&'{erased} mut core::slice::ChunksExactMut<'{erased}, u8>, &'{erased} mut core::slice::Iter<'{erased}, T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:88:5: 88:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:91 ~ rand_core[dfa3]::impls::fill_via_chunks::{closure#0}),
            [
                T/#0,
                i16,
                Binder { value: extern "RustCall" fn(((&'{erased} mut [u8], &'{erased} T/#0),)), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:88:21: 88:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:90:20: 90:37 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:90:9: 90:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:90:9: 90:17 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:90:20: 90:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:90:33: 90:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:90:20: 90:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:91:5: 99:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:91:24: 91:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:91:24: 91:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:91:12: 91:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _25,
                                ),
                                rand_core/src/impls.rs:91:24: 91:34 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:91:12: 91:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:91:17: 91:20 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:93:20: 93:41 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:93:13: 93:17 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:93:13: 93:17 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::ChunksExactMut<'{erased}, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:93:20: 93:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/impls.rs:94:17: 94:27 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/impls.rs:94:13: 94:14 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:94:13: 94:14 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:94:17: 94:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/impls.rs:95:9: 98:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:95:12: 95:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/impls.rs:95:9: 98:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:95:12: 95:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_core/src/impls.rs:95:9: 98:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:95:18: 98:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:13: 96:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:13: 96:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:34: 96:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:34: 96:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:61: 96:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:35: 96:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:35: 96:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [T/#0], def_id: DefId(0:79 ~ rand_core[dfa3]::impls::Observable::Bytes) }),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:35: 96:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    T/#0,
                ],
                def_id: DefId(0:79 ~ rand_core[dfa3]::impls::Observable::Bytes),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:35: 96:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:35: 96:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:62: 96:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:96:64: 96:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:21: 97:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:21: 97:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:21: 97:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:37: 97:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:37: 97:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:48: 97:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:97:37: 97:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/impls.rs:100:5: 100:27 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:100:6: 100:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/impls.rs:100:5: 100:27 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/impls.rs:100:18: 100:26 (#0),
            scope: scope[0],
        },
    },
]