[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:257:9: 257:29 (#0),
                    scope: scope[0],
                },
                kind: _2 = <R as SeedableRng>::try_from_rng::<S>(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:257:9: 257:44 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<R, <S as TryRngCore>::Error>::map::<block::BlockRng<R>, fn(R) -> block::BlockRng<R> {block::BlockRng::<R>::new}>(move _2, block::BlockRng::<R>::new) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:258:6: 258:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:257:43: 257:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_core/src/block.rs:256:5: 258:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<block::BlockRng<R/#0>, Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:116 ~ rand_core[dfa3]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:256:52: 256:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_core/src/block.rs:256:41: 256:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_core/src/block.rs:256:36: 256:39 (#0),
                            ),
                        ),
                        pat_span: rand_core/src/block.rs:256:36: 256:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:256:36: 256:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:257:9: 257:44 (#0),
                },
            ),
        ),
        ty: core::result::Result<R/#0, Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(0:116 ~ rand_core[dfa3]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:257:9: 257:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_core/src/block.rs:257:9: 257:44 (#0),
                },
            ),
        ),
        ty: &'{erased} mut S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_core/src/block.rs:257:25: 257:28 (#0),
            scope: scope[0],
        },
    },
]