bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/lib.rs:484:13-484:21)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:484:24-484:45)
      kind: _2 = <<Self as SeedableRng>::Seed as core::default::Default>::default() -> [return: bb1, unwind: bb27]
  }
  preds []
  succs [bb1, bb27]

bb1
  0: FakeRead(ForLet(None), _2)
    SourceInfo(rand_core/src/lib.rs:484:13-484:21)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/lib.rs:485:13-485:21)
  2: StorageLive(_4)
    SourceInfo(rand_core/src/lib.rs:485:24-485:37)
  3: StorageLive(_5)
    SourceInfo(rand_core/src/lib.rs:485:24-485:37)
  4: StorageLive(_6)
    SourceInfo(rand_core/src/lib.rs:485:24-485:28)
  5: _6 = &mut _2
    SourceInfo(rand_core/src/lib.rs:485:24-485:28)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:485:24-485:37)
      kind: _5 = <<Self as SeedableRng>::Seed as core::convert::AsMut<[u8]>>::as_mut(move _6) -> [return: bb2, unwind: bb26]
  }
  preds [bb0]
  succs [bb2, bb26]

bb2
  0: _4 = &mut (*_5)
    SourceInfo(rand_core/src/lib.rs:485:24-485:37)
  1: StorageDead(_6)
    SourceInfo(rand_core/src/lib.rs:485:36-485:37)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:485:24-485:57)
      kind: _3 = core::slice::<impl [u8]>::chunks_exact_mut(move _4, const 4_usize) -> [return: bb3, unwind: bb26]
  }
  preds [bb1]
  succs [bb3, bb26]

bb3
  0: StorageDead(_4)
    SourceInfo(rand_core/src/lib.rs:485:56-485:57)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(rand_core/src/lib.rs:485:13-485:21)
  2: StorageDead(_5)
    SourceInfo(rand_core/src/lib.rs:485:57-485:58)
  3: StorageLive(_7)
    SourceInfo(rand_core/src/lib.rs:486:9-488:10)
  4: StorageLive(_8)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  5: StorageLive(_9)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  6: _9 = &mut _3
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:22-486:31)
      kind: _8 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::IntoIterator>::into_iter(move _9) -> [return: bb4, unwind: bb26]
  }
  preds [bb2]
  succs [bb4, bb26]

bb4
  0: StorageDead(_9)
    SourceInfo(rand_core/src/lib.rs:486:30-486:31)
  1: PlaceMention(_8)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  2: StorageLive(_10)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  3: _10 = move _8
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:9-488:10)
      kind: goto -> bb5
  }
  preds [bb3]
  succs [bb5]

bb5
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:9-488:10)
      kind: falseUnwind -> [real: bb6, unwind: bb26]
  }
  preds [bb4, bb13]
  succs [bb6, bb26]

bb6
  0: StorageLive(_12)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  1: StorageLive(_13)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  2: StorageLive(_14)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  3: StorageLive(_15)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  4: _15 = &mut _10
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  5: _14 = &mut (*_15)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:22-486:31)
      kind: _13 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::next(move _14) -> [return: bb7, unwind: bb26]
  }
  preds [bb5]
  succs [bb7, bb26]

bb7
  0: StorageDead(_14)
    SourceInfo(rand_core/src/lib.rs:486:30-486:31)
  1: PlaceMention(_13)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  2: _16 = discriminant(_13)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:22-486:31)
      kind: switchInt(move _16) -> [0: bb9, 1: bb10, otherwise: bb8]
  }
  preds [bb6]
  succs [bb8, bb9, bb10]

bb8
  0: FakeRead(ForMatchedPlace(None), _13)
    SourceInfo(rand_core/src/lib.rs:486:22-486:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:22-486:31)
      kind: unreachable
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:9-488:10)
      kind: falseEdge -> [real: bb11, imaginary: bb10]
  }
  preds [bb7]
  succs [bb10, bb11]

bb10
  0: StorageLive(_18)
    SourceInfo(rand_core/src/lib.rs:486:13-486:18)
  1: _18 = move ((_13 as Some).0: &mut [u8])
    SourceInfo(rand_core/src/lib.rs:486:13-486:18)
  2: StorageLive(_19)
    SourceInfo(rand_core/src/lib.rs:487:13-487:54)
  3: StorageLive(_20)
    SourceInfo(rand_core/src/lib.rs:487:13-487:18)
  4: _20 = &mut (*_18)
    SourceInfo(rand_core/src/lib.rs:487:13-487:18)
  5: StorageLive(_21)
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  6: StorageLive(_22)
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  7: StorageLive(_23)
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  8: StorageLive(_24)
    SourceInfo(rand_core/src/lib.rs:487:36-487:53)
  9: StorageLive(_25)
    SourceInfo(rand_core/src/lib.rs:487:42-487:52)
  10: StorageLive(_26)
    SourceInfo(rand_core/src/lib.rs:487:42-487:52)
  11: _26 = &mut _1
    SourceInfo(rand_core/src/lib.rs:487:42-487:52)
  12: _25 = &mut (*_26)
    SourceInfo(rand_core/src/lib.rs:487:42-487:52)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:487:36-487:53)
      kind: _24 = SeedableRng::seed_from_u64::pcg32(move _25) -> [return: bb12, unwind: bb26]
  }
  preds [bb7, bb9]
  succs [bb12, bb26]

bb11
  0: _7 = const ()
    SourceInfo(rand_core/src/lib.rs:486:9-488:10)
  1: StorageDead(_15)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  2: StorageDead(_13)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  3: StorageDead(_12)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  4: StorageDead(_10)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  5: StorageDead(_8)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  6: StorageDead(_7)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  7: StorageLive(_27)
    SourceInfo(rand_core/src/lib.rs:489:13-489:16)
  8: StorageLive(_28)
    SourceInfo(rand_core/src/lib.rs:489:19-489:23)
  9: _28 = move _3
    SourceInfo(rand_core/src/lib.rs:489:19-489:23)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:489:19-489:40)
      kind: _27 = core::slice::ChunksExactMut::<'_, u8>::into_remainder(move _28) -> [return: bb14, unwind: bb26]
  }
  preds [bb9]
  succs [bb14, bb26]

bb12
  0: StorageDead(_25)
    SourceInfo(rand_core/src/lib.rs:487:52-487:53)
  1: _23 = &_24
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  2: _22 = &(*_23)
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  3: _21 = move _22 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(rand_core/src/lib.rs:487:35-487:53)
  4: StorageDead(_22)
    SourceInfo(rand_core/src/lib.rs:487:52-487:53)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:487:13-487:54)
      kind: _19 = core::slice::<impl [u8]>::copy_from_slice(move _20, move _21) -> [return: bb13, unwind: bb26]
  }
  preds [bb10]
  succs [bb13, bb26]

bb13
  0: StorageDead(_21)
    SourceInfo(rand_core/src/lib.rs:487:53-487:54)
  1: StorageDead(_20)
    SourceInfo(rand_core/src/lib.rs:487:53-487:54)
  2: StorageDead(_26)
    SourceInfo(rand_core/src/lib.rs:487:54-487:55)
  3: StorageDead(_24)
    SourceInfo(rand_core/src/lib.rs:487:54-487:55)
  4: StorageDead(_23)
    SourceInfo(rand_core/src/lib.rs:487:54-487:55)
  5: StorageDead(_19)
    SourceInfo(rand_core/src/lib.rs:487:54-487:55)
  6: _12 = const ()
    SourceInfo(rand_core/src/lib.rs:486:32-488:10)
  7: StorageDead(_18)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  8: StorageDead(_15)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  9: StorageDead(_13)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  10: StorageDead(_12)
    SourceInfo(rand_core/src/lib.rs:488:9-488:10)
  11: _11 = const ()
    SourceInfo(rand_core/src/lib.rs:486:9-488:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:486:9-488:10)
      kind: goto -> bb5
  }
  preds [bb12]
  succs [bb5]

bb14
  0: StorageDead(_28)
    SourceInfo(rand_core/src/lib.rs:489:39-489:40)
  1: FakeRead(ForLet(None), _27)
    SourceInfo(rand_core/src/lib.rs:489:13-489:16)
  2: StorageLive(_29)
    SourceInfo(rand_core/src/lib.rs:490:9-492:10)
  3: StorageLive(_30)
    SourceInfo(rand_core/src/lib.rs:490:13-490:27)
  4: StorageLive(_31)
    SourceInfo(rand_core/src/lib.rs:490:13-490:16)
  5: _31 = &(*_27)
    SourceInfo(rand_core/src/lib.rs:490:13-490:16)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:490:13-490:27)
      kind: _30 = core::slice::<impl [u8]>::is_empty(move _31) -> [return: bb15, unwind: bb26]
  }
  preds [bb11]
  succs [bb15, bb26]

bb15
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:490:13-490:27)
      kind: switchInt(move _30) -> [0: bb17, otherwise: bb16]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: StorageDead(_31)
    SourceInfo(rand_core/src/lib.rs:490:26-490:27)
  1: _29 = const ()
    SourceInfo(rand_core/src/lib.rs:492:10-492:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:490:9-492:10)
      kind: goto -> bb22
  }
  preds [bb15]
  succs [bb22]

bb17
  0: StorageDead(_31)
    SourceInfo(rand_core/src/lib.rs:490:26-490:27)
  1: StorageLive(_32)
    SourceInfo(rand_core/src/lib.rs:491:13-491:65)
  2: StorageLive(_33)
    SourceInfo(rand_core/src/lib.rs:491:13-491:16)
  3: _33 = &mut (*_27)
    SourceInfo(rand_core/src/lib.rs:491:13-491:16)
  4: StorageLive(_34)
    SourceInfo(rand_core/src/lib.rs:491:33-491:64)
  5: StorageLive(_35)
    SourceInfo(rand_core/src/lib.rs:491:33-491:64)
  6: StorageLive(_36)
    SourceInfo(rand_core/src/lib.rs:491:51-491:64)
  7: StorageLive(_37)
    SourceInfo(rand_core/src/lib.rs:491:34-491:51)
  8: StorageLive(_38)
    SourceInfo(rand_core/src/lib.rs:491:34-491:51)
  9: StorageLive(_39)
    SourceInfo(rand_core/src/lib.rs:491:40-491:50)
  10: StorageLive(_40)
    SourceInfo(rand_core/src/lib.rs:491:40-491:50)
  11: _40 = &mut _1
    SourceInfo(rand_core/src/lib.rs:491:40-491:50)
  12: _39 = &mut (*_40)
    SourceInfo(rand_core/src/lib.rs:491:40-491:50)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:491:34-491:51)
      kind: _38 = SeedableRng::seed_from_u64::pcg32(move _39) -> [return: bb18, unwind: bb26]
  }
  preds [bb15]
  succs [bb18, bb26]

bb18
  0: _37 = &_38
    SourceInfo(rand_core/src/lib.rs:491:34-491:51)
  1: StorageDead(_39)
    SourceInfo(rand_core/src/lib.rs:491:50-491:51)
  2: StorageLive(_41)
    SourceInfo(rand_core/src/lib.rs:491:52-491:63)
  3: StorageLive(_42)
    SourceInfo(rand_core/src/lib.rs:491:54-491:63)
  4: StorageLive(_43)
    SourceInfo(rand_core/src/lib.rs:491:54-491:57)
  5: _43 = &(*_27)
    SourceInfo(rand_core/src/lib.rs:491:54-491:57)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:491:54-491:63)
      kind: _42 = core::slice::<impl [u8]>::len(move _43) -> [return: bb19, unwind: bb26]
  }
  preds [bb17]
  succs [bb19, bb26]

bb19
  0: StorageDead(_43)
    SourceInfo(rand_core/src/lib.rs:491:62-491:63)
  1: _41 = core::ops::RangeTo::<usize> { end: move _42 }
    SourceInfo(rand_core/src/lib.rs:491:52-491:63)
  2: StorageDead(_42)
    SourceInfo(rand_core/src/lib.rs:491:62-491:63)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:491:51-491:64)
      kind: _36 = <[u8; 4] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _37, move _41) -> [return: bb20, unwind: bb26]
  }
  preds [bb18]
  succs [bb20, bb26]

bb20
  0: StorageDead(_41)
    SourceInfo(rand_core/src/lib.rs:491:63-491:64)
  1: StorageDead(_37)
    SourceInfo(rand_core/src/lib.rs:491:63-491:64)
  2: _35 = &(*_36)
    SourceInfo(rand_core/src/lib.rs:491:33-491:64)
  3: _34 = &(*_35)
    SourceInfo(rand_core/src/lib.rs:491:33-491:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:491:13-491:65)
      kind: _32 = core::slice::<impl [u8]>::copy_from_slice(move _33, move _34) -> [return: bb21, unwind: bb26]
  }
  preds [bb19]
  succs [bb21, bb26]

bb21
  0: StorageDead(_34)
    SourceInfo(rand_core/src/lib.rs:491:64-491:65)
  1: StorageDead(_33)
    SourceInfo(rand_core/src/lib.rs:491:64-491:65)
  2: StorageDead(_40)
    SourceInfo(rand_core/src/lib.rs:491:65-491:66)
  3: StorageDead(_38)
    SourceInfo(rand_core/src/lib.rs:491:65-491:66)
  4: StorageDead(_36)
    SourceInfo(rand_core/src/lib.rs:491:65-491:66)
  5: StorageDead(_35)
    SourceInfo(rand_core/src/lib.rs:491:65-491:66)
  6: StorageDead(_32)
    SourceInfo(rand_core/src/lib.rs:491:65-491:66)
  7: _29 = const ()
    SourceInfo(rand_core/src/lib.rs:490:28-492:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:490:9-492:10)
      kind: goto -> bb22
  }
  preds [bb20]
  succs [bb22]

bb22
  0: StorageDead(_30)
    SourceInfo(rand_core/src/lib.rs:492:9-492:10)
  1: StorageDead(_29)
    SourceInfo(rand_core/src/lib.rs:492:9-492:10)
  2: StorageLive(_44)
    SourceInfo(rand_core/src/lib.rs:494:25-494:29)
  3: _44 = move _2
    SourceInfo(rand_core/src/lib.rs:494:25-494:29)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:494:9-494:30)
      kind: _0 = <Self as SeedableRng>::from_seed(move _44) -> [return: bb23, unwind: bb25]
  }
  preds [bb16, bb21]
  succs [bb23, bb25]

bb23
  0: StorageDead(_44)
    SourceInfo(rand_core/src/lib.rs:494:29-494:30)
  1: StorageDead(_27)
    SourceInfo(rand_core/src/lib.rs:495:5-495:6)
  2: StorageDead(_3)
    SourceInfo(rand_core/src/lib.rs:495:5-495:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:495:5-495:6)
      kind: drop(_2) -> [return: bb24, unwind: bb27]
  }
  preds [bb22]
  succs [bb24, bb27]

bb24
  0: StorageDead(_2)
    SourceInfo(rand_core/src/lib.rs:495:5-495:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:495:6-495:6)
      kind: return
  }
  preds [bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:494:29-494:30)
      kind: drop(_44) -> [return: bb26, unwind terminate(cleanup)]
  }
  preds [bb22]
  succs [bb26]

bb26
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:495:5-495:6)
      kind: drop(_2) -> [return: bb27, unwind terminate(cleanup)]
  }
  preds [bb1, bb2, bb3, bb5, bb6, bb10, bb11, bb12, bb14, bb17, bb18, bb19, bb20, bb25]
  succs [bb27]

bb27
  Terminator {
      source_info: SourceInfo(rand_core/src/lib.rs:466:5-495:6)
      kind: resume
  }
  preds [bb0, bb23, bb26]
  succs []

