bb0
  0: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:341:9-341:53)
  1: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:341:17-341:52)
  2: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:341:17-341:22)
  3: _5 = _2
    SourceInfo(rand_core/src/block.rs:341:17-341:22)
  4: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:341:25-341:52)
  5: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:341:25-341:46)
  6: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:341:25-341:46)
  7: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:341:25-341:37)
  8: _9 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:341:25-341:37)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:341:25-341:46)
      kind: _8 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[<R as block::BlockRngCore>::Item]>>::as_ref(move _9) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _7 = &(*_8)
    SourceInfo(rand_core/src/block.rs:341:25-341:46)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:341:45-341:46)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:341:25-341:52)
      kind: _6 = core::slice::<impl [<R as block::BlockRngCore>::Item]>::len(move _7) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:341:51-341:52)
  1: _4 = Lt(move _5, move _6)
    SourceInfo(rand_core/src/block.rs:341:17-341:52)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:341:17-341:52)
      kind: switchInt(move _4) -> [0: bb4, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:341:51-341:52)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:341:51-341:52)
  2: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:341:52-341:53)
  3: _3 = const ()
    SourceInfo(rand_core/src/block.rs:341:53-341:53)
  4: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:341:52-341:53)
  5: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:341:52-341:53)
  6: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:342:9-342:46)
  7: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:342:9-342:18)
  8: _12 = &mut ((*_1).3: R)
    SourceInfo(rand_core/src/block.rs:342:9-342:18)
  9: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:342:28-342:45)
  10: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:342:28-342:45)
  11: _14 = &mut ((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:342:28-342:45)
  12: _13 = &mut (*_14)
    SourceInfo(rand_core/src/block.rs:342:28-342:45)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:342:9-342:46)
      kind: _11 = <R as block::BlockRngCore>::generate(move _12, move _13) -> [return: bb5, unwind: bb6]
  }
  preds [bb2]
  succs [bb5, bb6]

bb4
  0: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:341:51-341:52)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:341:51-341:52)
  2: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:341:52-341:53)
  3: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:341:9-341:53)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:341:9-341:53)
      kind: _10 = core::panicking::panic(const "assertion failed: index < self.results.as_ref().len()") -> bb6
  }
  preds [bb2]
  succs [bb6]

bb5
  0: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:342:45-342:46)
  1: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:342:45-342:46)
  2: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:342:46-342:47)
  3: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:342:46-342:47)
  4: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:343:22-343:27)
  5: _15 = _2
    SourceInfo(rand_core/src/block.rs:343:22-343:27)
  6: ((*_1).1: usize) = move _15
    SourceInfo(rand_core/src/block.rs:343:9-343:27)
  7: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:343:26-343:27)
  8: ((*_1).2: bool) = const false
    SourceInfo(rand_core/src/block.rs:344:9-344:31)
  9: _0 = const ()
    SourceInfo(rand_core/src/block.rs:340:54-345:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:345:6-345:6)
      kind: return
  }
  preds [bb3]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:340:5-345:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb4]
  succs []

