bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/block.rs:351:13-351:22)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:351:25-351:35)
  2: _3 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:351:25-351:35)
  3: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:351:38-351:61)
  4: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:351:38-351:52)
  5: _5 = ((*_1).2: bool)
    SourceInfo(rand_core/src/block.rs:351:38-351:52)
  6: _4 = move _5 as usize (IntToInt)
    SourceInfo(rand_core/src/block.rs:351:38-351:61)
  7: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:351:60-351:61)
  8: _6 = SubWithOverflow(_3, _4)
    SourceInfo(rand_core/src/block.rs:351:25-351:61)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:351:25-351:61)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _3, move _4) -> [success: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: _2 = move (_6.0: usize)
    SourceInfo(rand_core/src/block.rs:351:25-351:61)
  1: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:351:60-351:61)
  2: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:351:60-351:61)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(rand_core/src/block.rs:351:13-351:22)
  4: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:352:9-358:10)
  5: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:352:12-352:48)
  6: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:352:12-352:17)
  7: _9 = _2
    SourceInfo(rand_core/src/block.rs:352:12-352:17)
  8: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:352:21-352:48)
  9: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:352:21-352:42)
  10: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:352:21-352:42)
  11: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:352:21-352:33)
  12: _13 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:352:21-352:33)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:352:21-352:42)
      kind: _12 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _13) -> [return: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: _11 = &(*_12)
    SourceInfo(rand_core/src/block.rs:352:21-352:42)
  1: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:352:41-352:42)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:352:21-352:48)
      kind: _10 = core::slice::<impl [u64]>::len(move _11) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  1: _8 = Ge(move _9, move _10)
    SourceInfo(rand_core/src/block.rs:352:12-352:48)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:352:12-352:48)
      kind: switchInt(move _8) -> [0: bb6, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  1: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  2: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  3: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:353:13-353:50)
  4: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:353:13-353:22)
  5: _15 = &mut ((*_1).3: R)
    SourceInfo(rand_core/src/block.rs:353:13-353:22)
  6: StorageLive(_16)
    SourceInfo(rand_core/src/block.rs:353:32-353:49)
  7: StorageLive(_17)
    SourceInfo(rand_core/src/block.rs:353:32-353:49)
  8: _17 = &mut ((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:353:32-353:49)
  9: _16 = &mut (*_17)
    SourceInfo(rand_core/src/block.rs:353:32-353:49)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:353:13-353:50)
      kind: _14 = <R as block::BlockRngCore>::generate(move _15, move _16) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_16)
    SourceInfo(rand_core/src/block.rs:353:49-353:50)
  1: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:353:49-353:50)
  2: StorageDead(_17)
    SourceInfo(rand_core/src/block.rs:353:50-353:51)
  3: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:353:50-353:51)
  4: ((*_1).1: usize) = const 0_usize
    SourceInfo(rand_core/src/block.rs:354:13-354:27)
  5: _2 = const 0_usize
    SourceInfo(rand_core/src/block.rs:355:13-355:22)
  6: ((*_1).2: bool) = const false
    SourceInfo(rand_core/src/block.rs:357:13-357:35)
  7: _7 = const ()
    SourceInfo(rand_core/src/block.rs:352:49-358:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:352:9-358:10)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  1: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  2: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:352:47-352:48)
  3: _7 = const ()
    SourceInfo(rand_core/src/block.rs:358:10-358:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:352:9-358:10)
      kind: goto -> bb7
  }
  preds [bb3]
  succs [bb7]

bb7
  0: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:358:9-358:10)
  1: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:358:9-358:10)
  2: StorageLive(_18)
    SourceInfo(rand_core/src/block.rs:360:13-360:18)
  3: StorageLive(_19)
    SourceInfo(rand_core/src/block.rs:360:26-360:51)
  4: StorageLive(_20)
    SourceInfo(rand_core/src/block.rs:360:27-360:41)
  5: _20 = ((*_1).2: bool)
    SourceInfo(rand_core/src/block.rs:360:27-360:41)
  6: _19 = move _20 as usize (IntToInt)
    SourceInfo(rand_core/src/block.rs:360:26-360:51)
  7: StorageDead(_20)
    SourceInfo(rand_core/src/block.rs:360:50-360:51)
  8: _21 = MulWithOverflow(const 32_usize, _19)
    SourceInfo(rand_core/src/block.rs:360:21-360:51)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:360:21-360:51)
      kind: assert(!move (_21.1: bool), "attempt to compute `{} * {}`, which would overflow", const 32_usize, move _19) -> [success: bb8, unwind: bb13]
  }
  preds [bb5, bb6]
  succs [bb8, bb13]

bb8
  0: _18 = move (_21.0: usize)
    SourceInfo(rand_core/src/block.rs:360:21-360:51)
  1: StorageDead(_19)
    SourceInfo(rand_core/src/block.rs:360:50-360:51)
  2: FakeRead(ForLet(None), _18)
    SourceInfo(rand_core/src/block.rs:360:13-360:18)
  3: StorageLive(_22)
    SourceInfo(rand_core/src/block.rs:362:27-362:41)
  4: _22 = ((*_1).2: bool)
    SourceInfo(rand_core/src/block.rs:362:27-362:41)
  5: ((*_1).2: bool) = Not(move _22)
    SourceInfo(rand_core/src/block.rs:362:9-362:41)
  6: StorageDead(_22)
    SourceInfo(rand_core/src/block.rs:362:40-362:41)
  7: StorageLive(_23)
    SourceInfo(rand_core/src/block.rs:363:23-363:46)
  8: StorageLive(_24)
    SourceInfo(rand_core/src/block.rs:363:23-363:37)
  9: _24 = ((*_1).2: bool)
    SourceInfo(rand_core/src/block.rs:363:23-363:37)
  10: _23 = move _24 as usize (IntToInt)
    SourceInfo(rand_core/src/block.rs:363:23-363:46)
  11: StorageDead(_24)
    SourceInfo(rand_core/src/block.rs:363:45-363:46)
  12: _25 = AddWithOverflow(((*_1).1: usize), _23)
    SourceInfo(rand_core/src/block.rs:363:9-363:46)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:363:9-363:46)
      kind: assert(!move (_25.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _23) -> [success: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: ((*_1).1: usize) = move (_25.0: usize)
    SourceInfo(rand_core/src/block.rs:363:9-363:46)
  1: StorageDead(_23)
    SourceInfo(rand_core/src/block.rs:363:45-363:46)
  2: StorageLive(_26)
    SourceInfo(rand_core/src/block.rs:365:9-365:48)
  3: StorageLive(_27)
    SourceInfo(rand_core/src/block.rs:365:10-365:38)
  4: StorageLive(_28)
    SourceInfo(rand_core/src/block.rs:365:10-365:31)
  5: StorageLive(_29)
    SourceInfo(rand_core/src/block.rs:365:10-365:22)
  6: _29 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:365:10-365:22)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:365:10-365:31)
      kind: _28 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _29) -> [return: bb10, unwind: bb13]
  }
  preds [bb8]
  succs [bb10, bb13]

bb10
  0: StorageDead(_29)
    SourceInfo(rand_core/src/block.rs:365:30-365:31)
  1: StorageLive(_30)
    SourceInfo(rand_core/src/block.rs:365:32-365:37)
  2: _30 = _2
    SourceInfo(rand_core/src/block.rs:365:32-365:37)
  3: _31 = Len((*_28))
    SourceInfo(rand_core/src/block.rs:365:10-365:38)
  4: _32 = Lt(_30, _31)
    SourceInfo(rand_core/src/block.rs:365:10-365:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:365:10-365:38)
      kind: assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb11, unwind: bb13]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: _27 = (*_28)[_30]
    SourceInfo(rand_core/src/block.rs:365:10-365:38)
  1: StorageLive(_33)
    SourceInfo(rand_core/src/block.rs:365:42-365:47)
  2: _33 = _18
    SourceInfo(rand_core/src/block.rs:365:42-365:47)
  3: _34 = Lt(_33, const 64_usize)
    SourceInfo(rand_core/src/block.rs:365:9-365:48)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:365:9-365:48)
      kind: assert(move _34, "attempt to shift right by `{}`, which would overflow", _33) -> [success: bb12, unwind: bb13]
  }
  preds [bb10]
  succs [bb12, bb13]

bb12
  0: _26 = Shr(move _27, move _33)
    SourceInfo(rand_core/src/block.rs:365:9-365:48)
  1: StorageDead(_33)
    SourceInfo(rand_core/src/block.rs:365:47-365:48)
  2: StorageDead(_27)
    SourceInfo(rand_core/src/block.rs:365:47-365:48)
  3: _0 = move _26 as u32 (IntToInt)
    SourceInfo(rand_core/src/block.rs:365:9-365:55)
  4: StorageDead(_26)
    SourceInfo(rand_core/src/block.rs:365:54-365:55)
  5: StorageDead(_18)
    SourceInfo(rand_core/src/block.rs:366:5-366:6)
  6: StorageDead(_2)
    SourceInfo(rand_core/src/block.rs:366:5-366:6)
  7: StorageDead(_30)
    SourceInfo(rand_core/src/block.rs:366:5-366:6)
  8: StorageDead(_28)
    SourceInfo(rand_core/src/block.rs:366:5-366:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:366:6-366:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:350:5-366:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb7, bb8, bb9, bb10, bb11]
  succs []

