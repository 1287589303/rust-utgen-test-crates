{
  "name": "rand_core::SeedableRng::try_from_rng",
  "mod_info": {
    "name": "",
    "loc": "rand_core/src/lib.rs:10:1:771:2"
  },
  "visible": true,
  "loc": "rand_core/src/lib.rs:530:5:534:6",
  "doc": "/// Create a new PRNG seeded from a potentially fallible `Rng`.\n///\n/// See [`from_rng`][SeedableRng::from_rng] docs for more information.\n",
  "code": [
    "fn try_from_rng<R: TryRngCore>(rng: &mut R) -> Result<Self, R::Error> {",
    "    let mut seed = Self::Seed::default();",
    "    rng.try_fill_bytes(seed.as_mut())?;",
    "    Ok(Self::from_seed(seed))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "rng.try_fill_bytes(seed.as_mut())?",
          "norm": null,
          "value": "Err/None",
          "line": 532,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "rng.try_fill_bytes(seed.as_mut())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 532,
          "bound": null
        }
      ],
      "ret": "Ok(Self::from_seed(seed))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        10,
        11,
        12,
        13,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}