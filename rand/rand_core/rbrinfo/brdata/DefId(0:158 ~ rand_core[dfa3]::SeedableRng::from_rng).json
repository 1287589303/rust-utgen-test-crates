{
  "name": "rand_core::SeedableRng::from_rng",
  "mod_info": {
    "name": "",
    "loc": "rand_core/src/lib.rs:10:1:771:2"
  },
  "visible": true,
  "loc": "rand_core/src/lib.rs:521:5:525:6",
  "doc": "/// Create a new PRNG seeded from an infallible `Rng`.\n///\n/// This may be useful when needing to rapidly seed many PRNGs from a master\n/// PRNG, and to allow forking of PRNGs. It may be considered deterministic.\n///\n/// The master PRNG should be at least as high quality as the child PRNGs.\n/// When seeding non-cryptographic child PRNGs, we recommend using a\n/// different algorithm for the master PRNG (ideally a CSPRNG) to avoid\n/// correlations between the child PRNGs. If this is not possible (e.g.\n/// forking using small non-crypto PRNGs) ensure that your PRNG has a good\n/// mixing function on the output or consider use of a hash function with\n/// `from_seed`.\n///\n/// Note that seeding `XorShiftRng` from another `XorShiftRng` provides an\n/// extreme example of what can go wrong: the new PRNG will be a clone\n/// of the parent.\n///\n/// PRNG implementations are allowed to assume that a good RNG is provided\n/// for seeding, and that it is cryptographically secure when appropriate.\n/// As of `rand` 0.7 / `rand_core` 0.5, implementations overriding this\n/// method should ensure the implementation satisfies reproducibility\n/// (in prior versions this was not required).\n///\n/// [`rand`]: https://docs.rs/rand\n",
  "code": [
    "fn from_rng(rng: &mut impl RngCore) -> Self {",
    "    let mut seed = Self::Seed::default();",
    "    rng.fill_bytes(seed.as_mut());",
    "    Self::from_seed(seed)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}