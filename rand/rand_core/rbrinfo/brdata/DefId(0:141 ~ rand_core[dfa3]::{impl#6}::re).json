{
  "name": "rand_core::{impl#6}::re",
  "mod_info": {
    "name": "",
    "loc": "rand_core/src/lib.rs:10:1:771:2"
  },
  "visible": true,
  "loc": "rand_core/src/lib.rs:331:5:336:6",
  "doc": "/// Reborrow with a new lifetime\n///\n/// Rust allows references like `&T` or `&mut T` to be \"reborrowed\" through\n/// coercion: essentially, the pointer is copied under a new, shorter, lifetime.\n/// Until rfcs#1403 lands, reborrows on user types require a method call.\n",
  "code": [
    "pub fn re<'b>(&'b mut self) -> UnwrapMut<'b, R>",
    "where",
    "    'r: 'b,",
    "{",
    "    UnwrapMut(self.0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "UnwrapMut(self.0)",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}