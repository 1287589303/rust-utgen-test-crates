{
  "name": "rand_core::SeedableRng::seed_from_u64",
  "mod_info": {
    "name": "",
    "loc": "rand_core/src/lib.rs:10:1:771:2"
  },
  "visible": true,
  "loc": "rand_core/src/lib.rs:466:5:495:6",
  "doc": "/// Create a new PRNG using a `u64` seed.\n///\n/// This is a convenience-wrapper around `from_seed` to allow construction\n/// of any `SeedableRng` from a simple `u64` value. It is designed such that\n/// low Hamming Weight numbers like 0 and 1 can be used and should still\n/// result in good, independent seeds to the PRNG which is returned.\n///\n/// This **is not suitable for cryptography**, as should be clear given that\n/// the input size is only 64 bits.\n///\n/// Implementations for PRNGs *may* provide their own implementations of\n/// this function, but the default implementation should be good enough for\n/// all purposes. *Changing* the implementation of this function should be\n/// considered a value-breaking change.\n",
  "code": [
    "fn seed_from_u64(mut state: u64) -> Self {",
    "    // We use PCG32 to generate a u32 sequence, and copy to the seed",
    "    fn pcg32(state: &mut u64) -> [u8; 4] {",
    "        const MUL: u64 = 6364136223846793005;",
    "        const INC: u64 = 11634580027462260723;",
    "",
    "        // We advance the state first (to get away from the input value,",
    "        // in case it has low Hamming Weight).",
    "        *state = state.wrapping_mul(MUL).wrapping_add(INC);",
    "        let state = *state;",
    "",
    "        // Use PCG output function with to_le to generate x:",
    "        let xorshifted = (((state >> 18) ^ state) >> 27) as u32;",
    "        let rot = (state >> 59) as u32;",
    "        let x = xorshifted.rotate_right(rot);",
    "        x.to_le_bytes()",
    "    }",
    "",
    "    let mut seed = Self::Seed::default();",
    "    let mut iter = seed.as_mut().chunks_exact_mut(4);",
    "    for chunk in &mut iter {",
    "        chunk.copy_from_slice(&pcg32(&mut state));",
    "    }",
    "    let rem = iter.into_remainder();",
    "    if !rem.is_empty() {",
    "        rem.copy_from_slice(&pcg32(&mut state)[..rem.len()]);",
    "    }",
    "",
    "    Self::from_seed(seed)",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "true",
          "line": 486,
          "bound": null
        },
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "false",
          "line": 486,
          "bound": null
        },
        {
          "cond": "rem.is_empty()",
          "norm": null,
          "value": "true",
          "line": 490,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        5,
        6,
        7,
        9,
        11,
        14,
        15,
        16,
        22,
        23,
        24
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "true",
          "line": 486,
          "bound": null
        },
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "false",
          "line": 486,
          "bound": null
        },
        {
          "cond": "rem.is_empty()",
          "norm": null,
          "value": "false",
          "line": 490,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        13,
        5,
        6,
        7,
        9,
        11,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "false",
          "line": 486,
          "bound": null
        },
        {
          "cond": "rem.is_empty()",
          "norm": null,
          "value": "true",
          "line": 490,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        14,
        15,
        16,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "chunk in &mut iter",
          "norm": null,
          "value": "false",
          "line": 486,
          "bound": null
        },
        {
          "cond": "rem.is_empty()",
          "norm": null,
          "value": "false",
          "line": 490,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        14,
        15,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}