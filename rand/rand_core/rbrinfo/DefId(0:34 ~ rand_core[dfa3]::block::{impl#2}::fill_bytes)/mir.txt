bb0
  0: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:223:13-223:25)
  1: _3 = const 0_usize
    SourceInfo(rand_core/src/block.rs:223:28-223:29)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(rand_core/src/block.rs:223:13-223:25)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:224:9-233:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:224:9-233:10)
      kind: falseUnwind -> [real: bb2, unwind: bb18]
  }
  preds [bb0, bb16]
  succs [bb2, bb18]

bb2
  0: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:224:15-224:36)
  1: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:224:15-224:23)
  2: _6 = _3
    SourceInfo(rand_core/src/block.rs:224:15-224:23)
  3: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:224:26-224:36)
  4: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:224:26-224:30)
  5: _8 = &(*_2)
    SourceInfo(rand_core/src/block.rs:224:26-224:30)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:224:26-224:36)
      kind: _7 = core::slice::<impl [u8]>::len(move _8) -> [return: bb3, unwind: bb18]
  }
  preds [bb1]
  succs [bb3, bb18]

bb3
  0: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:224:35-224:36)
  1: _5 = Lt(move _6, move _7)
    SourceInfo(rand_core/src/block.rs:224:15-224:36)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:224:15-224:36)
      kind: switchInt(move _5) -> [0: bb17, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb17]

bb4
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:224:35-224:36)
  1: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:224:35-224:36)
  2: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:225:13-227:14)
  3: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:225:16-225:57)
  4: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:225:16-225:26)
  5: _11 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:225:16-225:26)
  6: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:225:30-225:57)
  7: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:225:30-225:51)
  8: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:225:30-225:51)
  9: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:225:30-225:42)
  10: _15 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:225:30-225:42)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:225:30-225:51)
      kind: _14 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _15) -> [return: bb5, unwind: bb18]
  }
  preds [bb3]
  succs [bb5, bb18]

bb5
  0: _13 = &(*_14)
    SourceInfo(rand_core/src/block.rs:225:30-225:51)
  1: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:225:50-225:51)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:225:30-225:57)
      kind: _12 = core::slice::<impl [u32]>::len(move _13) -> [return: bb6, unwind: bb18]
  }
  preds [bb4]
  succs [bb6, bb18]

bb6
  0: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  1: _10 = Ge(move _11, move _12)
    SourceInfo(rand_core/src/block.rs:225:16-225:57)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:225:16-225:57)
      kind: switchInt(move _10) -> [0: bb9, otherwise: bb7]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  1: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  2: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  3: StorageLive(_16)
    SourceInfo(rand_core/src/block.rs:226:17-226:41)
  4: StorageLive(_17)
    SourceInfo(rand_core/src/block.rs:226:17-226:21)
  5: _17 = &mut (*_1)
    SourceInfo(rand_core/src/block.rs:226:17-226:21)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:226:17-226:41)
      kind: _16 = block::BlockRng::<R>::generate_and_set(move _17, const 0_usize) -> [return: bb8, unwind: bb18]
  }
  preds [bb6]
  succs [bb8, bb18]

bb8
  0: StorageDead(_17)
    SourceInfo(rand_core/src/block.rs:226:40-226:41)
  1: StorageDead(_16)
    SourceInfo(rand_core/src/block.rs:226:41-226:42)
  2: _9 = const ()
    SourceInfo(rand_core/src/block.rs:225:58-227:14)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:225:13-227:14)
      kind: goto -> bb10
  }
  preds [bb7]
  succs [bb10]

bb9
  0: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  1: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  2: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:225:56-225:57)
  3: _9 = const ()
    SourceInfo(rand_core/src/block.rs:227:14-227:14)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:225:13-227:14)
      kind: goto -> bb10
  }
  preds [bb6]
  succs [bb10]

bb10
  0: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:227:13-227:14)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:227:13-227:14)
  2: StorageLive(_20)
    SourceInfo(rand_core/src/block.rs:229:17-229:93)
  3: StorageLive(_21)
    SourceInfo(rand_core/src/block.rs:229:33-229:69)
  4: StorageLive(_22)
    SourceInfo(rand_core/src/block.rs:229:33-229:69)
  5: StorageLive(_23)
    SourceInfo(rand_core/src/block.rs:229:55-229:69)
  6: StorageLive(_24)
    SourceInfo(rand_core/src/block.rs:229:34-229:55)
  7: StorageLive(_25)
    SourceInfo(rand_core/src/block.rs:229:34-229:55)
  8: StorageLive(_26)
    SourceInfo(rand_core/src/block.rs:229:34-229:46)
  9: _26 = &mut ((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:229:34-229:46)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:229:34-229:55)
      kind: _25 = <<R as block::BlockRngCore>::Results as core::convert::AsMut<[u32]>>::as_mut(move _26) -> [return: bb11, unwind: bb18]
  }
  preds [bb8, bb9]
  succs [bb11, bb18]

bb11
  0: _24 = &(*_25)
    SourceInfo(rand_core/src/block.rs:229:34-229:55)
  1: StorageDead(_26)
    SourceInfo(rand_core/src/block.rs:229:54-229:55)
  2: StorageLive(_27)
    SourceInfo(rand_core/src/block.rs:229:56-229:68)
  3: StorageLive(_28)
    SourceInfo(rand_core/src/block.rs:229:56-229:66)
  4: _28 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:229:56-229:66)
  5: _27 = core::ops::RangeFrom::<usize> { start: move _28 }
    SourceInfo(rand_core/src/block.rs:229:56-229:68)
  6: StorageDead(_28)
    SourceInfo(rand_core/src/block.rs:229:67-229:68)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:229:55-229:69)
      kind: _23 = <[u32] as core::ops::Index<core::ops::RangeFrom<usize>>>::index(move _24, move _27) -> [return: bb12, unwind: bb18]
  }
  preds [bb10]
  succs [bb12, bb18]

bb12
  0: StorageDead(_27)
    SourceInfo(rand_core/src/block.rs:229:68-229:69)
  1: StorageDead(_24)
    SourceInfo(rand_core/src/block.rs:229:68-229:69)
  2: _22 = &(*_23)
    SourceInfo(rand_core/src/block.rs:229:33-229:69)
  3: _21 = &(*_22)
    SourceInfo(rand_core/src/block.rs:229:33-229:69)
  4: StorageLive(_29)
    SourceInfo(rand_core/src/block.rs:229:71-229:92)
  5: StorageLive(_30)
    SourceInfo(rand_core/src/block.rs:229:71-229:92)
  6: StorageLive(_31)
    SourceInfo(rand_core/src/block.rs:229:80-229:92)
  7: StorageLive(_32)
    SourceInfo(rand_core/src/block.rs:229:76-229:80)
  8: _32 = &mut (*_2)
    SourceInfo(rand_core/src/block.rs:229:76-229:80)
  9: StorageLive(_33)
    SourceInfo(rand_core/src/block.rs:229:81-229:91)
  10: StorageLive(_34)
    SourceInfo(rand_core/src/block.rs:229:81-229:89)
  11: _34 = _3
    SourceInfo(rand_core/src/block.rs:229:81-229:89)
  12: _33 = core::ops::RangeFrom::<usize> { start: move _34 }
    SourceInfo(rand_core/src/block.rs:229:81-229:91)
  13: StorageDead(_34)
    SourceInfo(rand_core/src/block.rs:229:90-229:91)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:229:80-229:92)
      kind: _31 = <[u8] as core::ops::IndexMut<core::ops::RangeFrom<usize>>>::index_mut(move _32, move _33) -> [return: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  0: StorageDead(_33)
    SourceInfo(rand_core/src/block.rs:229:91-229:92)
  1: StorageDead(_32)
    SourceInfo(rand_core/src/block.rs:229:91-229:92)
  2: _30 = &mut (*_31)
    SourceInfo(rand_core/src/block.rs:229:71-229:92)
  3: _29 = &mut (*_30)
    SourceInfo(rand_core/src/block.rs:229:71-229:92)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:229:17-229:93)
      kind: _20 = impls::fill_via_chunks::<u32>(move _21, move _29) -> [return: bb14, unwind: bb18]
  }
  preds [bb12]
  succs [bb14, bb18]

bb14
  0: StorageDead(_29)
    SourceInfo(rand_core/src/block.rs:229:92-229:93)
  1: StorageDead(_21)
    SourceInfo(rand_core/src/block.rs:229:92-229:93)
  2: PlaceMention(_20)
    SourceInfo(rand_core/src/block.rs:229:17-229:93)
  3: StorageLive(_18)
    SourceInfo(rand_core/src/block.rs:228:18-228:30)
  4: _18 = (_20.0: usize)
    SourceInfo(rand_core/src/block.rs:228:18-228:30)
  5: StorageLive(_19)
    SourceInfo(rand_core/src/block.rs:228:32-228:41)
  6: _19 = (_20.1: usize)
    SourceInfo(rand_core/src/block.rs:228:32-228:41)
  7: StorageDead(_31)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  8: StorageDead(_30)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  9: StorageDead(_25)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  10: StorageDead(_23)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  11: StorageDead(_22)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  12: StorageDead(_20)
    SourceInfo(rand_core/src/block.rs:229:93-229:94)
  13: StorageLive(_35)
    SourceInfo(rand_core/src/block.rs:231:27-231:39)
  14: _35 = _18
    SourceInfo(rand_core/src/block.rs:231:27-231:39)
  15: _36 = AddWithOverflow(((*_1).1: usize), _35)
    SourceInfo(rand_core/src/block.rs:231:13-231:39)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:231:13-231:39)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), move _35) -> [success: bb15, unwind: bb18]
  }
  preds [bb13]
  succs [bb15, bb18]

bb15
  0: ((*_1).1: usize) = move (_36.0: usize)
    SourceInfo(rand_core/src/block.rs:231:13-231:39)
  1: StorageDead(_35)
    SourceInfo(rand_core/src/block.rs:231:38-231:39)
  2: StorageLive(_37)
    SourceInfo(rand_core/src/block.rs:232:25-232:34)
  3: _37 = _19
    SourceInfo(rand_core/src/block.rs:232:25-232:34)
  4: _38 = AddWithOverflow(_3, _37)
    SourceInfo(rand_core/src/block.rs:232:13-232:34)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:232:13-232:34)
      kind: assert(!move (_38.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _37) -> [success: bb16, unwind: bb18]
  }
  preds [bb14]
  succs [bb16, bb18]

bb16
  0: _3 = move (_38.0: usize)
    SourceInfo(rand_core/src/block.rs:232:13-232:34)
  1: StorageDead(_37)
    SourceInfo(rand_core/src/block.rs:232:33-232:34)
  2: _4 = const ()
    SourceInfo(rand_core/src/block.rs:224:37-233:10)
  3: StorageDead(_19)
    SourceInfo(rand_core/src/block.rs:233:9-233:10)
  4: StorageDead(_18)
    SourceInfo(rand_core/src/block.rs:233:9-233:10)
  5: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:233:9-233:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:224:9-233:10)
      kind: goto -> bb1
  }
  preds [bb15]
  succs [bb1]

bb17
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:224:35-224:36)
  1: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:224:35-224:36)
  2: StorageLive(_40)
    SourceInfo(rand_core/src/block.rs:224:9-233:10)
  3: _0 = const ()
    SourceInfo(rand_core/src/block.rs:224:9-233:10)
  4: StorageDead(_40)
    SourceInfo(rand_core/src/block.rs:233:9-233:10)
  5: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:233:9-233:10)
  6: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:234:5-234:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:234:6-234:6)
      kind: return
  }
  preds [bb3]
  succs []

bb18
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:222:5-234:6)
      kind: resume
  }
  preds [bb1, bb2, bb4, bb5, bb7, bb10, bb11, bb12, bb13, bb14, bb15]
  succs []

