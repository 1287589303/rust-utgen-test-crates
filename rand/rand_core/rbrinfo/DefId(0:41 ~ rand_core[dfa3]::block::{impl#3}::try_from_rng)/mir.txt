bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/block.rs:257:9-257:29)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:257:25-257:28)
  2: _3 = &mut (*_1)
    SourceInfo(rand_core/src/block.rs:257:25-257:28)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:257:9-257:29)
      kind: _2 = <R as SeedableRng>::try_from_rng::<S>(move _3) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:257:28-257:29)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:257:9-257:44)
      kind: _0 = core::result::Result::<R, <S as TryRngCore>::Error>::map::<block::BlockRng<R>, fn(R) -> block::BlockRng<R> {block::BlockRng::<R>::new}>(move _2, block::BlockRng::<R>::new) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_2)
    SourceInfo(rand_core/src/block.rs:257:43-257:44)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:258:6-258:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:257:43-257:44)
      kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:256:5-258:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

