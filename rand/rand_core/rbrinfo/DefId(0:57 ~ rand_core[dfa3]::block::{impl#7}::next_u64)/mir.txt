bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/block.rs:370:9-373:10)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:370:12-370:53)
  2: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:370:12-370:22)
  3: _4 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:370:12-370:22)
  4: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:370:26-370:53)
  5: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:370:26-370:47)
  6: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:370:26-370:47)
  7: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:370:26-370:38)
  8: _8 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:370:26-370:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:370:26-370:47)
      kind: _7 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _8) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: _6 = &(*_7)
    SourceInfo(rand_core/src/block.rs:370:26-370:47)
  1: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:370:46-370:47)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:370:26-370:53)
      kind: _5 = core::slice::<impl [u64]>::len(move _6) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  1: _3 = Ge(move _4, move _5)
    SourceInfo(rand_core/src/block.rs:370:12-370:53)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:370:12-370:53)
      kind: switchInt(move _3) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  2: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  3: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:371:13-371:50)
  4: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:371:13-371:22)
  5: _10 = &mut ((*_1).3: R)
    SourceInfo(rand_core/src/block.rs:371:13-371:22)
  6: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:371:32-371:49)
  7: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:371:32-371:49)
  8: _12 = &mut ((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:371:32-371:49)
  9: _11 = &mut (*_12)
    SourceInfo(rand_core/src/block.rs:371:32-371:49)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:371:13-371:50)
      kind: _9 = <R as block::BlockRngCore>::generate(move _10, move _11) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:371:49-371:50)
  1: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:371:49-371:50)
  2: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:371:50-371:51)
  3: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:371:50-371:51)
  4: ((*_1).1: usize) = const 0_usize
    SourceInfo(rand_core/src/block.rs:372:13-372:27)
  5: _2 = const ()
    SourceInfo(rand_core/src/block.rs:370:54-373:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:370:9-373:10)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  2: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:370:52-370:53)
  3: _2 = const ()
    SourceInfo(rand_core/src/block.rs:373:10-373:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:370:9-373:10)
      kind: goto -> bb6
  }
  preds [bb2]
  succs [bb6]

bb6
  0: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:373:9-373:10)
  1: StorageDead(_2)
    SourceInfo(rand_core/src/block.rs:373:9-373:10)
  2: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:375:13-375:18)
  3: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:375:21-375:42)
  4: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:375:21-375:33)
  5: _15 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:375:21-375:33)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:375:21-375:42)
      kind: _14 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u64]>>::as_ref(move _15) -> [return: bb7, unwind: bb10]
  }
  preds [bb4, bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:375:41-375:42)
  1: StorageLive(_16)
    SourceInfo(rand_core/src/block.rs:375:43-375:53)
  2: _16 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:375:43-375:53)
  3: _17 = Len((*_14))
    SourceInfo(rand_core/src/block.rs:375:21-375:54)
  4: _18 = Lt(_16, _17)
    SourceInfo(rand_core/src/block.rs:375:21-375:54)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:375:21-375:54)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: _13 = (*_14)[_16]
    SourceInfo(rand_core/src/block.rs:375:21-375:54)
  1: FakeRead(ForLet(None), _13)
    SourceInfo(rand_core/src/block.rs:375:13-375:18)
  2: StorageDead(_16)
    SourceInfo(rand_core/src/block.rs:375:54-375:55)
  3: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:375:54-375:55)
  4: _19 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(rand_core/src/block.rs:376:9-376:24)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:376:9-376:24)
      kind: assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: ((*_1).1: usize) = move (_19.0: usize)
    SourceInfo(rand_core/src/block.rs:376:9-376:24)
  1: ((*_1).2: bool) = const false
    SourceInfo(rand_core/src/block.rs:377:9-377:31)
  2: _0 = _13
    SourceInfo(rand_core/src/block.rs:378:9-378:14)
  3: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:379:5-379:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:379:6-379:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:369:5-379:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb6, bb7, bb8]
  succs []

