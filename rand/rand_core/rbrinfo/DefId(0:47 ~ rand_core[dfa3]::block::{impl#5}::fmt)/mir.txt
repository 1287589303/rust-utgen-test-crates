bb0
  0: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:296:9-300:49)
  1: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:296:9-300:49)
  2: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:296:9-299:41)
  3: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:296:9-299:41)
  4: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:296:9-298:63)
  5: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:296:9-298:63)
  6: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:296:9-297:39)
  7: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:296:9-297:39)
  8: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:296:9-296:39)
  9: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:296:9-296:39)
  10: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:296:9-296:12)
  11: _13 = &mut (*_2)
    SourceInfo(rand_core/src/block.rs:296:9-296:12)
  12: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:296:26-296:38)
  13: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:296:26-296:38)
  14: _15 = const "BlockRng64"
    SourceInfo(rand_core/src/block.rs:296:26-296:38)
  15: _14 = &(*_15)
    SourceInfo(rand_core/src/block.rs:296:26-296:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-296:39)
      kind: _12 = core::fmt::Formatter::<'_>::debug_struct(move _13, move _14) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: _11 = &mut _12
    SourceInfo(rand_core/src/block.rs:296:9-296:39)
  1: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:296:38-296:39)
  2: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:296:38-296:39)
  3: StorageLive(_16)
    SourceInfo(rand_core/src/block.rs:297:20-297:26)
  4: StorageLive(_17)
    SourceInfo(rand_core/src/block.rs:297:20-297:26)
  5: _17 = const "core"
    SourceInfo(rand_core/src/block.rs:297:20-297:26)
  6: _16 = &(*_17)
    SourceInfo(rand_core/src/block.rs:297:20-297:26)
  7: StorageLive(_18)
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  8: StorageLive(_19)
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  9: StorageLive(_20)
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  10: _20 = &((*_1).3: R)
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  11: _19 = &(*_20)
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  12: _18 = move _19 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(rand_core/src/block.rs:297:28-297:38)
  13: StorageDead(_19)
    SourceInfo(rand_core/src/block.rs:297:37-297:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-297:39)
      kind: _10 = core::fmt::DebugStruct::<'_, '_>::field(move _11, move _16, move _18) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: _9 = &mut (*_10)
    SourceInfo(rand_core/src/block.rs:296:9-297:39)
  1: StorageDead(_18)
    SourceInfo(rand_core/src/block.rs:297:38-297:39)
  2: StorageDead(_16)
    SourceInfo(rand_core/src/block.rs:297:38-297:39)
  3: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:297:38-297:39)
  4: StorageLive(_21)
    SourceInfo(rand_core/src/block.rs:298:20-298:32)
  5: StorageLive(_22)
    SourceInfo(rand_core/src/block.rs:298:20-298:32)
  6: _22 = const "result_len"
    SourceInfo(rand_core/src/block.rs:298:20-298:32)
  7: _21 = &(*_22)
    SourceInfo(rand_core/src/block.rs:298:20-298:32)
  8: StorageLive(_23)
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  9: StorageLive(_24)
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  10: StorageLive(_25)
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  11: StorageLive(_26)
    SourceInfo(rand_core/src/block.rs:298:35-298:62)
  12: StorageLive(_27)
    SourceInfo(rand_core/src/block.rs:298:35-298:56)
  13: StorageLive(_28)
    SourceInfo(rand_core/src/block.rs:298:35-298:56)
  14: StorageLive(_29)
    SourceInfo(rand_core/src/block.rs:298:35-298:47)
  15: _29 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:298:35-298:47)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:298:35-298:56)
      kind: _28 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[<R as block::BlockRngCore>::Item]>>::as_ref(move _29) -> [return: bb3, unwind: bb9]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: _27 = &(*_28)
    SourceInfo(rand_core/src/block.rs:298:35-298:56)
  1: StorageDead(_29)
    SourceInfo(rand_core/src/block.rs:298:55-298:56)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:298:35-298:62)
      kind: _26 = core::slice::<impl [<R as block::BlockRngCore>::Item]>::len(move _27) -> [return: bb4, unwind: bb9]
  }
  preds [bb2]
  succs [bb4, bb9]

bb4
  0: StorageDead(_27)
    SourceInfo(rand_core/src/block.rs:298:61-298:62)
  1: _25 = &_26
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  2: _24 = &(*_25)
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  3: _23 = move _24 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(rand_core/src/block.rs:298:34-298:62)
  4: StorageDead(_24)
    SourceInfo(rand_core/src/block.rs:298:61-298:62)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-298:63)
      kind: _8 = core::fmt::DebugStruct::<'_, '_>::field(move _9, move _21, move _23) -> [return: bb5, unwind: bb9]
  }
  preds [bb3]
  succs [bb5, bb9]

bb5
  0: _7 = &mut (*_8)
    SourceInfo(rand_core/src/block.rs:296:9-298:63)
  1: StorageDead(_23)
    SourceInfo(rand_core/src/block.rs:298:62-298:63)
  2: StorageDead(_21)
    SourceInfo(rand_core/src/block.rs:298:62-298:63)
  3: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:298:62-298:63)
  4: StorageLive(_30)
    SourceInfo(rand_core/src/block.rs:299:20-299:27)
  5: StorageLive(_31)
    SourceInfo(rand_core/src/block.rs:299:20-299:27)
  6: _31 = const "index"
    SourceInfo(rand_core/src/block.rs:299:20-299:27)
  7: _30 = &(*_31)
    SourceInfo(rand_core/src/block.rs:299:20-299:27)
  8: StorageLive(_32)
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  9: StorageLive(_33)
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  10: StorageLive(_34)
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  11: _34 = &((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  12: _33 = &(*_34)
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  13: _32 = move _33 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(rand_core/src/block.rs:299:29-299:40)
  14: StorageDead(_33)
    SourceInfo(rand_core/src/block.rs:299:39-299:40)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-299:41)
      kind: _6 = core::fmt::DebugStruct::<'_, '_>::field(move _7, move _30, move _32) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _5 = &mut (*_6)
    SourceInfo(rand_core/src/block.rs:296:9-299:41)
  1: StorageDead(_32)
    SourceInfo(rand_core/src/block.rs:299:40-299:41)
  2: StorageDead(_30)
    SourceInfo(rand_core/src/block.rs:299:40-299:41)
  3: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:299:40-299:41)
  4: StorageLive(_35)
    SourceInfo(rand_core/src/block.rs:300:20-300:31)
  5: StorageLive(_36)
    SourceInfo(rand_core/src/block.rs:300:20-300:31)
  6: _36 = const "half_used"
    SourceInfo(rand_core/src/block.rs:300:20-300:31)
  7: _35 = &(*_36)
    SourceInfo(rand_core/src/block.rs:300:20-300:31)
  8: StorageLive(_37)
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  9: StorageLive(_38)
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  10: StorageLive(_39)
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  11: _39 = &((*_1).2: bool)
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  12: _38 = &(*_39)
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  13: _37 = move _38 as &dyn core::fmt::Debug (PointerCoercion(Unsize))
    SourceInfo(rand_core/src/block.rs:300:33-300:48)
  14: StorageDead(_38)
    SourceInfo(rand_core/src/block.rs:300:47-300:48)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-300:49)
      kind: _4 = core::fmt::DebugStruct::<'_, '_>::field(move _5, move _35, move _37) -> [return: bb7, unwind: bb9]
  }
  preds [bb5]
  succs [bb7, bb9]

bb7
  0: _3 = &mut (*_4)
    SourceInfo(rand_core/src/block.rs:296:9-300:49)
  1: StorageDead(_37)
    SourceInfo(rand_core/src/block.rs:300:48-300:49)
  2: StorageDead(_35)
    SourceInfo(rand_core/src/block.rs:300:48-300:49)
  3: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:300:48-300:49)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:296:9-301:22)
      kind: _0 = core::fmt::DebugStruct::<'_, '_>::finish(move _3) -> [return: bb8, unwind: bb9]
  }
  preds [bb6]
  succs [bb8, bb9]

bb8
  0: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:301:21-301:22)
  1: StorageDead(_39)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  2: StorageDead(_36)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  3: StorageDead(_34)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  4: StorageDead(_31)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  5: StorageDead(_28)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  6: StorageDead(_26)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  7: StorageDead(_25)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  8: StorageDead(_22)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  9: StorageDead(_20)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  10: StorageDead(_17)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  11: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  12: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  13: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  14: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  15: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  16: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:302:5-302:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:302:6-302:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:295:5-302:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7]
  succs []

