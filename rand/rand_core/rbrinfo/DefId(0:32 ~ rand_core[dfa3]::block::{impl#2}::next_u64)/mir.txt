bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/block.rs:198:13-198:21)
  1: _2 = {closure@rand_core/src/block.rs:198:24: 198:48}
    SourceInfo(rand_core/src/block.rs:198:24-201:10)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(rand_core/src/block.rs:198:13-198:21)
  3: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:203:13-203:16)
  4: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:203:19-203:40)
  5: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:203:19-203:40)
  6: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:203:19-203:31)
  7: _6 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:203:19-203:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:203:19-203:40)
      kind: _5 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _6) -> [return: bb1, unwind: bb25]
  }
  preds []
  succs [bb1, bb25]

bb1
  0: _4 = &(*_5)
    SourceInfo(rand_core/src/block.rs:203:19-203:40)
  1: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:203:39-203:40)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:203:19-203:46)
      kind: _3 = core::slice::<impl [u32]>::len(move _4) -> [return: bb2, unwind: bb25]
  }
  preds [bb0]
  succs [bb2, bb25]

bb2
  0: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:203:45-203:46)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(rand_core/src/block.rs:203:13-203:16)
  2: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:203:46-203:47)
  3: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:205:13-205:18)
  4: _7 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:205:21-205:31)
  5: FakeRead(ForLet(None), _7)
    SourceInfo(rand_core/src/block.rs:205:13-205:18)
  6: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:206:12-206:27)
  7: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:206:12-206:17)
  8: _9 = _7
    SourceInfo(rand_core/src/block.rs:206:12-206:17)
  9: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:206:20-206:27)
  10: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:206:20-206:23)
  11: _11 = _3
    SourceInfo(rand_core/src/block.rs:206:20-206:23)
  12: _12 = SubWithOverflow(_11, const 1_usize)
    SourceInfo(rand_core/src/block.rs:206:20-206:27)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:206:20-206:27)
      kind: assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", move _11, const 1_usize) -> [success: bb3, unwind: bb25]
  }
  preds [bb1]
  succs [bb3, bb25]

bb3
  0: _10 = move (_12.0: usize)
    SourceInfo(rand_core/src/block.rs:206:20-206:27)
  1: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:206:26-206:27)
  2: _8 = Lt(move _9, move _10)
    SourceInfo(rand_core/src/block.rs:206:12-206:27)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:206:12-206:27)
      kind: switchInt(move _8) -> [0: bb8, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:206:26-206:27)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:206:26-206:27)
  2: _13 = AddWithOverflow(((*_1).1: usize), const 2_usize)
    SourceInfo(rand_core/src/block.rs:207:13-207:28)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:207:13-207:28)
      kind: assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 2_usize) -> [success: bb5, unwind: bb25]
  }
  preds [bb3]
  succs [bb5, bb25]

bb5
  0: ((*_1).1: usize) = move (_13.0: usize)
    SourceInfo(rand_core/src/block.rs:207:13-207:28)
  1: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:209:13-209:21)
  2: _14 = &_2
    SourceInfo(rand_core/src/block.rs:209:13-209:21)
  3: StorageLive(_15)
    SourceInfo(rand_core/src/block.rs:209:13-209:51)
  4: StorageLive(_16)
    SourceInfo(rand_core/src/block.rs:209:22-209:43)
  5: StorageLive(_17)
    SourceInfo(rand_core/src/block.rs:209:22-209:43)
  6: StorageLive(_18)
    SourceInfo(rand_core/src/block.rs:209:22-209:34)
  7: _18 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:209:22-209:34)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:209:22-209:43)
      kind: _17 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _18) -> [return: bb6, unwind: bb25]
  }
  preds [bb4]
  succs [bb6, bb25]

bb6
  0: _16 = &(*_17)
    SourceInfo(rand_core/src/block.rs:209:22-209:43)
  1: StorageDead(_18)
    SourceInfo(rand_core/src/block.rs:209:42-209:43)
  2: StorageLive(_19)
    SourceInfo(rand_core/src/block.rs:209:45-209:50)
  3: _19 = _7
    SourceInfo(rand_core/src/block.rs:209:45-209:50)
  4: _15 = (move _16, move _19)
    SourceInfo(rand_core/src/block.rs:209:13-209:51)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:209:13-209:51)
      kind: _0 = <{closure@rand_core/src/block.rs:198:24: 198:48} as core::ops::Fn<(&[u32], usize)>>::call(move _14, move _15) -> [return: bb7, unwind: bb25]
  }
  preds [bb5]
  succs [bb7, bb25]

bb7
  0: StorageDead(_19)
    SourceInfo(rand_core/src/block.rs:209:50-209:51)
  1: StorageDead(_16)
    SourceInfo(rand_core/src/block.rs:209:50-209:51)
  2: StorageDead(_15)
    SourceInfo(rand_core/src/block.rs:209:50-209:51)
  3: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:209:50-209:51)
  4: StorageDead(_17)
    SourceInfo(rand_core/src/block.rs:210:9-210:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:206:9-218:10)
      kind: goto -> bb24
  }
  preds [bb6]
  succs [bb24]

bb8
  0: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:206:26-206:27)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:206:26-206:27)
  2: StorageLive(_20)
    SourceInfo(rand_core/src/block.rs:210:19-210:31)
  3: StorageLive(_21)
    SourceInfo(rand_core/src/block.rs:210:19-210:24)
  4: _21 = _7
    SourceInfo(rand_core/src/block.rs:210:19-210:24)
  5: StorageLive(_22)
    SourceInfo(rand_core/src/block.rs:210:28-210:31)
  6: _22 = _3
    SourceInfo(rand_core/src/block.rs:210:28-210:31)
  7: _20 = Ge(move _21, move _22)
    SourceInfo(rand_core/src/block.rs:210:19-210:31)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:210:19-210:31)
      kind: switchInt(move _20) -> [0: bb13, otherwise: bb9]
  }
  preds [bb3]
  succs [bb9, bb13]

bb9
  0: StorageDead(_22)
    SourceInfo(rand_core/src/block.rs:210:30-210:31)
  1: StorageDead(_21)
    SourceInfo(rand_core/src/block.rs:210:30-210:31)
  2: StorageLive(_23)
    SourceInfo(rand_core/src/block.rs:211:13-211:37)
  3: StorageLive(_24)
    SourceInfo(rand_core/src/block.rs:211:13-211:17)
  4: _24 = &mut (*_1)
    SourceInfo(rand_core/src/block.rs:211:13-211:17)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:211:13-211:37)
      kind: _23 = block::BlockRng::<R>::generate_and_set(move _24, const 2_usize) -> [return: bb10, unwind: bb25]
  }
  preds [bb8]
  succs [bb10, bb25]

bb10
  0: StorageDead(_24)
    SourceInfo(rand_core/src/block.rs:211:36-211:37)
  1: StorageDead(_23)
    SourceInfo(rand_core/src/block.rs:211:37-211:38)
  2: StorageLive(_25)
    SourceInfo(rand_core/src/block.rs:212:13-212:21)
  3: _25 = &_2
    SourceInfo(rand_core/src/block.rs:212:13-212:21)
  4: StorageLive(_26)
    SourceInfo(rand_core/src/block.rs:212:13-212:47)
  5: StorageLive(_27)
    SourceInfo(rand_core/src/block.rs:212:22-212:43)
  6: StorageLive(_28)
    SourceInfo(rand_core/src/block.rs:212:22-212:43)
  7: StorageLive(_29)
    SourceInfo(rand_core/src/block.rs:212:22-212:34)
  8: _29 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:212:22-212:34)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:212:22-212:43)
      kind: _28 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _29) -> [return: bb11, unwind: bb25]
  }
  preds [bb9]
  succs [bb11, bb25]

bb11
  0: _27 = &(*_28)
    SourceInfo(rand_core/src/block.rs:212:22-212:43)
  1: StorageDead(_29)
    SourceInfo(rand_core/src/block.rs:212:42-212:43)
  2: _26 = (move _27, const 0_usize)
    SourceInfo(rand_core/src/block.rs:212:13-212:47)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:212:13-212:47)
      kind: _0 = <{closure@rand_core/src/block.rs:198:24: 198:48} as core::ops::Fn<(&[u32], usize)>>::call(move _25, move _26) -> [return: bb12, unwind: bb25]
  }
  preds [bb10]
  succs [bb12, bb25]

bb12
  0: StorageDead(_27)
    SourceInfo(rand_core/src/block.rs:212:46-212:47)
  1: StorageDead(_26)
    SourceInfo(rand_core/src/block.rs:212:46-212:47)
  2: StorageDead(_25)
    SourceInfo(rand_core/src/block.rs:212:46-212:47)
  3: StorageDead(_28)
    SourceInfo(rand_core/src/block.rs:213:9-213:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:210:16-218:10)
      kind: goto -> bb23
  }
  preds [bb11]
  succs [bb23]

bb13
  0: StorageDead(_22)
    SourceInfo(rand_core/src/block.rs:210:30-210:31)
  1: StorageDead(_21)
    SourceInfo(rand_core/src/block.rs:210:30-210:31)
  2: StorageLive(_30)
    SourceInfo(rand_core/src/block.rs:214:17-214:18)
  3: StorageLive(_31)
    SourceInfo(rand_core/src/block.rs:214:31-214:61)
  4: StorageLive(_32)
    SourceInfo(rand_core/src/block.rs:214:31-214:52)
  5: StorageLive(_33)
    SourceInfo(rand_core/src/block.rs:214:31-214:43)
  6: _33 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:214:31-214:43)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:214:31-214:52)
      kind: _32 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _33) -> [return: bb14, unwind: bb25]
  }
  preds [bb8]
  succs [bb14, bb25]

bb14
  0: StorageDead(_33)
    SourceInfo(rand_core/src/block.rs:214:51-214:52)
  1: StorageLive(_34)
    SourceInfo(rand_core/src/block.rs:214:53-214:60)
  2: StorageLive(_35)
    SourceInfo(rand_core/src/block.rs:214:53-214:56)
  3: _35 = _3
    SourceInfo(rand_core/src/block.rs:214:53-214:56)
  4: _36 = SubWithOverflow(_35, const 1_usize)
    SourceInfo(rand_core/src/block.rs:214:53-214:60)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:214:53-214:60)
      kind: assert(!move (_36.1: bool), "attempt to compute `{} - {}`, which would overflow", move _35, const 1_usize) -> [success: bb15, unwind: bb25]
  }
  preds [bb13]
  succs [bb15, bb25]

bb15
  0: _34 = move (_36.0: usize)
    SourceInfo(rand_core/src/block.rs:214:53-214:60)
  1: StorageDead(_35)
    SourceInfo(rand_core/src/block.rs:214:59-214:60)
  2: _37 = Len((*_32))
    SourceInfo(rand_core/src/block.rs:214:31-214:61)
  3: _38 = Lt(_34, _37)
    SourceInfo(rand_core/src/block.rs:214:31-214:61)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:214:31-214:61)
      kind: assert(move _38, "index out of bounds: the length is {} but the index is {}", move _37, _34) -> [success: bb16, unwind: bb25]
  }
  preds [bb14]
  succs [bb16, bb25]

bb16
  0: _31 = (*_32)[_34]
    SourceInfo(rand_core/src/block.rs:214:31-214:61)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:214:21-214:62)
      kind: _30 = <u64 as core::convert::From<u32>>::from(move _31) -> [return: bb17, unwind: bb25]
  }
  preds [bb15]
  succs [bb17, bb25]

bb17
  0: StorageDead(_31)
    SourceInfo(rand_core/src/block.rs:214:61-214:62)
  1: FakeRead(ForLet(None), _30)
    SourceInfo(rand_core/src/block.rs:214:17-214:18)
  2: StorageDead(_34)
    SourceInfo(rand_core/src/block.rs:214:62-214:63)
  3: StorageDead(_32)
    SourceInfo(rand_core/src/block.rs:214:62-214:63)
  4: StorageLive(_39)
    SourceInfo(rand_core/src/block.rs:215:13-215:37)
  5: StorageLive(_40)
    SourceInfo(rand_core/src/block.rs:215:13-215:17)
  6: _40 = &mut (*_1)
    SourceInfo(rand_core/src/block.rs:215:13-215:17)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:215:13-215:37)
      kind: _39 = block::BlockRng::<R>::generate_and_set(move _40, const 1_usize) -> [return: bb18, unwind: bb25]
  }
  preds [bb16]
  succs [bb18, bb25]

bb18
  0: StorageDead(_40)
    SourceInfo(rand_core/src/block.rs:215:36-215:37)
  1: StorageDead(_39)
    SourceInfo(rand_core/src/block.rs:215:37-215:38)
  2: StorageLive(_41)
    SourceInfo(rand_core/src/block.rs:216:17-216:18)
  3: StorageLive(_42)
    SourceInfo(rand_core/src/block.rs:216:31-216:55)
  4: StorageLive(_43)
    SourceInfo(rand_core/src/block.rs:216:31-216:52)
  5: StorageLive(_44)
    SourceInfo(rand_core/src/block.rs:216:31-216:43)
  6: _44 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:216:31-216:43)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:216:31-216:52)
      kind: _43 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _44) -> [return: bb19, unwind: bb25]
  }
  preds [bb17]
  succs [bb19, bb25]

bb19
  0: StorageDead(_44)
    SourceInfo(rand_core/src/block.rs:216:51-216:52)
  1: StorageLive(_45)
    SourceInfo(rand_core/src/block.rs:216:53-216:54)
  2: _45 = const 0_usize
    SourceInfo(rand_core/src/block.rs:216:53-216:54)
  3: _46 = Len((*_43))
    SourceInfo(rand_core/src/block.rs:216:31-216:55)
  4: _47 = Lt(_45, _46)
    SourceInfo(rand_core/src/block.rs:216:31-216:55)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:216:31-216:55)
      kind: assert(move _47, "index out of bounds: the length is {} but the index is {}", move _46, _45) -> [success: bb20, unwind: bb25]
  }
  preds [bb18]
  succs [bb20, bb25]

bb20
  0: _42 = (*_43)[_45]
    SourceInfo(rand_core/src/block.rs:216:31-216:55)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:216:21-216:56)
      kind: _41 = <u64 as core::convert::From<u32>>::from(move _42) -> [return: bb21, unwind: bb25]
  }
  preds [bb19]
  succs [bb21, bb25]

bb21
  0: StorageDead(_42)
    SourceInfo(rand_core/src/block.rs:216:55-216:56)
  1: FakeRead(ForLet(None), _41)
    SourceInfo(rand_core/src/block.rs:216:17-216:18)
  2: StorageDead(_45)
    SourceInfo(rand_core/src/block.rs:216:56-216:57)
  3: StorageDead(_43)
    SourceInfo(rand_core/src/block.rs:216:56-216:57)
  4: StorageLive(_48)
    SourceInfo(rand_core/src/block.rs:217:13-217:22)
  5: StorageLive(_49)
    SourceInfo(rand_core/src/block.rs:217:14-217:15)
  6: _49 = _41
    SourceInfo(rand_core/src/block.rs:217:14-217:15)
  7: _50 = const 32_i32 as u32 (IntToInt)
    SourceInfo(rand_core/src/block.rs:217:13-217:22)
  8: _51 = Lt(move _50, const 64_u32)
    SourceInfo(rand_core/src/block.rs:217:13-217:22)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:217:13-217:22)
      kind: assert(move _51, "attempt to shift left by `{}`, which would overflow", const 32_i32) -> [success: bb22, unwind: bb25]
  }
  preds [bb20]
  succs [bb22, bb25]

bb22
  0: _48 = Shl(move _49, const 32_i32)
    SourceInfo(rand_core/src/block.rs:217:13-217:22)
  1: StorageDead(_49)
    SourceInfo(rand_core/src/block.rs:217:21-217:22)
  2: StorageLive(_52)
    SourceInfo(rand_core/src/block.rs:217:25-217:26)
  3: _52 = _30
    SourceInfo(rand_core/src/block.rs:217:25-217:26)
  4: _0 = BitOr(move _48, move _52)
    SourceInfo(rand_core/src/block.rs:217:13-217:26)
  5: StorageDead(_52)
    SourceInfo(rand_core/src/block.rs:217:25-217:26)
  6: StorageDead(_48)
    SourceInfo(rand_core/src/block.rs:217:25-217:26)
  7: StorageDead(_41)
    SourceInfo(rand_core/src/block.rs:218:9-218:10)
  8: StorageDead(_30)
    SourceInfo(rand_core/src/block.rs:218:9-218:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:210:16-218:10)
      kind: goto -> bb23
  }
  preds [bb21]
  succs [bb23]

bb23
  0: StorageDead(_20)
    SourceInfo(rand_core/src/block.rs:218:9-218:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:206:9-218:10)
      kind: goto -> bb24
  }
  preds [bb12, bb22]
  succs [bb24]

bb24
  0: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:218:9-218:10)
  1: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:219:5-219:6)
  2: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:219:5-219:6)
  3: StorageDead(_2)
    SourceInfo(rand_core/src/block.rs:219:5-219:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:219:6-219:6)
      kind: return
  }
  preds [bb7, bb23]
  succs []

bb25
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:197:5-219:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb6, bb9, bb10, bb11, bb13, bb14, bb15, bb16, bb17, bb18, bb19, bb20, bb21]
  succs []

