bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/impls.rs:25:9-25:10)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/impls.rs:25:23-25:37)
  2: StorageLive(_4)
    SourceInfo(rand_core/src/impls.rs:25:23-25:26)
  3: _4 = &mut (*_1)
    SourceInfo(rand_core/src/impls.rs:25:23-25:26)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:25:23-25:37)
      kind: _3 = <R as RngCore>::next_u32(move _4) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_4)
    SourceInfo(rand_core/src/impls.rs:25:36-25:37)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:25:13-25:38)
      kind: _2 = <u64 as core::convert::From<u32>>::from(move _3) -> [return: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: StorageDead(_3)
    SourceInfo(rand_core/src/impls.rs:25:37-25:38)
  1: FakeRead(ForLet(None), _2)
    SourceInfo(rand_core/src/impls.rs:25:9-25:10)
  2: StorageLive(_5)
    SourceInfo(rand_core/src/impls.rs:26:9-26:10)
  3: StorageLive(_6)
    SourceInfo(rand_core/src/impls.rs:26:23-26:37)
  4: StorageLive(_7)
    SourceInfo(rand_core/src/impls.rs:26:23-26:26)
  5: _7 = &mut (*_1)
    SourceInfo(rand_core/src/impls.rs:26:23-26:26)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:26:23-26:37)
      kind: _6 = <R as RngCore>::next_u32(move _7) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_7)
    SourceInfo(rand_core/src/impls.rs:26:36-26:37)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:26:13-26:38)
      kind: _5 = <u64 as core::convert::From<u32>>::from(move _6) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_6)
    SourceInfo(rand_core/src/impls.rs:26:37-26:38)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(rand_core/src/impls.rs:26:9-26:10)
  2: StorageLive(_8)
    SourceInfo(rand_core/src/impls.rs:27:5-27:14)
  3: StorageLive(_9)
    SourceInfo(rand_core/src/impls.rs:27:6-27:7)
  4: _9 = _5
    SourceInfo(rand_core/src/impls.rs:27:6-27:7)
  5: _10 = const 32_i32 as u32 (IntToInt)
    SourceInfo(rand_core/src/impls.rs:27:5-27:14)
  6: _11 = Lt(move _10, const 64_u32)
    SourceInfo(rand_core/src/impls.rs:27:5-27:14)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:27:5-27:14)
      kind: assert(move _11, "attempt to shift left by `{}`, which would overflow", const 32_i32) -> [success: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: _8 = Shl(move _9, const 32_i32)
    SourceInfo(rand_core/src/impls.rs:27:5-27:14)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/impls.rs:27:13-27:14)
  2: StorageLive(_12)
    SourceInfo(rand_core/src/impls.rs:27:17-27:18)
  3: _12 = _2
    SourceInfo(rand_core/src/impls.rs:27:17-27:18)
  4: _0 = BitOr(move _8, move _12)
    SourceInfo(rand_core/src/impls.rs:27:5-27:18)
  5: StorageDead(_12)
    SourceInfo(rand_core/src/impls.rs:27:17-27:18)
  6: StorageDead(_8)
    SourceInfo(rand_core/src/impls.rs:27:17-27:18)
  7: StorageDead(_5)
    SourceInfo(rand_core/src/impls.rs:28:1-28:2)
  8: StorageDead(_2)
    SourceInfo(rand_core/src/impls.rs:28:1-28:2)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:28:2-28:2)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:23:1-28:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

