bb0
  0: StorageLive(_2)
    SourceInfo(rand_core/src/block.rs:187:9-189:10)
  1: StorageLive(_3)
    SourceInfo(rand_core/src/block.rs:187:12-187:53)
  2: StorageLive(_4)
    SourceInfo(rand_core/src/block.rs:187:12-187:22)
  3: _4 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:187:12-187:22)
  4: StorageLive(_5)
    SourceInfo(rand_core/src/block.rs:187:26-187:53)
  5: StorageLive(_6)
    SourceInfo(rand_core/src/block.rs:187:26-187:47)
  6: StorageLive(_7)
    SourceInfo(rand_core/src/block.rs:187:26-187:47)
  7: StorageLive(_8)
    SourceInfo(rand_core/src/block.rs:187:26-187:38)
  8: _8 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:187:26-187:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:187:26-187:47)
      kind: _7 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _8) -> [return: bb1, unwind: bb10]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: _6 = &(*_7)
    SourceInfo(rand_core/src/block.rs:187:26-187:47)
  1: StorageDead(_8)
    SourceInfo(rand_core/src/block.rs:187:46-187:47)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:187:26-187:53)
      kind: _5 = core::slice::<impl [u32]>::len(move _6) -> [return: bb2, unwind: bb10]
  }
  preds [bb0]
  succs [bb2, bb10]

bb2
  0: StorageDead(_6)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  1: _3 = Ge(move _4, move _5)
    SourceInfo(rand_core/src/block.rs:187:12-187:53)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:187:12-187:53)
      kind: switchInt(move _3) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  2: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  3: StorageLive(_9)
    SourceInfo(rand_core/src/block.rs:188:13-188:37)
  4: StorageLive(_10)
    SourceInfo(rand_core/src/block.rs:188:13-188:17)
  5: _10 = &mut (*_1)
    SourceInfo(rand_core/src/block.rs:188:13-188:17)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:188:13-188:37)
      kind: _9 = block::BlockRng::<R>::generate_and_set(move _10, const 0_usize) -> [return: bb4, unwind: bb10]
  }
  preds [bb2]
  succs [bb4, bb10]

bb4
  0: StorageDead(_10)
    SourceInfo(rand_core/src/block.rs:188:36-188:37)
  1: StorageDead(_9)
    SourceInfo(rand_core/src/block.rs:188:37-188:38)
  2: _2 = const ()
    SourceInfo(rand_core/src/block.rs:187:54-189:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:187:9-189:10)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb5
  0: StorageDead(_7)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  2: StorageDead(_4)
    SourceInfo(rand_core/src/block.rs:187:52-187:53)
  3: _2 = const ()
    SourceInfo(rand_core/src/block.rs:189:10-189:10)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:187:9-189:10)
      kind: goto -> bb6
  }
  preds [bb2]
  succs [bb6]

bb6
  0: StorageDead(_3)
    SourceInfo(rand_core/src/block.rs:189:9-189:10)
  1: StorageDead(_2)
    SourceInfo(rand_core/src/block.rs:189:9-189:10)
  2: StorageLive(_11)
    SourceInfo(rand_core/src/block.rs:191:13-191:18)
  3: StorageLive(_12)
    SourceInfo(rand_core/src/block.rs:191:21-191:42)
  4: StorageLive(_13)
    SourceInfo(rand_core/src/block.rs:191:21-191:33)
  5: _13 = &((*_1).0: <R as block::BlockRngCore>::Results)
    SourceInfo(rand_core/src/block.rs:191:21-191:33)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:191:21-191:42)
      kind: _12 = <<R as block::BlockRngCore>::Results as core::convert::AsRef<[u32]>>::as_ref(move _13) -> [return: bb7, unwind: bb10]
  }
  preds [bb4, bb5]
  succs [bb7, bb10]

bb7
  0: StorageDead(_13)
    SourceInfo(rand_core/src/block.rs:191:41-191:42)
  1: StorageLive(_14)
    SourceInfo(rand_core/src/block.rs:191:43-191:53)
  2: _14 = ((*_1).1: usize)
    SourceInfo(rand_core/src/block.rs:191:43-191:53)
  3: _15 = Len((*_12))
    SourceInfo(rand_core/src/block.rs:191:21-191:54)
  4: _16 = Lt(_14, _15)
    SourceInfo(rand_core/src/block.rs:191:21-191:54)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:191:21-191:54)
      kind: assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> [success: bb8, unwind: bb10]
  }
  preds [bb6]
  succs [bb8, bb10]

bb8
  0: _11 = (*_12)[_14]
    SourceInfo(rand_core/src/block.rs:191:21-191:54)
  1: FakeRead(ForLet(None), _11)
    SourceInfo(rand_core/src/block.rs:191:13-191:18)
  2: StorageDead(_14)
    SourceInfo(rand_core/src/block.rs:191:54-191:55)
  3: StorageDead(_12)
    SourceInfo(rand_core/src/block.rs:191:54-191:55)
  4: _17 = AddWithOverflow(((*_1).1: usize), const 1_usize)
    SourceInfo(rand_core/src/block.rs:192:9-192:24)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:192:9-192:24)
      kind: assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb9, unwind: bb10]
  }
  preds [bb7]
  succs [bb9, bb10]

bb9
  0: ((*_1).1: usize) = move (_17.0: usize)
    SourceInfo(rand_core/src/block.rs:192:9-192:24)
  1: _0 = _11
    SourceInfo(rand_core/src/block.rs:193:9-193:14)
  2: StorageDead(_11)
    SourceInfo(rand_core/src/block.rs:194:5-194:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:194:6-194:6)
      kind: return
  }
  preds [bb8]
  succs []

bb10
  Terminator {
      source_info: SourceInfo(rand_core/src/block.rs:186:5-194:6)
      kind: resume
  }
  preds [bb0, bb1, bb3, bb6, bb7, bb8]
  succs []

