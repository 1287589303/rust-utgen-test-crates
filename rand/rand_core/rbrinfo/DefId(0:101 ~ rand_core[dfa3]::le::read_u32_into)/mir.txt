bb0
  0: StorageLive(_3)
    SourceInfo(rand_core/src/le.rs:22:5-22:40)
  1: StorageLive(_4)
    SourceInfo(rand_core/src/le.rs:22:13-22:39)
  2: StorageLive(_5)
    SourceInfo(rand_core/src/le.rs:22:13-22:22)
  3: StorageLive(_6)
    SourceInfo(rand_core/src/le.rs:22:13-22:16)
  4: _6 = &(*_1)
    SourceInfo(rand_core/src/le.rs:22:13-22:16)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:22:13-22:22)
      kind: _5 = core::slice::<impl [u8]>::len(move _6) -> [return: bb1, unwind: bb20]
  }
  preds []
  succs [bb1, bb20]

bb1
  0: StorageDead(_6)
    SourceInfo(rand_core/src/le.rs:22:21-22:22)
  1: StorageLive(_7)
    SourceInfo(rand_core/src/le.rs:22:26-22:39)
  2: StorageLive(_8)
    SourceInfo(rand_core/src/le.rs:22:30-22:39)
  3: StorageLive(_9)
    SourceInfo(rand_core/src/le.rs:22:30-22:33)
  4: _9 = &(*_2)
    SourceInfo(rand_core/src/le.rs:22:30-22:33)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:22:30-22:39)
      kind: _8 = core::slice::<impl [u32]>::len(move _9) -> [return: bb2, unwind: bb20]
  }
  preds [bb0]
  succs [bb2, bb20]

bb2
  0: StorageDead(_9)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  1: _10 = MulWithOverflow(const 4_usize, _8)
    SourceInfo(rand_core/src/le.rs:22:26-22:39)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:22:26-22:39)
      kind: assert(!move (_10.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, move _8) -> [success: bb3, unwind: bb20]
  }
  preds [bb1]
  succs [bb3, bb20]

bb3
  0: _7 = move (_10.0: usize)
    SourceInfo(rand_core/src/le.rs:22:26-22:39)
  1: StorageDead(_8)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  2: _4 = Ge(move _5, move _7)
    SourceInfo(rand_core/src/le.rs:22:13-22:39)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:22:13-22:39)
      kind: switchInt(move _4) -> [0: bb5, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_7)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  2: _3 = const ()
    SourceInfo(rand_core/src/le.rs:22:40-22:40)
  3: StorageDead(_4)
    SourceInfo(rand_core/src/le.rs:22:39-22:40)
  4: StorageDead(_3)
    SourceInfo(rand_core/src/le.rs:22:39-22:40)
  5: StorageLive(_12)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  6: StorageLive(_13)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  7: StorageLive(_14)
    SourceInfo(rand_core/src/le.rs:23:25-23:39)
  8: StorageLive(_15)
    SourceInfo(rand_core/src/le.rs:23:25-23:28)
  9: _15 = &mut (*_2)
    SourceInfo(rand_core/src/le.rs:23:25-23:28)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:39)
      kind: _14 = core::slice::<impl [u32]>::iter_mut(move _15) -> [return: bb6, unwind: bb20]
  }
  preds [bb3]
  succs [bb6, bb20]

bb5
  0: StorageDead(_7)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/le.rs:22:38-22:39)
  2: StorageLive(_11)
    SourceInfo(rand_core/src/le.rs:22:5-22:40)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:22:5-22:40)
      kind: _11 = core::panicking::panic(const "assertion failed: src.len() >= 4 * dst.len()") -> bb20
  }
  preds [bb3]
  succs [bb20]

bb6
  0: StorageDead(_15)
    SourceInfo(rand_core/src/le.rs:23:38-23:39)
  1: StorageLive(_16)
    SourceInfo(rand_core/src/le.rs:23:44-23:63)
  2: StorageLive(_17)
    SourceInfo(rand_core/src/le.rs:23:44-23:47)
  3: _17 = &(*_1)
    SourceInfo(rand_core/src/le.rs:23:44-23:47)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:44-23:63)
      kind: _16 = core::slice::<impl [u8]>::chunks_exact(move _17, const 4_usize) -> [return: bb7, unwind: bb20]
  }
  preds [bb4]
  succs [bb7, bb20]

bb7
  0: StorageDead(_17)
    SourceInfo(rand_core/src/le.rs:23:62-23:63)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:64)
      kind: _13 = <core::slice::IterMut<'_, u32> as core::iter::Iterator>::zip::<core::slice::ChunksExact<'_, u8>>(move _14, move _16) -> [return: bb8, unwind: bb20]
  }
  preds [bb6]
  succs [bb8, bb20]

bb8
  0: StorageDead(_16)
    SourceInfo(rand_core/src/le.rs:23:63-23:64)
  1: StorageDead(_14)
    SourceInfo(rand_core/src/le.rs:23:63-23:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:64)
      kind: _12 = <core::iter::Zip<core::slice::IterMut<'_, u32>, core::slice::ChunksExact<'_, u8>> as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb9, unwind: bb20]
  }
  preds [bb7]
  succs [bb9, bb20]

bb9
  0: StorageDead(_13)
    SourceInfo(rand_core/src/le.rs:23:63-23:64)
  1: PlaceMention(_12)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  2: StorageLive(_18)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  3: _18 = move _12
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:5-25:6)
      kind: goto -> bb10
  }
  preds [bb8]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:5-25:6)
      kind: falseUnwind -> [real: bb11, unwind: bb20]
  }
  preds [bb9, bb19]
  succs [bb11, bb20]

bb11
  0: StorageLive(_20)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  1: StorageLive(_21)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  2: StorageLive(_22)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  3: StorageLive(_23)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  4: _23 = &mut _18
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  5: _22 = &mut (*_23)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:64)
      kind: _21 = <core::iter::Zip<core::slice::IterMut<'_, u32>, core::slice::ChunksExact<'_, u8>> as core::iter::Iterator>::next(move _22) -> [return: bb12, unwind: bb20]
  }
  preds [bb10]
  succs [bb12, bb20]

bb12
  0: StorageDead(_22)
    SourceInfo(rand_core/src/le.rs:23:63-23:64)
  1: PlaceMention(_21)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  2: _24 = discriminant(_21)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:64)
      kind: switchInt(move _24) -> [0: bb14, 1: bb15, otherwise: bb13]
  }
  preds [bb11]
  succs [bb13, bb14, bb15]

bb13
  0: FakeRead(ForMatchedPlace(None), _21)
    SourceInfo(rand_core/src/le.rs:23:25-23:64)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:25-23:64)
      kind: unreachable
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:5-25:6)
      kind: falseEdge -> [real: bb16, imaginary: bb15]
  }
  preds [bb12]
  succs [bb15, bb16]

bb15
  0: StorageLive(_26)
    SourceInfo(rand_core/src/le.rs:23:10-23:13)
  1: _26 = move (((_21 as Some).0: (&mut u32, &[u8])).0: &mut u32)
    SourceInfo(rand_core/src/le.rs:23:10-23:13)
  2: StorageLive(_27)
    SourceInfo(rand_core/src/le.rs:23:15-23:20)
  3: _27 = (((_21 as Some).0: (&mut u32, &[u8])).1: &[u8])
    SourceInfo(rand_core/src/le.rs:23:15-23:20)
  4: StorageLive(_28)
    SourceInfo(rand_core/src/le.rs:24:16-24:61)
  5: StorageLive(_29)
    SourceInfo(rand_core/src/le.rs:24:35-24:60)
  6: StorageLive(_30)
    SourceInfo(rand_core/src/le.rs:24:35-24:51)
  7: StorageLive(_31)
    SourceInfo(rand_core/src/le.rs:24:35-24:40)
  8: _31 = &(*_27)
    SourceInfo(rand_core/src/le.rs:24:35-24:40)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:24:35-24:51)
      kind: _30 = <&[u8] as core::convert::TryInto<[u8; 4]>>::try_into(move _31) -> [return: bb17, unwind: bb20]
  }
  preds [bb12, bb14]
  succs [bb17, bb20]

bb16
  0: _0 = const ()
    SourceInfo(rand_core/src/le.rs:23:5-25:6)
  1: StorageDead(_23)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  2: StorageDead(_21)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  3: StorageDead(_20)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  4: StorageDead(_18)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  5: StorageDead(_12)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:26:2-26:2)
      kind: return
  }
  preds [bb14]
  succs []

bb17
  0: StorageDead(_31)
    SourceInfo(rand_core/src/le.rs:24:50-24:51)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:24:35-24:60)
      kind: _29 = core::result::Result::<[u8; 4], core::array::TryFromSliceError>::unwrap(move _30) -> [return: bb18, unwind: bb20]
  }
  preds [bb15]
  succs [bb18, bb20]

bb18
  0: StorageDead(_30)
    SourceInfo(rand_core/src/le.rs:24:59-24:60)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:24:16-24:61)
      kind: _28 = core::num::<impl u32>::from_le_bytes(move _29) -> [return: bb19, unwind: bb20]
  }
  preds [bb17]
  succs [bb19, bb20]

bb19
  0: StorageDead(_29)
    SourceInfo(rand_core/src/le.rs:24:60-24:61)
  1: (*_26) = move _28
    SourceInfo(rand_core/src/le.rs:24:9-24:61)
  2: StorageDead(_28)
    SourceInfo(rand_core/src/le.rs:24:60-24:61)
  3: _20 = const ()
    SourceInfo(rand_core/src/le.rs:23:65-25:6)
  4: StorageDead(_27)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  5: StorageDead(_26)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  6: StorageDead(_23)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  7: StorageDead(_21)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  8: StorageDead(_20)
    SourceInfo(rand_core/src/le.rs:25:5-25:6)
  9: _19 = const ()
    SourceInfo(rand_core/src/le.rs:23:5-25:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:23:5-25:6)
      kind: goto -> bb10
  }
  preds [bb18]
  succs [bb10]

bb20
  Terminator {
      source_info: SourceInfo(rand_core/src/le.rs:21:1-26:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb4, bb5, bb6, bb7, bb8, bb10, bb11, bb15, bb17, bb18]
  succs []

