bb0
  0: StorageLive(_3)
    SourceInfo(rand_core/src/impls.rs:79:9-79:13)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:79:16-79:41)
      kind: _3 = core::mem::size_of::<T>() -> [return: bb1, unwind: bb28]
  }
  preds []
  succs [bb1, bb28]

bb1
  0: FakeRead(ForLet(None), _3)
    SourceInfo(rand_core/src/impls.rs:79:9-79:13)
  1: StorageLive(_4)
    SourceInfo(rand_core/src/impls.rs:83:9-83:17)
  2: StorageLive(_5)
    SourceInfo(rand_core/src/impls.rs:83:20-83:24)
  3: _5 = &mut (*_2)
    SourceInfo(rand_core/src/impls.rs:83:20-83:24)
  4: StorageLive(_6)
    SourceInfo(rand_core/src/impls.rs:83:42-83:46)
  5: _6 = _3
    SourceInfo(rand_core/src/impls.rs:83:42-83:46)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:83:20-83:47)
      kind: _4 = core::slice::<impl [u8]>::chunks_exact_mut(move _5, move _6) -> [return: bb2, unwind: bb28]
  }
  preds [bb0]
  succs [bb2, bb28]

bb2
  0: StorageDead(_6)
    SourceInfo(rand_core/src/impls.rs:83:46-83:47)
  1: StorageDead(_5)
    SourceInfo(rand_core/src/impls.rs:83:46-83:47)
  2: FakeRead(ForLet(None), _4)
    SourceInfo(rand_core/src/impls.rs:83:9-83:17)
  3: StorageLive(_7)
    SourceInfo(rand_core/src/impls.rs:84:9-84:16)
  4: StorageLive(_8)
    SourceInfo(rand_core/src/impls.rs:84:19-84:22)
  5: _8 = &(*_1)
    SourceInfo(rand_core/src/impls.rs:84:19-84:22)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:84:19-84:29)
      kind: _7 = core::slice::<impl [T]>::iter(move _8) -> [return: bb3, unwind: bb28]
  }
  preds [bb1]
  succs [bb3, bb28]

bb3
  0: StorageDead(_8)
    SourceInfo(rand_core/src/impls.rs:84:28-84:29)
  1: FakeRead(ForLet(None), _7)
    SourceInfo(rand_core/src/impls.rs:84:9-84:16)
  2: StorageLive(_9)
    SourceInfo(rand_core/src/impls.rs:86:9-86:15)
  3: StorageLive(_10)
    SourceInfo(rand_core/src/impls.rs:86:18-86:31)
  4: StorageLive(_11)
    SourceInfo(rand_core/src/impls.rs:86:18-86:31)
  5: StorageLive(_12)
    SourceInfo(rand_core/src/impls.rs:86:18-86:22)
  6: _12 = &mut _4
    SourceInfo(rand_core/src/impls.rs:86:18-86:22)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:86:18-86:31)
      kind: _11 = <core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::by_ref(move _12) -> [return: bb4, unwind: bb28]
  }
  preds [bb2]
  succs [bb4, bb28]

bb4
  0: _10 = &mut (*_11)
    SourceInfo(rand_core/src/impls.rs:86:18-86:31)
  1: StorageDead(_12)
    SourceInfo(rand_core/src/impls.rs:86:30-86:31)
  2: StorageLive(_13)
    SourceInfo(rand_core/src/impls.rs:86:36-86:48)
  3: StorageLive(_14)
    SourceInfo(rand_core/src/impls.rs:86:36-86:39)
  4: _14 = &mut _7
    SourceInfo(rand_core/src/impls.rs:86:36-86:39)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:86:36-86:48)
      kind: _13 = <core::slice::Iter<'_, T> as core::iter::Iterator>::by_ref(move _14) -> [return: bb5, unwind: bb28]
  }
  preds [bb3]
  succs [bb5, bb28]

bb5
  0: StorageDead(_14)
    SourceInfo(rand_core/src/impls.rs:86:47-86:48)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:86:18-86:49)
      kind: _9 = <&mut core::slice::ChunksExactMut<'_, u8> as core::iter::Iterator>::zip::<&mut core::slice::Iter<'_, T>>(move _10, move _13) -> [return: bb6, unwind: bb28]
  }
  preds [bb4]
  succs [bb6, bb28]

bb6
  0: StorageDead(_13)
    SourceInfo(rand_core/src/impls.rs:86:48-86:49)
  1: StorageDead(_10)
    SourceInfo(rand_core/src/impls.rs:86:48-86:49)
  2: FakeRead(ForLet(None), _9)
    SourceInfo(rand_core/src/impls.rs:86:9-86:15)
  3: StorageDead(_11)
    SourceInfo(rand_core/src/impls.rs:86:49-86:50)
  4: StorageLive(_15)
    SourceInfo(rand_core/src/impls.rs:87:9-87:19)
  5: StorageLive(_16)
    SourceInfo(rand_core/src/impls.rs:87:22-87:28)
  6: _16 = &_9
    SourceInfo(rand_core/src/impls.rs:87:22-87:28)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:87:22-87:34)
      kind: _15 = <core::iter::Zip<&mut core::slice::ChunksExactMut<'_, u8>, &mut core::slice::Iter<'_, T>> as core::iter::ExactSizeIterator>::len(move _16) -> [return: bb7, unwind: bb28]
  }
  preds [bb5]
  succs [bb7, bb28]

bb7
  0: StorageDead(_16)
    SourceInfo(rand_core/src/impls.rs:87:33-87:34)
  1: FakeRead(ForLet(None), _15)
    SourceInfo(rand_core/src/impls.rs:87:9-87:19)
  2: StorageLive(_17)
    SourceInfo(rand_core/src/impls.rs:88:5-88:84)
  3: StorageLive(_18)
    SourceInfo(rand_core/src/impls.rs:88:5-88:11)
  4: _18 = move _9
    SourceInfo(rand_core/src/impls.rs:88:5-88:11)
  5: StorageLive(_19)
    SourceInfo(rand_core/src/impls.rs:88:21-88:83)
  6: _19 = {closure@rand_core/src/impls.rs:88:21: 88:34}
    SourceInfo(rand_core/src/impls.rs:88:21-88:83)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:88:5-88:84)
      kind: _17 = <core::iter::Zip<&mut core::slice::ChunksExactMut<'_, u8>, &mut core::slice::Iter<'_, T>> as core::iter::Iterator>::for_each::<{closure@rand_core/src/impls.rs:88:21: 88:34}>(move _18, move _19) -> [return: bb8, unwind: bb28]
  }
  preds [bb6]
  succs [bb8, bb28]

bb8
  0: StorageDead(_19)
    SourceInfo(rand_core/src/impls.rs:88:83-88:84)
  1: StorageDead(_18)
    SourceInfo(rand_core/src/impls.rs:88:83-88:84)
  2: StorageDead(_17)
    SourceInfo(rand_core/src/impls.rs:88:84-88:85)
  3: StorageLive(_20)
    SourceInfo(rand_core/src/impls.rs:90:9-90:17)
  4: StorageLive(_21)
    SourceInfo(rand_core/src/impls.rs:90:20-90:30)
  5: _21 = _15
    SourceInfo(rand_core/src/impls.rs:90:20-90:30)
  6: StorageLive(_22)
    SourceInfo(rand_core/src/impls.rs:90:33-90:37)
  7: _22 = _3
    SourceInfo(rand_core/src/impls.rs:90:33-90:37)
  8: _23 = MulWithOverflow(_21, _22)
    SourceInfo(rand_core/src/impls.rs:90:20-90:37)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:90:20-90:37)
      kind: assert(!move (_23.1: bool), "attempt to compute `{} * {}`, which would overflow", move _21, move _22) -> [success: bb9, unwind: bb28]
  }
  preds [bb7]
  succs [bb9, bb28]

bb9
  0: _20 = move (_23.0: usize)
    SourceInfo(rand_core/src/impls.rs:90:20-90:37)
  1: StorageDead(_22)
    SourceInfo(rand_core/src/impls.rs:90:36-90:37)
  2: StorageDead(_21)
    SourceInfo(rand_core/src/impls.rs:90:36-90:37)
  3: FakeRead(ForLet(None), _20)
    SourceInfo(rand_core/src/impls.rs:90:9-90:17)
  4: StorageLive(_24)
    SourceInfo(rand_core/src/impls.rs:91:5-99:6)
  5: StorageLive(_25)
    SourceInfo(rand_core/src/impls.rs:91:24-91:34)
  6: StorageLive(_26)
    SourceInfo(rand_core/src/impls.rs:91:24-91:27)
  7: _26 = &mut _7
    SourceInfo(rand_core/src/impls.rs:91:24-91:27)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:91:24-91:34)
      kind: _25 = <core::slice::Iter<'_, T> as core::iter::Iterator>::next(move _26) -> [return: bb10, unwind: bb28]
  }
  preds [bb8]
  succs [bb10, bb28]

bb10
  0: StorageDead(_26)
    SourceInfo(rand_core/src/impls.rs:91:33-91:34)
  1: PlaceMention(_25)
    SourceInfo(rand_core/src/impls.rs:91:24-91:34)
  2: _27 = discriminant(_25)
    SourceInfo(rand_core/src/impls.rs:91:24-91:34)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:91:12-91:21)
      kind: switchInt(move _27) -> [1: bb11, otherwise: bb24]
  }
  preds [bb9]
  succs [bb11, bb24]

bb11
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:91:12-91:21)
      kind: falseEdge -> [real: bb12, imaginary: bb24]
  }
  preds [bb10]
  succs [bb12, bb24]

bb12
  0: StorageLive(_28)
    SourceInfo(rand_core/src/impls.rs:91:17-91:20)
  1: _28 = ((_25 as Some).0: &T)
    SourceInfo(rand_core/src/impls.rs:91:17-91:20)
  2: StorageLive(_29)
    SourceInfo(rand_core/src/impls.rs:93:13-93:17)
  3: StorageLive(_30)
    SourceInfo(rand_core/src/impls.rs:93:20-93:24)
  4: _30 = move _4
    SourceInfo(rand_core/src/impls.rs:93:20-93:24)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:93:20-93:41)
      kind: _29 = core::slice::ChunksExactMut::<'_, u8>::into_remainder(move _30) -> [return: bb13, unwind: bb28]
  }
  preds [bb11]
  succs [bb13, bb28]

bb13
  0: StorageDead(_30)
    SourceInfo(rand_core/src/impls.rs:93:40-93:41)
  1: FakeRead(ForLet(None), _29)
    SourceInfo(rand_core/src/impls.rs:93:13-93:17)
  2: StorageLive(_31)
    SourceInfo(rand_core/src/impls.rs:94:13-94:14)
  3: StorageLive(_32)
    SourceInfo(rand_core/src/impls.rs:94:17-94:21)
  4: _32 = &(*_29)
    SourceInfo(rand_core/src/impls.rs:94:17-94:21)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:94:17-94:27)
      kind: _31 = core::slice::<impl [u8]>::len(move _32) -> [return: bb14, unwind: bb28]
  }
  preds [bb12]
  succs [bb14, bb28]

bb14
  0: StorageDead(_32)
    SourceInfo(rand_core/src/impls.rs:94:26-94:27)
  1: FakeRead(ForLet(None), _31)
    SourceInfo(rand_core/src/impls.rs:94:13-94:14)
  2: StorageLive(_33)
    SourceInfo(rand_core/src/impls.rs:95:12-95:17)
  3: StorageLive(_34)
    SourceInfo(rand_core/src/impls.rs:95:12-95:13)
  4: _34 = _31
    SourceInfo(rand_core/src/impls.rs:95:12-95:13)
  5: _33 = Gt(move _34, const 0_usize)
    SourceInfo(rand_core/src/impls.rs:95:12-95:17)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:95:12-95:17)
      kind: switchInt(move _33) -> [0: bb23, otherwise: bb15]
  }
  preds [bb13]
  succs [bb15, bb23]

bb15
  0: StorageDead(_34)
    SourceInfo(rand_core/src/impls.rs:95:16-95:17)
  1: StorageLive(_36)
    SourceInfo(rand_core/src/impls.rs:96:13-96:67)
  2: StorageLive(_37)
    SourceInfo(rand_core/src/impls.rs:96:13-96:17)
  3: _37 = &mut (*_29)
    SourceInfo(rand_core/src/impls.rs:96:13-96:17)
  4: StorageLive(_38)
    SourceInfo(rand_core/src/impls.rs:96:34-96:66)
  5: StorageLive(_39)
    SourceInfo(rand_core/src/impls.rs:96:34-96:66)
  6: StorageLive(_40)
    SourceInfo(rand_core/src/impls.rs:96:61-96:66)
  7: StorageLive(_41)
    SourceInfo(rand_core/src/impls.rs:96:35-96:61)
  8: StorageLive(_42)
    SourceInfo(rand_core/src/impls.rs:96:35-96:61)
  9: StorageLive(_43)
    SourceInfo(rand_core/src/impls.rs:96:35-96:52)
  10: StorageLive(_44)
    SourceInfo(rand_core/src/impls.rs:96:35-96:52)
  11: StorageLive(_45)
    SourceInfo(rand_core/src/impls.rs:96:35-96:38)
  12: _45 = (*_28)
    SourceInfo(rand_core/src/impls.rs:96:35-96:38)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:35-96:52)
      kind: _44 = <T as impls::Observable>::to_le_bytes(move _45) -> [return: bb16, unwind: bb28]
  }
  preds [bb14]
  succs [bb16, bb28]

bb16
  0: _43 = &_44
    SourceInfo(rand_core/src/impls.rs:96:35-96:52)
  1: StorageDead(_45)
    SourceInfo(rand_core/src/impls.rs:96:51-96:52)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:35-96:61)
      kind: _42 = <<T as impls::Observable>::Bytes as core::convert::AsRef<[u8]>>::as_ref(move _43) -> [return: bb17, unwind: bb27]
  }
  preds [bb15]
  succs [bb17, bb27]

bb17
  0: _41 = &(*_42)
    SourceInfo(rand_core/src/impls.rs:96:35-96:61)
  1: StorageDead(_43)
    SourceInfo(rand_core/src/impls.rs:96:60-96:61)
  2: StorageLive(_46)
    SourceInfo(rand_core/src/impls.rs:96:62-96:65)
  3: StorageLive(_47)
    SourceInfo(rand_core/src/impls.rs:96:64-96:65)
  4: _47 = _31
    SourceInfo(rand_core/src/impls.rs:96:64-96:65)
  5: _46 = core::ops::RangeTo::<usize> { end: move _47 }
    SourceInfo(rand_core/src/impls.rs:96:62-96:65)
  6: StorageDead(_47)
    SourceInfo(rand_core/src/impls.rs:96:64-96:65)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:61-96:66)
      kind: _40 = <[u8] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _41, move _46) -> [return: bb18, unwind: bb27]
  }
  preds [bb16]
  succs [bb18, bb27]

bb18
  0: StorageDead(_46)
    SourceInfo(rand_core/src/impls.rs:96:65-96:66)
  1: StorageDead(_41)
    SourceInfo(rand_core/src/impls.rs:96:65-96:66)
  2: _39 = &(*_40)
    SourceInfo(rand_core/src/impls.rs:96:34-96:66)
  3: _38 = &(*_39)
    SourceInfo(rand_core/src/impls.rs:96:34-96:66)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:13-96:67)
      kind: _36 = core::slice::<impl [u8]>::copy_from_slice(move _37, move _38) -> [return: bb19, unwind: bb27]
  }
  preds [bb17]
  succs [bb19, bb27]

bb19
  0: StorageDead(_38)
    SourceInfo(rand_core/src/impls.rs:96:66-96:67)
  1: StorageDead(_37)
    SourceInfo(rand_core/src/impls.rs:96:66-96:67)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:67-96:68)
      kind: drop(_44) -> [return: bb20, unwind: bb28]
  }
  preds [bb18]
  succs [bb20, bb28]

bb20
  0: StorageDead(_44)
    SourceInfo(rand_core/src/impls.rs:96:67-96:68)
  1: StorageDead(_42)
    SourceInfo(rand_core/src/impls.rs:96:67-96:68)
  2: StorageDead(_40)
    SourceInfo(rand_core/src/impls.rs:96:67-96:68)
  3: StorageDead(_39)
    SourceInfo(rand_core/src/impls.rs:96:67-96:68)
  4: StorageDead(_36)
    SourceInfo(rand_core/src/impls.rs:96:67-96:68)
  5: StorageLive(_48)
    SourceInfo(rand_core/src/impls.rs:97:21-97:35)
  6: StorageLive(_49)
    SourceInfo(rand_core/src/impls.rs:97:21-97:31)
  7: _49 = _15
    SourceInfo(rand_core/src/impls.rs:97:21-97:31)
  8: _50 = AddWithOverflow(_49, const 1_usize)
    SourceInfo(rand_core/src/impls.rs:97:21-97:35)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:97:21-97:35)
      kind: assert(!move (_50.1: bool), "attempt to compute `{} + {}`, which would overflow", move _49, const 1_usize) -> [success: bb21, unwind: bb28]
  }
  preds [bb19]
  succs [bb21, bb28]

bb21
  0: _48 = move (_50.0: usize)
    SourceInfo(rand_core/src/impls.rs:97:21-97:35)
  1: StorageDead(_49)
    SourceInfo(rand_core/src/impls.rs:97:34-97:35)
  2: StorageLive(_51)
    SourceInfo(rand_core/src/impls.rs:97:37-97:49)
  3: StorageLive(_52)
    SourceInfo(rand_core/src/impls.rs:97:37-97:45)
  4: _52 = _20
    SourceInfo(rand_core/src/impls.rs:97:37-97:45)
  5: StorageLive(_53)
    SourceInfo(rand_core/src/impls.rs:97:48-97:49)
  6: _53 = _31
    SourceInfo(rand_core/src/impls.rs:97:48-97:49)
  7: _54 = AddWithOverflow(_52, _53)
    SourceInfo(rand_core/src/impls.rs:97:37-97:49)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:97:37-97:49)
      kind: assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", move _52, move _53) -> [success: bb22, unwind: bb28]
  }
  preds [bb20]
  succs [bb22, bb28]

bb22
  0: _51 = move (_54.0: usize)
    SourceInfo(rand_core/src/impls.rs:97:37-97:49)
  1: StorageDead(_53)
    SourceInfo(rand_core/src/impls.rs:97:48-97:49)
  2: StorageDead(_52)
    SourceInfo(rand_core/src/impls.rs:97:48-97:49)
  3: _0 = (move _48, move _51)
    SourceInfo(rand_core/src/impls.rs:97:20-97:50)
  4: StorageDead(_51)
    SourceInfo(rand_core/src/impls.rs:97:49-97:50)
  5: StorageDead(_48)
    SourceInfo(rand_core/src/impls.rs:97:49-97:50)
  6: StorageDead(_33)
    SourceInfo(rand_core/src/impls.rs:98:9-98:10)
  7: StorageDead(_31)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  8: StorageDead(_29)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  9: StorageDead(_28)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  10: StorageDead(_25)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  11: StorageDead(_24)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  12: StorageDead(_20)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  13: StorageDead(_15)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  14: StorageDead(_9)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  15: StorageDead(_7)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  16: StorageDead(_4)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  17: StorageDead(_3)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:101:2-101:2)
      kind: goto -> bb26
  }
  preds [bb21]
  succs [bb26]

bb23
  0: StorageDead(_34)
    SourceInfo(rand_core/src/impls.rs:95:16-95:17)
  1: _24 = const ()
    SourceInfo(rand_core/src/impls.rs:98:10-98:10)
  2: StorageDead(_33)
    SourceInfo(rand_core/src/impls.rs:98:9-98:10)
  3: StorageDead(_31)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  4: StorageDead(_29)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  5: StorageDead(_28)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:91:5-99:6)
      kind: goto -> bb25
  }
  preds [bb14]
  succs [bb25]

bb24
  0: _24 = const ()
    SourceInfo(rand_core/src/impls.rs:99:6-99:6)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:91:5-99:6)
      kind: goto -> bb25
  }
  preds [bb10, bb11]
  succs [bb25]

bb25
  0: StorageDead(_25)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  1: StorageDead(_24)
    SourceInfo(rand_core/src/impls.rs:99:5-99:6)
  2: StorageLive(_55)
    SourceInfo(rand_core/src/impls.rs:100:6-100:16)
  3: _55 = _15
    SourceInfo(rand_core/src/impls.rs:100:6-100:16)
  4: StorageLive(_56)
    SourceInfo(rand_core/src/impls.rs:100:18-100:26)
  5: _56 = _20
    SourceInfo(rand_core/src/impls.rs:100:18-100:26)
  6: _0 = (move _55, move _56)
    SourceInfo(rand_core/src/impls.rs:100:5-100:27)
  7: StorageDead(_56)
    SourceInfo(rand_core/src/impls.rs:100:26-100:27)
  8: StorageDead(_55)
    SourceInfo(rand_core/src/impls.rs:100:26-100:27)
  9: StorageDead(_20)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  10: StorageDead(_15)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  11: StorageDead(_9)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  12: StorageDead(_7)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  13: StorageDead(_4)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  14: StorageDead(_3)
    SourceInfo(rand_core/src/impls.rs:101:1-101:2)
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:101:2-101:2)
      kind: goto -> bb26
  }
  preds [bb23, bb24]
  succs [bb26]

bb26
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:101:2-101:2)
      kind: return
  }
  preds [bb22, bb25]
  succs []

bb27
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:96:67-96:68)
      kind: drop(_44) -> [return: bb28, unwind terminate(cleanup)]
  }
  preds [bb16, bb17, bb18]
  succs [bb28]

bb28
  Terminator {
      source_info: SourceInfo(rand_core/src/impls.rs:78:1-101:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb12, bb13, bb15, bb19, bb20, bb21, bb27]
  succs []

