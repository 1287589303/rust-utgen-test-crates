[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R, Rsdr>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:100:9: 100:23 (#0),
                    scope: scope[0],
                },
                kind: _2 = rand_core::block::BlockRng::<rngs::reseeding::ReseedingCore<R, Rsdr>>::reset(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_4),
            _4 = &mut (((*_1).0: rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R, Rsdr>>).2: rngs::reseeding::ReseedingCore<R, Rsdr>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:101:9: 101:29 (#0),
                    scope: scope[0],
                },
                kind: _0 = rngs::reseeding::ReseedingCore::<R, Rsdr>::reseed(move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:102:6: 102:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:99:5: 102:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:99:33: 99:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingRng<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:99:19: 99:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:100:9: 100:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:100:9: 100:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:101:9: 101:29 (#0),
                },
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:101:9: 101:20 (#0),
            scope: scope[0],
        },
    },
]