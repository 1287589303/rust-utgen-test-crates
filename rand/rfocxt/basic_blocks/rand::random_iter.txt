[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:195:5: 195:10 (#0),
                    scope: scope[0],
                },
                kind: _1 = rngs::thread::rng() -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:195:5: 195:24 (#0),
                    scope: scope[0],
                },
                kind: _0 = <rngs::thread::ThreadRng as rng::Rng>::random_iter::<T>(move _1) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:196:2: 196:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:195:23: 195:24 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:191:1: 196:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::distribution::Iter<distr::StandardUniform, rngs::thread::ThreadRng, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:191:28: 191:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:195:5: 195:24 (#0),
                },
            ),
        ),
        ty: rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:195:5: 195:10 (#0),
            scope: scope[0],
        },
    },
]