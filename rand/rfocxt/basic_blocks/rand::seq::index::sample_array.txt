[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
            _4 = Gt(const N, move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:65:12: 65:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = core::option::Option::<[usize; N]>::None,
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_7),
            _7 = [const 0_usize; N],
            FakeRead(ForLet(None), _7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            _14 = SubWithOverflow(_13, const N),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:24: 71:31 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} - {}`, which would overflow", move _13, const N) -> [success: bb3, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = move (_14.0: usize),
            StorageDead(_13),
            StorageLive(_15),
            _15 = _2,
            _11 = core::ops::Range::<usize> { start: move _12, end: move _15 },
            StorageDead(_15),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:23: 71:49 (#0),
                    scope: scope[1],
                },
                kind: _10 = <core::ops::Range<usize> as core::iter::Iterator>::enumerate(move _11) -> [return: bb4, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:23: 71:49 (#619),
                    scope: scope[1],
                },
                kind: _9 = <core::iter::Enumerate<core::ops::Range<usize>> as core::iter::IntoIterator>::into_iter(move _10) -> [return: bb5, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_16),
            _16 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:9: 77:10 (#618),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:9: 77:10 (#618),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _16,
            _20 = &mut (*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:23: 71:49 (#619),
                    scope: scope[2],
                },
                kind: _19 = <core::iter::Enumerate<core::ops::Range<usize>> as core::iter::Iterator>::next(move _20) -> [return: bb8, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            PlaceMention(_19),
            _22 = discriminant(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:23: 71:49 (#619),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:23: 71:49 (#619),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:9: 77:10 (#618),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = (((_19 as Some).0: (usize, usize)).0: usize),
            StorageLive(_25),
            _25 = (((_19 as Some).0: (usize, usize)).1: usize),
            StorageLive(_26),
            StorageLive(_27),
            _27 = &mut (*_1),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = _25,
            _31 = AddWithOverflow(_30, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:72:40: 72:45 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", move _30, const 1_usize) -> [success: bb13, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_53),
            _53 = _7,
            _0 = core::option::Option::<[usize; N]>::Some(move _53),
            StorageDead(_53),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _29 = move (_31.0: usize),
            StorageDead(_30),
            _28 = core::ops::RangeTo::<usize> { end: move _29 },
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:72:21: 72:46 (#0),
                    scope: scope[3],
                },
                kind: _26 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _27, move _28) -> [return: bb14, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            FakeRead(ForLet(None), _26),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = &_7,
            StorageLive(_39),
            StorageLive(_40),
            _40 = _24,
            _39 = core::ops::Range::<usize> { start: const 0_usize, end: move _40 },
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:39: 73:45 (#0),
                    scope: scope[5],
                },
                kind: _37 = <[usize; N] as core::ops::Index<core::ops::Range<usize>>>::index(move _38, move _39) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = &(*_37),
            StorageDead(_39),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:32: 73:52 (#0),
                    scope: scope[5],
                },
                kind: _35 = core::slice::<impl [usize]>::iter(move _36) -> [return: bb16, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = &mut _35,
            StorageDead(_36),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &_26,
            _41 = {closure@src/seq/mod.rs:73:62: 73:66} { t: move _42 },
            StorageDead(_42),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:32: 73:74 (#0),
                    scope: scope[5],
                },
                kind: _33 = <core::slice::Iter<'_, usize> as core::iter::Iterator>::position::<{closure@src/seq/mod.rs:73:62: 73:66}>(move _34, move _41) -> [return: bb17, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_34),
            PlaceMention(_33),
            _43 = discriminant(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:20: 73:29 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _43) -> [1: bb18, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:20: 73:29 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb19, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            _44 = ((_33 as Some).0: usize),
            StorageLive(_45),
            _45 = _25,
            StorageLive(_46),
            _46 = _44,
            _47 = Len(_7),
            _48 = Lt(_46, _47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:74:17: 74:29 (#0),
                    scope: scope[5],
                },
                kind: assert(move _48, "index out of bounds: the length is {} but the index is {}", move _47, _46) -> [success: bb20, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7[_46] = move _45,
            StorageDead(_45),
            StorageDead(_46),
            _32 = const (),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:13: 75:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:73:13: 75:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb22,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_35),
            StorageDead(_33),
            StorageDead(_32),
            StorageLive(_49),
            _49 = _26,
            StorageLive(_50),
            _50 = _24,
            _51 = Len(_7),
            _52 = Lt(_50, _51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:76:13: 76:23 (#0),
                    scope: scope[4],
                },
                kind: assert(move _52, "index out of bounds: the length is {} but the index is {}", move _51, _50) -> [success: bb23, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7[_50] = move _49,
            StorageDead(_49),
            StorageDead(_50),
            _18 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_19),
            StorageDead(_18),
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:71:9: 77:10 (#618),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:79:6: 79:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/mod.rs:61:5: 79:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<[usize; N/#1]>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:61:72: 61:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/mod.rs:61:49: 61:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/mod.rs:61:44: 61:47 (#0),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:61:44: 61:47 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:61:44: 61:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/mod.rs:61:62: 61:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/mod.rs:61:57: 61:60 (#0),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:61:57: 61:60 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:61:57: 61:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:65:9: 67:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:65:12: 65:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:65:16: 65:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:65:20: 67:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/mod.rs:70:27: 70:33 (#0),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:70:13: 70:24 (#0),
                    },
                ),
            ),
        ),
        ty: [usize; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:70:13: 70:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:9: 77:10 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:24: 71:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:24: 71:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:24: 71:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:33: 71:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/seq/mod.rs:71:23: 71:49 (#619),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:71:23: 71:49 (#619),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:61:5: 79:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, usize)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::ops::Range<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:23: 71:49 (#619),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:9: 77:10 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:9: 77:10 (#618),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                src/seq/mod.rs:71:23: 71:49 (#619),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:71:13: 71:19 (#620),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:14: 71:15 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _19,
                                ),
                                src/seq/mod.rs:71:23: 71:49 (#619),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:71:13: 71:19 (#620),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:71:17: 71:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/mod.rs:72:21: 72:46 (#0),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:72:17: 72:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:17: 72:18 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:21: 72:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:38: 72:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:40: 72:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:40: 72:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:72:40: 72:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:13: 75:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:32: 73:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:32: 73:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:32: 73:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:32: 73:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:39: 73:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [usize; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:32: 73:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:40: 73:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:43: 73:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:941 ~ rand[eea3]::seq::index::sample_array::{closure#0}),
            [
                R/#0,
                N/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} usize,)) -> bool, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:62: 73:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:62: 73:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:20: 73:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _33,
                                ),
                                src/seq/mod.rs:73:32: 73:74 (#0),
                            ),
                        ),
                        pat_span: src/seq/mod.rs:73:20: 73:29 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:73:25: 73:28 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:74:32: 74:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:74:25: 74:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:74:17: 74:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:74:17: 74:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:76:26: 76:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:76:21: 76:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:76:13: 76:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:76:13: 76:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: [usize; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/mod.rs:78:14: 78:21 (#0),
            scope: scope[0],
        },
    },
]