[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move _1,
            _0 = seq::coin_flipper::CoinFlipper::<R> { rng: move _2, chunk: const 0_u32, chunk_remaining: const 0_u32 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/coin_flipper.rs:23:9: 23:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/coin_flipper.rs:24:5: 24:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/coin_flipper.rs:24:6: 24:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/coin_flipper.rs:24:5: 24:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/coin_flipper.rs:18:5: 24:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: seq::coin_flipper::CoinFlipper<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/coin_flipper.rs:18:27: 18:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/coin_flipper.rs:18:21: 18:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/coin_flipper.rs:18:16: 18:19 (#0),
                            ),
                        ),
                        pat_span: src/seq/coin_flipper.rs:18:16: 18:19 (#0),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/coin_flipper.rs:18:16: 18:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/coin_flipper.rs:20:13: 20:16 (#0),
            scope: scope[0],
        },
    },
]