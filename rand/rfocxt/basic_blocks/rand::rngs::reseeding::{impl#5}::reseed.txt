[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).1: Rsdr),
            _3 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:209:9: 209:44 (#0),
                    scope: scope[0],
                },
                kind: _2 = <R as rand_core::SeedableRng>::try_from_rng::<Rsdr>(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: R),
            StorageLive(_7),
            _7 = &((*_1).2: i64),
            StorageLive(_8),
            _8 = &mut ((*_1).3: i64),
            _5 = {closure@src/rngs/reseeding.rs:209:49: 209:57} { self: move _6 },
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::result::Result::<R, <Rsdr as rand_core::TryRngCore>::Error>::map::<(), {closure@src/rngs/reseeding.rs:209:49: 209:57}>(move _2, move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:213:6: 213:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:212:10: 212:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:208:5: 213:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:208:29: 208:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:208:15: 208:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                },
            ),
        ),
        ty: core::result::Result<R/#0, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:9: 209:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:25: 209:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:25: 209:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:592 ~ rand[eea3]::rngs::reseeding::{impl#5}::reseed::{closure#0}),
            [
                R/#0,
                Rsdr/#1,
                i32,
                Binder { value: extern "RustCall" fn((R/#0,)), bound_vars: [] },
                (&'{erased} mut R/#0, &'{erased} i64, &'{erased} mut i64),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:49: 212:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:49: 212:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:209:9: 212:11 (#0),
                },
            ),
        ),
        ty: &'{erased} i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:49: 212:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:209:49: 212:10 (#0),
            scope: scope[0],
        },
    },
]