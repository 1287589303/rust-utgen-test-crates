[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#392),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb5, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_3,
            StorageLive(_9),
            _9 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:544:19: 544:34 (#0),
                    scope: scope[0],
                },
                kind: _7 = <X as core::cmp::PartialOrd>::lt(move _8, move _9) -> [return: bb2, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:544:19: 544:34 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _6 = const (),
            StorageDead(_7),
            StorageDead(_6),
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#391),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#393),
                    scope: scope[0],
                },
                kind: _10 = core::panicking::panic(const "assertion failed: amount < length") -> bb47,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#391),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:546:44: 546:61 (#0),
                    scope: scope[0],
                },
                kind: _12 = <X as seq::index_::UInt>::as_usize(move _13) -> [return: bb7, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:546:21: 546:62 (#0),
                    scope: scope[0],
                },
                kind: _11 = std::collections::HashSet::<X>::with_capacity(move _12) -> [return: bb8, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            FakeRead(ForLet(None), _11),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:549:30: 549:39 (#0),
                    scope: scope[1],
                },
                kind: _16 = <X as seq::index_::UInt>::zero() -> [return: bb9, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            _17 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:549:17: 549:48 (#0),
                    scope: scope[1],
                },
                kind: _15 = distr::uniform::Uniform::<X>::new::<X, X>(move _16, move _17) -> [return: bb10, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:549:17: 549:57 (#0),
                    scope: scope[1],
                },
                kind: _14 = core::result::Result::<distr::uniform::Uniform<X>, distr::uniform::Error>::unwrap(move _15) -> [return: bb11, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:550:42: 550:59 (#0),
                    scope: scope[2],
                },
                kind: _19 = <X as seq::index_::UInt>::as_usize(move _20) -> [return: bb12, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:550:23: 550:60 (#0),
                    scope: scope[2],
                },
                kind: _18 = alloc::vec::Vec::<X>::with_capacity(move _19) -> [return: bb13, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:17: 551:34 (#0),
                    scope: scope[3],
                },
                kind: _24 = <X as seq::index_::UInt>::as_usize(move _25) -> [return: bb14, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            _23 = core::ops::Range::<usize> { start: const 0_usize, end: move _24 },
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:14: 551:34 (#609),
                    scope: scope[3],
                },
                kind: _22 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _23) -> [return: bb15, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            PlaceMention(_22),
            StorageLive(_26),
            _26 = move _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:5: 557:6 (#608),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:5: 557:6 (#608),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb17, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            _31 = &mut _26,
            _30 = &mut (*_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:14: 551:34 (#609),
                    scope: scope[4],
                },
                kind: _29 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _30) -> [return: bb18, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            PlaceMention(_29),
            _32 = discriminant(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:14: 551:34 (#609),
                    scope: scope[4],
                },
                kind: switchInt(move _32) -> [0: bb20, 1: bb21, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:14: 551:34 (#609),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:5: 557:6 (#608),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_34),
            StorageLive(_35),
            _35 = &_14,
            StorageLive(_36),
            _36 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:552:23: 552:40 (#0),
                    scope: scope[4],
                },
                kind: _34 = <distr::uniform::Uniform<X> as distr::distribution::Distribution<X>>::sample::<R>(move _35, move _36) -> [return: bb23, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = const (),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_22),
            StorageDead(_21),
            StorageLive(_50),
            StorageLive(_51),
            _51 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#396),
                    scope: scope[3],
                },
                kind: switchInt(move _51) -> [0: bb32, otherwise: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            FakeRead(ForLet(None), _34),
            StorageLive(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:553:9: 555:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:553:9: 555:10 (#0),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb25, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut _11,
            StorageLive(_40),
            _40 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:553:16: 553:33 (#0),
                    scope: scope[5],
                },
                kind: _38 = std::collections::HashSet::<X>::insert(move _39, move _40) -> [return: bb26, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:553:16: 553:33 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _38) -> [0: bb28, otherwise: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_45),
            _37 = const (),
            StorageDead(_45),
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut _18,
            StorageLive(_49),
            _49 = _34,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:556:9: 556:26 (#0),
                    scope: scope[5],
                },
                kind: _47 = alloc::vec::Vec::<X>::push(move _48, move _49) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &_14,
            StorageLive(_43),
            _43 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:554:19: 554:36 (#0),
                    scope: scope[5],
                },
                kind: _41 = <distr::uniform::Uniform<X> as distr::distribution::Distribution<X>>::sample::<R>(move _42, move _43) -> [return: bb29, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            _34 = move _41,
            StorageDead(_41),
            _27 = const (),
            StorageDead(_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:553:9: 555:10 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
            _28 = const (),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            _27 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:551:5: 557:6 (#608),
                    scope: scope[4],
                },
                kind: goto -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            StorageLive(_56),
            _56 = &_18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:559:22: 559:35 (#0),
                    scope: scope[3],
                },
                kind: _55 = alloc::vec::Vec::<X>::len(move _56) -> [return: bb33, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#395),
                    scope: scope[3],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            _54 = &_55,
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:559:37: 559:54 (#0),
                    scope: scope[3],
                },
                kind: _58 = <X as seq::index_::UInt>::as_usize(move _59) -> [return: bb34, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            _57 = &_58,
            _53 = (move _54, move _57),
            StorageDead(_57),
            StorageDead(_54),
            PlaceMention(_53),
            StorageLive(_60),
            _60 = (_53.0: &usize),
            StorageLive(_61),
            _61 = (_53.1: &usize),
            StorageLive(_62),
            StorageLive(_63),
            _63 = (*_60),
            StorageLive(_64),
            _64 = (*_61),
            _62 = Eq(move _63, move _64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#397),
                    scope: scope[6],
                },
                kind: switchInt(move _62) -> [0: bb36, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            _52 = const (),
            StorageDead(_62),
            StorageDead(_61),
            StorageDead(_60),
            StorageDead(_58),
            StorageDead(_55),
            StorageDead(_53),
            StorageDead(_52),
            _50 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#395),
                    scope: scope[3],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
            StorageDead(_63),
            StorageLive(_66),
            _66 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = move _66,
            StorageLive(_69),
            StorageLive(_70),
            _70 = &(*_60),
            _69 = &(*_70),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &(*_61),
            _71 = &(*_72),
            StorageLive(_73),
            _73 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#397),
                    scope: scope[7],
                },
                kind: _67 = core::panicking::assert_failed::<usize, usize>(move _68, move _69, move _71, move _73) -> bb43,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_50),
            StorageLive(_74),
            _74 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:560:5: 560:28 (#0),
                    scope: scope[3],
                },
                kind: _0 = <seq::index_::IndexVec as core::convert::From<alloc::vec::Vec<X>>>::from(move _74) -> [return: bb38, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb39, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb40, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb41, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:2: 561:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:560:27: 560:28 (#0),
                    scope: scope[3],
                },
                kind: drop(_74) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[2],
                },
                kind: drop(_18) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:549:56: 549:57 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:561:1: 561:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:539:1: 561:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:539:71: 539:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:539:38: 539:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:539:33: 539:36 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:539:33: 539:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:539:33: 539:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:539:54: 539:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:539:46: 539:52 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:539:46: 539:52 (#0),
                    },
                ),
            ),
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:539:46: 539:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:539:65: 539:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:539:57: 539:63 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:539:57: 539:63 (#0),
                    },
                ),
            ),
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:539:57: 539:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#391),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#392),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:544:19: 544:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:544:19: 544:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:544:28: 544:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#393),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#393),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:546:21: 546:62 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:546:9: 546:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::collections::HashSet<X/#0, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:546:9: 546:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:546:44: 546:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:546:44: 546:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:549:17: 549:57 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:549:9: 549:14 (#0),
                    },
                ),
            ),
        ),
        ty: distr::uniform::Uniform<X/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:549:9: 549:14 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::uniform::Uniform<X/#0>, distr::uniform::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:549:17: 549:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:549:30: 549:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:549:41: 549:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:550:23: 550:60 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:550:9: 550:20 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:550:9: 550:20 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:550:42: 550:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:550:42: 550:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:5: 557:6 (#608),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:17: 551:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:17: 551:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _22,
                                ),
                                src/seq/index.rs:551:14: 551:34 (#609),
                            ),
                        ),
                        pat_span: src/seq/index.rs:551:14: 551:34 (#609),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:539:1: 561:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:14: 551:34 (#609),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:5: 557:6 (#608),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:551:5: 557:6 (#608),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:552:23: 552:40 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:552:13: 552:20 (#0),
                    },
                ),
            ),
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:552:13: 552:20 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} distr::uniform::Uniform<X/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:552:23: 552:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:552:36: 552:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:9: 555:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:553:9: 555:10 (#611),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:16: 553:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:553:9: 555:10 (#611),
                },
            ),
        ),
        ty: &'{erased} mut std::collections::HashSet<X/#0, std::hash::RandomState>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:16: 553:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:553:9: 555:10 (#611),
                },
            ),
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:29: 553:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:554:19: 554:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} distr::uniform::Uniform<X/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:554:19: 554:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:554:32: 554:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:553:9: 555:10 (#611),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:9: 555:10 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:9: 555:10 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:553:9: 555:10 (#611),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:556:9: 556:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:556:9: 556:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:556:22: 556:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#395),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#396),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} usize, &'{erased} usize),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:559:22: 559:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:559:22: 559:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:559:37: 559:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:559:37: 559:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#397),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#397),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _53,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#397),
                    },
                ),
            ),
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#397),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#397),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#397),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#397),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#397),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#397),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:560:5: 560:28 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:560:20: 560:27 (#0),
            scope: scope[0],
        },
    },
]