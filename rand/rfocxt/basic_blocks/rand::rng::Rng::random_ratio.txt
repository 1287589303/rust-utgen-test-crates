[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
            StorageLive(_6),
            _6 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:226:15: 226:67 (#0),
                    scope: scope[0],
                },
                kind: _4 = distr::bernoulli::Bernoulli::from_ratio(move _5, move _6) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _7 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:226:9: 226:67 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:226:15: 226:67 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:227:13: 227:18 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = [const "p=", const "/", const " is outside range [0.0, 1.0]"],
            _15 = &_16,
            _14 = &(*_15),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_2,
            _21 = &(*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:229:20: 229:22 (#279),
                    scope: scope[0],
                },
                kind: _20 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _21) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = ((_4 as Ok).0: distr::bernoulli::Bernoulli),
            StorageLive(_9),
            _9 = &mut (*_1),
            StorageLive(_10),
            _10 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:227:22: 227:36 (#0),
                    scope: scope[1],
                },
                kind: _0 = <Self as rng::Rng>::sample::<bool, distr::bernoulli::Bernoulli>(move _9, move _10) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:233:6: 233:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &_3,
            _24 = &(*_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:229:23: 229:25 (#279),
                    scope: scope[0],
                },
                kind: _23 = core::fmt::rt::Argument::<'_>::new_display::<u32>(move _24) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _19 = [move _20, move _23],
            StorageDead(_23),
            StorageDead(_20),
            _18 = &_19,
            _17 = &(*_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#279),
                    scope: scope[0],
                },
                kind: _13 = core::fmt::Arguments::<'_>::new_v1::<3, 2>(move _14, move _17) -> [return: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#278),
                    scope: scope[0],
                },
                kind: _12 = core::panicking::panic_fmt(move _13) -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:225:5: 233:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:225:69: 225:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:225:21: 225:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rng.rs:225:43: 225:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rng.rs:225:32: 225:41 (#0),
                            ),
                        ),
                        pat_span: src/rng.rs:225:32: 225:41 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:225:32: 225:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rng.rs:225:61: 225:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rng.rs:225:48: 225:59 (#0),
                            ),
                        ),
                        pat_span: src/rng.rs:225:48: 225:59 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:225:48: 225:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:226:15: 226:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:226:44: 226:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:226:55: 226:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:227:13: 227:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/rng.rs:226:15: 226:67 (#0),
                            ),
                        ),
                        pat_span: src/rng.rs:227:13: 227:18 (#0),
                    },
                ),
            ),
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:227:16: 227:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:227:22: 227:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:227:34: 227:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rng.rs:226:9: 232:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#278),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#278),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:229:17: 229:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:229:17: 229:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 3_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:229:17: 229:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [core::fmt::rt::Argument<'{erased}>; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:229:20: 229:22 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:230:17: 230:26 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:230:17: 230:26 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::rt::Argument<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:229:23: 229:25 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:230:28: 230:39 (#279),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:230:28: 230:39 (#279),
            scope: scope[0],
        },
    },
]