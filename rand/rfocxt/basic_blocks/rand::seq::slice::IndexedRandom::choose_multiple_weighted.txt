[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = _3,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:227:45: 227:55 (#0),
                    scope: scope[0],
                },
                kind: _7 = <Self as seq::slice::IndexedRandom>::len(move _8) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:227:22: 227:56 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::cmp::min::<usize>(move _6, move _7) -> [return: bb2, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:230:23: 230:41 (#0),
                    scope: scope[1],
                },
                kind: _11 = <core::marker::PhantomData<<Self as core::ops::Index<usize>>::Output> as core::default::Default>::default() -> [return: bb3, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_2),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:233:17: 233:27 (#0),
                    scope: scope[1],
                },
                kind: _17 = <Self as seq::slice::IndexedRandom>::len(move _18) -> [return: bb4, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_4,
            StorageLive(_21),
            _21 = &(*_1),
            _19 = {closure@src/seq/slice.rs:234:17: 234:22} { weight: move _20, self: move _21 },
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_22),
            _22 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 236:14 (#0),
                    scope: scope[1],
                },
                kind: _15 = seq::index_::sample_weighted::<R, {closure@src/seq/slice.rs:234:17: 234:22}, f64>(move _16, move _17, move _19, move _22) -> [return: bb5, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 236:15 (#552),
                    scope: scope[1],
                },
                kind: _14 = <core::result::Result<seq::index_::IndexVec, distr::weighted::Error> as core::ops::Try>::branch(move _15) -> [return: bb6, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _23 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 236:15 (#552),
                    scope: scope[1],
                },
                kind: switchInt(move _23) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 236:15 (#552),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:236:14: 236:15 (#553),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_14 as Continue).0: seq::index_::IndexVec),
            _13 = move _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:236:14: 236:15 (#0),
                    scope: scope[1],
                },
                kind: drop(_27) -> [return: bb12, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = ((_14 as Break).0: core::result::Result<core::convert::Infallible, distr::weighted::Error>),
            StorageLive(_26),
            _26 = _24,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 236:15 (#552),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<seq::slice::SliceChooseIter<'_, Self, <Self as core::ops::Index<usize>>::Output>, distr::weighted::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, distr::weighted::Error>>>::from_residual(move _26) -> [return: bb11, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb17, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:231:22: 237:25 (#0),
                    scope: scope[1],
                },
                kind: _12 = <seq::index_::IndexVec as core::iter::IntoIterator>::into_iter(move _13) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _9 = seq::slice::SliceChooseIter::<'_, Self, <Self as core::ops::Index<usize>>::Output> { slice: move _10, _phantom: move _11, indices: move _12 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:238:9: 238:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb14, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            _0 = core::result::Result::<seq::slice::SliceChooseIter<'_, Self, <Self as core::ops::Index<usize>>::Output>, distr::weighted::Error>::Ok(move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:238:10: 238:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb15, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb18, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:6: 239:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:238:10: 238:11 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:237:24: 237:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:236:14: 236:15 (#552),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:239:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:215:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<seq::slice::SliceChooseIter<'{erased}, Self/#0, Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:220:10: 220:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:216:9: 216:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:217:14: 217:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:217:9: 217:12 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:217:9: 217:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:217:9: 217:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:218:17: 218:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:218:9: 218:15 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:218:9: 218:15 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:218:9: 218:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:219:17: 219:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:219:9: 219:15 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:219:9: 219:15 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:219:9: 219:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:227:22: 227:56 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:227:13: 227:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:227:13: 227:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:227:37: 227:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:227:45: 227:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:227:45: 227:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: seq::slice::SliceChooseIter<'{erased}, Self/#0, Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:228:12: 238:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:229:20: 229:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:230:23: 230:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: seq::index_::IndexVecIntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:231:22: 237:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:231:22: 236:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, distr::weighted::Error>, seq::index_::IndexVec>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:231:22: 236:15 (#552),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: core::result::Result<seq::index_::IndexVec, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:231:22: 236:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:232:17: 232:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:233:17: 233:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:233:17: 233:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:778 ~ rand[eea3]::seq::slice::IndexedRandom::choose_multiple_weighted::{closure#0}),
            [
                Self/#0,
                R/#1,
                F/#2,
                X/#3,
                i8,
                Binder { value: extern "RustCall" fn((usize,)) -> f64, bound_vars: [] },
                (&'{erased} F/#2, &'{erased} Self/#0),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:234:17: 234:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: &'{erased} F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:234:17: 234:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:234:17: 234:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:235:17: 235:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:236:14: 236:15 (#553),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/seq/slice.rs:231:22: 236:15 (#552),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:236:14: 236:15 (#553),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:236:14: 236:15 (#553),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:236:14: 236:15 (#553),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:228:9: 238:11 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:236:14: 236:15 (#553),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/seq/slice.rs:231:22: 236:15 (#552),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:231:22: 236:15 (#552),
                    },
                ),
            ),
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:231:22: 236:15 (#0),
            scope: scope[1],
        },
    },
]