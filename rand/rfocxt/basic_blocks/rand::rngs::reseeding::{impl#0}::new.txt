[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _1,
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:39: 93:10 (#0),
                    scope: scope[0],
                },
                kind: _7 = rngs::reseeding::ReseedingCore::<R, Rsdr>::new(move _8, move _9) -> [return: bb1, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
                    scope: scope[0],
                },
                kind: _6 = <core::result::Result<rngs::reseeding::ReseedingCore<R, Rsdr>, <Rsdr as rand_core::TryRngCore>::Error> as core::ops::Try>::branch(move _7) -> [return: bb2, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _10 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_6 as Continue).0: rngs::reseeding::ReseedingCore<R, Rsdr>),
            _5 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb8, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_6 as Break).0: core::result::Result<core::convert::Infallible, <Rsdr as rand_core::TryRngCore>::Error>),
            StorageLive(_13),
            _13 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
                    scope: scope[2],
                },
                kind: _0 = <core::result::Result<rngs::reseeding::ReseedingRng<R, Rsdr>, <Rsdr as rand_core::TryRngCore>::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <Rsdr as rand_core::TryRngCore>::Error>>>::from_residual(move _13) -> [return: bb7, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:91:25: 93:12 (#0),
                    scope: scope[0],
                },
                kind: _4 = rand_core::block::BlockRng::<rngs::reseeding::ReseedingCore<R, Rsdr>>::new(move _5) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = rngs::reseeding::ReseedingRng::<R, Rsdr>(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:12: 93:13 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::result::Result::<rngs::reseeding::ReseedingRng<R, Rsdr>, <Rsdr as rand_core::TryRngCore>::Error>::Ok(move _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:13: 93:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb11, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb14, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:6: 94:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:13: 93:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:11: 93:12 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#484),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:10: 93:11 (#484),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:93:9: 93:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:94:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:90:5: 94:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<rngs::reseeding::ReseedingRng<R/#0, Rsdr/#1>, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:90:51: 90:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:90:27: 90:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:90:16: 90:25 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:90:16: 90:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:90:16: 90:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:90:42: 90:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:90:32: 90:40 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:90:32: 90:40 (#0),
                    },
                ),
            ),
        ),
        ty: Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:90:32: 90:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rngs::reseeding::ReseedingRng<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:12: 93:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:25: 93:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:39: 93:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>, rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:39: 93:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:92:13: 92:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:92:24: 92:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/rngs/reseeding.rs:91:39: 93:11 (#484),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:91:9: 93:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:93:10: 93:11 (#485),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/rngs/reseeding.rs:91:39: 93:11 (#484),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:91:39: 93:11 (#484),
                    },
                ),
            ),
        ),
        ty: rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:91:39: 93:11 (#0),
            scope: scope[0],
        },
    },
]