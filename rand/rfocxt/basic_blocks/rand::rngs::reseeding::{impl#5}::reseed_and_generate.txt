[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:219:37: 219:53 (#0),
                    scope: scope[0],
                },
                kind: _5 = <&mut <R as rand_core::block::BlockRngCore>::Results as core::convert::AsRef<[<R as rand_core::block::BlockRngCore>::Item]>>::as_ref(move _6) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &(*_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:219:25: 219:54 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::mem::size_of_val::<[<R as rand_core::block::BlockRngCore>::Item]>(move _4) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:221:25: 221:38 (#0),
                    scope: scope[2],
                },
                kind: _8 = rngs::reseeding::ReseedingCore::<R, Rsdr>::reseed(move _9) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _10 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:221:16: 221:22 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [1: bb4, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:221:16: 221:22 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_8 as Err).0: <Rsdr as rand_core::TryRngCore>::Error),
            PlaceMention(_11),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:224:9: 224:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:221:9: 224:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:221:9: 224:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:224:9: 224:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_12),
            _12 = ((*_1).2: i64),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _3,
            _13 = move _14 as i64 (IntToInt),
            StorageDead(_14),
            _15 = SubWithOverflow(_12, _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:226:35: 226:68 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", move _12, move _13) -> [success: bb10, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: i64) = move (_15.0: i64),
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_1).0: R),
            StorageLive(_18),
            _18 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:227:9: 227:37 (#0),
                    scope: scope[1],
                },
                kind: _16 = <R as rand_core::block::BlockRngCore>::generate(move _17, move _18) -> [return: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            _0 = const (),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:228:6: 228:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:224:9: 224:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:216:5: 228:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:216:85: 216:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:216:28: 216:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:216:48: 216:84 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:216:39: 216:46 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:216:39: 216:46 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:216:39: 216:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:219:25: 219:54 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:219:13: 219:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:219:13: 219:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:17 ~ rand_core[3b02]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:219:37: 219:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:17 ~ rand_core[3b02]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:219:37: 219:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:219:37: 219:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:221:9: 224:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:221:25: 221:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:221:25: 221:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:221:16: 221:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/rngs/reseeding.rs:221:25: 221:38 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:221:16: 221:22 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Rsdr/#1,
                ],
                def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:221:20: 221:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:226:35: 226:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:226:52: 226:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:226:52: 226:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:226:35: 226:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:227:9: 227:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:227:9: 227:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:227:29: 227:36 (#0),
            scope: scope[0],
        },
    },
]