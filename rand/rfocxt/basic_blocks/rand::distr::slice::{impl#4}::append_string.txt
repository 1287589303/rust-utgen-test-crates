[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*((*_1).0: &[char])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:126:31: 126:47 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::slice::<impl [char]>::len(move _8) -> [return: bb1, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = Lt(move _7, const 200_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:126:31: 126:53 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb6, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*((*_1).0: &[char])),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:127:13: 128:24 (#0),
                    scope: scope[0],
                },
                kind: _11 = core::slice::<impl [char]>::iter(move _12) -> [return: bb3, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &mut _11,
            StorageDead(_12),
            StorageLive(_13),
            _13 = {closure@src/distr/slice.rs:129:30: 129:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:127:13: 132:19 (#0),
                    scope: scope[0],
                },
                kind: _9 = <core::slice::Iter<'_, char> as core::iter::Iterator>::try_fold::<usize, {closure@src/distr/slice.rs:129:30: 129:45}, core::option::Option<usize>>(move _10, const 1_usize, move _13) -> [return: bb4, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::option::Option::<usize>::unwrap_or(move _9, const 4_usize) -> [return: bb5, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:126:28: 136:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = const 4_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:126:28: 136:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _5,
            _15 = Eq(move _16, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:33: 140:50 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:64: 142:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _4,
            _17 = Lt(move _18, const 100_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:54: 140:63 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _17) -> [0: bb12, otherwise: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:64: 142:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:30: 144:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageLive(_19),
            _19 = _4,
            _20 = Eq(const 4_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:143:13: 143:20 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _20, "attempt to divide `{}` by zero", _19) -> [success: bb13, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = Div(move _19, const 4_usize),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:140:30: 144:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_21),
            _21 = _4,
            FakeRead(ForLet(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:146:9: 151:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:146:9: 151:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            _24 = _14,
            _23 = Gt(move _24, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:146:15: 146:29 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _23) -> [0: bb25, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut (*_3),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _5,
            StorageLive(_29),
            _29 = _14,
            _30 = MulWithOverflow(_28, _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:147:28: 147:53 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_30.1: bool), "attempt to compute `{} * {}`, which would overflow", move _28, move _29) -> [success: bb18, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = move (_30.0: usize),
            StorageDead(_29),
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:147:13: 147:54 (#0),
                    scope: scope[3],
                },
                kind: _25 = alloc::string::String::reserve(move _26, move _27) -> [return: bb19, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut (*_3),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &(*_1),
            StorageLive(_36),
            _36 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:148:27: 148:54 (#0),
                    scope: scope[3],
                },
                kind: _34 = <&distr::slice::Choose<'_, char> as distr::distribution::Distribution<&char>>::sample_iter::<&mut R>(move _35, move _36) -> [return: bb20, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            StorageLive(_37),
            _37 = _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:148:27: 148:71 (#0),
                    scope: scope[3],
                },
                kind: _33 = <distr::distribution::Iter<&distr::slice::Choose<'_, char>, &mut R, &char> as core::iter::Iterator>::take(move _34, move _37) -> [return: bb21, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:148:13: 148:72 (#0),
                    scope: scope[3],
                },
                kind: _31 = <alloc::string::String as core::iter::Extend<&char>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::slice::Choose<'_, char>, &mut R, &char>>>(move _32, move _33) -> [return: bb22, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_38),
            _38 = _14,
            _39 = SubWithOverflow(_21, _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:149:13: 149:37 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} - {}`, which would overflow", _21, move _38) -> [success: bb23, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = move (_39.0: usize),
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = _14,
            StorageLive(_42),
            _42 = _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:150:26: 150:52 (#0),
                    scope: scope[3],
                },
                kind: _40 = <usize as core::cmp::Ord>::min(move _41, move _42) -> [return: bb24, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            _14 = move _40,
            StorageDead(_40),
            _22 = const (),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:146:9: 151:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_44),
            _0 = const (),
            StorageDead(_44),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_14),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:152:6: 152:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:123:5: 152:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:98: 123:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::slice::Choose<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:46: 123:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/slice.rs:123:58: 123:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:123:53: 123:56 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:123:53: 123:56 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:53: 123:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/slice.rs:123:74: 123:85 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:123:66: 123:72 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:123:66: 123:72 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:66: 123:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/slice.rs:123:92: 123:97 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:123:87: 123:90 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:123:87: 123:90 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:87: 123:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:126:28: 136:10 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:126:13: 126:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:126:13: 126:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:126:31: 126:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:126:31: 126:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:126:31: 126:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:127:13: 132:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:127:13: 128:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                },
            ),
        ),
        ty: core::slice::Iter<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:127:13: 128:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                },
            ),
        ),
        ty: &'{erased} [char],
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:127:13: 127:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:127:13: 133:30 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:228 ~ rand[eea3]::distr::slice::{impl#4}::append_string::{closure#0}),
            [
                '{erased},
                R/#1,
                i16,
                Binder { value: extern "RustCall" fn((usize, &'{erased} char)) -> core::option::Option<usize>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:129:30: 132:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:140:30: 144:10 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:140:13: 140:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:140:13: 140:27 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:140:33: 140:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:140:33: 140:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:140:54: 140:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:140:54: 140:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:143:13: 143:20 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:143:13: 143:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:143:13: 143:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:145:30: 145:33 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:145:13: 145:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:145:13: 145:27 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:123:5: 152:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/slice.rs:146:9: 151:10 (#427),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:146:15: 146:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/slice.rs:146:9: 151:10 (#427),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:146:15: 146:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:13: 147:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:13: 147:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:28: 147:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:28: 147:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:43: 147:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:147:28: 147:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:13: 148:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:13: 148:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<distr::distribution::Iter<&'{erased} distr::slice::Choose<'{erased}, char>, &'{erased} mut R/#1, &'{erased} char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:27: 148:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::distribution::Iter<&'{erased} distr::slice::Choose<'{erased}, char>, &'{erased} mut R/#1, &'{erased} char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:27: 148:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} distr::slice::Choose<'{erased}, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:27: 148:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:44: 148:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:148:60: 148:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:149:27: 149:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:149:13: 149:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:150:26: 150:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:150:26: 150:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:150:41: 150:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/slice.rs:146:9: 151:10 (#427),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:146:9: 151:10 (#427),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:146:9: 151:10 (#427),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:146:9: 151:10 (#427),
            scope: scope[0],
        },
    },
]