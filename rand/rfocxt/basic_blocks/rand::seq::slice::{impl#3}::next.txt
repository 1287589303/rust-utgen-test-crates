[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).2: seq::index_::IndexVecIntoIter),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:438:9: 438:28 (#0),
                    scope: scope[0],
                },
                kind: _2 = <seq::index_::IndexVecIntoIter as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*((*_1).0: &S)),
            _4 = {closure@src/seq/slice.rs:438:33: 438:36} { self: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:438:9: 438:52 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<usize>::map::<&T, {closure@src/seq/slice.rs:438:33: 438:36}>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:439:6: 439:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:436:5: 439:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:436:27: 436:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut seq::slice::SliceChooseIter<'{erased}, S/#1, T/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:436:13: 436:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:438:9: 438:52 (#0),
                },
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:438:9: 438:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:438:9: 438:52 (#0),
                },
            ),
        ),
        ty: &'{erased} mut seq::index_::IndexVecIntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:438:9: 438:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:438:9: 438:52 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:813 ~ rand[eea3]::seq::slice::{impl#3}::next::{closure#0}),
            [
                '{erased},
                S/#1,
                T/#2,
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> &'{erased} T/#2, bound_vars: [] },
                (&'{erased} S/#1,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:438:33: 438:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:438:9: 438:52 (#0),
                },
            ),
        ),
        ty: &'{erased} S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:438:33: 438:51 (#0),
            scope: scope[0],
        },
    },
]