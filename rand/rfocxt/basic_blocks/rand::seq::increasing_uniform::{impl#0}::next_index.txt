[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = ((*_1).1: u32),
            _4 = AddWithOverflow(_3, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:41:22: 41:32 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u32) -> [success: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = move (_4.0: u32),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = ((*_1).3: u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:49:36: 49:71 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::num::<impl u8>::checked_sub(move _7, const 1_u8) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_2,
            StorageLive(_10),
            _10 = &mut ((*_1).0: R),
            StorageLive(_11),
            _11 = &mut ((*_1).2: u32),
            _8 = {closure@src/seq/increasing_uniform.rs:49:87: 49:89} { next_n: move _9, self: move _10 },
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:49:36: 58:11 (#0),
                    scope: scope[1],
                },
                kind: _5 = core::option::Option::<u8>::unwrap_or_else::<{closure@src/seq/increasing_uniform.rs:49:87: 49:89}>(move _6, move _8) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _5,
            _13 = Eq(move _14, const 0_u8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:60:25: 60:50 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = ((*_1).2: u32),
            _12 = move _15 as usize (IntToInt),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:60:22: 71:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            _17 = ((*_1).2: u32),
            StorageLive(_18),
            _18 = _2,
            _19 = Eq(_18, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:68:21: 68:40 (#0),
                    scope: scope[2],
                },
                kind: assert(!move _19, "attempt to calculate the remainder of `{}` with a divisor of zero", _17) -> [success: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = Rem(move _17, move _18),
            StorageDead(_18),
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_20),
            _20 = _2,
            _21 = Eq(_20, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:69:13: 69:33 (#0),
                    scope: scope[4],
                },
                kind: assert(!move _21, "attempt to divide `{}` by zero", ((*_1).2: u32)) -> [success: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).2: u32) = Div(((*_1).2: u32), move _20),
            StorageDead(_20),
            StorageLive(_22),
            _22 = _16,
            _12 = move _22 as usize (IntToInt),
            StorageDead(_22),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:60:22: 71:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            FakeRead(ForLet(None), _12),
            StorageLive(_23),
            _23 = _5,
            ((*_1).3: u8) = move _23,
            StorageDead(_23),
            StorageLive(_24),
            _24 = _2,
            ((*_1).1: u32) = move _24,
            StorageDead(_24),
            _0 = _12,
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:76:6: 76:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/increasing_uniform.rs:40:5: 76:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:40:37: 40:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut seq::increasing_uniform::IncreasingUniform<R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:40:23: 40:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/increasing_uniform.rs:41:22: 41:32 (#0),
                            ),
                        ),
                        pat_span: src/seq/increasing_uniform.rs:41:13: 41:19 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:41:13: 41:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:41:22: 41:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:41:22: 41:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/increasing_uniform.rs:49:36: 58:11 (#0),
                            ),
                        ),
                        pat_span: src/seq/increasing_uniform.rs:49:13: 49:33 (#0),
                    },
                ),
            ),
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:13: 49:33 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:36: 49:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:36: 49:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:720 ~ rand[eea3]::seq::increasing_uniform::{impl#0}::next_index::{closure#0}),
            [
                R/#0,
                i32,
                Binder { value: extern "RustCall" fn(()) -> u8, bound_vars: [] },
                (&'{erased} u32, &'{erased} mut R/#0, &'{erased} mut u32),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:87: 58:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:87: 58:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:87: 58:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:49:87: 58:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/increasing_uniform.rs:60:22: 71:10 (#0),
                            ),
                        ),
                        pat_span: src/seq/increasing_uniform.rs:60:13: 60:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:60:13: 60:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:60:25: 60:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:60:25: 60:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/increasing_uniform.rs:64:13: 64:32 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:64:13: 64:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/increasing_uniform.rs:68:21: 68:40 (#0),
                            ),
                        ),
                        pat_span: src/seq/increasing_uniform.rs:68:17: 68:18 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:68:17: 68:18 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:68:21: 68:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:68:34: 68:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:68:21: 68:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:69:27: 69:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:69:13: 69:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/increasing_uniform.rs:70:13: 70:23 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:70:13: 70:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:73:32: 73:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/increasing_uniform.rs:74:18: 74:24 (#0),
            scope: scope[0],
        },
    },
]