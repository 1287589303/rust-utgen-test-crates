[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &(*((*_1).0: &distr::weighted::weighted_index::WeightedIndex<X>)),
            StorageLive(_4),
            _4 = ((*_1).1: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:281:15: 281:53 (#0),
                    scope: scope[0],
                },
                kind: _2 = distr::weighted::weighted_index::WeightedIndex::<X>::weight(move _3, move _4) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            PlaceMention(_2),
            _5 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:281:9: 281:53 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:281:15: 281:53 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:282:13: 282:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_2 as Some).0: X),
            _7 = AddWithOverflow(((*_1).1: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:284:17: 284:32 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<X>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:282:21: 282:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).1: usize) = move (_7.0: usize),
            StorageLive(_8),
            _8 = move _6,
            _0 = core::option::Option::<X>::Some(move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:285:28: 285:29 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:286:13: 286:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:286:13: 286:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:288:5: 288:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:288:6: 288:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:286:13: 286:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:288:5: 288:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:280:5: 288:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<X/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:280:27: 280:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut distr::weighted::weighted_index::WeightedIndexIter<'{erased}, X/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:280:13: 280:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/weighted/weighted_index.rs:281:9: 287:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<X/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:281:15: 281:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/weighted/weighted_index.rs:281:9: 287:10 (#0),
                },
            ),
        ),
        ty: &'{erased} distr::weighted::weighted_index::WeightedIndex<X/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:281:15: 281:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/weighted/weighted_index.rs:281:9: 287:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:281:42: 281:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:282:13: 282:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/distr/weighted/weighted_index.rs:281:15: 281:53 (#0),
                            ),
                        ),
                        pat_span: src/distr/weighted/weighted_index.rs:283:13: 283:25 (#0),
                    },
                ),
            ),
        ),
        ty: X/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:283:18: 283:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:284:17: 284:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: X/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:285:22: 285:28 (#0),
            scope: scope[0],
        },
    },
]