[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:170:21: 170:40 (#0),
                    scope: scope[0],
                },
                kind: _5 = alloc::string::String::as_mut_vec(move _6) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
            StorageLive(_12),
            _12 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:171:22: 171:43 (#0),
                    scope: scope[1],
                },
                kind: _10 = <&distr::other::Alphanumeric as distr::distribution::Distribution<u8>>::sample_iter::<&mut R>(move _11, move _12) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_13),
            _13 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:171:22: 171:53 (#0),
                    scope: scope[1],
                },
                kind: _9 = <distr::distribution::Iter<&distr::other::Alphanumeric, &mut R, u8> as core::iter::Iterator>::take(move _10, move _13) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:171:13: 171:54 (#0),
                    scope: scope[1],
                },
                kind: _7 = <alloc::vec::Vec<u8> as core::iter::Extend<u8>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::other::Alphanumeric, &mut R, u8>>>(move _8, move _9) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            _0 = const (),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:173:6: 173:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:168:5: 173:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:168:91: 168:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::other::Alphanumeric,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:168:39: 168:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:168:51: 168:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:168:46: 168:49 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:168:46: 168:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:168:46: 168:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:168:67: 168:78 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:168:59: 168:65 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:168:59: 168:65 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:168:59: 168:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:168:85: 168:90 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:168:80: 168:83 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:168:80: 168:83 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:168:80: 168:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:170:21: 170:40 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:170:17: 170:18 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:170:17: 170:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:170:21: 170:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:13: 171:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<u8, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:13: 171:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<distr::distribution::Iter<&'{erased} distr::other::Alphanumeric, &'{erased} mut R/#0, u8>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:22: 171:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::distribution::Iter<&'{erased} distr::other::Alphanumeric, &'{erased} mut R/#0, u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:22: 171:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} distr::other::Alphanumeric,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:22: 171:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:39: 171:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:171:49: 171:52 (#0),
            scope: scope[0],
        },
    },
]