[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            _3 = const rngs::thread::THREAD_RNG_KEY,
            _2 = &_3,
            StorageLive(_4),
            _4 = {closure@src/rngs/thread.rs:158:35: 158:38},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:158:15: 158:49 (#0),
                    scope: scope[0],
                },
                kind: _1 = std::thread::LocalKey::<alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>>>::with::<{closure@src/rngs/thread.rs:158:35: 158:38}, alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>>>(move _2, move _4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
            FakeRead(ForLet(None), _1),
            StorageDead(_3),
            StorageLive(_5),
            _5 = move _1,
            _0 = rngs::thread::ThreadRng { rng: move _5 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:159:21: 159:22 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:160:1: 160:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:160:2: 160:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:160:1: 160:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:157:1: 160:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:157:17: 157:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/thread.rs:158:15: 158:49 (#0),
                            ),
                        ),
                        pat_span: src/rngs/thread.rs:158:9: 158:12 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:158:9: 158:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::thread::LocalKey<alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:158:15: 158:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:1970 ~ rand[eea3]::rngs::thread::THREAD_RNG_KEY),
            },
        ),
        ty: std::thread::LocalKey<alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:158:15: 158:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:680 ~ rand[eea3]::rngs::thread::rng::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((&'^0 alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>,)) -> alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>, bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:158:35: 158:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:159:17: 159:20 (#0),
            scope: scope[0],
        },
    },
]