[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = core::ops::Range::<f64> { start: const 0f64, end: const 1f64 },
            _4 = &_5,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:109:13: 109:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ops::Range::<f64>::contains::<f64>(move _4, move _6) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:109:13: 109:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_7),
            StorageDead(_5),
            _2 = const (),
            StorageDead(_3),
            StorageDead(_2),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _1,
            _17 = Mul(move _18, const distr::bernoulli::SCALE),
            StorageDead(_18),
            _16 = move _17 as u64 (FloatToInt),
            StorageDead(_17),
            _15 = distr::bernoulli::Bernoulli { p_int: move _16 },
            StorageDead(_16),
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Ok(move _15),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:118:6: 118:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _1,
            _10 = Eq(move _11, const 1f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:110:16: 110:24 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_13),
            _13 = distr::bernoulli::Bernoulli { p_int: const distr::bernoulli::ALWAYS_TRUE },
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Ok(move _13),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _9 = const (),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_14),
            _14 = distr::bernoulli::BernoulliError::InvalidProbability,
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Err(move _14),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:113:13: 113:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:118:6: 118:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:118:6: 118:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:108:5: 118:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:108:27: 108:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/bernoulli.rs:108:19: 108:22 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/bernoulli.rs:108:16: 108:17 (#0),
                            ),
                        ),
                        pat_span: src/distr/bernoulli.rs:108:16: 108:17 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:108:16: 108:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:9: 114:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:13: 109:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::ops::Range<f64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:13: 109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<f64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:13: 109:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:33: 109:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:33: 109:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:109:37: 114:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:110:13: 112:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:110:16: 110:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:110:16: 110:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:110:25: 112:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:111:27: 111:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::BernoulliError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:113:24: 113:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:115:12: 117:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:116:20: 116:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:115:9: 117:11 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:116:20: 116:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:115:9: 117:11 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:116:21: 116:22 (#0),
            scope: scope[0],
        },
    },
]