[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:162:9: 162:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:162:15: 162:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:163:13: 163:22 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &mut (((*_1) as U64).0: core::slice::Iter<'_, u64>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:165:26: 165:37 (#0),
                    scope: scope[2],
                },
                kind: _8 = <core::slice::Iter<'_, u64> as core::iter::Iterator>::next(move _9) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (((*_1) as U32).0: core::slice::Iter<'_, u32>),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:163:26: 163:37 (#0),
                    scope: scope[1],
                },
                kind: _4 = <core::slice::Iter<'_, u32> as core::iter::Iterator>::next(move _5) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@src/seq/index.rs:163:42: 163:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:163:26: 163:58 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::option::Option::<&u32>::map::<usize, {closure@src/seq/index.rs:163:42: 163:45}>(move _4, move _6) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:163:57: 163:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
            _10 = {closure@src/seq/index.rs:165:42: 165:45},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:165:26: 165:58 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::option::Option::<&u64>::map::<usize, {closure@src/seq/index.rs:165:42: 165:45}>(move _8, move _10) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:165:57: 165:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:167:6: 167:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:160:5: 167:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:160:27: 160:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut seq::index_::IndexVecIter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:160:13: 160:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:163:13: 163:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/seq/index.rs:162:15: 162:19 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:163:13: 163:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:163:17: 163:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:163:26: 163:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:163:26: 163:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:860 ~ rand[eea3]::seq::index_::{impl#5}::next::{closure#0}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} u32,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:163:42: 163:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/seq/index.rs:162:15: 162:19 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:165:13: 165:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:165:17: 165:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:165:26: 165:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::slice::Iter<'{erased}, u64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:165:26: 165:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:162:9: 166:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:861 ~ rand[eea3]::seq::index_::{impl#5}::next::{closure#1}),
            [
                '{erased},
                i32,
                Binder { value: extern "RustCall" fn((&'{erased} u64,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:165:42: 165:57 (#0),
            scope: scope[0],
        },
    },
]