[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:70:38: 70:54 (#0),
                    scope: scope[0],
                },
                kind: _5 = <Self as core::iter::Iterator>::size_hint(move _6) -> [return: bb1, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            StorageLive(_3),
            _3 = (_5.0: usize),
            StorageLive(_4),
            _4 = (_5.1: core::option::Option<usize>),
            StorageDead(_5),
            StorageLive(_7),
            _7 = core::option::Option::<<Self as core::iter::Iterator>::Item>::None,
            FakeRead(ForLet(None), _7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_4,
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _3,
            _12 = core::option::Option::<usize>::Some(move _13),
            _11 = &_12,
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:76:12: 76:32 (#0),
                    scope: scope[2],
                },
                kind: _9 = <core::option::Option<usize> as core::cmp::PartialEq>::eq(move _10, move _11) -> [return: bb2, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:76:12: 76:32 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _9) -> [0: bb12, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:77:20: 77:31 (#0),
                    scope: scope[2],
                },
                kind: switchInt(_3) -> [0: bb5, 1: bb6, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &mut _1,
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_2),
            StorageLive(_19),
            StorageLive(_20),
            _20 = _3,
            _19 = core::ops::RangeTo::<usize> { end: move _20 },
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:80:31: 80:56 (#0),
                    scope: scope[2],
                },
                kind: _17 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _18, move _19) -> [return: bb10, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:78:17: 78:18 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:79:17: 79:18 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<<Self as core::iter::Iterator>::Item>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:78:22: 78:26 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:79:22: 79:33 (#0),
                    scope: scope[2],
                },
                kind: _0 = <Self as core::iter::Iterator>::next(move _15) -> [return: bb9, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:79:32: 79:33 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:80:22: 80:57 (#0),
                    scope: scope[2],
                },
                kind: _0 = <Self as core::iter::Iterator>::nth(move _16, move _17) -> [return: bb11, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:80:56: 80:57 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb56,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            _8 = const (),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_21),
            StorageLive(_22),
            _22 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:84:32: 84:53 (#0),
                    scope: scope[2],
                },
                kind: _21 = seq::coin_flipper::CoinFlipper::<&mut R>::new(move _22) -> [return: bb13, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            FakeRead(ForLet(None), _21),
            StorageLive(_23),
            _23 = const 0_usize,
            FakeRead(ForLet(None), _23),
            StorageLive(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:88:9: 118:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:88:9: 118:10 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb15, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = _3,
            _27 = Gt(move _28, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:89:16: 89:25 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _27) -> [0: bb38, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &mut (*(_21.0: &mut R)),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = _3,
            StorageLive(_34),
            _34 = _23,
            _35 = AddWithOverflow(_33, _34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:90:58: 90:74 (#0),
                    scope: scope[4],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", move _33, move _34) -> [success: bb17, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _32 = move (_35.0: usize),
            StorageDead(_34),
            StorageDead(_33),
            _31 = core::ops::RangeTo::<usize> { end: move _32 },
            StorageDead(_32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:90:26: 90:75 (#0),
                    scope: scope[4],
                },
                kind: _29 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _30, move _31) -> [return: bb18, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            FakeRead(ForLet(None), _29),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            _38 = _29,
            StorageLive(_39),
            _39 = _3,
            _37 = Lt(move _38, move _39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:91:31: 91:41 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _37) -> [0: bb26, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &mut _1,
            StorageLive(_42),
            _42 = _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:92:30: 92:42 (#0),
                    scope: scope[5],
                },
                kind: _40 = <Self as core::iter::Iterator>::nth(move _41, move _42) -> [return: bb20, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:92:21: 92:27 (#0),
                    scope: scope[5],
                },
                kind: drop(_7) -> [return: bb21, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:92:41: 92:42 (#0),
                    scope: scope[5],
                },
                kind: drop(_40) -> [return: bb23, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move _40,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:92:41: 92:42 (#0),
                    scope: scope[5],
                },
                kind: drop(_40) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageLive(_43),
            _43 = _3,
            StorageLive(_44),
            StorageLive(_45),
            _45 = _29,
            _46 = AddWithOverflow(_45, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:93:29: 93:37 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _45, const 1_usize) -> [success: bb24, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = move (_46.0: usize),
            StorageDead(_45),
            _47 = SubWithOverflow(_43, _44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:93:21: 93:37 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_47.1: bool), "attempt to compute `{} - {}`, which would overflow", move _43, move _44) -> [success: bb25, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _36 = move (_47.0: usize),
            StorageDead(_44),
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:91:28: 96:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            _36 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:91:28: 96:18 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_48),
            StorageLive(_49),
            StorageLive(_50),
            _50 = &_4,
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = _3,
            _52 = core::option::Option::<usize>::Some(move _53),
            _51 = &_52,
            StorageDead(_53),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:97:20: 97:40 (#0),
                    scope: scope[6],
                },
                kind: _49 = <core::option::Option<usize> as core::cmp::PartialEq>::eq(move _50, move _51) -> [return: bb28, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:97:20: 97:40 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _49) -> [0: bb30, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            _0 = move _7,
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_36),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            _48 = const (),
            StorageDead(_49),
            StorageDead(_48),
            StorageLive(_55),
            _55 = _3,
            _56 = AddWithOverflow(_23, _55),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:100:17: 100:34 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_56.1: bool), "attempt to compute `{} + {}`, which would overflow", _23, move _55) -> [success: bb31, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_56.0: usize),
            StorageDead(_55),
            StorageLive(_57),
            StorageLive(_58),
            _58 = _36,
            _57 = Gt(move _58, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:101:20: 101:28 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _57) -> [0: bb36, otherwise: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            StorageLive(_59),
            StorageLive(_60),
            _60 = &mut _1,
            StorageLive(_61),
            StorageLive(_62),
            _62 = _36,
            _63 = SubWithOverflow(_62, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:102:30: 102:38 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_63.1: bool), "attempt to compute `{} - {}`, which would overflow", move _62, const 1_usize) -> [success: bb33, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _61 = move (_63.0: usize),
            StorageDead(_62),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:102:21: 102:39 (#0),
                    scope: scope[6],
                },
                kind: _59 = <Self as core::iter::Iterator>::nth(move _60, move _61) -> [return: bb34, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:102:39: 102:40 (#0),
                    scope: scope[6],
                },
                kind: drop(_59) -> [return: bb35, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:101:17: 103:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_58),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:101:17: 103:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb37,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_57),
            StorageDead(_36),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:89:13: 113:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:105:28: 105:39 (#0),
                    scope: scope[4],
                },
                kind: _64 = <Self as core::iter::Iterator>::next(move _65) -> [return: bb39, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            FakeRead(ForLet(None), _64),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            _68 = &_64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:106:20: 106:34 (#0),
                    scope: scope[7],
                },
                kind: _67 = core::option::Option::<<Self as core::iter::Iterator>::Item>::is_none(move _68) -> [return: bb40, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:106:20: 106:34 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _67) -> [0: bb42, otherwise: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            _0 = move _7,
            StorageDead(_67),
            StorageDead(_66),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:113:13: 113:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_64) -> [return: bb54, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_68),
            _66 = const (),
            StorageDead(_67),
            StorageDead(_66),
            _70 = AddWithOverflow(_23, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:109:17: 109:30 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_70.1: bool), "attempt to compute `{} + {}`, which would overflow", _23, const 1_usize) -> [success: bb43, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = move (_70.0: usize),
            StorageLive(_71),
            StorageLive(_72),
            _72 = &mut _21,
            StorageLive(_73),
            _73 = _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:110:20: 110:64 (#0),
                    scope: scope[7],
                },
                kind: _71 = seq::coin_flipper::CoinFlipper::<&mut R>::random_ratio_one_over(move _72, move _73) -> [return: bb44, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:110:20: 110:64 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _71) -> [0: bb49, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
            StorageLive(_74),
            _74 = move _64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:111:21: 111:27 (#0),
                    scope: scope[7],
                },
                kind: drop(_7) -> [return: bb46, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:111:33: 111:34 (#0),
                    scope: scope[7],
                },
                kind: drop(_74) -> [return: bb48, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move _74,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:111:33: 111:34 (#0),
                    scope: scope[7],
                },
                kind: drop(_74) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_74),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:110:17: 112:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_73),
            StorageDead(_72),
            _26 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:110:17: 112:18 (#0),
                    scope: scope[7],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:113:13: 113:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_64) -> [return: bb51, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:89:13: 113:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb52,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:115:24: 115:40 (#0),
                    scope: scope[4],
                },
                kind: _75 = <Self as core::iter::Iterator>::size_hint(move _76) -> [return: bb53, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_76),
            FakeRead(ForLet(None), _75),
            StorageLive(_77),
            _77 = (_75.0: usize),
            _3 = move _77,
            StorageDead(_77),
            StorageLive(_78),
            _78 = (_75.1: core::option::Option<usize>),
            _4 = move _78,
            StorageDead(_78),
            _25 = const (),
            StorageDead(_75),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:88:9: 118:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb55,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb57,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:119:5: 119:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb58, unwind: bb62],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb59, unwind: bb63],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:119:6: 119:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:113:13: 113:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_64) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:119:5: 119:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb62, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:119:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb63, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:66:5: 119:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:66:44: 66:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:66:18: 66:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:66:33: 66:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:66:28: 66:31 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:66:28: 66:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:66:28: 66:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/seq/iterator.rs:70:38: 70:54 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:70:13: 70:35 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:70:14: 70:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/seq/iterator.rs:70:38: 70:54 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:70:13: 70:35 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:70:25: 70:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:70:38: 70:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:70:38: 70:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:71:26: 71:30 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:71:13: 71:23 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:71:13: 71:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:9: 82:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:12: 76:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:12: 76:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:21: 76:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:21: 76:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:26: 76:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:76:33: 82:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:79:22: 79:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:80:22: 80:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:80:31: 80:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:80:31: 80:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:80:48: 80:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:80:50: 80:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:84:32: 84:53 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:84:13: 84:29 (#0),
                    },
                ),
            ),
        ),
        ty: seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:84:13: 84:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:84:49: 84:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:85:28: 85:29 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:85:13: 85:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:85:13: 85:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/iterator.rs:88:9: 118:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:88:9: 118:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:66:5: 119:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:89:13: 113:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:89:16: 89:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:89:16: 89:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:90:26: 90:75 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:90:21: 90:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:21: 90:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:26: 90:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:56: 90:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:58: 90:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:58: 90:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:66: 90:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:90:58: 90:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:91:28: 96:18 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:91:21: 91:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:91:21: 91:25 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:91:31: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:91:31: 91:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:91:36: 91:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:92:30: 92:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:92:30: 92:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:92:39: 92:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/iterator.rs:93:21: 93:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:93:21: 93:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/iterator.rs:93:21: 93:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:93:29: 93:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/iterator.rs:93:21: 93:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:93:30: 93:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:93:29: 93:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:93:21: 93:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:17: 99:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:20: 97:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:20: 97:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:29: 97:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:29: 97:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:34: 97:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:97:41: 99:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:100:29: 100:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:100:17: 100:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:101:17: 103:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:101:20: 101:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:101:17: 103:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:101:20: 101:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:102:21: 102:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:102:21: 102:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:102:30: 102:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:102:30: 102:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:102:30: 102:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:105:28: 105:39 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:105:21: 105:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:105:21: 105:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:105:28: 105:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:106:17: 108:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:106:20: 106:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:106:20: 106:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:106:35: 108:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:109:17: 109:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:110:17: 112:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:110:20: 110:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:110:17: 112:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:110:20: 110:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:110:17: 112:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:110:55: 110:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:111:30: 111:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:115:24: 115:40 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:115:17: 115:21 (#0),
                    },
                ),
            ),
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:115:17: 115:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:115:24: 115:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:116:21: 116:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:117:21: 117:27 (#0),
            scope: scope[0],
        },
    },
]