[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = ((((*_1).0: distr::uniform::other::UniformChar).0: distr::uniform::int::UniformInt<u32>).0: u32),
            StorageLive(_8),
            _8 = ((((*_1).0: distr::uniform::other::UniformChar).0: distr::uniform::int::UniformInt<u32>).1: u32),
            _9 = AddWithOverflow(_7, _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:102:22: 102:63 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _8) -> [success: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_9.0: u32),
            StorageDead(_8),
            StorageDead(_7),
            _10 = SubWithOverflow(_6, const 1_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:102:22: 102:67 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_10.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 1_u32) -> [success: bb2, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_10.0: u32),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _5,
            _12 = Ge(move _13, const distr::uniform::other::CHAR_SURROGATE_START),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:103:12: 103:38 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _14 = AddWithOverflow(_5, const distr::uniform::other::CHAR_SURROGATE_LEN),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:104:13: 104:37 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, const distr::uniform::other::CHAR_SURROGATE_LEN) -> [success: bb4, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_14.0: u32),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:103:9: 105:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:103:9: 105:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:107:28: 107:46 (#0),
                    scope: scope[1],
                },
                kind: _17 = core::char::methods::<impl char>::from_u32(move _18) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:107:28: 107:66 (#0),
                    scope: scope[1],
                },
                kind: _16 = core::option::Option::<char>::map::<usize, fn(char) -> usize {core::char::methods::<impl char>::len_utf8}>(move _17, core::char::methods::<impl char>::len_utf8) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:107:28: 107:79 (#0),
                    scope: scope[1],
                },
                kind: _15 = core::option::Option::<usize>::unwrap_or(move _16, const 4_usize) -> [return: bb9, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &mut (*_3),
            StorageLive(_21),
            StorageLive(_22),
            _22 = _15,
            StorageLive(_23),
            _23 = _4,
            _24 = MulWithOverflow(_22, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:108:24: 108:42 (#0),
                    scope: scope[2],
                },
                kind: assert(!move (_24.1: bool), "attempt to compute `{} * {}`, which would overflow", move _22, move _23) -> [success: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _21 = move (_24.0: usize),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:108:9: 108:43 (#0),
                    scope: scope[2],
                },
                kind: _19 = alloc::string::String::reserve(move _20, move _21) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_25),
            _25 = &mut (*_3),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_1),
            StorageLive(_29),
            _29 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:109:23: 109:44 (#0),
                    scope: scope[2],
                },
                kind: _27 = <&distr::uniform::Uniform<char> as distr::distribution::Distribution<char>>::sample_iter::<&mut R>(move _28, move _29) -> [return: bb12, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            StorageLive(_30),
            _30 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:109:23: 109:54 (#0),
                    scope: scope[2],
                },
                kind: _26 = <distr::distribution::Iter<&distr::uniform::Uniform<char>, &mut R, char> as core::iter::Iterator>::take(move _27, move _30) -> [return: bb13, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                    scope: scope[2],
                },
                kind: _0 = <alloc::string::String as core::iter::Extend<char>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::uniform::Uniform<char>, &mut R, char>>>(move _25, move _26) -> [return: bb14, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_15),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:110:6: 110:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_other.rs:95:5: 110:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:100:6: 100:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::uniform::Uniform<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:96:9: 96:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/uniform_other.rs:97:14: 97:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_other.rs:97:9: 97:12 (#0),
                            ),
                        ),
                        pat_span: src/distr/uniform_other.rs:97:9: 97:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:97:9: 97:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/uniform_other.rs:98:17: 98:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_other.rs:98:9: 98:15 (#0),
                            ),
                        ),
                        pat_span: src/distr/uniform_other.rs:98:9: 98:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:98:9: 98:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/uniform_other.rs:99:14: 99:19 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_other.rs:99:9: 99:12 (#0),
                            ),
                        ),
                        pat_span: src/distr/uniform_other.rs:99:9: 99:12 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:99:9: 99:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_other.rs:102:22: 102:67 (#0),
                            ),
                        ),
                        pat_span: src/distr/uniform_other.rs:102:13: 102:19 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:13: 102:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:22: 102:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:22: 102:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:43: 102:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:22: 102:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:102:22: 102:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:103:9: 105:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:103:12: 103:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:103:12: 103:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (u32, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:104:13: 104:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_other.rs:107:28: 107:79 (#0),
                            ),
                        ),
                        pat_span: src/distr/uniform_other.rs:107:13: 107:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:107:13: 107:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:107:28: 107:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:107:28: 107:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:107:43: 107:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:9: 108:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:9: 108:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:24: 108:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:24: 108:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:39: 108:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:108:24: 108:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:9: 109:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: core::iter::Take<distr::distribution::Iter<&'{erased} distr::uniform::Uniform<char>, &'{erased} mut R/#0, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:23: 109:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: distr::distribution::Iter<&'{erased} distr::uniform::Uniform<char>, &'{erased} mut R/#0, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:23: 109:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: &'{erased} distr::uniform::Uniform<char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:23: 109:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:40: 109:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/distr/uniform_other.rs:109:9: 109:55 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_other.rs:109:50: 109:53 (#0),
            scope: scope[0],
        },
    },
]