[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = ((*_1).0: u64),
            _2 = Eq(move _3, const distr::bernoulli::ALWAYS_TRUE),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:145:12: 145:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = const 1f64,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:145:9: 149:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).0: u64),
            _4 = move _5 as f64 (IntToFloat),
            StorageDead(_5),
            _0 = Div(move _4, const distr::bernoulli::SCALE),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:145:9: 149:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:150:6: 150:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:144:24: 144:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:144:14: 144:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:145:9: 149:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:145:12: 145:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:145:9: 149:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:145:12: 145:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:148:13: 148:40 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:148:13: 148:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/bernoulli.rs:148:13: 148:40 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:148:14: 148:24 (#0),
            scope: scope[0],
        },
    },
]