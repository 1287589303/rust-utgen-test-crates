[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _1,
            _4 = Eq(move _5, const 0_u64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:189:28: 189:42 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const core::num::<impl i64>::MAX,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:189:25: 195:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _1,
            StorageLive(_8),
            _8 = const core::num::<impl i64>::MAX as u64 (IntToInt),
            _6 = Le(move _7, move _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:191:19: 191:47 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_9),
            _9 = _1,
            _3 = move _9 as i64 (IntToInt),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:191:16: 195:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _3 = const core::num::<impl i64>::MAX,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:191:16: 195:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:189:25: 195:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut _2,
            _13 = &mut (*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:21: 197:51 (#0),
                    scope: scope[1],
                },
                kind: _12 = <R as rand_core::SeedableRng>::try_from_rng::<Rsdr>(move _13) -> [return: bb7, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
                    scope: scope[1],
                },
                kind: _11 = <core::result::Result<R, <Rsdr as rand_core::TryRngCore>::Error> as core::ops::Try>::branch(move _12) -> [return: bb8, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _15 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb11, 1: bb10, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_11 as Continue).0: R),
            _10 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb14, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_11 as Break).0: core::result::Result<core::convert::Infallible, <Rsdr as rand_core::TryRngCore>::Error>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
                    scope: scope[4],
                },
                kind: _0 = <core::result::Result<rngs::reseeding::ReseedingCore<R, Rsdr>, <Rsdr as rand_core::TryRngCore>::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, <Rsdr as rand_core::TryRngCore>::Error>>>::from_residual(move _18) -> [return: bb13, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:52: 197:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb15, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageLive(_20),
            StorageLive(_21),
            _21 = move _10,
            StorageLive(_22),
            _22 = move _2,
            StorageLive(_23),
            _23 = _3,
            StorageLive(_24),
            _24 = _3,
            _20 = rngs::reseeding::ReseedingCore::<R, Rsdr> { inner: move _21, reseeder: move _22, threshold: move _23, bytes_until_reseed: move _24 },
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:204:9: 204:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb16, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:204:9: 204:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            _0 = core::result::Result::<rngs::reseeding::ReseedingCore<R, Rsdr>, <Rsdr as rand_core::TryRngCore>::Error>::Ok(move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:204:10: 204:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:5: 205:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb19, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:5: 205:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:52: 197:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb21, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:5: 205:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:6: 205:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:204:9: 204:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:204:10: 204:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_20) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:5: 205:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#489),
                    scope: scope[4],
                },
                kind: drop(_18) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:52: 197:53 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:197:51: 197:52 (#489),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb30, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:205:5: 205:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:184:5: 205:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:184:51: 184:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:184:23: 184:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:184:12: 184:21 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:184:12: 184:21 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:184:12: 184:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:184:42: 184:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:184:28: 184:40 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:184:28: 184:40 (#0),
                    },
                ),
            ),
        ),
        ty: Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:184:28: 184:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:189:25: 195:10 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:189:13: 189:22 (#0),
                    },
                ),
            ),
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:189:13: 189:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:189:28: 189:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:189:28: 189:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:191:19: 191:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:191:19: 191:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:191:32: 191:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:192:13: 192:29 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:192:13: 192:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:197:21: 197:52 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:197:13: 197:18 (#0),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:13: 197:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>, R/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<R/#0, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:21: 197:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:37: 197:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:37: 197:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/rngs/reseeding.rs:197:21: 197:52 (#489),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, Alias(Projection, AliasTy { args: [Rsdr/#1], def_id: DefId(20:136 ~ rand_core[3b02]::TryRngCore::Error) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:51: 197:52 (#490),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/rngs/reseeding.rs:197:21: 197:52 (#489),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:197:21: 197:52 (#489),
                    },
                ),
            ),
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:197:21: 197:52 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:199:12: 204:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:200:13: 200:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Rsdr/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:201:13: 201:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:202:13: 202:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:203:33: 203:42 (#0),
            scope: scope[0],
        },
    },
]