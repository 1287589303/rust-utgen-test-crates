[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_3),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _4,
            _9 = MulWithOverflow(const 4_usize, _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:131:19: 131:26 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 4_usize, move _8) -> [success: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = move (_9.0: usize),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:131:9: 131:27 (#0),
                    scope: scope[0],
                },
                kind: _5 = alloc::string::String::reserve(move _6, move _7) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_3),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _1,
            StorageLive(_15),
            _15 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:132:18: 132:62 (#0),
                    scope: scope[0],
                },
                kind: _13 = <&distr::StandardUniform as distr::distribution::Distribution<char>>::sample_iter::<&mut R>(move _14, move _15) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_16),
            _16 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:132:18: 132:72 (#0),
                    scope: scope[0],
                },
                kind: _12 = <distr::distribution::Iter<&distr::StandardUniform, &mut R, char> as core::iter::Iterator>::take(move _13, move _16) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:132:9: 132:73 (#0),
                    scope: scope[0],
                },
                kind: _10 = <alloc::string::String as core::iter::Extend<char>>::extend::<core::iter::Take<distr::distribution::Iter<&distr::StandardUniform, &mut R, char>>>(move _11, move _12) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:133:6: 133:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/other.rs:127:5: 133:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:127:86: 127:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::StandardUniform,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:127:39: 127:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:127:51: 127:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:127:46: 127:49 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:127:46: 127:49 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:127:46: 127:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:127:62: 127:73 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:127:59: 127:60 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:127:59: 127:60 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:127:59: 127:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/other.rs:127:80: 127:85 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/other.rs:127:75: 127:78 (#0),
                            ),
                        ),
                        pat_span: src/distr/other.rs:127:75: 127:78 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:127:75: 127:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:131:9: 131:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:131:9: 131:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:131:19: 131:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:131:23: 131:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:131:19: 131:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:9: 132:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::string::String,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:9: 132:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<distr::distribution::Iter<&'{erased} distr::StandardUniform, &'{erased} mut R/#0, char>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:18: 132:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::distribution::Iter<&'{erased} distr::StandardUniform, &'{erased} mut R/#0, char>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:18: 132:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} distr::StandardUniform,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:52: 132:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:58: 132:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/other.rs:132:68: 132:71 (#0),
            scope: scope[0],
        },
    },
]