[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_4,
            StorageLive(_8),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:359:18: 359:27 (#0),
                    scope: scope[0],
                },
                kind: _9 = <N as seq::index_::UInt>::zero() -> [return: bb1, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:359:8: 359:27 (#0),
                    scope: scope[0],
                },
                kind: _6 = <N as core::cmp::PartialEq>::eq(move _7, move _8) -> [return: bb2, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:359:8: 359:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb7, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_11),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:360:33: 360:43 (#0),
                    scope: scope[0],
                },
                kind: _12 = alloc::vec::Vec::<u32>::new() -> [return: bb4, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = seq::index_::IndexVec::U32(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:360:43: 360:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_12) -> [return: bb5, unwind: bb84],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = core::result::Result::<seq::index_::IndexVec, distr::weighted::Error>::Ok(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:360:44: 360:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb6, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            _5 = const (),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:390:52: 390:69 (#0),
                    scope: scope[0],
                },
                kind: _14 = <N as seq::index_::UInt>::as_usize(move _15) -> [return: bb8, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:390:26: 390:70 (#0),
                    scope: scope[0],
                },
                kind: _13 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::with_capacity(move _14) -> [return: bb9, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            FakeRead(ForLet(None), _13),
            StorageLive(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:391:21: 391:30 (#0),
                    scope: scope[1],
                },
                kind: _16 = <N as seq::index_::UInt>::zero() -> [return: bb10, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _16),
            StorageLive(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:5: 404:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:5: 404:6 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb12, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_16,
            StorageLive(_21),
            _21 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:11: 392:25 (#0),
                    scope: scope[2],
                },
                kind: _19 = <N as core::cmp::PartialOrd>::lt(move _20, move _21) -> [return: bb13, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:11: 392:25 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _19) -> [0: bb32, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:29: 392:45 (#0),
                    scope: scope[2],
                },
                kind: _23 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::len(move _24) -> [return: bb15, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:48: 392:65 (#0),
                    scope: scope[2],
                },
                kind: _25 = <N as seq::index_::UInt>::as_usize(move _26) -> [return: bb16, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            _22 = Lt(move _23, move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:29: 392:65 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _22) -> [0: bb31, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_3,
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:393:29: 393:45 (#0),
                    scope: scope[2],
                },
                kind: _31 = <N as seq::index_::UInt>::as_usize(move _32) -> [return: bb18, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            _30 = (move _31,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:393:22: 393:46 (#0),
                    scope: scope[2],
                },
                kind: _28 = <F as core::ops::Fn<(usize,)>>::call(move _29, move _30) -> [return: bb19, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:393:22: 393:53 (#0),
                    scope: scope[2],
                },
                kind: _27 = <X as core::convert::Into<f64>>::into(move _28) -> [return: bb20, unwind: bb82],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _27,
            _34 = Gt(move _35, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:394:12: 394:24 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _34) -> [0: bb25, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:397:23: 397:42 (#0),
                    scope: scope[3],
                },
                kind: _38 = <R as rng::Rng>::random::<f64>(move _39) -> [return: bb22, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:397:23: 397:47 (#0),
                    scope: scope[3],
                },
                kind: _37 = std::f64::<impl f64>::ln(move _38) -> [return: bb23, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageLive(_40),
            _40 = _27,
            _36 = Div(move _37, move _40),
            StorageDead(_40),
            StorageDead(_37),
            FakeRead(ForLet(None), _36),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut _13,
            StorageLive(_43),
            StorageLive(_44),
            _44 = _16,
            StorageLive(_45),
            _45 = _36,
            _43 = seq::index_::sample_efraimidis_spirakis::Element::<N> { index: move _44, key: move _45 },
            StorageDead(_45),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:398:13: 398:52 (#0),
                    scope: scope[4],
                },
                kind: _41 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::push(move _42, move _43) -> [return: bb24, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_42),
            StorageDead(_41),
            _33 = const (),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:394:9: 401:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageLive(_46),
            StorageLive(_47),
            _47 = _27,
            _46 = Ge(move _47, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:399:20: 399:35 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _46) -> [0: bb27, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            _33 = const (),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:394:9: 401:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageLive(_49),
            _49 = distr::weighted::Error::InvalidWeight,
            _0 = core::result::Result::<seq::index_::IndexVec, distr::weighted::Error>::Err(move _49),
            StorageDead(_49),
            StorageDead(_46),
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_27),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &mut _16,
            StorageLive(_52),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:403:18: 403:26 (#0),
                    scope: scope[3],
                },
                kind: _52 = <N as seq::index_::UInt>::one() -> [return: bb29, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:403:9: 403:26 (#0),
                    scope: scope[3],
                },
                kind: _50 = <N as core::ops::AddAssign>::add_assign(move _51, move _52) -> [return: bb30, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            StorageDead(_51),
            StorageDead(_50),
            _18 = const (),
            StorageDead(_27),
            StorageDead(_22),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:392:5: 404:6 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_54),
            _17 = const (),
            StorageDead(_54),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageLive(_56),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:406:8: 406:24 (#0),
                    scope: scope[2],
                },
                kind: _58 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::len(move _59) -> [return: bb34, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            StorageLive(_60),
            StorageLive(_61),
            _61 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:406:27: 406:44 (#0),
                    scope: scope[2],
                },
                kind: _60 = <N as seq::index_::UInt>::as_usize(move _61) -> [return: bb35, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            _57 = Lt(move _58, move _60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:406:8: 406:44 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _57) -> [0: bb37, otherwise: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_58),
            StorageLive(_63),
            _63 = distr::weighted::Error::InsufficientNonZero,
            _0 = core::result::Result::<seq::index_::IndexVec, distr::weighted::Error>::Err(move _63),
            StorageDead(_63),
            StorageDead(_57),
            StorageDead(_56),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_60),
            StorageDead(_58),
            _56 = const (),
            StorageDead(_57),
            StorageDead(_56),
            StorageLive(_64),
            StorageLive(_65),
            StorageLive(_66),
            StorageLive(_67),
            _67 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:410:17: 410:36 (#0),
                    scope: scope[2],
                },
                kind: _66 = <R as rng::Rng>::random::<f64>(move _67) -> [return: bb38, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_67),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:410:17: 410:41 (#0),
                    scope: scope[2],
                },
                kind: _65 = std::f64::<impl f64>::ln(move _66) -> [return: bb39, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            StorageLive(_71),
            _71 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:410:44: 410:61 (#0),
                    scope: scope[2],
                },
                kind: _70 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::peek(move _71) -> [return: bb40, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_71),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:410:44: 410:70 (#0),
                    scope: scope[2],
                },
                kind: _69 = core::option::Option::<&seq::index_::sample_efraimidis_spirakis::Element<N>>::unwrap(move _70) -> [return: bb41, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_70),
            _68 = ((*_69).1: f64),
            _64 = Div(move _65, move _68),
            StorageDead(_68),
            StorageDead(_65),
            FakeRead(ForLet(None), _64),
            StorageDead(_69),
            StorageLive(_72),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:411:5: 428:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:411:5: 428:6 (#0),
                    scope: scope[5],
                },
                kind: falseUnwind -> [real: bb43, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_73),
            StorageLive(_74),
            _74 = &_16,
            StorageLive(_75),
            _75 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:411:11: 411:25 (#0),
                    scope: scope[5],
                },
                kind: _73 = <N as core::cmp::PartialOrd>::lt(move _74, move _75) -> [return: bb44, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:411:11: 411:25 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _73) -> [0: bb69, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_76),
            StorageLive(_77),
            StorageLive(_78),
            _78 = &_3,
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            _81 = _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:412:29: 412:45 (#0),
                    scope: scope[5],
                },
                kind: _80 = <N as seq::index_::UInt>::as_usize(move _81) -> [return: bb46, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_81),
            _79 = (move _80,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:412:22: 412:46 (#0),
                    scope: scope[5],
                },
                kind: _77 = <F as core::ops::Fn<(usize,)>>::call(move _78, move _79) -> [return: bb47, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_80),
            StorageDead(_79),
            StorageDead(_78),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:412:22: 412:53 (#0),
                    scope: scope[5],
                },
                kind: _76 = <X as core::convert::Into<f64>>::into(move _77) -> [return: bb48, unwind: bb81],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_77),
            FakeRead(ForLet(None), _76),
            StorageLive(_82),
            StorageLive(_83),
            StorageLive(_84),
            _84 = _76,
            _83 = Gt(move _84, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:413:12: 413:24 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _83) -> [0: bb63, otherwise: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageLive(_85),
            _85 = _76,
            _64 = Sub(_64, move _85),
            StorageDead(_85),
            StorageLive(_86),
            StorageLive(_87),
            _87 = _64,
            _86 = Le(move _87, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:415:16: 415:24 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _86) -> [0: bb61, otherwise: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            StorageLive(_88),
            StorageLive(_89),
            StorageLive(_90),
            _90 = &mut _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:416:37: 416:53 (#0),
                    scope: scope[6],
                },
                kind: _89 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::pop(move _90) -> [return: bb51, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_90),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:416:37: 416:62 (#0),
                    scope: scope[6],
                },
                kind: _88 = core::option::Option::<seq::index_::sample_efraimidis_spirakis::Element<N>>::unwrap(move _89) -> [return: bb52, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_89),
            FakeRead(ForLet(None), _88),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = (_88.1: f64),
            StorageLive(_94),
            _94 = _76,
            _92 = Mul(move _93, move _94),
            StorageDead(_94),
            StorageDead(_93),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:417:25: 417:59 (#0),
                    scope: scope[7],
                },
                kind: _91 = std::f64::<impl f64>::exp(move _92) -> [return: bb53, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_92),
            FakeRead(ForLet(None), _91),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            StorageLive(_98),
            _98 = &mut (*_1),
            StorageLive(_99),
            StorageLive(_100),
            _100 = _91,
            _99 = core::ops::Range::<f64> { start: move _100, end: const 1f64 },
            StorageDead(_100),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:418:27: 418:51 (#0),
                    scope: scope[8],
                },
                kind: _97 = <R as rng::Rng>::random_range::<f64, core::ops::Range<f64>>(move _98, move _99) -> [return: bb54, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:418:27: 418:56 (#0),
                    scope: scope[8],
                },
                kind: _96 = std::f64::<impl f64>::ln(move _97) -> [return: bb55, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_97),
            StorageLive(_101),
            _101 = _76,
            _95 = Div(move _96, move _101),
            StorageDead(_101),
            StorageDead(_96),
            FakeRead(ForLet(None), _95),
            StorageLive(_102),
            StorageLive(_103),
            _103 = &mut _13,
            StorageLive(_104),
            StorageLive(_105),
            _105 = _16,
            StorageLive(_106),
            _106 = _95,
            _104 = seq::index_::sample_efraimidis_spirakis::Element::<N> { index: move _105, key: move _106 },
            StorageDead(_106),
            StorageDead(_105),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:419:17: 419:56 (#0),
                    scope: scope[9],
                },
                kind: _102 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::push(move _103, move _104) -> [return: bb56, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_104),
            StorageDead(_103),
            StorageDead(_102),
            StorageLive(_107),
            StorageLive(_108),
            StorageLive(_109),
            _109 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:421:21: 421:40 (#0),
                    scope: scope[9],
                },
                kind: _108 = <R as rng::Rng>::random::<f64>(move _109) -> [return: bb57, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:421:21: 421:45 (#0),
                    scope: scope[9],
                },
                kind: _107 = std::f64::<impl f64>::ln(move _108) -> [return: bb58, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_108),
            StorageLive(_110),
            StorageLive(_111),
            StorageLive(_112),
            StorageLive(_113),
            _113 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:421:48: 421:65 (#0),
                    scope: scope[9],
                },
                kind: _112 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::peek(move _113) -> [return: bb59, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_113),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:421:48: 421:74 (#0),
                    scope: scope[9],
                },
                kind: _111 = core::option::Option::<&seq::index_::sample_efraimidis_spirakis::Element<N>>::unwrap(move _112) -> [return: bb60, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            _110 = ((*_111).1: f64),
            _64 = Div(move _107, move _110),
            StorageDead(_110),
            StorageDead(_107),
            StorageDead(_111),
            _82 = const (),
            StorageDead(_95),
            StorageDead(_91),
            StorageDead(_88),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:415:13: 422:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_87),
            _82 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:415:13: 422:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb62,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_86),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:413:9: 425:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageLive(_114),
            StorageLive(_115),
            _115 = _76,
            _114 = Ge(move _115, const 0f64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:423:20: 423:35 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _114) -> [0: bb65, otherwise: bb64],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            _82 = const (),
            StorageDead(_114),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:413:9: 425:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb66,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_115),
            StorageLive(_117),
            _117 = distr::weighted::Error::InvalidWeight,
            _0 = core::result::Result::<seq::index_::IndexVec, distr::weighted::Error>::Err(move _117),
            StorageDead(_117),
            StorageDead(_114),
            StorageDead(_83),
            StorageDead(_82),
            StorageDead(_76),
            StorageDead(_73),
            StorageDead(_72),
            StorageDead(_64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb76,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_83),
            StorageDead(_82),
            StorageLive(_118),
            StorageLive(_119),
            _119 = &mut _16,
            StorageLive(_120),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:427:18: 427:26 (#0),
                    scope: scope[6],
                },
                kind: _120 = <N as seq::index_::UInt>::one() -> [return: bb67, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:427:9: 427:26 (#0),
                    scope: scope[6],
                },
                kind: _118 = <N as core::ops::AddAssign>::add_assign(move _119, move _120) -> [return: bb68, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_120),
            StorageDead(_119),
            StorageDead(_118),
            _18 = const (),
            StorageDead(_76),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:411:5: 428:6 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb42,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_75),
            StorageDead(_74),
            StorageLive(_122),
            _72 = const (),
            StorageDead(_122),
            StorageDead(_73),
            StorageDead(_72),
            StorageLive(_124),
            StorageLive(_125),
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            _128 = &_13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:431:9: 431:26 (#0),
                    scope: scope[5],
                },
                kind: _127 = alloc::collections::BinaryHeap::<seq::index_::sample_efraimidis_spirakis::Element<N>>::iter(move _128) -> [return: bb70, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_128),
            StorageLive(_129),
            _129 = {closure@src/seq/index.rs:431:31: 431:36},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:431:9: 431:47 (#0),
                    scope: scope[5],
                },
                kind: _126 = <alloc::collections::binary_heap::Iter<'_, seq::index_::sample_efraimidis_spirakis::Element<N>> as core::iter::Iterator>::map::<N, {closure@src/seq/index.rs:431:31: 431:36}>(move _127, move _129) -> [return: bb71, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            StorageDead(_127),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:431:9: 431:57 (#0),
                    scope: scope[5],
                },
                kind: _125 = <core::iter::Map<alloc::collections::binary_heap::Iter<'_, seq::index_::sample_efraimidis_spirakis::Element<N>>, {closure@src/seq/index.rs:431:31: 431:36}> as core::iter::Iterator>::collect::<alloc::vec::Vec<N>>(move _126) -> [return: bb72, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_126),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:430:8: 432:6 (#0),
                    scope: scope[5],
                },
                kind: _124 = <seq::index_::IndexVec as core::convert::From<alloc::vec::Vec<N>>>::from(move _125) -> [return: bb73, unwind: bb80],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            _0 = core::result::Result::<seq::index_::IndexVec, distr::weighted::Error>::Ok(move _124),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:432:6: 432:7 (#0),
                    scope: scope[5],
                },
                kind: drop(_124) -> [return: bb74, unwind: bb83],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_124),
            StorageDead(_64),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb75, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb79, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb77, unwind: bb85],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb78,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb79, unwind: bb86],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:2: 433:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:432:5: 432:6 (#0),
                    scope: scope[5],
                },
                kind: drop(_125) -> [return: bb83, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:412:52: 412:53 (#0),
                    scope: scope[5],
                },
                kind: drop(_77) -> [return: bb83, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:393:52: 393:53 (#0),
                    scope: scope[2],
                },
                kind: drop(_28) -> [return: bb83, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_13) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:360:44: 360:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_11) -> [return: bb85, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:433:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb86, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/index.rs:344:1: 433:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<seq::index_::IndexVec, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:349:6: 349:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:345:10: 345:16 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:345:5: 345:8 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:345:5: 345:8 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:345:5: 345:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:346:13: 346:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:346:5: 346:11 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:346:5: 346:11 (#0),
                    },
                ),
            ),
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:346:5: 346:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:347:13: 347:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:347:5: 347:11 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:347:5: 347:11 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:347:5: 347:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/index.rs:348:13: 348:14 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:348:5: 348:11 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:348:5: 348:11 (#0),
                    },
                ),
            ),
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:348:5: 348:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:5: 361:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:8: 359:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:8: 359:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:18: 359:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:18: 359:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:359:28: 361:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:360:19: 360:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: alloc::vec::Vec<u32, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:360:33: 360:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:390:26: 390:70 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:390:9: 390:23 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:390:9: 390:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:390:52: 390:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:390:52: 390:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:391:21: 391:30 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:391:9: 391:18 (#0),
                    },
                ),
            ),
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:391:9: 391:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:5: 404:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:344:1: 433:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:11: 392:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:11: 392:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:19: 392:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:29: 392:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:29: 392:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: &'{erased} alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:29: 392:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:48: 392:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:48: 392:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:393:22: 393:53 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:393:13: 393:19 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:13: 393:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:22: 393:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:22: 393:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:22: 393:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:29: 393:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:393:29: 393:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:394:9: 401:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:394:12: 394:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:394:12: 394:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:397:23: 397:56 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:397:17: 397:20 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:397:17: 397:20 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:397:23: 397:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:397:23: 397:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:397:23: 397:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:397:50: 397:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:398:13: 398:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:398:13: 398:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: seq::index_::sample_efraimidis_spirakis::Element<N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:398:29: 398:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:398:39: 398:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:398:46: 398:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:399:20: 399:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:399:21: 399:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:399:36: 401:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::weighted::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:400:24: 400:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:403:9: 403:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:403:9: 403:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:403:18: 403:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:392:5: 404:6 (#573),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:5: 404:6 (#573),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:5: 404:6 (#573),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:392:5: 404:6 (#573),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:5: 408:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:8: 406:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:8: 406:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:8: 406:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:27: 406:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:27: 406:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:406:45: 408:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::weighted::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:407:20: 407:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:410:17: 410:74 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:410:9: 410:14 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:9: 410:14 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:17: 410:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:17: 410:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:17: 410:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:44: 410:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:44: 410:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:44: 410:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:410:44: 410:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:5: 428:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:411:5: 428:6 (#578),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:11: 411:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:411:5: 428:6 (#578),
                },
            ),
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:11: 411:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:411:5: 428:6 (#578),
                },
            ),
        ),
        ty: &'{erased} N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:19: 411:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:412:22: 412:53 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:412:13: 412:19 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:13: 412:19 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: X/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:22: 412:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:22: 412:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:22: 412:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:29: 412:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:412:29: 412:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:413:9: 425:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:413:12: 413:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:413:12: 413:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:414:18: 414:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:415:13: 422:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:415:16: 415:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:415:13: 422:14 (#0),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:415:16: 415:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:416:37: 416:62 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:416:21: 416:34 (#0),
                    },
                ),
            ),
        ),
        ty: seq::index_::sample_efraimidis_spirakis::Element<N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:416:21: 416:34 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<seq::index_::sample_efraimidis_spirakis::Element<N/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:416:37: 416:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:416:37: 416:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:417:25: 417:59 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:417:21: 417:22 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:417:21: 417:22 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:417:25: 417:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:417:26: 417:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:417:46: 417:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/index.rs:418:27: 418:65 (#0),
                            ),
                        ),
                        pat_span: src/seq/index.rs:418:21: 418:24 (#0),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:21: 418:24 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:27: 418:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:27: 418:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:27: 418:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<f64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:44: 418:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:44: 418:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:418:59: 418:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:419:17: 419:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:419:17: 419:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: seq::index_::sample_efraimidis_spirakis::Element<N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:419:33: 419:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:419:43: 419:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:419:50: 419:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:21: 421:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:21: 421:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:21: 421:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:48: 421:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:48: 421:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:48: 421:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:421:48: 421:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:423:20: 423:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:423:21: 423:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:423:36: 425:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::weighted::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:424:24: 424:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:427:9: 427:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:427:9: 427:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: N/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:427:18: 427:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/index.rs:411:5: 428:6 (#578),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:5: 428:6 (#578),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:5: 428:6 (#578),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:411:5: 428:6 (#578),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:430:8: 432:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:430:5: 432:7 (#0),
                },
            ),
        ),
        ty: alloc::vec::Vec<N/#3, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:431:9: 431:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:430:5: 432:7 (#0),
                },
            ),
        ),
        ty: core::iter::Map<alloc::collections::binary_heap::Iter<'{erased}, seq::index_::sample_efraimidis_spirakis::Element<N/#3>>, Closure(DefId(0:907 ~ rand[eea3]::seq::index_::sample_efraimidis_spirakis::{closure#0}), [R/#0, F/#1, X/#2, N/#3, i16, Binder { value: extern "RustCall" fn((&'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>,)) -> N/#3, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:431:9: 431:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:430:5: 432:7 (#0),
                },
            ),
        ),
        ty: alloc::collections::binary_heap::Iter<'{erased}, seq::index_::sample_efraimidis_spirakis::Element<N/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:431:9: 431:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:430:5: 432:7 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::collections::BinaryHeap<seq::index_::sample_efraimidis_spirakis::Element<N/#3>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:431:9: 431:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/index.rs:430:5: 432:7 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:907 ~ rand[eea3]::seq::index_::sample_efraimidis_spirakis::{closure#0}),
            [
                R/#0,
                F/#1,
                X/#2,
                N/#3,
                i16,
                Binder { value: extern "RustCall" fn((&'{erased} seq::index_::sample_efraimidis_spirakis::Element<N/#3>,)) -> N/#3, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/index.rs:431:31: 431:46 (#0),
            scope: scope[0],
        },
    },
]