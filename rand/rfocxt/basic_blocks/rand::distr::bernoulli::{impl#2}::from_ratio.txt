[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _1,
            StorageLive(_6),
            _6 = _2,
            _4 = Gt(move _5, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:130:12: 130:35 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:130:56: 132:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
            _7 = Eq(move _8, const 0_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:130:39: 130:55 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:130:56: 132:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb4,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = distr::bernoulli::BernoulliError::InvalidProbability,
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Err(move _10),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _3 = const (),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _1,
            StorageLive(_14),
            _14 = _2,
            _12 = Eq(move _13, move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:133:12: 133:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _12) -> [0: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_16),
            _16 = distr::bernoulli::Bernoulli { p_int: const distr::bernoulli::ALWAYS_TRUE },
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Ok(move _16),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:136:23: 136:43 (#0),
                    scope: scope[0],
                },
                kind: _20 = <f64 as core::convert::From<u32>>::from(move _21) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:136:46: 136:68 (#0),
                    scope: scope[0],
                },
                kind: _22 = <f64 as core::convert::From<u32>>::from(move _23) -> [return: bb9, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _19 = Div(move _20, move _22),
            StorageDead(_22),
            StorageDead(_20),
            _18 = Mul(move _19, const distr::bernoulli::SCALE),
            StorageDead(_19),
            _17 = move _18 as u64 (FloatToInt),
            StorageDead(_18),
            FakeRead(ForLet(None), _17),
            StorageLive(_24),
            StorageLive(_25),
            _25 = _17,
            _24 = distr::bernoulli::Bernoulli { p_int: move _25 },
            StorageDead(_25),
            _0 = core::result::Result::<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>::Ok(move _24),
            StorageDead(_24),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:138:6: 138:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:138:6: 138:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/bernoulli.rs:129:5: 138:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::bernoulli::Bernoulli, distr::bernoulli::BernoulliError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:129:60: 129:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/bernoulli.rs:129:34: 129:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/bernoulli.rs:129:23: 129:32 (#0),
                            ),
                        ),
                        pat_span: src/distr/bernoulli.rs:129:23: 129:32 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:129:23: 129:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/bernoulli.rs:129:52: 129:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/bernoulli.rs:129:39: 129:50 (#0),
                            ),
                        ),
                        pat_span: src/distr/bernoulli.rs:129:39: 129:50 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:129:39: 129:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:9: 132:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:12: 130:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:12: 130:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:24: 130:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:39: 130:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:39: 130:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:130:56: 132:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::BernoulliError,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:131:24: 131:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:133:9: 135:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:133:12: 133:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:133:12: 133:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:133:25: 133:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:133:37: 135:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:134:23: 134:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/bernoulli.rs:136:21: 136:85 (#0),
                            ),
                        ),
                        pat_span: src/distr/bernoulli.rs:136:13: 136:18 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:13: 136:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:21: 136:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:22: 136:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:23: 136:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:33: 136:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:46: 136:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:136:56: 136:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::bernoulli::Bernoulli,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:137:12: 137:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/bernoulli.rs:137:24: 137:29 (#0),
            scope: scope[0],
        },
    },
]