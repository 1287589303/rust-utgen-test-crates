[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:56:12: 56:27 (#0),
                    scope: scope[0],
                },
                kind: _3 = <Self as seq::slice::IndexedRandom>::is_empty(move _4) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:56:12: 56:27 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::option::Option::<&<Self as core::ops::Index<usize>>::Output>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:56:9: 60:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut (*_2),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:59:43: 59:53 (#0),
                    scope: scope[0],
                },
                kind: _12 = <Self as seq::slice::IndexedRandom>::len(move _13) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = core::ops::RangeTo::<usize> { end: move _12 },
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:59:24: 59:54 (#0),
                    scope: scope[0],
                },
                kind: _9 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _10, move _11) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:59:23: 59:55 (#0),
                    scope: scope[0],
                },
                kind: _7 = <Self as core::ops::Index<usize>>::index(move _8, move _9) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            _6 = &(*_7),
            _5 = &(*_6),
            _0 = core::option::Option::<&<Self as core::ops::Index<usize>>::Output>::Some(move _5),
            StorageDead(_5),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:56:9: 60:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:61:6: 61:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:52:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:52:41: 52:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:52:18: 52:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:52:30: 52:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:52:25: 52:28 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:52:25: 52:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:52:25: 52:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:56:9: 60:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:56:12: 56:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:56:9: 60:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:56:12: 56:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:18: 59:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:18: 59:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:23: 59:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:19: 59:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:24: 59:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:24: 59:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:41: 59:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:43: 59:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:59:13: 59:56 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:59:43: 59:47 (#0),
            scope: scope[0],
        },
    },
]