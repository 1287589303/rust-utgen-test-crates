[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:45: 70:56 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::slice::<impl [T]>::len(move _7) -> [return: bb1, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:57 (#0),
                    scope: scope[0],
                },
                kind: _5 = core::num::NonZero::<usize>::new(move _6) -> [return: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_8),
            _8 = distr::slice::Empty,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:70 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::option::Option::<core::num::NonZero<usize>>::ok_or::<distr::slice::Empty>(move _5, move _8) -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:71 (#418),
                    scope: scope[0],
                },
                kind: _3 = <core::result::Result<core::num::NonZero<usize>, distr::slice::Empty> as core::ops::Try>::branch(move _4) -> [return: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _9 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:71 (#418),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:71 (#418),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:70: 70:71 (#419),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_3 as Continue).0: core::num::NonZero<usize>),
            _2 = _13,
            StorageDead(_13),
            FakeRead(ForLet(None), _2),
            StorageDead(_3),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _1,
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:74:41: 74:58 (#0),
                    scope: scope[1],
                },
                kind: _18 = core::num::NonZero::<usize>::get(move _19) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_3 as Break).0: core::result::Result<core::convert::Infallible, distr::slice::Empty>),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:70:27: 70:71 (#418),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<distr::slice::Choose<'_, T>, distr::slice::Empty> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, distr::slice::Empty>>>::from_residual(move _12) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:77:6: 77:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:74:20: 74:59 (#0),
                    scope: scope[1],
                },
                kind: _17 = <distr::uniform::int::UniformUsize as distr::uniform::UniformSampler>::new::<usize, usize>(const 0_usize, move _18) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:74:20: 74:68 (#0),
                    scope: scope[1],
                },
                kind: _16 = core::result::Result::<distr::uniform::int::UniformUsize, distr::uniform::Error>::unwrap(move _17) -> [return: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageLive(_20),
            _20 = _2,
            _14 = distr::slice::Choose::<'_, T> { slice: move _15, range: move _16, num_choices: move _20 },
            StorageDead(_20),
            StorageDead(_16),
            StorageDead(_15),
            _0 = core::result::Result::<distr::slice::Choose<'_, T>, distr::slice::Empty>::Ok(move _14),
            StorageDead(_14),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:77:6: 77:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:77:6: 77:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/slice.rs:69:5: 77:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::slice::Choose<'{erased}, T/#1>, distr::slice::Empty>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:69:35: 69:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/slice.rs:69:23: 69:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:69:16: 69:21 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:69:16: 69:21 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} [T/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:69:16: 69:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/slice.rs:70:27: 70:71 (#0),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:70:13: 70:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:13: 70:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, distr::slice::Empty>, core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:27: 70:71 (#418),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::num::NonZero<usize>, distr::slice::Empty>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:27: 70:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:27: 70:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:45: 70:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [T/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:45: 70:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::slice::Empty,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:64: 70:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:70: 70:71 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/distr/slice.rs:70:27: 70:71 (#418),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:70:70: 70:71 (#419),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, distr::slice::Empty>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:70: 70:71 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:70: 70:71 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, distr::slice::Empty>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:70: 70:71 (#419),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/distr/slice.rs:70:27: 70:71 (#418),
                            ),
                        ),
                        pat_span: src/distr/slice.rs:70:27: 70:71 (#418),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:70:27: 70:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::slice::Choose<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:72:12: 76:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} [T/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:73:13: 73:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::uniform::int::UniformUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:74:20: 74:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:72:9: 76:11 (#0),
                },
            ),
        ),
        ty: core::result::Result<distr::uniform::int::UniformUsize, distr::uniform::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:74:20: 74:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:72:9: 76:11 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:74:41: 74:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/slice.rs:72:9: 76:11 (#0),
                },
            ),
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:74:41: 74:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/slice.rs:75:13: 75:24 (#0),
            scope: scope[0],
        },
    },
]