[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:240:29: 240:55 (#0),
                    scope: scope[0],
                },
                kind: _4 = alloc::vec::Vec::<<Self as core::iter::Iterator>::Item>::with_capacity(move _5) -> [return: bb1, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _4,
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:241:26: 241:39 (#0),
                    scope: scope[1],
                },
                kind: _10 = <Self as core::iter::Iterator>::by_ref(move _11) -> [return: bb2, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut (*_10),
            StorageDead(_11),
            StorageLive(_12),
            _12 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:241:26: 241:52 (#0),
                    scope: scope[1],
                },
                kind: _8 = <&mut Self as core::iter::Iterator>::take(move _9, move _12) -> [return: bb3, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:241:9: 241:53 (#0),
                    scope: scope[1],
                },
                kind: _6 = <alloc::vec::Vec<<Self as core::iter::Iterator>::Item> as core::iter::Extend<<Self as core::iter::Iterator>::Item>>::extend::<core::iter::Take<&mut Self>>(move _7, move _8) -> [return: bb4, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_10),
            StorageDead(_6),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:247:12: 247:27 (#0),
                    scope: scope[1],
                },
                kind: _15 = alloc::vec::Vec::<<Self as core::iter::Iterator>::Item>::len(move _16) -> [return: bb5, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageLive(_17),
            _17 = _3,
            _14 = Eq(move _15, move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:247:12: 247:37 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _14) -> [0: bb33, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:30: 248:46 (#0),
                    scope: scope[1],
                },
                kind: _19 = <Self as core::iter::Iterator>::enumerate(move _20) -> [return: bb7, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:30: 248:46 (#545),
                    scope: scope[1],
                },
                kind: _18 = <core::iter::Enumerate<Self> as core::iter::IntoIterator>::into_iter(move _19) -> [return: bb8, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            PlaceMention(_18),
            StorageLive(_21),
            _21 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb10, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            StorageLive(_26),
            _26 = &mut _21,
            _25 = &mut (*_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:30: 248:46 (#545),
                    scope: scope[2],
                },
                kind: _24 = <core::iter::Enumerate<Self> as core::iter::Iterator>::next(move _25) -> [return: bb11, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            PlaceMention(_24),
            _27 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:30: 248:46 (#545),
                    scope: scope[2],
                },
                kind: switchInt(move _27) -> [0: bb13, 1: bb14, otherwise: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:30: 248:46 (#545),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = (((_24 as Some).0: (usize, <Self as core::iter::Iterator>::Item)).0: usize),
            StorageLive(_30),
            _30 = move (((_24 as Some).0: (usize, <Self as core::iter::Iterator>::Item)).1: <Self as core::iter::Iterator>::Item),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut (*_2),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            StorageLive(_36),
            _36 = _29,
            _37 = AddWithOverflow(_36, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:249:44: 249:49 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_37.1: bool), "attempt to compute `{} + {}`, which would overflow", move _36, const 1_usize) -> [success: bb16, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: drop(_24) -> [return: bb30, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = move (_37.0: usize),
            StorageDead(_36),
            StorageLive(_38),
            _38 = _3,
            _39 = AddWithOverflow(_35, _38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:249:44: 249:58 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _35, move _38) -> [success: bb17, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _34 = move (_39.0: usize),
            StorageDead(_38),
            StorageDead(_35),
            _33 = core::ops::RangeTo::<usize> { end: move _34 },
            StorageDead(_34),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:249:25: 249:59 (#0),
                    scope: scope[3],
                },
                kind: _31 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _32, move _33) -> [return: bb18, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:37: 250:57 (#0),
                    scope: scope[5],
                },
                kind: _42 = <alloc::vec::Vec<<Self as core::iter::Iterator>::Item> as core::ops::DerefMut>::deref_mut(move _43) -> [return: bb19, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = &mut (*_42),
            StorageDead(_43),
            StorageLive(_44),
            _44 = _31,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:37: 250:57 (#0),
                    scope: scope[5],
                },
                kind: _40 = core::slice::<impl [<Self as core::iter::Iterator>::Item]>::get_mut::<usize>(move _41, move _44) -> [return: bb20, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_44),
            StorageDead(_41),
            PlaceMention(_40),
            _45 = discriminant(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:24: 250:34 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _45) -> [1: bb21, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:24: 250:34 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb22, imaginary: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
            _46 = move ((_40 as Some).0: &mut <Self as core::iter::Iterator>::Item),
            StorageLive(_47),
            _47 = move _30,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:251:21: 251:26 (#0),
                    scope: scope[5],
                },
                kind: drop((*_46)) -> [return: bb23, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_46) = move _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:251:32: 251:33 (#0),
                    scope: scope[5],
                },
                kind: drop(_47) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_46) = move _47,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:251:32: 251:33 (#0),
                    scope: scope[5],
                },
                kind: drop(_47) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            _23 = const (),
            StorageDead(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _23 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_42),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb28, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: drop(_24) -> [return: bb29, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            _22 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb31, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb32, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:247:9: 258:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:257:13: 257:38 (#0),
                    scope: scope[1],
                },
                kind: _48 = alloc::vec::Vec::<<Self as core::iter::Iterator>::Item>::shrink_to_fit(move _49) -> [return: bb34, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:247:9: 258:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb35,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _0 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:260:5: 260:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb36, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:260:5: 260:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb37, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:260:6: 260:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_30) -> [return: bb39, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[2],
                },
                kind: drop(_24) -> [return: bb40, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[1],
                },
                kind: drop(_21) -> [return: bb41, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:253:13: 253:14 (#544),
                    scope: scope[1],
                },
                kind: drop(_18) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:45: 248:46 (#545),
                    scope: scope[1],
                },
                kind: drop(_19) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:248:45: 248:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:260:5: 260:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:260:5: 260:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:236:5: 260:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:236:68: 236:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:236:27: 236:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:236:42: 236:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:236:37: 236:40 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:236:37: 236:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:236:37: 236:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:236:58: 236:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:236:50: 236:56 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:236:50: 236:56 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:236:50: 236:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:240:29: 240:55 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:240:13: 240:26 (#0),
                    },
                ),
            ),
        ),
        ty: alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:240:13: 240:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:240:48: 240:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:9: 241:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:9: 241:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Take<&'{erased} mut Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:26: 241:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:26: 241:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:26: 241:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:26: 241:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:241:45: 241:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:247:9: 258:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:247:12: 247:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:247:12: 247:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:247:12: 247:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:247:31: 247:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                },
            ),
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                },
            ),
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:248:13: 253:14 (#544),
                },
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/seq/iterator.rs:248:30: 248:46 (#545),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:248:30: 248:46 (#545),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:236:5: 260:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:30: 248:46 (#545),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:13: 253:14 (#544),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:13: 253:14 (#544),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/seq/iterator.rs:248:30: 248:46 (#545),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:248:17: 248:26 (#546),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:18: 248:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/seq/iterator.rs:248:30: 248:46 (#545),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:248:17: 248:26 (#546),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:248:21: 248:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:249:25: 249:59 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:249:21: 249:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:21: 249:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:25: 249:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:42: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:44: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:44: 249:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:44: 249:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:44: 249:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:52: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:249:44: 249:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:37: 250:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:37: 250:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:37: 250:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:37: 250:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:250:17: 252:18 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:55: 250:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:24: 250:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _40,
                                ),
                                src/seq/iterator.rs:250:37: 250:57 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:250:24: 250:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:250:29: 250:33 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:251:29: 251:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:257:13: 257:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut alloc::vec::Vec<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:257:13: 257:22 (#0),
            scope: scope[0],
        },
    },
]