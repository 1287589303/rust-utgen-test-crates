[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _1,
            StorageLive(_4),
            _4 = move _2,
            StorageLive(_5),
            _5 = core::marker::PhantomData::<fn(T) -> S>,
            _0 = distr::distribution::Map::<Self, F, T, S> { distr: move _3, func: move _4, phantom: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:106:9: 106:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:106:9: 106:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:107:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:107:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:107:6: 107:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:106:9: 106:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:107:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:107:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/distribution.rs:97:5: 107:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: distr::distribution::Map<Self/#0, F/#2, T/#1, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:97:36: 97:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:97:18: 97:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/distribution.rs:97:30: 97:31 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/distribution.rs:97:24: 97:28 (#0),
                            ),
                        ),
                        pat_span: src/distr/distribution.rs:97:24: 97:28 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:97:24: 97:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:103:20: 103:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:104:13: 104:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<Binder { value: fn(T/#1) -> S/#3, bound_vars: [] }>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/distribution.rs:105:22: 105:47 (#0),
            scope: scope[0],
        },
    },
]