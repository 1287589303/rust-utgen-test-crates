[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(((*_1).0: rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R, Rsdr>>).2: rngs::reseeding::ReseedingCore<R, Rsdr>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:135:36: 135:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = <rngs::reseeding::ReseedingCore<R, Rsdr> as core::clone::Clone>::clone(move _4) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:135:22: 135:56 (#0),
                    scope: scope[0],
                },
                kind: _2 = rand_core::block::BlockRng::<rngs::reseeding::ReseedingCore<R, Rsdr>>::new(move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = rngs::reseeding::ReseedingRng::<R, Rsdr>(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:135:56: 135:57 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:136:6: 136:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:135:55: 135:56 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:132:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rngs::reseeding::ReseedingRng<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:132:24: 132:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} rngs::reseeding::ReseedingRng<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:132:14: 132:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rand_core::block::BlockRng<rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:135:22: 135:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:135:9: 135:57 (#0),
                },
            ),
        ),
        ty: rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:135:36: 135:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/reseeding.rs:135:9: 135:57 (#0),
                },
            ),
        ),
        ty: &'{erased} rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:135:36: 135:47 (#0),
            scope: scope[0],
        },
    },
]