[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:199:22: 199:31 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [<Self as core::iter::Iterator>::Item]>::len(move _5) -> [return: bb1, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            _6 = const 0_usize,
            FakeRead(ForLet(None), _6),
            StorageLive(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:201:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:201:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            StorageLive(_10),
            _10 = _6,
            StorageLive(_11),
            _11 = _4,
            _9 = Lt(move _10, move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:201:15: 201:27 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _9) -> [0: bb16, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:202:33: 202:44 (#0),
                    scope: scope[3],
                },
                kind: _12 = <Self as core::iter::Iterator>::next(move _13) -> [return: bb5, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            PlaceMention(_12),
            _14 = discriminant(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:202:20: 202:30 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _14) -> [1: bb6, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:202:20: 202:30 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_12 as Some).0: <Self as core::iter::Iterator>::Item),
            StorageLive(_16),
            _16 = move _15,
            StorageLive(_17),
            _17 = _6,
            _18 = Len((*_3)),
            _19 = Lt(_17, _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:203:17: 203:25 (#0),
                    scope: scope[3],
                },
                kind: assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> [success: bb8, unwind: bb50],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:203:17: 203:25 (#0),
                    scope: scope[3],
                },
                kind: drop((*_3)[_17]) -> [return: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_17] = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:203:31: 203:32 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb11, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_3)[_17] = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:203:17: 203:25 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_17),
            _20 = AddWithOverflow(_6, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:204:17: 204:25 (#0),
                    scope: scope[3],
                },
                kind: assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", _6, const 1_usize) -> [success: bb12, unwind: bb51],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move (_20.0: usize),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:205:13: 205:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb14, unwind: bb52],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:209:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb42, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:209:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb15, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:201:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_23),
            _7 = const (),
            StorageDead(_23),
            StorageDead(_9),
            StorageDead(_7),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            _28 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:26: 212:42 (#0),
                    scope: scope[2],
                },
                kind: _27 = <Self as core::iter::Iterator>::enumerate(move _28) -> [return: bb17, unwind: bb49],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:26: 212:42 (#541),
                    scope: scope[2],
                },
                kind: _26 = <core::iter::Enumerate<Self> as core::iter::IntoIterator>::into_iter(move _27) -> [return: bb18, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            PlaceMention(_26),
            StorageLive(_29),
            _29 = move _26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb20, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            _33 = &mut _29,
            _32 = &mut (*_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:26: 212:42 (#541),
                    scope: scope[4],
                },
                kind: _31 = <core::iter::Enumerate<Self> as core::iter::Iterator>::next(move _32) -> [return: bb21, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            PlaceMention(_31),
            _34 = discriminant(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:26: 212:42 (#541),
                    scope: scope[4],
                },
                kind: switchInt(move _34) -> [0: bb23, 1: bb24, otherwise: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:26: 212:42 (#541),
                    scope: scope[4],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: falseEdge -> [real: bb25, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_36),
            _36 = (((_31 as Some).0: (usize, <Self as core::iter::Iterator>::Item)).0: usize),
            StorageLive(_37),
            _37 = move (((_31 as Some).0: (usize, <Self as core::iter::Iterator>::Item)).1: <Self as core::iter::Iterator>::Item),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &mut (*_2),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            _43 = _36,
            _44 = AddWithOverflow(_43, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:213:40: 213:45 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 1_usize) -> [success: bb26, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb39, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _42 = move (_44.0: usize),
            StorageDead(_43),
            StorageLive(_45),
            _45 = _4,
            _46 = AddWithOverflow(_42, _45),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:213:40: 213:54 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_46.1: bool), "attempt to compute `{} + {}`, which would overflow", move _42, move _45) -> [success: bb27, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _41 = move (_46.0: usize),
            StorageDead(_45),
            StorageDead(_42),
            _40 = core::ops::RangeTo::<usize> { end: move _41 },
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:213:21: 213:55 (#0),
                    scope: scope[5],
                },
                kind: _38 = <R as rng::Rng>::random_range::<usize, core::ops::RangeTo<usize>>(move _39, move _40) -> [return: bb28, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_40),
            StorageDead(_39),
            FakeRead(ForLet(None), _38),
            StorageLive(_47),
            StorageLive(_48),
            _48 = &mut (*_3),
            StorageLive(_49),
            _49 = _38,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:214:33: 214:47 (#0),
                    scope: scope[7],
                },
                kind: _47 = core::slice::<impl [<Self as core::iter::Iterator>::Item]>::get_mut::<usize>(move _48, move _49) -> [return: bb29, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_49),
            StorageDead(_48),
            PlaceMention(_47),
            _50 = discriminant(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:214:20: 214:30 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _50) -> [1: bb30, otherwise: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:214:20: 214:30 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb31, imaginary: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_51),
            _51 = move ((_47 as Some).0: &mut <Self as core::iter::Iterator>::Item),
            StorageLive(_52),
            _52 = move _37,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:215:17: 215:22 (#0),
                    scope: scope[7],
                },
                kind: drop((*_51)) -> [return: bb32, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_51) = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:215:28: 215:29 (#0),
                    scope: scope[7],
                },
                kind: drop(_52) -> [return: bb34, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_51) = move _52,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:215:28: 215:29 (#0),
                    scope: scope[7],
                },
                kind: drop(_52) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_52),
            _30 = const (),
            StorageDead(_51),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:214:13: 216:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:214:13: 216:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb36,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_47),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_37) -> [return: bb37, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb38, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_30),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_31),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb40, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[2],
                },
                kind: drop(_26) -> [return: bb41, unwind: bb53],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            _0 = _6,
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:219:5: 219:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb43, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:219:5: 219:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb43, unwind: bb54],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:219:6: 219:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_37) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[2],
                },
                kind: drop(_29) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:217:9: 217:10 (#540),
                    scope: scope[2],
                },
                kind: drop(_26) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:41: 212:42 (#541),
                    scope: scope[2],
                },
                kind: drop(_27) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:212:41: 212:42 (#0),
                    scope: scope[2],
                },
                kind: drop(_28) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:203:31: 203:32 (#0),
                    scope: scope[3],
                },
                kind: drop(_16) -> [return: bb51, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:205:13: 205:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb52, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:209:9: 209:10 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb53, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:219:5: 219:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb54, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:195:5: 219:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:195:82: 195:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:195:32: 195:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:195:47: 195:53 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:195:42: 195:45 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:195:42: 195:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:195:42: 195:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:195:60: 195:77 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:195:55: 195:58 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:195:55: 195:58 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:195:55: 195:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:199:22: 199:31 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:199:13: 199:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:199:13: 199:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:199:22: 199:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:200:23: 200:24 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:200:13: 200:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:200:13: 200:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:9: 209:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:195:5: 219:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:201:9: 209:10 (#538),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:15: 201:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:201:9: 209:10 (#538),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:15: 201:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:201:9: 209:10 (#538),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:21: 201:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:202:13: 208:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:202:33: 202:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:202:13: 208:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:202:33: 202:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:202:20: 202:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _12,
                                ),
                                src/seq/iterator.rs:202:33: 202:44 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:202:20: 202:30 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:202:25: 202:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:203:28: 203:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:203:21: 203:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:203:17: 203:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:203:17: 203:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:204:17: 204:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:202:13: 208:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:205:20: 208:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:201:9: 209:10 (#538),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:9: 209:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:9: 209:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:201:9: 209:10 (#538),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:9: 217:10 (#540),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _26,
                                ),
                                src/seq/iterator.rs:212:26: 212:42 (#541),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:212:26: 212:42 (#541),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }))>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:26: 212:42 (#541),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:9: 217:10 (#540),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:9: 217:10 (#540),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                src/seq/iterator.rs:212:26: 212:42 (#541),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:212:13: 212:22 (#542),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:14: 212:15 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _31,
                                ),
                                src/seq/iterator.rs:212:26: 212:42 (#541),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:212:13: 212:22 (#542),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:212:17: 212:21 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:213:21: 213:55 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:213:17: 213:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:17: 213:18 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:21: 213:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:38: 213:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:40: 213:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:40: 213:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:40: 213:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:40: 213:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:48: 213:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:213:40: 213:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:214:13: 216:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:214:33: 214:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:214:13: 216:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:214:33: 214:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/seq/iterator.rs:214:13: 216:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:214:45: 214:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:214:20: 214:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _47,
                                ),
                                src/seq/iterator.rs:214:33: 214:47 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:214:20: 214:30 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:214:25: 214:29 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    Self/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:215:25: 215:29 (#0),
            scope: scope[0],
        },
    },
]