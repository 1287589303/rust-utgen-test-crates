[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = ((*_1).3: i64),
            _4 = Le(move _5, const 0_i64),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:163:12: 163:40 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_7),
            _7 = &mut (*_1),
            StorageLive(_8),
            _8 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:167:20: 167:53 (#0),
                    scope: scope[0],
                },
                kind: _0 = rngs::reseeding::ReseedingCore::<R, Rsdr>::reseed_and_generate(move _7, move _8) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:172:6: 172:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = const (),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:169:37: 169:53 (#0),
                    scope: scope[0],
                },
                kind: _11 = <&mut <R as rand_core::block::BlockRngCore>::Results as core::convert::AsRef<[<R as rand_core::block::BlockRngCore>::Item]>>::as_ref(move _12) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = &(*_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:169:25: 169:54 (#0),
                    scope: scope[0],
                },
                kind: _9 = core::mem::size_of_val::<[<R as rand_core::block::BlockRngCore>::Item]>(move _10) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            _14 = _9,
            _13 = move _14 as i64 (IntToInt),
            StorageDead(_14),
            _15 = SubWithOverflow(((*_1).3: i64), _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:170:9: 170:52 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_15.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).3: i64), move _13) -> [success: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_1).3: i64) = move (_15.0: i64),
            StorageDead(_13),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut ((*_1).0: R),
            StorageLive(_18),
            _18 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:171:9: 171:37 (#0),
                    scope: scope[1],
                },
                kind: _16 = <R as rand_core::block::BlockRngCore>::generate(move _17, move _18) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            _0 = const (),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:172:6: 172:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:172:6: 172:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/reseeding.rs:162:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:162:56: 162:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:162:17: 162:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/reseeding.rs:162:37: 162:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:162:28: 162:35 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:162:28: 162:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:162:28: 162:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:163:9: 168:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:163:12: 163:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:163:12: 163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:163:41: 168:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingCore<R/#0, Rsdr/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:167:20: 167:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:167:45: 167:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/reseeding.rs:169:25: 169:54 (#0),
                            ),
                        ),
                        pat_span: src/rngs/reseeding.rs:169:13: 169:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:169:13: 169:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:17 ~ rand_core[3b02]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:169:37: 169:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:17 ~ rand_core[3b02]::block::BlockRngCore::Item) })],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:169:37: 169:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:169:37: 169:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:170:36: 170:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:170:36: 170:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (i64, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:170:9: 170:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:171:9: 171:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:171:9: 171:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [R/#0], def_id: DefId(20:18 ~ rand_core[3b02]::block::BlockRngCore::Results) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/reseeding.rs:171:29: 171:36 (#0),
            scope: scope[0],
        },
    },
]