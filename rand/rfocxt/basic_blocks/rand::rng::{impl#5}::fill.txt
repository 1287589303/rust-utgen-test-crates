[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:28: 376:43 (#285),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [f32]>::iter_mut(move _5) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:28: 376:43 (#777),
                    scope: scope[0],
                },
                kind: _3 = <core::slice::IterMut<'_, f32> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_6),
            _6 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:17: 378:18 (#776),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:17: 378:18 (#776),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:28: 376:43 (#777),
                    scope: scope[1],
                },
                kind: _9 = <core::slice::IterMut<'_, f32> as core::iter::Iterator>::next(move _10) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:28: 376:43 (#777),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb7, 1: bb8, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:28: 376:43 (#777),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:17: 378:18 (#776),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_9 as Some).0: &mut f32),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:377:28: 377:40 (#285),
                    scope: scope[2],
                },
                kind: _15 = <R as rng::Rng>::random::<f32>(move _16) -> [return: bb10, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:379:14: 379:14 (#285),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            (*_14) = move _15,
            StorageDead(_15),
            _8 = const (),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:376:17: 378:18 (#776),
                    scope: scope[1],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:375:13: 379:14 (#285),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:375:61: 375:61 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut [f32],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:375:38: 375:47 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rng.rs:375:54: 375:60 (#285),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rng.rs:375:49: 375:52 (#285),
                            ),
                        ),
                        pat_span: src/rng.rs:375:49: 375:52 (#285),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:375:49: 375:52 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:376:17: 378:18 (#776),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:376:17: 378:18 (#776),
                },
            ),
        ),
        ty: core::slice::IterMut<'{erased}, f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:376:17: 378:18 (#776),
                },
            ),
        ),
        ty: &'{erased} mut [f32],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:32 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/rng.rs:376:28: 376:43 (#777),
                            ),
                        ),
                        pat_span: src/rng.rs:376:28: 376:43 (#777),
                    },
                ),
            ),
        ),
        ty: core::slice::IterMut<'{erased}, f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:375:13: 379:14 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} mut f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::slice::IterMut<'{erased}, f32>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:28: 376:43 (#777),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:17: 378:18 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:17: 378:18 (#776),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/rng.rs:376:28: 376:43 (#777),
                            ),
                        ),
                        pat_span: src/rng.rs:376:21: 376:24 (#778),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut f32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:376:21: 376:24 (#285),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:377:28: 377:40 (#285),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:377:28: 377:31 (#285),
            scope: scope[0],
        },
    },
]