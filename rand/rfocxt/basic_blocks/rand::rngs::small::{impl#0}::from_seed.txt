[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            StorageLive(_8),
            _8 = core::ops::RangeTo::<usize> { end: const <rngs::small::SmallRng as rand_core::SeedableRng>::from_seed::LEN },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:95:26: 95:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = <[u8; 32] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _7, move _8) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _5 = &(*_6),
            _4 = &(*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:95:20: 95:45 (#0),
                    scope: scope[0],
                },
                kind: _3 = <&[u8] as core::convert::TryInto<[u8; 32]>>::try_into(move _4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:95:20: 95:54 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::result::Result::<[u8; 32], core::array::TryFromSliceError>::unwrap(move _3) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:96:18: 96:38 (#0),
                    scope: scope[1],
                },
                kind: _9 = <rngs::xoshiro256plusplus::Xoshiro256PlusPlus as rand_core::SeedableRng>::from_seed(move _10) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _0 = rngs::small::SmallRng(move _9),
            StorageDead(_9),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:97:6: 97:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/small.rs:91:5: 97:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: rngs::small::SmallRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:91:39: 91:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rngs/small.rs:91:24: 91:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/small.rs:91:18: 91:22 (#0),
                            ),
                        ),
                        pat_span: src/rngs/small.rs:91:18: 91:22 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 32_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:91:18: 91:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/small.rs:95:20: 95:54 (#0),
                            ),
                        ),
                        pat_span: src/rngs/small.rs:95:13: 95:17 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 32_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:13: 95:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<[u8; 32_usize], core::array::TryFromSliceError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:20: 95:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:20: 95:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:20: 95:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:26: 95:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 32_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:22: 95:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:95:27: 95:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: rngs::xoshiro256plusplus::Xoshiro256PlusPlus,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:96:18: 96:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/small.rs:96:9: 96:39 (#0),
                },
            ),
        ),
        ty: [u8; 32_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/small.rs:96:33: 96:37 (#0),
            scope: scope[0],
        },
    },
]