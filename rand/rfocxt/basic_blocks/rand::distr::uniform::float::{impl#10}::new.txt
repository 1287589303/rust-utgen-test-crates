[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:98:28: 98:42 (#172),
                    scope: scope[0],
                },
                kind: _4 = <B1 as distr::uniform::SampleBorrow<f64>>::borrow(move _5) -> [return: bb1, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = (*_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:99:29: 99:44 (#172),
                    scope: scope[1],
                },
                kind: _7 = <B2 as distr::uniform::SampleBorrow<f64>>::borrow(move _8) -> [return: bb2, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = (*_7),
            FakeRead(ForLet(None), _6),
            StorageDead(_7),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:21: 101:39 (#172),
                    scope: scope[2],
                },
                kind: _10 = <f64 as distr::utils::FloatSIMDUtils>::all_finite(move _11) -> [return: bb3, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:21: 101:39 (#172),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [0: bb5, otherwise: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:44: 101:63 (#172),
                    scope: scope[2],
                },
                kind: _12 = <f64 as distr::utils::FloatSIMDUtils>::all_finite(move _13) -> [return: bb6, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:64: 103:18 (#172),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:44: 101:63 (#172),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _9 = const (),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _3,
            StorageLive(_19),
            _19 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:104:21: 104:39 (#172),
                    scope: scope[2],
                },
                kind: _17 = <f64 as distr::utils::FloatSIMDUtils>::all_lt(move _18, move _19) -> [return: bb10, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:101:64: 103:18 (#172),
                    scope: scope[2],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = distr::uniform::Error::NonFinite,
            _0 = core::result::Result::<distr::uniform::float::UniformFloat<f64>, distr::uniform::Error>::Err(move _15),
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:104:21: 104:39 (#172),
                    scope: scope[2],
                },
                kind: switchInt(move _17) -> [0: bb12, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            _16 = const (),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_22),
            StorageLive(_23),
            _23 = _6,
            StorageLive(_24),
            _24 = _3,
            _22 = Sub(move _23, move _24),
            StorageDead(_24),
            StorageDead(_23),
            FakeRead(ForLet(None), _22),
            StorageLive(_25),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:109:21: 109:41 (#172),
                    scope: scope[3],
                },
                kind: _26 = <f64 as distr::utils::FloatSIMDUtils>::all_finite(move _27) -> [return: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageLive(_21),
            _21 = distr::uniform::Error::EmptyRange,
            _0 = core::result::Result::<distr::uniform::float::UniformFloat<f64>, distr::uniform::Error>::Err(move _21),
            StorageDead(_21),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:109:21: 109:41 (#172),
                    scope: scope[3],
                },
                kind: switchInt(move _26) -> [0: bb15, otherwise: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            _25 = const (),
            StorageDead(_26),
            StorageDead(_25),
            StorageLive(_30),
            StorageLive(_31),
            _31 = _3,
            StorageLive(_32),
            _32 = _6,
            StorageLive(_33),
            _33 = _22,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:113:20: 113:55 (#172),
                    scope: scope[3],
                },
                kind: _30 = distr::uniform::float::UniformFloat::<f64>::new_bounded(move _31, move _32, move _33) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageLive(_29),
            _29 = distr::uniform::Error::NonFinite,
            _0 = core::result::Result::<distr::uniform::float::UniformFloat<f64>, distr::uniform::Error>::Err(move _29),
            StorageDead(_29),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            _0 = core::result::Result::<distr::uniform::float::UniformFloat<f64>, distr::uniform::Error>::Ok(move _30),
            StorageDead(_30),
            StorageDead(_22),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb20, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb20, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:14: 114:14 (#172),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:114:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/uniform_float.rs:93:13: 114:14 (#172),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::uniform::float::UniformFloat<f64>, distr::uniform::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:93:54: 93:73 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/uniform_float.rs:93:35: 93:37 (#172),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_float.rs:93:28: 93:33 (#172),
                            ),
                        ),
                        pat_span: src/distr/uniform_float.rs:93:28: 93:33 (#172),
                    },
                ),
            ),
        ),
        ty: B1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:93:28: 93:33 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/uniform_float.rs:93:47: 93:49 (#172),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_float.rs:93:39: 93:45 (#172),
                            ),
                        ),
                        pat_span: src/distr/uniform_float.rs:93:39: 93:45 (#172),
                    },
                ),
            ),
        ),
        ty: B2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:93:39: 93:45 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_float.rs:98:27: 98:42 (#172),
                            ),
                        ),
                        pat_span: src/distr/uniform_float.rs:98:21: 98:24 (#172),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:98:21: 98:24 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:98:28: 98:42 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} B1/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:98:28: 98:33 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_float.rs:99:28: 99:44 (#172),
                            ),
                        ),
                        pat_span: src/distr/uniform_float.rs:99:21: 99:25 (#172),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:99:21: 99:25 (#172),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:99:29: 99:44 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} B2/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:99:29: 99:35 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:17: 103:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:21: 101:39 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:22: 101:25 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:44: 101:63 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:45: 101:49 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:101:64: 103:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::uniform::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:102:32: 102:48 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:104:17: 106:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:104:21: 104:39 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:104:22: 104:25 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:104:33: 104:37 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:104:40: 106:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::uniform::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:105:32: 105:49 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/uniform_float.rs:108:29: 108:39 (#172),
                            ),
                        ),
                        pat_span: src/distr/uniform_float.rs:108:21: 108:26 (#172),
                    },
                ),
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:108:21: 108:26 (#172),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:108:29: 108:33 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:108:36: 108:39 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:109:17: 111:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:109:21: 109:41 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:109:22: 109:27 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:109:42: 111:18 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::uniform::Error,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:110:32: 110:48 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: distr::uniform::float::UniformFloat<f64>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:113:20: 113:55 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/uniform_float.rs:113:17: 113:56 (#172),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:113:38: 113:41 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/uniform_float.rs:113:17: 113:56 (#172),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:113:43: 113:47 (#172),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/distr/uniform_float.rs:113:17: 113:56 (#172),
                },
            ),
        ),
        ty: f64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/uniform_float.rs:113:49: 113:54 (#172),
            scope: scope[0],
        },
    },
]