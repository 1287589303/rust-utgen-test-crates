[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:44: 170:54 (#0),
                    scope: scope[0],
                },
                kind: _9 = <Self as seq::slice::IndexedRandom>::len(move _10) -> [return: bb1, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = core::ops::Range::<usize> { start: const 0_usize, end: move _9 },
            StorageDead(_9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_3,
            StorageLive(_13),
            _13 = &(*_1),
            _11 = {closure@src/seq/slice.rs:170:60: 170:65} { weight: move _12, self: move _13 },
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:40: 170:85 (#0),
                    scope: scope[0],
                },
                kind: _7 = <core::ops::Range<usize> as core::iter::Iterator>::map::<B, {closure@src/seq/slice.rs:170:60: 170:65}>(move _8, move _11) -> [return: bb2, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:21: 170:86 (#0),
                    scope: scope[0],
                },
                kind: _6 = distr::weighted::weighted_index::WeightedIndex::<X>::new::<core::iter::Map<core::ops::Range<usize>, {closure@src/seq/slice.rs:170:60: 170:65}>>(move _7) -> [return: bb3, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:21: 170:87 (#550),
                    scope: scope[0],
                },
                kind: _5 = <core::result::Result<distr::weighted::weighted_index::WeightedIndex<X>, distr::weighted::Error> as core::ops::Try>::branch(move _6) -> [return: bb4, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _14 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:21: 170:87 (#550),
                    scope: scope[0],
                },
                kind: switchInt(move _14) -> [0: bb7, 1: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:21: 170:87 (#550),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:86: 170:87 (#551),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = move ((_5 as Continue).0: distr::weighted::weighted_index::WeightedIndex<X>),
            _4 = move _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:86: 170:87 (#0),
                    scope: scope[0],
                },
                kind: drop(_18) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = ((_5 as Break).0: core::result::Result<core::convert::Infallible, distr::weighted::Error>),
            StorageLive(_17),
            _17 = _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:21: 170:87 (#550),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<&<Self as core::ops::Index<usize>>::Output, distr::weighted::Error> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, distr::weighted::Error>>>::from_residual(move _17) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:87: 170:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb15, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            FakeRead(ForLet(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:87: 170:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &(*_1),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_4,
            StorageLive(_25),
            _25 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:171:18: 171:35 (#0),
                    scope: scope[1],
                },
                kind: _23 = <distr::weighted::weighted_index::WeightedIndex<X> as distr::distribution::Distribution<usize>>::sample::<R>(move _24, move _25) -> [return: bb12, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:171:17: 171:36 (#0),
                    scope: scope[1],
                },
                kind: _21 = <Self as core::ops::Index<usize>>::index(move _22, move _23) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            _20 = &(*_21),
            _19 = &(*_20),
            _0 = core::result::Result::<&<Self as core::ops::Index<usize>>::Output, distr::weighted::Error>::Ok(move _19),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb14, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_21),
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:6: 172:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:87: 170:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:170:86: 170:87 (#550),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:172:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:158:5: 172:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<&'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }), distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:162:10: 162:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:159:9: 159:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:160:14: 160:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:160:9: 160:12 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:160:9: 160:12 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:160:9: 160:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:161:17: 161:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:161:9: 161:15 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:161:9: 161:15 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:161:9: 161:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:170:21: 170:87 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:170:13: 170:18 (#0),
                    },
                ),
            ),
        ),
        ty: distr::weighted::weighted_index::WeightedIndex<X/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:13: 170:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, distr::weighted::Error>, distr::weighted::weighted_index::WeightedIndex<X/#4>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:21: 170:87 (#550),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<distr::weighted::weighted_index::WeightedIndex<X/#4>, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:21: 170:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<core::ops::Range<usize>, Closure(DefId(0:773 ~ rand[eea3]::seq::slice::IndexedRandom::choose_weighted::{closure#0}), [Self/#0, R/#1, F/#2, B/#3, X/#4, i16, Binder { value: extern "RustCall" fn((usize,)) -> B/#3, bound_vars: [] }, (&'{erased} F/#2, &'{erased} Self/#0)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:40: 170:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:40: 170:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:44: 170:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:44: 170:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:773 ~ rand[eea3]::seq::slice::IndexedRandom::choose_weighted::{closure#0}),
            [
                Self/#0,
                R/#1,
                F/#2,
                B/#3,
                X/#4,
                i16,
                Binder { value: extern "RustCall" fn((usize,)) -> B/#3, bound_vars: [] },
                (&'{erased} F/#2, &'{erased} Self/#0),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:60: 170:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:60: 170:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:60: 170:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:86: 170:87 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/seq/slice.rs:170:21: 170:87 (#550),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:170:86: 170:87 (#551),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:86: 170:87 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:86: 170:87 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, distr::weighted::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:86: 170:87 (#551),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/seq/slice.rs:170:21: 170:87 (#550),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:170:21: 170:87 (#550),
                    },
                ),
            ),
        ),
        ty: distr::weighted::weighted_index::WeightedIndex<X/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:170:21: 170:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:12: 171:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:12: 171:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:17: 171:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:13: 171:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:18: 171:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: &'{erased} distr::weighted::weighted_index::WeightedIndex<X/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:18: 171:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:171:9: 171:37 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:171:31: 171:34 (#0),
            scope: scope[0],
        },
    },
]