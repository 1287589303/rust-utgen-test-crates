[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut (*_1),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:296:20: 296:25 (#0),
                    scope: scope[0],
                },
                kind: _5 = rngs::thread::rng() -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut _5,
            _3 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:296:5: 296:26 (#0),
                    scope: scope[0],
                },
                kind: _0 = <T as rng::Fill>::fill::<rngs::thread::ThreadRng>(move _2, move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:297:1: 297:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:297:2: 297:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:297:1: 297:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:295:1: 297:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:295:44: 295:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:295:37: 295:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:295:31: 295:35 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:295:31: 295:35 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:295:31: 295:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:296:5: 296:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:296:5: 296:9 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:296:5: 296:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:296:15: 296:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:296:5: 296:26 (#0),
                },
            ),
        ),
        ty: &'{erased} mut rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:296:15: 296:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:296:5: 296:26 (#0),
                },
            ),
        ),
        ty: rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:296:20: 296:25 (#0),
            scope: scope[0],
        },
    },
]