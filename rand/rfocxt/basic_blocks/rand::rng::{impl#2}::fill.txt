[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            _3 = move _4 as &mut [T] (PointerCoercion(Unsize)),
            StorageDead(_4),
            StorageLive(_5),
            _5 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:439:9: 439:39 (#0),
                    scope: scope[0],
                },
                kind: _0 = <[T] as rng::Fill>::fill::<R>(move _3, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:440:6: 440:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rng.rs:438:5: 440:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:438:53: 438:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:438:30: 438:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/rng.rs:438:46: 438:52 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/rng.rs:438:41: 438:44 (#0),
                            ),
                        ),
                        pat_span: src/rng.rs:438:41: 438:44 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:438:41: 438:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:439:9: 439:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [T/#0],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:439:29: 439:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:439:9: 439:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [T/#0; N/#1],
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:439:29: 439:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/rng.rs:439:9: 439:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rng.rs:439:35: 439:38 (#0),
            scope: scope[0],
        },
    },
]