[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).0: alloc::vec::Vec<X>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:314:43: 314:72 (#0),
                    scope: scope[0],
                },
                kind: _8 = alloc::vec::Vec::<X>::len(move _9) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            _7 = &_8,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:314:32: 314:73 (#0),
                    scope: scope[0],
                },
                kind: _4 = <usize as core::cmp::Ord>::cmp(move _5, move _6) -> [return: bb2, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _10 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:314:26: 314:73 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [255: bb4, 0: bb5, 1: bb6, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:314:32: 314:73 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:315:13: 315:17 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb7, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:316:13: 316:18 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<X>::None,
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:324:6: 324:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &((*_1).0: alloc::vec::Vec<X>),
            StorageLive(_14),
            _14 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:315:44: 315:51 (#0),
                    scope: scope[0],
                },
                kind: _12 = <alloc::vec::Vec<X> as core::ops::Index<usize>>::index(move _13, move _14) -> [return: bb8, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &(*_12),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:315:21: 315:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = <X as core::clone::Clone>::clone(move _11) -> [return: bb9, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:315:58: 315:59 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = &((*_1).1: X),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:316:22: 316:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = <X as core::clone::Clone>::clone(move _15) -> [return: bb11, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:316:46: 316:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForLet(None), _3),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_4),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _2,
            _18 = Gt(move _19, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:320:12: 320:21 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _18) -> [0: bb17, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _3,
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &((*_1).0: alloc::vec::Vec<X>),
            StorageLive(_26),
            StorageLive(_27),
            _27 = _2,
            _28 = SubWithOverflow(_27, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:321:48: 321:57 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_28.1: bool), "attempt to compute `{} - {}`, which would overflow", move _27, const 1_usize) -> [success: bb14, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = move (_28.0: usize),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:321:47: 321:58 (#0),
                    scope: scope[1],
                },
                kind: _24 = <alloc::vec::Vec<X> as core::ops::Index<usize>>::index(move _25, move _26) -> [return: bb15, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            _23 = &(*_24),
            _22 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:321:13: 321:58 (#0),
                    scope: scope[1],
                },
                kind: _20 = <X as core::ops::SubAssign<&X>>::sub_assign(move _21, move _22) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_20),
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:320:9: 322:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            _17 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:320:9: 322:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageLive(_29),
            _29 = move _3,
            _0 = core::option::Option::<X>::Some(move _29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:323:20: 323:21 (#0),
                    scope: scope[1],
                },
                kind: drop(_29) -> [return: bb19, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:324:5: 324:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb20, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:324:6: 324:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:324:6: 324:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:324:5: 324:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/distr/weighted/weighted_index.rs:308:5: 324:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<X/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:308:43: 308:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} distr::weighted::weighted_index::WeightedIndex<X/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:308:19: 308:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/distr/weighted/weighted_index.rs:308:33: 308:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/weighted/weighted_index.rs:308:26: 308:31 (#0),
                            ),
                        ),
                        pat_span: src/distr/weighted/weighted_index.rs:308:26: 308:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:308:26: 308:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/distr/weighted/weighted_index.rs:314:26: 318:10 (#0),
                            ),
                        ),
                        pat_span: src/distr/weighted/weighted_index.rs:314:13: 314:23 (#0),
                    },
                ),
            ),
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:13: 314:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::cmp::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:32: 314:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:32: 314:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:42: 314:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:42: 314:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:43: 314:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:314:43: 314:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: i8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:315:13: 315:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:315:21: 315:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:315:44: 315:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:315:21: 315:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:315:45: 315:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:316:22: 316:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:317:24: 317:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:320:9: 322:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:320:12: 320:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:320:12: 320:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:13: 321:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:13: 321:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:23: 321:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:23: 321:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:47: 321:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} alloc::vec::Vec<X/#0, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:24: 321:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:48: 321:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:48: 321:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:321:48: 321:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: X/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/distr/weighted/weighted_index.rs:323:14: 323:20 (#0),
            scope: scope[0],
        },
    },
]