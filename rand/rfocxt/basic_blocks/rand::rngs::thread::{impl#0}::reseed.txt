[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:106:34: 106:48 (#0),
                    scope: scope[0],
                },
                kind: _6 = <alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>> as core::ops::Deref>::deref(move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &(*_6),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:106:34: 106:48 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::cell::UnsafeCell::<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>::get(move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = &mut (*_4),
            _2 = &mut (*_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_8),
            _8 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:107:9: 107:21 (#0),
                    scope: scope[1],
                },
                kind: _0 = rngs::reseeding::ReseedingRng::<rand_chacha::ChaCha12Core, rand_core::OsRng>::reseed(move _8) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:108:6: 108:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/rngs/thread.rs:103:5: 108:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), rand_core::OsError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:103:33: 103:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut rngs::thread::ThreadRng,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:103:19: 103:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/rngs/thread.rs:106:19: 106:50 (#0),
                            ),
                        ),
                        pat_span: src/rngs/thread.rs:106:13: 106:16 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:13: 106:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:28: 106:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/thread.rs:106:28: 106:48 (#0),
                },
            ),
        ),
        ty: *mut rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:34: 106:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/thread.rs:106:28: 106:48 (#0),
                },
            ),
        ),
        ty: &'{erased} core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:34: 106:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/thread.rs:106:28: 106:48 (#0),
                },
            ),
        ),
        ty: &'{erased} core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:34: 106:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/thread.rs:106:28: 106:48 (#0),
                },
            ),
        ),
        ty: &'{erased} alloc::rc::Rc<core::cell::UnsafeCell<rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>>, alloc::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:106:34: 106:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/rngs/thread.rs:107:9: 107:21 (#0),
                },
            ),
        ),
        ty: &'{erased} mut rngs::reseeding::ReseedingRng<rand_chacha::ChaCha12Core, rand_core::OsRng>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/rngs/thread.rs:107:9: 107:12 (#0),
            scope: scope[0],
        },
    },
]