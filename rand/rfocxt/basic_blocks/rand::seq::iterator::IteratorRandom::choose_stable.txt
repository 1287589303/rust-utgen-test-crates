[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = const 0_usize,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            _4 = core::option::Option::<<Self as core::iter::Iterator>::Item>::None,
            FakeRead(ForLet(None), _4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:143:32: 143:53 (#0),
                    scope: scope[2],
                },
                kind: _5 = seq::coin_flipper::CoinFlipper::<&mut R>::new(move _6) -> [return: bb1, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:145:9: 177:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:145:9: 177:10 (#0),
                    scope: scope[3],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = const 0_usize,
            FakeRead(ForLet(None), _9),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:152:30: 152:46 (#0),
                    scope: scope[4],
                },
                kind: _11 = <Self as core::iter::Iterator>::size_hint(move _12) -> [return: bb4, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            StorageLive(_10),
            _10 = (_11.0: usize),
            StorageDead(_11),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = _10,
            _14 = Ge(move _15, const 2_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:153:16: 153:26 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _14) -> [0: bb26, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = _10,
            _18 = core::ops::Range::<usize> { start: const 0_usize, end: move _19 },
            StorageDead(_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &mut _5,
            StorageLive(_22),
            _22 = &_3,
            _20 = {closure@src/seq/iterator.rs:155:29: 155:33} { coin_flipper: move _21, consumed: move _22 },
            StorageDead(_22),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:154:40: 155:88 (#0),
                    scope: scope[5],
                },
                kind: _17 = <core::ops::Range<usize> as core::iter::Iterator>::filter::<{closure@src/seq/iterator.rs:155:29: 155:33}>(move _18, move _20) -> [return: bb6, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:154:40: 156:28 (#0),
                    scope: scope[5],
                },
                kind: _16 = <core::iter::Filter<core::ops::Range<usize>, {closure@src/seq/iterator.rs:155:29: 155:33}> as core::iter::Iterator>::last(move _17) -> [return: bb7, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            FakeRead(ForLet(None), _16),
            StorageLive(_23),
            _23 = _10,
            _24 = AddWithOverflow(_3, _23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:158:17: 158:34 (#0),
                    scope: scope[6],
                },
                kind: assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _23) -> [success: bb8, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_24.0: usize),
            StorageDead(_23),
            StorageLive(_25),
            _25 = _10,
            _9 = move _25,
            StorageDead(_25),
            PlaceMention(_16),
            _26 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:161:24: 161:32 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _26) -> [1: bb9, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:161:24: 161:32 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = ((_16 as Some).0: usize),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _1,
            StorageLive(_30),
            _30 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:162:30: 162:42 (#0),
                    scope: scope[7],
                },
                kind: _28 = <Self as core::iter::Iterator>::nth(move _29, move _30) -> [return: bb11, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_30),
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:162:21: 162:27 (#0),
                    scope: scope[7],
                },
                kind: drop(_4) -> [return: bb12, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:162:41: 162:42 (#0),
                    scope: scope[7],
                },
                kind: drop(_28) -> [return: bb14, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move _28,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:162:41: 162:42 (#0),
                    scope: scope[7],
                },
                kind: drop(_28) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageLive(_31),
            StorageLive(_32),
            _32 = _27,
            _33 = AddWithOverflow(_32, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:163:29: 163:35 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _32, const 1_usize) -> [success: bb15, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _31 = move (_33.0: usize),
            StorageDead(_32),
            _34 = SubWithOverflow(_9, _31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:163:21: 163:35 (#0),
                    scope: scope[7],
                },
                kind: assert(!move (_34.1: bool), "attempt to compute `{} - {}`, which would overflow", _9, move _31) -> [success: bb16, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = move (_34.0: usize),
            StorageDead(_31),
            StorageLive(_35),
            StorageLive(_36),
            _36 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#363),
                    scope: scope[7],
                },
                kind: switchInt(move _36) -> [0: bb22, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &_4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:164:35: 164:51 (#0),
                    scope: scope[7],
                },
                kind: _38 = core::option::Option::<<Self as core::iter::Iterator>::Item>::is_some(move _39) -> [return: bb18, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:164:35: 164:51 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _38) -> [0: bb20, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            _37 = const (),
            StorageDead(_38),
            StorageDead(_37),
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#362),
                    scope: scope[7],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageLive(_41),
            StorageLive(_42),
            StorageLive(_43),
            StorageLive(_44),
            StorageLive(_45),
            _45 = [const "iterator shorter than size_hint().0"],
            _44 = &_45,
            _43 = &(*_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#367),
                    scope: scope[7],
                },
                kind: _42 = core::fmt::Arguments::<'_>::new_const::<1>(move _43) -> [return: bb21, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#366),
                    scope: scope[7],
                },
                kind: _41 = core::panicking::panic_fmt(move _42) -> bb46,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _35 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#362),
                    scope: scope[7],
                },
                kind: goto -> bb23,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            _13 = const (),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:161:17: 165:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:161:17: 165:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:153:13: 166:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            _13 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:153:13: 166:14 (#0),
                    scope: scope[5],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &mut _1,
            StorageLive(_48),
            _48 = _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:168:24: 168:38 (#0),
                    scope: scope[5],
                },
                kind: _46 = <Self as core::iter::Iterator>::nth(move _47, move _48) -> [return: bb28, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_48),
            StorageDead(_47),
            FakeRead(ForLet(None), _46),
            StorageLive(_49),
            StorageLive(_50),
            StorageLive(_51),
            _51 = &_46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:169:16: 169:30 (#0),
                    scope: scope[8],
                },
                kind: _50 = core::option::Option::<<Self as core::iter::Iterator>::Item>::is_none(move _51) -> [return: bb29, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:169:16: 169:30 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _50) -> [0: bb31, otherwise: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            _0 = move _4,
            StorageDead(_50),
            StorageDead(_49),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:177:9: 177:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb42, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            _49 = const (),
            StorageDead(_50),
            StorageDead(_49),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &mut _5,
            StorageLive(_56),
            StorageLive(_57),
            _57 = _3,
            _58 = AddWithOverflow(_57, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:173:51: 173:63 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", move _57, const 1_usize) -> [success: bb32, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _56 = move (_58.0: usize),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:173:16: 173:64 (#0),
                    scope: scope[8],
                },
                kind: _54 = seq::coin_flipper::CoinFlipper::<&mut R>::random_ratio_one_over(move _55, move _56) -> [return: bb33, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:173:16: 173:64 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _54) -> [0: bb38, otherwise: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            StorageLive(_59),
            _59 = move _46,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:174:17: 174:23 (#0),
                    scope: scope[8],
                },
                kind: drop(_4) -> [return: bb35, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move _59,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:174:29: 174:30 (#0),
                    scope: scope[8],
                },
                kind: drop(_59) -> [return: bb37, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = move _59,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:174:29: 174:30 (#0),
                    scope: scope[8],
                },
                kind: drop(_59) -> [return: bb45, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            _53 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:173:13: 175:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_55),
            _53 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:173:13: 175:14 (#0),
                    scope: scope[8],
                },
                kind: goto -> bb39,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_54),
            StorageDead(_53),
            _60 = AddWithOverflow(_3, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:176:13: 176:26 (#0),
                    scope: scope[8],
                },
                kind: assert(!move (_60.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_usize) -> [success: bb40, unwind: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = move (_60.0: usize),
            _8 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:177:9: 177:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb41, unwind: bb46],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:145:9: 177:10 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_46),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:178:5: 178:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb43, unwind: bb47],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:178:5: 178:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb44, unwind: bb48],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:178:6: 178:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:177:9: 177:10 (#0),
                    scope: scope[5],
                },
                kind: drop(_46) -> [return: bb46, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:178:5: 178:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb47, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:178:5: 178:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb48, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/iterator.rs:137:5: 178:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:137:51: 137:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                ImplicitSelf(
                    Mut,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:137:25: 137:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/iterator.rs:137:40: 137:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:137:35: 137:38 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:137:35: 137:38 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:137:35: 137:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:141:28: 141:29 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:141:13: 141:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:141:13: 141:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:142:26: 142:30 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:142:13: 142:23 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:142:13: 142:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:143:32: 143:53 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:143:13: 143:29 (#0),
                    },
                ),
            ),
        ),
        ty: seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:143:13: 143:29 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:143:49: 143:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/iterator.rs:145:9: 177:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:145:9: 177:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:137:5: 178:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:150:28: 150:29 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:150:17: 150:25 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:150:17: 150:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/seq/iterator.rs:152:30: 152:46 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:152:17: 152:27 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:152:18: 152:23 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:152:30: 152:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:152:30: 152:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:153:13: 166:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:153:16: 153:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:153:16: 153:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:154:40: 156:28 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:154:21: 154:37 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:154:21: 154:37 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Filter<core::ops::Range<usize>, Closure(DefId(0:734 ~ rand[eea3]::seq::iterator::IteratorRandom::choose_stable::{closure#0}), [Self/#0, R/#1, i16, Binder { value: extern "RustCall" fn((&'^0 usize,)) -> bool, bound_vars: [Region(BrAnon)] }, (&'{erased} mut seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>, &'{erased} usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:154:40: 155:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:154:40: 154:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:154:44: 154:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:734 ~ rand[eea3]::seq::iterator::IteratorRandom::choose_stable::{closure#0}),
            [
                Self/#0,
                R/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 usize,)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>, &'{erased} usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:155:29: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:155:29: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:155:29: 155:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:158:29: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:158:17: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:159:24: 159:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:161:24: 161:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/seq/iterator.rs:161:35: 161:51 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:161:24: 161:32 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:161:29: 161:31 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:162:30: 162:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:162:30: 162:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:162:39: 162:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:163:29: 163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:163:29: 163:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:163:29: 163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:163:21: 163:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#362),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#363),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#364),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:164:35: 164:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:164:35: 164:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#366),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#366),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#367),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:164:53: 164:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:164:53: 164:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:164:53: 164:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/iterator.rs:168:24: 168:38 (#0),
                            ),
                        ),
                        pat_span: src/seq/iterator.rs:168:17: 168:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:168:17: 168:21 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:168:24: 168:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:168:33: 168:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:169:13: 171:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:169:16: 169:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:169:16: 169:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:169:31: 171:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:13: 175:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:16: 173:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut seq::coin_flipper::CoinFlipper<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:16: 173:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:51: 173:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:51: 173:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:173:51: 173:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [Self/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:174:26: 174:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/iterator.rs:176:13: 176:26 (#0),
            scope: scope[0],
        },
    },
]