[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = _3,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:95:45: 95:55 (#0),
                    scope: scope[0],
                },
                kind: _6 = <Self as seq::slice::IndexedRandom>::len(move _7) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:95:22: 95:56 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::cmp::min::<usize>(move _5, move _6) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
            _8 = &(*_1),
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:98:23: 98:41 (#0),
                    scope: scope[1],
                },
                kind: _9 = <core::marker::PhantomData<<Self as core::ops::Index<usize>>::Output> as core::default::Default>::default() -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_2),
            StorageLive(_13),
            StorageLive(_14),
            _14 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:99:41: 99:51 (#0),
                    scope: scope[1],
                },
                kind: _13 = <Self as seq::slice::IndexedRandom>::len(move _14) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageLive(_15),
            _15 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:99:22: 99:60 (#0),
                    scope: scope[1],
                },
                kind: _11 = seq::index_::sample::<R>(move _12, move _13, move _15) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:99:22: 99:72 (#0),
                    scope: scope[1],
                },
                kind: _10 = <seq::index_::IndexVec as core::iter::IntoIterator>::into_iter(move _11) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            _0 = seq::slice::SliceChooseIter::<'_, Self, <Self as core::ops::Index<usize>>::Output> { slice: move _8, _phantom: move _9, indices: move _10 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:100:9: 100:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:101:6: 101:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:99:71: 99:72 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/seq/slice.rs:90:5: 101:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: seq::slice::SliceChooseIter<'{erased}, Self/#0, Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:90:65: 90:100 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:90:27: 90:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:90:39: 90:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:90:34: 90:37 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:90:34: 90:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:90:34: 90:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/seq/slice.rs:90:55: 90:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:90:47: 90:53 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:90:47: 90:53 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:90:47: 90:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/seq/slice.rs:95:22: 95:56 (#0),
                            ),
                        ),
                        pat_span: src/seq/slice.rs:95:13: 95:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:95:13: 95:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:95:37: 95:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:95:45: 95:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:95:45: 95:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:97:20: 97:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<Alias(Projection, AliasTy { args: [Self/#0, usize], def_id: DefId(1:40133 ~ core[a245]::ops::index::Index::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:98:23: 98:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: seq::index_::IndexVecIntoIter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:22: 99:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:96:9: 100:10 (#0),
                },
            ),
        ),
        ty: seq::index_::IndexVec,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:22: 99:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:96:9: 100:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:36: 99:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:96:9: 100:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:41: 99:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:96:9: 100:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:41: 99:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/seq/slice.rs:96:9: 100:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/seq/slice.rs:99:53: 99:59 (#0),
            scope: scope[0],
        },
    },
]