bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:129:13-129:25)
  1: _2 = [const 0_u64; 4]
    SourceInfo(rand_pcg/src/pcg128.rs:129:28-129:37)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg128.rs:129:13-129:25)
  3: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:130:9-130:48)
  4: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  5: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  6: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  7: _6 = &_1
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  8: _5 = &(*_6)
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  9: _4 = move _5 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg128.rs:130:27-130:32)
  10: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:130:31-130:32)
  11: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  12: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  13: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  14: _9 = &mut _2
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  15: _8 = &mut (*_9)
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  16: _7 = move _8 as &mut [u64] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg128.rs:130:34-130:47)
  17: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:130:46-130:47)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:130:9-130:48)
      kind: _3 = rand_core::le::read_u64_into(move _4, move _7) -> [return: bb1, unwind: bb13]
  }
  preds []
  succs [bb1, bb13]

bb1
  0: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:130:47-130:48)
  1: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:130:47-130:48)
  2: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:130:48-130:49)
  3: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:130:48-130:49)
  4: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:130:48-130:49)
  5: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:131:13-131:18)
  6: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:131:21-131:44)
  7: StorageLive(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:131:32-131:43)
  8: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:131:41-131:42)
  9: _13 = const 0_usize
    SourceInfo(rand_pcg/src/pcg128.rs:131:41-131:42)
  10: _14 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:131:32-131:43)
  11: _15 = Lt(_13, _14)
    SourceInfo(rand_pcg/src/pcg128.rs:131:32-131:43)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:131:32-131:43)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb2, unwind: bb13]
  }
  preds [bb0]
  succs [bb2, bb13]

bb2
  0: _12 = _2[_13]
    SourceInfo(rand_pcg/src/pcg128.rs:131:32-131:43)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:131:21-131:44)
      kind: _11 = <u128 as core::convert::From<u64>>::from(move _12) -> [return: bb3, unwind: bb13]
  }
  preds [bb1]
  succs [bb3, bb13]

bb3
  0: StorageDead(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:131:43-131:44)
  1: StorageLive(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:131:47-131:78)
  2: StorageLive(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:131:48-131:71)
  3: StorageLive(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:131:59-131:70)
  4: StorageLive(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:131:68-131:69)
  5: _19 = const 1_usize
    SourceInfo(rand_pcg/src/pcg128.rs:131:68-131:69)
  6: _20 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:131:59-131:70)
  7: _21 = Lt(_19, _20)
    SourceInfo(rand_pcg/src/pcg128.rs:131:59-131:70)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:131:59-131:70)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb4, unwind: bb13]
  }
  preds [bb2]
  succs [bb4, bb13]

bb4
  0: _18 = _2[_19]
    SourceInfo(rand_pcg/src/pcg128.rs:131:59-131:70)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:131:48-131:71)
      kind: _17 = <u128 as core::convert::From<u64>>::from(move _18) -> [return: bb5, unwind: bb13]
  }
  preds [bb3]
  succs [bb5, bb13]

bb5
  0: StorageDead(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:131:70-131:71)
  1: _22 = const 64_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:131:47-131:78)
  2: _23 = Lt(move _22, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:131:47-131:78)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:131:47-131:78)
      kind: assert(move _23, "attempt to shift left by `{}`, which would overflow", const 64_i32) -> [success: bb6, unwind: bb13]
  }
  preds [bb4]
  succs [bb6, bb13]

bb6
  0: _16 = Shl(move _17, const 64_i32)
    SourceInfo(rand_pcg/src/pcg128.rs:131:47-131:78)
  1: StorageDead(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:131:77-131:78)
  2: _10 = BitOr(move _11, move _16)
    SourceInfo(rand_pcg/src/pcg128.rs:131:21-131:78)
  3: StorageDead(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:131:77-131:78)
  4: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:131:77-131:78)
  5: FakeRead(ForLet(None), _10)
    SourceInfo(rand_pcg/src/pcg128.rs:131:13-131:18)
  6: StorageDead(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:131:78-131:79)
  7: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:131:78-131:79)
  8: StorageLive(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:132:13-132:17)
  9: StorageLive(_25)
    SourceInfo(rand_pcg/src/pcg128.rs:132:20-132:43)
  10: StorageLive(_26)
    SourceInfo(rand_pcg/src/pcg128.rs:132:31-132:42)
  11: StorageLive(_27)
    SourceInfo(rand_pcg/src/pcg128.rs:132:40-132:41)
  12: _27 = const 2_usize
    SourceInfo(rand_pcg/src/pcg128.rs:132:40-132:41)
  13: _28 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:132:31-132:42)
  14: _29 = Lt(_27, _28)
    SourceInfo(rand_pcg/src/pcg128.rs:132:31-132:42)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:132:31-132:42)
      kind: assert(move _29, "index out of bounds: the length is {} but the index is {}", move _28, _27) -> [success: bb7, unwind: bb13]
  }
  preds [bb5]
  succs [bb7, bb13]

bb7
  0: _26 = _2[_27]
    SourceInfo(rand_pcg/src/pcg128.rs:132:31-132:42)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:132:20-132:43)
      kind: _25 = <u128 as core::convert::From<u64>>::from(move _26) -> [return: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  0: StorageDead(_26)
    SourceInfo(rand_pcg/src/pcg128.rs:132:42-132:43)
  1: StorageLive(_30)
    SourceInfo(rand_pcg/src/pcg128.rs:132:46-132:77)
  2: StorageLive(_31)
    SourceInfo(rand_pcg/src/pcg128.rs:132:47-132:70)
  3: StorageLive(_32)
    SourceInfo(rand_pcg/src/pcg128.rs:132:58-132:69)
  4: StorageLive(_33)
    SourceInfo(rand_pcg/src/pcg128.rs:132:67-132:68)
  5: _33 = const 3_usize
    SourceInfo(rand_pcg/src/pcg128.rs:132:67-132:68)
  6: _34 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:132:58-132:69)
  7: _35 = Lt(_33, _34)
    SourceInfo(rand_pcg/src/pcg128.rs:132:58-132:69)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:132:58-132:69)
      kind: assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> [success: bb9, unwind: bb13]
  }
  preds [bb7]
  succs [bb9, bb13]

bb9
  0: _32 = _2[_33]
    SourceInfo(rand_pcg/src/pcg128.rs:132:58-132:69)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:132:47-132:70)
      kind: _31 = <u128 as core::convert::From<u64>>::from(move _32) -> [return: bb10, unwind: bb13]
  }
  preds [bb8]
  succs [bb10, bb13]

bb10
  0: StorageDead(_32)
    SourceInfo(rand_pcg/src/pcg128.rs:132:69-132:70)
  1: _36 = const 64_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:132:46-132:77)
  2: _37 = Lt(move _36, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:132:46-132:77)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:132:46-132:77)
      kind: assert(move _37, "attempt to shift left by `{}`, which would overflow", const 64_i32) -> [success: bb11, unwind: bb13]
  }
  preds [bb9]
  succs [bb11, bb13]

bb11
  0: _30 = Shl(move _31, const 64_i32)
    SourceInfo(rand_pcg/src/pcg128.rs:132:46-132:77)
  1: StorageDead(_31)
    SourceInfo(rand_pcg/src/pcg128.rs:132:76-132:77)
  2: _24 = BitOr(move _25, move _30)
    SourceInfo(rand_pcg/src/pcg128.rs:132:20-132:77)
  3: StorageDead(_30)
    SourceInfo(rand_pcg/src/pcg128.rs:132:76-132:77)
  4: StorageDead(_25)
    SourceInfo(rand_pcg/src/pcg128.rs:132:76-132:77)
  5: FakeRead(ForLet(None), _24)
    SourceInfo(rand_pcg/src/pcg128.rs:132:13-132:17)
  6: StorageDead(_33)
    SourceInfo(rand_pcg/src/pcg128.rs:132:77-132:78)
  7: StorageDead(_27)
    SourceInfo(rand_pcg/src/pcg128.rs:132:77-132:78)
  8: StorageLive(_38)
    SourceInfo(rand_pcg/src/pcg128.rs:135:38-135:43)
  9: _38 = _10
    SourceInfo(rand_pcg/src/pcg128.rs:135:38-135:43)
  10: StorageLive(_39)
    SourceInfo(rand_pcg/src/pcg128.rs:135:45-135:53)
  11: StorageLive(_40)
    SourceInfo(rand_pcg/src/pcg128.rs:135:45-135:49)
  12: _40 = _24
    SourceInfo(rand_pcg/src/pcg128.rs:135:45-135:49)
  13: _39 = BitOr(move _40, const 1_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:135:45-135:53)
  14: StorageDead(_40)
    SourceInfo(rand_pcg/src/pcg128.rs:135:52-135:53)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:135:9-135:54)
      kind: _0 = pcg128::Lcg128Xsl64::from_state_incr(move _38, move _39) -> [return: bb12, unwind: bb13]
  }
  preds [bb10]
  succs [bb12, bb13]

bb12
  0: StorageDead(_39)
    SourceInfo(rand_pcg/src/pcg128.rs:135:53-135:54)
  1: StorageDead(_38)
    SourceInfo(rand_pcg/src/pcg128.rs:135:53-135:54)
  2: StorageDead(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:136:5-136:6)
  3: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:136:5-136:6)
  4: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:136:5-136:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:136:6-136:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:128:5-136:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6, bb7, bb8, bb9, bb10, bb11]
  succs []

