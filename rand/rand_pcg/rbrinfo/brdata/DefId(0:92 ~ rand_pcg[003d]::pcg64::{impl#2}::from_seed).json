{
  "name": "rand_pcg::pcg64::{impl#2}::from_seed",
  "mod_info": {
    "name": "pcg64",
    "loc": "rand_pcg/src/lib.rs:94:1:94:11"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg64.rs:129:5:135:6",
  "doc": "/// We use a single 127-bit seed to initialise the state and select a stream.\n/// One `seed` bit (lowest bit of `seed[8]`) is ignored.\n",
  "code": [
    "fn from_seed(seed: Self::Seed) -> Self {",
    "    let mut seed_u64 = [0u64; 2];",
    "    le::read_u64_into(&seed, &mut seed_u64);",
    "",
    "    // The increment must be odd, hence we discard one bit:",
    "    Lcg64Xsh32::from_state_incr(seed_u64[0], seed_u64[1] | 1)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}