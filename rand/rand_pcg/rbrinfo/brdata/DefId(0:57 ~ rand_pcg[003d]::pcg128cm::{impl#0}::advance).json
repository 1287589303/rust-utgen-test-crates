{
  "name": "rand_pcg::pcg128cm::{impl#0}::advance",
  "mod_info": {
    "name": "pcg128cm",
    "loc": "rand_pcg/src/lib.rs:93:1:93:14"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128cm.rs:63:5:80:6",
  "doc": "/// Multi-step advance functions (jump-ahead, jump-back)\n///\n/// The method used here is based on Brown, \"Random Number Generation\n/// with Arbitrary Stride,\", Transactions of the American Nuclear\n/// Society (Nov. 1994).  The algorithm is very similar to fast\n/// exponentiation.\n///\n/// Even though delta is an unsigned integer, we can pass a\n/// signed integer to go backwards, it just goes \"the long way round\".\n///\n/// Using this function is equivalent to calling `next_64()` `delta`\n/// number of times.\n",
  "code": [
    "pub fn advance(&mut self, delta: u128) {",
    "    let mut acc_mult: u128 = 1;",
    "    let mut acc_plus: u128 = 0;",
    "    let mut cur_mult = MULTIPLIER as u128;",
    "    let mut cur_plus = self.increment;",
    "    let mut mdelta = delta;",
    "",
    "    while mdelta > 0 {",
    "        if (mdelta & 1) != 0 {",
    "            acc_mult = acc_mult.wrapping_mul(cur_mult);",
    "            acc_plus = acc_plus.wrapping_mul(cur_mult).wrapping_add(cur_plus);",
    "        }",
    "        cur_plus = cur_mult.wrapping_add(1).wrapping_mul(cur_plus);",
    "        cur_mult = cur_mult.wrapping_mul(cur_mult);",
    "        mdelta /= 2;",
    "    }",
    "    self.state = acc_mult.wrapping_mul(self.state).wrapping_add(acc_plus);",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "mdelta > 0",
          "norm": "0 < mdelta",
          "value": "true",
          "line": 70,
          "bound": null
        },
        {
          "cond": "(mdelta & 1) != 0",
          "norm": null,
          "value": "true",
          "line": 71,
          "bound": null
        },
        {
          "cond": "mdelta > 0",
          "norm": "0 < mdelta",
          "value": "false",
          "line": 70,
          "bound": "mdelta == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10,
        11,
        12,
        13,
        1,
        2,
        14,
        15,
        16
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "mdelta > 0",
          "norm": "0 < mdelta",
          "value": "true",
          "line": 70,
          "bound": null
        },
        {
          "cond": "(mdelta & 1) != 0",
          "norm": null,
          "value": "false",
          "line": 71,
          "bound": null
        },
        {
          "cond": "mdelta > 0",
          "norm": "0 < mdelta",
          "value": "false",
          "line": 70,
          "bound": "mdelta == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        8,
        9,
        10,
        11,
        12,
        13,
        1,
        2,
        14,
        15,
        16
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "mdelta > 0",
          "norm": "0 < mdelta",
          "value": "false",
          "line": 70,
          "bound": "mdelta == 0"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}