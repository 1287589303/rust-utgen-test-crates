{
  "name": "rand_pcg::pcg128::{impl#6}::from_seed",
  "mod_info": {
    "name": "pcg128",
    "loc": "rand_pcg/src/lib.rs:92:1:92:12"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg128.rs:233:5:239:6",
  "doc": "",
  "code": [
    "fn from_seed(seed: Self::Seed) -> Self {",
    "    // Read as if a little-endian u128 value:",
    "    let mut seed_u64 = [0u64; 2];",
    "    le::read_u64_into(&seed, &mut seed_u64);",
    "    let state = u128::from(seed_u64[0]) | (u128::from(seed_u64[1]) << 64);",
    "    Mcg128Xsl64::new(state)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}