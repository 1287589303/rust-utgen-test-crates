{
  "name": "rand_pcg::pcg64::{impl#0}::new",
  "mod_info": {
    "name": "pcg64",
    "loc": "rand_pcg/src/lib.rs:94:1:94:11"
  },
  "visible": true,
  "loc": "rand_pcg/src/pcg64.rs:92:5:96:6",
  "doc": "/// Construct an instance compatible with PCG seed and stream.\n///\n/// Note that the highest bit of the `stream` parameter is discarded\n/// to simplify upholding internal invariants.\n///\n/// Note that two generators with different stream parameters may be closely\n/// correlated.\n///\n/// PCG specifies the following default values for both parameters:\n///\n/// - `state = 0xcafef00dd15ea5e5`\n/// - `stream = 0xa02bdbf7bb3c0a7`\n",
  "code": [
    "pub fn new(state: u64, stream: u64) -> Self {",
    "    // The increment must be odd, hence we discard one bit:",
    "    let increment = (stream << 1) | 1;",
    "    Lcg64Xsh32::from_state_incr(state, increment)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}