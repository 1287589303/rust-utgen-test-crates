bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:235:13-235:25)
  1: _2 = [const 0_u64; 2]
    SourceInfo(rand_pcg/src/pcg128.rs:235:28-235:37)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg128.rs:235:13-235:25)
  3: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:236:9-236:48)
  4: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  5: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  6: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  7: _6 = &_1
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  8: _5 = &(*_6)
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  9: _4 = move _5 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg128.rs:236:27-236:32)
  10: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:236:31-236:32)
  11: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  12: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  13: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  14: _9 = &mut _2
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  15: _8 = &mut (*_9)
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  16: _7 = move _8 as &mut [u64] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg128.rs:236:34-236:47)
  17: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:236:46-236:47)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:236:9-236:48)
      kind: _3 = rand_core::le::read_u64_into(move _4, move _7) -> [return: bb1, unwind: bb8]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:236:47-236:48)
  1: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:236:47-236:48)
  2: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:236:48-236:49)
  3: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:236:48-236:49)
  4: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:236:48-236:49)
  5: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:237:13-237:18)
  6: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:237:21-237:44)
  7: StorageLive(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:237:32-237:43)
  8: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:237:41-237:42)
  9: _13 = const 0_usize
    SourceInfo(rand_pcg/src/pcg128.rs:237:41-237:42)
  10: _14 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:237:32-237:43)
  11: _15 = Lt(_13, _14)
    SourceInfo(rand_pcg/src/pcg128.rs:237:32-237:43)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:237:32-237:43)
      kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb2, unwind: bb8]
  }
  preds [bb0]
  succs [bb2, bb8]

bb2
  0: _12 = _2[_13]
    SourceInfo(rand_pcg/src/pcg128.rs:237:32-237:43)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:237:21-237:44)
      kind: _11 = <u128 as core::convert::From<u64>>::from(move _12) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:237:43-237:44)
  1: StorageLive(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:237:47-237:78)
  2: StorageLive(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:237:48-237:71)
  3: StorageLive(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:237:59-237:70)
  4: StorageLive(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:237:68-237:69)
  5: _19 = const 1_usize
    SourceInfo(rand_pcg/src/pcg128.rs:237:68-237:69)
  6: _20 = Len(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:237:59-237:70)
  7: _21 = Lt(_19, _20)
    SourceInfo(rand_pcg/src/pcg128.rs:237:59-237:70)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:237:59-237:70)
      kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb4, unwind: bb8]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: _18 = _2[_19]
    SourceInfo(rand_pcg/src/pcg128.rs:237:59-237:70)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:237:48-237:71)
      kind: _17 = <u128 as core::convert::From<u64>>::from(move _18) -> [return: bb5, unwind: bb8]
  }
  preds [bb3]
  succs [bb5, bb8]

bb5
  0: StorageDead(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:237:70-237:71)
  1: _22 = const 64_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:237:47-237:78)
  2: _23 = Lt(move _22, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:237:47-237:78)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:237:47-237:78)
      kind: assert(move _23, "attempt to shift left by `{}`, which would overflow", const 64_i32) -> [success: bb6, unwind: bb8]
  }
  preds [bb4]
  succs [bb6, bb8]

bb6
  0: _16 = Shl(move _17, const 64_i32)
    SourceInfo(rand_pcg/src/pcg128.rs:237:47-237:78)
  1: StorageDead(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:237:77-237:78)
  2: _10 = BitOr(move _11, move _16)
    SourceInfo(rand_pcg/src/pcg128.rs:237:21-237:78)
  3: StorageDead(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:237:77-237:78)
  4: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:237:77-237:78)
  5: FakeRead(ForLet(None), _10)
    SourceInfo(rand_pcg/src/pcg128.rs:237:13-237:18)
  6: StorageDead(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:237:78-237:79)
  7: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:237:78-237:79)
  8: StorageLive(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:238:26-238:31)
  9: _24 = _10
    SourceInfo(rand_pcg/src/pcg128.rs:238:26-238:31)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:238:9-238:32)
      kind: _0 = pcg128::Mcg128Xsl64::new(move _24) -> [return: bb7, unwind: bb8]
  }
  preds [bb5]
  succs [bb7, bb8]

bb7
  0: StorageDead(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:238:31-238:32)
  1: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:239:5-239:6)
  2: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:239:5-239:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:239:6-239:6)
      kind: return
  }
  preds [bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:233:5-239:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4, bb5, bb6]
  succs []

