bb0
  0: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:61:13-61:25)
  1: _3 = const 1_u128
    SourceInfo(rand_pcg/src/pcg128.rs:61:34-61:35)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(rand_pcg/src/pcg128.rs:61:13-61:25)
  3: AscribeUserType(_3, o, UserTypeProjection { base: UserType(1), projs: [] })
    SourceInfo(rand_pcg/src/pcg128.rs:61:27-61:31)
  4: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:62:13-62:25)
  5: _4 = const 0_u128
    SourceInfo(rand_pcg/src/pcg128.rs:62:34-62:35)
  6: FakeRead(ForLet(None), _4)
    SourceInfo(rand_pcg/src/pcg128.rs:62:13-62:25)
  7: AscribeUserType(_4, o, UserTypeProjection { base: UserType(3), projs: [] })
    SourceInfo(rand_pcg/src/pcg128.rs:62:27-62:31)
  8: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:63:13-63:25)
  9: _5 = const pcg128::MULTIPLIER
    SourceInfo(rand_pcg/src/pcg128.rs:63:28-63:38)
  10: FakeRead(ForLet(None), _5)
    SourceInfo(rand_pcg/src/pcg128.rs:63:13-63:25)
  11: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:64:13-64:25)
  12: _6 = ((*_1).1: u128)
    SourceInfo(rand_pcg/src/pcg128.rs:64:28-64:42)
  13: FakeRead(ForLet(None), _6)
    SourceInfo(rand_pcg/src/pcg128.rs:64:13-64:25)
  14: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:65:13-65:23)
  15: _7 = _2
    SourceInfo(rand_pcg/src/pcg128.rs:65:26-65:31)
  16: FakeRead(ForLet(None), _7)
    SourceInfo(rand_pcg/src/pcg128.rs:65:13-65:23)
  17: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
      kind: goto -> bb1
  }
  preds []
  succs [bb1]

bb1
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
      kind: falseUnwind -> [real: bb2, unwind: bb17]
  }
  preds [bb0, bb13]
  succs [bb2, bb17]

bb2
  0: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:67:15-67:25)
  1: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:67:15-67:21)
  2: _11 = _7
    SourceInfo(rand_pcg/src/pcg128.rs:67:15-67:21)
  3: _10 = Gt(move _11, const 0_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:67:15-67:25)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:67:15-67:25)
      kind: switchInt(move _10) -> [0: bb14, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb14]

bb3
  0: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:67:24-67:25)
  1: StorageLive(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:68:13-71:14)
  2: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:68:16-68:33)
  3: StorageLive(_14)
    SourceInfo(rand_pcg/src/pcg128.rs:68:16-68:28)
  4: StorageLive(_15)
    SourceInfo(rand_pcg/src/pcg128.rs:68:17-68:23)
  5: _15 = _7
    SourceInfo(rand_pcg/src/pcg128.rs:68:17-68:23)
  6: _14 = BitAnd(move _15, const 1_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:68:16-68:28)
  7: StorageDead(_15)
    SourceInfo(rand_pcg/src/pcg128.rs:68:27-68:28)
  8: _13 = Ne(move _14, const 0_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:68:16-68:33)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:68:16-68:33)
      kind: switchInt(move _13) -> [0: bb8, otherwise: bb4]
  }
  preds [bb2]
  succs [bb4, bb8]

bb4
  0: StorageDead(_14)
    SourceInfo(rand_pcg/src/pcg128.rs:68:32-68:33)
  1: StorageLive(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:69:28-69:59)
  2: StorageLive(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:69:28-69:36)
  3: _17 = _3
    SourceInfo(rand_pcg/src/pcg128.rs:69:28-69:36)
  4: StorageLive(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:69:50-69:58)
  5: _18 = _5
    SourceInfo(rand_pcg/src/pcg128.rs:69:50-69:58)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:69:28-69:59)
      kind: _16 = core::num::<impl u128>::wrapping_mul(move _17, move _18) -> [return: bb5, unwind: bb17]
  }
  preds [bb3]
  succs [bb5, bb17]

bb5
  0: StorageDead(_18)
    SourceInfo(rand_pcg/src/pcg128.rs:69:58-69:59)
  1: StorageDead(_17)
    SourceInfo(rand_pcg/src/pcg128.rs:69:58-69:59)
  2: _3 = move _16
    SourceInfo(rand_pcg/src/pcg128.rs:69:17-69:59)
  3: StorageDead(_16)
    SourceInfo(rand_pcg/src/pcg128.rs:69:58-69:59)
  4: StorageLive(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:82)
  5: StorageLive(_20)
    SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:59)
  6: StorageLive(_21)
    SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:36)
  7: _21 = _4
    SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:36)
  8: StorageLive(_22)
    SourceInfo(rand_pcg/src/pcg128.rs:70:50-70:58)
  9: _22 = _5
    SourceInfo(rand_pcg/src/pcg128.rs:70:50-70:58)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:59)
      kind: _20 = core::num::<impl u128>::wrapping_mul(move _21, move _22) -> [return: bb6, unwind: bb17]
  }
  preds [bb4]
  succs [bb6, bb17]

bb6
  0: StorageDead(_22)
    SourceInfo(rand_pcg/src/pcg128.rs:70:58-70:59)
  1: StorageDead(_21)
    SourceInfo(rand_pcg/src/pcg128.rs:70:58-70:59)
  2: StorageLive(_23)
    SourceInfo(rand_pcg/src/pcg128.rs:70:73-70:81)
  3: _23 = _6
    SourceInfo(rand_pcg/src/pcg128.rs:70:73-70:81)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:70:28-70:82)
      kind: _19 = core::num::<impl u128>::wrapping_add(move _20, move _23) -> [return: bb7, unwind: bb17]
  }
  preds [bb5]
  succs [bb7, bb17]

bb7
  0: StorageDead(_23)
    SourceInfo(rand_pcg/src/pcg128.rs:70:81-70:82)
  1: StorageDead(_20)
    SourceInfo(rand_pcg/src/pcg128.rs:70:81-70:82)
  2: _4 = move _19
    SourceInfo(rand_pcg/src/pcg128.rs:70:17-70:82)
  3: StorageDead(_19)
    SourceInfo(rand_pcg/src/pcg128.rs:70:81-70:82)
  4: _12 = const ()
    SourceInfo(rand_pcg/src/pcg128.rs:68:34-71:14)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:68:13-71:14)
      kind: goto -> bb9
  }
  preds [bb6]
  succs [bb9]

bb8
  0: StorageDead(_14)
    SourceInfo(rand_pcg/src/pcg128.rs:68:32-68:33)
  1: _12 = const ()
    SourceInfo(rand_pcg/src/pcg128.rs:71:14-71:14)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:68:13-71:14)
      kind: goto -> bb9
  }
  preds [bb3]
  succs [bb9]

bb9
  0: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:71:13-71:14)
  1: StorageDead(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:71:13-71:14)
  2: StorageLive(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:71)
  3: StorageLive(_25)
    SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:48)
  4: StorageLive(_26)
    SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:32)
  5: _26 = _5
    SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:32)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:48)
      kind: _25 = core::num::<impl u128>::wrapping_add(move _26, const 1_u128) -> [return: bb10, unwind: bb17]
  }
  preds [bb7, bb8]
  succs [bb10, bb17]

bb10
  0: StorageDead(_26)
    SourceInfo(rand_pcg/src/pcg128.rs:72:47-72:48)
  1: StorageLive(_27)
    SourceInfo(rand_pcg/src/pcg128.rs:72:62-72:70)
  2: _27 = _6
    SourceInfo(rand_pcg/src/pcg128.rs:72:62-72:70)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:72:24-72:71)
      kind: _24 = core::num::<impl u128>::wrapping_mul(move _25, move _27) -> [return: bb11, unwind: bb17]
  }
  preds [bb9]
  succs [bb11, bb17]

bb11
  0: StorageDead(_27)
    SourceInfo(rand_pcg/src/pcg128.rs:72:70-72:71)
  1: StorageDead(_25)
    SourceInfo(rand_pcg/src/pcg128.rs:72:70-72:71)
  2: _6 = move _24
    SourceInfo(rand_pcg/src/pcg128.rs:72:13-72:71)
  3: StorageDead(_24)
    SourceInfo(rand_pcg/src/pcg128.rs:72:70-72:71)
  4: StorageLive(_28)
    SourceInfo(rand_pcg/src/pcg128.rs:73:24-73:55)
  5: StorageLive(_29)
    SourceInfo(rand_pcg/src/pcg128.rs:73:24-73:32)
  6: _29 = _5
    SourceInfo(rand_pcg/src/pcg128.rs:73:24-73:32)
  7: StorageLive(_30)
    SourceInfo(rand_pcg/src/pcg128.rs:73:46-73:54)
  8: _30 = _5
    SourceInfo(rand_pcg/src/pcg128.rs:73:46-73:54)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:73:24-73:55)
      kind: _28 = core::num::<impl u128>::wrapping_mul(move _29, move _30) -> [return: bb12, unwind: bb17]
  }
  preds [bb10]
  succs [bb12, bb17]

bb12
  0: StorageDead(_30)
    SourceInfo(rand_pcg/src/pcg128.rs:73:54-73:55)
  1: StorageDead(_29)
    SourceInfo(rand_pcg/src/pcg128.rs:73:54-73:55)
  2: _5 = move _28
    SourceInfo(rand_pcg/src/pcg128.rs:73:13-73:55)
  3: StorageDead(_28)
    SourceInfo(rand_pcg/src/pcg128.rs:73:54-73:55)
  4: _31 = Eq(const 2_u128, const 0_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:74:13-74:24)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:74:13-74:24)
      kind: assert(!move _31, "attempt to divide `{}` by zero", _7) -> [success: bb13, unwind: bb17]
  }
  preds [bb11]
  succs [bb13, bb17]

bb13
  0: _7 = Div(_7, const 2_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:74:13-74:24)
  1: _9 = const ()
    SourceInfo(rand_pcg/src/pcg128.rs:67:26-75:10)
  2: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:75:9-75:10)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
      kind: goto -> bb1
  }
  preds [bb12]
  succs [bb1]

bb14
  0: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:67:24-67:25)
  1: StorageLive(_33)
    SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
  2: _8 = const ()
    SourceInfo(rand_pcg/src/pcg128.rs:67:9-75:10)
  3: StorageDead(_33)
    SourceInfo(rand_pcg/src/pcg128.rs:75:9-75:10)
  4: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg128.rs:75:9-75:10)
  5: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:75:9-75:10)
  6: StorageLive(_35)
    SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:78)
  7: StorageLive(_36)
    SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:55)
  8: StorageLive(_37)
    SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:30)
  9: _37 = _3
    SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:30)
  10: StorageLive(_38)
    SourceInfo(rand_pcg/src/pcg128.rs:76:44-76:54)
  11: _38 = ((*_1).0: u128)
    SourceInfo(rand_pcg/src/pcg128.rs:76:44-76:54)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:55)
      kind: _36 = core::num::<impl u128>::wrapping_mul(move _37, move _38) -> [return: bb15, unwind: bb17]
  }
  preds [bb2]
  succs [bb15, bb17]

bb15
  0: StorageDead(_38)
    SourceInfo(rand_pcg/src/pcg128.rs:76:54-76:55)
  1: StorageDead(_37)
    SourceInfo(rand_pcg/src/pcg128.rs:76:54-76:55)
  2: StorageLive(_39)
    SourceInfo(rand_pcg/src/pcg128.rs:76:69-76:77)
  3: _39 = _4
    SourceInfo(rand_pcg/src/pcg128.rs:76:69-76:77)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:76:22-76:78)
      kind: _35 = core::num::<impl u128>::wrapping_add(move _36, move _39) -> [return: bb16, unwind: bb17]
  }
  preds [bb14]
  succs [bb16, bb17]

bb16
  0: StorageDead(_39)
    SourceInfo(rand_pcg/src/pcg128.rs:76:77-76:78)
  1: StorageDead(_36)
    SourceInfo(rand_pcg/src/pcg128.rs:76:77-76:78)
  2: ((*_1).0: u128) = move _35
    SourceInfo(rand_pcg/src/pcg128.rs:76:9-76:78)
  3: StorageDead(_35)
    SourceInfo(rand_pcg/src/pcg128.rs:76:77-76:78)
  4: _0 = const ()
    SourceInfo(rand_pcg/src/pcg128.rs:60:44-77:6)
  5: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:77:5-77:6)
  6: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:77:5-77:6)
  7: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:77:5-77:6)
  8: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:77:5-77:6)
  9: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:77:5-77:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:77:6-77:6)
      kind: return
  }
  preds [bb15]
  succs []

bb17
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:60:5-77:6)
      kind: resume
  }
  preds [bb1, bb4, bb5, bb6, bb9, bb10, bb11, bb12, bb14, bb15]
  succs []

