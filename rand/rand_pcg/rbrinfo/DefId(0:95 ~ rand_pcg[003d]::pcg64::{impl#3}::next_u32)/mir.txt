bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:141:13-141:18)
  1: _2 = ((*_1).0: u64)
    SourceInfo(rand_pcg/src/pcg64.rs:141:21-141:31)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg64.rs:141:13-141:18)
  3: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg64.rs:142:9-142:20)
  4: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg64.rs:142:9-142:13)
  5: _4 = &mut (*_1)
    SourceInfo(rand_pcg/src/pcg64.rs:142:9-142:13)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:142:9-142:20)
      kind: _3 = pcg64::Lcg64Xsh32::step(move _4) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg64.rs:142:19-142:20)
  1: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg64.rs:142:20-142:21)
  2: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg64.rs:150:13-150:16)
  3: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg64.rs:150:19-150:36)
  4: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg64.rs:150:20-150:25)
  5: _7 = _2
    SourceInfo(rand_pcg/src/pcg64.rs:150:20-150:25)
  6: _8 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE, const 64_u32)
    SourceInfo(rand_pcg/src/pcg64.rs:150:19-150:36)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:150:19-150:36)
      kind: assert(move _8, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _6 = Shr(move _7, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE)
    SourceInfo(rand_pcg/src/pcg64.rs:150:19-150:36)
  1: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg64.rs:150:35-150:36)
  2: _5 = move _6 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg64.rs:150:19-150:43)
  3: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg64.rs:150:42-150:43)
  4: FakeRead(ForLet(None), _5)
    SourceInfo(rand_pcg/src/pcg64.rs:150:13-150:16)
  5: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg64.rs:151:13-151:16)
  6: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg64.rs:151:19-151:57)
  7: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg64.rs:151:20-151:47)
  8: StorageLive(_12)
    SourceInfo(rand_pcg/src/pcg64.rs:151:21-151:38)
  9: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg64.rs:151:22-151:27)
  10: _13 = _2
    SourceInfo(rand_pcg/src/pcg64.rs:151:22-151:27)
  11: _14 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT, const 64_u32)
    SourceInfo(rand_pcg/src/pcg64.rs:151:21-151:38)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:151:21-151:38)
      kind: assert(move _14, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT) -> [success: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: _12 = Shr(move _13, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT)
    SourceInfo(rand_pcg/src/pcg64.rs:151:21-151:38)
  1: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg64.rs:151:37-151:38)
  2: StorageLive(_15)
    SourceInfo(rand_pcg/src/pcg64.rs:151:41-151:46)
  3: _15 = _2
    SourceInfo(rand_pcg/src/pcg64.rs:151:41-151:46)
  4: _11 = BitXor(move _12, move _15)
    SourceInfo(rand_pcg/src/pcg64.rs:151:20-151:47)
  5: StorageDead(_15)
    SourceInfo(rand_pcg/src/pcg64.rs:151:46-151:47)
  6: StorageDead(_12)
    SourceInfo(rand_pcg/src/pcg64.rs:151:46-151:47)
  7: _16 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE, const 64_u32)
    SourceInfo(rand_pcg/src/pcg64.rs:151:19-151:57)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:151:19-151:57)
      kind: assert(move _16, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _10 = Shr(move _11, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE)
    SourceInfo(rand_pcg/src/pcg64.rs:151:19-151:57)
  1: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg64.rs:151:56-151:57)
  2: _9 = move _10 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg64.rs:151:19-151:64)
  3: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg64.rs:151:63-151:64)
  4: FakeRead(ForLet(None), _9)
    SourceInfo(rand_pcg/src/pcg64.rs:151:13-151:16)
  5: StorageLive(_17)
    SourceInfo(rand_pcg/src/pcg64.rs:152:9-152:12)
  6: _17 = _9
    SourceInfo(rand_pcg/src/pcg64.rs:152:9-152:12)
  7: StorageLive(_18)
    SourceInfo(rand_pcg/src/pcg64.rs:152:26-152:29)
  8: _18 = _5
    SourceInfo(rand_pcg/src/pcg64.rs:152:26-152:29)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:152:9-152:30)
      kind: _0 = core::num::<impl u32>::rotate_right(move _17, move _18) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_18)
    SourceInfo(rand_pcg/src/pcg64.rs:152:29-152:30)
  1: StorageDead(_17)
    SourceInfo(rand_pcg/src/pcg64.rs:152:29-152:30)
  2: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg64.rs:153:5-153:6)
  3: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg64.rs:153:5-153:6)
  4: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:153:5-153:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:153:6-153:6)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:140:5-153:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

