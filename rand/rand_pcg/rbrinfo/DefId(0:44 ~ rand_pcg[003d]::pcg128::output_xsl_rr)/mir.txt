bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:267:9-267:12)
  1: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:267:15-267:32)
  2: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:267:16-267:21)
  3: _4 = _1
    SourceInfo(rand_pcg/src/pcg128.rs:267:16-267:21)
  4: _5 = Lt(const pcg128::output_xsl_rr::ROTATE, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:267:15-267:32)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:267:15-267:32)
      kind: assert(move _5, "attempt to shift right by `{}`, which would overflow", const pcg128::output_xsl_rr::ROTATE) -> [success: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _3 = Shr(move _4, const pcg128::output_xsl_rr::ROTATE)
    SourceInfo(rand_pcg/src/pcg128.rs:267:15-267:32)
  1: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:267:31-267:32)
  2: _2 = move _3 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:267:15-267:39)
  3: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:267:38-267:39)
  4: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg128.rs:267:9-267:12)
  5: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:268:9-268:12)
  6: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:268:15-268:41)
  7: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:268:16-268:33)
  8: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:268:17-268:22)
  9: _9 = _1
    SourceInfo(rand_pcg/src/pcg128.rs:268:17-268:22)
  10: _10 = Lt(const pcg128::output_xsl_rr::XSHIFT, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:268:16-268:33)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:268:16-268:33)
      kind: assert(move _10, "attempt to shift right by `{}`, which would overflow", const pcg128::output_xsl_rr::XSHIFT) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _8 = Shr(move _9, const pcg128::output_xsl_rr::XSHIFT)
    SourceInfo(rand_pcg/src/pcg128.rs:268:16-268:33)
  1: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:268:32-268:33)
  2: _7 = move _8 as u64 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:268:15-268:41)
  3: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:268:40-268:41)
  4: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:268:44-268:58)
  5: StorageLive(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:268:45-268:50)
  6: _12 = _1
    SourceInfo(rand_pcg/src/pcg128.rs:268:45-268:50)
  7: _11 = move _12 as u64 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:268:44-268:58)
  8: StorageDead(_12)
    SourceInfo(rand_pcg/src/pcg128.rs:268:57-268:58)
  9: _6 = BitXor(move _7, move _11)
    SourceInfo(rand_pcg/src/pcg128.rs:268:15-268:58)
  10: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg128.rs:268:57-268:58)
  11: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg128.rs:268:57-268:58)
  12: FakeRead(ForLet(None), _6)
    SourceInfo(rand_pcg/src/pcg128.rs:268:9-268:12)
  13: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:269:5-269:8)
  14: _13 = _6
    SourceInfo(rand_pcg/src/pcg128.rs:269:5-269:8)
  15: StorageLive(_14)
    SourceInfo(rand_pcg/src/pcg128.rs:269:22-269:25)
  16: _14 = _2
    SourceInfo(rand_pcg/src/pcg128.rs:269:22-269:25)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:269:5-269:26)
      kind: _0 = core::num::<impl u64>::rotate_right(move _13, move _14) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_14)
    SourceInfo(rand_pcg/src/pcg128.rs:269:25-269:26)
  1: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg128.rs:269:25-269:26)
  2: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg128.rs:270:1-270:2)
  3: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg128.rs:270:1-270:2)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:270:2-270:2)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:261:1-270:2)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

