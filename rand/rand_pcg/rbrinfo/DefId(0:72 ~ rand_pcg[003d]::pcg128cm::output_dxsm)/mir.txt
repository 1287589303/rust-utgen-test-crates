bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:9-167:15)
  1: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:31)
  2: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:19-167:24)
  3: _4 = _1
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:19-167:24)
  4: _5 = const 64_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:31)
  5: _6 = Lt(move _5, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:31)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:31)
      kind: assert(move _6, "attempt to shift right by `{}`, which would overflow", const 64_i32) -> [success: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: _3 = Shr(move _4, const 64_i32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:31)
  1: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:30-167:31)
  2: _2 = move _3 as u64 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:18-167:38)
  3: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:37-167:38)
  4: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg128cm.rs:167:9-167:15)
  5: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:9-168:15)
  6: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:18-168:23)
  7: _8 = _1
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:18-168:23)
  8: _7 = move _8 as u64 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:18-168:30)
  9: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:29-168:30)
  10: FakeRead(ForLet(None), _7)
    SourceInfo(rand_pcg/src/pcg128cm.rs:168:9-168:15)
  11: _7 = BitOr(_7, const 1_u64)
    SourceInfo(rand_pcg/src/pcg128cm.rs:170:5-170:12)
  12: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:19)
  13: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:13)
  14: _10 = _2
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:13)
  15: _11 = const 32_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:19)
  16: _12 = Lt(move _11, const 64_u32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:19)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:19)
      kind: assert(move _12, "attempt to shift right by `{}`, which would overflow", const 32_i32) -> [success: bb2, unwind: bb6]
  }
  preds [bb0]
  succs [bb2, bb6]

bb2
  0: _9 = Shr(move _10, const 32_i32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:11-171:19)
  1: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:18-171:19)
  2: _2 = BitXor(_2, move _9)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:5-171:19)
  3: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg128cm.rs:171:18-171:19)
  4: StorageLive(_13)
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:10-172:37)
  5: StorageLive(_14)
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:10-172:12)
  6: _14 = _2
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:10-172:12)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:172:10-172:37)
      kind: _13 = core::num::<impl u64>::wrapping_mul(move _14, const pcg128cm::MULTIPLIER) -> [return: bb3, unwind: bb6]
  }
  preds [bb1]
  succs [bb3, bb6]

bb3
  0: StorageDead(_14)
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:36-172:37)
  1: _2 = move _13
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:5-172:37)
  2: StorageDead(_13)
    SourceInfo(rand_pcg/src/pcg128cm.rs:172:36-172:37)
  3: StorageLive(_15)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:19)
  4: StorageLive(_16)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:13)
  5: _16 = _2
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:13)
  6: _17 = const 48_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:19)
  7: _18 = Lt(move _17, const 64_u32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:19)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:19)
      kind: assert(move _18, "attempt to shift right by `{}`, which would overflow", const 48_i32) -> [success: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: _15 = Shr(move _16, const 48_i32)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:11-173:19)
  1: StorageDead(_16)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:18-173:19)
  2: _2 = BitXor(_2, move _15)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:5-173:19)
  3: StorageDead(_15)
    SourceInfo(rand_pcg/src/pcg128cm.rs:173:18-173:19)
  4: StorageLive(_19)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:10-174:29)
  5: StorageLive(_20)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:10-174:12)
  6: _20 = _2
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:10-174:12)
  7: StorageLive(_21)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:26-174:28)
  8: _21 = _7
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:26-174:28)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:174:10-174:29)
      kind: _19 = core::num::<impl u64>::wrapping_mul(move _20, move _21) -> [return: bb5, unwind: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageDead(_21)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:28-174:29)
  1: StorageDead(_20)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:28-174:29)
  2: _2 = move _19
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:5-174:29)
  3: StorageDead(_19)
    SourceInfo(rand_pcg/src/pcg128cm.rs:174:28-174:29)
  4: _0 = _2
    SourceInfo(rand_pcg/src/pcg128cm.rs:176:5-176:7)
  5: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg128cm.rs:177:1-177:2)
  6: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg128cm.rs:177:1-177:2)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:177:2-177:2)
      kind: return
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128cm.rs:164:1-177:2)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3, bb4]
  succs []

