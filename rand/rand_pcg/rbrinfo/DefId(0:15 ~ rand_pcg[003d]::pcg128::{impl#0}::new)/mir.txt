bb0
  0: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:93:13-93:22)
  1: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:38)
  2: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:93:26-93:32)
  3: _5 = _2
    SourceInfo(rand_pcg/src/pcg128.rs:93:26-93:32)
  4: _6 = const 1_i32 as u32 (IntToInt)
    SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:38)
  5: _7 = Lt(move _6, const 128_u32)
    SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:38)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:38)
      kind: assert(move _7, "attempt to shift left by `{}`, which would overflow", const 1_i32) -> [success: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: _4 = Shl(move _5, const 1_i32)
    SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:38)
  1: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg128.rs:93:37-93:38)
  2: _3 = BitOr(move _4, const 1_u128)
    SourceInfo(rand_pcg/src/pcg128.rs:93:25-93:42)
  3: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg128.rs:93:41-93:42)
  4: FakeRead(ForLet(None), _3)
    SourceInfo(rand_pcg/src/pcg128.rs:93:13-93:22)
  5: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:94:38-94:43)
  6: _8 = _1
    SourceInfo(rand_pcg/src/pcg128.rs:94:38-94:43)
  7: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:94:45-94:54)
  8: _9 = _3
    SourceInfo(rand_pcg/src/pcg128.rs:94:45-94:54)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:94:9-94:55)
      kind: _0 = pcg128::Lcg128Xsl64::from_state_incr(move _8, move _9) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg128.rs:94:54-94:55)
  1: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg128.rs:94:54-94:55)
  2: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg128.rs:95:5-95:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:95:6-95:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg128.rs:91:5-95:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

