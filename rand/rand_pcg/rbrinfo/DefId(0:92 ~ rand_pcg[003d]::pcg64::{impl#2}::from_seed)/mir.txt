bb0
  0: StorageLive(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:130:13-130:25)
  1: _2 = [const 0_u64; 2]
    SourceInfo(rand_pcg/src/pcg64.rs:130:28-130:37)
  2: FakeRead(ForLet(None), _2)
    SourceInfo(rand_pcg/src/pcg64.rs:130:13-130:25)
  3: StorageLive(_3)
    SourceInfo(rand_pcg/src/pcg64.rs:131:9-131:48)
  4: StorageLive(_4)
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  5: StorageLive(_5)
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  6: StorageLive(_6)
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  7: _6 = &_1
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  8: _5 = &(*_6)
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  9: _4 = move _5 as &[u8] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg64.rs:131:27-131:32)
  10: StorageDead(_5)
    SourceInfo(rand_pcg/src/pcg64.rs:131:31-131:32)
  11: StorageLive(_7)
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  12: StorageLive(_8)
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  13: StorageLive(_9)
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  14: _9 = &mut _2
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  15: _8 = &mut (*_9)
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  16: _7 = move _8 as &mut [u64] (PointerCoercion(Unsize))
    SourceInfo(rand_pcg/src/pcg64.rs:131:34-131:47)
  17: StorageDead(_8)
    SourceInfo(rand_pcg/src/pcg64.rs:131:46-131:47)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:131:9-131:48)
      kind: _3 = rand_core::le::read_u64_into(move _4, move _7) -> [return: bb1, unwind: bb5]
  }
  preds []
  succs [bb1, bb5]

bb1
  0: StorageDead(_7)
    SourceInfo(rand_pcg/src/pcg64.rs:131:47-131:48)
  1: StorageDead(_4)
    SourceInfo(rand_pcg/src/pcg64.rs:131:47-131:48)
  2: StorageDead(_9)
    SourceInfo(rand_pcg/src/pcg64.rs:131:48-131:49)
  3: StorageDead(_6)
    SourceInfo(rand_pcg/src/pcg64.rs:131:48-131:49)
  4: StorageDead(_3)
    SourceInfo(rand_pcg/src/pcg64.rs:131:48-131:49)
  5: StorageLive(_10)
    SourceInfo(rand_pcg/src/pcg64.rs:134:37-134:48)
  6: StorageLive(_11)
    SourceInfo(rand_pcg/src/pcg64.rs:134:46-134:47)
  7: _11 = const 0_usize
    SourceInfo(rand_pcg/src/pcg64.rs:134:46-134:47)
  8: _12 = Len(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:134:37-134:48)
  9: _13 = Lt(_11, _12)
    SourceInfo(rand_pcg/src/pcg64.rs:134:37-134:48)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:134:37-134:48)
      kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: _10 = _2[_11]
    SourceInfo(rand_pcg/src/pcg64.rs:134:37-134:48)
  1: StorageLive(_14)
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:65)
  2: StorageLive(_15)
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:61)
  3: StorageLive(_16)
    SourceInfo(rand_pcg/src/pcg64.rs:134:59-134:60)
  4: _16 = const 1_usize
    SourceInfo(rand_pcg/src/pcg64.rs:134:59-134:60)
  5: _17 = Len(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:61)
  6: _18 = Lt(_16, _17)
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:61)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:61)
      kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: _15 = _2[_16]
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:61)
  1: _14 = BitOr(move _15, const 1_u64)
    SourceInfo(rand_pcg/src/pcg64.rs:134:50-134:65)
  2: StorageDead(_15)
    SourceInfo(rand_pcg/src/pcg64.rs:134:64-134:65)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:134:9-134:66)
      kind: _0 = pcg64::Lcg64Xsh32::from_state_incr(move _10, move _14) -> [return: bb4, unwind: bb5]
  }
  preds [bb2]
  succs [bb4, bb5]

bb4
  0: StorageDead(_14)
    SourceInfo(rand_pcg/src/pcg64.rs:134:65-134:66)
  1: StorageDead(_10)
    SourceInfo(rand_pcg/src/pcg64.rs:134:65-134:66)
  2: StorageDead(_2)
    SourceInfo(rand_pcg/src/pcg64.rs:135:5-135:6)
  3: StorageDead(_16)
    SourceInfo(rand_pcg/src/pcg64.rs:135:5-135:6)
  4: StorageDead(_11)
    SourceInfo(rand_pcg/src/pcg64.rs:135:5-135:6)
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:135:6-135:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(rand_pcg/src/pcg64.rs:129:5-135:6)
      kind: resume
  }
  preds [bb0, bb1, bb2, bb3]
  succs []

