[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = [const 0_u64; 2],
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_1,
            _5 = &(*_6),
            _4 = move _5 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _2,
            _8 = &mut (*_9),
            _7 = move _8 as &mut [u64] (PointerCoercion(Unsize)),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:131:9: 131:48 (#0),
                    scope: scope[1],
                },
                kind: _3 = rand_core::le::read_u64_into(move _4, move _7) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const 0_usize,
            _12 = Len(_2),
            _13 = Lt(_11, _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:134:37: 134:48 (#0),
                    scope: scope[1],
                },
                kind: assert(move _13, "index out of bounds: the length is {} but the index is {}", move _12, _11) -> [success: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = _2[_11],
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = const 1_usize,
            _17 = Len(_2),
            _18 = Lt(_16, _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:134:50: 134:61 (#0),
                    scope: scope[1],
                },
                kind: assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = _2[_16],
            _14 = BitOr(move _15, const 1_u64),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                    scope: scope[1],
                },
                kind: _0 = pcg64::Lcg64Xsh32::from_state_incr(move _10, move _14) -> [return: bb4, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_10),
            StorageDead(_2),
            StorageDead(_16),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:135:6: 135:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:129:5: 135:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: pcg64::Lcg64Xsh32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:129:39: 129:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_pcg/src/pcg64.rs:129:24: 129:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg64.rs:129:18: 129:22 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg64.rs:129:18: 129:22 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:129:18: 129:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg64.rs:130:28: 130:37 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg64.rs:130:13: 130:25 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:130:13: 130:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:9: 131:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:27: 131:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:27: 131:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:27: 131:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:34: 131:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:34: 131:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:131:34: 131:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:37: 134:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:46: 134:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:37: 134:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:37: 134:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:50: 134:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:50: 134:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:134:9: 134:66 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:59: 134:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:50: 134:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:134:50: 134:61 (#0),
            scope: scope[0],
        },
    },
]