[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = ((*_1).0: u64),
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:142:9: 142:20 (#0),
                    scope: scope[1],
                },
                kind: _3 = pcg64::Lcg64Xsh32::step(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = _2,
            _8 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:150:19: 150:36 (#0),
                    scope: scope[1],
                },
                kind: assert(move _8, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE) -> [success: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = Shr(move _7, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::ROTATE),
            StorageDead(_7),
            _5 = move _6 as u32 (IntToInt),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            _14 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:151:21: 151:38 (#0),
                    scope: scope[2],
                },
                kind: assert(move _14, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT) -> [success: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = Shr(move _13, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::XSHIFT),
            StorageDead(_13),
            StorageLive(_15),
            _15 = _2,
            _11 = BitXor(move _12, move _15),
            StorageDead(_15),
            StorageDead(_12),
            _16 = Lt(const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE, const 64_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:151:19: 151:57 (#0),
                    scope: scope[2],
                },
                kind: assert(move _16, "attempt to shift right by `{}`, which would overflow", const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE) -> [success: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = Shr(move _11, const <pcg64::Lcg64Xsh32 as rand_core::RngCore>::next_u32::SPARE),
            StorageDead(_11),
            _9 = move _10 as u32 (IntToInt),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_17),
            _17 = _9,
            StorageLive(_18),
            _18 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:152:9: 152:30 (#0),
                    scope: scope[3],
                },
                kind: _0 = core::num::<impl u32>::rotate_right(move _17, move _18) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_9),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:153:6: 153:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:140:5: 153:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:140:31: 140:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pcg64::Lcg64Xsh32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:140:17: 140:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg64.rs:141:21: 141:31 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg64.rs:141:13: 141:18 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:141:13: 141:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:142:9: 142:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut pcg64::Lcg64Xsh32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:142:9: 142:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg64.rs:150:19: 150:43 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg64.rs:150:13: 150:16 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:150:13: 150:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:150:19: 150:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:150:20: 150:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:150:19: 150:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg64.rs:151:19: 151:64 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg64.rs:151:13: 151:16 (#0),
                    },
                ),
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:13: 151:16 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:19: 151:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:20: 151:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:21: 151:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:22: 151:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:21: 151:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:41: 151:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:151:19: 151:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:152:9: 152:30 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:152:9: 152:12 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:152:9: 152:30 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:152:26: 152:29 (#0),
            scope: scope[0],
        },
    },
]