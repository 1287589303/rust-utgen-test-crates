[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:157:9: 157:38 (#0),
                    scope: scope[0],
                },
                kind: _0 = rand_core::impls::next_u64_via_u32::<pcg64::Lcg64Xsh32>(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:158:6: 158:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg64.rs:156:5: 158:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:156:31: 156:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pcg64::Lcg64Xsh32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:156:17: 156:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg64.rs:157:9: 157:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut pcg64::Lcg64Xsh32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg64.rs:157:33: 157:37 (#0),
            scope: scope[0],
        },
    },
]