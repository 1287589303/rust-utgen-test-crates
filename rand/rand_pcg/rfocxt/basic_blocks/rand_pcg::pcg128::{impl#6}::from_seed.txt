[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = [const 0_u64; 2],
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &_1,
            _5 = &(*_6),
            _4 = move _5 as &[u8] (PointerCoercion(Unsize)),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _2,
            _8 = &mut (*_9),
            _7 = move _8 as &mut [u64] (PointerCoercion(Unsize)),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:236:9: 236:48 (#0),
                    scope: scope[1],
                },
                kind: _3 = rand_core::le::read_u64_into(move _4, move _7) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_4),
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const 0_usize,
            _14 = Len(_2),
            _15 = Lt(_13, _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:237:32: 237:43 (#0),
                    scope: scope[1],
                },
                kind: assert(move _15, "index out of bounds: the length is {} but the index is {}", move _14, _13) -> [success: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = _2[_13],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:237:21: 237:44 (#0),
                    scope: scope[1],
                },
                kind: _11 = <u128 as core::convert::From<u64>>::from(move _12) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = const 1_usize,
            _20 = Len(_2),
            _21 = Lt(_19, _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:237:59: 237:70 (#0),
                    scope: scope[1],
                },
                kind: assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> [success: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = _2[_19],
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:237:48: 237:71 (#0),
                    scope: scope[1],
                },
                kind: _17 = <u128 as core::convert::From<u64>>::from(move _18) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            _22 = const 64_i32 as u32 (IntToInt),
            _23 = Lt(move _22, const 128_u32),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:237:47: 237:78 (#0),
                    scope: scope[1],
                },
                kind: assert(move _23, "attempt to shift left by `{}`, which would overflow", const 64_i32) -> [success: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = Shl(move _17, const 64_i32),
            StorageDead(_17),
            _10 = BitOr(move _11, move _16),
            StorageDead(_16),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_19),
            StorageDead(_13),
            StorageLive(_24),
            _24 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:238:9: 238:32 (#0),
                    scope: scope[2],
                },
                kind: _0 = pcg128::Mcg128Xsl64::new(move _24) -> [return: bb7, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            StorageDead(_10),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:239:6: 239:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128.rs:233:5: 239:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: pcg128::Mcg128Xsl64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:233:39: 233:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_pcg/src/pcg128.rs:233:24: 233:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg128.rs:233:18: 233:22 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg128.rs:233:18: 233:22 (#0),
                    },
                ),
            ),
        ),
        ty: [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:233:18: 233:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg128.rs:235:28: 235:37 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg128.rs:235:13: 235:25 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:235:13: 235:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:9: 236:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:27: 236:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:27: 236:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [u8; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:27: 236:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:34: 236:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:34: 236:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut [u64; 2_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:236:34: 236:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg128.rs:237:21: 237:78 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg128.rs:237:13: 237:18 (#0),
                    },
                ),
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:13: 237:18 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:21: 237:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:32: 237:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:41: 237:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:32: 237:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:32: 237:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:47: 237:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:48: 237:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:59: 237:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:68: 237:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:59: 237:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:59: 237:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:47: 237:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:237:47: 237:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: rand_pcg/src/pcg128.rs:238:9: 238:32 (#0),
                },
            ),
        ),
        ty: u128,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128.rs:238:26: 238:31 (#0),
            scope: scope[0],
        },
    },
]