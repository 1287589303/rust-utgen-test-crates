[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut (*_1),
            StorageLive(_4),
            _4 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128cm.rs:159:9: 159:47 (#0),
                    scope: scope[0],
                },
                kind: _0 = rand_core::impls::fill_bytes_via_next::<pcg128cm::Lcg128CmDxsm64>(move _3, move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128cm.rs:160:6: 160:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: rand_pcg/src/pcg128cm.rs:158:5: 160:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128cm.rs:158:46: 158:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut pcg128cm::Lcg128CmDxsm64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128cm.rs:158:19: 158:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            rand_pcg/src/pcg128cm.rs:158:36: 158:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                rand_pcg/src/pcg128cm.rs:158:30: 158:34 (#0),
                            ),
                        ),
                        pat_span: rand_pcg/src/pcg128cm.rs:158:30: 158:34 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128cm.rs:158:30: 158:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_pcg/src/pcg128cm.rs:159:9: 159:47 (#0),
                },
            ),
        ),
        ty: &'{erased} mut pcg128cm::Lcg128CmDxsm64,
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128cm.rs:159:36: 159:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: rand_pcg/src/pcg128cm.rs:159:9: 159:47 (#0),
                },
            ),
        ),
        ty: &'{erased} mut [u8],
        user_ty: None,
        source_info: SourceInfo {
            span: rand_pcg/src/pcg128cm.rs:159:42: 159:46 (#0),
            scope: scope[0],
        },
    },
]