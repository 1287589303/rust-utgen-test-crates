{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\npub struct OnceRef<'a, T> {\n    inner: AtomicPtr<T>,\n    ghost: PhantomData<UnsafeCell<&'a T>>,\n}\nimpl<'a, T> OnceRef<'a, T> {\n    pub const fn new() -> OnceRef<'a, T> {}\n    pub fn get(&self) -> Option<&'a T> {}\n    pub fn set(&self, value: &'a T) -> Result<(), ()> {}\n    pub fn get_or_init<F>(&self, f: F) -> &'a T\n    where\n        F: FnOnce() -> &'a T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n    where\n        F: FnOnce() -> Result<&'a T, E>,\n    {\n        let mut ptr = self.inner.load(Ordering::Acquire);\n        if ptr.is_null() {\n            ptr = f()? as *const T as *mut T;\n            let exchange = self\n                .inner\n                .compare_exchange(\n                    ptr::null_mut(),\n                    ptr,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if let Err(old) = exchange {\n                ptr = old;\n            }\n        }\n        Ok(unsafe { &*ptr })\n    }\n    fn _dummy() {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n276 pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n277 where\n278     F: FnOnce() -> Result<&'a T, E>,\n279 {\n280     let mut ptr = self.inner.load(Ordering::Acquire);\n281 \n282     if ptr.is_null() {\n283         // TODO replace with `cast_mut` when MSRV reaches 1.65.0 (also in `set`)\n284         ptr = f()? as *const T as *mut T;\n285         let exchange = self.inner.compare_exchange(\n286             ptr::null_mut(),\n287             ptr,\n288             Ordering::AcqRel,\n289             Ordering::Acquire,\n290         );\n291         if let Err(old) = exchange {\n292             ptr = old;\n293         }\n294     }\n295 \n296     Ok(unsafe { &*ptr })\n297 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}