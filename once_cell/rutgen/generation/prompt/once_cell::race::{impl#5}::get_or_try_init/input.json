{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\npub struct OnceRef<'a, T> {\n    inner: AtomicPtr<T>,\n    ghost: PhantomData<UnsafeCell<&'a T>>,\n}\nimpl<'a, T> OnceRef<'a, T> {\n    pub const fn new() -> OnceRef<'a, T> {}\n    pub fn get(&self) -> Option<&'a T> {}\n    pub fn set(&self, value: &'a T) -> Result<(), ()> {}\n    pub fn get_or_init<F>(&self, f: F) -> &'a T\n    where\n        F: FnOnce() -> &'a T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n    where\n        F: FnOnce() -> Result<&'a T, E>,\n    {\n        let mut ptr = self.inner.load(Ordering::Acquire);\n        if ptr.is_null() {\n            ptr = f()? as *const T as *mut T;\n            let exchange = self\n                .inner\n                .compare_exchange(\n                    ptr::null_mut(),\n                    ptr,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if let Err(old) = exchange {\n                ptr = old;\n            }\n        }\n        Ok(unsafe { &*ptr })\n    }\n    fn _dummy() {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n276 pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n277 where\n278     F: FnOnce() -> Result<&'a T, E>,\n279 {\n280     let mut ptr = self.inner.load(Ordering::Acquire);\n281 \n282     if ptr.is_null() {\n283         // TODO replace with `cast_mut` when MSRV reaches 1.65.0 (also in `set`)\n284         ptr = f()? as *const T as *mut T;\n285         let exchange = self.inner.compare_exchange(\n286             ptr::null_mut(),\n287             ptr,\n288             Ordering::AcqRel,\n289             Ordering::Acquire,\n290         );\n291         if let Err(old) = exchange {\n292             ptr = old;\n293         }\n294     }\n295 \n296     Ok(unsafe { &*ptr })\n297 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}