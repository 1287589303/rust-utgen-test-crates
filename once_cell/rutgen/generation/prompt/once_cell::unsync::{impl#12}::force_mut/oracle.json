{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct Lazy<T, F = fn() -> T> {\n    cell: OnceCell<T>,\n    init: Cell<Option<F>>,\n}\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\n#[derive(Debug)]\npub(crate) struct OnceCell<T> {\n    queue: AtomicPtr<Waiter>,\n    value: UnsafeCell<Option<T>>,\n}\npub struct OnceCell<T>(Imp<T>);\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub fn force(this: &Lazy<T, F>) -> &T {}\n    pub fn force_mut(this: &mut Lazy<T, F>) -> &mut T {\n        if this.cell.get_mut().is_none() {\n            let value = match this.init.get_mut().take() {\n                Some(f) => f(),\n                None => panic!(\"Lazy instance has previously been poisoned\"),\n            };\n            this.cell = OnceCell::with_value(value);\n        }\n        this.cell.get_mut().unwrap_or_else(|| unreachable!())\n    }\n    pub fn get(this: &Lazy<T, F>) -> Option<&T> {}\n    pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {}\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {\n        OnceCell {\n            inner: UnsafeCell::new(Some(value)),\n        }\n    }\n    #[inline]\n    pub fn get(&self) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {\n        unsafe { &mut *self.inner.get() }.as_mut()\n    }\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Forces the evaluation of this lazy value and returns a mutable reference to\n/// the result.\n///\n/// This is equivalent to the `DerefMut` impl, but is explicit.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::Lazy;\n///\n/// let mut lazy = Lazy::new(|| 92);\n///\n/// assert_eq!(Lazy::force_mut(&mut lazy), &92);\n/// assert_eq!(*lazy, 92);\n/// ```\n794 pub fn force_mut(this: &mut Lazy<T, F>) -> &mut T {\n795     if this.cell.get_mut().is_none() {\n796         let value = match this.init.get_mut().take() {\n797             Some(f) => f(),\n798             None => panic!(\"Lazy instance has previously been poisoned\"),\n799         };\n800         this.cell = OnceCell::with_value(value);\n801     }\n802     this.cell.get_mut().unwrap_or_else(|| unreachable!())\n803 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}