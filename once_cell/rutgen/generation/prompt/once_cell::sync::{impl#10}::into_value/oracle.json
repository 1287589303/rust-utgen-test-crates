{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::Cell, fmt, mem, ops::{Deref, DerefMut},\n    panic::RefUnwindSafe,\n};\nuse super::imp::OnceCell as Imp;\npub struct Lazy<T, F = fn() -> T> {\n    cell: OnceCell<T>,\n    init: Cell<Option<F>>,\n}\npub struct OnceCell<T>(Imp<T>);\n#[derive(Debug)]\npub(crate) struct OnceCell<T> {\n    queue: AtomicPtr<Waiter>,\n    value: UnsafeCell<Option<T>>,\n}\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\nimpl<T, F> Lazy<T, F> {\n    pub const fn new(f: F) -> Lazy<T, F> {}\n    pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {\n        let cell = this.cell;\n        let init = this.init;\n        cell.into_inner()\n            .ok_or_else(|| {\n                init.take()\n                    .unwrap_or_else(|| {\n                        panic!(\"Lazy instance has previously been poisoned\")\n                    })\n            })\n    }\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    pub fn get(&self) -> Option<&T> {}\n    #[cfg(feature = \"std\")]\n    pub fn wait(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    #[inline]\n    pub unsafe fn get_unchecked(&self) -> &T {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    #[inline]\n    pub fn into_inner(self) -> Option<T> {\n        self.0.into_inner()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Consumes this `Lazy` returning the stored value.\n///\n/// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n1285 pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {\n1286     let cell = this.cell;\n1287     let init = this.init;\n1288     cell.into_inner().ok_or_else(|| {\n1289         init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))\n1290     })\n1291 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}