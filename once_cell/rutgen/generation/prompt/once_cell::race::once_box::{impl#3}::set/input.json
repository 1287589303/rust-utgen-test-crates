{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\nuse super::atomic::{AtomicPtr, Ordering};\nuse core::{marker::PhantomData, ptr};\nuse alloc::boxed::Box;\npub struct OnceBox<T> {\n    inner: AtomicPtr<T>,\n    ghost: PhantomData<Option<Box<T>>>,\n}\nimpl<T> OnceBox<T> {\n    pub const fn new() -> OnceBox<T> {}\n    pub fn with_value(value: Box<T>) -> Self {\n        OnceBox {\n            inner: AtomicPtr::new(Box::into_raw(value)),\n            ghost: PhantomData,\n        }\n    }\n    pub fn get(&self) -> Option<&T> {}\n    pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {\n        let ptr = Box::into_raw(value);\n        let exchange = self\n            .inner\n            .compare_exchange(ptr::null_mut(), ptr, Ordering::AcqRel, Ordering::Acquire);\n        if exchange.is_err() {\n            let value = unsafe { Box::from_raw(ptr) };\n            return Err(value);\n        }\n        Ok(())\n    }\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> Box<T>,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<Box<T>, E>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the contents of this cell to `value`.\n///\n/// Returns `Ok(())` if the cell was empty and `Err(value)` if it was\n/// full.\n378 pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {\n379     let ptr = Box::into_raw(value);\n380     let exchange = self.inner.compare_exchange(\n381         ptr::null_mut(),\n382         ptr,\n383         Ordering::AcqRel,\n384         Ordering::Acquire,\n385     );\n386     if exchange.is_err() {\n387         let value = unsafe { Box::from_raw(ptr) };\n388         return Err(value);\n389     }\n390     Ok(())\n391 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}