{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    #[inline]\n    pub fn get(&self) -> Option<&T> {\n        unsafe { &*self.inner.get() }.as_ref()\n    }\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    pub fn set(&self, value: T) -> Result<(), T> {\n        match self.try_insert(value) {\n            Ok(_) => Ok(()),\n            Err((_, value)) => Err(value),\n        }\n    }\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {\n        if let Some(val) = self.get() {\n            return Ok(val);\n        }\n        let val = f()?;\n        assert!(self.set(val).is_ok(), \"reentrant init\");\n        Ok(unsafe { self.get().unwrap_unchecked() })\n    }\n    pub fn take(&mut self) -> Option<T> {}\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and the cell\n/// remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`. Doing\n/// so results in a panic.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\n/// assert!(cell.get().is_none());\n/// let value = cell.get_or_try_init(|| -> Result<i32, ()> {\n///     Ok(92)\n/// });\n/// assert_eq!(value, Ok(&92));\n/// assert_eq!(cell.get(), Some(&92))\n/// ```\n622 pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n623 where\n624     F: FnOnce() -> Result<T, E>,\n625 {\n626     if let Some(val) = self.get() {\n627         return Ok(val);\n628     }\n629     let val = f()?;\n630     // Note that *some* forms of reentrant initialization might lead to\n631     // UB (see `reentrant_init` test). I believe that just removing this\n632     // `assert`, while keeping `set/get` would be sound, but it seems\n633     // better to panic, rather than to silently use an old value.\n634     assert!(self.set(val).is_ok(), \"reentrant init\");\n635     Ok(unsafe { self.get().unwrap_unchecked() })\n636 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}