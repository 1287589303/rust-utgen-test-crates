{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\n#[derive(Default, Debug)]\npub struct OnceNonZeroUsize {\n    inner: AtomicUsize,\n}\nimpl OnceNonZeroUsize {\n    #[inline]\n    pub const fn new() -> OnceNonZeroUsize {}\n    #[inline]\n    pub fn get(&self) -> Option<NonZeroUsize> {}\n    pub unsafe fn get_unchecked(&self) -> NonZeroUsize {}\n    #[inline]\n    pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {}\n    pub fn get_or_init<F>(&self, f: F) -> NonZeroUsize\n    where\n        F: FnOnce() -> NonZeroUsize,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>\n    where\n        F: FnOnce() -> Result<NonZeroUsize, E>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn init<E>(\n        &self,\n        f: impl FnOnce() -> Result<NonZeroUsize, E>,\n    ) -> Result<NonZeroUsize, E> {\n        let mut val = f()?.get();\n        let exchange = self\n            .inner\n            .compare_exchange(0, val, Ordering::AcqRel, Ordering::Acquire);\n        if let Err(old) = exchange {\n            val = old;\n        }\n        Ok(unsafe { NonZeroUsize::new_unchecked(val) })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n129 fn init<E>(&self, f: impl FnOnce() -> Result<NonZeroUsize, E>) -> Result<NonZeroUsize, E> {\n130     let mut val = f()?.get();\n131     let exchange = self.inner.compare_exchange(0, val, Ordering::AcqRel, Ordering::Acquire);\n132     if let Err(old) = exchange {\n133         val = old;\n134     }\n135     Ok(unsafe { NonZeroUsize::new_unchecked(val) })\n136 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}