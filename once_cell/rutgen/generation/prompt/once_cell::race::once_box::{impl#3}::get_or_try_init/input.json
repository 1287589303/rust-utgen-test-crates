{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\nuse super::atomic::{AtomicPtr, Ordering};\nuse core::{marker::PhantomData, ptr};\nuse alloc::boxed::Box;\npub struct OnceBox<T> {\n    inner: AtomicPtr<T>,\n    ghost: PhantomData<Option<Box<T>>>,\n}\nimpl<T> OnceBox<T> {\n    pub const fn new() -> OnceBox<T> {}\n    pub fn with_value(value: Box<T>) -> Self {\n        OnceBox {\n            inner: AtomicPtr::new(Box::into_raw(value)),\n            ghost: PhantomData,\n        }\n    }\n    pub fn get(&self) -> Option<&T> {}\n    pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> Box<T>,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<Box<T>, E>,\n    {\n        let mut ptr = self.inner.load(Ordering::Acquire);\n        if ptr.is_null() {\n            let val = f()?;\n            ptr = Box::into_raw(val);\n            let exchange = self\n                .inner\n                .compare_exchange(\n                    ptr::null_mut(),\n                    ptr,\n                    Ordering::AcqRel,\n                    Ordering::Acquire,\n                );\n            if let Err(old) = exchange {\n                drop(unsafe { Box::from_raw(ptr) });\n                ptr = old;\n            }\n        }\n        Ok(unsafe { &*ptr })\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n417 pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n418 where\n419     F: FnOnce() -> Result<Box<T>, E>,\n420 {\n421     let mut ptr = self.inner.load(Ordering::Acquire);\n422 \n423     if ptr.is_null() {\n424         let val = f()?;\n425         ptr = Box::into_raw(val);\n426         let exchange = self.inner.compare_exchange(\n427             ptr::null_mut(),\n428             ptr,\n429             Ordering::AcqRel,\n430             Ordering::Acquire,\n431         );\n432         if let Err(old) = exchange {\n433             drop(unsafe { Box::from_raw(ptr) });\n434             ptr = old;\n435         }\n436     };\n437     Ok(unsafe { &*ptr })\n438 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}