{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\npub struct OnceRef<'a, T> {\n    inner: AtomicPtr<T>,\n    ghost: PhantomData<UnsafeCell<&'a T>>,\n}\nimpl<'a, T> OnceRef<'a, T> {\n    pub const fn new() -> OnceRef<'a, T> {}\n    pub fn get(&self) -> Option<&'a T> {}\n    pub fn set(&self, value: &'a T) -> Result<(), ()> {}\n    pub fn get_or_init<F>(&self, f: F) -> &'a T\n    where\n        F: FnOnce() -> &'a T,\n    {\n        enum Void {}\n        match self.get_or_try_init(|| Ok::<&'a T, Void>(f())) {\n            Ok(val) => val,\n            Err(void) => match void {}\n        }\n    }\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&'a T, E>\n    where\n        F: FnOnce() -> Result<&'a T, E>,\n    {}\n    fn _dummy() {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if the cell was\n/// empty.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n258 pub fn get_or_init<F>(&self, f: F) -> &'a T\n259 where\n260     F: FnOnce() -> &'a T,\n261 {\n262     enum Void {}\n263     match self.get_or_try_init(|| Ok::<&'a T, Void>(f())) {\n264         Ok(val) => val,\n265         Err(void) => match void {},\n266     }\n267 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}