{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::Cell, fmt, mem, ops::{Deref, DerefMut},\n    panic::RefUnwindSafe,\n};\nuse super::imp::OnceCell as Imp;\npub struct OnceCell<T>(Imp<T>);\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    pub fn get(&self) -> Option<&T> {}\n    #[cfg(feature = \"std\")]\n    pub fn wait(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    #[inline]\n    pub unsafe fn get_unchecked(&self) -> &T {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {\n        let mut value = Some(value);\n        let res = self.get_or_init(|| unsafe { value.take().unwrap_unchecked() });\n        match value {\n            None => Ok(res),\n            Some(value) => Err((res, value)),\n        }\n    }\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    #[inline]\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Like [`set`](Self::set), but also returns a reference to the final cell value.\n///\n/// # Example\n///\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert!(cell.get().is_none());\n///\n/// assert_eq!(cell.try_insert(92), Ok(&92));\n/// assert_eq!(cell.try_insert(62), Err((&92, 62)));\n///\n/// assert!(cell.get().is_some());\n/// ```\n1080 pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {\n1081     let mut value = Some(value);\n1082     let res = self.get_or_init(|| unsafe { value.take().unwrap_unchecked() });\n1083     match value {\n1084         None => Ok(res),\n1085         Some(value) => Err((res, value)),\n1086     }\n1087 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}