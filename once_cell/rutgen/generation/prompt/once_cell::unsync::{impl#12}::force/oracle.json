{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct Lazy<T, F = fn() -> T> {\n    cell: OnceCell<T>,\n    init: Cell<Option<F>>,\n}\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\n#[derive(Debug)]\npub(crate) struct OnceCell<T> {\n    queue: AtomicPtr<Waiter>,\n    value: UnsafeCell<Option<T>>,\n}\npub struct OnceCell<T>(Imp<T>);\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub fn force(this: &Lazy<T, F>) -> &T {\n        this.cell\n            .get_or_init(|| match this.init.take() {\n                Some(f) => f(),\n                None => panic!(\"Lazy instance has previously been poisoned\"),\n            })\n    }\n    pub fn force_mut(this: &mut Lazy<T, F>) -> &mut T {}\n    pub fn get(this: &Lazy<T, F>) -> Option<&T> {}\n    pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Forces the evaluation of this lazy value and returns a reference to\n/// the result.\n///\n/// This is equivalent to the `Deref` impl, but is explicit.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::Lazy;\n///\n/// let lazy = Lazy::new(|| 92);\n///\n/// assert_eq!(Lazy::force(&lazy), &92);\n/// assert_eq!(&*lazy, &92);\n/// ```\n773 pub fn force(this: &Lazy<T, F>) -> &T {\n774     this.cell.get_or_init(|| match this.init.take() {\n775         Some(f) => f(),\n776         None => panic!(\"Lazy instance has previously been poisoned\"),\n777     })\n778 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}