{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    #[inline]\n    pub fn get(&self) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {\n        enum Void {}\n        match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n            Ok(val) => val,\n            Err(void) => match void {}\n        }\n    }\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f`\n/// if the cell was empty.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and the cell\n/// remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`. Doing\n/// so results in a panic.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// let value = cell.get_or_init(|| 92);\n/// assert_eq!(value, &92);\n/// let value = cell.get_or_init(|| unreachable!());\n/// assert_eq!(value, &92);\n/// ```\n586 pub fn get_or_init<F>(&self, f: F) -> &T\n587 where\n588     F: FnOnce() -> T,\n589 {\n590     enum Void {}\n591     match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n592         Ok(val) => val,\n593         Err(void) => match void {},\n594     }\n595 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}