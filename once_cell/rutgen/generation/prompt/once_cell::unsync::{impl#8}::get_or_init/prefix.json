{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    #[inline]\n    pub fn get(&self) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {\n        enum Void {}\n        match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n            Ok(val) => val,\n            Err(void) => match void {}\n        }\n    }\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f`\n/// if the cell was empty.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and the cell\n/// remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`. Doing\n/// so results in a panic.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// let value = cell.get_or_init(|| 92);\n/// assert_eq!(value, &92);\n/// let value = cell.get_or_init(|| unreachable!());\n/// assert_eq!(value, &92);\n/// ```\n586 pub fn get_or_init<F>(&self, f: F) -> &T\n587 where\n588     F: FnOnce() -> T,\n589 {\n590     enum Void {}\n591     match self.get_or_try_init(|| Ok::<T, Void>(f())) {\n592         Ok(val) => val,\n593         Err(void) => match void {},\n594     }\n595 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}