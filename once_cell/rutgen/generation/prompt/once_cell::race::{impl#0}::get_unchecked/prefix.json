{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\n#[derive(Default, Debug)]\npub struct OnceNonZeroUsize {\n    inner: AtomicUsize,\n}\nimpl OnceNonZeroUsize {\n    #[inline]\n    pub const fn new() -> OnceNonZeroUsize {}\n    #[inline]\n    pub fn get(&self) -> Option<NonZeroUsize> {}\n    pub unsafe fn get_unchecked(&self) -> NonZeroUsize {\n        let p = self.inner.as_ptr();\n        let val = unsafe { p.read() };\n        unsafe { NonZeroUsize::new_unchecked(val) }\n    }\n    #[inline]\n    pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {}\n    pub fn get_or_init<F>(&self, f: F) -> NonZeroUsize\n    where\n        F: FnOnce() -> NonZeroUsize,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>\n    where\n        F: FnOnce() -> Result<NonZeroUsize, E>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn init<E>(\n        &self,\n        f: impl FnOnce() -> Result<NonZeroUsize, E>,\n    ) -> Result<NonZeroUsize, E> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Get the reference to the underlying value, without checking if the cell\n/// is initialized.\n///\n/// # Safety\n///\n/// Caller must ensure that the cell is in initialized state, and that\n/// the contents are acquired by (synchronized to) this thread.\n60 pub unsafe fn get_unchecked(&self) -> NonZeroUsize {\n61     let p = self.inner.as_ptr();\n62 \n63     // SAFETY: The caller is responsible for ensuring that the value\n64     // was initialized and that the contents have been acquired by\n65     // this thread. Assuming that, we can assume there will be no\n66     // conflicting writes to the value since the value will never\n67     // change once initialized. This relies on the statement in\n68     // https://doc.rust-lang.org/1.83.0/core/sync/atomic/ that \"(A\n69     // `compare_exchange` or `compare_exchange_weak` that does not\n70     // succeed is not considered a write.\"\n71     let val = unsafe { p.read() };\n72 \n73     // SAFETY: The caller is responsible for ensuring the value is\n74     // initialized and thus not zero.\n75     unsafe { NonZeroUsize::new_unchecked(val) }\n76 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}