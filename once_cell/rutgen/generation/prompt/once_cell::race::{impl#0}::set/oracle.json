{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/race.rs\n// crate name is once_cell\n#[cfg(not(feature = \"portable-atomic\"))]\nuse core::sync::atomic;\n#[cfg(feature = \"portable-atomic\")]\nuse portable_atomic as atomic;\nuse atomic::{AtomicPtr, AtomicUsize, Ordering};\nuse core::cell::UnsafeCell;\nuse core::marker::PhantomData;\nuse core::num::NonZeroUsize;\nuse core::ptr;\n#[cfg(feature = \"alloc\")]\npub use self::once_box::OnceBox;\n#[derive(Default, Debug)]\npub struct OnceNonZeroUsize {\n    inner: AtomicUsize,\n}\nimpl OnceNonZeroUsize {\n    #[inline]\n    pub const fn new() -> OnceNonZeroUsize {}\n    #[inline]\n    pub fn get(&self) -> Option<NonZeroUsize> {}\n    pub unsafe fn get_unchecked(&self) -> NonZeroUsize {}\n    #[inline]\n    pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {\n        let exchange = self\n            .inner\n            .compare_exchange(0, value.get(), Ordering::AcqRel, Ordering::Acquire);\n        match exchange {\n            Ok(_) => Ok(()),\n            Err(_) => Err(()),\n        }\n    }\n    pub fn get_or_init<F>(&self, f: F) -> NonZeroUsize\n    where\n        F: FnOnce() -> NonZeroUsize,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>\n    where\n        F: FnOnce() -> Result<NonZeroUsize, E>,\n    {}\n    #[cold]\n    #[inline(never)]\n    fn init<E>(\n        &self,\n        f: impl FnOnce() -> Result<NonZeroUsize, E>,\n    ) -> Result<NonZeroUsize, E> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the contents of this cell to `value`.\n///\n/// Returns `Ok(())` if the cell was empty and `Err(())` if it was\n/// full.\n83 pub fn set(&self, value: NonZeroUsize) -> Result<(), ()> {\n84     let exchange =\n85         self.inner.compare_exchange(0, value.get(), Ordering::AcqRel, Ordering::Acquire);\n86     match exchange {\n87         Ok(_) => Ok(()),\n88         Err(_) => Err(()),\n89     }\n90 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}