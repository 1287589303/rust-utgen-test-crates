{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::Cell, fmt, mem, ops::{Deref, DerefMut},\n    panic::RefUnwindSafe,\n};\nuse super::imp::OnceCell as Imp;\npub struct OnceCell<T>(Imp<T>);\nimpl<T> From<T> for OnceCell<T> {\n    fn from(value: T) -> Self {\n        Self::with_value(value)\n    }\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {\n        OnceCell(Imp::with_value(value))\n    }\n    pub fn get(&self) -> Option<&T> {}\n    #[cfg(feature = \"std\")]\n    pub fn wait(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    #[inline]\n    pub unsafe fn get_unchecked(&self) -> &T {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {}\n    #[inline]\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n935 fn from(value: T) -> Self {\n936     Self::with_value(value)\n937 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}