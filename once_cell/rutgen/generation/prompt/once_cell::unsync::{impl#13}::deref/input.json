{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct Lazy<T, F = fn() -> T> {\n    cell: OnceCell<T>,\n    init: Cell<Option<F>>,\n}\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\n#[derive(Debug)]\npub(crate) struct OnceCell<T> {\n    queue: AtomicPtr<Waiter>,\n    value: UnsafeCell<Option<T>>,\n}\npub struct OnceCell<T>(Imp<T>);\nimpl<T, F: FnOnce() -> T> Deref for Lazy<T, F> {\n    type Target = T;\n    fn deref(&self) -> &T {\n        Lazy::force(self)\n    }\n}\nimpl<T, F: FnOnce() -> T> Lazy<T, F> {\n    pub fn force(this: &Lazy<T, F>) -> &T {\n        this.cell\n            .get_or_init(|| match this.init.take() {\n                Some(f) => f(),\n                None => panic!(\"Lazy instance has previously been poisoned\"),\n            })\n    }\n    pub fn force_mut(this: &mut Lazy<T, F>) -> &mut T {}\n    pub fn get(this: &Lazy<T, F>) -> Option<&T> {}\n    pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n842 fn deref(&self) -> &T {\n843     Lazy::force(self)\n844 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}