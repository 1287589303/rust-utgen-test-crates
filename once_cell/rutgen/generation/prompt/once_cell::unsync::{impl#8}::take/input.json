{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::{Cell, UnsafeCell},\n    fmt, mem, ops::{Deref, DerefMut},\n    panic::{RefUnwindSafe, UnwindSafe},\n};\npub struct OnceCell<T> {\n    inner: UnsafeCell<Option<T>>,\n}\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    #[inline]\n    pub fn get(&self) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {}\n    pub fn take(&mut self) -> Option<T> {\n        mem::take(self).into_inner()\n    }\n    pub fn into_inner(self) -> Option<T> {\n        self.inner.into_inner()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n///\n/// Has no effect and returns `None` if the `OnceCell` hasn't been initialized.\n///\n/// # Examples\n///\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let mut cell: OnceCell<String> = OnceCell::new();\n/// assert_eq!(cell.take(), None);\n///\n/// let mut cell = OnceCell::new();\n/// cell.set(\"hello\".to_string()).unwrap();\n/// assert_eq!(cell.take(), Some(\"hello\".to_string()));\n/// assert_eq!(cell.get(), None);\n/// ```\n///\n/// This method is allowed to violate the invariant of writing to a `OnceCell`\n/// at most once because it requires `&mut` access to `self`. As with all\n/// interior mutability, `&mut` access permits arbitrary modification:\n///\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let mut cell: OnceCell<u32> = OnceCell::new();\n/// cell.set(92).unwrap();\n/// cell = OnceCell::new();\n/// ```\n667 pub fn take(&mut self) -> Option<T> {\n668     mem::take(self).into_inner()\n669 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}