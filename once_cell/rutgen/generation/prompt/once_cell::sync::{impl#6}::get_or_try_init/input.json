{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is once_cell\nuse core::{\n    cell::Cell, fmt, mem, ops::{Deref, DerefMut},\n    panic::RefUnwindSafe,\n};\nuse super::imp::OnceCell as Imp;\npub struct OnceCell<T>(Imp<T>);\nimpl<T> OnceCell<T> {\n    pub const fn new() -> OnceCell<T> {}\n    pub const fn with_value(value: T) -> OnceCell<T> {}\n    pub fn get(&self) -> Option<&T> {\n        if self.0.is_initialized() {\n            Some(unsafe { self.get_unchecked() })\n        } else {\n            None\n        }\n    }\n    #[cfg(feature = \"std\")]\n    pub fn wait(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> Option<&mut T> {}\n    #[inline]\n    pub unsafe fn get_unchecked(&self) -> &T {\n        self.0.get_unchecked()\n    }\n    pub fn set(&self, value: T) -> Result<(), T> {}\n    pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {}\n    pub fn get_or_init<F>(&self, f: F) -> &T\n    where\n        F: FnOnce() -> T,\n    {}\n    pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n    where\n        F: FnOnce() -> Result<T, E>,\n    {\n        if let Some(value) = self.get() {\n            return Ok(value);\n        }\n        self.0.initialize(f)?;\n        debug_assert!(self.0.is_initialized());\n        Ok(unsafe { self.get_unchecked() })\n    }\n    pub fn take(&mut self) -> Option<T> {}\n    #[inline]\n    pub fn into_inner(self) -> Option<T> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and\n/// the cell remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`.\n/// The exact outcome is unspecified. Current implementation\n/// deadlocks, but this may be changed to a panic in the future.\n///\n/// # Example\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\n/// assert!(cell.get().is_none());\n/// let value = cell.get_or_try_init(|| -> Result<i32, ()> {\n///     Ok(92)\n/// });\n/// assert_eq!(value, Ok(&92));\n/// assert_eq!(cell.get(), Some(&92))\n/// ```\n1152 pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>\n1153 where\n1154     F: FnOnce() -> Result<T, E>,\n1155 {\n1156     // Fast path check\n1157     if let Some(value) = self.get() {\n1158         return Ok(value);\n1159     }\n1160 \n1161     self.0.initialize(f)?;\n1162 \n1163     // Safe b/c value is initialized.\n1164     debug_assert!(self.0.is_initialized());\n1165     Ok(unsafe { self.get_unchecked() })\n1166 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}