{
  "name": "once_cell::sync::{impl#6}::get_unchecked",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1031:9:1033:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0.get_unchecked()\n"
      ],
      "input_infer": "self.0 must be initialized with a valid value, self must be a reference to an initialized OnceCell, and T must be a valid type that satisfies the safety guarantees.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    let once_cell = OnceCell::with_value(TestStruct);",
                "    let reference: &TestStruct;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "}"
              ],
              "oracle": [
                "    let once_cell = OnceCell::with_value(TestStruct);",
                "    let reference: &TestStruct;",
                "    unsafe { reference = once_cell.get_unchecked(); }",
                "    assert_eq!(reference, &TestStruct);",
                "    assert!(once_cell.get().is_some());",
                "    assert!(unsafe { reference as *const _ == once_cell.get_unchecked() as *const _ });"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    let once_cell = OnceCell::with_value(TestStruct);",
                "    let reference: &TestStruct;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "    let once_cell = OnceCell::with_value(TestStruct);",
                "    let reference: &TestStruct;",
                "    unsafe { reference = once_cell.get_unchecked(); }",
                "    assert_eq!(reference, &TestStruct);",
                "    assert!(once_cell.get().is_some());",
                "    assert!(unsafe { reference as *const _ == once_cell.get_unchecked() as *const _ });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let once_cell = OnceCell::with_value(42);",
                "    let reference: &i32;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(*reference == 42);",
                "    assert!(reference.is_some());",
                "    assert!(unsafe { reference as *const _ } == once_cell.0.get_unchecked() as *const _);",
                "    assert_eq!(std::mem::size_of_val(reference), std::mem::size_of::<i32>());",
                "    assert!(once_cell.get().is_some());"
              ],
              "code": [
                "{",
                "    let once_cell = OnceCell::with_value(42);",
                "    let reference: &i32;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "    assert!(*reference == 42);",
                "    assert!(reference.is_some());",
                "    assert!(unsafe { reference as *const _ } == once_cell.0.get_unchecked() as *const _);",
                "    assert_eq!(std::mem::size_of_val(reference), std::mem::size_of::<i32>());",
                "    assert!(once_cell.get().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let once_cell = OnceCell::with_value(String::from(\"Hello\"));",
                "    let reference: &String;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(reference, &String::from(\"Hello\"));",
                "    assert!(once_cell.get().is_some());",
                "    assert_eq!(once_cell.get().unwrap(), &String::from(\"Hello\"));",
                "    assert!(once_cell.get_mut().is_none());",
                "    let result = once_cell.set(String::from(\"World\"));",
                "    assert!(result.is_err());",
                "    let result = once_cell.try_insert(String::from(\"World\"));",
                "    assert!(result.is_err());",
                "    let value = once_cell.take();",
                "    assert_eq!(value, Some(String::from(\"Hello\")));",
                "    assert!(once_cell.get().is_none());",
                "    let new_value = once_cell.get_or_init(|| String::from(\"Hello again\"));",
                "    assert_eq!(new_value, &String::from(\"Hello\"));",
                "    let result = once_cell.get_or_try_init(|| Err(\"Error\"));",
                "    assert!(result.is_ok());"
              ],
              "code": [
                "{",
                "    let once_cell = OnceCell::with_value(String::from(\"Hello\"));",
                "    let reference: &String;",
                "",
                "    unsafe {",
                "        reference = once_cell.get_unchecked();",
                "    }",
                "    assert_eq!(reference, &String::from(\"Hello\"));",
                "    assert!(once_cell.get().is_some());",
                "    assert_eq!(once_cell.get().unwrap(), &String::from(\"Hello\"));",
                "    assert!(once_cell.get_mut().is_none());",
                "    let result = once_cell.set(String::from(\"World\"));",
                "    assert!(result.is_err());",
                "    let result = once_cell.try_insert(String::from(\"World\"));",
                "    assert!(result.is_err());",
                "    let value = once_cell.take();",
                "    assert_eq!(value, Some(String::from(\"Hello\")));",
                "    assert!(once_cell.get().is_none());",
                "    let new_value = once_cell.get_or_init(|| String::from(\"Hello again\"));",
                "    assert_eq!(new_value, &String::from(\"Hello\"));",
                "    let result = once_cell.get_or_try_init(|| Err(\"Error\"));",
                "    assert!(result.is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}