{
  "name": "once_cell::unsync::{impl#12}::force_mut",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:794:9:803:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: this.cell.get_mut().is_none() at line 795 is true\n",
        "precondition: this.init.get_mut().take() matches Some(f) at line 796 is true\n",
        "precondition: this.init.get_mut().take() matches Some(f) at line 796 is true\n",
        "expected return value/type: this.cell.get_mut().unwrap_or_else(|| unreachable!())\n"
      ],
      "input_infer": "this: &mut Lazy<T, F> where this.cell.get_mut().is_none() true, this.init.get_mut().take() returns Some(f) which is a function pointer or closure that produces a value of type T when called.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestData {",
                "        value: usize,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        TestData { value: 42 }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut TestData = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(result.value == 42);",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert!(lazy.cell.get_mut().unwrap().value == 42);",
                "    assert!(lazy.init.get_mut().is_none());"
              ],
              "code": [
                "{",
                "    struct TestData {",
                "        value: usize,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        TestData { value: 42 }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut TestData = Lazy::force_mut(&mut lazy);",
                "    assert!(result.value == 42);",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert!(lazy.cell.get_mut().unwrap().value == 42);",
                "    assert!(lazy.init.get_mut().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherTestData {",
                "        value: String,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        AnotherTestData { value: \"Hello\".into() }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut AnotherTestData = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().is_some());",
                "    assert_eq!(result.value, \"Hello\");",
                "    assert_eq!(*lazy.cell.get_mut().unwrap(), AnotherTestData { value: \"Hello\".into() });",
                "    assert!(lazy.init.get_mut().is_none());"
              ],
              "code": [
                "{",
                "    struct AnotherTestData {",
                "        value: String,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        AnotherTestData { value: \"Hello\".into() }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut AnotherTestData = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().is_some());",
                "    assert_eq!(result.value, \"Hello\");",
                "    assert_eq!(*lazy.cell.get_mut().unwrap(), AnotherTestData { value: \"Hello\".into() });",
                "    assert!(lazy.init.get_mut().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LargeData {",
                "        values: Vec<u128>,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        LargeData { values: vec![1, 2, 3, 4, 5] }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut LargeData = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut().take().is_some(), true);",
                "    assert_eq!(result.values, vec![1, 2, 3, 4, 5]);",
                "    assert_eq!(*result, LargeData { values: vec![1, 2, 3, 4, 5] });"
              ],
              "code": [
                "{",
                "    struct LargeData {",
                "        values: Vec<u128>,",
                "    }",
                "    ",
                "    let mut init_fn = || {",
                "        LargeData { values: vec![1, 2, 3, 4, 5] }",
                "    };",
                "    ",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "    ",
                "    let result: &mut LargeData = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut().take().is_some(), true);",
                "    assert_eq!(result.values, vec![1, 2, 3, 4, 5]);",
                "    assert_eq!(*result, LargeData { values: vec![1, 2, 3, 4, 5] });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyData;",
                "",
                "    let mut init_fn = || {",
                "        EmptyData",
                "    };",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "",
                "    let result: &mut EmptyData = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().take().is_some());",
                "    let value: &mut EmptyData = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(value, &mut EmptyData);"
              ],
              "code": [
                "{",
                "    struct EmptyData;",
                "",
                "    let mut init_fn = || {",
                "        EmptyData",
                "    };",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(Some(&mut init_fn)),",
                "    };",
                "",
                "    let result: &mut EmptyData = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().take().is_some());",
                "    let value: &mut EmptyData = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(value, &mut EmptyData);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: this.cell.get_mut().is_none() at line 795 is true\n",
        "precondition: this.init.get_mut().take() matches None at line 796 is true\n"
      ],
      "input_infer": "Lazy instance with an uninitialized cell and init containing None, with T being any type that can be created with the provided function.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<i32, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().take().is_none());"
              ],
              "code": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<i32, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert!(lazy.init.get_mut().take().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<f64, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut(), None);",
                "    assert_panics!(Lazy::force_mut(&mut lazy));",
                "    assert_eq!(lazy.cell.get_mut(), None);"
              ],
              "code": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<f64, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut(), None);",
                "    assert_panics!(Lazy::force_mut(&mut lazy));",
                "    assert_eq!(lazy.cell.get_mut(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<String, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut().take(), None);",
                "    assert!(std::panic::catch_unwind(|| Lazy::force_mut(&mut lazy)).is_err());"
              ],
              "code": [
                "{",
                "    struct TestInit;",
                "    let mut lazy: Lazy<String, fn()> = Lazy {",
                "        cell: OnceCell::new(),",
                "        init: Cell::new(None),",
                "    };",
                "    let _result = Lazy::force_mut(&mut lazy);",
                "    assert!(lazy.cell.get_mut().is_none());",
                "    assert_eq!(lazy.init.get_mut().take(), None);",
                "    assert!(std::panic::catch_unwind(|| Lazy::force_mut(&mut lazy)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: this.cell.get_mut().is_none() at line 795 is false\n",
        "expected return value/type: this.cell.get_mut().unwrap_or_else(|| unreachable!())\n"
      ],
      "input_infer": "&mut Lazy<T, F> where T is already initialized and F is a valid function that returns T\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> i32 {",
                "            42",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(42),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*result, 42);",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert_eq!(lazy.cell.get_mut(), Some(&mut 42));",
                "    assert!(lazy.init.get().is_none());",
                "    assert_eq!(lazy.cell.get(), Some(&42));"
              ],
              "code": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> i32 {",
                "            42",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(42),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(*result, 42);",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert_eq!(lazy.cell.get_mut(), Some(&mut 42));",
                "    assert!(lazy.init.get().is_none());",
                "    assert_eq!(lazy.cell.get(), Some(&42));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> String {",
                "            String::from(\"Hello\")",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(String::from(\"Hello\")),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "    ",
                "    let result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &String::from(\"Hello\"));",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert_eq!(lazy.cell.get(), Some(&String::from(\"Hello\")));",
                "    assert_eq!(lazy.init.get(), None);"
              ],
              "code": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> String {",
                "            String::from(\"Hello\")",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(String::from(\"Hello\")),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "    ",
                "    let result = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(result, &String::from(\"Hello\"));",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert_eq!(lazy.cell.get(), Some(&String::from(\"Hello\")));",
                "    assert_eq!(lazy.init.get(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> f64 {",
                "            3.14",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(3.14),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*result, 3.14);",
                "    assert_eq!(lazy.cell.get().unwrap(), &3.14);",
                "    assert!(lazy.init.get().is_none());"
              ],
              "code": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> f64 {",
                "            3.14",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(3.14),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(*result, 3.14);",
                "    assert_eq!(lazy.cell.get().unwrap(), &3.14);",
                "    assert!(lazy.init.get().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> MyStruct {",
                "            MyStruct { value: 100 }",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(MyStruct { value: 100 }),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 100);",
                "    assert!(lazy.init.get().is_none());",
                "    assert!(lazy.cell.get_mut().is_some());"
              ],
              "code": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> MyStruct {",
                "            MyStruct { value: 100 }",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(MyStruct { value: 100 }),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "    assert_eq!(result.value, 100);",
                "    assert!(lazy.init.get().is_none());",
                "    assert!(lazy.cell.get_mut().is_some());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> String {",
                "            String::new()",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(String::new()),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_empty());",
                "    assert_eq!(result, &String::new());",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert!(lazy.init.get().is_none());"
              ],
              "code": [
                "{",
                "    struct InitFunc;",
                "",
                "    impl InitFunc {",
                "        fn call() -> String {",
                "            String::new()",
                "        }",
                "    }",
                "",
                "    let mut lazy = Lazy {",
                "        cell: OnceCell::with_value(String::new()),",
                "        init: Cell::new(Some(InitFunc::call)),",
                "    };",
                "",
                "    let result = Lazy::force_mut(&mut lazy);",
                "    assert!(result.is_empty());",
                "    assert_eq!(result, &String::new());",
                "    assert!(lazy.cell.get_mut().is_some());",
                "    assert!(lazy.init.get().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}