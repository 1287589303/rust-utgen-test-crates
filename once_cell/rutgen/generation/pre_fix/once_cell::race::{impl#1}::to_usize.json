{
  "name": "once_cell::race::{impl#1}::to_usize",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": false,
  "loc": "src/race.rs:200:5:202:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: value at line 201 is true\n"
      ],
      "input_infer": "value is true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = OnceBool::to_usize(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.get().is_some(), true);",
                "    assert_eq!(result.get().unwrap(), true);",
                "    assert!(result.get().unwrap() == true);",
                "    assert!(OnceBool::from_usize(NonZeroUsize::new_unchecked(1)));"
              ],
              "code": [
                "{",
                "    let result = OnceBool::to_usize(true);",
                "    assert_eq!(result.get().is_some(), true);",
                "    assert_eq!(result.get().unwrap(), true);",
                "    assert!(result.get().unwrap() == true);",
                "    assert!(OnceBool::from_usize(NonZeroUsize::new_unchecked(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let result = OnceBool::to_usize(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(1));",
                "    assert_ne!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(2));"
              ],
              "code": [
                "{",
                "    let result = OnceBool::to_usize(false);",
                "    assert_eq!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(1));",
                "    assert_ne!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: value at line 201 is false\n"
      ],
      "input_infer": "value: true, false\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = OnceBool::to_usize(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.get(), Some(2));",
                "    assert!(result.is_nonzero());",
                "    assert_eq!(result.get(), Some(2));"
              ],
              "code": [
                "{",
                "    let result = OnceBool::to_usize(false);",
                "    assert_eq!(result.get(), Some(2));",
                "    assert!(result.is_nonzero());",
                "    assert_eq!(result.get(), Some(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = OnceBool::to_usize(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(OnceBool::to_usize(true).get(), NonZeroUsize::new(1).unwrap());",
                "    assert_eq!(OnceBool::to_usize(false).get(), NonZeroUsize::new(2).unwrap());"
              ],
              "code": [
                "{",
                "    let result = OnceBool::to_usize(true);",
                "    assert_eq!(OnceBool::to_usize(true).get(), NonZeroUsize::new(1).unwrap());",
                "    assert_eq!(OnceBool::to_usize(false).get(), NonZeroUsize::new(2).unwrap());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}