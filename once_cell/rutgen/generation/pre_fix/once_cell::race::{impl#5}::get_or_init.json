{
  "name": "once_cell::race::{impl#5}::get_or_init",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:258:5:267:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Err(void) at line 263 is true\n"
      ],
      "input_infer": "self must be a valid OnceRef instance with an uninitialized inner pointer, and f must be a function that returns a reference to a valid T type value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestData {",
                "        value: i32,",
                "    }",
                "",
                "    let once_ref: OnceRef<TestData> = OnceRef::new();",
                "    let value_provider = || {",
                "        let data = TestData { value: 42 };",
                "        &data",
                "    };",
                "",
                "    once_ref.get_or_init(value_provider);",
                "}"
              ],
              "oracle": [
                "    assert!(once_ref.get().is_none());",
                "    let result = once_ref.get_or_try_init(|| Ok::<&TestData, ()>(value_provider()));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(()));"
              ],
              "code": [
                "{",
                "    struct TestData {",
                "        value: i32,",
                "    }",
                "",
                "    let once_ref: OnceRef<TestData> = OnceRef::new();",
                "    let value_provider = || {",
                "        let data = TestData { value: 42 };",
                "        &data",
                "    };",
                "",
                "    once_ref.get_or_init(value_provider);",
                "    assert!(once_ref.get().is_none());",
                "    let result = once_ref.get_or_try_init(|| Ok::<&TestData, ()>(value_provider()));",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err(), Some(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestData {",
                "        value: i32,",
                "    }",
                "",
                "    let once_ref: OnceRef<TestData> = OnceRef::new();",
                "    let initial_data = TestData { value: 100 };",
                "    // Simulating the set function directly to initialize the inner pointer",
                "    let _ = once_ref.set(&initial_data);",
                "",
                "    let value_provider = || {",
                "        let data = TestData { value: 21 };",
                "        &data",
                "    };",
                "",
                "    once_ref.get_or_init(value_provider);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(once_ref.get().unwrap().value, 100);",
                "    assert!(once_ref.get_or_init(value_provider) as *const _ != std::ptr::null());",
                "    assert!(once_ref.get().unwrap().value == 100);",
                "    assert!(once_ref.get().is_some());",
                "    assert!(once_ref.get_or_init(value_provider) as *const _ == once_ref.get().unwrap() as *const _);"
              ],
              "code": [
                "{",
                "    struct TestData {",
                "        value: i32,",
                "    }",
                "",
                "    let once_ref: OnceRef<TestData> = OnceRef::new();",
                "    let initial_data = TestData { value: 100 };",
                "    // Simulating the set function directly to initialize the inner pointer",
                "    let _ = once_ref.set(&initial_data);",
                "",
                "    let value_provider = || {",
                "        let data = TestData { value: 21 };",
                "        &data",
                "    };",
                "",
                "    once_ref.get_or_init(value_provider);",
                "    assert_eq!(once_ref.get().unwrap().value, 100);",
                "    assert!(once_ref.get_or_init(value_provider) as *const _ != std::ptr::null());",
                "    assert!(once_ref.get().unwrap().value == 100);",
                "    assert!(once_ref.get().is_some());",
                "    assert!(once_ref.get_or_init(value_provider) as *const _ == once_ref.get().unwrap() as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Ok(val) at line 263 is true\n",
        "precondition: self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Ok(val) at line 263 is true\n",
        "expected return value/type: val\n"
      ],
      "input_infer": "self is a valid OnceRef instance with non-empty contents, f is a function returning a valid reference to type T, and T does not exceed NonZeroUsize size constraints.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 42 };",
                "        &test_instance",
                "    });",
                "}"
              ],
              "oracle": [
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 42 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 42);"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 42 };",
                "        &test_instance",
                "    });",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 42 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 100 };",
                "        &test_instance",
                "    });",
                "}"
              ],
              "oracle": [
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 100 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 100);",
                "    let reference2: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 200 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference2.value, 100);"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 100 };",
                "        &test_instance",
                "    });",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 100 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 100);",
                "    let reference2: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 200 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference2.value, 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    ",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 75 };",
                "        &test_instance",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert!(once_ref.get().is_none());",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 75 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 75);",
                "    assert!(once_ref.get().is_some());",
                "    assert_eq!(once_ref.get().unwrap().value, 75);"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    ",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: 75 };",
                "        &test_instance",
                "    });",
                "    assert!(once_ref.get().is_none());",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "    let test_instance = TestType { value: 75 };",
                "    &test_instance",
                "    });",
                "    assert_eq!(reference.value, 75);",
                "    assert!(once_ref.get().is_some());",
                "    assert_eq!(once_ref.get().unwrap().value, 75);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestType {",
                "        value: NonZeroUsize,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: NonZeroUsize::new(1).unwrap() };",
                "        &test_instance",
                "    });",
                "}"
              ],
              "oracle": [
                "    reference.value.get() == 1"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        value: NonZeroUsize,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        let test_instance = TestType { value: NonZeroUsize::new(1).unwrap() };",
                "        &test_instance",
                "    });",
                "    reference.value.get() == 1",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        panic!(\"This should panic\");",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert!(once_ref.get_or_try_init(|| Ok::<&TestType, Void>(once_ref.get_or_init(|| &TestType { value: 1 }))).is_ok());",
                "    let reference: &TestType = once_ref.get_or_init(|| &TestType { value: 1 });",
                "    assert_eq!(reference.value, 1);"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        value: u32,",
                "    }",
                "    ",
                "    let once_ref: OnceRef<TestType> = OnceRef::new();",
                "    let reference: &TestType = once_ref.get_or_init(|| {",
                "        panic!(\"This should panic\");",
                "    });",
                "    assert!(once_ref.get_or_try_init(|| Ok::<&TestType, Void>(once_ref.get_or_init(|| &TestType { value: 1 }))).is_ok());",
                "    let reference: &TestType = once_ref.get_or_init(|| &TestType { value: 1 });",
                "    assert_eq!(reference.value, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}