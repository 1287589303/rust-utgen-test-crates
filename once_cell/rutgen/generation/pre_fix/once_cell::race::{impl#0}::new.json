{
  "name": "once_cell::race::{impl#0}::new",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:42:5:44:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: OnceNonZeroUsize { inner: AtomicUsize::new(0) }\n"
      ],
      "input_infer": "Test input conditions or ranges: no input required, invoked to create a new instance which defaults to where inner is initialized to zero.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = OnceNonZeroUsize::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.inner.load(Ordering::SeqCst), 0);"
              ],
              "code": [
                "{",
                "    let instance = OnceNonZeroUsize::new();",
                "    assert_eq!(instance.inner.load(Ordering::SeqCst), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance: OnceNonZeroUsize = Default::default();",
                "}"
              ],
              "oracle": [
                "    let expected: OnceNonZeroUsize = OnceNonZeroUsize { inner: AtomicUsize::new(0) };",
                "    assert_eq!(instance.inner.load(Ordering::SeqCst), expected.inner.load(Ordering::SeqCst));",
                "    assert!(instance.get().is_none());"
              ],
              "code": [
                "{",
                "    let instance: OnceNonZeroUsize = Default::default();",
                "    let expected: OnceNonZeroUsize = OnceNonZeroUsize { inner: AtomicUsize::new(0) };",
                "    assert_eq!(instance.inner.load(Ordering::SeqCst), expected.inner.load(Ordering::SeqCst));",
                "    assert!(instance.get().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}