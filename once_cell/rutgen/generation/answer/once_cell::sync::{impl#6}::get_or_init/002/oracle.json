[
  {
    "uses": [
      "use std::thread;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IntWrapper(i32);",
          "    let cell: OnceCell<IntWrapper> = OnceCell::new();",
          "    let value = cell.get_or_init(|| IntWrapper(42));",
          "}"
        ],
        "oracle": [
          "    let cell: OnceCell<IntWrapper> = OnceCell::new();",
          "    let value = cell.get_or_init(|| IntWrapper(42));",
          "    assert_eq!(value.0, 42);",
          "    let value = cell.get_or_init(|| IntWrapper(99));",
          "    assert_eq!(value.0, 42);",
          "    let value = cell.get_or_init(|| panic!(\"This should not be executed\"));",
          "    assert_eq!(value.0, 42);"
        ],
        "code": [
          "{",
          "    struct IntWrapper(i32);",
          "    let cell: OnceCell<IntWrapper> = OnceCell::new();",
          "    let value = cell.get_or_init(|| IntWrapper(42));",
          "    let cell: OnceCell<IntWrapper> = OnceCell::new();",
          "    let value = cell.get_or_init(|| IntWrapper(42));",
          "    assert_eq!(value.0, 42);",
          "    let value = cell.get_or_init(|| IntWrapper(99));",
          "    assert_eq!(value.0, 42);",
          "    let value = cell.get_or_init(|| panic!(\"This should not be executed\"));",
          "    assert_eq!(value.0, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<u32> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get_or_init(|| 0), &0);",
          "    assert_eq!(cell.get_or_init(|| 1), &0);",
          "    assert_eq!(cell.get_or_init(|| { panic!(\"error\"); }), &0);",
          "    let cell: OnceCell<u32> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 42);",
          "    assert_eq!(value, &42);",
          "    assert_eq!(cell.get_or_init(|| 100), &42);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<u32> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 0);",
          "    assert_eq!(cell.get_or_init(|| 0), &0);",
          "    assert_eq!(cell.get_or_init(|| 1), &0);",
          "    assert_eq!(cell.get_or_init(|| { panic!(\"error\"); }), &0);",
          "    let cell: OnceCell<u32> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 42);",
          "    assert_eq!(value, &42);",
          "    assert_eq!(cell.get_or_init(|| 100), &42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<u64> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 1_000_000_000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get_or_init(|| 1_000_000_000), &1_000_000_000);",
          "    assert_eq!(cell.get_or_init(|| 1_000_000_001), &1_000_000_000);",
          "    assert!(cell.get_or_try_init(|| Ok::<u64, Void>(5)).is_ok());",
          "    assert_eq!(cell.get(), Some(&1_000_000_000));",
          "    assert_eq!(cell.take(), None);",
          "    assert_eq!(cell.get(), Some(&1_000_000_000));",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert!(cell.set(10).is_ok());",
          "    assert_eq!(cell.get(), Some(&10));",
          "    assert!(cell.try_insert(20).is_err());",
          "    assert_eq!(cell.try_insert(10), Err((&10, 10)));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<u64> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 1_000_000_000);",
          "    assert_eq!(cell.get_or_init(|| 1_000_000_000), &1_000_000_000);",
          "    assert_eq!(cell.get_or_init(|| 1_000_000_001), &1_000_000_000);",
          "    assert!(cell.get_or_try_init(|| Ok::<u64, Void>(5)).is_ok());",
          "    assert_eq!(cell.get(), Some(&1_000_000_000));",
          "    assert_eq!(cell.take(), None);",
          "    assert_eq!(cell.get(), Some(&1_000_000_000));",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert!(cell.set(10).is_ok());",
          "    assert_eq!(cell.get(), Some(&10));",
          "    assert!(cell.try_insert(20).is_err());",
          "    assert_eq!(cell.try_insert(10), Err((&10, 10)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 3.14);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get_or_init(|| 3.14), &3.14);",
          "    assert!(cell.get_or_init(|| 3.14) == cell.get_or_init(|| 42.0);",
          "    assert!(cell.get_or_init(|| { panic!() }) == &3.14;"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "    let value = cell.get_or_init(|| 3.14);",
          "    assert_eq!(cell.get_or_init(|| 3.14), &3.14);",
          "    assert!(cell.get_or_init(|| 3.14) == cell.get_or_init(|| 42.0);",
          "    assert!(cell.get_or_init(|| { panic!() }) == &3.14;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::thread;",
          "    ",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    ",
          "    let handles: Vec<_> = (0..10).map(|_| {",
          "        let cell_clone = &cell;",
          "        thread::spawn(move || {",
          "            cell_clone.get_or_init(|| 100);",
          "        })",
          "    }).collect();",
          "    ",
          "    for handle in handles {",
          "        handle.join().unwrap();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get().unwrap(), &100);",
          "    let value = cell.get_or_init(|| 200);",
          "    assert_eq!(value, &100);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut 100);",
          "    let taken_value = cell.take().unwrap();",
          "    assert_eq!(taken_value, 100);",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(cell.into_inner(), None);"
        ],
        "code": [
          "{",
          "    use std::thread;",
          "    ",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    ",
          "    let handles: Vec<_> = (0..10).map(|_| {",
          "        let cell_clone = &cell;",
          "        thread::spawn(move || {",
          "            cell_clone.get_or_init(|| 100);",
          "        })",
          "    }).collect();",
          "    ",
          "    for handle in handles {",
          "        handle.join().unwrap();",
          "    }",
          "    assert_eq!(cell.get().unwrap(), &100);",
          "    let value = cell.get_or_init(|| 200);",
          "    assert_eq!(value, &100);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut 100);",
          "    let taken_value = cell.take().unwrap();",
          "    assert_eq!(taken_value, 100);",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(cell.into_inner(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]