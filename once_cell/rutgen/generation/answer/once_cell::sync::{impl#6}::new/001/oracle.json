[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(mem::size_of_val(&cell), mem::size_of::<OnceCell<TestStruct>>());",
          "    assert!(cell.into_inner().is_none());"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(mem::size_of_val(&cell), mem::size_of::<OnceCell<TestStruct>>());",
          "    assert!(cell.into_inner().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert(42).is_err());",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert_eq!(core::mem::size_of::<OnceCell<i32>>(), core::mem::size_of::<Imp<i32>>() );"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert(42).is_err());",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert_eq!(core::mem::size_of::<OnceCell<i32>>(), core::mem::size_of::<Imp<i32>>() );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);",
          "    assert_eq!(mem::size_of_val(&cell), mem::size_of::<OnceCell<f64>>());",
          "    assert!(unsafe { cell.get_unchecked().is_null() });",
          "    assert!(cell.try_insert(4.2).is_ok());",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert!(cell.take().is_none());",
          "    assert!(cell.set(3.1).is_ok());",
          "    assert_eq!(cell.get(), Some(&3.1));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "    assert_eq!(cell.get(), None);",
          "    assert_eq!(mem::size_of_val(&cell), mem::size_of::<OnceCell<f64>>());",
          "    assert!(unsafe { cell.get_unchecked().is_null() });",
          "    assert!(cell.try_insert(4.2).is_ok());",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.into_inner(), None);",
          "    assert!(cell.take().is_none());",
          "    assert!(cell.set(3.1).is_ok());",
          "    assert_eq!(cell.get(), Some(&3.1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert(\"value\").is_err());",
          "    assert!(cell.take().is_none());",
          "    assert_eq!(cell.into_inner(), None);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert(\"value\").is_err());",
          "    assert!(cell.take().is_none());",
          "    assert_eq!(cell.into_inner(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<(i32, f64)> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell, OnceCell(Imp::new()));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<(i32, f64)> = OnceCell::new();",
          "    assert_eq!(cell, OnceCell(Imp::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<[i32; 3]> = OnceCell::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert([1, 2, 3]).is_err());",
          "    assert!(cell.set([1, 2, 3]).is_ok());",
          "    assert_eq!(cell.get(), Some(&[1, 2, 3]));",
          "    assert_eq!(cell.take(), Some([1, 2, 3]));",
          "    assert_eq!(cell.get(), None);",
          "    let cell_inner = cell.into_inner();",
          "    assert!(cell_inner.is_none());"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<[i32; 3]> = OnceCell::new();",
          "    assert_eq!(cell.get(), None);",
          "    assert!(cell.try_insert([1, 2, 3]).is_err());",
          "    assert!(cell.set([1, 2, 3]).is_ok());",
          "    assert_eq!(cell.get(), Some(&[1, 2, 3]));",
          "    assert_eq!(cell.take(), Some([1, 2, 3]));",
          "    assert_eq!(cell.get(), None);",
          "    let cell_inner = cell.into_inner();",
          "    assert!(cell_inner.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]