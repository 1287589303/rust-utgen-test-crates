[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDebug(i32);",
          "    ",
          "    impl fmt::Debug for TestDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    once_cell.set(Some(TestDebug(42))).unwrap();",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.to_string() == \"Lazy { cell: OnceCell(Initialized(Some(TestDebug(42)))) }\");",
          "    assert!(formatter.to_string().contains(\"Lazy\"));",
          "    assert!(formatter.to_string().contains(\"field: cell\"));",
          "    assert!(formatter.to_string().contains(\"field: init\"));",
          "    assert!(formatter.to_string().contains(\"value: Some(TestDebug(42))\"));",
          "    assert!(formatter.to_string().ends_with(\"}\"));"
        ],
        "code": [
          "{",
          "    struct TestDebug(i32);",
          "    ",
          "    impl fmt::Debug for TestDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    once_cell.set(Some(TestDebug(42))).unwrap();",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "    assert!(formatter.to_string() == \"Lazy { cell: OnceCell(Initialized(Some(TestDebug(42)))) }\");",
          "    assert!(formatter.to_string().contains(\"Lazy\"));",
          "    assert!(formatter.to_string().contains(\"field: cell\"));",
          "    assert!(formatter.to_string().contains(\"field: init\"));",
          "    assert!(formatter.to_string().contains(\"value: Some(TestDebug(42))\"));",
          "    assert!(formatter.to_string().ends_with(\"}\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestDebug(i32);",
          "    ",
          "    impl fmt::Debug for TestDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cell, once_cell);",
          "    assert!(formatter.to_string().contains(\"Lazy\"));",
          "    assert!(formatter.to_string().contains(\"cell\"));",
          "    assert!(formatter.to_string().contains(\"init\"));",
          "    assert!(formatter.to_string().contains(\"..\"));"
        ],
        "code": [
          "{",
          "    struct TestDebug(i32);",
          "    ",
          "    impl fmt::Debug for TestDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "    assert_eq!(lazy.cell, once_cell);",
          "    assert!(formatter.to_string().contains(\"Lazy\"));",
          "    assert!(formatter.to_string().contains(\"cell\"));",
          "    assert!(formatter.to_string().contains(\"init\"));",
          "    assert!(formatter.to_string().contains(\"..\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEmpty;",
          "    ",
          "    impl fmt::Debug for TestEmpty {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestEmpty\")",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"Lazy { cell: OnceCell(..), init: .. }\");",
          "    assert!(formatter.debug_struct(\"Lazy\").field(\"cell\", &lazy.cell).field(\"init\", &\"..\").finish().is_ok());",
          "    assert!(formatter.debug_struct(\"Lazy\").field(\"cell\", &lazy.cell).finish().is_ok());",
          "    assert!(formatter.debug_struct(\"Lazy\").finish().is_ok());",
          "    assert!(lazy.cell.0.inner.get().is_none());",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    struct TestEmpty;",
          "    ",
          "    impl fmt::Debug for TestEmpty {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestEmpty\")",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"Lazy { cell: OnceCell(..), init: .. }\");",
          "    assert!(formatter.debug_struct(\"Lazy\").field(\"cell\", &lazy.cell).field(\"init\", &\"..\").finish().is_ok());",
          "    assert!(formatter.debug_struct(\"Lazy\").field(\"cell\", &lazy.cell).finish().is_ok());",
          "    assert!(formatter.debug_struct(\"Lazy\").finish().is_ok());",
          "    assert!(lazy.cell.0.inner.get().is_none());",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherDebug(String);",
          "    ",
          "    impl fmt::Debug for AnotherDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    once_cell.set(Some(AnotherDebug(\"Hello\".to_string()))).unwrap();",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    lazy.fmt(&mut formatter).is_ok();",
          "    formatter.to_string().contains(\"Lazy\");",
          "    formatter.to_string().contains(\"cell\");",
          "    formatter.to_string().contains(\"AnotherDebug\");",
          "    formatter.to_string().contains(\"Hello\");",
          "    lazy.cell.value.get().is_some();",
          "    lazy.cell.value.get().unwrap().is::<AnotherDebug>();"
        ],
        "code": [
          "{",
          "    struct AnotherDebug(String);",
          "    ",
          "    impl fmt::Debug for AnotherDebug {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherDebug({})\", self.0)",
          "        }",
          "    }",
          "    ",
          "    let once_cell = OnceCell(Imp::new());",
          "    once_cell.set(Some(AnotherDebug(\"Hello\".to_string()))).unwrap();",
          "    let lazy = Lazy { cell: once_cell, init: Cell::new(None) };",
          "    let mut formatter = fmt::Formatter::new();",
          "    ",
          "    lazy.fmt(&mut formatter);",
          "    lazy.fmt(&mut formatter).is_ok();",
          "    formatter.to_string().contains(\"Lazy\");",
          "    formatter.to_string().contains(\"cell\");",
          "    formatter.to_string().contains(\"AnotherDebug\");",
          "    formatter.to_string().contains(\"Hello\");",
          "    lazy.cell.value.get().is_some();",
          "    lazy.cell.value.get().unwrap().is::<AnotherDebug>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]