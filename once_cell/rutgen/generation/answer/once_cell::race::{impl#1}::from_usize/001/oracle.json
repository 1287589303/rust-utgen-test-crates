[
  {
    "uses": [
      "use core::num::NonZeroUsize;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "    ",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let value_zero = NonZeroUsize::new(2).unwrap();",
          "    let result_zero = OnceBool::from_usize(value_zero);",
          "    assert_eq!(result_zero, false);",
          "    let value_large = NonZeroUsize::new(10).unwrap();",
          "    let result_large = OnceBool::from_usize(value_large);",
          "    assert_eq!(result_large, false);",
          "    let value_min = NonZeroUsize::new(1).unwrap();",
          "    let result_min = OnceBool::from_usize(value_min);",
          "    assert_eq!(result_min, true);"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "    ",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "    assert_eq!(result, true);",
          "    let value_zero = NonZeroUsize::new(2).unwrap();",
          "    let result_zero = OnceBool::from_usize(value_zero);",
          "    assert_eq!(result_zero, false);",
          "    let value_large = NonZeroUsize::new(10).unwrap();",
          "    let result_large = OnceBool::from_usize(value_large);",
          "    assert_eq!(result_large, false);",
          "    let value_min = NonZeroUsize::new(1).unwrap();",
          "    let result_min = OnceBool::from_usize(value_min);",
          "    assert_eq!(result_min, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let value = NonZeroUsize::new(2).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "    assert_eq!(result, true);",
          "    let value = NonZeroUsize::new(0).unwrap_err();"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let value = NonZeroUsize::new(2).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "    assert_eq!(result, false);",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "    assert_eq!(result, true);",
          "    let value = NonZeroUsize::new(0).unwrap_err();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(1).unwrap()), true);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(2).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(usize::MAX).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(3).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(0).unwrap()), false);"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    let result = OnceBool::from_usize(value);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(1).unwrap()), true);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(2).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(usize::MAX).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(3).unwrap()), false);",
          "    assert_eq!(OnceBool::from_usize(NonZeroUsize::new(0).unwrap()), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]