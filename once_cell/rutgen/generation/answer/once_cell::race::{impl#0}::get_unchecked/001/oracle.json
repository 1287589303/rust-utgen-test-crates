[
  {
    "uses": [
      "use core::num::NonZeroUsize;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.set(value).unwrap();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "}"
        ],
        "oracle": [
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.set(value).unwrap();",
          "    let result = unsafe { once.get_unchecked() };",
          "    assert_eq!(result.get(), Some(NonZeroUsize::new(1).unwrap()));"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.set(value).unwrap();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.set(value).unwrap();",
          "    let result = unsafe { once.get_unchecked() };",
          "    assert_eq!(result.get(), Some(NonZeroUsize::new(1).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let once = OnceNonZeroUsize::new();",
          "    unsafe {",
          "    let _result = once.get_unchecked();",
          "    }",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let once = OnceNonZeroUsize::new();",
          "    unsafe {",
          "    let _result = once.get_unchecked();",
          "    }",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    once.set(value).unwrap();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(once.get().is_none(), true);",
          "    once.set(value).unwrap();",
          "    assert_eq!(once.get().is_some(), true);",
          "    let result = unsafe { once.get_unchecked() };",
          "    assert_eq!(result.get(), usize::MAX);",
          "    assert!(once.inner.load(Ordering::SeqCst) != 0);",
          "    let non_zero_result = unsafe { once.get_unchecked() };",
          "    assert!(non_zero_result.get() != 0);",
          "    assert!(unsafe { once.get_unchecked() }.get() <= usize::MAX);",
          "    assert!(once.inner.load(Ordering::SeqCst) != usize::MAX);"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    once.set(value).unwrap();",
          "",
          "    unsafe {",
          "        let _result = once.get_unchecked();",
          "    }",
          "    assert_eq!(once.get().is_none(), true);",
          "    once.set(value).unwrap();",
          "    assert_eq!(once.get().is_some(), true);",
          "    let result = unsafe { once.get_unchecked() };",
          "    assert_eq!(result.get(), usize::MAX);",
          "    assert!(once.inner.load(Ordering::SeqCst) != 0);",
          "    let non_zero_result = unsafe { once.get_unchecked() };",
          "    assert!(non_zero_result.get() != 0);",
          "    assert!(unsafe { once.get_unchecked() }.get() <= usize::MAX);",
          "    assert!(once.inner.load(Ordering::SeqCst) != usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]