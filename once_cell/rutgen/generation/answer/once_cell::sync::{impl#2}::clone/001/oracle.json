[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    impl Clone for TestValue {",
          "        fn clone(&self) -> Self {",
          "            TestValue { data: self.data }",
          "        }",
          "    }",
          "",
          "    let original = OnceCell::with_value(TestValue { data: 42 });",
          "    let cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original.get().unwrap().data, cloned.get().unwrap().data);",
          "    assert_ne!(original as *const _, cloned as *const _);",
          "    assert!(cloned.get().is_some());",
          "    assert!(original.get().is_some());",
          "    assert_eq!(original.get(), cloned.get());"
        ],
        "code": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "    impl Clone for TestValue {",
          "        fn clone(&self) -> Self {",
          "            TestValue { data: self.data }",
          "        }",
          "    }",
          "",
          "    let original = OnceCell::with_value(TestValue { data: 42 });",
          "    let cloned = original.clone();",
          "    assert_eq!(original.get().unwrap().data, cloned.get().unwrap().data);",
          "    assert_ne!(original as *const _, cloned as *const _);",
          "    assert!(cloned.get().is_some());",
          "    assert!(original.get().is_some());",
          "    assert_eq!(original.get(), cloned.get());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = OnceCell::with_value(\"Hello\".to_string());",
          "    let cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(original.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cloned.get(), Some(&\"Hello\".to_string()));",
          "    assert_ne!(&original as *const _, &cloned as *const _);",
          "    assert_eq!(original.get().unwrap().clone(), cloned.get().unwrap().clone());"
        ],
        "code": [
          "{",
          "    let original = OnceCell::with_value(\"Hello\".to_string());",
          "    let cloned = original.clone();",
          "    assert_eq!(original.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cloned.get(), Some(&\"Hello\".to_string()));",
          "    assert_ne!(&original as *const _, &cloned as *const _);",
          "    assert_eq!(original.get().unwrap().clone(), cloned.get().unwrap().clone());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let original = OnceCell::with_value(vec![1, 2, 3]);",
          "    let cloned = original.clone();",
          "}"
        ],
        "oracle": [
          "    let original = OnceCell::with_value(vec![1, 2, 3]);",
          "    let cloned = original.clone();",
          "    assert!(cloned.get().is_some());",
          "    assert_eq!(cloned.get().unwrap(), &vec![1, 2, 3]);",
          "    assert_ne!(cloned as *const _, original as *const _);"
        ],
        "code": [
          "{",
          "    let original = OnceCell::with_value(vec![1, 2, 3]);",
          "    let cloned = original.clone();",
          "    let original = OnceCell::with_value(vec![1, 2, 3]);",
          "    let cloned = original.clone();",
          "    assert!(cloned.get().is_some());",
          "    assert_eq!(cloned.get().unwrap(), &vec![1, 2, 3]);",
          "    assert_ne!(cloned as *const _, original as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]