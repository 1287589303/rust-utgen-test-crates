[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_ne!(cell as *const _, cloned_cell as *const _);",
          "    assert!(std::mem::size_of_val(&cell) == std::mem::size_of_val(&cloned_cell));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_ne!(cell as *const _, cloned_cell as *const _);",
          "    assert!(std::mem::size_of_val(&cell) == std::mem::size_of_val(&cloned_cell));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_eq!(cloned_cell, OnceCell::new());",
          "    assert_ne!(&cell as *const _, &cloned_cell as *const _);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_eq!(cloned_cell, OnceCell::new());",
          "    assert_ne!(&cell as *const _, &cloned_cell as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_eq!(cell.clone() as *const _, cloned_cell as *const _);",
          "    assert_ne!(cell as *const _, cloned_cell as *const _);",
          "    let cloned_value = TestStruct { value: 0 };",
          "    let cloned_cell_with_value = OnceCell::with_value(cloned_value.clone());",
          "    assert!(cloned_cell_with_value.get().is_some());",
          "    assert_eq!(cloned_cell_with_value.get().unwrap().value, cloned_value.value);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "    let cell: OnceCell<TestStruct> = OnceCell::new();",
          "    let cloned_cell = cell.clone();",
          "    assert!(cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_eq!(cell.clone() as *const _, cloned_cell as *const _);",
          "    assert_ne!(cell as *const _, cloned_cell as *const _);",
          "    let cloned_value = TestStruct { value: 0 };",
          "    let cloned_cell_with_value = OnceCell::with_value(cloned_value.clone());",
          "    assert!(cloned_cell_with_value.get().is_some());",
          "    assert_eq!(cloned_cell_with_value.get().unwrap().value, cloned_value.value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]