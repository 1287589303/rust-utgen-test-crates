[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result = OnceBool::to_usize(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.get().is_some(), true);",
          "    assert_eq!(result.get().unwrap(), true);",
          "    assert!(result.get().unwrap() == true);",
          "    assert!(OnceBool::from_usize(NonZeroUsize::new_unchecked(1)));"
        ],
        "code": [
          "{",
          "    let result = OnceBool::to_usize(true);",
          "    assert_eq!(result.get().is_some(), true);",
          "    assert_eq!(result.get().unwrap(), true);",
          "    assert!(result.get().unwrap() == true);",
          "    assert!(OnceBool::from_usize(NonZeroUsize::new_unchecked(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let result = OnceBool::to_usize(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(1));",
          "    assert_ne!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(2));"
        ],
        "code": [
          "{",
          "    let result = OnceBool::to_usize(false);",
          "    assert_eq!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(1));",
          "    assert_ne!(OnceBool::to_usize(true), NonZeroUsize::new_unchecked(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]