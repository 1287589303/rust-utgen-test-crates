[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 42 };",
          "        &test_instance",
          "    });",
          "}"
        ],
        "oracle": [
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 42 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 42);"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 42 };",
          "        &test_instance",
          "    });",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 42 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 100 };",
          "        &test_instance",
          "    });",
          "}"
        ],
        "oracle": [
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 100 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 100);",
          "    let reference2: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 200 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference2.value, 100);"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 100 };",
          "        &test_instance",
          "    });",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 100 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 100);",
          "    let reference2: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 200 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference2.value, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    ",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 75 };",
          "        &test_instance",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(once_ref.get().is_none());",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 75 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 75);",
          "    assert!(once_ref.get().is_some());",
          "    assert_eq!(once_ref.get().unwrap().value, 75);"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    ",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: 75 };",
          "        &test_instance",
          "    });",
          "    assert!(once_ref.get().is_none());",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "    let test_instance = TestType { value: 75 };",
          "    &test_instance",
          "    });",
          "    assert_eq!(reference.value, 75);",
          "    assert!(once_ref.get().is_some());",
          "    assert_eq!(once_ref.get().unwrap().value, 75);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType {",
          "        value: NonZeroUsize,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: NonZeroUsize::new(1).unwrap() };",
          "        &test_instance",
          "    });",
          "}"
        ],
        "oracle": [
          "    reference.value.get() == 1"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        value: NonZeroUsize,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        let test_instance = TestType { value: NonZeroUsize::new(1).unwrap() };",
          "        &test_instance",
          "    });",
          "    reference.value.get() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        panic!(\"This should panic\");",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(once_ref.get_or_try_init(|| Ok::<&TestType, Void>(once_ref.get_or_init(|| &TestType { value: 1 }))).is_ok());",
          "    let reference: &TestType = once_ref.get_or_init(|| &TestType { value: 1 });",
          "    assert_eq!(reference.value, 1);"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        value: u32,",
          "    }",
          "    ",
          "    let once_ref: OnceRef<TestType> = OnceRef::new();",
          "    let reference: &TestType = once_ref.get_or_init(|| {",
          "        panic!(\"This should panic\");",
          "    });",
          "    assert!(once_ref.get_or_try_init(|| Ok::<&TestType, Void>(once_ref.get_or_init(|| &TestType { value: 1 }))).is_ok());",
          "    let reference: &TestType = once_ref.get_or_init(|| &TestType { value: 1 });",
          "    assert_eq!(reference.value, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]