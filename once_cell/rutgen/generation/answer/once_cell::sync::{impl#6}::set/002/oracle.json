[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(42));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(42));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let _ = cell.set(TestCell(42));",
          "    let result = cell.set(TestCell(84));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.set(TestCell(42)), Ok(()));",
          "    assert_eq!(cell.get(), Some(&TestCell(42)));",
          "    assert_eq!(cell.set(TestCell(84)), Err(TestCell(84)));"
        ],
        "code": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let _ = cell.set(TestCell(42));",
          "    let result = cell.set(TestCell(84));",
          "    assert_eq!(cell.set(TestCell(42)), Ok(()));",
          "    assert_eq!(cell.get(), Some(&TestCell(42)));",
          "    assert_eq!(cell.set(TestCell(84)), Err(TestCell(84)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(cell.get().is_some());"
        ],
        "code": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(0));",
          "    assert_eq!(result, Ok(()));",
          "    assert!(cell.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(-1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(-1));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(i32::MAX));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    struct TestCell(i32);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(i32::MAX));",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestCell(String);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(String::from(\"test\")));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap(), &TestCell(String::from(\"test\")));"
        ],
        "code": [
          "{",
          "    struct TestCell(String);",
          "    let cell = OnceCell::new();",
          "    let result = cell.set(TestCell(String::from(\"test\")));",
          "    assert_eq!(result, Ok(()));",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap(), &TestCell(String::from(\"test\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]