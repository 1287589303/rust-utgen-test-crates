[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3: OnceCell<i32> = OnceCell::with_value(10);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    cell1.set(10).unwrap();",
          "    assert_eq!(cell1.eq(&cell3), true);"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3: OnceCell<i32> = OnceCell::with_value(10);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    cell1.set(10).unwrap();",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3 = OnceCell::with_value(13);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    let cell5 = OnceCell::with_value(42);",
          "    cell5.set(100).unwrap();",
          "    assert_eq!(cell1.eq(&cell5), false);"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3 = OnceCell::with_value(13);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    let cell5 = OnceCell::with_value(42);",
          "    cell5.set(100).unwrap();",
          "    assert_eq!(cell1.eq(&cell5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(43);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(!cell1.eq(&cell2));"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(43);",
          "    cell1.eq(&cell2);",
          "    assert!(!cell1.eq(&cell2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3: OnceCell<i32> = OnceCell::with_value(42);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    cell1.set(42).unwrap();",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    assert_eq!(cell1.eq(&cell3), true);"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3: OnceCell<i32> = OnceCell::with_value(42);",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    cell1.set(42).unwrap();",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.get(), Some(&42));",
          "    assert_eq!(cell2.get(), None);",
          "    assert!(cell1.eq(&cell2) == false);",
          "    let cell3 = OnceCell::with_value(42);",
          "    assert!(cell1.eq(&cell3) == true);"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.get(), Some(&42));",
          "    assert_eq!(cell2.get(), None);",
          "    assert!(cell1.eq(&cell2) == false);",
          "    let cell3 = OnceCell::with_value(42);",
          "    assert!(cell1.eq(&cell3) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<String> = OnceCell::new();",
          "    let cell2: OnceCell<String> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    assert_eq!(cell1.get(), None);",
          "    assert_eq!(cell2.get(), None);",
          "    let cell3 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell4 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell3.eq(&cell4), true);",
          "    assert_eq!(cell3.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell4.get(), Some(&\"Hello\".to_string()));",
          "    let cell5 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell6 = OnceCell::with_value(\"World\".to_string());",
          "    assert_eq!(cell5.eq(&cell6), false);",
          "    assert_eq!(cell5.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell6.get(), Some(&\"World\".to_string()));"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<String> = OnceCell::new();",
          "    let cell2: OnceCell<String> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    assert_eq!(cell1.get(), None);",
          "    assert_eq!(cell2.get(), None);",
          "    let cell3 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell4 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell3.eq(&cell4), true);",
          "    assert_eq!(cell3.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell4.get(), Some(&\"Hello\".to_string()));",
          "    let cell5 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell6 = OnceCell::with_value(\"World\".to_string());",
          "    assert_eq!(cell5.eq(&cell6), false);",
          "    assert_eq!(cell5.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell6.get(), Some(&\"World\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2 = OnceCell::with_value(\"Hello\".to_string());",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3 = OnceCell::with_value(\"World\".to_string());",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    let cell5 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell1.eq(&cell5), true);"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2 = OnceCell::with_value(\"Hello\".to_string());",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), true);",
          "    let cell3 = OnceCell::with_value(\"World\".to_string());",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    let cell5 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell1.eq(&cell5), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2 = OnceCell::with_value(\"World\".to_string());",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell2.get(), Some(&\"World\".to_string()));",
          "    assert!(!cell1.eq(&cell2));",
          "    let cell3 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert!(cell1.eq(&cell3));"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2 = OnceCell::with_value(\"World\".to_string());",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.get(), Some(&\"Hello\".to_string()));",
          "    assert_eq!(cell2.get(), Some(&\"World\".to_string()));",
          "    assert!(!cell1.eq(&cell2));",
          "    let cell3 = OnceCell::with_value(\"Hello\".to_string());",
          "    assert!(cell1.eq(&cell3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<String> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(\"Hello\".to_string());",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3: OnceCell<String> = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    assert_eq!(cell2.eq(&cell3), true);"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<String> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(\"Hello\".to_string());",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3: OnceCell<String> = OnceCell::with_value(\"Hello\".to_string());",
          "    assert_eq!(cell1.eq(&cell3), false);",
          "    assert_eq!(cell2.eq(&cell3), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2: OnceCell<String> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(!cell1.eq(&cell2));"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\".to_string());",
          "    let cell2: OnceCell<String> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert!(!cell1.eq(&cell2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]