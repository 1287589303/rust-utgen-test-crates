[
  {
    "uses": [
      "use std::ptr::null_mut;",
      "use std::sync::atomic::AtomicPtr;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::sync::atomic::AtomicPtr;",
          "    use std::ptr::null_mut;",
          "",
          "    let null_ptr: AtomicPtr<i32> = AtomicPtr::new(null_mut());",
          "    let once_box = OnceBox {",
          "        inner: null_ptr,",
          "        ghost: PhantomData,",
          "    };",
          "",
          "    // Calling drop method",
          "    drop(once_box);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(once_box.inner.load(Ordering::SeqCst), null_mut());",
          "    assert!(!once_box.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(std::mem::size_of::<OnceBox<i32>>(), std::mem::size_of::<AtomicPtr<i32>>() + std::mem::size_of::<PhantomData<Option<Box<i32>>>>());",
          "    assert_eq!(once_box.inner.load(Ordering::SeqCst) as usize, null_mut() as usize);",
          "    assert!(std::panic::catch_unwind(|| drop(once_box)).is_ok());"
        ],
        "code": [
          "{",
          "    use std::sync::atomic::AtomicPtr;",
          "    use std::ptr::null_mut;",
          "",
          "    let null_ptr: AtomicPtr<i32> = AtomicPtr::new(null_mut());",
          "    let once_box = OnceBox {",
          "        inner: null_ptr,",
          "        ghost: PhantomData,",
          "    };",
          "",
          "    // Calling drop method",
          "    drop(once_box);",
          "    assert_eq!(once_box.inner.load(Ordering::SeqCst), null_mut());",
          "    assert!(!once_box.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(std::mem::size_of::<OnceBox<i32>>(), std::mem::size_of::<AtomicPtr<i32>>() + std::mem::size_of::<PhantomData<Option<Box<i32>>>>());",
          "    assert_eq!(once_box.inner.load(Ordering::SeqCst) as usize, null_mut() as usize);",
          "    assert!(std::panic::catch_unwind(|| drop(once_box)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]