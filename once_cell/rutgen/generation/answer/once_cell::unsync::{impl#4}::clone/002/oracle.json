[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_cell.get(), None);",
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert!(once_cell.get() == cloned_cell.get());",
          "    assert!(once_cell.get() != Some(&42));",
          "    assert!(cloned_cell.get() != Some(&42));"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "    assert_eq!(cloned_cell.get(), None);",
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert!(once_cell.get() == cloned_cell.get());",
          "    assert!(once_cell.get() != Some(&42));",
          "    assert!(cloned_cell.get() != Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<String> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_ne!(once_cell as *const _, cloned_cell as *const _);"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<String> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "    assert_ne!(once_cell as *const _, cloned_cell as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<f64> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<f64> = OnceCell::new();",
          "    let cloned_cell = once_cell.clone();",
          "    assert!(once_cell.get().is_none());",
          "    assert!(cloned_cell.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]