[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: OnceRef<i32> = OnceRef::new();",
          "}"
        ],
        "oracle": [
          "    let once_ref: OnceRef<i32> = OnceRef::new();",
          "    assert!(once_ref.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(once_ref.ghost, PhantomData);"
        ],
        "code": [
          "{",
          "    let _: OnceRef<i32> = OnceRef::new();",
          "    let once_ref: OnceRef<i32> = OnceRef::new();",
          "    assert!(once_ref.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(once_ref.ghost, PhantomData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: OnceRef<String> = OnceRef::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert!(std::mem::size_of::<OnceRef<String>>() > 0);",
          "    assert!(std::mem::align_of::<OnceRef<String>>() > 0);",
          "    assert!(std::intrinsics:: unlikely(OnceRef::new().ghost.is_null()));"
        ],
        "code": [
          "{",
          "    let _: OnceRef<String> = OnceRef::new();",
          "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert!(std::mem::size_of::<OnceRef<String>>() > 0);",
          "    assert!(std::mem::align_of::<OnceRef<String>>() > 0);",
          "    assert!(std::intrinsics:: unlikely(OnceRef::new().ghost.is_null()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: OnceRef<f64> = OnceRef::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert!(!OnceRef::new().ghost.is_null());"
        ],
        "code": [
          "{",
          "    let _: OnceRef<f64> = OnceRef::new();",
          "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
          "    assert!(!OnceRef::new().ghost.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let _: OnceRef<MyStruct> = OnceRef::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(OnceRef::new().inner.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert!(OnceRef::new().ghost as *const _ != core::ptr::null());",
          "    let instance: OnceRef<MyStruct> = OnceRef::new();",
          "    assert_eq!(instance.inner.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert!(instance.ghost as *const _ != core::ptr::null());"
        ],
        "code": [
          "{",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let _: OnceRef<MyStruct> = OnceRef::new();",
          "    assert_eq!(OnceRef::new().inner.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert!(OnceRef::new().ghost as *const _ != core::ptr::null());",
          "    let instance: OnceRef<MyStruct> = OnceRef::new();",
          "    assert_eq!(instance.inner.load(Ordering::Relaxed), ptr::null_mut());",
          "    assert!(instance.ghost as *const _ != core::ptr::null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]