[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<i32> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_ok(), true);",
          "    assert_eq!(value.unwrap(), 0);",
          "    assert!(lazy.cell.inner.get().is_null());",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.init.get().is_some(), false);"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<i32> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "    assert_eq!(value.is_ok(), true);",
          "    assert_eq!(value.unwrap(), 0);",
          "    assert!(lazy.cell.inner.get().is_null());",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.init.get().is_some(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<String> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Ok(String::default()));",
          "    assert!(lazy.cell.inner.get().is_null());",
          "    assert!(lazy.init.get().is_some());",
          "    assert!(lazy.init.get().unwrap() == &Lazy::<String>::default().init.get().unwrap());",
          "    assert_eq!(value.unwrap(), String::default());",
          "    assert!(matches!(value, Ok(_)));",
          "    assert!(lazy.cell.inner.get().is_null());"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<String> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "    assert_eq!(value, Ok(String::default()));",
          "    assert!(lazy.cell.inner.get().is_null());",
          "    assert!(lazy.init.get().is_some());",
          "    assert!(lazy.init.get().unwrap() == &Lazy::<String>::default().init.get().unwrap());",
          "    assert_eq!(value.unwrap(), String::default());",
          "    assert!(matches!(value, Ok(_)));",
          "    assert!(lazy.cell.inner.get().is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct UserType {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Default for UserType {",
          "        fn default() -> Self {",
          "            UserType { data: 0 }",
          "        }",
          "    }",
          "",
          "    let lazy: Lazy<UserType> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, Ok(UserType { data: 0 }));",
          "    assert!(lazy.cell.is_initialized());",
          "    assert_eq!(lazy.init.get(), None);",
          "    assert!(std::mem::size_of_val(&lazy) > 0);",
          "    assert!(lazy.cell.get().is_some());"
        ],
        "code": [
          "{",
          "    struct UserType {",
          "        data: i32,",
          "    }",
          "    ",
          "    impl Default for UserType {",
          "        fn default() -> Self {",
          "            UserType { data: 0 }",
          "        }",
          "    }",
          "",
          "    let lazy: Lazy<UserType> = Lazy::default();",
          "    let value = Lazy::into_value(lazy);",
          "    assert_eq!(value, Ok(UserType { data: 0 }));",
          "    assert!(lazy.cell.is_initialized());",
          "    assert_eq!(lazy.init.get(), None);",
          "    assert!(std::mem::size_of_val(&lazy) > 0);",
          "    assert!(lazy.cell.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]