[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::default();",
          "    let _ = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::default();",
          "    let _ = cell.get();",
          "    assert_eq!(cell.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<bool> = OnceCell::default();",
          "    let _ = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<bool> = OnceCell::default();",
          "    let _ = cell.get();",
          "    assert_eq!(cell.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<&str> = OnceCell::default();",
          "    let _ = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<&str> = OnceCell::default();",
          "    let _ = cell.get();",
          "    assert_eq!(cell.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomStruct {",
          "        value: i32,",
          "    }",
          "",
          "    let cell: OnceCell<CustomStruct> = OnceCell::default();",
          "    let _ = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    let cell_1: OnceCell<CustomStruct> = OnceCell::default();",
          "    let cell_2: OnceCell<CustomStruct> = OnceCell::new();",
          "    assert_eq!(cell_1.get(), cell_2.get());",
          "    let custom_value = CustomStruct { value: 42 };",
          "    let result = cell_1.set(custom_value.clone());",
          "    assert!(result.is_ok());",
          "    assert_eq!(cell_1.get().unwrap().value, custom_value.value);",
          "    let result = cell_1.get_mut();",
          "    assert!(result.is_some());",
          "    let result_mut = result.unwrap();",
          "    result_mut.value = 100;",
          "    assert_eq!(cell_1.get().unwrap().value, 100);",
          "    let taken_value = cell_1.take();",
          "    assert!(taken_value.is_some());",
          "    assert_eq!(taken_value.unwrap().value, 100);",
          "    assert!(cell_1.get().is_none());",
          "    let cell_inner = cell_1.into_inner();",
          "    assert!(cell_inner.is_none());",
          "    let default_cell: OnceCell<i32> = OnceCell::default();",
          "    assert!(default_cell.get().is_none());"
        ],
        "code": [
          "{",
          "    struct CustomStruct {",
          "        value: i32,",
          "    }",
          "",
          "    let cell: OnceCell<CustomStruct> = OnceCell::default();",
          "    let _ = cell.get();",
          "    assert!(cell.get().is_none());",
          "    let cell_1: OnceCell<CustomStruct> = OnceCell::default();",
          "    let cell_2: OnceCell<CustomStruct> = OnceCell::new();",
          "    assert_eq!(cell_1.get(), cell_2.get());",
          "    let custom_value = CustomStruct { value: 42 };",
          "    let result = cell_1.set(custom_value.clone());",
          "    assert!(result.is_ok());",
          "    assert_eq!(cell_1.get().unwrap().value, custom_value.value);",
          "    let result = cell_1.get_mut();",
          "    assert!(result.is_some());",
          "    let result_mut = result.unwrap();",
          "    result_mut.value = 100;",
          "    assert_eq!(cell_1.get().unwrap().value, 100);",
          "    let taken_value = cell_1.take();",
          "    assert!(taken_value.is_some());",
          "    assert_eq!(taken_value.unwrap().value, 100);",
          "    assert!(cell_1.get().is_none());",
          "    let cell_inner = cell_1.into_inner();",
          "    assert!(cell_inner.is_none());",
          "    let default_cell: OnceCell<i32> = OnceCell::default();",
          "    assert!(default_cell.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]