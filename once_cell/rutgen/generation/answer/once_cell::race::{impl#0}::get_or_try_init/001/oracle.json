[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(1))",
          "}"
        ],
        "oracle": [
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    assert_eq!(result, Ok(value));"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(1))",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(1).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    assert_eq!(result, Ok(value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(5).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(5))",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(NonZeroUsize::new(5)));",
          "    assert!(result.is_ok());",
          "    assert!(match result { Ok(v) if v.get() == 5 => true, _ => false });",
          "    assert!(once.get_or_try_init(|| Err(())).is_ok());"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(5).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(5))",
          "    assert_eq!(result, Ok(NonZeroUsize::new(5)));",
          "    assert!(result.is_ok());",
          "    assert!(match result { Ok(v) if v.get() == 5 => true, _ => false });",
          "    assert!(once.get_or_try_init(|| Err(())).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(usize::MAX))",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(value));"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let value = NonZeroUsize::new(usize::MAX).unwrap();",
          "    once.inner.store(value.get(), Ordering::Release);",
          "    ",
          "    let result = once.get_or_try_init(|| Err(()));",
          "    let _ = result.unwrap(); // Should return Ok(NonZeroUsize::new(usize::MAX))",
          "    assert_eq!(result, Ok(value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]