[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "        Ok(NonZeroUsize::new(1).unwrap())",
          "    });",
          "    let _ = result; // Consume the result",
          "}"
        ],
        "oracle": [
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "    Ok(NonZeroUsize::new(1).unwrap())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), NonZeroUsize::new(1).unwrap());"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "        Ok(NonZeroUsize::new(1).unwrap())",
          "    });",
          "    let _ = result; // Consume the result",
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "    Ok(NonZeroUsize::new(1).unwrap())",
          "    });",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), NonZeroUsize::new(1).unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "        Err(\"error\")",
          "    });",
          "    let _ = result; // Consume the result",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err() == \"error\");",
          "    assert_eq!(once.inner.load(Ordering::Acquire), 0);",
          "    assert_eq!(once.get(), None);"
        ],
        "code": [
          "{",
          "    let once = OnceNonZeroUsize::new();",
          "    let result = once.get_or_try_init(|| {",
          "        Err(\"error\")",
          "    });",
          "    let _ = result; // Consume the result",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(result.unwrap_err() == \"error\");",
          "    assert_eq!(once.inner.load(Ordering::Acquire), 0);",
          "    assert_eq!(once.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]