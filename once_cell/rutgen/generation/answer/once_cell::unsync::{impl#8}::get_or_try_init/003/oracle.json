[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestOnceCell {",
          "        once_cell: OnceCell<i32>,",
          "    }",
          "",
          "    impl TestOnceCell {",
          "        fn new() -> Self {",
          "            TestOnceCell {",
          "                once_cell: OnceCell::new(),",
          "            }",
          "        }",
          "        ",
          "        fn initialize(&mut self) {",
          "            let _ = self.once_cell.set(92);",
          "        }",
          "    }",
          "",
          "    let mut test_cell = TestOnceCell::new();",
          "    test_cell.initialize();",
          "    ",
          "    let result = test_cell.once_cell.get_or_try_init(|| Ok(100));",
          "    let _ = result.unwrap();",
          "    ",
          "    let set_result = test_cell.once_cell.set(200);",
          "    let _ = set_result.unwrap_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(test_cell.once_cell.get_or_try_init(|| Ok(100)), Ok(&92));",
          "    assert!(test_cell.once_cell.get().is_some());",
          "    assert_eq!(test_cell.once_cell.get(), Some(&92));",
          "    assert!(test_cell.once_cell.set(200).is_err());"
        ],
        "code": [
          "{",
          "    struct TestOnceCell {",
          "        once_cell: OnceCell<i32>,",
          "    }",
          "",
          "    impl TestOnceCell {",
          "        fn new() -> Self {",
          "            TestOnceCell {",
          "                once_cell: OnceCell::new(),",
          "            }",
          "        }",
          "        ",
          "        fn initialize(&mut self) {",
          "            let _ = self.once_cell.set(92);",
          "        }",
          "    }",
          "",
          "    let mut test_cell = TestOnceCell::new();",
          "    test_cell.initialize();",
          "    ",
          "    let result = test_cell.once_cell.get_or_try_init(|| Ok(100));",
          "    let _ = result.unwrap();",
          "    ",
          "    let set_result = test_cell.once_cell.set(200);",
          "    let _ = set_result.unwrap_err();",
          "    assert_eq!(test_cell.once_cell.get_or_try_init(|| Ok(100)), Ok(&92));",
          "    assert!(test_cell.once_cell.get().is_some());",
          "    assert_eq!(test_cell.once_cell.get(), Some(&92));",
          "    assert!(test_cell.once_cell.set(200).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]