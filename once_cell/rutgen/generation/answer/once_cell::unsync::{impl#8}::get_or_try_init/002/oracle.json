[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidValue(i32);",
          "    ",
          "    let cell = OnceCell::with_value(ValidValue(42));",
          "    ",
          "    let result = cell.get_or_try_init(|| Ok(ValidValue(100)));",
          "    let _ = result.unwrap(); // to ensure we are getting the value",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &ValidValue(100));",
          "    assert_eq!(cell.get(), Some(&ValidValue(100)));"
        ],
        "code": [
          "{",
          "    struct ValidValue(i32);",
          "    ",
          "    let cell = OnceCell::with_value(ValidValue(42));",
          "    ",
          "    let result = cell.get_or_try_init(|| Ok(ValidValue(100)));",
          "    let _ = result.unwrap(); // to ensure we are getting the value",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &ValidValue(100));",
          "    assert_eq!(cell.get(), Some(&ValidValue(100)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidValue(i32);",
          "    ",
          "    let cell = OnceCell::with_value(ValidValue(42));",
          "    ",
          "    let result = cell.get_or_try_init(|| Ok(ValidValue(52)));",
          "    let _ = result.unwrap(); // to ensure we are getting the value",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap().0, 42);",
          "    assert_eq!(result, Ok(&ValidValue(52)));",
          "    assert_eq!(cell.get().unwrap().0, 52);"
        ],
        "code": [
          "{",
          "    struct ValidValue(i32);",
          "    ",
          "    let cell = OnceCell::with_value(ValidValue(42));",
          "    ",
          "    let result = cell.get_or_try_init(|| Ok(ValidValue(52)));",
          "    let _ = result.unwrap(); // to ensure we are getting the value",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap().0, 42);",
          "    assert_eq!(result, Ok(&ValidValue(52)));",
          "    assert_eq!(cell.get().unwrap().0, 52);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]