[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Box::new(42);",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&42);",
          "    // Call the function but don't assert, per instructions",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    let value = Box::new(42);",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(unsafe { &*(once_box.inner.load(Ordering::Acquire)) });",
          "    assert_eq!(result, expected);",
          "    let null_ptr_once_box = OnceBox::<i32>::new();",
          "    let null_result = null_ptr_once_box.get();",
          "    assert_eq!(null_result, None);"
        ],
        "code": [
          "{",
          "    let value = Box::new(42);",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&42);",
          "    // Call the function but don't assert, per instructions",
          "    let _ = result;",
          "    let value = Box::new(42);",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(unsafe { &*(once_box.inner.load(Ordering::Acquire)) });",
          "    assert_eq!(result, expected);",
          "    let null_ptr_once_box = OnceBox::<i32>::new();",
          "    let null_result = null_ptr_once_box.get();",
          "    assert_eq!(null_result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Box::new(\"Hello, world!\");",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&\"Hello, world!\");",
          "    // Call the function but don't assert, per instructions",
          "    let _ = result;",
          "}"
        ],
        "oracle": [
          "    let value = Box::new(\"Hello, world!\");",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&\"Hello, world!\");",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let value = Box::new(\"Hello, world!\");",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&\"Hello, world!\");",
          "    // Call the function but don't assert, per instructions",
          "    let _ = result;",
          "    let value = Box::new(\"Hello, world!\");",
          "    let once_box = OnceBox::with_value(value);",
          "    let result = once_box.get();",
          "    let expected = Some(&\"Hello, world!\");",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]