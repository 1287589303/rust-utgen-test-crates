[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType;",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| panic!(\"This is a panic for testing\"));",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| panic!(\"This is a panic for testing\"));",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| panic!(\"This is a panic for testing\"));",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| panic!(\"This is a panic for testing\"));",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestType;",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| {",
          "        cell.get_or_init(|| panic!(\"This should panic due to reentrancy\"));",
          "        TestType",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| {",
          "    cell.get_or_init(|| panic!(\"This should panic due to reentrancy\"));",
          "    TestType",
          "    });",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct TestType;",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| {",
          "        cell.get_or_init(|| panic!(\"This should panic due to reentrancy\"));",
          "        TestType",
          "    });",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let cell: OnceCell<TestType> = OnceCell::new();",
          "    let _value = cell.get_or_init(|| {",
          "    cell.get_or_init(|| panic!(\"This should panic due to reentrancy\"));",
          "    TestType",
          "    });",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]