[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<i32>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(42);",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*value, 42);",
          "    assert!(box_instance.box_instance.get().is_some());",
          "    assert_eq!(box_instance.box_instance.get(), Some(&42));",
          "    let another_value = box_instance.box_instance.get_or_init(|| Box::new(100));",
          "    assert_eq!(another_value, value);",
          "    assert!(ptr::eq(*value, *another_value));"
        ],
        "code": [
          "{",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<i32>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(42);",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "    assert_eq!(*value, 42);",
          "    assert!(box_instance.box_instance.get().is_some());",
          "    assert_eq!(box_instance.box_instance.get(), Some(&42));",
          "    let another_value = box_instance.box_instance.get_or_init(|| Box::new(100));",
          "    assert_eq!(another_value, value);",
          "    assert!(ptr::eq(*value, *another_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<String>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(\"Hello, World!\".to_string());",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "}"
        ],
        "oracle": [
          "    assert!(box_instance.box_instance.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(value.as_ref(), Some(&\"Hello, World!\".to_string()));"
        ],
        "code": [
          "{",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<String>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(\"Hello, World!\".to_string());",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "    assert!(box_instance.box_instance.inner.load(Ordering::SeqCst).is_null());",
          "    assert_eq!(value.as_ref(), Some(&\"Hello, World!\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        name: String,",
          "        value: i32,",
          "    }",
          "    ",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<TestStruct>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(TestStruct {",
          "        name: \"Test\".to_string(),",
          "        value: 10,",
          "    });",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "}"
        ],
        "oracle": [
          "    assert!(value.name == \"Test\");",
          "    assert!(value.value == 10);",
          "    assert!(box_instance.box_instance.get().is_some());",
          "    assert!(box_instance.box_instance.get().unwrap().name == \"Test\");",
          "    assert!(box_instance.box_instance.get().unwrap().value == 10);",
          "    assert!(ptr::eq(value, box_instance.box_instance.get().unwrap()));"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        name: String,",
          "        value: i32,",
          "    }",
          "    ",
          "    struct TestOnceBox {",
          "        box_instance: OnceBox<TestStruct>,",
          "    }",
          "    ",
          "    let box_instance = TestOnceBox {",
          "        box_instance: OnceBox::new(),",
          "    };",
          "    ",
          "    let closure = || Box::new(TestStruct {",
          "        name: \"Test\".to_string(),",
          "        value: 10,",
          "    });",
          "    ",
          "    let value = box_instance.box_instance.get_or_init(closure);",
          "    assert!(value.name == \"Test\");",
          "    assert!(value.value == 10);",
          "    assert!(box_instance.box_instance.get().is_some());",
          "    assert!(box_instance.box_instance.get().unwrap().name == \"Test\");",
          "    assert!(box_instance.box_instance.get().unwrap().value == 10);",
          "    assert!(ptr::eq(value, box_instance.box_instance.get().unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]