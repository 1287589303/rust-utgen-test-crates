[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Box::new(42);",
          "    let ptr = Box::into_raw(val);",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_fmt_result, Ok(()));",
          "    assert_eq!(once_box.inner.load(Ordering::Relaxed), ptr);",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(42)\");",
          "    assert!(once_box.ghost.is::<Option<Box<i32>>>());"
        ],
        "code": [
          "{",
          "    let val = Box::new(42);",
          "    let ptr = Box::into_raw(val);",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "    assert_eq!(_fmt_result, Ok(()));",
          "    assert_eq!(once_box.inner.load(Ordering::Relaxed), ptr);",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(42)\");",
          "    assert!(once_box.ghost.is::<Option<Box<i32>>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr::null_mut()),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", once_box.inner.load(Ordering::Relaxed)), \"OnceBox(null)\");",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(null)\");",
          "    assert!(once_box.inner.load(Ordering::Relaxed).is_null());",
          "    assert!(once_box.ghost.is::<Option<Box<()>>>());"
        ],
        "code": [
          "{",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr::null_mut()),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "    assert_eq!(format!(\"{:?}\", once_box.inner.load(Ordering::Relaxed)), \"OnceBox(null)\");",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(null)\");",
          "    assert!(once_box.inner.load(Ordering::Relaxed).is_null());",
          "    assert!(once_box.ghost.is::<Option<Box<()>>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let val = Box::new(42);",
          "    let ptr = Box::into_raw(val);",
          "    unsafe {",
          "        // Simulate deallocation",
          "        drop(Box::from_raw(ptr));",
          "    }",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new()).is_ok(), true);",
          "    assert!(once_box.inner.load(Ordering::Relaxed).is_null());",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(0x0)\");",
          "    assert!(core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new()).is_err());"
        ],
        "code": [
          "{",
          "    let val = Box::new(42);",
          "    let ptr = Box::into_raw(val);",
          "    unsafe {",
          "        // Simulate deallocation",
          "        drop(Box::from_raw(ptr));",
          "    }",
          "    let once_box = OnceBox {",
          "        inner: AtomicPtr::new(ptr),",
          "        ghost: PhantomData,",
          "    };",
          "    let _ = core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new());",
          "    assert_eq!(core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new()).is_ok(), true);",
          "    assert!(once_box.inner.load(Ordering::Relaxed).is_null());",
          "    assert_eq!(format!(\"{:?}\", once_box), \"OnceBox(0x0)\");",
          "    assert!(core::fmt::Debug::fmt(&once_box, &mut core::fmt::Formatter::new()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]