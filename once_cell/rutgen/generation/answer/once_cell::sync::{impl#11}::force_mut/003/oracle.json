[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue {",
          "        value: i32,",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyValue { value: 42 }),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    // The result would be &mut MyValue, but we focus only on the call.",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(result.value, 42);",
          "    assert!(std::ptr::eq(result, lazy.cell.get_mut().unwrap()));",
          "    assert!(std::mem::size_of::<MyValue>() > 0);",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    struct MyValue {",
          "        value: i32,",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyValue { value: 42 }),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    // The result would be &mut MyValue, but we focus only on the call.",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(result.value, 42);",
          "    assert!(std::ptr::eq(result, lazy.cell.get_mut().unwrap()));",
          "    assert!(std::mem::size_of::<MyValue>() > 0);",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue {",
          "        value: String,",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyValue { value: \"Hello\".to_string() }),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    // The result would be &mut MyValue, but we focus only on the call.",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(result.value, \"Hello\");",
          "    assert_eq!(lazy.cell.get_mut().unwrap().value, \"Hello\");"
        ],
        "code": [
          "{",
          "    struct MyValue {",
          "        value: String,",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyValue { value: \"Hello\".to_string() }),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    // The result would be &mut MyValue, but we focus only on the call.",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(result.value, \"Hello\");",
          "    assert_eq!(lazy.cell.get_mut().unwrap().value, \"Hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]