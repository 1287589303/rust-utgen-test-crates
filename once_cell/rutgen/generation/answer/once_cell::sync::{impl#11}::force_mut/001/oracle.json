[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 42;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    let value = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(*value, 42);",
          "    assert!(!lazy.cell.get_mut().is_none());"
        ],
        "code": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 42;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    let value = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(*value, 42);",
          "    assert!(!lazy.cell.get_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 100;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    let expected_value: &mut i32 = &mut 100;",
          "    assert_eq!(Lazy::force_mut(&mut lazy), expected_value);"
        ],
        "code": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 100;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    let expected_value: &mut i32 = &mut 100;",
          "    assert_eq!(Lazy::force_mut(&mut lazy), expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 0;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    assert_eq!(*_result, 0);"
        ],
        "code": [
          "{",
          "    struct Test;",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(|| {",
          "            let mut value = 0;",
          "            &mut value",
          "        })),",
          "    };",
          "    ",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    assert_eq!(*_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct Test;",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(5),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take(), Some(&mut || 92));",
          "    assert_eq!(Lazy::force_mut(&mut lazy), &mut 5);"
        ],
        "code": [
          "{",
          "    struct Test;",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(5),",
          "        init: Cell::new(None),",
          "    };",
          "",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take(), Some(&mut || 92));",
          "    assert_eq!(Lazy::force_mut(&mut lazy), &mut 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]