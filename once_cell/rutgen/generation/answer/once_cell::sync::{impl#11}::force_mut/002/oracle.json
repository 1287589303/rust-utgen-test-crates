[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestLazy;",
          "",
          "    impl TestLazy {",
          "        fn new() -> Lazy<i32, fn() -> i32> {",
          "            Lazy {",
          "                cell: OnceCell::new(),",
          "                init: Cell::new(None),",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut lazy = TestLazy::new();",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &mut 92);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_none());",
          "    lazy.init.set(Some(|| 92));",
          "    assert_eq!(Lazy::force_mut(&mut lazy), &mut 92);",
          "    lazy.cell.set(84).unwrap();",
          "    assert_eq!(lazy.cell.get_unchecked(), &84);"
        ],
        "code": [
          "{",
          "    struct TestLazy;",
          "",
          "    impl TestLazy {",
          "        fn new() -> Lazy<i32, fn() -> i32> {",
          "            Lazy {",
          "                cell: OnceCell::new(),",
          "                init: Cell::new(None),",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut lazy = TestLazy::new();",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(result, &mut 92);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_none());",
          "    lazy.init.set(Some(|| 92));",
          "    assert_eq!(Lazy::force_mut(&mut lazy), &mut 92);",
          "    lazy.cell.set(84).unwrap();",
          "    assert_eq!(lazy.cell.get_unchecked(), &84);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestLazy;",
          "",
          "    impl TestLazy {",
          "        fn new() -> Lazy<i32, fn() -> i32> {",
          "            Lazy {",
          "                cell: OnceCell::new(),",
          "                init: Cell::new(None),",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut lazy = TestLazy::new();",
          "    lazy.init.set(None);",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_none());",
          "    assert_eq!(result, &mut 92);"
        ],
        "code": [
          "{",
          "    struct TestLazy;",
          "",
          "    impl TestLazy {",
          "        fn new() -> Lazy<i32, fn() -> i32> {",
          "            Lazy {",
          "                cell: OnceCell::new(),",
          "                init: Cell::new(None),",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut lazy = TestLazy::new();",
          "    lazy.init.set(None);",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_none());",
          "    assert_eq!(result, &mut 92);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]