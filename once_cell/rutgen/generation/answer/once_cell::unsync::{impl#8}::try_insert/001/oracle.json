[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(TestStruct(42)).is_ok());",
          "    let result = cell.try_insert(TestStruct(62));",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), (&TestStruct(42), TestStruct(62)));"
        ],
        "code": [
          "{",
          "    struct TestStruct(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(TestStruct(42)).is_ok());",
          "    let result = cell.try_insert(TestStruct(62));",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), (&TestStruct(42), TestStruct(62)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(String::from(\"Initial Value\")).is_ok());",
          "    let result = cell.try_insert(String::from(\"New Value\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err((&\"Initial Value\".to_string(), \"New Value\".to_string())));"
        ],
        "code": [
          "{",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(String::from(\"Initial Value\")).is_ok());",
          "    let result = cell.try_insert(String::from(\"New Value\"));",
          "    assert_eq!(result, Err((&\"Initial Value\".to_string(), \"New Value\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(3.14).is_ok());",
          "    let result = cell.try_insert(2.71);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err((3.14, 2.71)));"
        ],
        "code": [
          "{",
          "    let cell = OnceCell::new();",
          "    assert!(cell.try_insert(3.14).is_ok());",
          "    let result = cell.try_insert(2.71);",
          "    assert_eq!(result, Err((3.14, 2.71)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]