[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "    ",
          "    impl fmt::Debug for TestData {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestData({})\", self.value)",
          "        }",
          "    }",
          "    ",
          "    let cell = OnceCell::with_value(TestData { value: 42 });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().to_string(), \"OnceCell(TestData(42))\");",
          "    assert!(formatter.is_complete());",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap().value, 42);",
          "    assert_eq!(formatter.len(), expected_length);"
        ],
        "code": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "    ",
          "    impl fmt::Debug for TestData {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestData({})\", self.value)",
          "        }",
          "    }",
          "    ",
          "    let cell = OnceCell::with_value(TestData { value: 42 });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = cell.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().to_string(), \"OnceCell(TestData(42))\");",
          "    assert!(formatter.is_complete());",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap().value, 42);",
          "    assert_eq!(formatter.len(), expected_length);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "    ",
          "    impl fmt::Debug for TestData {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestData({})\", self.value)",
          "        }",
          "    }",
          "    ",
          "    let cell = OnceCell::new();",
          "    let _ = cell.set(TestData { value: 24 });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    cell.set(TestData { value: 24 });",
          "    assert_eq!(cell.get(), Some(&TestData { value: 24 }));",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert!(cell.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"OnceCell(TestData(24))\");"
        ],
        "code": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "    ",
          "    impl fmt::Debug for TestData {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestData({})\", self.value)",
          "        }",
          "    }",
          "    ",
          "    let cell = OnceCell::new();",
          "    let _ = cell.set(TestData { value: 24 });",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = cell.fmt(&mut formatter);",
          "    cell.set(TestData { value: 24 });",
          "    assert_eq!(cell.get(), Some(&TestData { value: 24 }));",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert!(cell.fmt(&mut formatter).is_ok());",
          "    assert_eq!(formatter.to_string(), \"OnceCell(TestData(24))\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]