[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(once_cell.get(), None);",
          "    assert!(formatter.write_str(\"OnceCell(Uninit)\").is_ok());",
          "    let result = once_cell.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer(), \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "    let once_cell: OnceCell<i32> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    assert_eq!(once_cell.get(), None);",
          "    assert!(formatter.write_str(\"OnceCell(Uninit)\").is_ok());",
          "    let result = once_cell.fmt(&mut formatter);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.buffer(), \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<String> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.as_str(), \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<String> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "    assert_eq!(formatter.as_str(), \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<(i32, i32)> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    let once_cell: OnceCell<(i32, i32)> = OnceCell::new();",
          "    assert_eq!(once_cell.get(), None);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = once_cell.fmt(&mut formatter);",
          "    assert!(matches!(result, Ok(())));",
          "    assert_eq!(formatter.buffer(), \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<(i32, i32)> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "    let once_cell: OnceCell<(i32, i32)> = OnceCell::new();",
          "    assert_eq!(once_cell.get(), None);",
          "    let mut formatter = fmt::Formatter::new();",
          "    let result = once_cell.fmt(&mut formatter);",
          "    assert!(matches!(result, Ok(())));",
          "    assert_eq!(formatter.buffer(), \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let once_cell: OnceCell<f64> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(once_cell.get(), None);",
          "    assert_eq!(formatter.as_str(), \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    let once_cell: OnceCell<f64> = OnceCell::new();",
          "    let mut formatter = fmt::Formatter::new();",
          "    let _ = once_cell.fmt(&mut formatter);",
          "    assert_eq!(once_cell.get(), None);",
          "    assert_eq!(formatter.as_str(), \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]