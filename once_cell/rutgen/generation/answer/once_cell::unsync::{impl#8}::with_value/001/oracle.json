[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 42i32;",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&42));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.inner.get().is_some(), true);",
          "    assert!(matches!(cell, OnceCell { inner: UnsafeCell::new(Some(42)) }));"
        ],
        "code": [
          "{",
          "    let value = 42i32;",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.get(), Some(&42));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.inner.get().is_some(), true);",
          "    assert!(matches!(cell, OnceCell { inner: UnsafeCell::new(Some(42)) }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 0u32;",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(matches!(cell.inner.get(), Some(Some(value))));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.take(), Some(value));",
          "    assert!(cell.get().is_none());"
        ],
        "code": [
          "{",
          "    let value = 0u32;",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(matches!(cell.inner.get(), Some(Some(value))));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.take(), Some(value));",
          "    assert!(cell.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = -1i64;",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    let value = -1i64;",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(cell.inner.get().is_some());",
          "    assert!(cell.inner.get().unwrap().is_some());"
        ],
        "code": [
          "{",
          "    let value = -1i64;",
          "    let cell = OnceCell::with_value(value);",
          "    let value = -1i64;",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(cell.inner.get().is_some());",
          "    assert!(cell.inner.get().unwrap().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = String::from(\"Hello, World!\");",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap(), &String::from(\"Hello, World!\"));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut String::from(\"Hello, World!\"));",
          "    assert!(cell.take().is_some());",
          "    assert_eq!(cell.into_inner().is_some(), true);"
        ],
        "code": [
          "{",
          "    let value = String::from(\"Hello, World!\");",
          "    let cell = OnceCell::with_value(value);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(cell.get().unwrap(), &String::from(\"Hello, World!\"));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut String::from(\"Hello, World!\"));",
          "    assert!(cell.take().is_some());",
          "    assert_eq!(cell.into_inner().is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 3.14f64;",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    let value = 3.14f64;",
          "    let cell = OnceCell::with_value(value);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(*cell.get().unwrap(), value);",
          "    assert!(matches!(cell.inner.get(), Some(_)));",
          "    assert!(std::ptr::eq(cell.inner.get().as_ptr(), cell.inner.get().as_ptr()));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut value);"
        ],
        "code": [
          "{",
          "    let value = 3.14f64;",
          "    let cell = OnceCell::with_value(value);",
          "    let value = 3.14f64;",
          "    let cell = OnceCell::with_value(value);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(*cell.get().unwrap(), value);",
          "    assert!(matches!(cell.inner.get(), Some(_)));",
          "    assert!(std::ptr::eq(cell.inner.get().as_ptr(), cell.inner.get().as_ptr()));",
          "    assert!(cell.get_mut().is_some());",
          "    assert_eq!(cell.get_mut().unwrap(), &mut value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = 'A';",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(cell.get_mut().is_none());",
          "    assert!(cell.take().is_none());",
          "    assert!(cell.into_inner().is_none());",
          "    assert_eq!(cell.set('B'), Ok(()));",
          "    assert_eq!(cell.get(), Some(&'B'));",
          "    assert!(cell.try_insert('C').is_ok());",
          "    assert_eq!(cell.get_or_init(|| 'D'), & 'B');",
          "    assert_eq!(cell.get_or_try_init(|| Ok('E')), Ok(&'B'));"
        ],
        "code": [
          "{",
          "    let value = 'A';",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.get(), Some(&value));",
          "    assert!(cell.get_mut().is_none());",
          "    assert!(cell.take().is_none());",
          "    assert!(cell.into_inner().is_none());",
          "    assert_eq!(cell.set('B'), Ok(()));",
          "    assert_eq!(cell.get(), Some(&'B'));",
          "    assert!(cell.try_insert('C').is_ok());",
          "    assert_eq!(cell.get_or_init(|| 'D'), & 'B');",
          "    assert_eq!(cell.get_or_try_init(|| Ok('E')), Ok(&'B'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        x: i32,",
          "        y: f64,",
          "    }",
          "    let value = MyStruct { x: 10, y: 20.5 };",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.inner.get(), Some(&MyStruct { x: 10, y: 20.5 }));",
          "    assert!(cell.inner.get().is_some());",
          "    assert!(!cell.inner.get_mut().is_some());",
          "    assert_eq!(cell.inner.get(), Some(&value));",
          "    assert_eq!(cell.inner.get().map(|v| v.x), Some(10));",
          "    assert_eq!(cell.inner.get().map(|v| v.y), Some(20.5));"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        x: i32,",
          "        y: f64,",
          "    }",
          "    let value = MyStruct { x: 10, y: 20.5 };",
          "    let cell = OnceCell::with_value(value);",
          "    assert_eq!(cell.inner.get(), Some(&MyStruct { x: 10, y: 20.5 }));",
          "    assert!(cell.inner.get().is_some());",
          "    assert!(!cell.inner.get_mut().is_some());",
          "    assert_eq!(cell.inner.get(), Some(&value));",
          "    assert_eq!(cell.inner.get().map(|v| v.x), Some(10));",
          "    assert_eq!(cell.inner.get().map(|v| v.y), Some(20.5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    enum MyEnum {",
          "        Variant1,",
          "        Variant2(i32),",
          "    }",
          "    let value = MyEnum::Variant2(100);",
          "    let cell = OnceCell::with_value(value);",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_some());",
          "    assert_eq!(*cell.get().unwrap(), MyEnum::Variant2(100));",
          "    assert_eq!(cell.inner.get().is_null(), false);"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    enum MyEnum {",
          "        Variant1,",
          "        Variant2(i32),",
          "    }",
          "    let value = MyEnum::Variant2(100);",
          "    let cell = OnceCell::with_value(value);",
          "    assert!(cell.get().is_some());",
          "    assert_eq!(*cell.get().unwrap(), MyEnum::Variant2(100));",
          "    assert_eq!(cell.inner.get().is_null(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]