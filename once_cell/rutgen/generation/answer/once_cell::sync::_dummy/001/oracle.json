[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "",
          "    fn share<T: Sync>(_: &T) {}",
          "",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "    ",
          "    fn share<T: Sync>(_: &T) {}",
          "    ",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "    }).is_err());",
          "    ",
          "    assert!(std::panic::catch_unwind(|| {",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "    ",
          "    fn share<T: Sync>(_: &T) {}",
          "    ",
          "    share(&once_cell::sync::Lazy::<S>::new(|| unimplemented!()));",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "",
          "    fn share<T: Sync>(_: &T) {}",
          "",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "    ",
          "    fn share<T: Sync>(_: &T) {}",
          "    ",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "    }).is_err());",
          "    ",
          "    assert!(std::panic::catch_unwind(|| {",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "    ",
          "    fn share<T: Sync>(_: &T) {}",
          "    ",
          "    share(&once_cell::sync::Lazy::<S>::new(|| unimplemented!()));",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "",
          "    fn share<T: Sync>(_: &T) {}",
          "",
          "    share(&once_cell::sync::Lazy::<S>::new(|| unimplemented!()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let _ = once_cell::sync::Lazy::<S>::new(|| unimplemented!());",
          "    }).is_err(), true);",
          "    ",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    struct S(*mut ());",
          "    unsafe impl Sync for S {}",
          "",
          "    fn share<T: Sync>(_: &T) {}",
          "",
          "    share(&once_cell::sync::Lazy::<S>::new(|| unimplemented!()));",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let _ = once_cell::sync::Lazy::<S>::new(|| unimplemented!());",
          "    }).is_err(), true);",
          "    ",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    share(&once_cell::sync::OnceCell::<S>::new());",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]