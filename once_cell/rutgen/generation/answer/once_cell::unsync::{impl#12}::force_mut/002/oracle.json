[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<i32, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().take().is_none());"
        ],
        "code": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<i32, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().take().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<f64, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut(), None);",
          "    assert_panics!(Lazy::force_mut(&mut lazy));",
          "    assert_eq!(lazy.cell.get_mut(), None);"
        ],
        "code": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<f64, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut(), None);",
          "    assert_panics!(Lazy::force_mut(&mut lazy));",
          "    assert_eq!(lazy.cell.get_mut(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<String, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take(), None);",
          "    assert!(std::panic::catch_unwind(|| Lazy::force_mut(&mut lazy)).is_err());"
        ],
        "code": [
          "{",
          "    struct TestInit;",
          "    let mut lazy: Lazy<String, fn()> = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(None),",
          "    };",
          "    let _result = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take(), None);",
          "    assert!(std::panic::catch_unwind(|| Lazy::force_mut(&mut lazy)).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]