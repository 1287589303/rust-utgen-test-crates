[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> i32 {",
          "            42",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(42),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*result, 42);",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(lazy.cell.get_mut(), Some(&mut 42));",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.cell.get(), Some(&42));"
        ],
        "code": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> i32 {",
          "            42",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(42),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(*result, 42);",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(lazy.cell.get_mut(), Some(&mut 42));",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.cell.get(), Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> String {",
          "            String::from(\"Hello\")",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(String::from(\"Hello\")),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "    ",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &String::from(\"Hello\"));",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(lazy.cell.get(), Some(&String::from(\"Hello\")));",
          "    assert_eq!(lazy.init.get(), None);"
        ],
        "code": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> String {",
          "            String::from(\"Hello\")",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(String::from(\"Hello\")),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "    ",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(result, &String::from(\"Hello\"));",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert_eq!(lazy.cell.get(), Some(&String::from(\"Hello\")));",
          "    assert_eq!(lazy.init.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> f64 {",
          "            3.14",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(3.14),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*result, 3.14);",
          "    assert_eq!(lazy.cell.get().unwrap(), &3.14);",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> f64 {",
          "            3.14",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(3.14),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(*result, 3.14);",
          "    assert_eq!(lazy.cell.get().unwrap(), &3.14);",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> MyStruct {",
          "            MyStruct { value: 100 }",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyStruct { value: 100 }),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.value, 100);",
          "    assert!(lazy.init.get().is_none());",
          "    assert!(lazy.cell.get_mut().is_some());"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> MyStruct {",
          "            MyStruct { value: 100 }",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(MyStruct { value: 100 }),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(result.value, 100);",
          "    assert!(lazy.init.get().is_none());",
          "    assert!(lazy.cell.get_mut().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> String {",
          "            String::new()",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(String::new()),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    assert_eq!(result, &String::new());",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    struct InitFunc;",
          "",
          "    impl InitFunc {",
          "        fn call() -> String {",
          "            String::new()",
          "        }",
          "    }",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::with_value(String::new()),",
          "        init: Cell::new(Some(InitFunc::call)),",
          "    };",
          "",
          "    let result = Lazy::force_mut(&mut lazy);",
          "    assert!(result.is_empty());",
          "    assert_eq!(result, &String::new());",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]