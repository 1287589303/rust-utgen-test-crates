[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData {",
          "        value: usize,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        TestData { value: 42 }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut TestData = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(result.value == 42);",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert!(lazy.cell.get_mut().unwrap().value == 42);",
          "    assert!(lazy.init.get_mut().is_none());"
        ],
        "code": [
          "{",
          "    struct TestData {",
          "        value: usize,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        TestData { value: 42 }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut TestData = Lazy::force_mut(&mut lazy);",
          "    assert!(result.value == 42);",
          "    assert!(lazy.cell.get_mut().is_some());",
          "    assert!(lazy.cell.get_mut().unwrap().value == 42);",
          "    assert!(lazy.init.get_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherTestData {",
          "        value: String,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        AnotherTestData { value: \"Hello\".into() }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut AnotherTestData = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    assert_eq!(result.value, \"Hello\");",
          "    assert_eq!(*lazy.cell.get_mut().unwrap(), AnotherTestData { value: \"Hello\".into() });",
          "    assert!(lazy.init.get_mut().is_none());"
        ],
        "code": [
          "{",
          "    struct AnotherTestData {",
          "        value: String,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        AnotherTestData { value: \"Hello\".into() }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut AnotherTestData = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().is_some());",
          "    assert_eq!(result.value, \"Hello\");",
          "    assert_eq!(*lazy.cell.get_mut().unwrap(), AnotherTestData { value: \"Hello\".into() });",
          "    assert!(lazy.init.get_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LargeData {",
          "        values: Vec<u128>,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        LargeData { values: vec![1, 2, 3, 4, 5] }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut LargeData = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take().is_some(), true);",
          "    assert_eq!(result.values, vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(*result, LargeData { values: vec![1, 2, 3, 4, 5] });"
        ],
        "code": [
          "{",
          "    struct LargeData {",
          "        values: Vec<u128>,",
          "    }",
          "    ",
          "    let mut init_fn = || {",
          "        LargeData { values: vec![1, 2, 3, 4, 5] }",
          "    };",
          "    ",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "    ",
          "    let result: &mut LargeData = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert_eq!(lazy.init.get_mut().take().is_some(), true);",
          "    assert_eq!(result.values, vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(*result, LargeData { values: vec![1, 2, 3, 4, 5] });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyData;",
          "",
          "    let mut init_fn = || {",
          "        EmptyData",
          "    };",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "",
          "    let result: &mut EmptyData = Lazy::force_mut(&mut lazy);",
          "}"
        ],
        "oracle": [
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().take().is_some());",
          "    let value: &mut EmptyData = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(value, &mut EmptyData);"
        ],
        "code": [
          "{",
          "    struct EmptyData;",
          "",
          "    let mut init_fn = || {",
          "        EmptyData",
          "    };",
          "",
          "    let mut lazy = Lazy {",
          "        cell: OnceCell::new(),",
          "        init: Cell::new(Some(&mut init_fn)),",
          "    };",
          "",
          "    let result: &mut EmptyData = Lazy::force_mut(&mut lazy);",
          "    assert!(lazy.cell.get_mut().is_none());",
          "    assert!(lazy.init.get_mut().take().is_some());",
          "    let value: &mut EmptyData = Lazy::force_mut(&mut lazy);",
          "    assert_eq!(value, &mut EmptyData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]