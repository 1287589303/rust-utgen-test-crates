[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    ",
          "    let value = TestType(100);",
          "    let result = cell.try_insert(value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &TestType(100));"
        ],
        "code": [
          "{",
          "    struct TestType(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    ",
          "    let value = TestType(100);",
          "    let result = cell.try_insert(value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &TestType(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    ",
          "    let value1 = TestType(200);",
          "    let result1 = cell.try_insert(value1);",
          "    ",
          "    // The cell should now have the first value set",
          "    let value2 = TestType(300);",
          "    let result2 = cell.try_insert(value2);",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    assert_eq!(result1, Ok(&TestType(200)));",
          "    assert_eq!(result2, Err((&TestType(200), TestType(300))));",
          "    assert!(cell.get().is_some());"
        ],
        "code": [
          "{",
          "    struct TestType(i32);",
          "    ",
          "    let cell = OnceCell::new();",
          "    assert!(cell.get().is_none());",
          "    ",
          "    let value1 = TestType(200);",
          "    let result1 = cell.try_insert(value1);",
          "    ",
          "    // The cell should now have the first value set",
          "    let value2 = TestType(300);",
          "    let result2 = cell.try_insert(value2);",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(result1, Ok(&TestType(200)));",
          "    assert_eq!(result2, Err((&TestType(200), TestType(300))));",
          "    assert!(cell.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]