[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let result = cell.get();",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell = OnceCell::with_value(42);",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&42));"
        ],
        "code": [
          "{",
          "    let cell = OnceCell::with_value(42);",
          "    let result = cell.get();",
          "    assert_eq!(result, Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let _ = cell.set(42);",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&42));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let _ = cell.set(42);",
          "    let result = cell.get();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let result_first_call = cell.get();",
          "    let _ = cell.set(42);",
          "    let result_second_call = cell.get();",
          "    let result_third_call = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_first_call, None);",
          "    assert_eq!(result_second_call, Some(&42));",
          "    assert_eq!(result_third_call, Some(&42));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let result_first_call = cell.get();",
          "    let _ = cell.set(42);",
          "    let result_second_call = cell.get();",
          "    let result_third_call = cell.get();",
          "    assert_eq!(result_first_call, None);",
          "    assert_eq!(result_second_call, Some(&42));",
          "    assert_eq!(result_third_call, Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]