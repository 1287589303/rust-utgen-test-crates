[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value1 = MyValue(0);",
          "    assert_eq!(cell.set(value1), Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.set(MyValue(0)), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value1 = MyValue(0);",
          "    assert_eq!(cell.set(value1), Ok(()));",
          "    assert_eq!(cell.set(MyValue(0)), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value2 = MyValue(1);",
          "    assert_eq!(cell.set(value2), Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.set(MyValue(1)), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value2 = MyValue(1);",
          "    assert_eq!(cell.set(value2), Ok(()));",
          "    assert_eq!(cell.set(MyValue(1)), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "",
          "    let value0 = MyValue(0);",
          "    assert_eq!(cell.set(value0), Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert!(cell.get().is_none());",
          "    let value1 = MyValue(1);",
          "    assert_eq!(cell.set(value1), Ok(()));",
          "    assert!(cell.get().is_some());"
        ],
        "code": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "",
          "    let value0 = MyValue(0);",
          "    assert_eq!(cell.set(value0), Ok(()));",
          "    assert!(cell.get().is_none());",
          "    let value1 = MyValue(1);",
          "    assert_eq!(cell.set(value1), Ok(()));",
          "    assert!(cell.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value3 = MyValue(2);",
          "    assert_eq!(cell.set(value3), Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.set(MyValue(2)), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let value3 = MyValue(2);",
          "    assert_eq!(cell.set(value3), Ok(()));",
          "    assert_eq!(cell.set(MyValue(2)), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let large_value = MyValue(9999);",
          "    assert_eq!(cell.set(large_value), Ok(()));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.set(MyValue(9999)), Ok(()));"
        ],
        "code": [
          "{",
          "    struct MyValue(i32);",
          "    let cell = OnceCell::new();",
          "    ",
          "    let large_value = MyValue(9999);",
          "    assert_eq!(cell.set(large_value), Ok(()));",
          "    assert_eq!(cell.set(MyValue(9999)), Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]