[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hello = \"Hello, World!\".to_string();",
          "    let lazy = Lazy::new(|| hello.to_uppercase());",
          "    let _value = &*lazy; // Just invoke the dereference",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get(), Some(&&hello.to_uppercase()));",
          "    let _ = lazy.into_value();",
          "    assert_eq!(lazy.cell.get(), Some(&hello.to_uppercase()));",
          "    assert_eq!(lazy.init.get(), None);"
        ],
        "code": [
          "{",
          "    let hello = \"Hello, World!\".to_string();",
          "    let lazy = Lazy::new(|| hello.to_uppercase());",
          "    let _value = &*lazy; // Just invoke the dereference",
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get(), Some(&&hello.to_uppercase()));",
          "    let _ = lazy.into_value();",
          "    assert_eq!(lazy.cell.get(), Some(&hello.to_uppercase()));",
          "    assert_eq!(lazy.init.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy = Lazy::new(|| 42);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get().is_some(), true);",
          "    assert_eq!(lazy.init.get().unwrap() as *const _ as usize, &42 as *const _ as usize);",
          "    assert_eq!(lazy.init.get().is_some(), true);",
          "    assert!(lazy.cell.get().is_none());",
          "    lazy.cell.set(42).unwrap();",
          "    assert_eq!(lazy.cell.get(), Some(&42));",
          "    assert_eq!(lazy.init.get(), Some(&(&&42 as *const _ as usize)));",
          "    lazy.cell.take();"
        ],
        "code": [
          "{",
          "    let lazy = Lazy::new(|| 42);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get().is_some(), true);",
          "    assert_eq!(lazy.init.get().unwrap() as *const _ as usize, &42 as *const _ as usize);",
          "    assert_eq!(lazy.init.get().is_some(), true);",
          "    assert!(lazy.cell.get().is_none());",
          "    lazy.cell.set(42).unwrap();",
          "    assert_eq!(lazy.cell.get(), Some(&42));",
          "    assert_eq!(lazy.init.get(), Some(&(&&42 as *const _ as usize)));",
          "    lazy.cell.take();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy = Lazy::new(|| 3.14);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Lazy::new(|| 3.14).cell, OnceCell::new());",
          "    assert!(Lazy::new(|| 3.14).init.get().is_some());",
          "    assert_eq!(*&Lazy::new(|| 3.14), Lazy { cell: OnceCell::new(), init: Cell::new(Some(|| 3.14)) });"
        ],
        "code": [
          "{",
          "    let lazy = Lazy::new(|| 3.14);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "    assert_eq!(Lazy::new(|| 3.14).cell, OnceCell::new());",
          "    assert!(Lazy::new(|| 3.14).init.get().is_some());",
          "    assert_eq!(*&Lazy::new(|| 3.14), Lazy { cell: OnceCell::new(), init: Cell::new(Some(|| 3.14)) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let lazy = Lazy::new(|| MyStruct { value: 10 });",
          "    let _value = &*lazy; // Just invoke the dereference",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.init.get(), Some(Some(&| | MyStruct { value: 10 })));",
          "    assert!(lazy.cell.get().is_none());",
          "    let my_struct: &MyStruct = &*lazy;",
          "    assert_eq!(my_struct.value, 10);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert_eq!(lazy.cell.get().unwrap().as_ref().unwrap().value, 10);"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let lazy = Lazy::new(|| MyStruct { value: 10 });",
          "    let _value = &*lazy; // Just invoke the dereference",
          "    assert_eq!(lazy.init.get(), Some(Some(&| | MyStruct { value: 10 })));",
          "    assert!(lazy.cell.get().is_none());",
          "    let my_struct: &MyStruct = &*lazy;",
          "    assert_eq!(my_struct.value, 10);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert_eq!(lazy.cell.get().unwrap().as_ref().unwrap().value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    enum MyEnum {",
          "        VariantA,",
          "        VariantB,",
          "    }",
          "    let lazy = Lazy::new(|| MyEnum::VariantB);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get(), Some(&Some(|| MyEnum::VariantB)));",
          "    assert!(lazy.init.get().is_some());",
          "    assert!(lazy.cell.get().is_none());",
          "    assert_eq!(lazy.init.get().unwrap()(), MyEnum::VariantB);",
          "    assert!(matches!(lazy.init.get(), Some(&Some(_))));"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    enum MyEnum {",
          "        VariantA,",
          "        VariantB,",
          "    }",
          "    let lazy = Lazy::new(|| MyEnum::VariantB);",
          "    let _value = &*lazy; // Just invoke the dereference",
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert_eq!(lazy.init.get(), Some(&Some(|| MyEnum::VariantB)));",
          "    assert!(lazy.init.get().is_some());",
          "    assert!(lazy.cell.get().is_none());",
          "    assert_eq!(lazy.init.get().unwrap()(), MyEnum::VariantB);",
          "    assert!(matches!(lazy.init.get(), Some(&Some(_))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]