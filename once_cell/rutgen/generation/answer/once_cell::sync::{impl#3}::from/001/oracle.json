[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ValidValue {",
          "        x: i32,",
          "    }",
          "    ",
          "    let value = ValidValue { x: 10 };",
          "    let once_cell = OnceCell::from(value);",
          "    let _result = once_cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(once_cell.get(), Some(&ValidValue { x: 10 }));"
        ],
        "code": [
          "{",
          "    struct ValidValue {",
          "        x: i32,",
          "    }",
          "    ",
          "    let value = ValidValue { x: 10 };",
          "    let once_cell = OnceCell::from(value);",
          "    let _result = once_cell.get();",
          "    assert_eq!(once_cell.get(), Some(&ValidValue { x: 10 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DefaultValue {",
          "        x: i32,",
          "    }",
          "",
          "    let default_value = DefaultValue { x: 0 };",
          "    let once_cell = OnceCell::from(default_value);",
          "    let _result = once_cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(&DefaultValue { x: 0 }));"
        ],
        "code": [
          "{",
          "    struct DefaultValue {",
          "        x: i32,",
          "    }",
          "",
          "    let default_value = DefaultValue { x: 0 };",
          "    let once_cell = OnceCell::from(default_value);",
          "    let _result = once_cell.get();",
          "    assert_eq!(_result, Some(&DefaultValue { x: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct NoneValue;",
          "",
          "    let none_value: Option<NoneValue> = None;",
          "    let once_cell = OnceCell::from(none_value);",
          "    let _result = once_cell.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(once_cell.get(), None);"
        ],
        "code": [
          "{",
          "    struct NoneValue;",
          "",
          "    let none_value: Option<NoneValue> = None;",
          "    let once_cell = OnceCell::from(none_value);",
          "    let _result = once_cell.get();",
          "    assert_eq!(once_cell.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]