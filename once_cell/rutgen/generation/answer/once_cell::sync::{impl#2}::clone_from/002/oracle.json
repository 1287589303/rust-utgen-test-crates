[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
          "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "",
          "    self_cell.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_cell.get().unwrap().value, 42);",
          "    assert!(self_cell.get_mut().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
          "    assert_ne!(self_cell.get().unwrap().value, 21);"
        ],
        "code": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
          "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get().unwrap().value, 42);",
          "    assert!(self_cell.get_mut().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
          "    assert_ne!(self_cell.get().unwrap().value, 21);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
          "    let mut self_cell = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert!(self_cell.get().is_none());",
          "    assert_eq!(source.get().unwrap().value, 42);",
          "    assert!(self_cell.get_mut().is_some());",
          "    assert_eq!(self_cell.get_mut().unwrap().value, 42);",
          "    assert!(self_cell.get().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, 42);",
          "    assert!(self_cell.get() == source.get());",
          "    assert!(self_cell.get() != None);",
          "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);"
        ],
        "code": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
          "    let mut self_cell = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "    assert!(self_cell.get().is_none());",
          "    assert_eq!(source.get().unwrap().value, 42);",
          "    assert!(self_cell.get_mut().is_some());",
          "    assert_eq!(self_cell.get_mut().unwrap().value, 42);",
          "    assert!(self_cell.get().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, 42);",
          "    assert!(self_cell.get() == source.get());",
          "    assert!(self_cell.get() != None);",
          "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "    let source = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_cell.get(), None);",
          "    assert_eq!(source.get(), None);",
          "    self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "    let source_clone = source.clone();",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get(), Some(&source_clone));",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get(), Some(&source_clone));"
        ],
        "code": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "    let source = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get(), None);",
          "    assert_eq!(source.get(), None);",
          "    self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
          "    let source_clone = source.clone();",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get(), Some(&source_clone));",
          "    self_cell.clone_from(&source);",
          "    assert_eq!(self_cell.get(), Some(&source_clone));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::new();",
          "    let mut self_cell = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    source.set(CloneableStruct { value: 42 }).unwrap();",
          "    assert_eq!(self_cell.get(), None);",
          "    self_cell.clone_from(&source);",
          "    assert!(self_cell.get().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, 42);"
        ],
        "code": [
          "{",
          "    struct CloneableStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let source = OnceCell::new();",
          "    let mut self_cell = OnceCell::new();",
          "",
          "    self_cell.clone_from(&source);",
          "    source.set(CloneableStruct { value: 42 }).unwrap();",
          "    assert_eq!(self_cell.get(), None);",
          "    self_cell.clone_from(&source);",
          "    assert!(self_cell.get().is_some());",
          "    assert_eq!(self_cell.get().unwrap().value, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]