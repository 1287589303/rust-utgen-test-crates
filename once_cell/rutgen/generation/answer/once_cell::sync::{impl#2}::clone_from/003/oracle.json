[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestStruct {",
          "        fn clone(&self) -> Self {",
          "            TestStruct { value: self.value }",
          "        }",
          "    }",
          "",
          "    let cell_a = OnceCell::with_value(TestStruct { value: 10 });",
          "    let mut cell_b = OnceCell::new();",
          "    ",
          "    if let Some(value) = cell_a.get() {",
          "        let _ = cell_b.set(value.clone());",
          "    }",
          "    ",
          "    cell_b.clone_from(&cell_a);",
          "}"
        ],
        "oracle": [
          "    assert!(cell_b.get().is_some());",
          "    assert_eq!(cell_b.get().unwrap().value, 10);",
          "    assert_eq!(cell_b.get(), cell_a.get());",
          "    assert_ne!(cell_a.get() as *const _, cell_b.get() as *const _);",
          "    assert!(cell_b.get().unwrap() != cell_a.get().unwrap());",
          "    assert!(cell_a.get() == cell_b.get());"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestStruct {",
          "        fn clone(&self) -> Self {",
          "            TestStruct { value: self.value }",
          "        }",
          "    }",
          "",
          "    let cell_a = OnceCell::with_value(TestStruct { value: 10 });",
          "    let mut cell_b = OnceCell::new();",
          "    ",
          "    if let Some(value) = cell_a.get() {",
          "        let _ = cell_b.set(value.clone());",
          "    }",
          "    ",
          "    cell_b.clone_from(&cell_a);",
          "    assert!(cell_b.get().is_some());",
          "    assert_eq!(cell_b.get().unwrap().value, 10);",
          "    assert_eq!(cell_b.get(), cell_a.get());",
          "    assert_ne!(cell_a.get() as *const _, cell_b.get() as *const _);",
          "    assert!(cell_b.get().unwrap() != cell_a.get().unwrap());",
          "    assert!(cell_a.get() == cell_b.get());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestType {",
          "        data: String,",
          "    }",
          "",
          "    impl Clone for TestType {",
          "        fn clone(&self) -> Self {",
          "            TestType { data: self.data.clone() }",
          "        }",
          "    }",
          "",
          "    let cell_x = OnceCell::with_value(TestType { data: \"Hello\".to_string() });",
          "    let mut cell_y = OnceCell::new();",
          "    ",
          "    if let Some(value) = cell_x.get() {",
          "        let _ = cell_y.set(value.clone());",
          "    }",
          "    ",
          "    cell_y.clone_from(&cell_x);",
          "}"
        ],
        "oracle": [
          "    assert!(cell_y.get().is_some());",
          "    assert_eq!(cell_y.get().unwrap().data, \"Hello\");",
          "    assert!(cell_x.get().is_some());",
          "    assert_eq!(cell_x.get().unwrap().data, \"Hello\");",
          "    assert_ne!(cell_y.get() as *const _, cell_x.get() as *const _);",
          "    assert!(cell_y.get_mut().is_some());",
          "    assert_eq!(cell_y.get_mut().unwrap().data, \"Hello\");"
        ],
        "code": [
          "{",
          "    struct TestType {",
          "        data: String,",
          "    }",
          "",
          "    impl Clone for TestType {",
          "        fn clone(&self) -> Self {",
          "            TestType { data: self.data.clone() }",
          "        }",
          "    }",
          "",
          "    let cell_x = OnceCell::with_value(TestType { data: \"Hello\".to_string() });",
          "    let mut cell_y = OnceCell::new();",
          "    ",
          "    if let Some(value) = cell_x.get() {",
          "        let _ = cell_y.set(value.clone());",
          "    }",
          "    ",
          "    cell_y.clone_from(&cell_x);",
          "    assert!(cell_y.get().is_some());",
          "    assert_eq!(cell_y.get().unwrap().data, \"Hello\");",
          "    assert!(cell_x.get().is_some());",
          "    assert_eq!(cell_x.get().unwrap().data, \"Hello\");",
          "    assert_ne!(cell_y.get() as *const _, cell_x.get() as *const _);",
          "    assert!(cell_y.get_mut().is_some());",
          "    assert_eq!(cell_y.get_mut().unwrap().data, \"Hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherStruct {",
          "        number: usize,",
          "    }",
          "",
          "    impl Clone for AnotherStruct {",
          "        fn clone(&self) -> Self {",
          "            AnotherStruct { number: self.number }",
          "        }",
          "    }",
          "",
          "    let cell_1 = OnceCell::with_value(AnotherStruct { number: 5 });",
          "    let mut cell_2 = OnceCell::new();",
          "",
          "    if let Some(value) = cell_1.get() {",
          "        let _ = cell_2.set(value.clone());",
          "    }",
          "",
          "    cell_2.clone_from(&cell_1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell_2.get().unwrap().number, 5);",
          "    assert!(cell_1.get().is_some());",
          "    assert!(cell_2.get().is_some());",
          "    assert!(cell_1.get() != cell_2.get());",
          "    assert!(cell_1.get() != cell_2.get_mut());",
          "    assert!(cell_2.get_mut().unwrap().number == 5);"
        ],
        "code": [
          "{",
          "    struct AnotherStruct {",
          "        number: usize,",
          "    }",
          "",
          "    impl Clone for AnotherStruct {",
          "        fn clone(&self) -> Self {",
          "            AnotherStruct { number: self.number }",
          "        }",
          "    }",
          "",
          "    let cell_1 = OnceCell::with_value(AnotherStruct { number: 5 });",
          "    let mut cell_2 = OnceCell::new();",
          "",
          "    if let Some(value) = cell_1.get() {",
          "        let _ = cell_2.set(value.clone());",
          "    }",
          "",
          "    cell_2.clone_from(&cell_1);",
          "    assert_eq!(cell_2.get().unwrap().number, 5);",
          "    assert!(cell_1.get().is_some());",
          "    assert!(cell_2.get().is_some());",
          "    assert!(cell_1.get() != cell_2.get());",
          "    assert!(cell_1.get() != cell_2.get_mut());",
          "    assert!(cell_2.get_mut().unwrap().number == 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]