[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell = OnceCell::with_value(42);",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&42));"
        ],
        "code": [
          "{",
          "    let cell = OnceCell::with_value(42);",
          "    let result = cell.get();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell = OnceCell::with_value(String::from(\"Hello\"));",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), \"Hello\");",
          "    assert_eq!(result.unwrap().len(), 5);",
          "    assert!(Cell::<String>::from(result.unwrap()).get() == \"Hello\");"
        ],
        "code": [
          "{",
          "    let cell = OnceCell::with_value(String::from(\"Hello\"));",
          "    let result = cell.get();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), \"Hello\");",
          "    assert_eq!(result.unwrap().len(), 5);",
          "    assert!(Cell::<String>::from(result.unwrap()).get() == \"Hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        field: i32,",
          "    }",
          "",
          "    let cell = OnceCell::with_value(TestStruct { field: 10 });",
          "    let result = cell.get();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().field, 10);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        field: i32,",
          "    }",
          "",
          "    let cell = OnceCell::with_value(TestStruct { field: 10 });",
          "    let result = cell.get();",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().field, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]