[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    let result = cell.get_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    cell.set(42).unwrap();",
          "    let result_after_set = cell.get_mut();",
          "    assert!(result_after_set.is_some());",
          "    *result_after_set.unwrap() = 84;",
          "    assert_eq!(cell.get(), Some(&84));"
        ],
        "code": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    let result = cell.get_mut();",
          "    assert_eq!(result, None);",
          "    cell.set(42).unwrap();",
          "    let result_after_set = cell.get_mut();",
          "    assert!(result_after_set.is_some());",
          "    *result_after_set.unwrap() = 84;",
          "    assert_eq!(cell.get(), Some(&84));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    let value_mut = cell.get_mut().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&42));",
          "    *value_mut = 50;",
          "    assert_eq!(cell.get_mut().unwrap(), &mut 50);",
          "    assert_eq!(cell.get(), Some(&50));",
          "    assert!(cell.get_mut().is_some());",
          "    let mut cell_empty: OnceCell<u32> = OnceCell::new();",
          "    assert!(cell_empty.get_mut().is_none());"
        ],
        "code": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    let value_mut = cell.get_mut().unwrap();",
          "    assert_eq!(cell.get(), Some(&42));",
          "    *value_mut = 50;",
          "    assert_eq!(cell.get_mut().unwrap(), &mut 50);",
          "    assert_eq!(cell.get(), Some(&50));",
          "    assert!(cell.get_mut().is_some());",
          "    let mut cell_empty: OnceCell<u32> = OnceCell::new();",
          "    assert!(cell_empty.get_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    {",
          "        let value_mut = cell.get_mut().unwrap();",
          "        *value_mut = 100;",
          "    }",
          "    let value_after_mutation = cell.get().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&100));",
          "    assert!(cell.get_mut().is_some());",
          "    cell.take();",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(cell.get_mut(), None);"
        ],
        "code": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    {",
          "        let value_mut = cell.get_mut().unwrap();",
          "        *value_mut = 100;",
          "    }",
          "    let value_after_mutation = cell.get().unwrap();",
          "    assert_eq!(cell.get(), Some(&100));",
          "    assert!(cell.get_mut().is_some());",
          "    cell.take();",
          "    assert!(cell.get().is_none());",
          "    assert_eq!(cell.get_mut(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    {",
          "        let value_mut1 = cell.get_mut().unwrap();",
          "        *value_mut1 = 100;",
          "        ",
          "        let value_mut2 = cell.get_mut().unwrap();",
          "        *value_mut2 += 50;",
          "    }",
          "    let value_after_double_mutation = cell.get().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&150));",
          "    assert_eq!(*cell.get_mut().unwrap(), 150);",
          "    assert!(cell.get_mut().is_some());",
          "    assert!(cell.get_mut().is_some());",
          "    cell.set(30).unwrap();",
          "    assert_eq!(cell.get(), Some(&30));",
          "    assert!(cell.get_mut().is_none());",
          "    cell.set(10).unwrap();",
          "    assert_eq!(cell.get(), Some(&10));",
          "    assert!(cell.get_mut().is_none());"
        ],
        "code": [
          "{",
          "    let mut cell: OnceCell<u32> = OnceCell::new();",
          "    cell.set(42).unwrap();",
          "    {",
          "        let value_mut1 = cell.get_mut().unwrap();",
          "        *value_mut1 = 100;",
          "        ",
          "        let value_mut2 = cell.get_mut().unwrap();",
          "        *value_mut2 += 50;",
          "    }",
          "    let value_after_double_mutation = cell.get().unwrap();",
          "    assert_eq!(cell.get(), Some(&150));",
          "    assert_eq!(*cell.get_mut().unwrap(), 150);",
          "    assert!(cell.get_mut().is_some());",
          "    assert!(cell.get_mut().is_some());",
          "    cell.set(30).unwrap();",
          "    assert_eq!(cell.get(), Some(&30));",
          "    assert!(cell.get_mut().is_none());",
          "    cell.set(10).unwrap();",
          "    assert_eq!(cell.get(), Some(&10));",
          "    assert!(cell.get_mut().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]