[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<i32, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| 42)),",
          "    };",
          "    let value = *lazy.deref();",
          "}"
        ],
        "oracle": [
          "    let lazy: Lazy<i32, _> = Lazy { cell: OnceCell { inner: UnsafeCell::new(None) }, init: Cell::new(Some(|| 42)) };",
          "    let value = *lazy.deref();",
          "    assert_eq!(value, 42);"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<i32, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| 42)),",
          "    };",
          "    let value = *lazy.deref();",
          "    let lazy: Lazy<i32, _> = Lazy { cell: OnceCell { inner: UnsafeCell::new(None) }, init: Cell::new(Some(|| 42)) };",
          "    let value = *lazy.deref();",
          "    assert_eq!(value, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<String, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| \"Hello\".to_string())),",
          "    };",
          "    let value = lazy.deref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, \"Hello\");",
          "    assert!(lazy.cell.inner.get().is_some());",
          "    assert_eq!(lazy.init.get(), None);"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<String, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| \"Hello\".to_string())),",
          "    };",
          "    let value = lazy.deref();",
          "    assert_eq!(value, \"Hello\");",
          "    assert!(lazy.cell.inner.get().is_some());",
          "    assert_eq!(lazy.init.get(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let lazy: Lazy<i32, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(None),",
          "    };",
          "    let value = *lazy.deref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert!(lazy.init.get().is_none());",
          "    assert!(std::panic::catch_unwind(|| lazy.deref()).is_err());"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<i32, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(None),",
          "    };",
          "    let value = *lazy.deref();",
          "    assert_eq!(lazy.cell.get(), None);",
          "    assert!(lazy.init.get().is_none());",
          "    assert!(std::panic::catch_unwind(|| lazy.deref()).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<f64, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| 3.14)),",
          "    };",
          "    let value = *lazy.deref();",
          "}"
        ],
        "oracle": [
          "    let lazy: Lazy<f64, _> = Lazy { cell: OnceCell { inner: UnsafeCell::new(None) }, init: Cell::new(Some(|| 3.14)) };",
          "    let value = *lazy.deref();",
          "    assert_eq!(value, 3.14);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert_eq!(*lazy.cell.get().unwrap(), 3.14);",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<f64, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| 3.14)),",
          "    };",
          "    let value = *lazy.deref();",
          "    let lazy: Lazy<f64, _> = Lazy { cell: OnceCell { inner: UnsafeCell::new(None) }, init: Cell::new(Some(|| 3.14)) };",
          "    let value = *lazy.deref();",
          "    assert_eq!(value, 3.14);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert_eq!(*lazy.cell.get().unwrap(), 3.14);",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let lazy: Lazy<bool, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| true)),",
          "    };",
          "    let value = *lazy.deref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*lazy.deref(), true);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.cell.get(), Some(&true));",
          "    assert!(lazy.init.get().is_none());"
        ],
        "code": [
          "{",
          "    let lazy: Lazy<bool, _> = Lazy {",
          "        cell: OnceCell {",
          "            inner: UnsafeCell::new(None),",
          "        },",
          "        init: Cell::new(Some(|| true)),",
          "    };",
          "    let value = *lazy.deref();",
          "    assert_eq!(*lazy.deref(), true);",
          "    assert!(lazy.cell.get().is_some());",
          "    assert!(lazy.init.get().is_none());",
          "    assert_eq!(lazy.cell.get(), Some(&true));",
          "    assert!(lazy.init.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]