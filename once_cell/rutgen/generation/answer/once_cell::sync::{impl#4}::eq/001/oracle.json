[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(cell1.eq(&cell2) == true);",
          "    cell1.set(5).unwrap();",
          "    assert!(cell1.eq(&cell2) == false);",
          "    cell2.set(5).unwrap();",
          "    assert!(cell1.eq(&cell2) == true);",
          "    cell2.set(10).unwrap();",
          "    assert!(cell1.eq(&cell2) == false);"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert!(cell1.eq(&cell2) == true);",
          "    cell1.set(5).unwrap();",
          "    assert!(cell1.eq(&cell2) == false);",
          "    cell2.set(5).unwrap();",
          "    assert!(cell1.eq(&cell2) == true);",
          "    cell2.set(10).unwrap();",
          "    assert!(cell1.eq(&cell2) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(!cell1.eq(&cell2));",
          "    cell1.set(42).unwrap();",
          "    assert!(cell1.eq(&cell2));",
          "    let cell3: OnceCell<i32> = OnceCell::new();",
          "    assert!(!cell1.eq(&cell3));",
          "    cell3.set(30).unwrap();",
          "    assert!(!cell1.eq(&cell3));",
          "    cell3.set(42).unwrap();",
          "    assert!(cell1.eq(&cell3));"
        ],
        "code": [
          "{",
          "    let cell1: OnceCell<i32> = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "    assert!(!cell1.eq(&cell2));",
          "    cell1.set(42).unwrap();",
          "    assert!(cell1.eq(&cell2));",
          "    let cell3: OnceCell<i32> = OnceCell::new();",
          "    assert!(!cell1.eq(&cell3));",
          "    cell3.set(30).unwrap();",
          "    assert!(!cell1.eq(&cell3));",
          "    cell3.set(42).unwrap();",
          "    assert!(cell1.eq(&cell3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3 = OnceCell::with_value(42);",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "    let cell4: OnceCell<i32> = OnceCell::new();",
          "    cell4.set(42).unwrap();",
          "    assert_eq!(cell1.eq(&cell4), true);",
          "    let cell5: OnceCell<i32> = OnceCell::new();",
          "    cell5.set(43).unwrap();",
          "    assert_eq!(cell1.eq(&cell5), false);"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2: OnceCell<i32> = OnceCell::new();",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3 = OnceCell::with_value(42);",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "    let cell4: OnceCell<i32> = OnceCell::new();",
          "    cell4.set(42).unwrap();",
          "    assert_eq!(cell1.eq(&cell4), true);",
          "    let cell5: OnceCell<i32> = OnceCell::new();",
          "    cell5.set(43).unwrap();",
          "    assert_eq!(cell1.eq(&cell5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(cell1.eq(&cell2));",
          "    assert_eq!(cell1.get(), cell2.get());",
          "    let cell3 = OnceCell::with_value(100);",
          "    assert!(!cell1.eq(&cell3));",
          "    assert!(cell1.eq(&cell1));",
          "    let cell4 = OnceCell::new();",
          "    assert!(!cell1.eq(&cell4));",
          "    let cell5 = OnceCell::new();",
          "    assert!(cell5.eq(&cell5));"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(42);",
          "    cell1.eq(&cell2);",
          "    assert!(cell1.eq(&cell2));",
          "    assert_eq!(cell1.get(), cell2.get());",
          "    let cell3 = OnceCell::with_value(100);",
          "    assert!(!cell1.eq(&cell3));",
          "    assert!(cell1.eq(&cell1));",
          "    let cell4 = OnceCell::new();",
          "    assert!(!cell1.eq(&cell4));",
          "    let cell5 = OnceCell::new();",
          "    assert!(cell5.eq(&cell5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(43);",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert!(!cell1.eq(&cell2));"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(42);",
          "    let cell2 = OnceCell::with_value(43);",
          "    cell1.eq(&cell2);",
          "    assert!(!cell1.eq(&cell2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\");",
          "    let cell2 = OnceCell::with_value(\"World\");",
          "    cell1.eq(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3 = OnceCell::with_value(\"Hello\");",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    assert_eq!(cell4.eq(&cell3), false);"
        ],
        "code": [
          "{",
          "    let cell1 = OnceCell::with_value(\"Hello\");",
          "    let cell2 = OnceCell::with_value(\"World\");",
          "    cell1.eq(&cell2);",
          "    assert_eq!(cell1.eq(&cell2), false);",
          "    let cell3 = OnceCell::with_value(\"Hello\");",
          "    assert_eq!(cell1.eq(&cell3), true);",
          "    let cell4 = OnceCell::new();",
          "    assert_eq!(cell1.eq(&cell4), false);",
          "    assert_eq!(cell4.eq(&cell3), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]