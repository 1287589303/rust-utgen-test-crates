[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl fmt::Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.data)",
          "        }",
          "    }",
          "",
          "    let value = TestValue { data: 42 };",
          "    let cell = OnceCell::with_value(value);",
          "    let _ = fmt::Debug::fmt(&cell, &mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), Some(&TestValue { data: 42 }));",
          "    assert!(format!(\"{:?}\", cell) == \"OnceCell(TestValue(42))\");",
          "    assert!(cell.get().is_some());"
        ],
        "code": [
          "{",
          "    struct TestValue {",
          "        data: i32,",
          "    }",
          "",
          "    impl fmt::Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.data)",
          "        }",
          "    }",
          "",
          "    let value = TestValue { data: 42 };",
          "    let cell = OnceCell::with_value(value);",
          "    let _ = fmt::Debug::fmt(&cell, &mut fmt::Formatter::new());",
          "    assert_eq!(cell.get(), Some(&TestValue { data: 42 }));",
          "    assert!(format!(\"{:?}\", cell) == \"OnceCell(TestValue(42))\");",
          "    assert!(cell.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherTestValue {",
          "        name: String,",
          "    }",
          "",
          "    impl fmt::Debug for AnotherTestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherTestValue({})\", self.name)",
          "        }",
          "    }",
          "",
          "    let value = AnotherTestValue { name: \"Test\".to_string() };",
          "    let cell = OnceCell::with_value(value);",
          "    let _ = fmt::Debug::fmt(&cell, &mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    let value = AnotherTestValue { name: \"Test\".to_string() };",
          "    let cell = OnceCell::with_value(value);",
          "    let debug_output = fmt::format(fmt::Debug::fmt(&cell, &mut fmt::Formatter::new()));",
          "    assert!(debug_output == \"OnceCell(AnotherTestValue(Test))\");",
          "    ",
          "    let cell_uninit: OnceCell<AnotherTestValue> = OnceCell::new();",
          "    let debug_output_uninit = fmt::format(fmt::Debug::fmt(&cell_uninit, &mut fmt::Formatter::new()));",
          "    assert!(debug_output_uninit == \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    struct AnotherTestValue {",
          "        name: String,",
          "    }",
          "",
          "    impl fmt::Debug for AnotherTestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"AnotherTestValue({})\", self.name)",
          "        }",
          "    }",
          "",
          "    let value = AnotherTestValue { name: \"Test\".to_string() };",
          "    let cell = OnceCell::with_value(value);",
          "    let _ = fmt::Debug::fmt(&cell, &mut fmt::Formatter::new());",
          "    let value = AnotherTestValue { name: \"Test\".to_string() };",
          "    let cell = OnceCell::with_value(value);",
          "    let debug_output = fmt::format(fmt::Debug::fmt(&cell, &mut fmt::Formatter::new()));",
          "    assert!(debug_output == \"OnceCell(AnotherTestValue(Test))\");",
          "    ",
          "    let cell_uninit: OnceCell<AnotherTestValue> = OnceCell::new();",
          "    let debug_output_uninit = fmt::format(fmt::Debug::fmt(&cell_uninit, &mut fmt::Formatter::new()));",
          "    assert!(debug_output_uninit == \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]