[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell.get(), None);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"OnceCell(Uninit)\");"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<i32> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "    assert_eq!(cell.get(), None);",
          "    assert!(result.is_ok());",
          "    assert_eq!(formatter.to_string(), \"OnceCell(Uninit)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(formatter.to_string().contains(\"OnceCell(Uninit)\"));"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<String> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert!(formatter.to_string().contains(\"OnceCell(Uninit)\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, fmt::Result::Ok);",
          "    assert!(formatter.debug_tuple(\"OnceCell\").to_str().contains(\"OnceCell(Uninit)\"));",
          "    assert!(cell.get().is_none());"
        ],
        "code": [
          "{",
          "    let cell: OnceCell<f64> = OnceCell::new();",
          "    let formatter = &mut fmt::Formatter::new();",
          "    let result = cell.fmt(formatter);",
          "    assert_eq!(result, fmt::Result::Ok);",
          "    assert!(formatter.debug_tuple(\"OnceCell\").to_str().contains(\"OnceCell(Uninit)\"));",
          "    assert!(cell.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]