[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestData {",
          "        fn clone(&self) -> Self {",
          "            TestData { value: self.value }",
          "        }",
          "    }",
          "",
          "    let mut cell1 = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(TestData { value: 42 });",
          "",
          "    // Set cell1 with a cloned value from cell2",
          "    cell1.set(TestData { value: 42 }).unwrap();",
          "",
          "    // Clone cell2 into cell1; asserts that both cells have valid mutable references",
          "    cell1.clone_from(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.get(), Some(&TestData { value: 42 }));",
          "    assert_eq!(cell2.get(), Some(&TestData { value: 42 }));",
          "    assert!(cell1.get_mut().is_some());",
          "    assert!(cell2.get().is_some());",
          "    assert_eq!(cell1.get().unwrap().value, cell2.get().unwrap().value);",
          "    assert_eq!(cell1.get_mut().unwrap().value, cell2.get().unwrap().value);",
          "    assert!(cell1.get_mut().unwrap().value == cell2.get().unwrap().value);",
          "    assert!(cell1.get_mut().is_some() && cell2.get().is_some());"
        ],
        "code": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestData {",
          "        fn clone(&self) -> Self {",
          "            TestData { value: self.value }",
          "        }",
          "    }",
          "",
          "    let mut cell1 = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(TestData { value: 42 });",
          "",
          "    // Set cell1 with a cloned value from cell2",
          "    cell1.set(TestData { value: 42 }).unwrap();",
          "",
          "    // Clone cell2 into cell1; asserts that both cells have valid mutable references",
          "    cell1.clone_from(&cell2);",
          "    assert_eq!(cell1.get(), Some(&TestData { value: 42 }));",
          "    assert_eq!(cell2.get(), Some(&TestData { value: 42 }));",
          "    assert!(cell1.get_mut().is_some());",
          "    assert!(cell2.get().is_some());",
          "    assert_eq!(cell1.get().unwrap().value, cell2.get().unwrap().value);",
          "    assert_eq!(cell1.get_mut().unwrap().value, cell2.get().unwrap().value);",
          "    assert!(cell1.get_mut().unwrap().value == cell2.get().unwrap().value);",
          "    assert!(cell1.get_mut().is_some() && cell2.get().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestData {",
          "        fn clone(&self) -> Self {",
          "            TestData { value: self.value }",
          "        }",
          "    }",
          "",
          "    let mut cell1 = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(TestData { value: 100 });",
          "",
          "    // Set cell1 with a different value",
          "    cell1.set(TestData { value: 50 }).unwrap();",
          "",
          "    // Clone cell2 into cell1; asserts that both cells have valid mutable references",
          "    cell1.clone_from(&cell2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cell1.get(), Some(&TestData { value: 100 }));",
          "    assert_eq!(cell2.get(), Some(&TestData { value: 100 }));",
          "    assert_ne!(cell1.get(), Some(&TestData { value: 50 }));"
        ],
        "code": [
          "{",
          "    struct TestData {",
          "        value: i32,",
          "    }",
          "",
          "    impl Clone for TestData {",
          "        fn clone(&self) -> Self {",
          "            TestData { value: self.value }",
          "        }",
          "    }",
          "",
          "    let mut cell1 = OnceCell::new();",
          "    let cell2 = OnceCell::with_value(TestData { value: 100 });",
          "",
          "    // Set cell1 with a different value",
          "    cell1.set(TestData { value: 50 }).unwrap();",
          "",
          "    // Clone cell2 into cell1; asserts that both cells have valid mutable references",
          "    cell1.clone_from(&cell2);",
          "    assert_eq!(cell1.get(), Some(&TestData { value: 100 }));",
          "    assert_eq!(cell2.get(), Some(&TestData { value: 100 }));",
          "    assert_ne!(cell1.get(), Some(&TestData { value: 50 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]