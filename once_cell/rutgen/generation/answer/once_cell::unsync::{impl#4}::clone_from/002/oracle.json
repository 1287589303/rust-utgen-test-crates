[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let source = OnceCell::with_value(42);",
          "    let mut self_none: OnceCell<i32> = OnceCell::new();",
          "    self_none.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert!(self_none.get().is_none());",
          "    assert_eq!(self_none.clone().get(), Some(&42));"
        ],
        "code": [
          "{",
          "    let source = OnceCell::with_value(42);",
          "    let mut self_none: OnceCell<i32> = OnceCell::new();",
          "    self_none.clone_from(&source);",
          "    assert!(self_none.get().is_none());",
          "    assert_eq!(self_none.clone().get(), Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_some = OnceCell::with_value(42);",
          "    let source: OnceCell<i32> = OnceCell::new();",
          "    self_some.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_some.get(), None);",
          "    assert!(self_some.get_mut().is_some());",
          "    assert_eq!(source.get(), None);",
          "    assert_eq!(self_some.try_insert(0), Ok(&0));",
          "    assert_eq!(source.get(), Some(&0));",
          "    assert!(self_some.get_mut().is_some());",
          "    assert_eq!(self_some.get(), Some(&0));",
          "    assert_eq!(self_some.clone(), self_some);"
        ],
        "code": [
          "{",
          "    let mut self_some = OnceCell::with_value(42);",
          "    let source: OnceCell<i32> = OnceCell::new();",
          "    self_some.clone_from(&source);",
          "    assert_eq!(self_some.get(), None);",
          "    assert!(self_some.get_mut().is_some());",
          "    assert_eq!(source.get(), None);",
          "    assert_eq!(self_some.try_insert(0), Ok(&0));",
          "    assert_eq!(source.get(), Some(&0));",
          "    assert!(self_some.get_mut().is_some());",
          "    assert_eq!(self_some.get(), Some(&0));",
          "    assert_eq!(self_some.clone(), self_some);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let source: OnceCell<i32> = OnceCell::new();",
          "    let mut self_none: OnceCell<i32> = OnceCell::new();",
          "    self_none.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_none.get(), None);",
          "    assert_eq!(source.get(), None);",
          "    assert!(self_none.get_mut().is_none());",
          "    assert!(self_none.get().is_none());"
        ],
        "code": [
          "{",
          "    let source: OnceCell<i32> = OnceCell::new();",
          "    let mut self_none: OnceCell<i32> = OnceCell::new();",
          "    self_none.clone_from(&source);",
          "    assert_eq!(self_none.get(), None);",
          "    assert_eq!(source.get(), None);",
          "    assert!(self_none.get_mut().is_none());",
          "    assert!(self_none.get().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]