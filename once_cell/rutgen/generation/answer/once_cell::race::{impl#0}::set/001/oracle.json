[
  {
    "uses": [
      "use core::num::NonZeroUsize;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let non_zero_value = NonZeroUsize::new(1).unwrap(); // value to set",
          "    let _ = instance.set(non_zero_value); // set with an initial value to make inner non-zero",
          "    let another_non_zero_value = NonZeroUsize::new(2).unwrap(); // value to set again",
          "    let result = instance.set(another_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(instance.inner.load(Ordering::Relaxed), 1);"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let non_zero_value = NonZeroUsize::new(1).unwrap(); // value to set",
          "    let _ = instance.set(non_zero_value); // set with an initial value to make inner non-zero",
          "    let another_non_zero_value = NonZeroUsize::new(2).unwrap(); // value to set again",
          "    let result = instance.set(another_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "    assert!(result.is_err());",
          "    assert_eq!(result, Err(()));",
          "    assert_eq!(instance.inner.load(Ordering::Relaxed), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let initial_value = NonZeroUsize::new(10).unwrap(); // initial non-zero value",
          "    let _ = instance.set(initial_value); // set the initial value",
          "    let large_non_zero_value = NonZeroUsize::new(100).unwrap(); // large value to set",
          "    let result = instance.set(large_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "}"
        ],
        "oracle": [
          "    instance.set(NonZeroUsize::new(100).unwrap()); // expected to return Err(())"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let initial_value = NonZeroUsize::new(10).unwrap(); // initial non-zero value",
          "    let _ = instance.set(initial_value); // set the initial value",
          "    let large_non_zero_value = NonZeroUsize::new(100).unwrap(); // large value to set",
          "    let result = instance.set(large_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "    instance.set(NonZeroUsize::new(100).unwrap()); // expected to return Err(())",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let initial_value = NonZeroUsize::new(5).unwrap(); // initial non-zero value",
          "    let _ = instance.set(initial_value); // set the initial value",
          "    let boundary_non_zero_value = NonZeroUsize::new(1).unwrap(); // boundary value",
          "    let result = instance.set(boundary_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(()));"
        ],
        "code": [
          "{",
          "    use core::num::NonZeroUsize;",
          "",
          "    let instance = OnceNonZeroUsize::new();",
          "    let initial_value = NonZeroUsize::new(5).unwrap(); // initial non-zero value",
          "    let _ = instance.set(initial_value); // set the initial value",
          "    let boundary_non_zero_value = NonZeroUsize::new(1).unwrap(); // boundary value",
          "    let result = instance.set(boundary_non_zero_value); // expected to return Err(())",
          "",
          "    // No assertion here, just the call",
          "    assert_eq!(result, Err(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]