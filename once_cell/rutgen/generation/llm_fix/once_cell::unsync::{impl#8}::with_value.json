{
  "name": "once_cell::unsync::{impl#8}::with_value",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:475:9:477:10",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: OnceCell { inner: UnsafeCell::new(Some(value)) }\n"
      ],
      "input_infer": "Test input conditions or ranges: provide a value of type T that is non-null and valid, including boundary cases such as the smallest and largest possible values for primitive types, and also consider special cases for types like String, structs, or enums.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = 42i32;",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cell.get(), Some(&42));",
                "    assert!(cell.get_mut().is_some());",
                "    assert_eq!(cell.inner.get().is_some(), true);",
                "    assert!(matches!(cell, OnceCell { inner: UnsafeCell::new(Some(42)) }));"
              ],
              "code": [
                "{",
                "   let value = 42i32;",
                "   let cell = OnceCell::with_value(value);",
                "   assert_eq!(cell.get(), Some(&42));",
                "   assert!(cell.get_mut().is_some());",
                "   assert_eq!(unsafe { (*cell.inner.get()).is_some() }, true);",
                "   assert!(matches!(cell, OnceCell { inner: UnsafeCell::new(Some(42)) }));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = 0u32;",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(matches!(cell.inner.get(), Some(Some(value))));",
                "    assert!(cell.get_mut().is_some());",
                "    assert_eq!(cell.take(), Some(value));",
                "    assert!(cell.get().is_none());"
              ],
              "code": [
                "{",
                "    let value = 0u32;",
                "    let cell = OnceCell::with_value(value);",
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(matches!(cell.inner.get(), Some(Some(value))));",
                "    assert!(cell.get_mut().is_some());",
                "    assert_eq!(cell.take(), Some(value));",
                "    assert!(cell.get().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = -1i64;",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    let value = -1i64;",
                "    let cell = OnceCell::with_value(value);",
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(cell.inner.get().is_some());",
                "    assert!(cell.inner.get().unwrap().is_some());"
              ],
              "code": [
                "{",
                "    let value = -1i64;",
                "    let cell = OnceCell::with_value(value);",
                "    let value = -1i64;",
                "    let cell = OnceCell::with_value(value);",
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(cell.inner.get().is_some());",
                "    assert!(cell.inner.get().unwrap().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = String::from(\"Hello, World!\");",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert!(cell.get().is_some());",
                "    assert_eq!(cell.get().unwrap(), &String::from(\"Hello, World!\"));",
                "    assert!(cell.get_mut().is_some());",
                "    assert_eq!(cell.get_mut().unwrap(), &mut String::from(\"Hello, World!\"));",
                "    assert!(cell.take().is_some());",
                "    assert_eq!(cell.into_inner().is_some(), true);"
              ],
              "code": [
                "   {",
                "       let value = String::from(\"Hello, World!\");",
                "       let mut cell = OnceCell::with_value(value);",
                "       assert!(cell.get().is_some());",
                "       assert_eq!(cell.get().unwrap(), &String::from(\"Hello, World!\"));",
                "       assert!(cell.get_mut().is_some());",
                "       assert_eq!(cell.get_mut().unwrap(), &mut String::from(\"Hello, World!\"));",
                "       assert!(cell.take().is_some());",
                "       assert_eq!(cell.into_inner().is_some(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = 3.14f64;",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    let value = 3.14f64;",
                "    let cell = OnceCell::with_value(value);",
                "    assert!(cell.get().is_some());",
                "    assert_eq!(*cell.get().unwrap(), value);",
                "    assert!(matches!(cell.inner.get(), Some(_)));",
                "    assert!(std::ptr::eq(cell.inner.get().as_ptr(), cell.inner.get().as_ptr()));",
                "    assert!(cell.get_mut().is_some());",
                "    assert_eq!(cell.get_mut().unwrap(), &mut value);"
              ],
              "code": [
                "{",
                "   let value = 3.14f64;",
                "   let cell = OnceCell::with_value(value);",
                "   let value = 3.14f64;",
                "   let cell = OnceCell::with_value(value);",
                "   assert!(cell.get().is_some());",
                "   assert_eq!(*cell.get().unwrap(), value);",
                "   assert!(matches!(unsafe { &*cell.inner.get() }, Some(_)));",
                "  assert!(std::ptr::eq(cell.inner.get().as_ref().map(|x| x as *const _), cell.inner.get().as_ref().map(|x| x as *const _)));  ",
                "  assert!(cell.get_mut().is_some());  ",
                "  assert_eq!(cell.get_mut().unwrap(), &mut value);  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value = 'A';",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(cell.get_mut().is_none());",
                "    assert!(cell.take().is_none());",
                "    assert!(cell.into_inner().is_none());",
                "    assert_eq!(cell.set('B'), Ok(()));",
                "    assert_eq!(cell.get(), Some(&'B'));",
                "    assert!(cell.try_insert('C').is_ok());",
                "    assert_eq!(cell.get_or_init(|| 'D'), & 'B');",
                "    assert_eq!(cell.get_or_try_init(|| Ok('E')), Ok(&'B'));"
              ],
              "code": [
                "{",
                "    let value = 'A';",
                "    let cell = OnceCell::with_value(value);",
                "    assert_eq!(cell.get(), Some(&value));",
                "    assert!(cell.get_mut().is_none());",
                "    assert!(cell.take().is_none());",
                "    assert!(cell.into_inner().is_none());",
                "    assert_eq!(cell.set('B'), Ok(()));",
                "    assert_eq!(cell.get(), Some(&'B'));",
                "    assert!(cell.try_insert('C').is_ok());",
                "    assert_eq!(cell.get_or_init(|| 'D'), & 'B');",
                "    assert_eq!(cell.get_or_try_init(|| Ok('E')), Ok(&'B'));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        x: i32,",
                "        y: f64,",
                "    }",
                "    let value = MyStruct { x: 10, y: 20.5 };",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cell.inner.get(), Some(&MyStruct { x: 10, y: 20.5 }));",
                "    assert!(cell.inner.get().is_some());",
                "    assert!(!cell.inner.get_mut().is_some());",
                "    assert_eq!(cell.inner.get(), Some(&value));",
                "    assert_eq!(cell.inner.get().map(|v| v.x), Some(10));",
                "    assert_eq!(cell.inner.get().map(|v| v.y), Some(20.5));"
              ],
              "code": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        x: i32,",
                "        y: f64,",
                "    }",
                "    let value = MyStruct { x: 10, y: 20.5 };",
                "    let cell = OnceCell::with_value(value);",
                "    assert_eq!(cell.inner.get(), Some(&MyStruct { x: 10, y: 20.5 }));",
                "  assert!(cell.inner.get().as_ref().is_some());",
                "  assert!(!cell.inner.get_mut().is_some());",
                "  assert_eq!(cell.inner.get().as_ref(), Some(&value));",
                "    assert_eq!(cell.inner.get().map(|v| v.x), Some(10));",
                "    assert_eq!(cell.inner.get().map(|v| v.y), Some(20.5));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Debug)]",
                "    enum MyEnum {",
                "        Variant1,",
                "        Variant2(i32),",
                "    }",
                "    let value = MyEnum::Variant2(100);",
                "    let cell = OnceCell::with_value(value);",
                "}"
              ],
              "oracle": [
                "    assert!(cell.get().is_some());",
                "    assert_eq!(*cell.get().unwrap(), MyEnum::Variant2(100));",
                "    assert_eq!(cell.inner.get().is_null(), false);"
              ],
              "code": [
                "{",
                "   #[derive(Debug, PartialEq)]",
                "   enum MyEnum {",
                "       Variant1,",
                "       Variant2(i32),",
                "   }",
                "   let value = MyEnum::Variant2(100);",
                "   let cell = OnceCell::with_value(value);",
                "   assert!(cell.get().is_some());",
                "   assert_eq!(*cell.get().unwrap(), MyEnum::Variant2(100));",
                "   assert_eq!(cell.inner.get().is_null(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}