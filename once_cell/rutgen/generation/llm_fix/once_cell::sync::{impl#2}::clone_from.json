{
  "name": "once_cell::sync::{impl#2}::clone_from",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:926:9:931:10",
  "fn_tests": [
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: (self.get_mut(), source.get()) matches _ at line 929 is true\n"
      ],
      "input_infer": "self must be an initialized OnceCell instance that can be mutated and source must be a initialized OnceCell instance that can be cloned; both cells should contain values of a cloneable type to satisfy the match statement, testing with both non-empty and empty cells.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
                "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "",
                "    self_cell.clone_from(&source);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_cell.get().unwrap().value, 42);",
                "    assert!(self_cell.get_mut().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
                "    assert_ne!(self_cell.get().unwrap().value, 21);"
              ],
              "code": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
                "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get().unwrap().value, 42);",
                "    assert!(self_cell.get_mut().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
                "    assert_ne!(self_cell.get().unwrap().value, 21);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
                "    let mut self_cell = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "}"
              ],
              "oracle": [
                "    assert!(self_cell.get().is_none());",
                "    assert_eq!(source.get().unwrap().value, 42);",
                "    assert!(self_cell.get_mut().is_some());",
                "    assert_eq!(self_cell.get_mut().unwrap().value, 42);",
                "    assert!(self_cell.get().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, 42);",
                "    assert!(self_cell.get() == source.get());",
                "    assert!(self_cell.get() != None);",
                "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);"
              ],
              "code": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::with_value(CloneableStruct { value: 42 });",
                "    let mut self_cell = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "    assert!(self_cell.get().is_none());",
                "    assert_eq!(source.get().unwrap().value, 42);",
                "    assert!(self_cell.get_mut().is_some());",
                "    assert_eq!(self_cell.get_mut().unwrap().value, 42);",
                "    assert!(self_cell.get().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, 42);",
                "    assert!(self_cell.get() == source.get());",
                "    assert!(self_cell.get() != None);",
                "    assert_eq!(self_cell.get().unwrap().value, source.get().unwrap().value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "    let source = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(self_cell.get(), None);",
                "    assert_eq!(source.get(), None);",
                "    self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "    let source_clone = source.clone();",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get(), Some(&source_clone));",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get(), Some(&source_clone));"
              ],
              "code": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let mut self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "    let source = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get(), None);",
                "    assert_eq!(source.get(), None);",
                "    self_cell = OnceCell::with_value(CloneableStruct { value: 21 });",
                "    let source_clone = source.clone();",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get(), Some(&source_clone));",
                "    self_cell.clone_from(&source);",
                "    assert_eq!(self_cell.get(), Some(&source_clone));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::new();",
                "    let mut self_cell = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "}"
              ],
              "oracle": [
                "    source.set(CloneableStruct { value: 42 }).unwrap();",
                "    assert_eq!(self_cell.get(), None);",
                "    self_cell.clone_from(&source);",
                "    assert!(self_cell.get().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, 42);"
              ],
              "code": [
                "{",
                "    struct CloneableStruct {",
                "        value: i32,",
                "    }",
                "    ",
                "    let source = OnceCell::new();",
                "    let mut self_cell = OnceCell::new();",
                "",
                "    self_cell.clone_from(&source);",
                "    source.set(CloneableStruct { value: 42 }).unwrap();",
                "    assert_eq!(self_cell.get(), None);",
                "    self_cell.clone_from(&source);",
                "    assert!(self_cell.get().is_some());",
                "    assert_eq!(self_cell.get().unwrap().value, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: (self.get_mut(), source.get()) matches (Some(this), Some(source)) at line 927 is true\n"
      ],
      "input_infer": "self.get_mut() should return Some reference to a mutable T, source.get() should return Some reference to an immutable T, and both T instances must be of the same type that implements Clone.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    impl Clone for TestStruct {",
                "        fn clone(&self) -> Self {",
                "            TestStruct { value: self.value }",
                "        }",
                "    }",
                "",
                "    let cell_a = OnceCell::with_value(TestStruct { value: 10 });",
                "    let mut cell_b = OnceCell::new();",
                "    ",
                "    if let Some(value) = cell_a.get() {",
                "        let _ = cell_b.set(value.clone());",
                "    }",
                "    ",
                "    cell_b.clone_from(&cell_a);",
                "}"
              ],
              "oracle": [
                "    assert!(cell_b.get().is_some());",
                "    assert_eq!(cell_b.get().unwrap().value, 10);",
                "    assert_eq!(cell_b.get(), cell_a.get());",
                "    assert_ne!(cell_a.get() as *const _, cell_b.get() as *const _);",
                "    assert!(cell_b.get().unwrap() != cell_a.get().unwrap());",
                "    assert!(cell_a.get() == cell_b.get());"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        value: i32,",
                "    }",
                "",
                "    impl Clone for TestStruct {",
                "        fn clone(&self) -> Self {",
                "            TestStruct { value: self.value }",
                "        }",
                "    }",
                "",
                "    let cell_a = OnceCell::with_value(TestStruct { value: 10 });",
                "    let mut cell_b = OnceCell::new();",
                "    ",
                "    if let Some(value) = cell_a.get() {",
                "        let _ = cell_b.set(value.clone());",
                "    }",
                "    ",
                "    cell_b.clone_from(&cell_a);",
                "    assert!(cell_b.get().is_some());",
                "    assert_eq!(cell_b.get().unwrap().value, 10);",
                "    assert_eq!(cell_b.get(), cell_a.get());",
                "    assert_ne!(cell_a.get() as *const _, cell_b.get() as *const _);",
                "    assert!(cell_b.get().unwrap() != cell_a.get().unwrap());",
                "    assert!(cell_a.get() == cell_b.get());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestType {",
                "        data: String,",
                "    }",
                "",
                "    impl Clone for TestType {",
                "        fn clone(&self) -> Self {",
                "            TestType { data: self.data.clone() }",
                "        }",
                "    }",
                "",
                "    let cell_x = OnceCell::with_value(TestType { data: \"Hello\".to_string() });",
                "    let mut cell_y = OnceCell::new();",
                "    ",
                "    if let Some(value) = cell_x.get() {",
                "        let _ = cell_y.set(value.clone());",
                "    }",
                "    ",
                "    cell_y.clone_from(&cell_x);",
                "}"
              ],
              "oracle": [
                "    assert!(cell_y.get().is_some());",
                "    assert_eq!(cell_y.get().unwrap().data, \"Hello\");",
                "    assert!(cell_x.get().is_some());",
                "    assert_eq!(cell_x.get().unwrap().data, \"Hello\");",
                "    assert_ne!(cell_y.get() as *const _, cell_x.get() as *const _);",
                "    assert!(cell_y.get_mut().is_some());",
                "    assert_eq!(cell_y.get_mut().unwrap().data, \"Hello\");"
              ],
              "code": [
                "{",
                "    struct TestType {",
                "        data: String,",
                "    }",
                "",
                "    impl Clone for TestType {",
                "        fn clone(&self) -> Self {",
                "            TestType { data: self.data.clone() }",
                "        }",
                "    }",
                "",
                "    let cell_x = OnceCell::with_value(TestType { data: \"Hello\".to_string() });",
                "    let mut cell_y = OnceCell::new();",
                "    ",
                "    if let Some(value) = cell_x.get() {",
                "        let _ = cell_y.set(value.clone());",
                "    }",
                "    ",
                "    cell_y.clone_from(&cell_x);",
                "    assert!(cell_y.get().is_some());",
                "    assert_eq!(cell_y.get().unwrap().data, \"Hello\");",
                "    assert!(cell_x.get().is_some());",
                "    assert_eq!(cell_x.get().unwrap().data, \"Hello\");",
                "    assert_ne!(cell_y.get() as *const _, cell_x.get() as *const _);",
                "    assert!(cell_y.get_mut().is_some());",
                "    assert_eq!(cell_y.get_mut().unwrap().data, \"Hello\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AnotherStruct {",
                "        number: usize,",
                "    }",
                "",
                "    impl Clone for AnotherStruct {",
                "        fn clone(&self) -> Self {",
                "            AnotherStruct { number: self.number }",
                "        }",
                "    }",
                "",
                "    let cell_1 = OnceCell::with_value(AnotherStruct { number: 5 });",
                "    let mut cell_2 = OnceCell::new();",
                "",
                "    if let Some(value) = cell_1.get() {",
                "        let _ = cell_2.set(value.clone());",
                "    }",
                "",
                "    cell_2.clone_from(&cell_1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(cell_2.get().unwrap().number, 5);",
                "    assert!(cell_1.get().is_some());",
                "    assert!(cell_2.get().is_some());",
                "    assert!(cell_1.get() != cell_2.get());",
                "    assert!(cell_1.get() != cell_2.get_mut());",
                "    assert!(cell_2.get_mut().unwrap().number == 5);"
              ],
              "code": [
                "{",
                "    struct AnotherStruct {",
                "        number: usize,",
                "    }",
                "",
                "    impl Clone for AnotherStruct {",
                "        fn clone(&self) -> Self {",
                "            AnotherStruct { number: self.number }",
                "        }",
                "    }",
                "",
                "    let cell_1 = OnceCell::with_value(AnotherStruct { number: 5 });",
                "    let mut cell_2 = OnceCell::new();",
                "",
                "    if let Some(value) = cell_1.get() {",
                "        let _ = cell_2.set(value.clone());",
                "    }",
                "",
                "    cell_2.clone_from(&cell_1);",
                "    assert_eq!(cell_2.get().unwrap().number, 5);",
                "    assert!(cell_1.get().is_some());",
                "    assert!(cell_2.get().is_some());",
                "    assert!(cell_1.get() != cell_2.get());",
                "    assert!(cell_1.get() != cell_2.get_mut());",
                "    assert!(cell_2.get_mut().unwrap().number == 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}