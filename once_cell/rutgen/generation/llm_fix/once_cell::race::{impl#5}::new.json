{
  "name": "once_cell::race::{impl#5}::new",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:228:5:230:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: OnceRef { inner: AtomicPtr::new(ptr::null_mut()), ghost: PhantomData }\n"
      ],
      "input_infer": "OnceRef<'a, T> where T is any valid type and 'a is a valid lifetime.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _: OnceRef<i32> = OnceRef::new();",
                "}"
              ],
              "oracle": [
                "    let once_ref: OnceRef<i32> = OnceRef::new();",
                "    assert!(once_ref.inner.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(once_ref.ghost, PhantomData);"
              ],
              "code": [
                "{",
                "    let _: OnceRef<i32> = OnceRef::new();",
                "    let once_ref: OnceRef<i32> = OnceRef::new();",
                "    assert!(once_ref.inner.load(Ordering::SeqCst).is_null());",
                "    assert_eq!(once_ref.ghost, PhantomData);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _: OnceRef<String> = OnceRef::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(std::mem::size_of::<OnceRef<String>>() > 0);",
                "    assert!(std::mem::align_of::<OnceRef<String>>() > 0);",
                "    assert!(std::intrinsics:: unlikely(OnceRef::new().ghost.is_null()));"
              ],
              "code": [
                "{",
                "    let _: OnceRef<String> = OnceRef::new();",
                "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(std::mem::size_of::<OnceRef<String>>() > 0);",
                "    assert!(std::mem::align_of::<OnceRef<String>>() > 0);",
                "    assert!(std::intrinsics:: unlikely(OnceRef::new().ghost.is_null()));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _: OnceRef<f64> = OnceRef::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(!OnceRef::new().ghost.is_null());"
              ],
              "code": [
                "{",
                "    let _: OnceRef<f64> = OnceRef::new();",
                "    assert_eq!(OnceRef::new().inner.load(Ordering::SeqCst), ptr::null_mut());",
                "    assert!(!OnceRef::new().ghost.is_null());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "    let _: OnceRef<MyStruct> = OnceRef::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(OnceRef::new().inner.load(Ordering::Relaxed), ptr::null_mut());",
                "    assert!(OnceRef::new().ghost as *const _ != core::ptr::null());",
                "    let instance: OnceRef<MyStruct> = OnceRef::new();",
                "    assert_eq!(instance.inner.load(Ordering::Relaxed), ptr::null_mut());",
                "    assert!(instance.ghost as *const _ != core::ptr::null());"
              ],
              "code": [
                "{",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "  let _: OnceRef<MyStruct> = OnceRef::new();  ",
                "  assert_eq!(OnceRef::<MyStruct>::new().inner.load(Ordering::Relaxed), ptr::null_mut());  ",
                "  assert!(&OnceRef::<MyStruct>::new().ghost as *const _ != core::ptr::null());  ",
                "  let instance: OnceRef<MyStruct> = OnceRef::new();  ",
                "  assert_eq!(instance.inner.load(Ordering::Relaxed), ptr::null_mut());  ",
                "  assert!(&instance.ghost as *const _ != core::ptr::null());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}