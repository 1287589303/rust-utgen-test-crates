{
  "name": "once_cell::sync::{impl#6}::get_or_init",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1115:9:1124:10",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if the cell\n/// was empty.\n///\n/// Many threads may call `get_or_init` concurrently with different\n/// initializing functions, but it is guaranteed that only one function\n/// will be executed.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and the cell\n/// remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`. The\n/// exact outcome is unspecified. Current implementation deadlocks, but\n/// this may be changed to a panic in the future.\n///\n/// # Example\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// let value = cell.get_or_init(|| 92);\n/// assert_eq!(value, &92);\n/// let value = cell.get_or_init(|| unreachable!());\n/// assert_eq!(value, &92);\n/// ```\n",
  "code": [
    "pub fn get_or_init<F>(&self, f: F) -> &T",
    "where",
    "    F: FnOnce() -> T,",
    "{",
    "    enum Void {}",
    "    match self.get_or_try_init(|| Ok::<T, Void>(f())) {",
    "        Ok(val) => val,",
    "        Err(void) => match void {},",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_or_try_init(|| Ok::<T, Void>(f())) matches Err(void)",
          "norm": null,
          "value": "true",
          "line": 1120,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_or_try_init(|| Ok::<T, Void>(f())) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1120,
          "bound": null
        },
        {
          "cond": "self.get_or_try_init(|| Ok::<T, Void>(f())) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 1120,
          "bound": null
        }
      ],
      "ret": "val",
      "path": [
        0,
        1,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}