{
  "name": "once_cell::unsync::{impl#12}::force",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:773:9:778:10",
  "doc": "/// Forces the evaluation of this lazy value and returns a reference to\n/// the result.\n///\n/// This is equivalent to the `Deref` impl, but is explicit.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::Lazy;\n///\n/// let lazy = Lazy::new(|| 92);\n///\n/// assert_eq!(Lazy::force(&lazy), &92);\n/// assert_eq!(&*lazy, &92);\n/// ```\n",
  "code": [
    "pub fn force(this: &Lazy<T, F>) -> &T {",
    "    this.cell.get_or_init(|| match this.init.take() {",
    "        Some(f) => f(),",
    "        None => panic!(\"Lazy instance has previously been poisoned\"),",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "this.cell.get_or_init(|| match this.init.take() {\n                Some(f) => f(),\n                None => panic!(\"Lazy instance has previously been poisoned\"),\n            })",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}