{
  "name": "once_cell::race::once_box::{impl#3}::get_or_try_init",
  "mod_info": {
    "name": "race::once_box",
    "loc": "src/race.rs:321:1:460:2"
  },
  "visible": true,
  "loc": "src/race.rs:417:9:438:10",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n",
  "code": [
    "pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>",
    "where",
    "    F: FnOnce() -> Result<Box<T>, E>,",
    "{",
    "    let mut ptr = self.inner.load(Ordering::Acquire);",
    "",
    "    if ptr.is_null() {",
    "        let val = f()?;",
    "        ptr = Box::into_raw(val);",
    "        let exchange = self.inner.compare_exchange(",
    "            ptr::null_mut(),",
    "            ptr,",
    "            Ordering::AcqRel,",
    "            Ordering::Acquire,",
    "        );",
    "        if let Err(old) = exchange {",
    "            drop(unsafe { Box::from_raw(ptr) });",
    "            ptr = old;",
    "        }",
    "    };",
    "    Ok(unsafe { &*ptr })",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "f()?",
          "norm": null,
          "value": "Err/None",
          "line": 424,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        25,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "f()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 424,
          "bound": null
        },
        {
          "cond": "let Err(old) = exchange",
          "norm": null,
          "value": "true",
          "line": 432,
          "bound": null
        }
      ],
      "ret": "Ok(unsafe { &*ptr })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        20,
        21,
        22,
        24,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "true",
          "line": 423,
          "bound": null
        },
        {
          "cond": "f()?",
          "norm": null,
          "value": "Ok/Some",
          "line": 424,
          "bound": null
        },
        {
          "cond": "let Err(old) = exchange",
          "norm": null,
          "value": "true",
          "line": 432,
          "bound": null
        }
      ],
      "ret": "Ok(unsafe { &*ptr })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        21,
        22,
        24,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "ptr.is_null()",
          "norm": null,
          "value": "false",
          "line": 423,
          "bound": null
        }
      ],
      "ret": "Ok(unsafe { &*ptr })",
      "path": [
        0,
        1,
        2,
        23,
        24,
        27
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}