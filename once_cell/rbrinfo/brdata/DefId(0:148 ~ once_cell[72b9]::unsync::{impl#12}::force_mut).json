{
  "name": "once_cell::unsync::{impl#12}::force_mut",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:794:9:803:10",
  "doc": "/// Forces the evaluation of this lazy value and returns a mutable reference to\n/// the result.\n///\n/// This is equivalent to the `DerefMut` impl, but is explicit.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::Lazy;\n///\n/// let mut lazy = Lazy::new(|| 92);\n///\n/// assert_eq!(Lazy::force_mut(&mut lazy), &92);\n/// assert_eq!(*lazy, 92);\n/// ```\n",
  "code": [
    "pub fn force_mut(this: &mut Lazy<T, F>) -> &mut T {",
    "    if this.cell.get_mut().is_none() {",
    "        let value = match this.init.get_mut().take() {",
    "            Some(f) => f(),",
    "            None => panic!(\"Lazy instance has previously been poisoned\"),",
    "        };",
    "        this.cell = OnceCell::with_value(value);",
    "    }",
    "    this.cell.get_mut().unwrap_or_else(|| unreachable!())",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "this.cell.get_mut().is_none()",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "this.init.get_mut().take() matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 796,
          "bound": null
        },
        {
          "cond": "this.init.get_mut().take() matches Some(f)",
          "norm": null,
          "value": "true",
          "line": 796,
          "bound": null
        }
      ],
      "ret": "this.cell.get_mut().unwrap_or_else(|| unreachable!())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        11,
        13,
        14,
        15,
        17,
        18,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "this.cell.get_mut().is_none()",
          "norm": null,
          "value": "true",
          "line": 795,
          "bound": null
        },
        {
          "cond": "this.init.get_mut().take() matches None",
          "norm": null,
          "value": "true",
          "line": 796,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        12,
        27,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "this.cell.get_mut().is_none()",
          "norm": null,
          "value": "false",
          "line": 795,
          "bound": null
        }
      ],
      "ret": "this.cell.get_mut().unwrap_or_else(|| unreachable!())",
      "path": [
        0,
        1,
        2,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}