{
  "name": "once_cell::race::{impl#0}::get_or_try_init",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:116:5:125:6",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n",
  "code": [
    "pub fn get_or_try_init<F, E>(&self, f: F) -> Result<NonZeroUsize, E>",
    "where",
    "    F: FnOnce() -> Result<NonZeroUsize, E>,",
    "{",
    "    let val = self.inner.load(Ordering::Acquire);",
    "    match NonZeroUsize::new(val) {",
    "        Some(it) => Ok(it),",
    "        None => self.init(f),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "NonZeroUsize::new(val) matches Some(it)",
          "norm": null,
          "value": "true",
          "line": 121,
          "bound": null
        },
        {
          "cond": "NonZeroUsize::new(val) matches Some(it)",
          "norm": null,
          "value": "true",
          "line": 121,
          "bound": null
        }
      ],
      "ret": "Ok(it)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "NonZeroUsize::new(val) matches None",
          "norm": null,
          "value": "true",
          "line": 121,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}