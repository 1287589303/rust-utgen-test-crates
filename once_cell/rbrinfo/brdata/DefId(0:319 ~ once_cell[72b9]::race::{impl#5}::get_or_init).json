{
  "name": "once_cell::race::{impl#5}::get_or_init",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:258:5:267:6",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if the cell was\n/// empty.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n",
  "code": [
    "pub fn get_or_init<F>(&self, f: F) -> &'a T",
    "where",
    "    F: FnOnce() -> &'a T,",
    "{",
    "    enum Void {}",
    "    match self.get_or_try_init(|| Ok::<&'a T, Void>(f())) {",
    "        Ok(val) => val,",
    "        Err(void) => match void {},",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Err(void)",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        },
        {
          "cond": "self.get_or_try_init(|| Ok::<&'a T, Void>(f())) matches Ok(val)",
          "norm": null,
          "value": "true",
          "line": 263,
          "bound": null
        }
      ],
      "ret": "val",
      "path": [
        0,
        1,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}