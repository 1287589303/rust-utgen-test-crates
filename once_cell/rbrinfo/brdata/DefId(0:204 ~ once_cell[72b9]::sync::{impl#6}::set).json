{
  "name": "once_cell::sync::{impl#6}::set",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1058:9:1063:10",
  "doc": "/// Sets the contents of this cell to `value`.\n///\n/// Returns `Ok(())` if the cell was empty and `Err(value)` if it was\n/// full.\n///\n/// # Example\n///\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// static CELL: OnceCell<i32> = OnceCell::new();\n///\n/// fn main() {\n///     assert!(CELL.get().is_none());\n///\n///     std::thread::spawn(|| {\n///         assert_eq!(CELL.set(92), Ok(()));\n///     }).join().unwrap();\n///\n///     assert_eq!(CELL.set(62), Err(62));\n///     assert_eq!(CELL.get(), Some(&92));\n/// }\n/// ```\n",
  "code": [
    "pub fn set(&self, value: T) -> Result<(), T> {",
    "    match self.try_insert(value) {",
    "        Ok(_) => Ok(()),",
    "        Err((_, value)) => Err(value),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.try_insert(value) matches Err((_, value))",
          "norm": null,
          "value": "true",
          "line": 1059,
          "bound": null
        }
      ],
      "ret": "Err(value)",
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.try_insert(value) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 1059,
          "bound": null
        },
        {
          "cond": "self.try_insert(value) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 1059,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}