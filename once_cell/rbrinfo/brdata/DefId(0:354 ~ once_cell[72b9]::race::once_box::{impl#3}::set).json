{
  "name": "once_cell::race::once_box::{impl#3}::set",
  "mod_info": {
    "name": "race::once_box",
    "loc": "src/race.rs:321:1:460:2"
  },
  "visible": true,
  "loc": "src/race.rs:378:9:391:10",
  "doc": "/// Sets the contents of this cell to `value`.\n///\n/// Returns `Ok(())` if the cell was empty and `Err(value)` if it was\n/// full.\n",
  "code": [
    "pub fn set(&self, value: Box<T>) -> Result<(), Box<T>> {",
    "    let ptr = Box::into_raw(value);",
    "    let exchange = self.inner.compare_exchange(",
    "        ptr::null_mut(),",
    "        ptr,",
    "        Ordering::AcqRel,",
    "        Ordering::Acquire,",
    "    );",
    "    if exchange.is_err() {",
    "        let value = unsafe { Box::from_raw(ptr) };",
    "        return Err(value);",
    "    }",
    "    Ok(())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "exchange.is_err()",
          "norm": null,
          "value": "true",
          "line": 386,
          "bound": null
        }
      ],
      "ret": "Err(value)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "exchange.is_err()",
          "norm": null,
          "value": "false",
          "line": 386,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}