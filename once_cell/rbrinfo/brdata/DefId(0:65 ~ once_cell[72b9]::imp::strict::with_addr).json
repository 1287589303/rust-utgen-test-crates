{
  "name": "once_cell::imp::strict::with_addr",
  "mod_info": {
    "name": "imp::strict",
    "loc": "src/imp_std.rs:245:1:287:2"
  },
  "visible": true,
  "loc": "src/imp_std.rs:260:5:277:6",
  "doc": "",
  "code": [
    "pub(crate) fn with_addr<T>(ptr: *mut T, addr: usize) -> *mut T",
    "where",
    "    T: Sized,",
    "{",
    "    // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.",
    "    //",
    "    // In the mean-time, this operation is defined to be \"as if\" it was",
    "    // a wrapping_offset, so we can emulate it as such. This should properly",
    "    // restore pointer provenance even under today's compiler.",
    "    let self_addr = self::addr(ptr) as isize;",
    "    let dest_addr = addr as isize;",
    "    let offset = dest_addr.wrapping_sub(self_addr);",
    "",
    "    // This is the canonical desugarring of this operation,",
    "    // but `pointer::cast` was only stabilized in 1.38.",
    "    // self.cast::<u8>().wrapping_offset(offset).cast::<T>()",
    "    (ptr as *mut u8).wrapping_offset(offset) as *mut T",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(ptr as *mut u8).wrapping_offset(offset) as *mut T",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}