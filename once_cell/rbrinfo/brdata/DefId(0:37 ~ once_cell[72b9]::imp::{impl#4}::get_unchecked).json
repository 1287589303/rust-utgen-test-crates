{
  "name": "once_cell::imp::{impl#4}::get_unchecked",
  "mod_info": {
    "name": "imp",
    "loc": "src/lib.rs:380:1:380:9"
  },
  "visible": true,
  "loc": "src/imp_std.rs:99:5:103:6",
  "doc": "/// Get the reference to the underlying value, without checking if the cell\n/// is initialized.\n///\n/// # Safety\n///\n/// Caller must ensure that the cell is in initialized state, and that\n/// the contents are acquired by (synchronized to) this thread.\n",
  "code": [
    "pub(crate) unsafe fn get_unchecked(&self) -> &T {",
    "    debug_assert!(self.is_initialized());",
    "    let slot = &*self.value.get();",
    "    slot.as_ref().unwrap_unchecked()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 100,
          "bound": null
        }
      ],
      "ret": "slot.as_ref().unwrap_unchecked()",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 100,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}