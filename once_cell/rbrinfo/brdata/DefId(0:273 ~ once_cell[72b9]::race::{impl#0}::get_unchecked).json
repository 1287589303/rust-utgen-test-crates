{
  "name": "once_cell::race::{impl#0}::get_unchecked",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:60:5:76:6",
  "doc": "/// Get the reference to the underlying value, without checking if the cell\n/// is initialized.\n///\n/// # Safety\n///\n/// Caller must ensure that the cell is in initialized state, and that\n/// the contents are acquired by (synchronized to) this thread.\n",
  "code": [
    "pub unsafe fn get_unchecked(&self) -> NonZeroUsize {",
    "    let p = self.inner.as_ptr();",
    "",
    "    // SAFETY: The caller is responsible for ensuring that the value",
    "    // was initialized and that the contents have been acquired by",
    "    // this thread. Assuming that, we can assume there will be no",
    "    // conflicting writes to the value since the value will never",
    "    // change once initialized. This relies on the statement in",
    "    // https://doc.rust-lang.org/1.83.0/core/sync/atomic/ that \"(A",
    "    // `compare_exchange` or `compare_exchange_weak` that does not",
    "    // succeed is not considered a write.\"",
    "    let val = unsafe { p.read() };",
    "",
    "    // SAFETY: The caller is responsible for ensuring the value is",
    "    // initialized and thus not zero.",
    "    unsafe { NonZeroUsize::new_unchecked(val) }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}