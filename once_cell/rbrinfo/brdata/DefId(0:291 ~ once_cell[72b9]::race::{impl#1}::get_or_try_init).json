{
  "name": "once_cell::race::{impl#1}::get_or_try_init",
  "mod_info": {
    "name": "race",
    "loc": "src/lib.rs:1412:1:1412:14"
  },
  "visible": true,
  "loc": "src/race.rs:187:5:192:6",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// If several threads concurrently run `get_or_init`, more than one `f` can\n/// be called. However, all threads will return the same value, produced by\n/// some `f`.\n",
  "code": [
    "pub fn get_or_try_init<F, E>(&self, f: F) -> Result<bool, E>",
    "where",
    "    F: FnOnce() -> Result<bool, E>,",
    "{",
    "    self.inner.get_or_try_init(|| f().map(OnceBool::to_usize)).map(OnceBool::from_usize)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}