{
  "name": "once_cell::sync::{impl#6}::try_insert",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1080:9:1087:10",
  "doc": "/// Like [`set`](Self::set), but also returns a reference to the final cell value.\n///\n/// # Example\n///\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert!(cell.get().is_none());\n///\n/// assert_eq!(cell.try_insert(92), Ok(&92));\n/// assert_eq!(cell.try_insert(62), Err((&92, 62)));\n///\n/// assert!(cell.get().is_some());\n/// ```\n",
  "code": [
    "pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {",
    "    let mut value = Some(value);",
    "    let res = self.get_or_init(|| unsafe { value.take().unwrap_unchecked() });",
    "    match value {",
    "        None => Ok(res),",
    "        Some(value) => Err((res, value)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "value matches Some(value)",
          "norm": null,
          "value": "true",
          "line": 1083,
          "bound": null
        }
      ],
      "ret": "Err((res, value))",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "value matches None",
          "norm": null,
          "value": "true",
          "line": 1083,
          "bound": null
        },
        {
          "cond": "value matches None",
          "norm": null,
          "value": "true",
          "line": 1083,
          "bound": null
        }
      ],
      "ret": "Ok(res)",
      "path": [
        0,
        1,
        2,
        4,
        6,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}