{
  "name": "once_cell::sync::{impl#6}::get_or_try_init",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1152:9:1166:10",
  "doc": "/// Gets the contents of the cell, initializing it with `f` if\n/// the cell was empty. If the cell was empty and `f` failed, an\n/// error is returned.\n///\n/// # Panics\n///\n/// If `f` panics, the panic is propagated to the caller, and\n/// the cell remains uninitialized.\n///\n/// It is an error to reentrantly initialize the cell from `f`.\n/// The exact outcome is unspecified. Current implementation\n/// deadlocks, but this may be changed to a panic in the future.\n///\n/// # Example\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert_eq!(cell.get_or_try_init(|| Err(())), Err(()));\n/// assert!(cell.get().is_none());\n/// let value = cell.get_or_try_init(|| -> Result<i32, ()> {\n///     Ok(92)\n/// });\n/// assert_eq!(value, Ok(&92));\n/// assert_eq!(cell.get(), Some(&92))\n/// ```\n",
  "code": [
    "pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>",
    "where",
    "    F: FnOnce() -> Result<T, E>,",
    "{",
    "    // Fast path check",
    "    if let Some(value) = self.get() {",
    "        return Ok(value);",
    "    }",
    "",
    "    self.0.initialize(f)?;",
    "",
    "    // Safe b/c value is initialized.",
    "    debug_assert!(self.0.is_initialized());",
    "    Ok(unsafe { self.get_unchecked() })",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(value) = self.get()",
          "norm": null,
          "value": "true",
          "line": 1157,
          "bound": null
        },
        {
          "cond": "self.0.initialize(f)?",
          "norm": null,
          "value": "Err/None",
          "line": 1161,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        8,
        10,
        11,
        20,
        21,
        22,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(value) = self.get()",
          "norm": null,
          "value": "true",
          "line": 1157,
          "bound": null
        },
        {
          "cond": "self.0.initialize(f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1161,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": "Ok(unsafe { self.get_unchecked() })",
      "path": [
        0,
        1,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        15,
        18,
        19,
        23
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(value) = self.get()",
          "norm": null,
          "value": "true",
          "line": 1157,
          "bound": null
        },
        {
          "cond": "self.0.initialize(f)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1161,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 1164,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        5,
        6,
        9,
        12,
        13,
        14,
        16,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(value) = self.get()",
          "norm": null,
          "value": "true",
          "line": 1157,
          "bound": null
        }
      ],
      "ret": "Ok(value)",
      "path": [
        0,
        1,
        2,
        3,
        22,
        23
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}