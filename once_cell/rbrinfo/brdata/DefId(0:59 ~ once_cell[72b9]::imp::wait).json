{
  "name": "once_cell::imp::wait",
  "mod_info": {
    "name": "imp",
    "loc": "src/lib.rs:380:1:380:9"
  },
  "visible": false,
  "loc": "src/imp_std.rs:210:1:239:2",
  "doc": "",
  "code": [
    "fn wait(queue: &AtomicPtr<Waiter>, mut curr_queue: *mut Waiter) {",
    "    let curr_state = strict::addr(curr_queue) & STATE_MASK;",
    "    loop {",
    "        let node = Waiter {",
    "            thread: Cell::new(Some(thread::current())),",
    "            signaled: AtomicBool::new(false),",
    "            next: strict::map_addr(curr_queue, |q| q & !STATE_MASK),",
    "        };",
    "        let me = &node as *const Waiter as *mut Waiter;",
    "",
    "        let exchange = queue.compare_exchange(",
    "            curr_queue,",
    "            strict::map_addr(me, |q| q | curr_state),",
    "            Ordering::Release,",
    "            Ordering::Relaxed,",
    "        );",
    "        if let Err(new_queue) = exchange {",
    "            if strict::addr(new_queue) & STATE_MASK != curr_state {",
    "                return;",
    "            }",
    "            curr_queue = new_queue;",
    "            continue;",
    "        }",
    "",
    "        while !node.signaled.load(Ordering::Acquire) {",
    "            thread::park();",
    "        }",
    "        break;",
    "    }",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17,
        18,
        19,
        20,
        21,
        24,
        27
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "false",
          "line": 234,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17,
        18,
        19,
        20,
        22,
        23,
        18,
        19,
        20,
        21,
        24,
        27
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "strict::addr(new_queue) & STATE_MASK != curr_state",
          "norm": "curr_state != strict::addr(new_queue) & STATE_MASK",
          "value": "true",
          "line": 227,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        26,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "strict::addr(new_queue) & STATE_MASK != curr_state",
          "norm": "curr_state != strict::addr(new_queue) & STATE_MASK",
          "value": "false",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        25,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17,
        18,
        19,
        20,
        21,
        24,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "strict::addr(new_queue) & STATE_MASK != curr_state",
          "norm": "curr_state != strict::addr(new_queue) & STATE_MASK",
          "value": "false",
          "line": 227,
          "bound": null
        },
        {
          "cond": "let Err(new_queue) = exchange",
          "norm": null,
          "value": "true",
          "line": 226,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "false",
          "line": 234,
          "bound": null
        },
        {
          "cond": "node.signaled.load(Ordering::Acquire)",
          "norm": null,
          "value": "true",
          "line": 234,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        16,
        25,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        17,
        18,
        19,
        20,
        22,
        23,
        18,
        19,
        20,
        21,
        24,
        27
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}