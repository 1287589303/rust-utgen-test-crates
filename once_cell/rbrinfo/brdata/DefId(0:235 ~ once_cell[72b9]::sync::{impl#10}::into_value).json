{
  "name": "once_cell::sync::{impl#10}::into_value",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1285:9:1291:10",
  "doc": "/// Consumes this `Lazy` returning the stored value.\n///\n/// Returns `Ok(value)` if `Lazy` is initialized and `Err(f)` otherwise.\n",
  "code": [
    "pub fn into_value(this: Lazy<T, F>) -> Result<T, F> {",
    "    let cell = this.cell;",
    "    let init = this.init;",
    "    cell.into_inner().ok_or_else(|| {",
    "        init.take().unwrap_or_else(|| panic!(\"Lazy instance has previously been poisoned\"))",
    "    })",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}