{
  "name": "once_cell::unsync::{impl#8}::get",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:483:9:489:10",
  "doc": "/// Gets a reference to the underlying value.\n///\n/// Returns `None` if the cell is empty.\n",
  "code": [
    "pub fn get(&self) -> Option<&T> {",
    "    // Safe due to `inner`'s invariant of being written to at most once.",
    "    // Had multiple writes to `inner` been allowed, a reference to the",
    "    // value we return now would become dangling by a write of a",
    "    // different value later.",
    "    unsafe { &*self.inner.get() }.as_ref()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}