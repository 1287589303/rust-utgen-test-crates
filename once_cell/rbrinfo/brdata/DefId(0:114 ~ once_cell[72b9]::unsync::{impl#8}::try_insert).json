{
  "name": "once_cell::unsync::{impl#8}::try_insert",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:551:9:563:10",
  "doc": "/// Like [`set`](Self::set), but also returns a reference to the final cell value.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert!(cell.get().is_none());\n///\n/// assert_eq!(cell.try_insert(92), Ok(&92));\n/// assert_eq!(cell.try_insert(62), Err((&92, 62)));\n///\n/// assert!(cell.get().is_some());\n/// ```\n",
  "code": [
    "pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {",
    "    if let Some(old) = self.get() {",
    "        return Err((old, value));",
    "    }",
    "",
    "    let slot = unsafe { &mut *self.inner.get() };",
    "    // This is the only place where we set the slot, no races",
    "    // due to reentrancy/concurrency are possible, and we've",
    "    // checked that slot is currently `None`, so this write",
    "    // maintains the `inner`'s invariant.",
    "    *slot = Some(value);",
    "    Ok(unsafe { slot.as_ref().unwrap_unchecked() })",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(old) = self.get()",
          "norm": null,
          "value": "true",
          "line": 552,
          "bound": null
        }
      ],
      "ret": "Ok(unsafe { slot.as_ref().unwrap_unchecked() })",
      "path": [
        0,
        1,
        6,
        7,
        8,
        9,
        11,
        12,
        13,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(old) = self.get()",
          "norm": null,
          "value": "true",
          "line": 552,
          "bound": null
        }
      ],
      "ret": "Err((old, value))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}