{
  "name": "once_cell::unsync::{impl#12}::get_mut",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:835:9:837:10",
  "doc": "/// Gets the mutable reference to the result of this lazy value if\n/// it was initialized, otherwise returns `None`.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::Lazy;\n///\n/// let mut lazy = Lazy::new(|| 92);\n///\n/// assert_eq!(Lazy::get_mut(&mut lazy), None);\n/// assert_eq!(*lazy, 92);\n/// assert_eq!(Lazy::get_mut(&mut lazy), Some(&mut 92));\n/// ```\n",
  "code": [
    "pub fn get_mut(this: &mut Lazy<T, F>) -> Option<&mut T> {",
    "    this.cell.get_mut()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}