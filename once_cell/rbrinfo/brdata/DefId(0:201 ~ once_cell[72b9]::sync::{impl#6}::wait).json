{
  "name": "once_cell::sync::{impl#6}::wait",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:993:9:1001:10",
  "doc": "/// Gets the reference to the underlying value, blocking the current\n/// thread until it is set.\n///\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let mut cell = std::sync::Arc::new(OnceCell::new());\n/// let t = std::thread::spawn({\n///     let cell = std::sync::Arc::clone(&cell);\n///     move || cell.set(92).unwrap()\n/// });\n///\n/// // Returns immediately, but might return None.\n/// let _value_or_none = cell.get();\n///\n/// // Will return 92, but might block until the other thread does `.set`.\n/// let value: &u32 = cell.wait();\n/// assert_eq!(*value, 92);\n/// t.join().unwrap();\n/// ```\n",
  "code": [
    "pub fn wait(&self) -> &T {",
    "    if !self.0.is_initialized() {",
    "        self.0.wait()",
    "    }",
    "    debug_assert!(self.0.is_initialized());",
    "    // Safe b/c of the wait call above and the fact that we didn't",
    "    // relinquish our borrow.",
    "    unsafe { self.get_unchecked() }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 997,
          "bound": null
        }
      ],
      "ret": "self.get_unchecked()",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 997,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        9,
        13
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "true",
          "line": 997,
          "bound": null
        }
      ],
      "ret": "self.get_unchecked()",
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        8,
        11,
        12
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 994,
          "bound": null
        },
        {
          "cond": "self.0.is_initialized()",
          "norm": null,
          "value": "false",
          "line": 997,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6,
        7,
        9,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}