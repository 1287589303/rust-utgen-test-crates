{
  "name": "once_cell::sync::{impl#6}::into_inner",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1217:9:1219:10",
  "doc": "/// Consumes the `OnceCell`, returning the wrapped value. Returns\n/// `None` if the cell was empty.\n///\n/// # Examples\n///\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let cell: OnceCell<String> = OnceCell::new();\n/// assert_eq!(cell.into_inner(), None);\n///\n/// let cell = OnceCell::new();\n/// cell.set(\"hello\".to_string()).unwrap();\n/// assert_eq!(cell.into_inner(), Some(\"hello\".to_string()));\n/// ```\n",
  "code": [
    "pub fn into_inner(self) -> Option<T> {",
    "    self.0.into_inner()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}