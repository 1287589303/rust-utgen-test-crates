{
  "name": "once_cell::sync::{impl#6}::take",
  "mod_info": {
    "name": "sync",
    "loc": "src/lib.rs:863:1:1409:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1197:9:1199:10",
  "doc": "/// Takes the value out of this `OnceCell`, moving it back to an uninitialized state.\n///\n/// Has no effect and returns `None` if the `OnceCell` hasn't been initialized.\n///\n/// # Examples\n///\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let mut cell: OnceCell<String> = OnceCell::new();\n/// assert_eq!(cell.take(), None);\n///\n/// let mut cell = OnceCell::new();\n/// cell.set(\"hello\".to_string()).unwrap();\n/// assert_eq!(cell.take(), Some(\"hello\".to_string()));\n/// assert_eq!(cell.get(), None);\n/// ```\n///\n/// This method is allowed to violate the invariant of writing to a `OnceCell`\n/// at most once because it requires `&mut` access to `self`. As with all\n/// interior mutability, `&mut` access permits arbitrary modification:\n///\n/// ```\n/// use once_cell::sync::OnceCell;\n///\n/// let mut cell: OnceCell<u32> = OnceCell::new();\n/// cell.set(92).unwrap();\n/// cell = OnceCell::new();\n/// ```\n",
  "code": [
    "pub fn take(&mut self) -> Option<T> {",
    "    mem::take(self).into_inner()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}