{
  "name": "once_cell::unsync::{impl#8}::set",
  "mod_info": {
    "name": "unsync",
    "loc": "src/lib.rs:383:1:859:2"
  },
  "visible": true,
  "loc": "src/lib.rs:530:9:535:10",
  "doc": "/// Sets the contents of this cell to `value`.\n///\n/// Returns `Ok(())` if the cell was empty and `Err(value)` if it was\n/// full.\n///\n/// # Example\n/// ```\n/// use once_cell::unsync::OnceCell;\n///\n/// let cell = OnceCell::new();\n/// assert!(cell.get().is_none());\n///\n/// assert_eq!(cell.set(92), Ok(()));\n/// assert_eq!(cell.set(62), Err(62));\n///\n/// assert!(cell.get().is_some());\n/// ```\n",
  "code": [
    "pub fn set(&self, value: T) -> Result<(), T> {",
    "    match self.try_insert(value) {",
    "        Ok(_) => Ok(()),",
    "        Err((_, value)) => Err(value),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.try_insert(value) matches Err((_, value))",
          "norm": null,
          "value": "true",
          "line": 531,
          "bound": null
        }
      ],
      "ret": "Err(value)",
      "path": [
        0,
        1,
        4,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.try_insert(value) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 531,
          "bound": null
        },
        {
          "cond": "self.try_insert(value) matches Ok(_)",
          "norm": null,
          "value": "true",
          "line": 531,
          "bound": null
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        1,
        3,
        5,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}