{
  "name": "once_cell::imp::{impl#4}::initialize",
  "mod_info": {
    "name": "imp",
    "loc": "src/lib.rs:380:1:380:9"
  },
  "visible": true,
  "loc": "src/imp_std.rs:61:5:85:6",
  "doc": "/// Safety: synchronizes with store to value via SeqCst read from state,\n/// writes value only once because we never get to INCOMPLETE state after a\n/// successful write.\n",
  "code": [
    "pub(crate) fn initialize<F, E>(&self, f: F) -> Result<(), E>",
    "where",
    "    F: FnOnce() -> Result<T, E>,",
    "{",
    "    let mut f = Some(f);",
    "    let mut res: Result<(), E> = Ok(());",
    "    let slot: *mut Option<T> = self.value.get();",
    "    initialize_or_wait(",
    "        &self.queue,",
    "        Some(&mut || {",
    "            let f = unsafe { f.take().unwrap_unchecked() };",
    "            match f() {",
    "                Ok(value) => {",
    "                    unsafe { *slot = Some(value) };",
    "                    true",
    "                }",
    "                Err(err) => {",
    "                    res = Err(err);",
    "                    false",
    "                }",
    "            }",
    "        }),",
    "    );",
    "    res",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "res",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}