[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:44:27: 44:55 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::sync::atomic::AtomicPtr::<imp::Waiter>::new(const imp::COMPLETE_PTR) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
            _4 = std::option::Option::<T>::Some(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:44:90: 44:91 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:44:64: 44:92 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::cell::UnsafeCell::<std::option::Option<T>>::new(move _4) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = imp::OnceCell::<T> { queue: move _2, value: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:44:93: 44:94 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:45:5: 45:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:45:6: 45:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:44:91: 44:92 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:45:5: 45:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:43:5: 45:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: imp::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:43:49: 43:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:43:43: 43:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:43:36: 43:41 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:43:36: 43:41 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:43:36: 43:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:44:27: 44:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::cell::UnsafeCell<std::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:44:64: 44:92 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/imp_std.rs:44:9: 44:94 (#0),
                },
            ),
        ),
        ty: std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:44:80: 44:91 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:44:85: 44:90 (#0),
            scope: scope[0],
        },
    },
]