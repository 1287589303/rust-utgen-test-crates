[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:927:20: 927:34 (#0),
                    scope: scope[0],
                },
                kind: _4 = sync::OnceCell::<T>::get_mut(move _5) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:927:36: 927:48 (#0),
                    scope: scope[0],
                },
                kind: _6 = sync::OnceCell::<T>::get(move _7) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _3 = (move _4, move _6),
            StorageDead(_6),
            StorageDead(_4),
            PlaceMention(_3),
            _9 = discriminant((_3.0: std::option::Option<&mut T>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:927:13: 927:49 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:929:30: 929:44 (#0),
                    scope: scope[0],
                },
                kind: _14 = <sync::OnceCell<T> as std::clone::Clone>::clone(move _15) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = discriminant((_3.1: std::option::Option<&T>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:927:13: 927:49 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _8) -> [1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:928:17: 928:43 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move (((_3.0: std::option::Option<&mut T>) as Some).0: &mut T),
            StorageLive(_11),
            _11 = (((_3.1: std::option::Option<&T>) as Some).0: &T),
            StorageLive(_12),
            _12 = &mut (*_10),
            StorageLive(_13),
            _13 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:928:47: 928:70 (#0),
                    scope: scope[1],
                },
                kind: _0 = <T as std::clone::Clone>::clone_from(move _12, move _13) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:928:69: 928:70 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:929:22: 929:27 (#0),
                    scope: scope[0],
                },
                kind: drop((*_1)) -> [return: bb9, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_1) = move _14,
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:929:43: 929:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb11, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_1) = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:929:43: 929:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:929:43: 929:44 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:931:10: 931:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:926:9: 931:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:926:48: 926:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:926:23: 926:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:926:42: 926:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:926:34: 926:40 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:926:34: 926:40 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:926:34: 926:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: (std::option::Option<&'{erased} mut T/#0>, std::option::Option<&'{erased} T/#0>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:927:19: 927:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:927:20: 927:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:927:20: 927:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: std::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:927:36: 927:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: &'{erased} sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:927:36: 927:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:30: 928:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:18: 928:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:927:19: 927:49 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:928:17: 928:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:23: 928:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:927:19: 927:49 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:928:17: 928:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:35: 928:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:47: 928:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:928:63: 928:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:929:30: 929:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/lib.rs:927:13: 930:14 (#0),
                },
            ),
        ),
        ty: &'{erased} sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:929:30: 929:36 (#0),
            scope: scope[0],
        },
    },
]