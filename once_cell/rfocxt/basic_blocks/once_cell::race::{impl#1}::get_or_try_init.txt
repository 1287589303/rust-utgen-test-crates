[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: race::OnceNonZeroUsize),
            StorageLive(_5),
            _5 = {closure@src/race.rs:191:36: 191:38} { f: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:191:9: 191:67 (#0),
                    scope: scope[0],
                },
                kind: _3 = race::OnceNonZeroUsize::get_or_try_init::<{closure@src/race.rs:191:36: 191:38}, E>(move _4, move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:191:9: 191:93 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::result::Result::<std::num::NonZero<usize>, E>::map::<bool, fn(std::num::NonZero<usize>) -> bool {race::OnceBool::from_usize}>(move _3, race::OnceBool::from_usize) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:192:5: 192:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:192:6: 192:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:191:92: 191:93 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:191:66: 191:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:192:5: 192:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:187:5: 192:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<bool, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:187:50: 187:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::OnceBool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:187:34: 187:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/race.rs:187:44: 187:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:187:41: 187:42 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:187:41: 187:42 (#0),
                    },
                ),
            ),
        ),
        ty: F/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:187:41: 187:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:191:9: 191:93 (#0),
                },
            ),
        ),
        ty: std::result::Result<std::num::NonZero<usize>, E/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:191:9: 191:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:191:9: 191:93 (#0),
                },
            ),
        ),
        ty: &'{erased} race::OnceNonZeroUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:191:9: 191:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:191:9: 191:93 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:294 ~ once_cell[72b9]::race::{impl#1}::get_or_try_init::{closure#0}),
            [
                F/#0,
                E/#1,
                i32,
                Binder { value: extern "RustCall" fn(()) -> std::result::Result<std::num::NonZero<usize>, E/#1>, bound_vars: [] },
                (F/#0,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:191:36: 191:66 (#0),
            scope: scope[0],
        },
    },
]