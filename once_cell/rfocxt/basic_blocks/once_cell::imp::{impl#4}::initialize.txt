[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
            _3 = std::option::Option::<F>::Some(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:65:27: 65:28 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = (),
            _5 = std::result::Result::<(), E>::Ok(move _6),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            AscribeUserType(_5, o, UserTypeProjection { base: UserType(1), projs: [] }),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &((*_1).1: std::cell::UnsafeCell<std::option::Option<T>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:67:36: 67:52 (#0),
                    scope: scope[2],
                },
                kind: _7 = std::cell::UnsafeCell::<std::option::Option<T>>::get(move _8) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            AscribeUserType(_7, o, UserTypeProjection { base: UserType(3), projs: [] }),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &((*_1).0: std::sync::atomic::AtomicPtr<imp::Waiter>),
            _10 = &(*_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &mut _3,
            StorageLive(_18),
            _18 = &_7,
            StorageLive(_19),
            _19 = &mut _5,
            _16 = {closure@src/imp_std.rs:70:23: 70:25} { f: move _17, slot: move _18, res: move _19 },
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _15 = &mut _16,
            _14 = &mut (*_15),
            _13 = move _14 as &mut dyn std::ops::FnMut() -> bool (PointerCoercion(Unsize)),
            StorageDead(_14),
            _12 = std::option::Option::<&mut dyn std::ops::FnMut() -> bool>::Some(move _13),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:68:9: 83:10 (#0),
                    scope: scope[3],
                },
                kind: _9 = imp::initialize_or_wait(move _10, move _12) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_16),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_9),
            _0 = move _5,
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:6: 85:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:85:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:61:5: 85:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:61:52: 61:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} imp::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:61:36: 61:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:61:46: 61:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:61:43: 61:44 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:61:43: 61:44 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:61:43: 61:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:65:21: 65:28 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:65:13: 65:18 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:65:13: 65:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:65:26: 65:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:66:38: 66:44 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:66:13: 66:20 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<(), E/#2>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(0),
                            projs: [],
                        },
                        src/imp_std.rs:66:22: 66:35 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/imp_std.rs:66:13: 66:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:66:41: 66:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:67:36: 67:52 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:67:13: 67:17 (#0),
                    },
                ),
            ),
        ),
        ty: *mut std::option::Option<T/#0>,
        user_ty: Some(
            UserTypeProjections {
                contents: [
                    (
                        UserTypeProjection {
                            base: UserType(2),
                            projs: [],
                        },
                        src/imp_std.rs:67:19: 67:33 (#0),
                    ),
                ],
            },
        ),
        source_info: SourceInfo {
            span: src/imp_std.rs:67:13: 67:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::cell::UnsafeCell<std::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:67:36: 67:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:68:9: 83:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:69:13: 69:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:69:13: 69:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:13: 82:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:18: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Closure(DefId(0:35 ~ once_cell[72b9]::imp::{impl#4}::initialize::{closure#0}), [T/#0, F/#1, E/#2, i16, Binder { value: extern "RustCall" fn(()) -> bool, bound_vars: [] }, (&'{erased} mut std::option::Option<F/#1>, &'{erased} *mut std::option::Option<T/#0>, &'{erased} mut std::result::Result<(), E/#2>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:18: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Closure(DefId(0:35 ~ once_cell[72b9]::imp::{impl#4}::initialize::{closure#0}), [T/#0, F/#1, E/#2, i16, Binder { value: extern "RustCall" fn(()) -> bool, bound_vars: [] }, (&'{erased} mut std::option::Option<F/#1>, &'{erased} *mut std::option::Option<T/#0>, &'{erased} mut std::result::Result<(), E/#2>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:18: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:35 ~ once_cell[72b9]::imp::{impl#4}::initialize::{closure#0}),
            [
                T/#0,
                F/#1,
                E/#2,
                i16,
                Binder { value: extern "RustCall" fn(()) -> bool, bound_vars: [] },
                (&'{erased} mut std::option::Option<F/#1>, &'{erased} *mut std::option::Option<T/#0>, &'{erased} mut std::result::Result<(), E/#2>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:23: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::option::Option<F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:23: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} *mut std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:23: 82:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::result::Result<(), E/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:70:23: 82:14 (#0),
            scope: scope[0],
        },
    },
]