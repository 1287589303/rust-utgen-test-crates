[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            _2 = std::option::Option::<T>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:471:31: 471:52 (#0),
                    scope: scope[0],
                },
                kind: _1 = std::cell::UnsafeCell::<std::option::Option<T>>::new(move _2) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            _0 = unsync::OnceCell::<T> { inner: move _1 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:471:53: 471:54 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:472:10: 472:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:471:51: 471:52 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:470:9: 472:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: unsync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:470:31: 470:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::cell::UnsafeCell<std::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:471:31: 471:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:471:13: 471:54 (#0),
                },
            ),
        ),
        ty: std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:471:47: 471:51 (#0),
            scope: scope[0],
        },
    },
]