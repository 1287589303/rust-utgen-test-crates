[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:178:26: 178:55 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::sync::atomic::AtomicPtr::<imp::Waiter>::load(move _4, move _5) -> [return: bb1, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:180:5: 207:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:180:5: 207:6 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:181:26: 181:50 (#0),
                    scope: scope[1],
                },
                kind: _9 = imp::strict::addr::<imp::Waiter>(move _10) -> [return: bb4, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            _8 = BitAnd(move _9, const imp::STATE_MASK),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _8,
            StorageLive(_13),
            _13 = &mut _2,
            _11 = (move _12, move _13),
            StorageDead(_13),
            StorageDead(_12),
            PlaceMention(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:182:9: 182:38 (#0),
                    scope: scope[2],
                },
                kind: switchInt((_11.0: usize)) -> [2: bb6, 0: bb7, 1: bb9, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_43),
            _43 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#35),
                    scope: scope[2],
                },
                kind: switchInt(move _43) -> [0: bb27, otherwise: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:183:13: 183:26 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = discriminant((*(_11.1: &mut std::option::Option<&mut dyn std::ops::FnMut() -> bool>))),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:182:9: 182:38 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [0: bb9, 1: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:184:13: 184:37 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:201:13: 201:46 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:183:30: 183:36 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = &mut (((*(_11.1: &mut std::option::Option<&mut dyn std::ops::FnMut() -> bool>)) as Some).0: &mut dyn std::ops::FnMut() -> bool),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
            StorageLive(_20),
            _20 = _3,
            StorageLive(_21),
            StorageLive(_22),
            _22 = _3,
            StorageLive(_23),
            _23 = {closure@src/imp_std.rs:187:50: 187:53},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:187:21: 187:82 (#0),
                    scope: scope[3],
                },
                kind: _21 = imp::strict::map_addr::<imp::Waiter, {closure@src/imp_std.rs:187:50: 187:53}>(move _22, move _23) -> [return: bb12, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_24),
            _24 = std::sync::atomic::Ordering::Acquire,
            StorageLive(_25),
            _25 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:185:32: 190:18 (#0),
                    scope: scope[3],
                },
                kind: _18 = std::sync::atomic::AtomicPtr::<imp::Waiter>::compare_exchange(move _19, move _20, move _21, move _24, move _25) -> [return: bb13, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_26),
            PlaceMention(_18),
            _27 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:191:24: 191:38 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _27) -> [1: bb14, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:191:24: 191:38 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_28),
            _28 = ((_18 as Err).0: *mut imp::Waiter),
            StorageLive(_30),
            _30 = _28,
            _3 = move _30,
            StorageDead(_30),
            StorageDead(_28),
            StorageDead(_26),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_8),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _26 = const (),
            StorageDead(_26),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &(*_1),
            _31 = imp::Guard::<'_> { queue: move _32, new_queue: const imp::INCOMPLETE_PTR },
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = &mut (*_16),
            StorageLive(_36),
            _36 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:196:20: 196:26 (#0),
                    scope: scope[6],
                },
                kind: _34 = <&mut dyn std::ops::FnMut() -> bool as std::ops::FnMut<()>>::call_mut(move _35, move _36) -> [return: bb17, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:196:20: 196:26 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _34) -> [0: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            (_31.1: *mut imp::Waiter) = const imp::COMPLETE_PTR,
            _33 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:196:17: 198:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_35),
            _33 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:196:17: 198:18 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:200:13: 200:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb30, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_37),
            StorageLive(_38),
            _38 = &(*_1),
            StorageLive(_39),
            _39 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:202:17: 202:40 (#0),
                    scope: scope[2],
                },
                kind: _37 = imp::wait(move _38, move _39) -> [return: bb22, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
            StorageDead(_38),
            StorageDead(_37),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(*_1),
            StorageLive(_42),
            _42 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:203:30: 203:59 (#0),
                    scope: scope[2],
                },
                kind: _40 = std::sync::atomic::AtomicPtr::<imp::Waiter>::load(move _41, move _42) -> [return: bb23, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            _3 = move _40,
            StorageDead(_40),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:201:50: 204:14 (#0),
                    scope: scope[2],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:205:32: 205:37 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _45) -> [0: bb25, otherwise: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_46),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#36),
                    scope: scope[2],
                },
                kind: _46 = core::panicking::panic(const "assertion failed: false") -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _44 = const (),
            StorageDead(_45),
            StorageDead(_44),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#34),
                    scope: scope[2],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#34),
                    scope: scope[2],
                },
                kind: goto -> bb28,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:318:9: 318:10 (#34),
                    scope: scope[2],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:180:5: 207:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_31),
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb31,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_11),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:208:2: 208:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:200:13: 200:14 (#0),
                    scope: scope[4],
                },
                kind: drop(_31) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:177:1: 208:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:177:93: 177:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:177:30: 177:48 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:177:23: 177:28 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:177:23: 177:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:177:23: 177:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:177:60: 177:92 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:177:50: 177:58 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:177:50: 177:58 (#0),
                    },
                ),
            ),
        ),
        ty: std::option::Option<&'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:177:50: 177:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:178:26: 178:55 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:178:9: 178:23 (#0),
                    },
                ),
            ),
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:178:9: 178:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:178:26: 178:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:178:37: 178:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:180:5: 207:6 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:180:5: 207:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:177:1: 208:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:181:26: 181:63 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:181:13: 181:23 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:181:13: 181:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:181:26: 181:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:181:39: 181:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: (usize, &'{erased} mut std::option::Option<&'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased}>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:182:15: 182:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:182:16: 182:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<&'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:182:28: 182:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:184:26: 184:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:183:30: 183:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/imp_std.rs:182:15: 182:38 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:184:13: 184:37 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut &'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:184:31: 184:35 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:184:41: 200:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:185:32: 190:18 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:185:21: 185:29 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<*mut imp::Waiter, *mut imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:185:21: 185:29 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:185:32: 185:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:186:21: 186:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:187:21: 187:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:187:38: 187:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:58 ~ once_cell[72b9]::imp::initialize_or_wait::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:187:50: 187:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:188:21: 188:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:189:21: 189:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:191:17: 194:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:191:24: 191:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/imp_std.rs:191:41: 191:49 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:191:24: 191:38 (#0),
                    },
                ),
            ),
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:191:28: 191:37 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:191:50: 194:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:192:34: 192:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:195:33: 195:75 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:195:21: 195:30 (#0),
                    },
                ),
            ),
        ),
        ty: imp::Guard<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:195:21: 195:30 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:195:41: 195:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:196:17: 198:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:196:20: 196:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut dyn [Binder { value: Trait(std::ops::FnMut<()>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:196:20: 196:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:196:20: 196:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:202:17: 202:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:202:22: 202:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:202:29: 202:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:203:30: 203:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:203:30: 203:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:203:41: 203:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:182:9: 206:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#35),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#36),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:205:32: 205:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#36),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#36),
            scope: scope[0],
        },
    },
]