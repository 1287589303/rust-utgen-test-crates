[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = move (_1.0: sync::OnceCell<T>),
            FakeRead(ForLet(None), _2),
            StorageLive(_3),
            _3 = move (_1.1: std::cell::Cell<std::option::Option<F>>),
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1288:13: 1288:30 (#0),
                    scope: scope[2],
                },
                kind: _4 = sync::OnceCell::<T>::into_inner(move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_3,
            _6 = {closure@src/lib.rs:1288:42: 1288:44} { init: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1288:13: 1290:15 (#0),
                    scope: scope[2],
                },
                kind: _0 = std::option::Option::<T>::ok_or_else::<F, {closure@src/lib.rs:1288:42: 1288:44}>(move _4, move _6) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb5, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:10: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1290:14: 1290:15 (#0),
                    scope: scope[2],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1288:29: 1288:30 (#0),
                    scope: scope[2],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1291:9: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1285:9: 1291:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1285:48: 1285:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1285:33: 1285:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1285:27: 1285:31 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1285:27: 1285:31 (#0),
                    },
                ),
            ),
        ),
        ty: sync::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1285:27: 1285:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1286:24: 1286:33 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1286:17: 1286:21 (#0),
                    },
                ),
            ),
        ),
        ty: sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1286:17: 1286:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1287:24: 1287:33 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1287:17: 1287:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::cell::Cell<std::option::Option<F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1287:17: 1287:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1288:13: 1290:15 (#0),
                },
            ),
        ),
        ty: std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1288:13: 1288:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1288:13: 1290:15 (#0),
                },
            ),
        ),
        ty: sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1288:13: 1288:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1288:13: 1290:15 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:236 ~ once_cell[72b9]::sync::{impl#10}::into_value::{closure#0}),
            [
                T/#0,
                F/#1,
                i32,
                Binder { value: extern "RustCall" fn(()) -> F/#1, bound_vars: [] },
                (&'{erased} std::cell::Cell<std::option::Option<F/#1>>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1288:42: 1290:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1288:13: 1290:15 (#0),
                },
            ),
        ),
        ty: &'{erased} std::cell::Cell<std::option::Option<F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1288:42: 1290:14 (#0),
            scope: scope[0],
        },
    },
]