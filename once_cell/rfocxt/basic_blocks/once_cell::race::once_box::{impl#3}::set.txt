[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:379:23: 379:43 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::boxed::Box::<T>::into_raw(move _4) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: std::sync::atomic::AtomicPtr<T>),
            StorageLive(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:381:17: 381:32 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::ptr::null_mut::<T>() -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = _3,
            StorageLive(_9),
            _9 = std::sync::atomic::Ordering::AcqRel,
            StorageLive(_10),
            _10 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:380:28: 385:14 (#0),
                    scope: scope[1],
                },
                kind: _5 = std::sync::atomic::AtomicPtr::<T>::compare_exchange(move _6, move _7, move _8, move _9, move _10) -> [return: bb3, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:386:16: 386:33 (#0),
                    scope: scope[2],
                },
                kind: _12 = std::result::Result::<*mut T, *mut T>::is_err(move _13) -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:386:16: 386:33 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _12) -> [0: bb8, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:387:38: 387:56 (#0),
                    scope: scope[2],
                },
                kind: _15 = std::boxed::Box::<T>::from_raw(move _16) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageLive(_17),
            _17 = move _15,
            _0 = std::result::Result::<(), std::boxed::Box<T>>::Err(move _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:388:33: 388:34 (#0),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:389:13: 389:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = const (),
            StorageDead(_12),
            StorageDead(_11),
            StorageLive(_18),
            _18 = (),
            _0 = std::result::Result::<(), std::boxed::Box<T>>::Ok(move _18),
            StorageDead(_18),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:391:9: 391:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:391:9: 391:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:391:10: 391:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:389:13: 389:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:379:42: 379:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:391:9: 391:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:378:9: 391:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<(), std::boxed::Box<T/#0, std::alloc::Global>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:378:45: 378:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::once_box::OnceBox<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:378:20: 378:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/race.rs:378:34: 378:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:378:27: 378:32 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:378:27: 378:32 (#0),
                    },
                ),
            ),
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:378:27: 378:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:379:23: 379:43 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:379:17: 379:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:379:17: 379:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:379:37: 379:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:380:28: 385:14 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:380:17: 380:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<*mut T/#0, *mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:380:17: 380:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:380:28: 380:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:381:17: 381:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:382:17: 382:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:383:17: 383:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:384:17: 384:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:386:13: 389:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:386:16: 386:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::result::Result<*mut T/#0, *mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:386:16: 386:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:386:34: 389:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:387:29: 387:58 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:387:21: 387:26 (#0),
                    },
                ),
            ),
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:387:21: 387:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:387:38: 387:56 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:387:52: 387:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:388:28: 388:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:390:16: 390:18 (#0),
            scope: scope[0],
        },
    },
]