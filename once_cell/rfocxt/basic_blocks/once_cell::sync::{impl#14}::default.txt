[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            _1 = <T as std::default::Default>::default as fn() -> T (PointerCoercion(ReifyFnPointer)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1389:13: 1389:34 (#0),
                    scope: scope[0],
                },
                kind: _0 = sync::Lazy::<T>::new(move _1) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1390:10: 1390:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1388:9: 1390:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: sync::Lazy<T/#0, Binder { value: fn() -> T/#0, bound_vars: [] }>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1388:25: 1388:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1389:13: 1389:34 (#0),
                },
            ),
        ),
        ty: Binder { value: fn() -> T/#0, bound_vars: [] },
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1389:23: 1389:33 (#0),
            scope: scope[0],
        },
    },
]