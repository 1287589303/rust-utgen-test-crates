[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:211:22: 211:46 (#0),
                    scope: scope[0],
                },
                kind: _4 = imp::strict::addr::<imp::Waiter>(move _5) -> [return: bb1, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = BitAnd(move _4, const imp::STATE_MASK),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:212:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:212:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:214:36: 214:53 (#0),
                    scope: scope[1],
                },
                kind: _10 = std::thread::current() -> [return: bb4, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = std::option::Option::<std::thread::Thread>::Some(move _10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:214:53: 214:54 (#0),
                    scope: scope[1],
                },
                kind: drop(_10) -> [return: bb5, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:214:21: 214:55 (#0),
                    scope: scope[1],
                },
                kind: _8 = std::cell::Cell::<std::option::Option<std::thread::Thread>>::new(move _9) -> [return: bb6, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:215:23: 215:45 (#0),
                    scope: scope[1],
                },
                kind: _11 = std::sync::atomic::AtomicBool::new(const false) -> [return: bb7, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            StorageLive(_14),
            _14 = {closure@src/imp_std.rs:216:48: 216:51},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:216:19: 216:68 (#0),
                    scope: scope[1],
                },
                kind: _12 = imp::strict::map_addr::<imp::Waiter, {closure@src/imp_std.rs:216:48: 216:51}>(move _13, move _14) -> [return: bb8, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _7 = imp::Waiter { thread: move _8, signaled: move _11, next: move _12 },
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:217:9: 217:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_7,
            _16 = &raw const (*_17),
            _15 = move _16 as *mut imp::Waiter (PtrToPtr),
            StorageDead(_16),
            FakeRead(ForLet(None), _15),
            StorageDead(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &(*_1),
            StorageLive(_20),
            _20 = _2,
            StorageLive(_21),
            StorageLive(_22),
            _22 = _15,
            StorageLive(_23),
            StorageLive(_24),
            _24 = &_3,
            _23 = {closure@src/imp_std.rs:222:34: 222:37} { curr_state: move _24 },
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:222:13: 222:53 (#0),
                    scope: scope[3],
                },
                kind: _21 = imp::strict::map_addr::<imp::Waiter, {closure@src/imp_std.rs:222:34: 222:37}>(move _22, move _23) -> [return: bb10, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            StorageLive(_25),
            _25 = std::sync::atomic::Ordering::Release,
            StorageLive(_26),
            _26 = std::sync::atomic::Ordering::Relaxed,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:220:24: 225:10 (#0),
                    scope: scope[3],
                },
                kind: _18 = std::sync::atomic::AtomicPtr::<imp::Waiter>::compare_exchange(move _19, move _20, move _21, move _25, move _26) -> [return: bb11, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            FakeRead(ForLet(None), _18),
            StorageLive(_27),
            PlaceMention(_18),
            _28 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:226:16: 226:30 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _28) -> [1: bb12, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:226:16: 226:30 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb13, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = ((_18 as Err).0: *mut imp::Waiter),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            StorageLive(_35),
            _35 = _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:227:16: 227:39 (#0),
                    scope: scope[5],
                },
                kind: _34 = imp::strict::addr::<imp::Waiter>(move _35) -> [return: bb14, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            _33 = BitAnd(move _34, const imp::STATE_MASK),
            StorageDead(_34),
            StorageLive(_36),
            _36 = _3,
            _32 = Ne(move _33, move _36),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:227:16: 227:66 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _32) -> [0: bb16, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_33),
            _0 = const (),
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_18),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:238:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb26, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_36),
            StorageDead(_33),
            _31 = const (),
            StorageDead(_32),
            StorageDead(_31),
            StorageLive(_38),
            _38 = _29,
            _2 = move _38,
            StorageDead(_38),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_18),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:238:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb25, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = const (),
            StorageDead(_27),
            StorageLive(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:234:9: 236:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:234:9: 236:10 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb19, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_40),
            StorageLive(_41),
            _41 = &(_7.1: std::sync::atomic::AtomicBool),
            StorageLive(_42),
            _42 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:234:16: 234:53 (#0),
                    scope: scope[4],
                },
                kind: _40 = std::sync::atomic::AtomicBool::load(move _41, move _42) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:234:16: 234:53 (#0),
                    scope: scope[4],
                },
                kind: switchInt(move _40) -> [0: bb22, otherwise: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_45),
            _39 = const (),
            StorageDead(_45),
            StorageDead(_40),
            StorageDead(_39),
            _0 = const (),
            StorageDead(_18),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:238:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb24, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageLive(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:235:13: 235:27 (#0),
                    scope: scope[4],
                },
                kind: _43 = std::thread::park() -> [return: bb23, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            _6 = const (),
            StorageDead(_40),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:234:9: 236:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb18,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:239:2: 239:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:239:2: 239:2 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:239:2: 239:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:238:5: 238:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:217:9: 217:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:214:54: 214:55 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:210:1: 239:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:210:64: 210:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:210:16: 210:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:210:9: 210:14 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:210:9: 210:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:210:9: 210:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/imp_std.rs:210:52: 210:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:210:36: 210:50 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:210:36: 210:50 (#0),
                    },
                ),
            ),
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:210:36: 210:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:211:22: 211:59 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:211:9: 211:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:211:9: 211:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:211:22: 211:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:211:35: 211:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:210:1: 239:2 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:213:20: 217:10 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:213:13: 213:17 (#0),
                    },
                ),
            ),
        ),
        ty: imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:213:13: 213:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::cell::Cell<std::option::Option<std::thread::Thread>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:214:21: 214:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<std::thread::Thread>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:214:31: 214:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::thread::Thread,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:214:36: 214:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::atomic::AtomicBool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:215:23: 215:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:216:19: 216:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:216:36: 216:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:60 ~ once_cell[72b9]::imp::wait::{closure#0}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:216:48: 216:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:218:18: 218:55 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:218:13: 218:15 (#0),
                    },
                ),
            ),
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:218:13: 218:15 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:218:18: 218:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:218:18: 218:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/imp_std.rs:220:24: 225:10 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:220:13: 220:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<*mut imp::Waiter, *mut imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:220:13: 220:21 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:220:24: 220:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:221:13: 221:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:222:13: 222:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:222:30: 222:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:61 ~ once_cell[72b9]::imp::wait::{closure#1}),
            [
                i32,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (&'{erased} usize,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:222:34: 222:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:222:34: 222:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:223:13: 223:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:224:13: 224:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:226:9: 232:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:226:16: 226:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/imp_std.rs:226:33: 226:41 (#0),
                            ),
                        ),
                        pat_span: src/imp_std.rs:226:16: 226:30 (#0),
                    },
                ),
            ),
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:226:20: 226:29 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:226:42: 232:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:13: 229:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:16: 227:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:16: 227:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:16: 227:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:29: 227:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:56: 227:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:227:67: 229:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut imp::Waiter,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:230:26: 230:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:9: 236:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:234:9: 236:10 (#106),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:16: 234:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:234:9: 236:10 (#106),
                },
            ),
        ),
        ty: &'{erased} std::sync::atomic::AtomicBool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:16: 234:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:234:9: 236:10 (#106),
                },
            ),
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:35: 234:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:235:13: 235:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/imp_std.rs:234:9: 236:10 (#106),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:9: 236:10 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:9: 236:10 (#106),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:234:9: 236:10 (#106),
            scope: scope[0],
        },
    },
]