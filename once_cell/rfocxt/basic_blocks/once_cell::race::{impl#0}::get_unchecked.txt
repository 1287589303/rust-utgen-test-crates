[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: std::sync::atomic::AtomicUsize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:61:17: 61:36 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::sync::atomic::AtomicUsize::as_ptr(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:71:28: 71:36 (#0),
                    scope: scope[1],
                },
                kind: _4 = std::ptr::mut_ptr::<impl *mut usize>::read(move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_6),
            _6 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:75:18: 75:50 (#0),
                    scope: scope[2],
                },
                kind: _0 = std::num::NonZero::<usize>::new_unchecked(move _6) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:76:6: 76:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:60:5: 76:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:60:43: 60:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::OnceNonZeroUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:60:33: 60:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:61:17: 61:36 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:61:13: 61:14 (#0),
                    },
                ),
            ),
        ),
        ty: *mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:61:13: 61:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:61:17: 61:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:71:19: 71:38 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:71:13: 71:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:71:13: 71:16 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:71:28: 71:36 (#0),
                },
            ),
        ),
        ty: *mut usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:71:28: 71:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:75:18: 75:50 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:75:46: 75:49 (#0),
            scope: scope[0],
        },
    },
]