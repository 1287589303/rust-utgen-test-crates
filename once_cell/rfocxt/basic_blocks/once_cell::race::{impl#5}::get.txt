[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &((*_1).0: std::sync::atomic::AtomicPtr<T>),
            StorageLive(_4),
            _4 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:234:19: 234:53 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::sync::atomic::AtomicPtr::<T>::load(move _3, move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:235:18: 235:30 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::ptr::mut_ptr::<impl *mut T>::as_ref::<'_>(move _5) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:236:6: 236:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:233:5: 236:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:233:26: 233:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::OnceRef<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:233:16: 233:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:234:19: 234:53 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:234:13: 234:16 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:234:13: 234:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:234:19: 234:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:234:35: 234:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:235:18: 235:30 (#0),
                },
            ),
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:235:18: 235:21 (#0),
            scope: scope[0],
        },
    },
]