[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = {closure@src/lib.rs:1120:40: 1120:42} { f: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1120:19: 1120:62 (#0),
                    scope: scope[0],
                },
                kind: _3 = sync::OnceCell::<T>::get_or_try_init::<{closure@src/lib.rs:1120:40: 1120:42}, sync::OnceCell<T>::get_or_init::Void>(move _4, move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1120:13: 1120:62 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1120:19: 1120:62 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1121:17: 1121:24 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_3 as Err).0: sync::OnceCell<T>::get_or_init::Void),
            StorageLive(_9),
            PlaceMention(_8),
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1122:36: 1122:40 (#0),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = ((_3 as Ok).0: &T),
            _0 = &(*_7),
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1124:9: 1124:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1124:10: 1124:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1120:61: 1120:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1124:9: 1124:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1115:9: 1124:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1115:47: 1115:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1115:31: 1115:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1115:41: 1115:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1115:38: 1115:39 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1115:38: 1115:39 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1115:38: 1115:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1120:13: 1123:14 (#0),
                },
            ),
        ),
        ty: std::result::Result<&'{erased} T/#0, sync::OnceCell<T>::get_or_init::Void>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1120:19: 1120:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1120:13: 1123:14 (#0),
                },
            ),
        ),
        ty: &'{erased} sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1120:19: 1120:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1120:13: 1123:14 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:210 ~ once_cell[72b9]::sync::{impl#6}::get_or_init::{closure#0}),
            [
                T/#0,
                F/#1,
                i32,
                Binder { value: extern "RustCall" fn(()) -> std::result::Result<T/#0, sync::OnceCell<T>::get_or_init::Void>, bound_vars: [] },
                (F/#1,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1120:40: 1120:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1121:17: 1121:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:1120:19: 1120:62 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1121:17: 1121:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1121:20: 1121:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:1120:19: 1120:62 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1122:17: 1122:26 (#0),
                    },
                ),
            ),
        ),
        ty: sync::OnceCell<T>::get_or_init::Void,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1122:21: 1122:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1120:13: 1123:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1122:30: 1122:43 (#0),
            scope: scope[0],
        },
    },
]