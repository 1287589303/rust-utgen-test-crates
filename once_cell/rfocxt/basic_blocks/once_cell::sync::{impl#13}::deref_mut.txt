[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1382:13: 1382:34 (#0),
                    scope: scope[0],
                },
                kind: _3 = sync::Lazy::<T, F>::force_mut(move _4) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            StorageDead(_4),
            _0 = &mut (*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1383:10: 1383:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1381:9: 1383:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1381:36: 1381:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut sync::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1381:22: 1381:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1382:13: 1382:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1382:13: 1382:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1382:13: 1382:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1382:13: 1382:34 (#0),
                },
            ),
        ),
        ty: &'{erased} mut sync::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1382:29: 1382:33 (#0),
            scope: scope[0],
        },
    },
]