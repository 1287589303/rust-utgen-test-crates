[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            _8 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:26 (#0),
                    scope: scope[0],
                },
                kind: _6 = <impl FnOnce() -> Result<NonZeroUsize, E> as std::ops::FnOnce<()>>::call_once(move _7, move _8) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:27 (#127),
                    scope: scope[0],
                },
                kind: _5 = <std::result::Result<std::num::NonZero<usize>, E> as std::ops::Try>::branch(move _6) -> [return: bb2, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            PlaceMention(_5),
            _9 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:27 (#127),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:27 (#127),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:26: 130:27 (#128),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_5 as Continue).0: std::num::NonZero<usize>),
            _4 = _13,
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:33 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::num::NonZero::<usize>::get(move _4) -> [return: bb8, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_5 as Break).0: std::result::Result<std::convert::Infallible, E>),
            StorageLive(_12),
            _12 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:23: 130:27 (#127),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<std::num::NonZero<usize>, E> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, E>>>::from_residual(move _12) -> [return: bb7, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:26: 130:27 (#128),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb16, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:33: 130:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb9, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &((*_1).0: std::sync::atomic::AtomicUsize),
            StorageLive(_16),
            _16 = _3,
            StorageLive(_17),
            _17 = std::sync::atomic::Ordering::AcqRel,
            StorageLive(_18),
            _18 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:131:24: 131:96 (#0),
                    scope: scope[1],
                },
                kind: _14 = std::sync::atomic::AtomicUsize::compare_exchange(move _15, const 0_usize, move _16, move _17, move _18) -> [return: bb10, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageLive(_19),
            PlaceMention(_14),
            _20 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:132:16: 132:24 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _20) -> [1: bb11, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:132:16: 132:24 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = ((_14 as Err).0: usize),
            StorageLive(_22),
            _22 = _21,
            _3 = move _22,
            StorageDead(_22),
            _19 = const (),
            StorageDead(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:132:9: 134:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:132:9: 134:10 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb14,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageLive(_23),
            StorageLive(_24),
            _24 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:135:21: 135:53 (#0),
                    scope: scope[6],
                },
                kind: _23 = std::num::NonZero::<usize>::new_unchecked(move _24) -> [return: bb15, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _0 = std::result::Result::<std::num::NonZero<usize>, E>::Ok(move _23),
            StorageDead(_23),
            StorageDead(_14),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:136:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:33: 130:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:136:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:136:6: 136:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:26: 130:27 (#127),
                    scope: scope[3],
                },
                kind: drop(_12) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:26: 130:27 (#128),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:33: 130:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:26: 130:27 (#127),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:130:25: 130:26 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:136:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:129:5: 136:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::num::NonZero<usize>, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:129:71: 129:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::OnceNonZeroUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:129:16: 129:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/race.rs:129:26: 129:66 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:129:23: 129:24 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:129:23: 129:24 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnOnce() -> Result<NonZeroUsize, E>/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:129:23: 129:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:130:23: 130:33 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:130:13: 130:20 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:13: 130:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E/#0>, std::num::NonZero<usize>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:27 (#127),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::num::NonZero<usize>, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: impl FnOnce() -> Result<NonZeroUsize, E>/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:26: 130:27 (#128),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/race.rs:130:23: 130:27 (#127),
                            ),
                        ),
                        pat_span: src/race.rs:130:26: 130:27 (#128),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:26: 130:27 (#128),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:26: 130:27 (#128),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, E/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:26: 130:27 (#128),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/race.rs:130:23: 130:27 (#127),
                            ),
                        ),
                        pat_span: src/race.rs:130:23: 130:27 (#127),
                    },
                ),
            ),
        ),
        ty: std::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:130:23: 130:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:131:24: 131:96 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:131:13: 131:21 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<usize, usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:131:13: 131:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicUsize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:131:24: 131:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:131:55: 131:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:131:60: 131:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:131:78: 131:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:132:9: 134:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:132:16: 132:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/race.rs:132:27: 132:35 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:132:16: 132:24 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:132:20: 132:23 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:133:19: 133:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::num::NonZero<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:135:12: 135:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:135:21: 135:53 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:135:49: 135:52 (#0),
            scope: scope[0],
        },
    },
]