[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: std::sync::atomic::AtomicPtr<T>),
            StorageLive(_5),
            _5 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:280:23: 280:57 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::sync::atomic::AtomicPtr::<T>::load(move _4, move _5) -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:282:12: 282:25 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::ptr::mut_ptr::<impl *mut T>::is_null(move _8) -> [return: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:282:12: 282:25 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _7) -> [0: bb18, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _2,
            StorageLive(_14),
            _14 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:19: 284:22 (#0),
                    scope: scope[1],
                },
                kind: _12 = <F as std::ops::FnOnce<()>>::call_once(move _13, move _14) -> [return: bb4, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:19: 284:23 (#131),
                    scope: scope[1],
                },
                kind: _11 = <std::result::Result<&T, E> as std::ops::Try>::branch(move _12) -> [return: bb5, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            _15 = discriminant(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:19: 284:23 (#131),
                    scope: scope[1],
                },
                kind: switchInt(move _15) -> [0: bb8, 1: bb7, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:19: 284:23 (#131),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:22: 284:23 (#132),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb9, imaginary: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = ((_11 as Continue).0: &T),
            _10 = _19,
            StorageDead(_19),
            _9 = &raw const (*_10),
            _3 = move _9 as *mut T (PtrToPtr),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:45: 284:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb11, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_11 as Break).0: std::result::Result<std::convert::Infallible, E>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:19: 284:23 (#131),
                    scope: scope[3],
                },
                kind: _0 = <std::result::Result<&T, E> as std::ops::FromResidual<std::result::Result<std::convert::Infallible, E>>>::from_residual(move _18) -> [return: bb10, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:22: 284:23 (#132),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb20, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*_1).0: std::sync::atomic::AtomicPtr<T>),
            StorageLive(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:286:17: 286:32 (#0),
                    scope: scope[1],
                },
                kind: _22 = std::ptr::null_mut::<T>() -> [return: bb12, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = _3,
            StorageLive(_24),
            _24 = std::sync::atomic::Ordering::AcqRel,
            StorageLive(_25),
            _25 = std::sync::atomic::Ordering::Acquire,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:285:28: 290:14 (#0),
                    scope: scope[1],
                },
                kind: _20 = std::sync::atomic::AtomicPtr::<T>::compare_exchange(move _21, move _22, move _23, move _24, move _25) -> [return: bb13, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_21),
            FakeRead(ForLet(None), _20),
            PlaceMention(_20),
            _26 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:291:20: 291:28 (#0),
                    scope: scope[7],
                },
                kind: switchInt(move _26) -> [1: bb14, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:291:20: 291:28 (#0),
                    scope: scope[7],
                },
                kind: falseEdge -> [real: bb15, imaginary: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = ((_20 as Err).0: *mut T),
            StorageLive(_28),
            _28 = _27,
            _3 = move _28,
            StorageDead(_28),
            _6 = const (),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:291:13: 293:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:291:13: 293:14 (#0),
                    scope: scope[6],
                },
                kind: goto -> bb17,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:282:9: 294:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:282:9: 294:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb19,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &(*_3),
            _29 = &(*_30),
            _0 = std::result::Result::<&T, E>::Ok(move _29),
            StorageDead(_29),
            StorageDead(_3),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:297:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:45: 284:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb21, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:297:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:297:6: 297:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:22: 284:23 (#131),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:22: 284:23 (#132),
                    scope: scope[1],
                },
                kind: drop(_16) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:45: 284:46 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:22: 284:23 (#131),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:284:21: 284:22 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:297:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:276:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<&'{erased} T/#1, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:276:50: 276:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} race::OnceRef<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:276:34: 276:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/race.rs:276:44: 276:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:276:41: 276:42 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:276:41: 276:42 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:276:41: 276:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:280:23: 280:57 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:280:13: 280:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:280:13: 280:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:280:23: 280:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:280:39: 280:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:282:9: 294:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:282:12: 282:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:282:12: 282:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, E/#3>, &'{erased} T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:23 (#131),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<&'{erased} T/#1, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:22: 284:23 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/race.rs:284:19: 284:23 (#131),
                            ),
                        ),
                        pat_span: src/race.rs:284:22: 284:23 (#132),
                    },
                ),
            ),
        ),
        ty: std::result::Result<std::convert::Infallible, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:22: 284:23 (#132),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:22: 284:23 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::result::Result<std::convert::Infallible, E/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:22: 284:23 (#132),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/race.rs:284:19: 284:23 (#131),
                            ),
                        ),
                        pat_span: src/race.rs:284:19: 284:23 (#131),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:284:19: 284:23 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:285:28: 290:14 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:285:17: 285:25 (#0),
                    },
                ),
            ),
        ),
        ty: std::result::Result<*mut T/#1, *mut T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:285:17: 285:25 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} std::sync::atomic::AtomicPtr<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:285:28: 285:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:286:17: 286:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:287:17: 287:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:288:17: 288:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::sync::atomic::Ordering,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:289:17: 289:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:291:20: 291:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/race.rs:291:31: 291:39 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:291:20: 291:28 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:291:24: 291:27 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:292:23: 292:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:296:12: 296:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:296:21: 296:26 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:296:21: 296:26 (#0),
            scope: scope[0],
        },
    },
]