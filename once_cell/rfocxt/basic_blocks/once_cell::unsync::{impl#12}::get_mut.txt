[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).0: unsync::OnceCell<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:836:13: 836:32 (#0),
                    scope: scope[0],
                },
                kind: _0 = unsync::OnceCell::<T>::get_mut(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:837:10: 837:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:835:9: 837:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:835:50: 835:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:835:30: 835:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:835:24: 835:28 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:835:24: 835:28 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut unsync::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:835:24: 835:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:836:13: 836:32 (#0),
                },
            ),
        ),
        ty: &'{erased} mut unsync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:836:13: 836:22 (#0),
            scope: scope[0],
        },
    },
]