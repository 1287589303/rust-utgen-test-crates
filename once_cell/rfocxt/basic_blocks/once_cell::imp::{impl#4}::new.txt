[
    BasicBlockData {
        statements: [
            StorageLive(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:40:27: 40:57 (#0),
                    scope: scope[0],
                },
                kind: _1 = std::sync::atomic::AtomicPtr::<imp::Waiter>::new(const imp::INCOMPLETE_PTR) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = std::option::Option::<T>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:40:66: 40:87 (#0),
                    scope: scope[0],
                },
                kind: _2 = std::cell::UnsafeCell::<std::option::Option<T>>::new(move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            _0 = imp::OnceCell::<T> { queue: move _1, value: move _2 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:40:88: 40:89 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:41:6: 41:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:40:86: 40:87 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/imp_std.rs:39:5: 41:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: imp::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:39:34: 39:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::sync::atomic::AtomicPtr<imp::Waiter>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:40:27: 40:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::cell::UnsafeCell<std::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:40:66: 40:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/imp_std.rs:40:9: 40:89 (#0),
                },
            ),
        ),
        ty: std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/imp_std.rs:40:82: 40:86 (#0),
            scope: scope[0],
        },
    },
]