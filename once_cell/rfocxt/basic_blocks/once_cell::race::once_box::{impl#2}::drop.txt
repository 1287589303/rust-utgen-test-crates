[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: std::sync::atomic::AtomicPtr<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:347:24: 347:44 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::sync::atomic::AtomicPtr::<T>::get_mut(move _4) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _2 = (*_3),
            FakeRead(ForLet(None), _2),
            StorageDead(_3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:348:17: 348:30 (#0),
                    scope: scope[1],
                },
                kind: _5 = std::ptr::mut_ptr::<impl *mut T>::is_null(move _6) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:348:17: 348:30 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _5) -> [0: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:348:13: 350:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:349:31: 349:49 (#0),
                    scope: scope[1],
                },
                kind: _7 = std::boxed::Box::<T>::from_raw(move _8) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:349:17: 349:52 (#0),
                    scope: scope[1],
                },
                kind: _0 = std::mem::drop::<std::boxed::Box<T>>(move _7) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:348:13: 350:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:351:10: 351:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:349:51: 349:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/race.rs:346:9: 351:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:346:27: 346:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut race::once_box::OnceBox<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:346:17: 346:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/race.rs:347:23: 347:44 (#0),
                            ),
                        ),
                        pat_span: src/race.rs:347:17: 347:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:347:17: 347:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:347:24: 347:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut std::sync::atomic::AtomicPtr<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:347:24: 347:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/race.rs:348:13: 350:14 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:348:17: 348:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/race.rs:348:13: 350:14 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:348:17: 348:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/race.rs:349:17: 349:52 (#0),
                },
            ),
        ),
        ty: std::boxed::Box<T/#0, std::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:349:22: 349:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/race.rs:349:31: 349:49 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/race.rs:349:45: 349:48 (#0),
            scope: scope[0],
        },
    },
]