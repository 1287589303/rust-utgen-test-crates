[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: std::cell::UnsafeCell<std::option::Option<T>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:510:28: 510:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = std::cell::UnsafeCell::<std::option::Option<T>>::get(move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _3 = &mut (*_4),
            _2 = &mut (*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:510:13: 510:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = std::option::Option::<T>::as_mut(move _2) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:511:10: 511:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:508:9: 511:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: std::option::Option<&'{erased} mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:508:38: 508:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut unsync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:508:24: 508:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:510:13: 510:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:510:22: 510:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:510:13: 510:55 (#0),
                },
            ),
        ),
        ty: &'{erased} mut std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:510:22: 510:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:510:22: 510:44 (#0),
                },
            ),
        ),
        ty: *mut std::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:510:28: 510:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:510:22: 510:44 (#0),
                },
            ),
        ),
        ty: &'{erased} std::cell::UnsafeCell<std::option::Option<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:510:28: 510:38 (#0),
            scope: scope[0],
        },
    },
]