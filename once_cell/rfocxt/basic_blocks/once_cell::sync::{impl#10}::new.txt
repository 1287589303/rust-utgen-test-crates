[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:26: 1279:41 (#0),
                    scope: scope[0],
                },
                kind: _2 = sync::OnceCell::<T>::new() -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = move _1,
            _4 = std::option::Option::<F>::Some(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:65: 1279:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:49: 1279:67 (#0),
                    scope: scope[0],
                },
                kind: _3 = std::cell::Cell::<std::option::Option<F>>::new(move _4) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = sync::Lazy::<T, F> { cell: move _2, init: move _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:68: 1279:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:68: 1279:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1280:9: 1280:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1280:10: 1280:10 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:66: 1279:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1279:68: 1279:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1280:9: 1280:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1278:9: 1280:10 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: sync::Lazy<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1278:35: 1278:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1278:29: 1278:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1278:26: 1278:27 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1278:26: 1278:27 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1278:26: 1278:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: sync::OnceCell<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1279:26: 1279:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: std::cell::Cell<std::option::Option<F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1279:49: 1279:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1279:13: 1279:69 (#0),
                },
            ),
        ),
        ty: std::option::Option<F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1279:59: 1279:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1279:64: 1279:65 (#0),
            scope: scope[0],
        },
    },
]