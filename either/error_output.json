{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde-683f899ed1c9b71a/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde-ad84fd081a6bb73a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde_json-a88e225f2440cc72/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde_json-9e27749f8773414e/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde-99dd37db6734e9de.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde-99dd37db6734e9de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libryu-9ac960ab829e07f4.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libryu-9ac960ab829e07f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libmemchr-34eb650b64c0b1fd.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libmemchr-34eb650b64c0b1fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libitoa-e14358a371fd4efa.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libitoa-e14358a371fd4efa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde_json-8f3eaeb02a218342.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde_json-8f3eaeb02a218342.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0282]: type annotations needed\n    --> src/lib.rs:1573:24\n     |\n1573 |    let result = either.cloned();\n     |                        ^^^^^^ cannot infer type\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0282","explanation":"The compiler could not infer a type and asked for a type annotation.\n\nErroneous code example:\n\n```compile_fail,E0282\nlet x = Vec::new();\n```\n\nThis error indicates that type inference did not result in one unique possible\ntype, and extra information is required. In most cases this can be provided\nby adding a type annotation. Sometimes you need to specify a generic type\nparameter manually.\n\nIn the example above, type `Vec` has a type parameter `T`. When calling\n`Vec::new`, barring any other later usage of the variable `x` that allows the\ncompiler to infer what type `T` is, the compiler needs to be told what it is.\n\nThe type can be specified on the variable:\n\n```\nlet x: Vec<i32> = Vec::new();\n```\n\nThe type can also be specified in the path of the expression:\n\n```\nlet x = Vec::<i32>::new();\n```\n\nIn cases with more complex types, it is not necessary to annotate the full\ntype. Once the ambiguity is resolved, the compiler can infer the rest:\n\n```\nlet x: Vec<_> = \"hello\".chars().rev().collect();\n```\n\nAnother way to provide the compiler with enough information, is to specify the\ngeneric type parameter:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<char>>();\n```\n\nAgain, you need not specify the full type if the compiler can infer it:\n\n```\nlet x = \"hello\".chars().rev().collect::<Vec<_>>();\n```\n\nApart from a method or function with a generic type parameter, this error can\noccur when a type parameter of a struct or trait cannot be inferred. In that\ncase it is not always possible to use a type annotation, because all candidates\nhave the same return type. For instance:\n\n```compile_fail,E0282\nstruct Foo<T> {\n    num: T,\n}\n\nimpl<T> Foo<T> {\n    fn bar() -> i32 {\n        0\n    }\n\n    fn baz() {\n        let number = Foo::bar();\n    }\n}\n```\n\nThis will fail because the compiler does not know which instance of `Foo` to\ncall `bar` on. Change `Foo::bar()` to `Foo::<T>::bar()` to resolve the error.\n"},"level":"error","message":"type annotations needed","spans":[{"byte_end":44472,"byte_start":44466,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"cannot infer type","line_end":1573,"line_start":1573,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":24,"text":"   let result = either.cloned();"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `cloned` found for enum `Either<_, &mut String>` in the current scope\n    --> src/lib.rs:1573:24\n     |\n49   | pub enum Either<L, R> {\n     | --------------------- method `cloned` not found for this enum\n...\n1573 |    let result = either.cloned();\n     |                        ^^^^^^ method not found in `Either<_, &mut String>`\n     |\n     = note: the method was found for\n             - `Either<&L, &R>`\n             - `Either<&mut L, &mut R>`\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following trait defines an item `cloned`, perhaps you need to implement it:\n             candidate #1: `Iterator`\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the method was found for\n- `Either<&L, &R>`\n- `Either<&mut L, &mut R>`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the following trait defines an item `cloned`, perhaps you need to implement it:\ncandidate #1: `Iterator`","rendered":null,"spans":[]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `cloned` found for enum `Either<_, &mut String>` in the current scope","spans":[{"byte_end":44472,"byte_start":44466,"column_end":30,"column_start":24,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"method not found in `Either<_, &mut String>`","line_end":1573,"line_start":1573,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":30,"highlight_start":24,"text":"   let result = either.cloned();"}]},{"byte_end":1380,"byte_start":1359,"column_end":22,"column_start":1,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"method `cloned` not found for this enum","line_end":49,"line_start":49,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":1,"text":"pub enum Either<L, R> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 2 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 2 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0282, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0282, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0282`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0282`.","spans":[]}}
{"reason":"build-finished","success":false}
