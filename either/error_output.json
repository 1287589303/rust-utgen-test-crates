{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde-683f899ed1c9b71a/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde-ad84fd081a6bb73a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde_json-a88e225f2440cc72/build-script-build"],"executable":null,"fresh":true}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","linked_libs":[],"linked_paths":[],"cfgs":["fast_arithmetic=\"64\""],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/either/target/debug/build/serde_json-9e27749f8773414e/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde-99dd37db6734e9de.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde-99dd37db6734e9de.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#memchr@2.7.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"memchr","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/memchr-2.7.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libmemchr-34eb650b64c0b1fd.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libmemchr-34eb650b64c0b1fd.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#itoa@1.0.15","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"itoa","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.15/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libitoa-e14358a371fd4efa.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libitoa-e14358a371fd4efa.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ryu@1.0.20","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ryu","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.20/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libryu-9ac960ab829e07f4.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libryu-9ac960ab829e07f4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_json@1.0.140","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_json","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_json-1.0.140/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde_json-8f3eaeb02a218342.rlib","/home/abezbm/rust-utgen-test-crates/either/target/debug/deps/libserde_json-8f3eaeb02a218342.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/lib.rs:1571:48\n     |\n1571 |   let left: Either<String, u32> = Left(\"hello\".to_string());  \n     |                                                ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n1564 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":44244,"byte_start":44244,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":1564,"line_start":1564,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":44381,"byte_start":44372,"column_end":57,"column_start":48,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"method not found in `&str`","line_end":1571,"line_start":1571,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":57,"highlight_start":48,"text":"  let left: Either<String, u32> = Left(\"hello\".to_string());  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/lib.rs:1572:52\n     |\n1572 |   let result = left.left_or_else(|_| \"unreachable\".to_string());  \n     |                                                    ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n1564 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":44244,"byte_start":44244,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":1564,"line_start":1564,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":44448,"byte_start":44439,"column_end":61,"column_start":52,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"method not found in `&str`","line_end":1572,"line_start":1572,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":52,"text":"  let result = left.left_or_else(|_| \"unreachable\".to_string());  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n    --> src/lib.rs:1574:42\n     |\n1574 |   let right: Either<String, u32> = Right(String::from(\"42\"));  \n     |                                    ----- ^^^^^^^^^^^^^^^^^^ expected `u32`, found `String`\n     |                                    |\n     |                                    arguments to this enum variant are incorrect\n     |\nhelp: the type constructed contains `String` due to the type of the argument passed\n    --> src/lib.rs:1574:36\n     |\n1574 |   let right: Either<String, u32> = Right(String::from(\"42\"));  \n     |                                    ^^^^^^------------------^\n     |                                          |\n     |                                          this argument influences the type of `Right`\nnote: tuple variant defined here\n    --> src/lib.rs:53:5\n     |\n53   |     Right(R),\n     |     ^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"the type constructed contains `String` due to the type of the argument passed","rendered":null,"spans":[{"byte_end":44547,"byte_start":44529,"column_end":60,"column_start":42,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"this argument influences the type of `Right`","line_end":1574,"line_start":1574,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":42,"text":"  let right: Either<String, u32> = Right(String::from(\"42\"));  "}]},{"byte_end":44548,"byte_start":44523,"column_end":61,"column_start":36,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":1574,"line_start":1574,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":36,"text":"  let right: Either<String, u32> = Right(String::from(\"42\"));  "}]}]},{"children":[],"code":null,"level":"note","message":"tuple variant defined here","rendered":null,"spans":[{"byte_end":1463,"byte_start":1458,"column_end":10,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":53,"line_start":53,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":10,"highlight_start":5,"text":"    Right(R),"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":44547,"byte_start":44529,"column_end":60,"column_start":42,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"expected `u32`, found `String`","line_end":1574,"line_start":1574,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":60,"highlight_start":42,"text":"  let right: Either<String, u32> = Right(String::from(\"42\"));  "}]},{"byte_end":44528,"byte_start":44523,"column_end":41,"column_start":36,"expansion":null,"file_name":"src/lib.rs","is_primary":false,"label":"arguments to this enum variant are incorrect","line_end":1574,"line_start":1574,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":41,"highlight_start":36,"text":"  let right: Either<String, u32> = Right(String::from(\"42\"));  "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for type `u32` in the current scope\n    --> src/lib.rs:1575:52\n     |\n1575 |   let result_from_right = right.left_or_else(|r| r.to_string());  \n     |                                                    ^^^^^^^^^ method not found in `u32`\n     |\n    ::: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs:2544:8\n     |\n2544 |     fn to_string(&self) -> String;\n     |        --------- the method is available for `u32` here\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n1564 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":44244,"byte_start":44244,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":null,"line_end":1564,"line_start":1564,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for type `u32` in the current scope","spans":[{"byte_end":44612,"byte_start":44603,"column_end":61,"column_start":52,"expansion":null,"file_name":"src/lib.rs","is_primary":true,"label":"method not found in `u32`","line_end":1575,"line_start":1575,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":52,"text":"  let result_from_right = right.left_or_else(|r| r.to_string());  "}]},{"byte_end":82329,"byte_start":82320,"column_end":17,"column_start":8,"expansion":null,"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs","is_primary":false,"label":"the method is available for `u32` here","line_end":2544,"line_start":2544,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":8,"text":"    fn to_string(&self) -> String;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 4 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 4 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0308, E0599.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0308, E0599.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/either#1.15.0","manifest_path":"/home/abezbm/rust-utgen-test-crates/either/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/rust-utgen-test-crates/either/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0308`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0308`.","spans":[]}}
{"reason":"build-finished","success":false}
