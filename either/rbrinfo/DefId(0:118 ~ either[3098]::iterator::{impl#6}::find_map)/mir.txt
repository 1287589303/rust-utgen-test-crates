bb0
  0: StorageLive(_3)
    SourceInfo(src/iterator.rs:261:22-261:37)
  1: _3 = &mut ((*_1).0: Either<L, R>)
    SourceInfo(src/iterator.rs:261:22-261:37)
  2: PlaceMention(_3)
    SourceInfo(src/iterator.rs:261:22-261:37)
  3: _4 = discriminant((*_3))
    SourceInfo(src/iterator.rs:261:22-261:37)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:6:9-6:9)
      kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), _3)
    SourceInfo(src/iterator.rs:261:22-261:37)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:261:22-261:37)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:13-7:24)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_10)
    SourceInfo(src/iterator.rs:8:19-8:24)
  1: _10 = &mut (((*_3) as Right).0: R)
    SourceInfo(src/iterator.rs:8:19-8:24)
  2: StorageLive(_11)
    SourceInfo(src/iterator.rs:8:29-8:45)
  3: StorageLive(_12)
    SourceInfo(src/iterator.rs:8:29-8:45)
  4: StorageLive(_13)
    SourceInfo(src/iterator.rs:8:29-8:34)
  5: _13 = &mut (*_10)
    SourceInfo(src/iterator.rs:8:29-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:45)
      kind: _12 = <&mut R as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}>(move _13, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right) -> [return: bb7, unwind: bb13]
  }
  preds [bb0, bb2]
  succs [bb7, bb13]

bb4
  0: StorageLive(_5)
    SourceInfo(src/iterator.rs:7:18-7:23)
  1: _5 = &mut (((*_3) as Left).0: L)
    SourceInfo(src/iterator.rs:7:18-7:23)
  2: StorageLive(_6)
    SourceInfo(src/iterator.rs:7:28-7:43)
  3: StorageLive(_7)
    SourceInfo(src/iterator.rs:7:28-7:43)
  4: StorageLive(_8)
    SourceInfo(src/iterator.rs:7:28-7:33)
  5: _8 = &mut (*_5)
    SourceInfo(src/iterator.rs:7:28-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:43)
      kind: _7 = <&mut L as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}>(move _8, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left) -> [return: bb5, unwind: bb13]
  }
  preds [bb2]
  succs [bb5, bb13]

bb5
  0: _6 = &mut _7
    SourceInfo(src/iterator.rs:7:28-7:43)
  1: StorageDead(_8)
    SourceInfo(src/iterator.rs:7:42-7:43)
  2: StorageLive(_9)
    SourceInfo(src/iterator.rs:261:51-261:52)
  3: _9 = move _2
    SourceInfo(src/iterator.rs:261:51-261:52)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:33)
      kind: _0 = <core::iter::Map<&mut L, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}> as core::iter::Iterator>::find_map::<B, F>(move _6, move _9) -> [return: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: StorageDead(_9)
    SourceInfo(src/iterator.rs:7:32-7:33)
  1: StorageDead(_6)
    SourceInfo(src/iterator.rs:7:32-7:33)
  2: StorageDead(_7)
    SourceInfo(src/iterator.rs:7:32-7:33)
  3: StorageDead(_5)
    SourceInfo(src/iterator.rs:7:32-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: goto -> bb9
  }
  preds [bb5]
  succs [bb9]

bb7
  0: _11 = &mut _12
    SourceInfo(src/iterator.rs:8:29-8:45)
  1: StorageDead(_13)
    SourceInfo(src/iterator.rs:8:44-8:45)
  2: StorageLive(_14)
    SourceInfo(src/iterator.rs:261:51-261:52)
  3: _14 = move _2
    SourceInfo(src/iterator.rs:261:51-261:52)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:34)
      kind: _0 = <core::iter::Map<&mut R, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}> as core::iter::Iterator>::find_map::<B, F>(move _11, move _14) -> [return: bb8, unwind: bb11]
  }
  preds [bb3]
  succs [bb8, bb11]

bb8
  0: StorageDead(_14)
    SourceInfo(src/iterator.rs:8:33-8:34)
  1: StorageDead(_11)
    SourceInfo(src/iterator.rs:8:33-8:34)
  2: StorageDead(_12)
    SourceInfo(src/iterator.rs:8:33-8:34)
  3: StorageDead(_10)
    SourceInfo(src/iterator.rs:8:33-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: goto -> bb9
  }
  preds [bb7]
  succs [bb9]

bb9
  0: StorageDead(_3)
    SourceInfo(src/iterator.rs:262:5-262:6)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:262:5-262:6)
      kind: drop(_2) -> [return: bb10, unwind: bb14]
  }
  preds [bb6, bb8]
  succs [bb10, bb14]

bb10
  Terminator {
      source_info: SourceInfo(src/iterator.rs:262:6-262:6)
      kind: return
  }
  preds [bb9]
  succs []

bb11
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_14) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb7]
  succs [bb13]

bb12
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_9) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(src/iterator.rs:262:5-262:6)
      kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)]
  }
  preds [bb3, bb4, bb11, bb12]
  succs [bb14]

bb14
  Terminator {
      source_info: SourceInfo(src/iterator.rs:257:5-262:6)
      kind: resume
  }
  preds [bb9, bb13]
  succs []

