bb0
  0: PlaceMention((_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:233:22-233:32)
  1: _3 = discriminant((_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:233:22-233:32)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:6:9-6:9)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:233:22-233:32)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:233:22-233:32)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:13-7:24)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_8)
    SourceInfo(src/iterator.rs:8:19-8:24)
  1: _8 = move (((_1.0: Either<L, R>) as Right).0: R)
    SourceInfo(src/iterator.rs:8:19-8:24)
  2: StorageLive(_9)
    SourceInfo(src/iterator.rs:8:29-8:45)
  3: StorageLive(_10)
    SourceInfo(src/iterator.rs:8:29-8:34)
  4: _10 = move _8
    SourceInfo(src/iterator.rs:8:29-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:45)
      kind: _9 = <R as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}>(move _10, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right) -> [return: bb8, unwind: bb16]
  }
  preds [bb0, bb2]
  succs [bb8, bb16]

bb4
  0: StorageLive(_4)
    SourceInfo(src/iterator.rs:7:18-7:23)
  1: _4 = move (((_1.0: Either<L, R>) as Left).0: L)
    SourceInfo(src/iterator.rs:7:18-7:23)
  2: StorageLive(_5)
    SourceInfo(src/iterator.rs:7:28-7:43)
  3: StorageLive(_6)
    SourceInfo(src/iterator.rs:7:28-7:33)
  4: _6 = move _4
    SourceInfo(src/iterator.rs:7:28-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:43)
      kind: _5 = <L as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}>(move _6, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left) -> [return: bb5, unwind: bb20]
  }
  preds [bb2]
  succs [bb5, bb20]

bb5
  0: StorageDead(_6)
    SourceInfo(src/iterator.rs:7:42-7:43)
  1: StorageLive(_7)
    SourceInfo(src/iterator.rs:233:47-233:48)
  2: _7 = move _2
    SourceInfo(src/iterator.rs:233:47-233:48)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:33)
      kind: _0 = <core::iter::Map<L, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}> as core::iter::Iterator>::partition::<B, F>(move _5, move _7) -> [return: bb6, unwind: bb18]
  }
  preds [bb4]
  succs [bb6, bb18]

bb6
  0: StorageDead(_7)
    SourceInfo(src/iterator.rs:7:32-7:33)
  1: StorageDead(_5)
    SourceInfo(src/iterator.rs:7:32-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_4) -> [return: bb7, unwind: bb22]
  }
  preds [bb5]
  succs [bb7, bb22]

bb7
  0: StorageDead(_4)
    SourceInfo(src/iterator.rs:7:32-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: goto -> bb11
  }
  preds [bb6]
  succs [bb11]

bb8
  0: StorageDead(_10)
    SourceInfo(src/iterator.rs:8:44-8:45)
  1: StorageLive(_11)
    SourceInfo(src/iterator.rs:233:47-233:48)
  2: _11 = move _2
    SourceInfo(src/iterator.rs:233:47-233:48)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:34)
      kind: _0 = <core::iter::Map<R, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}> as core::iter::Iterator>::partition::<B, F>(move _9, move _11) -> [return: bb9, unwind: bb14]
  }
  preds [bb3]
  succs [bb9, bb14]

bb9
  0: StorageDead(_11)
    SourceInfo(src/iterator.rs:8:33-8:34)
  1: StorageDead(_9)
    SourceInfo(src/iterator.rs:8:33-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_8) -> [return: bb10, unwind: bb22]
  }
  preds [bb8]
  succs [bb10, bb22]

bb10
  0: StorageDead(_8)
    SourceInfo(src/iterator.rs:8:33-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(src/iterator.rs:234:5-234:6)
      kind: drop(_2) -> [return: bb12, unwind: bb23]
  }
  preds [bb7, bb10]
  succs [bb12, bb23]

bb12
  Terminator {
      source_info: SourceInfo(src/iterator.rs:234:5-234:6)
      kind: drop(_1) -> [return: bb13, unwind: bb24]
  }
  preds [bb11]
  succs [bb13, bb24]

bb13
  Terminator {
      source_info: SourceInfo(src/iterator.rs:234:6-234:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_11) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_9) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb14]
  succs [bb17]

bb16
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:44-8:45)
      kind: drop(_10) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb15, bb16]
  succs [bb22]

bb18
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_7) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_5) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb18]
  succs [bb21]

bb20
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:42-7:43)
      kind: drop(_6) -> [return: bb21, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb21]

bb21
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_4) -> [return: bb22, unwind terminate(cleanup)]
  }
  preds [bb19, bb20]
  succs [bb22]

bb22
  Terminator {
      source_info: SourceInfo(src/iterator.rs:234:5-234:6)
      kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)]
  }
  preds [bb6, bb9, bb17, bb21]
  succs [bb23]

bb23
  Terminator {
      source_info: SourceInfo(src/iterator.rs:234:5-234:6)
      kind: drop(_1) -> [return: bb24, unwind terminate(cleanup)]
  }
  preds [bb11, bb22]
  succs [bb24]

bb24
  Terminator {
      source_info: SourceInfo(src/iterator.rs:228:5-234:6)
      kind: resume
  }
  preds [bb12, bb23]
  succs []

