{
  "name": "either::{impl#1}::factor_into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:599:5:605:6",
  "doc": "/// Converts an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n///\n/// Unlike [`into_iter`][Either::into_iter], this does not require the\n/// `Left` and `Right` iterators to have the same item type.\n///\n/// ```\n/// use either::*;\n/// let left: Either<_, Vec<u8>> = Left(&[\"hello\"]);\n/// assert_eq!(left.factor_into_iter().next(), Some(Left(&\"hello\")));\n///\n/// let right: Either<&[&str], _> = Right(vec![0, 1]);\n/// assert_eq!(right.factor_into_iter().collect::<Vec<_>>(), vec![Right(0), Right(1)]);\n///\n/// ```\n",
  "code": [
    "pub fn factor_into_iter(self) -> IterEither<L::IntoIter, R::IntoIter>",
    "where",
    "    L: IntoIterator,",
    "    R: IntoIterator,",
    "{",
    "    IterEither::new(map_either!(self, inner => inner.into_iter()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        },
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 604,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}