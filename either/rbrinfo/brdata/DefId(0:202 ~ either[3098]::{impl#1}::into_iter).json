{
  "name": "either::{impl#1}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:521:5:527:6",
  "doc": "/// Convert the inner value to an iterator.\n///\n/// This requires the `Left` and `Right` iterators to have the same item type.\n/// See [`factor_into_iter`][Either::factor_into_iter] to iterate different types.\n///\n/// ```\n/// use either::*;\n///\n/// let left: Either<_, Vec<u32>> = Left(vec![1, 2, 3, 4, 5]);\n/// let mut right: Either<Vec<u32>, _> = Right(vec![]);\n/// right.extend(left.into_iter());\n/// assert_eq!(right, Right(vec![1, 2, 3, 4, 5]));\n/// ```\n",
  "code": [
    "pub fn into_iter(self) -> Either<L::IntoIter, R::IntoIter>",
    "where",
    "    L: IntoIterator,",
    "    R: IntoIterator<Item = L::Item>,",
    "{",
    "    map_either!(self, inner => inner.into_iter())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Right($result)",
      "path": [
        0,
        3,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        },
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 526,
          "bound": null
        }
      ],
      "ret": "Left($result)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}