{
  "name": "either::{impl#7}::map",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1066:5:1074:6",
  "doc": "/// Map `f` over the contained value and return the result in the\n/// corresponding variant.\n///\n/// ```\n/// use either::*;\n///\n/// let value: Either<_, i32> = Right(42);\n///\n/// let other = value.map(|x| x * 2);\n/// assert_eq!(other, Right(84));\n/// ```\n",
  "code": [
    "pub fn map<F, M>(self, f: F) -> Either<M, M>",
    "where",
    "    F: FnOnce(T) -> M,",
    "{",
    "    match self {",
    "        Left(l) => Left(f(l)),",
    "        Right(r) => Right(f(r)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right(r)",
          "norm": null,
          "value": "true",
          "line": 1070,
          "bound": null
        }
      ],
      "ret": "Right(f(r))",
      "path": [
        0,
        3,
        9,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 1070,
          "bound": null
        },
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 1070,
          "bound": null
        }
      ],
      "ret": "Left(f(l))",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}