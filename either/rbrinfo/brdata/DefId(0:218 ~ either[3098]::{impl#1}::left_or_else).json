{
  "name": "either::{impl#1}::left_or_else",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:714:5:722:6",
  "doc": "/// Returns left value or computes it from a closure\n///\n/// # Examples\n///\n/// ```\n/// # use either::*;\n/// let left: Either<String, u32> = Left(\"3\".to_string());\n/// assert_eq!(left.left_or_else(|_| unreachable!()), \"3\");\n///\n/// let right: Either<String, u32> = Right(3);\n/// assert_eq!(right.left_or_else(|x| x.to_string()), \"3\");\n/// ```\n",
  "code": [
    "pub fn left_or_else<F>(self, f: F) -> L",
    "where",
    "    F: FnOnce(R) -> L,",
    "{",
    "    match self {",
    "        Either::Left(l) => l,",
    "        Either::Right(r) => f(r),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Either::Right(r)",
          "norm": null,
          "value": "true",
          "line": 718,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Either::Left(l)",
          "norm": null,
          "value": "true",
          "line": 718,
          "bound": null
        },
        {
          "cond": "self matches Either::Left(l)",
          "norm": null,
          "value": "true",
          "line": 718,
          "bound": null
        }
      ],
      "ret": "l",
      "path": [
        0,
        2,
        4,
        5,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}