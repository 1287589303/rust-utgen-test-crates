{
  "name": "either::{impl#1}::iter_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:573:5:581:6",
  "doc": "/// Mutably borrow the inner value as an iterator.\n///\n/// This requires the `Left` and `Right` iterators to have the same item type.\n/// See [`factor_iter_mut`][Either::factor_iter_mut] to iterate different types.\n///\n/// ```\n/// use either::*;\n///\n/// let mut left: Either<_, &mut [u32]> = Left(vec![2, 3]);\n/// for l in left.iter_mut() {\n///     *l *= *l\n/// }\n/// assert_eq!(left, Left(vec![4, 9]));\n///\n/// let mut inner = [4, 5];\n/// let mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);\n/// for r in right.iter_mut() {\n///     *r *= *r\n/// }\n/// assert_eq!(inner, [16, 25]);\n/// ```\n",
  "code": [
    "pub fn iter_mut(",
    "    &mut self,",
    ") -> Either<<&mut L as IntoIterator>::IntoIter, <&mut R as IntoIterator>::IntoIter>",
    "where",
    "    for<'a> &'a mut L: IntoIterator,",
    "    for<'a> &'a mut R: IntoIterator<Item = <&'a mut L as IntoIterator>::Item>,",
    "{",
    "    map_either!(self, inner => inner.into_iter())",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 580,
          "bound": null
        }
      ],
      "ret": "Right($result)",
      "path": [
        0,
        3,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 580,
          "bound": null
        },
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 580,
          "bound": null
        }
      ],
      "ret": "Left($result)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}