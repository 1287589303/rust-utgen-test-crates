{
  "name": "either::{impl#1}::as_pin_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:278:5:285:6",
  "doc": "/// Convert `Pin<&mut Either<L, R>>` to `Either<Pin<&mut L>, Pin<&mut R>>`,\n/// pinned projections of the inner variants.\n",
  "code": [
    "pub fn as_pin_mut(self: Pin<&mut Self>) -> Either<Pin<&mut L>, Pin<&mut R>> {",
    "    // SAFETY: `get_unchecked_mut` is fine because we don't move anything.",
    "    // We can use `new_unchecked` because the `inner` parts are guaranteed",
    "    // to be pinned, as they come from `self` which is pinned, and we never",
    "    // offer an unpinned `&mut L` or `&mut R` through `Pin<&mut Self>`. We",
    "    // also don't have an implementation of `Drop`, nor manual `Unpin`.",
    "    unsafe { map_either!(Pin::get_unchecked_mut(self), inner => Pin::new_unchecked(inner)) }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Pin::get_unchecked_mut(self) matches Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Right($result)",
      "path": [
        0,
        1,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Pin::get_unchecked_mut(self) matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Left($result)",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}