{
  "name": "either::{impl#1}::factor_iter_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:647:5:655:6",
  "doc": "/// Mutably borrows an `Either` of `Iterator`s to be an `Iterator` of `Either`s\n///\n/// Unlike [`iter_mut`][Either::iter_mut], this does not require the\n/// `Left` and `Right` iterators to have the same item type.\n///\n/// ```\n/// use either::*;\n/// let mut left: Either<_, Vec<u8>> = Left([\"hello\"]);\n/// left.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");\n/// assert_eq!(left, Left([\"goodbye\"]));\n///\n/// let mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);\n/// right.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });\n/// assert_eq!(right, Right(vec![0, -1, -2]));\n///\n/// ```\n",
  "code": [
    "pub fn factor_iter_mut(",
    "    &mut self,",
    ") -> IterEither<<&mut L as IntoIterator>::IntoIter, <&mut R as IntoIterator>::IntoIter>",
    "where",
    "    for<'a> &'a mut L: IntoIterator,",
    "    for<'a> &'a mut R: IntoIterator,",
    "{",
    "    IterEither::new(map_either!(self, inner => inner.into_iter()))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 654,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}