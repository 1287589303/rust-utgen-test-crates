{
  "name": "either::{impl#1}::expect_right",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:899:5:907:6",
  "doc": "/// Returns the right value\n///\n/// # Examples\n///\n/// ```\n/// # use either::*;\n/// let right: Either<(), _> = Right(3);\n/// assert_eq!(right.expect_right(\"value was Left\"), 3);\n/// ```\n///\n/// # Panics\n///\n/// When `Either` is a `Left` value\n///\n/// ```should_panic\n/// # use either::*;\n/// let left: Either<_, ()> = Left(3);\n/// left.expect_right(\"value was Right\");\n/// ```\n",
  "code": [
    "pub fn expect_right(self, msg: &str) -> R",
    "where",
    "    L: core::fmt::Debug,",
    "{",
    "    match self {",
    "        Either::Right(r) => r,",
    "        Either::Left(l) => panic!(\"{}: {:?}\", msg, l),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Either::Right(r)",
          "norm": null,
          "value": "true",
          "line": 903,
          "bound": null
        },
        {
          "cond": "self matches Either::Right(r)",
          "norm": null,
          "value": "true",
          "line": 903,
          "bound": null
        }
      ],
      "ret": "r",
      "path": [
        0,
        2,
        4,
        5,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Either::Left(l)",
          "norm": null,
          "value": "true",
          "line": 903,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7,
        8,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}