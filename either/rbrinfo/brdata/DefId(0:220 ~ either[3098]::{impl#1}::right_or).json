{
  "name": "either::{impl#1}::right_or",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:740:5:745:6",
  "doc": "/// Return right value or given value\n///\n/// Arguments passed to `right_or` are eagerly evaluated; if you are passing\n/// the result of a function call, it is recommended to use\n/// [`right_or_else`][Self::right_or_else], which is lazily evaluated.\n///\n/// # Examples\n///\n/// ```\n/// # use either::*;\n/// let right: Either<&str, &str> = Right(\"right\");\n/// assert_eq!(right.right_or(\"foo\"), \"right\");\n///\n/// let left: Either<&str, &str> = Left(\"left\");\n/// assert_eq!(left.right_or(\"right\"), \"right\");\n/// ```\n",
  "code": [
    "pub fn right_or(self, other: R) -> R {",
    "    match self {",
    "        Either::Left(_) => other,",
    "        Either::Right(r) => r,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Either::Right(r)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        }
      ],
      "ret": "r",
      "path": [
        0,
        3,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Either::Left(_)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        },
        {
          "cond": "self matches Either::Left(_)",
          "norm": null,
          "value": "true",
          "line": 741,
          "bound": null
        }
      ],
      "ret": "other",
      "path": [
        0,
        2,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}