{
  "name": "either::{impl#7}::into_inner",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1051:5:1053:6",
  "doc": "/// Extract the value of an either over two equivalent types.\n///\n/// ```\n/// use either::*;\n///\n/// let left: Either<_, u32> = Left(123);\n/// assert_eq!(left.into_inner(), 123);\n///\n/// let right: Either<u32, _> = Right(123);\n/// assert_eq!(right.into_inner(), 123);\n/// ```\n",
  "code": [
    "pub fn into_inner(self) -> T {",
    "    for_both!(self, inner => inner)",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches $crate::Either::Right($pattern)",
          "norm": null,
          "value": "true",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": "inner",
      "path": [
        0,
        3,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches $crate::Either::Left($pattern)",
          "norm": null,
          "value": "true",
          "line": 1052,
          "bound": null
        }
      ],
      "ret": "inner",
      "path": [
        0,
        2,
        4,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}