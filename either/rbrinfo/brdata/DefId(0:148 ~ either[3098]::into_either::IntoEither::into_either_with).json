{
  "name": "either::into_either::IntoEither::into_either_with",
  "mod_info": {
    "name": "into_either",
    "loc": "src/lib.rs:145:1:145:17"
  },
  "visible": true,
  "loc": "src/into_either.rs:55:5:61:6",
  "doc": "/// Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\n/// if `into_left(&self)` returns `true`.\n/// Converts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\n/// otherwise.\n///\n/// # Examples\n///\n/// ```\n/// use either::{IntoEither, Left, Right};\n///\n/// fn is_even(x: &u8) -> bool {\n///     x % 2 == 0\n/// }\n///\n/// let x = 0;\n/// assert_eq!(x.into_either_with(is_even), Left(x));\n/// assert_eq!(x.into_either_with(|x| !is_even(x)), Right(x));\n/// ```\n",
  "code": [
    "fn into_either_with<F>(self, into_left: F) -> Either<Self, Self>",
    "where",
    "    F: FnOnce(&Self) -> bool,",
    "{",
    "    let into_left = into_left(&self);",
    "    self.into_either(into_left)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}