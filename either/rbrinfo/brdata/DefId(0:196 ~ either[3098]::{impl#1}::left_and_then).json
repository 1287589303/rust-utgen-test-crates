{
  "name": "either::{impl#1}::left_and_then",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:476:5:484:6",
  "doc": "/// Apply the function `f` on the value in the `Left` variant if it is present.\n///\n/// ```\n/// use either::*;\n///\n/// let left: Either<_, u32> = Left(123);\n/// assert_eq!(left.left_and_then::<_,()>(|x| Right(x * 2)), Right(246));\n///\n/// let right: Either<u32, _> = Right(123);\n/// assert_eq!(right.left_and_then(|x| Right::<(), _>(x * 2)), Right(123));\n/// ```\n",
  "code": [
    "pub fn left_and_then<F, S>(self, f: F) -> Either<S, R>",
    "where",
    "    F: FnOnce(L) -> Either<S, R>,",
    "{",
    "    match self {",
    "        Left(l) => f(l),",
    "        Right(r) => Right(r),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right(r)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": "Right(r)",
      "path": [
        0,
        3,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        },
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 480,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}