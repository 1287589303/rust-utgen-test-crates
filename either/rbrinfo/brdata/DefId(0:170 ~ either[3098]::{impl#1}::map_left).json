{
  "name": "either::{impl#1}::map_left",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:317:5:325:6",
  "doc": "/// Apply the function `f` on the value in the `Left` variant if it is present rewrapping the\n/// result in `Left`.\n///\n/// ```\n/// use either::*;\n///\n/// let left: Either<_, u32> = Left(123);\n/// assert_eq!(left.map_left(|x| x * 2), Left(246));\n///\n/// let right: Either<u32, _> = Right(123);\n/// assert_eq!(right.map_left(|x| x * 2), Right(123));\n/// ```\n",
  "code": [
    "pub fn map_left<F, M>(self, f: F) -> Either<M, R>",
    "where",
    "    F: FnOnce(L) -> M,",
    "{",
    "    match self {",
    "        Left(l) => Left(f(l)),",
    "        Right(r) => Right(r),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right(r)",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        }
      ],
      "ret": "Right(r)",
      "path": [
        0,
        3,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        },
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 321,
          "bound": null
        }
      ],
      "ret": "Left(f(l))",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}