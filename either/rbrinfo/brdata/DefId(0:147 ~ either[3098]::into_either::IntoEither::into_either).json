{
  "name": "either::into_either::IntoEither::into_either",
  "mod_info": {
    "name": "into_either",
    "loc": "src/lib.rs:145:1:145:17"
  },
  "visible": true,
  "loc": "src/into_either.rs:29:5:35:6",
  "doc": "/// Converts `self` into a [`Left`] variant of [`Either<Self, Self>`](Either)\n/// if `into_left` is `true`.\n/// Converts `self` into a [`Right`] variant of [`Either<Self, Self>`](Either)\n/// otherwise.\n///\n/// # Examples\n///\n/// ```\n/// use either::{IntoEither, Left, Right};\n///\n/// let x = 0;\n/// assert_eq!(x.into_either(true), Left(x));\n/// assert_eq!(x.into_either(false), Right(x));\n/// ```\n",
  "code": [
    "fn into_either(self, into_left: bool) -> Either<Self, Self> {",
    "    if into_left {",
    "        Left(self)",
    "    } else {",
    "        Right(self)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "into_left",
          "norm": null,
          "value": "true",
          "line": 30,
          "bound": null
        }
      ],
      "ret": "Left(self)",
      "path": [
        0,
        1,
        2,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "into_left",
          "norm": null,
          "value": "false",
          "line": 30,
          "bound": null
        }
      ],
      "ret": "Right(self)",
      "path": [
        0,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}