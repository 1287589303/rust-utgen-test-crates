{
  "name": "either::{impl#6}::factor_second",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1031:5:1036:6",
  "doc": "/// Factor out a homogeneous type from an either of pairs.\n///\n/// Here, the homogeneous type is the second element of the pairs.\n///\n/// ```\n/// use either::*;\n/// let left: Either<_, (String, u32)> = Left((vec![0], 123));\n/// assert_eq!(left.factor_second().1, 123);\n///\n/// let right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\n/// assert_eq!(right.factor_second().1, 123);\n/// ```\n",
  "code": [
    "pub fn factor_second(self) -> (Either<L, R>, T) {",
    "    match self {",
    "        Left((l, t)) => (Left(l), t),",
    "        Right((r, t)) => (Right(r), t),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right((r, t))",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        }
      ],
      "ret": "(Right(r), t)",
      "path": [
        0,
        3,
        10,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left((l, t))",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        },
        {
          "cond": "self matches Left((l, t))",
          "norm": null,
          "value": "true",
          "line": 1032,
          "bound": null
        }
      ],
      "ret": "(Left(l), t)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}