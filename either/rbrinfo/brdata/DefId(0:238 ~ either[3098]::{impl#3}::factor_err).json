{
  "name": "either::{impl#3}::factor_err",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:966:5:971:6",
  "doc": "/// Factors out a homogenous type from an `Either` of [`Result`].\n///\n/// Here, the homogeneous type is the `Err` type of the [`Result`].\n///\n/// ```\n/// use either::*;\n/// let left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\n/// assert_eq!(left.factor_err(), Ok(Left(vec![0])));\n///\n/// let right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\n/// assert_eq!(right.factor_err(), Ok(Right(String::new())));\n/// ```\n",
  "code": [
    "pub fn factor_err(self) -> Result<Either<L, R>, E> {",
    "    match self {",
    "        Left(l) => l.map(Either::Left),",
    "        Right(r) => r.map(Either::Right),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Right(r)",
          "norm": null,
          "value": "true",
          "line": 967,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 967,
          "bound": null
        },
        {
          "cond": "self matches Left(l)",
          "norm": null,
          "value": "true",
          "line": 967,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}