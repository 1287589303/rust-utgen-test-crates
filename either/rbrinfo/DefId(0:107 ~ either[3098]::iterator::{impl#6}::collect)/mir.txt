bb0
  0: PlaceMention((_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:225:22-225:32)
  1: _2 = discriminant((_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:225:22-225:32)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:6:9-6:9)
      kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (_1.0: Either<L, R>))
    SourceInfo(src/iterator.rs:225:22-225:32)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:225:22-225:32)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:13-7:24)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_6)
    SourceInfo(src/iterator.rs:8:19-8:24)
  1: _6 = move (((_1.0: Either<L, R>) as Right).0: R)
    SourceInfo(src/iterator.rs:8:19-8:24)
  2: StorageLive(_7)
    SourceInfo(src/iterator.rs:8:29-8:45)
  3: StorageLive(_8)
    SourceInfo(src/iterator.rs:8:29-8:34)
  4: _8 = move _6
    SourceInfo(src/iterator.rs:8:29-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:45)
      kind: _7 = <R as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}>(move _8, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right) -> [return: bb8, unwind: bb14]
  }
  preds [bb0, bb2]
  succs [bb8, bb14]

bb4
  0: StorageLive(_3)
    SourceInfo(src/iterator.rs:7:18-7:23)
  1: _3 = move (((_1.0: Either<L, R>) as Left).0: L)
    SourceInfo(src/iterator.rs:7:18-7:23)
  2: StorageLive(_4)
    SourceInfo(src/iterator.rs:7:28-7:43)
  3: StorageLive(_5)
    SourceInfo(src/iterator.rs:7:28-7:33)
  4: _5 = move _3
    SourceInfo(src/iterator.rs:7:28-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:43)
      kind: _4 = <L as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}>(move _5, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left) -> [return: bb5, unwind: bb17]
  }
  preds [bb2]
  succs [bb5, bb17]

bb5
  0: StorageDead(_5)
    SourceInfo(src/iterator.rs:7:42-7:43)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:28-7:33)
      kind: _0 = <core::iter::Map<L, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}> as core::iter::Iterator>::collect::<B>(move _4) -> [return: bb6, unwind: bb16]
  }
  preds [bb4]
  succs [bb6, bb16]

bb6
  0: StorageDead(_4)
    SourceInfo(src/iterator.rs:7:32-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_3) -> [return: bb7, unwind: bb19]
  }
  preds [bb5]
  succs [bb7, bb19]

bb7
  0: StorageDead(_3)
    SourceInfo(src/iterator.rs:7:32-7:33)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: goto -> bb11
  }
  preds [bb6]
  succs [bb11]

bb8
  0: StorageDead(_8)
    SourceInfo(src/iterator.rs:8:44-8:45)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:29-8:34)
      kind: _0 = <core::iter::Map<R, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}> as core::iter::Iterator>::collect::<B>(move _7) -> [return: bb9, unwind: bb13]
  }
  preds [bb3]
  succs [bb9, bb13]

bb9
  0: StorageDead(_7)
    SourceInfo(src/iterator.rs:8:33-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_6) -> [return: bb10, unwind: bb19]
  }
  preds [bb8]
  succs [bb10, bb19]

bb10
  0: StorageDead(_6)
    SourceInfo(src/iterator.rs:8:33-8:34)
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(src/iterator.rs:226:5-226:6)
      kind: drop(_1) -> [return: bb12, unwind: bb20]
  }
  preds [bb7, bb10]
  succs [bb12, bb20]

bb12
  Terminator {
      source_info: SourceInfo(src/iterator.rs:226:6-226:6)
      kind: return
  }
  preds [bb11]
  succs []

bb13
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_7) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb8]
  succs [bb15]

bb14
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:44-8:45)
      kind: drop(_8) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb3]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/iterator.rs:8:33-8:34)
      kind: drop(_6) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb13, bb14]
  succs [bb19]

bb16
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_4) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb5]
  succs [bb18]

bb17
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:42-7:43)
      kind: drop(_5) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb4]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/iterator.rs:7:32-7:33)
      kind: drop(_3) -> [return: bb19, unwind terminate(cleanup)]
  }
  preds [bb16, bb17]
  succs [bb19]

bb19
  Terminator {
      source_info: SourceInfo(src/iterator.rs:226:5-226:6)
      kind: drop(_1) -> [return: bb20, unwind terminate(cleanup)]
  }
  preds [bb6, bb9, bb15, bb18]
  succs [bb20]

bb20
  Terminator {
      source_info: SourceInfo(src/iterator.rs:221:5-226:6)
      kind: resume
  }
  preds [bb11, bb19]
  succs []

