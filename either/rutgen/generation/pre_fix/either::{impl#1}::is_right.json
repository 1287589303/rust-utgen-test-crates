{
  "name": "either::{impl#1}::is_right",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:191:5:193:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: !self.is_left()\n"
      ],
      "input_infer": "Either::Left(any type), Either::Right(any type)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left_value: Either<i32, &str> = Left(1);",
                "    let result = left_value.is_right();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    ",
                "    let right_value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = right_value.is_right();",
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let left_value: Either<i32, &str> = Left(1);",
                "    let result = left_value.is_right();",
                "    assert_eq!(result, false);",
                "    ",
                "    let right_value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = right_value.is_right();",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = right_value.is_right();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let left_value: Either<i32, &str> = Left(1);",
                "    let result_left = left_value.is_right();",
                "    assert_eq!(result_left, false);"
              ],
              "code": [
                "{",
                "    let right_value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = right_value.is_right();",
                "    assert_eq!(result, true);",
                "    let left_value: Either<i32, &str> = Left(1);",
                "    let result_left = left_value.is_right();",
                "    assert_eq!(result_left, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let another_left_value: Either<f64, &str> = Left(3.14);",
                "    let result = another_left_value.is_right();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(another_left_value.is_right(), false);"
              ],
              "code": [
                "{",
                "    let another_left_value: Either<f64, &str> = Left(3.14);",
                "    let result = another_left_value.is_right();",
                "    assert_eq!(another_left_value.is_right(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let another_right_value: Either<i32, &str> = Right(\"another right value\");",
                "    let result = another_right_value.is_right();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let another_left_value: Either<i32, &str> = Left(10);",
                "    let result_left = another_left_value.is_right();",
                "    assert_eq!(result_left, false);",
                "    let empty_right_value: Either<i32, &str> = Right(\"\");",
                "    let result_empty_right = empty_right_value.is_right();",
                "    assert_eq!(result_empty_right, true);",
                "    let value_with_none: Either<Option<i32>, &str> = Right(\"exists\");",
                "    let result_with_none = value_with_none.is_right();",
                "    assert_eq!(result_with_none, true);",
                "    let value_with_some: Either<Option<i32>, &str> = Left(Some(5));",
                "    let result_with_some = value_with_some.is_right();",
                "    assert_eq!(result_with_some, false);"
              ],
              "code": [
                "{",
                "    let another_right_value: Either<i32, &str> = Right(\"another right value\");",
                "    let result = another_right_value.is_right();",
                "    assert_eq!(result, true);",
                "    let another_left_value: Either<i32, &str> = Left(10);",
                "    let result_left = another_left_value.is_right();",
                "    assert_eq!(result_left, false);",
                "    let empty_right_value: Either<i32, &str> = Right(\"\");",
                "    let result_empty_right = empty_right_value.is_right();",
                "    assert_eq!(result_empty_right, true);",
                "    let value_with_none: Either<Option<i32>, &str> = Right(\"exists\");",
                "    let result_with_none = value_with_none.is_right();",
                "    assert_eq!(result_with_none, true);",
                "    let value_with_some: Either<Option<i32>, &str> = Left(Some(5));",
                "    let result_with_some = value_with_some.is_right();",
                "    assert_eq!(result_with_some, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}