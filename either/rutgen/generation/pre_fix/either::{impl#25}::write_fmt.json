{
  "name": "either::{impl#25}::write_fmt",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1395:5:1397:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Right($pattern) at line 1396 is true\n"
      ],
      "input_infer": "self: Either<_, String> where String is a valid type implementing fmt::Write, args: fmt::Arguments<'_> with valid formatting strings and parameters\n",
      "answers": [
        {
          "uses": [
            "use std::fmt::Write;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either, Either::Right(MockWriter(\"Hello, world!\".to_string())));"
              ],
              "code": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either, Either::Right(MockWriter(\"Hello, world!\".to_string())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Test string\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test string\");",
                "    ",
                "    let args = format_args!(\"Another test: {}\", 42);",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test stringAnother test: 42\");",
                "    ",
                "    let args = format_args!(\"Character test: {}\", 'A');",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test stringAnother test: 42Character test: A\");"
              ],
              "code": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Test string\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test string\");",
                "    ",
                "    let args = format_args!(\"Another test: {}\", 42);",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test stringAnother test: 42\");",
                "    ",
                "    let args = format_args!(\"Character test: {}\", 'A');",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.get_inner_string(), \"Test stringAnother test: 42Character test: A\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Special characters: !@#$%^&*()\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Special characters: !@#$%^&*()\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Empty arguments\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert!(writer.0.is_empty());",
                "    ",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"String with newline: \\n\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert!(writer.0.contains('\\n'));"
              ],
              "code": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Special characters: !@#$%^&*()\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Special characters: !@#$%^&*()\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    ",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Empty arguments\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert!(writer.0.is_empty());",
                "    ",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"String with newline: \\n\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert!(writer.0.contains('\\n'));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Multiple arguments: {}, {}\", 42, \"test\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "}"
              ],
              "oracle": [
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Multiple arguments: {}, {}\", 42, \"test\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.as_ref().0, \"Multiple arguments: 42, test\");"
              ],
              "code": [
                "{",
                "    use std::fmt::Write;",
                "",
                "    struct MockWriter(String);",
                "",
                "    impl Write for MockWriter {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.0.push_str(s);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.0.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Multiple arguments: {}, {}\", 42, \"test\");",
                "    ",
                "    let _ = either.write_fmt(args);",
                "    let mut writer = MockWriter(String::new());",
                "    let mut either = Either::Right(writer);",
                "    let args = format_args!(\"Multiple arguments: {}, {}\", 42, \"test\");",
                "    let result = either.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(either.as_ref().0, \"Multiple arguments: 42, test\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Left($pattern) at line 1396 is true\n",
        "precondition: self matches $crate::Either::Left($pattern) at line 1396 is true\n"
      ],
      "input_infer": "self is either $crate::Either::Left(L) or $crate::Either::Right(R) with L and R implementing fmt::Write; test args as a valid fmt::Arguments<'_> with variations of strings and characters, including empty and large inputs.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "}"
              ],
              "oracle": [
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    assert_eq!(write_fmt(&mut left_value, args).is_ok(), true);",
                "    assert_eq!(left_value.content, \"Hello, world!\");"
              ],
              "code": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"world\");",
                "    assert_eq!(write_fmt(&mut left_value, args).is_ok(), true);",
                "    assert_eq!(left_value.content, \"Hello, world!\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "    ",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut right_value = Right(WriteString { content: String::new() });",
                "    let args = format_args!(\"Goodbye, {}!\", \"world\");",
                "    let _ = write_fmt(&mut right_value, args);",
                "}"
              ],
              "oracle": [
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"test\");",
                "    let result = left_value.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(left_value.content, \"Hello, test!\");",
                "    ",
                "    let mut another_left_value = Left(WriteString { content: String::new() });",
                "    let args_with_special_char = format_args!(\"Goodbye, {}!\", \"world\");",
                "    let result_special = another_left_value.write_fmt(args_with_special_char);",
                "    assert!(result_special.is_ok());",
                "    assert_eq!(another_left_value.content, \"Goodbye, world!\");"
              ],
              "code": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "    ",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut right_value = Right(WriteString { content: String::new() });",
                "    let args = format_args!(\"Goodbye, {}!\", \"world\");",
                "    let _ = write_fmt(&mut right_value, args);",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"Hello, {}!\", \"test\");",
                "    let result = left_value.write_fmt(args);",
                "    assert!(result.is_ok());",
                "    assert_eq!(left_value.content, \"Hello, test!\");",
                "    ",
                "    let mut another_left_value = Left(WriteString { content: String::new() });",
                "    let args_with_special_char = format_args!(\"Goodbye, {}!\", \"world\");",
                "    let result_special = another_left_value.write_fmt(args_with_special_char);",
                "    assert!(result_special.is_ok());",
                "    assert_eq!(another_left_value.content, \"Goodbye, world!\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"{}\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left_value.content, \"\");",
                "    let args = format_args!(\"Hello, World!\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "    assert_eq!(left_value.content, \"Hello, World!\");",
                "    let args_with_format = format_args!(\"{} and {}\", 42, \"apples\");",
                "    let _ = write_fmt(&mut left_value, args_with_format);",
                "    assert_eq!(left_value.content, \"Hello, World!42 and apples\");"
              ],
              "code": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut left_value = Left(WriteString { content: String::new() });",
                "    let args = format_args!(\"{}\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "    assert_eq!(left_value.content, \"\");",
                "    let args = format_args!(\"Hello, World!\");",
                "    let _ = write_fmt(&mut left_value, args);",
                "    assert_eq!(left_value.content, \"Hello, World!\");",
                "    let args_with_format = format_args!(\"{} and {}\", 42, \"apples\");",
                "    let _ = write_fmt(&mut left_value, args_with_format);",
                "    assert_eq!(left_value.content, \"Hello, World!42 and apples\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut right_value = Right(WriteString { content: String::new() });",
                "    let large_str = \"x\".repeat(10_000);",
                "    let args = format_args!(\"{}\", large_str);",
                "    let _ = write_fmt(&mut right_value, args);",
                "}"
              ],
              "oracle": [
                "    write_fmt(&mut Right(WriteString { content: String::new() }), format_args!(\"{}\", \"test\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"test\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"x\".repeat(10_000))) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"0\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{:?}\", \"value\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{:05}\", 42)) == Ok(())"
              ],
              "code": [
                "{",
                "    struct WriteString {",
                "        content: String,",
                "    }",
                "",
                "    impl fmt::Write for WriteString {",
                "        fn write_str(&mut self, s: &str) -> fmt::Result {",
                "            self.content.push_str(s);",
                "            Ok(())",
                "        }",
                "        ",
                "        fn write_char(&mut self, c: char) -> fmt::Result {",
                "            self.content.push(c);",
                "            Ok(())",
                "        }",
                "",
                "        fn write_fmt(&mut self, args: fmt::Arguments<'_>) -> fmt::Result {",
                "            write!(self, \"{}\", args)",
                "        }",
                "    }",
                "",
                "    let mut right_value = Right(WriteString { content: String::new() });",
                "    let large_str = \"x\".repeat(10_000);",
                "    let args = format_args!(\"{}\", large_str);",
                "    let _ = write_fmt(&mut right_value, args);",
                "    write_fmt(&mut Right(WriteString { content: String::new() }), format_args!(\"{}\", \"test\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"test\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"x\".repeat(10_000))) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{}\", \"0\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{:?}\", \"value\")) == Ok(())",
                "    write_fmt(&mut Left(WriteString { content: String::new() }), format_args!(\"{:05}\", 42)) == Ok(())",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}