{
  "name": "either::iterator::{impl#1}::extend",
  "mod_info": {
    "name": "iterator",
    "loc": "src/lib.rs:142:1:142:14"
  },
  "visible": true,
  "loc": "src/iterator.rs:34:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Right($pattern) at line 38 is true\n"
      ],
      "input_infer": "self is Either::Right and requires an `iter` input of type T that can be converted into an iterator yielding type A, where T can also handle an empty iterator and a variety of item counts (1 to N) including boundary cases like passing a single item, multiple items, and an iterator that does not yield any items (0 items) while ensuring A can be of any type compatible with R in Either<R, L>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let empty_iter: Vec<i32> = vec![];",
                "    either.extend(empty_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![1, 2, 3]));"
              ],
              "code": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let empty_iter: Vec<i32> = vec![];",
                "    either.extend(empty_iter);",
                "    assert_eq!(either, Either::Right(vec![1, 2, 3]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let single_item_iter = vec![4];",
                "    either.extend(single_item_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4]));"
              ],
              "code": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let single_item_iter = vec![4];",
                "    either.extend(single_item_iter);",
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let multiple_items_iter = vec![4, 5, 6];",
                "    either.extend(multiple_items_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4, 5, 6]));"
              ],
              "code": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let multiple_items_iter = vec![4, 5, 6];",
                "    either.extend(multiple_items_iter);",
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4, 5, 6]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let large_iter = (7..=1000).collect::<Vec<i32>>();",
                "    either.extend(large_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 7, 8, 9, ..., 1000]));"
              ],
              "code": [
                "{",
                "    let mut either = Either::Right(vec![1, 2, 3]);",
                "    let large_iter = (7..=1000).collect::<Vec<i32>>();",
                "    either.extend(large_iter);",
                "    assert_eq!(either, Either::Right(vec![1, 2, 3, 7, 8, 9, ..., 1000]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut either = Either::Right(vec![\"A\", \"B\"]);",
                "    let varied_iter = vec![\"C\", \"D\", \"E\"];",
                "    either.extend(varied_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![\"A\", \"B\", \"C\", \"D\", \"E\"]));"
              ],
              "code": [
                "{",
                "    let mut either = Either::Right(vec![\"A\", \"B\"]);",
                "    let varied_iter = vec![\"C\", \"D\", \"E\"];",
                "    either.extend(varied_iter);",
                "    assert_eq!(either, Either::Right(vec![\"A\", \"B\", \"C\", \"D\", \"E\"]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Left($pattern) at line 38 is true\n"
      ],
      "input_infer": "self must be Either::Left with a non-empty collection, iter must be an iterable of type A containing at least one element of type A, and A must implement the Extend trait suitable for the collection in Either::Left\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![1, 2, 3] });",
                "    let iter = vec![4, 5, 6];",
                "    left.extend(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2, 3, 4, 5, 6] }));"
              ],
              "code": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![1, 2, 3] });",
                "    let iter = vec![4, 5, 6];",
                "    left.extend(iter);",
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2, 3, 4, 5, 6] }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![1] });",
                "    let iter = vec![2];",
                "    left.extend(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2] }));"
              ],
              "code": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![1] });",
                "    let iter = vec![2];",
                "    left.extend(iter);",
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2] }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![10, 20, 30] });",
                "    let iter = (1..=100).collect::<Vec<i32>>();",
                "    left.extend(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![10, 20, 30, 1, 2, 3, ..., 100] }));"
              ],
              "code": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![10, 20, 30] });",
                "    let iter = (1..=100).collect::<Vec<i32>>();",
                "    left.extend(iter);",
                "    assert_eq!(left, Either::Left(LeftCollection { items: vec![10, 20, 30, 1, 2, 3, ..., 100] }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![5] });",
                "    let iter = vec![10, 15];",
                "    left.extend(iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.items, vec![5, 10, 15]);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(left.items.len() == 3);"
              ],
              "code": [
                "{",
                "    struct LeftCollection {",
                "        items: Vec<i32>,",
                "    }",
                "",
                "    impl Extend<i32> for LeftCollection {",
                "        fn extend<T>(&mut self, iter: T)",
                "        where",
                "            T: IntoIterator<Item = i32>,",
                "        {",
                "            self.items.extend(iter);",
                "        }",
                "    }",
                "",
                "    let mut left = Either::Left(LeftCollection { items: vec![5] });",
                "    let iter = vec![10, 15];",
                "    left.extend(iter);",
                "    assert_eq!(left.items, vec![5, 10, 15]);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(left.items.len() == 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}