{
  "name": "either::{impl#1}::map_either_with",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:397:5:406:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 402 is true\n",
        "expected return value/type: Right(g(ctx, r))\n"
      ],
      "input_infer": "Right variant of Either with a valid type R, context Ctx that matches the required type for F and G, and callable functions F and G that appropriately handle the types of L and R respectively.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
                "    ",
                "    let right: Either<String, usize> = Right(42);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"42\".into()));",
                "    assert_eq!(sum, 42);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
                "    ",
                "    let right: Either<String, usize> = Right(42);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "    assert_eq!(result, Right(\"42\".into()));",
                "    assert_eq!(sum, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
                "",
                "    let right: Either<String, usize> = Right(58);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"58\".into()));",
                "    assert_eq!(sum, 58);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
                "",
                "    let right: Either<String, usize> = Right(58);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "    assert_eq!(result, Right(\"58\".into()));",
                "    assert_eq!(sum, 58);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: f64| { *sum += u as usize; u.to_string() };",
                "",
                "    let right: Either<String, f64> = Right(3.14);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"3\".to_string()));",
                "    assert_eq!(sum, 3);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
                "    let g = |sum: &mut usize, u: f64| { *sum += u as usize; u.to_string() };",
                "",
                "    let right: Either<String, f64> = Right(3.14);",
                "    let result = right.map_either_with(&mut sum, &f, &g);",
                "    assert_eq!(result, Right(\"3\".to_string()));",
                "    assert_eq!(sum, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 402 is true\n",
        "precondition: self matches Left(l) at line 402 is true\n",
        "expected return value/type: Left(f(ctx, l))\n"
      ],
      "input_infer": "self should be of type Either<String, usize> with the variant Left containing a String, ctx should be a mutable reference to a usize, f should be a closure that takes a mutable usize and a String and returns a value of type M, L should be of type String, and M should be of any type convertible from the return type of f.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"test\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"TEST\".into()));",
                "    assert_eq!(sum, 4);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"test\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "    assert_eq!(result, Left(\"TEST\".into()));",
                "    assert_eq!(sum, 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"\".into()));",
                "    assert_eq!(sum, 0);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "    assert_eq!(result, Left(\"\".into()));",
                "    assert_eq!(sum, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"longer test string\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"LONGER TEST STRING\".into()));",
                "    assert_eq!(sum, 21);"
              ],
              "code": [
                "{",
                "    let mut sum = 0;",
                "    let f = |ctx: &mut usize, s: String| {",
                "        *ctx += s.len();",
                "        s.to_uppercase()",
                "    };",
                "    let left: Either<String, usize> = Left(\"longer test string\".into());",
                "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
                "    assert_eq!(result, Left(\"LONGER TEST STRING\".into()));",
                "    assert_eq!(sum, 21);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}