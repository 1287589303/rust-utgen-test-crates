{
  "name": "either::iterator::{impl#7}::nth_back",
  "mod_info": {
    "name": "iterator",
    "loc": "src/lib.rs:142:1:142:14"
  },
  "visible": true,
  "loc": "src/iterator.rs:281:5:283:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.inner matches Right($pattern) at line 282 is true\n",
        "precondition: inner.nth_back(n)? at line 282 is Err/None\n"
      ],
      "input_infer": "self.inner must be an instance of Either::Right(R) where R is a DoubleEndedIterator containing at least one element for n=0, or n must be greater than or equal to the length of the iterator for Err/None, hence test input range for n is 0 to size of R, inclusive.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "    ",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                self.index = self.data.len() - n - 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "    ",
                "    let result = iter_either.nth_back(0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 3);",
                "    ",
                "    let result = iter_either.nth_back(1);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 2);",
                "    ",
                "    let result = iter_either.nth_back(2);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 1);",
                "    ",
                "    let result = iter_either.nth_back(3);",
                "    assert!(result.is_none());",
                "    ",
                "    let result = iter_either.nth_back(4);",
                "    assert!(result.is_none());",
                "    ",
                "    let iter = TestIterator { data: vec![], index: 0 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "    ",
                "    let result = iter_either.nth_back(0);",
                "    assert!(result.is_none());",
                "    ",
                "    let result = iter_either.nth_back(1);",
                "    assert!(result.is_none());"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "    ",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                self.index = self.data.len() - n - 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "    ",
                "    let result = iter_either.nth_back(0);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 3);",
                "    ",
                "    let result = iter_either.nth_back(1);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 2);",
                "    ",
                "    let result = iter_either.nth_back(2);",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 1);",
                "    ",
                "    let result = iter_either.nth_back(3);",
                "    assert!(result.is_none());",
                "    ",
                "    let result = iter_either.nth_back(4);",
                "    assert!(result.is_none());",
                "    ",
                "    let iter = TestIterator { data: vec![], index: 0 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "    ",
                "    let result = iter_either.nth_back(0);",
                "    assert!(result.is_none());",
                "    ",
                "    let result = iter_either.nth_back(1);",
                "    assert!(result.is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "    ",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                self.index = self.data.len() - n - 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "",
                "    let result = iter_either.nth_back(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "    ",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                self.index = self.data.len() - n - 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
                "    let inner = Either::Right(iter);",
                "    let mut iter_either = IterEither { inner };",
                "",
                "    let result = iter_either.nth_back(5);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self.inner matches Left($pattern) at line 282 is true\n",
        "precondition: inner.nth_back(n)? at line 282 is Ok/Some\n",
        "expected return value/type: Some(map_either!(self.inner, ref mut inner => inner.nth_back(n)?))\n"
      ],
      "input_infer": "n >= 0 and n < the length of the elements in Left variant of self.inner\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![1, 2, 3],",
                "        index: 3,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(1);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(2));",
                "    assert_eq!(iter.inner, Either::Left(TestIterator { data: vec![1, 2, 3], index: 2 }));",
                "    assert!(iter.nth_back(0).is_some());",
                "    assert_eq!(iter.nth_back(0), Some(3));",
                "    assert!(iter.nth_back(3).is_none());"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![1, 2, 3],",
                "        index: 3,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(1);",
                "    assert!(result.is_some());",
                "    assert_eq!(result, Some(2));",
                "    assert_eq!(iter.inner, Either::Left(TestIterator { data: vec![1, 2, 3], index: 2 }));",
                "    assert!(iter.nth_back(0).is_some());",
                "    assert_eq!(iter.nth_back(0), Some(3));",
                "    assert!(iter.nth_back(3).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![5],",
                "        index: 1,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(5));",
                "    assert!(iter.inner == Either::Left(TestIterator { data: vec![5], index: 0 }));",
                "    assert_eq!(iter.nth_back(0), Some(5));",
                "    assert_eq!(iter.nth_back(1), None);",
                "    assert!(matches!(iter.inner, Either::Left(_)));",
                "    assert_eq!(iter.nth_back(0).is_some(), true);"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![5],",
                "        index: 1,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(0);",
                "    assert_eq!(result, Some(5));",
                "    assert!(iter.inner == Either::Left(TestIterator { data: vec![5], index: 0 }));",
                "    assert_eq!(iter.nth_back(0), Some(5));",
                "    assert_eq!(iter.nth_back(1), None);",
                "    assert!(matches!(iter.inner, Either::Left(_)));",
                "    assert_eq!(iter.nth_back(0).is_some(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![10, 20, 30, 40],",
                "        index: 4,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(3);",
                "}"
              ],
              "oracle": [
                "    let left_iter = Either::Left(TestIterator { data: vec![10, 20, 30, 40], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(3), Some(10));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![1, 2, 3, 4, 5], index: 5 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(1), Some(4));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![100], index: 1 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(0), Some(100));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![5, 10, 15, 20], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(2), Some(10));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![], index: 0 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(0), None);",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![3, 6, 9, 12], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(4), None);"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl DoubleEndedIterator for TestIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
                "            if n < self.data.len() {",
                "                Some(self.data[self.data.len() - 1 - n])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "    }",
                "",
                "    let left_iter = Either::Left(TestIterator {",
                "        data: vec![10, 20, 30, 40],",
                "        index: 4,",
                "    });",
                "    let mut iter = IterEither { inner: left_iter };",
                "",
                "    let result = iter.nth_back(3);",
                "    let left_iter = Either::Left(TestIterator { data: vec![10, 20, 30, 40], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(3), Some(10));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![1, 2, 3, 4, 5], index: 5 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(1), Some(4));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![100], index: 1 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(0), Some(100));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![5, 10, 15, 20], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(2), Some(10));",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![], index: 0 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(0), None);",
                "    ",
                "    let left_iter = Either::Left(TestIterator { data: vec![3, 6, 9, 12], index: 4 });",
                "    let mut iter = IterEither { inner: left_iter };",
                "    assert_eq!(iter.nth_back(4), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}