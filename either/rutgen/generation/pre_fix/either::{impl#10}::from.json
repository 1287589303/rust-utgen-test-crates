{
  "name": "either::{impl#10}::from",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1123:5:1128:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: r matches Err(e) at line 1124 is true\n",
        "precondition: r matches Err(e) at line 1124 is true\n",
        "expected return value/type: Left(e)\n"
      ],
      "input_infer": "Input conditions: r = Err(x) where x is of type L, with any valid value for L.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<i32, &str> = Err(\"error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    let result: Result<i32, &str> = Err(\"error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Either::Left(\"error\"));",
                "    assert!(matches!(either, Either::Left(_)));"
              ],
              "code": [
                "{",
                "    let result: Result<i32, &str> = Err(\"error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    let result: Result<i32, &str> = Err(\"error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Either::Left(\"error\"));",
                "    assert!(matches!(either, Either::Left(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<i32, &str> = Err(\"zero error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    let result: Result<i32, &str> = Err(\"zero error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Either::Left(\"zero error\"));",
                "    assert!(matches!(either, Either::Left(_)));"
              ],
              "code": [
                "{",
                "    let result: Result<i32, &str> = Err(\"zero error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    let result: Result<i32, &str> = Err(\"zero error\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Either::Left(\"zero error\"));",
                "    assert!(matches!(either, Either::Left(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<i32, &str> = Err(\"large error message that exceeds normal length\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(either, Either::Left(\"large error message that exceeds normal length\")));"
              ],
              "code": [
                "{",
                "    let result: Result<i32, &str> = Err(\"large error message that exceeds normal length\");",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert!(matches!(either, Either::Left(\"large error message that exceeds normal length\")));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<u32, &str> = Err(\"type error\");",
                "    let either: Either<&str, u32> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    let result: Result<u32, &str> = Err(\"type error\");",
                "    let either: Either<&str, u32> = Either::from(result);",
                "    assert!(matches!(either, Either::Left(\"type error\")));"
              ],
              "code": [
                "{",
                "    let result: Result<u32, &str> = Err(\"type error\");",
                "    let either: Either<&str, u32> = Either::from(result);",
                "    let result: Result<u32, &str> = Err(\"type error\");",
                "    let either: Either<&str, u32> = Either::from(result);",
                "    assert!(matches!(either, Either::Left(\"type error\")));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: r matches Ok(o) at line 1124 is true\n",
        "expected return value/type: Right(o)\n"
      ],
      "input_infer": "Test input conditions or ranges: Result::<T, E>::Ok variants with various types T, ensuring T is non-empty, and verifying E is of a valid error type while being diverse to test different generic situations.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
                "    let either: Either<&str, String> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
                "    let either: Either<&str, String> = Either::from(result);",
                "    assert_eq!(either, Right(String::from(\"Test String\")));"
              ],
              "code": [
                "{",
                "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
                "    let either: Either<&str, String> = Either::from(result);",
                "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
                "    let either: Either<&str, String> = Either::from(result);",
                "    assert_eq!(either, Right(String::from(\"Test String\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<i32, &str> = Ok(42);",
                "    let either: Either<&str, i32> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    let result: Result<i32, &str> = Ok(42);",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Right(42));"
              ],
              "code": [
                "{",
                "    let result: Result<i32, &str> = Ok(42);",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    let result: Result<i32, &str> = Ok(42);",
                "    let either: Either<&str, i32> = Either::from(result);",
                "    assert_eq!(either, Right(42));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<f64, &str> = Ok(3.14);",
                "    let either: Either<&str, f64> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Right(3.14));"
              ],
              "code": [
                "{",
                "    let result: Result<f64, &str> = Ok(3.14);",
                "    let either: Either<&str, f64> = Either::from(result);",
                "    assert_eq!(either, Right(3.14));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<Vec<i32>, &str> = Ok(vec![1, 2, 3]);",
                "    let either: Either<&str, Vec<i32>> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(vec![1, 2, 3]));"
              ],
              "code": [
                "{",
                "    let result: Result<Vec<i32>, &str> = Ok(vec![1, 2, 3]);",
                "    let either: Either<&str, Vec<i32>> = Either::from(result);",
                "    assert_eq!(either, Either::Right(vec![1, 2, 3]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result: Result<(i32, i32), &str> = Ok((1, 2));",
                "    let either: Either<&str, (i32, i32)> = Either::from(result);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Right((1, 2)));"
              ],
              "code": [
                "{",
                "    let result: Result<(i32, i32), &str> = Ok((1, 2));",
                "    let either: Either<&str, (i32, i32)> = Either::from(result);",
                "    assert_eq!(either, Right((1, 2)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}