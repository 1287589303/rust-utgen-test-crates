{
  "name": "either::{impl#1}::left_or",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:673:5:678:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(_) at line 674 is true\n",
        "expected return value/type: other\n"
      ],
      "input_infer": "self must be of type Either<L, R> where self is an instance of Either::Right and other must be of type L, with L being any type allowed as the left representation of Either.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<i32, i32> = Right(5);",
                "    let default_value: i32 = 10;",
                "    let result = right_value.left_or(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 10);"
              ],
              "code": [
                "{",
                "    let right_value: Either<i32, i32> = Right(5);",
                "    let default_value: i32 = 10;",
                "    let result = right_value.left_or(default_value);",
                "    assert_eq!(result, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<&str, &str> = Right(\"right\");",
                "    let default_value: &str = \"left\";",
                "    let result = right_value.left_or(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"left\");"
              ],
              "code": [
                "{",
                "    let right_value: Either<&str, &str> = Right(\"right\");",
                "    let default_value: &str = \"left\";",
                "    let result = right_value.left_or(default_value);",
                "    assert_eq!(result, \"left\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<f32, f32> = Right(3.14);",
                "    let default_value: f32 = 1.61;",
                "    let result = right_value.left_or(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1.61);"
              ],
              "code": [
                "{",
                "    let right_value: Either<f32, f32> = Right(3.14);",
                "    let default_value: f32 = 1.61;",
                "    let result = right_value.left_or(default_value);",
                "    assert_eq!(result, 1.61);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<&str, &str> = Right(\"right\");",
                "    let default_value: &str = \"\";",
                "    let result = right_value.left_or(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, default_value);"
              ],
              "code": [
                "{",
                "    let right_value: Either<&str, &str> = Right(\"right\");",
                "    let default_value: &str = \"\";",
                "    let result = right_value.left_or(default_value);",
                "    assert_eq!(result, default_value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right_value: Either<char, char> = Right('y');",
                "    let default_value: char = 'x';",
                "    let result = right_value.left_or(default_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 'x');"
              ],
              "code": [
                "{",
                "    let right_value: Either<char, char> = Right('y');",
                "    let default_value: char = 'x';",
                "    let result = right_value.left_or(default_value);",
                "    assert_eq!(result, 'x');",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(l) at line 674 is true\n",
        "precondition: self matches Either::Left(l) at line 674 is true\n",
        "expected return value/type: l\n"
      ],
      "input_infer": "self = Either::Left(l) where l is of type L; other is of type L; ensure l is non-empty/string and also check for boundary values like minimum and maximum lengths, if applicable.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"non-empty\");",
                "    let result = left.left_or(\"fallback\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"non-empty\");"
              ],
              "code": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"non-empty\");",
                "    let result = left.left_or(\"fallback\");",
                "    assert_eq!(result, \"non-empty\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"\");",
                "    let result = left.left_or(\"fallback\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result, left.unwrap_left());",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left_or(\"new fallback\"), \"\");",
                "    assert_eq!(left.left_or_else(|_| \"fallback\"), \"\");"
              ],
              "code": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"\");",
                "    let result = left.left_or(\"fallback\");",
                "    assert_eq!(result, \"\");",
                "    assert_eq!(result, left.unwrap_left());",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left_or(\"new fallback\"), \"\");",
                "    assert_eq!(left.left_or_else(|_| \"fallback\"), \"\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let long_str = \"a\".repeat(1000); // Example of a long string",
                "    let left: Either<&str, &str> = Either::Left(long_str.as_str());",
                "    let result = left.left_or(\"fallback\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, long_str.as_str());"
              ],
              "code": [
                "{",
                "    let long_str = \"a\".repeat(1000); // Example of a long string",
                "    let left: Either<&str, &str> = Either::Left(long_str.as_str());",
                "    let result = left.left_or(\"fallback\");",
                "    assert_eq!(result, long_str.as_str());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"!@#$%^&*()\");",
                "    let result = left.left_or(\"fallback\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"!@#$%^&*()\");"
              ],
              "code": [
                "{",
                "    let left: Either<&str, &str> = Either::Left(\"!@#$%^&*()\");",
                "    let result = left.left_or(\"fallback\");",
                "    assert_eq!(result, \"!@#$%^&*()\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}