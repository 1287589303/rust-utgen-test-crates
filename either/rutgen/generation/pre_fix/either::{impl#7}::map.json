{
  "name": "either::{impl#7}::map",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1066:5:1074:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 1070 is true\n",
        "expected return value/type: Right(f(r))\n"
      ],
      "input_infer": "Input conditions: self must be an Either variant of Right with an integer value (e.g., Right(0), Right(1), ..., Right(2147483647)), and the closure f must accept an integer and return a type M (e.g., f: fn(i32) -> i32) with M being of any type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Right(42);",
                "    let other = value.map(|x| x);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Right(42));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Right(42);",
                "    let other = value.map(|x| x);",
                "    assert_eq!(other, Right(42));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Right(0);",
                "    let other = value.map(|x| x + 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Right(1));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Right(0);",
                "    let other = value.map(|x| x + 1);",
                "    assert_eq!(other, Right(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Right(2147483647);",
                "    let other = value.map(|x| x);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Right(2147483647));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Right(2147483647);",
                "    let other = value.map(|x| x);",
                "    assert_eq!(other, Right(2147483647));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Right(-1);",
                "    let other = value.map(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Right(-2));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Right(-1);",
                "    let other = value.map(|x| x * 2);",
                "    assert_eq!(other, Right(-2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Right(100);",
                "    let other = value.map(|x| x * 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Right(300));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Right(100);",
                "    let other = value.map(|x| x * 3);",
                "    assert_eq!(other, Right(300));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 1070 is true\n",
        "precondition: self matches Left(l) at line 1070 is true\n",
        "expected return value/type: Left(f(l))\n"
      ],
      "input_infer": "Test input conditions/ranges: test with a variety of functions `f` that transform `Left` values, including identity functions, functions with integers, strings, and floating-point numbers; input `Either` value of type `Left(T)` where `T` could be any supported type like `i32`, `String`, and `f64`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Left(10);",
                "    let other = value.map(|x| x);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Left(10));",
                "    assert!(matches!(other, Left(_)));",
                "    assert!(matches!(value.map(|x| x * 2), Left(_)));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Left(10);",
                "    let other = value.map(|x| x);",
                "    assert_eq!(other, Left(10));",
                "    assert!(matches!(other, Left(_)));",
                "    assert!(matches!(value.map(|x| x * 2), Left(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, i32> = Left(5);",
                "    let other = value.map(|x| x * 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Left(15));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, i32> = Left(5);",
                "    let other = value.map(|x| x * 3);",
                "    assert_eq!(other, Left(15));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<String, i32> = Left(String::from(\"test\"));",
                "    let other = value.map(|s| s.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Left(4));"
              ],
              "code": [
                "{",
                "    let value: Either<String, i32> = Left(String::from(\"test\"));",
                "    let other = value.map(|s| s.len());",
                "    assert_eq!(other, Left(4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<f64, f64> = Left(2.5);",
                "    let other = value.map(|x| x * 4.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Left(10.0));"
              ],
              "code": [
                "{",
                "    let value: Either<f64, f64> = Left(2.5);",
                "    let other = value.map(|x| x * 4.0);",
                "    assert_eq!(other, Left(10.0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, f64> = Left(7);",
                "    let other = value.map(|x| x + 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(other, Left(17));"
              ],
              "code": [
                "{",
                "    let value: Either<i32, f64> = Left(7);",
                "    let other = value.map(|x| x + 10);",
                "    assert_eq!(other, Left(17));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}