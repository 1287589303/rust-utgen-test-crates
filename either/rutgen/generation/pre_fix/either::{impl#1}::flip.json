{
  "name": "either::{impl#1}::flip",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:298:5:303:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 299 is true\n",
        "expected return value/type: Left(r)\n"
      ],
      "input_infer": "self must be an instance of Either with R as the type of the Right variant and a valid value for R.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), u32> = Right(42);",
                "    let result = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(42));"
              ],
              "code": [
                "{",
                "    let right: Either<(), u32> = Right(42);",
                "    let result = right.flip();",
                "    assert_eq!(result, Left(42));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), &str> = Right(\"test\");",
                "    let result = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"test\"));"
              ],
              "code": [
                "{",
                "    let right: Either<(), &str> = Right(\"test\");",
                "    let result = right.flip();",
                "    assert_eq!(result, Left(\"test\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), f64> = Right(3.14);",
                "    let result = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(3.14));"
              ],
              "code": [
                "{",
                "    let right: Either<(), f64> = Right(3.14);",
                "    let result = right.flip();",
                "    assert_eq!(result, Left(3.14));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), Vec<u8>> = Right(Vec::new());",
                "    let result = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(Vec::new()));"
              ],
              "code": [
                "{",
                "    let right: Either<(), Vec<u8>> = Right(Vec::new());",
                "    let result = right.flip();",
                "    assert_eq!(result, Left(Vec::new()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), char> = Right('a');",
                "    let result = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left('a'));"
              ],
              "code": [
                "{",
                "    let right: Either<(), char> = Right('a');",
                "    let result = right.flip();",
                "    assert_eq!(result, Left('a'));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 299 is true\n",
        "precondition: self matches Left(l) at line 299 is true\n",
        "expected return value/type: Right(l)\n"
      ],
      "input_infer": "Test input conditions: self = Left(l) where l is of any type (e.g., integers, strings, structs) that is compatible with the Right variant, and self = Right(r) where r is of any type (e.g., integers, strings, structs) that is compatible with the Left variant.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, ()> = Left(123);",
                "    let _ = left.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.flip(), Right(123));"
              ],
              "code": [
                "{",
                "    let left: Either<i32, ()> = Left(123);",
                "    let _ = left.flip();",
                "    assert_eq!(left.flip(), Right(123));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, ()> = Left(String::from(\"text\"));",
                "    let _ = left.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.flip(), Right(String::from(\"text\")));",
                "    let right: Either<(), String> = Right(String::from(\"value\"));",
                "    assert_eq!(right.flip(), Left(String::from(\"value\")));",
                "    let left_int: Either<i32, ()> = Left(456);",
                "    assert_eq!(left_int.flip(), Right(456));",
                "    let right_float: Either<(), f64> = Right(3.14);",
                "    assert_eq!(right_float.flip(), Left(3.14));",
                "    let left_char: Either<char, ()> = Left('a');",
                "    assert_eq!(left_char.flip(), Right('a'));",
                "    let right_bool: Either<(), bool> = Right(true);",
                "    assert_eq!(right_bool.flip(), Left(true));"
              ],
              "code": [
                "{",
                "    let left: Either<String, ()> = Left(String::from(\"text\"));",
                "    let _ = left.flip();",
                "    assert_eq!(left.flip(), Right(String::from(\"text\")));",
                "    let right: Either<(), String> = Right(String::from(\"value\"));",
                "    assert_eq!(right.flip(), Left(String::from(\"value\")));",
                "    let left_int: Either<i32, ()> = Left(456);",
                "    assert_eq!(left_int.flip(), Right(456));",
                "    let right_float: Either<(), f64> = Right(3.14);",
                "    assert_eq!(right_float.flip(), Left(3.14));",
                "    let left_char: Either<char, ()> = Left('a');",
                "    assert_eq!(left_char.flip(), Right('a'));",
                "    let right_bool: Either<(), bool> = Right(true);",
                "    assert_eq!(right_bool.flip(), Left(true));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), i32> = Right(456);",
                "    let _ = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Right(456).flip(), Left(456));",
                "    let left: Either<i32, ()> = Left(123);",
                "    assert_eq!(left.flip(), Right(123));",
                "    let right: Either<(), i32> = Right(\"some value\");",
                "    assert_eq!(right.flip(), Left(\"some value\"));",
                "    assert_eq!(Left(789).flip(), Right(789));",
                "    assert_eq!(Left(0).flip(), Right(0));",
                "    assert_eq!(Right(1).flip(), Left(1));"
              ],
              "code": [
                "{",
                "    let right: Either<(), i32> = Right(456);",
                "    let _ = right.flip();",
                "    assert_eq!(Right(456).flip(), Left(456));",
                "    let left: Either<i32, ()> = Left(123);",
                "    assert_eq!(left.flip(), Right(123));",
                "    let right: Either<(), i32> = Right(\"some value\");",
                "    assert_eq!(right.flip(), Left(\"some value\"));",
                "    assert_eq!(Left(789).flip(), Right(789));",
                "    assert_eq!(Left(0).flip(), Right(0));",
                "    assert_eq!(Right(1).flip(), Left(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(), String> = Right(String::from(\"another text\"));",
                "    let _ = right.flip();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.flip(), Left(String::from(\"another text\")));",
                "    let left: Either<i32, ()> = Left(456);",
                "    assert_eq!(left.flip(), Right(456));",
                "    let left: Either<u32, ()> = Left(789);",
                "    assert_eq!(left.flip(), Right(789));",
                "    let right: Either<(), &str> = Right(\"test\");",
                "    assert_eq!(right.flip(), Left(\"test\"));",
                "    let right: Either<(), f64> = Right(3.14);",
                "    assert_eq!(right.flip(), Left(3.14));"
              ],
              "code": [
                "{",
                "    let right: Either<(), String> = Right(String::from(\"another text\"));",
                "    let _ = right.flip();",
                "    assert_eq!(right.flip(), Left(String::from(\"another text\")));",
                "    let left: Either<i32, ()> = Left(456);",
                "    assert_eq!(left.flip(), Right(456));",
                "    let left: Either<u32, ()> = Left(789);",
                "    assert_eq!(left.flip(), Right(789));",
                "    let right: Either<(), &str> = Right(\"test\");",
                "    assert_eq!(right.flip(), Left(\"test\"));",
                "    let right: Either<(), f64> = Right(3.14);",
                "    assert_eq!(right.flip(), Left(3.14));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}