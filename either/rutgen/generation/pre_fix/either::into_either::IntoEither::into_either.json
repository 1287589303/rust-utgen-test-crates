{
  "name": "either::into_either::IntoEither::into_either",
  "mod_info": {
    "name": "into_either",
    "loc": "src/lib.rs:145:1:145:17"
  },
  "visible": true,
  "loc": "src/into_either.rs:29:5:35:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: into_left at line 30 is true\n",
        "expected return value/type: Left(self)\n"
      ],
      "input_infer": "test input conditions or ranges: input types that implement the IntoEither trait with arbitrary values and into_left = true\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct IntegerWrapper(i32);",
                "    ",
                "    impl IntoEither for IntegerWrapper {}",
                "    ",
                "    let value = IntegerWrapper(42);",
                "    let result = value.into_either(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(value));",
                "    assert!(matches!(result, Left(_)));",
                "    assert_eq!(result.0, 42);"
              ],
              "code": [
                "{",
                "    struct IntegerWrapper(i32);",
                "    ",
                "    impl IntoEither for IntegerWrapper {}",
                "    ",
                "    let value = IntegerWrapper(42);",
                "    let result = value.into_either(true);",
                "    assert_eq!(result, Left(value));",
                "    assert!(matches!(result, Left(_)));",
                "    assert_eq!(result.0, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct FloatWrapper(f32);",
                "    ",
                "    impl IntoEither for FloatWrapper {}",
                "    ",
                "    let value = FloatWrapper(3.14);",
                "    let result = value.into_either(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(value));"
              ],
              "code": [
                "{",
                "    struct FloatWrapper(f32);",
                "    ",
                "    impl IntoEither for FloatWrapper {}",
                "    ",
                "    let value = FloatWrapper(3.14);",
                "    let result = value.into_either(true);",
                "    assert_eq!(result, Left(value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct StringWrapper(String);",
                "    ",
                "    impl IntoEither for StringWrapper {}",
                "    ",
                "    let value = StringWrapper(\"Hello\".to_string());",
                "    let result = value.into_either(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(value));"
              ],
              "code": [
                "{",
                "    struct StringWrapper(String);",
                "    ",
                "    impl IntoEither for StringWrapper {}",
                "    ",
                "    let value = StringWrapper(\"Hello\".to_string());",
                "    let result = value.into_either(true);",
                "    assert_eq!(result, Left(value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CharWrapper(char);",
                "    ",
                "    impl IntoEither for CharWrapper {}",
                "    ",
                "    let value = CharWrapper('A');",
                "    let result = value.into_either(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(CharWrapper('A')));"
              ],
              "code": [
                "{",
                "    struct CharWrapper(char);",
                "    ",
                "    impl IntoEither for CharWrapper {}",
                "    ",
                "    let value = CharWrapper('A');",
                "    let result = value.into_either(true);",
                "    assert_eq!(result, Left(CharWrapper('A')));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct BoolWrapper(bool);",
                "    ",
                "    impl IntoEither for BoolWrapper {}",
                "    ",
                "    let value = BoolWrapper(true);",
                "    let result = value.into_either(true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(value));"
              ],
              "code": [
                "{",
                "    struct BoolWrapper(bool);",
                "    ",
                "    impl IntoEither for BoolWrapper {}",
                "    ",
                "    let value = BoolWrapper(true);",
                "    let result = value.into_either(true);",
                "    assert_eq!(result, Left(value));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: into_left at line 30 is false\n",
        "expected return value/type: Right(self)\n"
      ],
      "input_infer": "self can be any type implementing IntoEither with into_left set to false.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = 42;",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(x));"
              ],
              "code": [
                "{",
                "    let x = 42;",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(x));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = -1;",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(x));"
              ],
              "code": [
                "{",
                "    let x = -1;",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(x));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = 3.14;",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(x));"
              ],
              "code": [
                "{",
                "    let x = 3.14;",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(x));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = true;",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(x));"
              ],
              "code": [
                "{",
                "    let x = true;",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(x));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = String::from(\"Hello\");",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(String::from(\"Hello\")));"
              ],
              "code": [
                "{",
                "    let x = String::from(\"Hello\");",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(String::from(\"Hello\")));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let x = vec![1, 2, 3];",
                "    let result = x.into_either(false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(x));"
              ],
              "code": [
                "{",
                "    let x = vec![1, 2, 3];",
                "    let result = x.into_either(false);",
                "    assert_eq!(result, Right(x));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}