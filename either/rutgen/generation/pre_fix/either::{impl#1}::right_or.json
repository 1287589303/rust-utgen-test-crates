{
  "name": "either::{impl#1}::right_or",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:740:5:745:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(r) at line 741 is true\n",
        "expected return value/type: r\n"
      ],
      "input_infer": "self is Either::Right with non-null R value for various types (e.g., integers, strings, user-defined types)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, i32> = Right(42);",
                "    let result = right.right_or(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 42);"
              ],
              "code": [
                "{",
                "    let right: Either<i32, i32> = Right(42);",
                "    let result = right.right_or(10);",
                "    assert_eq!(result, 42);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<&str, &str> = Right(\"hello\");",
                "    let result = right.right_or(\"world\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"hello\");"
              ],
              "code": [
                "{",
                "    let right: Either<&str, &str> = Right(\"hello\");",
                "    let result = right.right_or(\"world\");",
                "    assert_eq!(result, \"hello\");",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomType {",
                "        value: i32,",
                "    }",
                "",
                "    let right: Either<CustomType, CustomType> = Right(CustomType { value: 100 });",
                "    let result = right.right_or(CustomType { value: 200 });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, CustomType { value: 100 });"
              ],
              "code": [
                "{",
                "    struct CustomType {",
                "        value: i32,",
                "    }",
                "",
                "    let right: Either<CustomType, CustomType> = Right(CustomType { value: 100 });",
                "    let result = right.right_or(CustomType { value: 200 });",
                "    assert_eq!(result, CustomType { value: 100 });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(_) at line 741 is true\n",
        "precondition: self matches Either::Left(_) at line 741 is true\n",
        "expected return value/type: other\n"
      ],
      "input_infer": "Test input conditions or ranges: self = Either::Left(value), other = any value of type R\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left_value = \"left_value\";",
                "    let other_value = \"other_value\";",
                "    let left: Either<&str, &str> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, other_value);"
              ],
              "code": [
                "{",
                "    let left_value = \"left_value\";",
                "    let other_value = \"other_value\";",
                "    let left: Either<&str, &str> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "    assert_eq!(result, other_value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left_value = 42;",
                "    let other_value = 3.14;",
                "    let left: Either<i32, f64> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, other_value);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert_eq!(left.right_or(other_value), other_value);"
              ],
              "code": [
                "{",
                "    let left_value = 42;",
                "    let other_value = 3.14;",
                "    let left: Either<i32, f64> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "    assert_eq!(result, other_value);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert_eq!(left.right_or(other_value), other_value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left_value = \"\";",
                "    let other_value = \"fallback\";",
                "    let left: Either<&str, &str> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, other_value);"
              ],
              "code": [
                "{",
                "    let left_value = \"\";",
                "    let other_value = \"fallback\";",
                "    let left: Either<&str, &str> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "    assert_eq!(result, other_value);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left_value = \"some_value\";",
                "    let other_value: Option<&str> = None;",
                "    let left: Either<&str, Option<&str>> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let left_value = \"some_value\";",
                "    let other_value: Option<&str> = None;",
                "    let left: Either<&str, Option<&str>> = Left(left_value);",
                "    let result = left.right_or(other_value);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}