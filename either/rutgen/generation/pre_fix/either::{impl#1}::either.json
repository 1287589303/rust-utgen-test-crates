{
  "name": "either::{impl#1}::either",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:424:5:433:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 429 is true\n"
      ],
      "input_infer": "self is of type Either<L, R> where L can be of any type and R is constrained to be an i32 or type that allows conversion to i32, and the function g must accept an R value; R should be testable with both positive and negative integers.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, i32> = Right(5);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, -5);"
              ],
              "code": [
                "{",
                "    let right: Either<u32, i32> = Right(5);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "    assert_eq!(result, -5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, i32> = Right(-3);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 3);"
              ],
              "code": [
                "{",
                "    let right: Either<u32, i32> = Right(-3);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, i32> = Right(0);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let right: Either<u32, i32> = Right(0);",
                "    let result = right.either(|n| n * 2, |n| -n);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 429 is true\n",
        "precondition: self matches Left(l) at line 429 is true\n"
      ],
      "input_infer": "self should be of type Either<L, R> where L is a type that can be passed to function F and R is a type that can be passed to function G, covering cases where Either is instantiated as Left(L), such as Left(0), Left(1), Left(MAX_U32), and other values within the bounds of L's type, as well as testing with diverse function types for F and G.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<u32, i32> = Left(0);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);"
              ],
              "code": [
                "{",
                "    let left: Either<u32, i32> = Left(0);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<u32, i32> = Left(1);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    let left_value: Either<u32, i32> = Left(3);",
                "    let result_value = left_value.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_value, 9);",
                "    let left_zero: Either<u32, i32> = Left(0);",
                "    let result_zero = left_zero.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_zero, 0);",
                "    let left_large: Either<u32, i32> = Left(100);",
                "    let result_large = left_large.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_large, 10000);"
              ],
              "code": [
                "{",
                "    let left: Either<u32, i32> = Left(1);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result, 1);",
                "    let left_value: Either<u32, i32> = Left(3);",
                "    let result_value = left_value.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_value, 9);",
                "    let left_zero: Either<u32, i32> = Left(0);",
                "    let result_zero = left_zero.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_zero, 0);",
                "    let left_large: Either<u32, i32> = Left(100);",
                "    let result_large = left_large.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result_large, 10000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<u32, i32> = Left(u32::MAX);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (u32::MAX * u32::MAX) as i32);",
                "    assert!(result >= 0);",
                "    assert!(result == (u32::MAX * u32::MAX) as i32);",
                "    assert!(result.is_left());",
                "    assert!(left.is_left());"
              ],
              "code": [
                "{",
                "    let left: Either<u32, i32> = Left(u32::MAX);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result, (u32::MAX * u32::MAX) as i32);",
                "    assert!(result >= 0);",
                "    assert!(result == (u32::MAX * u32::MAX) as i32);",
                "    assert!(result.is_left());",
                "    assert!(left.is_left());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<u32, i32> = Left(12345);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 152399875);",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left(), Some(12345));",
                "    assert_eq!(left.right(), None);",
                "    assert_eq!(left.left_or_else(|n| -n), 152399875);",
                "    assert_eq!(left.unwrap_left(), 12345);",
                "    assert_eq!(left.expect_left(\"Expected left value\"), 12345);"
              ],
              "code": [
                "{",
                "    let left: Either<u32, i32> = Left(12345);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result, 152399875);",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left(), Some(12345));",
                "    assert_eq!(left.right(), None);",
                "    assert_eq!(left.left_or_else(|n| -n), 152399875);",
                "    assert_eq!(left.unwrap_left(), 12345);",
                "    assert_eq!(left.expect_left(\"Expected left value\"), 12345);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<u32, i32> = Left(3);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 9);"
              ],
              "code": [
                "{",
                "    let left: Either<u32, i32> = Left(3);",
                "    let result = left.either(|n| (n * n) as i32, |n| -n);",
                "    assert_eq!(result, 9);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}