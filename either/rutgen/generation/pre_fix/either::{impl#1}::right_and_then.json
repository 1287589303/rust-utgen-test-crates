{
  "name": "either::{impl#1}::right_and_then",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:497:5:505:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 501 is true\n"
      ],
      "input_infer": "Right variant input where R is a valid type (e.g., u32) and F is a function that takes R and returns Either<L, S>, testing with R values at least 0, boundary values, and typical values like 123, including cases where Either<L, S> must hold valid types for various L and S choices.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, u32> = Right(0);",
                "    right.right_and_then(|x| Right(x + 10));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(10));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, u32> = Right(0);",
                "    right.right_and_then(|x| Right(x + 10));",
                "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, u32> = Right(u32::MAX);",
                "    right.right_and_then(|x| Right(x / 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.right_and_then(|x| Right(x / 2)), Right(u32::MAX / 2));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, u32> = Right(u32::MAX);",
                "    right.right_and_then(|x| Right(x / 2));",
                "    assert_eq!(right.right_and_then(|x| Right(x / 2)), Right(u32::MAX / 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, u32> = Right(123);",
                "    right.right_and_then(|x| Right(x * 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, u32> = Right(123);",
                "    right.right_and_then(|x| Right(x * 2));",
                "    assert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, &str> = Right(50);",
                "    right.right_and_then(|x| Left(\"Error\"));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.right_and_then(|x| Left(\"Error\")), Left(\"Error\"));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, &str> = Right(50);",
                "    right.right_and_then(|x| Left(\"Error\"));",
                "    assert_eq!(right.right_and_then(|x| Left(\"Error\")), Left(\"Error\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, &str> = Right(34);",
                "    right.right_and_then(|x| Right(format!(\"Value: {}\", x)));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.right_and_then(|x| Right(format!(\"Value: {}\", x))), Right(String::from(\"Value: 34\")));",
                "    assert_eq!(right.right_and_then(|x| Right(format!(\"Result: {}\", x * 2))), Right(String::from(\"Result: 68\")));",
                "    assert_eq!(right.right_and_then(|x| Right(x.to_string())), Right(String::from(\"34\")));",
                "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(44));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, &str> = Right(34);",
                "    right.right_and_then(|x| Right(format!(\"Value: {}\", x)));",
                "    assert_eq!(right.right_and_then(|x| Right(format!(\"Value: {}\", x))), Right(String::from(\"Value: 34\")));",
                "    assert_eq!(right.right_and_then(|x| Right(format!(\"Result: {}\", x * 2))), Right(String::from(\"Result: 68\")));",
                "    assert_eq!(right.right_and_then(|x| Right(x.to_string())), Right(String::from(\"34\")));",
                "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(44));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 501 is true\n",
        "precondition: self matches Left(l) at line 501 is true\n",
        "expected return value/type: Left(l)\n"
      ],
      "input_infer": "self should be an instance of Either<L, R> with Left(l) variant, where l can be of any type L.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, u32> = Left(123);",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(123));"
              ],
              "code": [
                "{",
                "    let left: Either<i32, u32> = Left(123);",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "    assert_eq!(result, Left(123));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, u32> = Left(\"error\");",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"error\"));"
              ],
              "code": [
                "{",
                "    let left: Either<&str, u32> = Left(\"error\");",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "    assert_eq!(result, Left(\"error\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<f64, u32> = Left(45.67);",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(45.67));"
              ],
              "code": [
                "{",
                "    let left: Either<f64, u32> = Left(45.67);",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "    assert_eq!(result, Left(45.67));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<(), u32> = Left(());",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(()));"
              ],
              "code": [
                "{",
                "    let left: Either<(), u32> = Left(());",
                "    let result = left.right_and_then(|x| Right(x * 2));",
                "    assert_eq!(result, Left(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}