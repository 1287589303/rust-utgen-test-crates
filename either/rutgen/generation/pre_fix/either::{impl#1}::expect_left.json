{
  "name": "either::{impl#1}::expect_left",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:870:5:878:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(r) at line 874 is true\n"
      ],
      "input_infer": "self should be an instance of Either::Right with any type R, and a corresponding panic message string of length between 1 and 255 characters.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic(expected = \"value was Right: 3\")]"
              ],
              "prefix": [
                "{",
                "    let right: Either<i32, ()> = Right(3);",
                "    right.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Right(3).expect_left(\"value was Right\"), panic!(\"value was Right: 3\"));"
              ],
              "code": [
                "{",
                "    let right: Either<i32, ()> = Right(3);",
                "    right.expect_left(\"value was Right\");",
                "    assert_eq!(Right(3).expect_left(\"value was Right\"), panic!(\"value was Right: 3\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"message: \\\"panic\\\"\")]"
              ],
              "prefix": [
                "{",
                "    let right: Either<(), ()> = Right(4);",
                "    right.expect_left(\"panic\");",
                "}"
              ],
              "oracle": [
                "    #[should_panic(expected = \"panic: {:?}\", 4)]",
                "    #[test]",
                "    fn test_expect_left_panics_on_right() {",
                "    let right: Either<(), ()> = Right(4);",
                "    right.expect_left(\"panic\");",
                "    }"
              ],
              "code": [
                "{",
                "    let right: Either<(), ()> = Right(4);",
                "    right.expect_left(\"panic\");",
                "    #[should_panic(expected = \"panic: {:?}\", 4)]",
                "    #[test]",
                "    fn test_expect_left_panics_on_right() {",
                "    let right: Either<(), ()> = Right(4);",
                "    right.expect_left(\"panic\");",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"error message: \\\"this is a panic message\\\"\")]"
              ],
              "prefix": [
                "{",
                "    let right: Either<(), ()> = Right(5);",
                "    right.expect_left(\"error message: this is a panic message\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.expect_left(\"error message: this is a panic message\"), panic!(\"{}: {:?}\", \"error message: this is a panic message\", 5));"
              ],
              "code": [
                "{",
                "    let right: Either<(), ()> = Right(5);",
                "    right.expect_left(\"error message: this is a panic message\");",
                "    assert_eq!(right.expect_left(\"error message: this is a panic message\"), panic!(\"{}: {:?}\", \"error message: this is a panic message\", 5));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic(expected = \"unexpected result: 100\")]"
              ],
              "prefix": [
                "{",
                "    let right: Either<(), ()> = Right(100);",
                "    right.expect_left(\"unexpected result\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.expect_left(\"unexpected result\"), panic!(\"unexpected result: {:?}\", 100));"
              ],
              "code": [
                "{",
                "    let right: Either<(), ()> = Right(100);",
                "    right.expect_left(\"unexpected result\");",
                "    assert_eq!(right.expect_left(\"unexpected result\"), panic!(\"unexpected result: {:?}\", 100));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(l) at line 874 is true\n",
        "precondition: self matches Either::Left(l) at line 874 is true\n",
        "expected return value/type: l\n"
      ],
      "input_infer": "self should be an instance of Either with a valid Left value of type L, where R is any type that implements core::fmt::Debug; specifically test with various primitive types, structs implementing fmt::Debug, and empty types to check for typical and edge scenarios.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, ()> = Left(42);",
                "    let _result = left.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    panic::catch_unwind(|| { Right(3).expect_left(\"value was Right\"); }).is_err();",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(matches!(Right(3).expect_left(\"value was Right\"), Either::Right(_)));"
              ],
              "code": [
                "{",
                "    let left: Either<i32, ()> = Left(42);",
                "    let _result = left.expect_left(\"value was Right\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    panic::catch_unwind(|| { Right(3).expect_left(\"value was Right\"); }).is_err();",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(matches!(Right(3).expect_left(\"value was Right\"), Either::Right(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, ()> = Left(\"Hello\");",
                "    let _result = left.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.expect_left(\"value was Right\"), \"Hello\");",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    let left: Either<(i32, i32), ()> = Left((5, 10));",
                "    assert_eq!(left.expect_left(\"value was Right\"), (5, 10));",
                "    let left: Either<Vec<i32>, ()> = Left(vec![1, 2, 3]);",
                "    assert_eq!(left.expect_left(\"value was Right\"), vec![1, 2, 3]);",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
                "    let left: Either<String, ()> = Left(String::from(\"Test\"));",
                "    assert_eq!(left.expect_left(\"value was Right\"), \"Test\");"
              ],
              "code": [
                "{",
                "    let left: Either<&str, ()> = Left(\"Hello\");",
                "    let _result = left.expect_left(\"value was Right\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), \"Hello\");",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    let left: Either<(i32, i32), ()> = Left((5, 10));",
                "    assert_eq!(left.expect_left(\"value was Right\"), (5, 10));",
                "    let left: Either<Vec<i32>, ()> = Left(vec![1, 2, 3]);",
                "    assert_eq!(left.expect_left(\"value was Right\"), vec![1, 2, 3]);",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
                "    let left: Either<String, ()> = Left(String::from(\"Test\"));",
                "    assert_eq!(left.expect_left(\"value was Right\"), \"Test\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    let _result = left.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);"
              ],
              "code": [
                "{",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    let _result = left.expect_left(\"value was Right\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "    let left: Either<MyStruct, ()> = Left(MyStruct { value: 10 });",
                "    let _result = left.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.expect_left(\"value was Right\"), MyStruct { value: 10 });",
                "    let left_value = left.expect_left(\"value was Right\");",
                "    assert_eq!(left_value.value, 10);"
              ],
              "code": [
                "{",
                "    #[derive(Debug)]",
                "    struct MyStruct {",
                "        value: i32,",
                "    }",
                "    let left: Either<MyStruct, ()> = Left(MyStruct { value: 10 });",
                "    let _result = left.expect_left(\"value was Right\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), MyStruct { value: 10 });",
                "    let left_value = left.expect_left(\"value was Right\");",
                "    assert_eq!(left_value.value, 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<(), ()> = Left(());",
                "    let _result = left.expect_left(\"value was Right\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.expect_left(\"value was Right\"), ());",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    let left: Either<&str, ()> = Left(\"test\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), \"test\");",
                "    let right: Either<(), i32> = Right(3);",
                "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
                "    assert!(panic_message.is_err());",
                "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));",
                "    let right: Either<&str, i32> = Right(5);",
                "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
                "    assert!(panic_message.is_err());",
                "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 5\".to_string()));"
              ],
              "code": [
                "{",
                "    let left: Either<(), ()> = Left(());",
                "    let _result = left.expect_left(\"value was Right\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), ());",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
                "    let left: Either<&str, ()> = Left(\"test\");",
                "    assert_eq!(left.expect_left(\"value was Right\"), \"test\");",
                "    let right: Either<(), i32> = Right(3);",
                "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
                "    assert!(panic_message.is_err());",
                "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));",
                "    let right: Either<&str, i32> = Right(5);",
                "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
                "    assert!(panic_message.is_err());",
                "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 5\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}