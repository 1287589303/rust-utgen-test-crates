{
  "name": "either::{impl#1}::right_or_default",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:759:5:767:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(r) at line 763 is true\n",
        "expected return value/type: r\n"
      ],
      "input_infer": "Input type: Either<L, R> where R can be any type implementing Default, and it must be passed as Right(r), covering edge case with both non-empty and empty default implementations.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, u32> = Right(42);",
                "    let result = right.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 42);"
              ],
              "code": [
                "{",
                "    let right: Either<String, u32> = Right(42);",
                "    let result = right.right_or_default();",
                "    assert_eq!(result, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, String> = Right(\"right value\".to_string());",
                "    let result = right.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"right value\".to_string());"
              ],
              "code": [
                "{",
                "    let right: Either<String, String> = Right(\"right value\".to_string());",
                "    let result = right.right_or_default();",
                "    assert_eq!(result, \"right value\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(_) at line 763 is true\n",
        "precondition: self matches Either::Left(_) at line 763 is true\n"
      ],
      "input_infer": "self must be an instance of Either::Left with any value for L to ensure R's default is returned, while the left type L can be any type, and R must implement Default.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, u32> = Left(\"left\".to_string());",
                "    let result = left.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, u32::default());",
                "    assert_eq!(result, 0);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());"
              ],
              "code": [
                "{",
                "    let left: Either<String, u32> = Left(\"left\".to_string());",
                "    let result = left.right_or_default();",
                "    assert_eq!(result, u32::default());",
                "    assert_eq!(result, 0);",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, u32> = Left(\"\".to_string());",
                "    let result = left.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, u32::default());"
              ],
              "code": [
                "{",
                "    let left: Either<String, u32> = Left(\"\".to_string());",
                "    let result = left.right_or_default();",
                "    assert_eq!(result, u32::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, u32> = Left(\"zero length\".to_string());",
                "    let result = left.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, u32::default());"
              ],
              "code": [
                "{",
                "    let left: Either<String, u32> = Left(\"zero length\".to_string());",
                "    let result = left.right_or_default();",
                "    assert_eq!(result, u32::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, u32> = Left(\"123\".to_string());",
                "    let result = left.right_or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert_eq!(left.right_or_default(), u32::default());",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert_ne!(left.right_or_default(), 42);",
                "    assert_eq!(result, u32::default());"
              ],
              "code": [
                "{",
                "    let left: Either<String, u32> = Left(\"123\".to_string());",
                "    let result = left.right_or_default();",
                "    assert_eq!(result, 0);",
                "    assert_eq!(left.right_or_default(), u32::default());",
                "    assert!(matches!(left, Either::Left(_)));",
                "    assert_ne!(left.right_or_default(), 42);",
                "    assert_eq!(result, u32::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}