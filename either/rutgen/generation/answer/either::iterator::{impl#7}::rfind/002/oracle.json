[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![1, 2, 3, 4, 5], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 3), Some(3));",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 6), None);",
          "    iter_either_mut.index = 5;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x < 1), None);",
          "    iter_either_mut.index = 0;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x > 0), Some(5));",
          "    iter_either_mut.index = 1;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x % 2 == 0), Some(4));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![1, 2, 3, 4, 5], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 3);",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 3), Some(3));",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 6), None);",
          "    iter_either_mut.index = 5;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x < 1), None);",
          "    iter_either_mut.index = 0;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x > 0), Some(5));",
          "    iter_either_mut.index = 1;",
          "    assert_eq!(iter_either_mut.rfind(|&x| x % 2 == 0), Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![1, 2, 3, 4, 5], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 6), None);",
          "    iter_either_mut.index = 5;",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![1, 2, 3, 4, 5], index: 5 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 4), Some(4));",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 2), Some(2));",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![2, 4, 6], index: 0 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x % 2 == 0), Some(6));",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![1, 3, 5], index: 0 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), Some(1));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![1, 2, 3, 4, 5], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 6);",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 6), None);",
          "    iter_either_mut.index = 5;",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![1, 2, 3, 4, 5], index: 5 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 4), Some(4));",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 2), Some(2));",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![2, 4, 6], index: 0 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x % 2 == 0), Some(6));",
          "    iter_either_mut.inner = Either::Left(TestIterator { items: vec![1, 3, 5], index: 0 });",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), None);",
          "    let iter = TestIterator { items: vec![1, 2, 3], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 2), Some(2));",
          "    let iter = TestIterator { items: vec![4, 5, 1], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), Some(1));",
          "    let iter = TestIterator { items: vec![6, 7, 8], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x > 10), None);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            while self.index > 0 {",
          "                self.index -= 1;",
          "                if predicate(&self.items[self.index]) {",
          "                    return Some(self.items[self.index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { items: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "",
          "    iter_either_mut.rfind(|&x| x == 1);",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), None);",
          "    let iter = TestIterator { items: vec![1, 2, 3], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 2), Some(2));",
          "    let iter = TestIterator { items: vec![4, 5, 1], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x == 1), Some(1));",
          "    let iter = TestIterator { items: vec![6, 7, 8], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(iter) };",
          "    let mut iter_either_mut = iter_either.clone();",
          "    assert_eq!(iter_either_mut.rfind(|&x| x > 10), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]