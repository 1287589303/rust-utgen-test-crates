[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        current: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < 10 {",
          "                let value = self.current;",
          "                self.current += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current > 0 {",
          "                self.current -= 1;",
          "                Some(self.current)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut right_inner = TestIterator { current: 0 };",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(found_item, Some(8));",
          "    assert_eq!(iter.next_back(), Some(9));",
          "    assert_eq!(iter.next_back(), Some(7));",
          "    assert_eq!(iter.rfind(|&item| item % 3 == 0), Some(6));",
          "    assert_eq!(iter.next_back(), Some(6));",
          "    assert_eq!(iter.next_back(), Some(5));",
          "    assert_eq!(iter.rfind(|&item| item > 7), Some(8));",
          "    assert_eq!(iter.next(), Some(0));",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.rfind(|&item| item < 4), Some(2));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        current: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < 10 {",
          "                let value = self.current;",
          "                self.current += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current > 0 {",
          "                self.current -= 1;",
          "                Some(self.current)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let mut right_inner = TestIterator { current: 0 };",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, Some(8));",
          "    assert_eq!(iter.next_back(), Some(9));",
          "    assert_eq!(iter.next_back(), Some(7));",
          "    assert_eq!(iter.rfind(|&item| item % 3 == 0), Some(6));",
          "    assert_eq!(iter.next_back(), Some(6));",
          "    assert_eq!(iter.next_back(), Some(5));",
          "    assert_eq!(iter.rfind(|&item| item > 7), Some(8));",
          "    assert_eq!(iter.next(), Some(0));",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.rfind(|&item| item < 4), Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIterator;",
          "",
          "    impl Iterator for EmptyIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for EmptyIterator {}",
          "",
          "    let mut right_inner = EmptyIterator;",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(found_item, None);",
          "    let mut right_inner = vec![2, 4, 6].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, Some(6));",
          "    let mut right_inner = vec![1, 3, 5].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, None);",
          "    let mut right_inner = vec![2, 3, 4, 5].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, Some(4));"
        ],
        "code": [
          "{",
          "    struct EmptyIterator;",
          "",
          "    impl Iterator for EmptyIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for EmptyIterator {}",
          "",
          "    let mut right_inner = EmptyIterator;",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, None);",
          "    let mut right_inner = vec![2, 4, 6].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, Some(6));",
          "    let mut right_inner = vec![1, 3, 5].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, None);",
          "    let mut right_inner = vec![2, 3, 4, 5].into_iter().rev();",
          "    let mut iter = IterEither { inner: Either::Right(right_inner) };",
          "    let found_item = iter.rfind(|&item| item % 2 == 0);",
          "    assert_eq!(found_item, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementIterator {",
          "        value: usize,",
          "        has_value: bool,",
          "    }",
          "",
          "    impl Iterator for SingleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.has_value {",
          "                self.has_value = false;",
          "                Some(self.value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for SingleElementIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            self.next()",
          "        }",
          "    }",
          "",
          "    let mut right_inner = SingleElementIterator {",
          "        value: 42,",
          "        has_value: true,",
          "    };",
          "    ",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item == 42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(found_item, Some(42));",
          "    assert_eq!(iter.inner, Either::Right(SingleElementIterator { value: 42, has_value: false }));",
          "    assert!(iter.rfind(|&item| item == 42).is_none());",
          "    assert!(iter.rfind(|&item| item > 100).is_none());",
          "    assert!(iter.rfind(|&item| item < 0).is_none());"
        ],
        "code": [
          "{",
          "    struct SingleElementIterator {",
          "        value: usize,",
          "        has_value: bool,",
          "    }",
          "",
          "    impl Iterator for SingleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.has_value {",
          "                self.has_value = false;",
          "                Some(self.value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for SingleElementIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            self.next()",
          "        }",
          "    }",
          "",
          "    let mut right_inner = SingleElementIterator {",
          "        value: 42,",
          "        has_value: true,",
          "    };",
          "    ",
          "    let mut iter = IterEither {",
          "        inner: Either::Right(right_inner),",
          "    };",
          "",
          "    let found_item = iter.rfind(|&item| item == 42);",
          "    assert_eq!(found_item, Some(42));",
          "    assert_eq!(iter.inner, Either::Right(SingleElementIterator { value: 42, has_value: false }));",
          "    assert!(iter.rfind(|&item| item == 42).is_none());",
          "    assert!(iter.rfind(|&item| item > 100).is_none());",
          "    assert!(iter.rfind(|&item| item < 0).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]