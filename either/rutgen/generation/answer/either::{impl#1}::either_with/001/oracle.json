[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ctx = 5; // context of type i32",
          "    let value = Right(2.7); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.either_with(ctx, |_, integer| integer, |_, real| f64::round(real) as i32), 3);"
        ],
        "code": [
          "{",
          "    let ctx = 5; // context of type i32",
          "    let value = Right(2.7); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "    assert_eq!(value.either_with(ctx, |_, integer| integer, |_, real| f64::round(real) as i32), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let ctx = String::from(\"context\"); // context of type String",
          "    let value = Right(3.3); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.is_right(), true);",
          "    assert_eq!(value.right().unwrap(), 3.3);",
          "    assert_eq!(value.either_with(ctx.clone(), |_, _| 0, |ctx, real| f64::round(real) as i32), 3);",
          "    assert!(value.either_with(ctx.clone(), |_, _| 0, |ctx, real| {",
          "    let rounded = f64::round(real) as i32;",
          "    rounded == 3",
          "    }));"
        ],
        "code": [
          "{",
          "    let ctx = String::from(\"context\"); // context of type String",
          "    let value = Right(3.3); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "    assert_eq!(value.is_right(), true);",
          "    assert_eq!(value.right().unwrap(), 3.3);",
          "    assert_eq!(value.either_with(ctx.clone(), |_, _| 0, |ctx, real| f64::round(real) as i32), 3);",
          "    assert!(value.either_with(ctx.clone(), |_, _| 0, |ctx, real| {",
          "    let rounded = f64::round(real) as i32;",
          "    rounded == 3",
          "    }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Context {",
          "        data: i32,",
          "    }",
          "",
          "    let ctx = Context { data: 10 }; // context of a custom struct",
          "    let value = Right(4.9); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.either_with(ctx,",
          "    |_, _| unreachable!(),",
          "    |context, real| f64::round(real) as i32),",
          "    5);"
        ],
        "code": [
          "{",
          "    struct Context {",
          "        data: i32,",
          "    }",
          "",
          "    let ctx = Context { data: 10 }; // context of a custom struct",
          "    let value = Right(4.9); // example Right value of type f64",
          "",
          "    value.either_with(ctx, ",
          "                      |context, integer| {",
          "                          // Implementation for integer (not invoked in this test)",
          "                      }, ",
          "                      |context, real| {",
          "                          // Handling the Right case",
          "                          let rounded = f64::round(real) as i32;",
          "                          // potentially do something with rounded value",
          "                      });",
          "    assert_eq!(value.either_with(ctx,",
          "    |_, _| unreachable!(),",
          "    |context, real| f64::round(real) as i32),",
          "    5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]