[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestContext {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    let mut context = TestContext { values: Vec::new() };",
          "    let left_value = Either::Left(5);",
          "    ",
          "    left_value.either_with(&mut context,",
          "        |ctx, integer| ctx.values.push(integer),",
          "        |_, _| panic!(\"Should not call the right handler\"),",
          "    );",
          "",
          "    // The context should contain 5",
          "    let expected = vec![5];",
          "    assert_eq!(context.values, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(context.values, vec![5]);",
          "    assert!(context.values.len() == 1);",
          "    assert!(context.values[0] == 5);",
          "    assert!(context.values.contains(&5));",
          "    assert!(context.values != vec![0]);",
          "    assert!(context.values.is_empty() == false);"
        ],
        "code": [
          "{",
          "    struct TestContext {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    let mut context = TestContext { values: Vec::new() };",
          "    let left_value = Either::Left(5);",
          "    ",
          "    left_value.either_with(&mut context,",
          "        |ctx, integer| ctx.values.push(integer),",
          "        |_, _| panic!(\"Should not call the right handler\"),",
          "    );",
          "",
          "    // The context should contain 5",
          "    let expected = vec![5];",
          "    assert_eq!(context.values, expected);",
          "    assert_eq!(context.values, vec![5]);",
          "    assert!(context.values.len() == 1);",
          "    assert!(context.values[0] == 5);",
          "    assert!(context.values.contains(&5));",
          "    assert!(context.values != vec![0]);",
          "    assert!(context.values.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestContext {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    let mut context = TestContext { values: Vec::new() };",
          "    let right_value = Either::Right(2.9);",
          "    ",
          "    right_value.either_with(&mut context,",
          "        |_, _| panic!(\"Should not call the left handler\"),",
          "        |ctx, real| ctx.values.push(f64::round(real) as i32),",
          "    );",
          "",
          "    // The context should contain 3",
          "    let expected = vec![3];",
          "    assert_eq!(context.values, expected);",
          "}"
        ],
        "oracle": [
          "    assert!(right_value.is_right());",
          "    assert!(context.values.len() == 1);",
          "    assert_eq!(context.values[0], 3);"
        ],
        "code": [
          "{",
          "    struct TestContext {",
          "        values: Vec<i32>,",
          "    }",
          "",
          "    let mut context = TestContext { values: Vec::new() };",
          "    let right_value = Either::Right(2.9);",
          "    ",
          "    right_value.either_with(&mut context,",
          "        |_, _| panic!(\"Should not call the left handler\"),",
          "        |ctx, real| ctx.values.push(f64::round(real) as i32),",
          "    );",
          "",
          "    // The context should contain 3",
          "    let expected = vec![3];",
          "    assert_eq!(context.values, expected);",
          "    assert!(right_value.is_right());",
          "    assert!(context.values.len() == 1);",
          "    assert_eq!(context.values[0], 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]