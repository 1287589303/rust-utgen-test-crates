[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<u32, String>, _> = Right(Err(String::from(\"error\")));",
          "    let _ = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_ok(), Err(Right(String::from(\"error\"))));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<u32, String>, _> = Right(Err(String::from(\"error\")));",
          "    let _ = right.factor_ok();",
          "    assert_eq!(right.factor_ok(), Err(Right(String::from(\"error\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<u32, Vec<u8>>, _> = Right(Err(vec![1, 2, 3]));",
          "    let _ = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_ok(), Err(Right(vec![1, 2, 3])));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<u32, Vec<u8>>, _> = Right(Err(vec![1, 2, 3]));",
          "    let _ = right.factor_ok();",
          "    assert_eq!(right.factor_ok(), Err(Right(vec![1, 2, 3])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomError;",
          "    let right: Either<Result<u32, CustomError>, _> = Right(Err(CustomError));",
          "    let _ = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(right.factor_ok(), Err(Right(CustomError))));"
        ],
        "code": [
          "{",
          "    struct CustomError;",
          "    let right: Either<Result<u32, CustomError>, _> = Right(Err(CustomError));",
          "    let _ = right.factor_ok();",
          "    assert!(matches!(right.factor_ok(), Err(Right(CustomError))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<u32, String>, _> = Right(Err(String::new()));",
          "    let _ = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_ok(), Err(Right(String::new())));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<u32, String>, _> = Right(Err(String::new()));",
          "    let _ = right.factor_ok();",
          "    assert_eq!(right.factor_ok(), Err(Right(String::new())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]