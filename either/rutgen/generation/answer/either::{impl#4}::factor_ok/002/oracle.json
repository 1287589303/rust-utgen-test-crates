[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, Result<u32, String>> = Left(Ok(42));",
          "    let result = left.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(42));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, Result<u32, String>> = Left(Ok(42));",
          "    let result = left.factor_ok();",
          "    assert_eq!(result, Ok(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, Result<u32, String>> = Left(Err(\"error\".to_string()));",
          "    let result = left.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Left(\"error\".to_string())));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, Result<u32, String>> = Left(Err(\"error\".to_string()));",
          "    let result = left.factor_ok();",
          "    assert_eq!(result, Err(Left(\"error\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<u32, i32>, String> = Right(Ok(42));",
          "    let result = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(42));",
          "    let left: Either<Result<u32, String>, i32> = Left(Err(\"Error\".to_string()));",
          "    assert_eq!(left.factor_ok(), Err(Left(\"Error\".to_string())));",
          "    let left_err: Either<Result<u32, String>, i32> = Left(Err(5));",
          "    assert_eq!(left_err.factor_ok(), Err(Left(5)));",
          "    let right_err: Either<Result<u32, Vec<u8>>, String> = Right(Err(String::from(\"Failed\")));",
          "    assert_eq!(right_err.factor_ok(), Err(Right(String::from(\"Failed\"))));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<u32, i32>, String> = Right(Ok(42));",
          "    let result = right.factor_ok();",
          "    assert_eq!(result, Ok(42));",
          "    let left: Either<Result<u32, String>, i32> = Left(Err(\"Error\".to_string()));",
          "    assert_eq!(left.factor_ok(), Err(Left(\"Error\".to_string())));",
          "    let left_err: Either<Result<u32, String>, i32> = Left(Err(5));",
          "    assert_eq!(left_err.factor_ok(), Err(Left(5)));",
          "    let right_err: Either<Result<u32, Vec<u8>>, String> = Right(Err(String::from(\"Failed\")));",
          "    assert_eq!(right_err.factor_ok(), Err(Right(String::from(\"Failed\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<u32, i32>, String> = Right(Err(\"error\".to_string()));",
          "    let result = right.factor_ok();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(Right(\"error\".to_string())));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<u32, i32>, String> = Right(Err(\"error\".to_string()));",
          "    let result = right.factor_ok();",
          "    assert_eq!(result, Err(Right(\"error\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]