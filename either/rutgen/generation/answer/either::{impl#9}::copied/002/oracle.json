[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left_value: i32 = 42;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(42));"
        ],
        "code": [
          "{",
          "    let mut left_value: i32 = 42;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_value: i32 = 99;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    let mut right_value: i32 = 99;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(99));",
          "    let mut left_value: i32 = 42;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(42));",
          "    let mut left_value: i32 = 0;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_matches!(result, Either::Left(0));",
          "    let mut right_value: i32 = -1;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_matches!(result, Either::Right(-1));",
          "    let mut left_value: i32 = 100;",
          "    let mut right_value: i32 = 200;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(100));",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(200));"
        ],
        "code": [
          "{",
          "    let mut right_value: i32 = 99;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    let mut right_value: i32 = 99;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(99));",
          "    let mut left_value: i32 = 42;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(42));",
          "    let mut left_value: i32 = 0;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_matches!(result, Either::Left(0));",
          "    let mut right_value: i32 = -1;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_matches!(result, Either::Right(-1));",
          "    let mut left_value: i32 = 100;",
          "    let mut right_value: i32 = 200;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(100));",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(200));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left_value: i32 = 0;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(0));"
        ],
        "code": [
          "{",
          "    let mut left_value: i32 = 0;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_value: i32 = 0;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(0));",
          "    let mut left_value: i32 = 5;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(5));",
          "    let mut left_value: i32 = 10;",
          "    let mut right_value: i32 = 20;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(10));",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(20));",
          "    let mut left_value: u32 = 15;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<u32, u32> = either.copied();",
          "    assert_eq!(result, Either::Left(15));"
        ],
        "code": [
          "{",
          "    let mut right_value: i32 = 0;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(0));",
          "    let mut left_value: i32 = 5;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(5));",
          "    let mut left_value: i32 = 10;",
          "    let mut right_value: i32 = 20;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(10));",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(20));",
          "    let mut left_value: u32 = 15;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<u32, u32> = either.copied();",
          "    assert_eq!(result, Either::Left(15));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left_value: i32 = -1;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(-1));"
        ],
        "code": [
          "{",
          "    let mut left_value: i32 = -1;",
          "    let either = Either::Left(&mut left_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Left(-1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_value: i32 = -1;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(-1));",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<Either<i32, i32>>());",
          "    assert!(matches!(either, Either::Right(value) if *value == -1));",
          "    assert!(matches!(result, Either::Right(value) if value == -1));",
          "    assert_eq!(result.copied(), Either::Right(-1));",
          "    assert_eq!(result.copied(), Either::Right(*right_value));"
        ],
        "code": [
          "{",
          "    let mut right_value: i32 = -1;",
          "    let either = Either::Right(&mut right_value);",
          "    let result: Either<i32, i32> = either.copied();",
          "    assert_eq!(result, Either::Right(-1));",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert_eq!(std::mem::size_of_val(&result), std::mem::size_of::<Either<i32, i32>>());",
          "    assert!(matches!(either, Either::Right(value) if *value == -1));",
          "    assert!(matches!(result, Either::Right(value) if value == -1));",
          "    assert_eq!(result.copied(), Either::Right(-1));",
          "    assert_eq!(result.copied(), Either::Right(*right_value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]