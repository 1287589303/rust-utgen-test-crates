[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val = 42;",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(42));"
        ],
        "code": [
          "{",
          "    let mut right_val = 42;",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val = 3.14;",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(3.14));"
        ],
        "code": [
          "{",
          "    let mut right_val = 3.14;",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val = 'A';",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right('A'));"
        ],
        "code": [
          "{",
          "    let mut right_val = 'A';",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right('A'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val: Vec<i32> = Vec::new();",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(Vec::new()));"
        ],
        "code": [
          "{",
          "    let mut right_val: Vec<i32> = Vec::new();",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right(Vec::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val: Vec<i32> = (0..1000).collect();",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(right_val.clone()));"
        ],
        "code": [
          "{",
          "    let mut right_val: Vec<i32> = (0..1000).collect();",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right(right_val.clone()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val = [5];",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(5));"
        ],
        "code": [
          "{",
          "    let mut right_val = [5];",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right_val = [1, 2, 3];",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right([1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let mut right_val = [1, 2, 3];",
          "    let either_instance = Either::Right(&mut right_val);",
          "    let result = either_instance.copied();",
          "    assert_eq!(result, Either::Right([1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]