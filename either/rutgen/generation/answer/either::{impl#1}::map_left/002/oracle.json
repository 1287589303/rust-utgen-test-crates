[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, u32> = Left(123);",
          "    let result = left.map_left(|x| x * 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(246));",
          "    assert!(matches!(result, Left(_)));",
          "    assert!(!matches!(result, Right(_)));",
          "    assert_eq!(result.as_ref(), Left(&246));",
          "    assert_eq!(result.left(), Some(246));",
          "    assert_eq!(result.right(), None);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, u32> = Left(123);",
          "    let result = left.map_left(|x| x * 2);",
          "    assert_eq!(result, Left(246));",
          "    assert!(matches!(result, Left(_)));",
          "    assert!(!matches!(result, Right(_)));",
          "    assert_eq!(result.as_ref(), Left(&246));",
          "    assert_eq!(result.left(), Some(246));",
          "    assert_eq!(result.right(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, u32> = Left(-50);",
          "    let result = left.map_left(|x| x * 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(-150));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, u32> = Left(-50);",
          "    let result = left.map_left(|x| x * 3);",
          "    assert_eq!(result, Left(-150));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, u32> = Left(0);",
          "    let result = left.map_left(|x| x + 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(1));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, u32> = Left(0);",
          "    let result = left.map_left(|x| x + 1);",
          "    assert_eq!(result, Left(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<&str, u32> = Left(\"Hello\");",
          "    let result = left.map_left(|x| format!(\"{} World\", x));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"Hello World\"));"
        ],
        "code": [
          "{",
          "    let left: Either<&str, u32> = Left(\"Hello\");",
          "    let result = left.map_left(|x| format!(\"{} World\", x));",
          "    assert_eq!(result, Left(\"Hello World\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f32, u32> = Left(3.14);",
          "    let result = left.map_left(|x| x * 2.0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(6.28));"
        ],
        "code": [
          "{",
          "    let left: Either<f32, u32> = Left(3.14);",
          "    let result = left.map_left(|x| x * 2.0);",
          "    assert_eq!(result, Left(6.28));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]