[
  {
    "uses": [
      "use std::pin::Pin;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::pin::Pin;",
          "",
          "    struct RightTestStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut right_value = RightTestStruct { value: 42 };",
          "    let mut either_instance = Either::Right(right_value);",
          "    ",
          "    let mut pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.as_pin_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Right(Pin::new_unchecked(&mut RightTestStruct { value: 42 })));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert!(matches!(result, Either::Right(pin_val) if pin_val.value == 42));",
          "    assert!(matches!(result, Either::Right(inner) if inner.value == 42));",
          "    assert!(matches!(result, Either::Right(inner) if Pin::get_mut(inner).value == 42));"
        ],
        "code": [
          "{",
          "    use std::pin::Pin;",
          "",
          "    struct RightTestStruct {",
          "        value: i32,",
          "    }",
          "    ",
          "    let mut right_value = RightTestStruct { value: 42 };",
          "    let mut either_instance = Either::Right(right_value);",
          "    ",
          "    let mut pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.as_pin_mut();",
          "    assert_eq!(result, Either::Right(Pin::new_unchecked(&mut RightTestStruct { value: 42 })));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert!(matches!(result, Either::Right(pin_val) if pin_val.value == 42));",
          "    assert!(matches!(result, Either::Right(inner) if inner.value == 42));",
          "    assert!(matches!(result, Either::Right(inner) if Pin::get_mut(inner).value == 42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::pin::Pin;",
          "",
          "    struct AnotherRightTestStruct {",
          "        value: String,",
          "    }",
          "    ",
          "    let mut right_value = AnotherRightTestStruct { value: String::from(\"Test\") };",
          "    let mut either_instance = Either::Right(right_value);",
          "    ",
          "    let mut pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.as_pin_mut();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_right(), true);",
          "    assert_eq!(result.right().unwrap().value, \"Test\");",
          "    assert!(result.left().is_none());"
        ],
        "code": [
          "{",
          "    use std::pin::Pin;",
          "",
          "    struct AnotherRightTestStruct {",
          "        value: String,",
          "    }",
          "    ",
          "    let mut right_value = AnotherRightTestStruct { value: String::from(\"Test\") };",
          "    let mut either_instance = Either::Right(right_value);",
          "    ",
          "    let mut pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.as_pin_mut();",
          "    assert_eq!(result.is_right(), true);",
          "    assert_eq!(result.right().unwrap().value, \"Test\");",
          "    assert!(result.left().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]