[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iterator = EmptyIter;",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(count, 0);"
        ],
        "code": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iterator = EmptyIter;",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "    assert_eq!(count, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleElementIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = SingleElementIter { count: 0 };",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(count, 1);"
        ],
        "code": [
          "{",
          "    struct SingleElementIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleElementIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = SingleElementIter { count: 0 };",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "    assert_eq!(count, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultipleElementsIter {",
          "        current: usize,",
          "        end: usize,",
          "    }",
          "",
          "    impl Iterator for MultipleElementsIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < self.end {",
          "                let value = self.current;",
          "                self.current += 1;",
          "                Some(value as i32)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = MultipleElementsIter { current: 0, end: 5 };",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(count, 5);"
        ],
        "code": [
          "{",
          "    struct MultipleElementsIter {",
          "        current: usize,",
          "        end: usize,",
          "    }",
          "",
          "    impl Iterator for MultipleElementsIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.current < self.end {",
          "                let value = self.current;",
          "                self.current += 1;",
          "                Some(value as i32)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = MultipleElementsIter { current: 0, end: 5 };",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "    assert_eq!(count, 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroSizeIter;",
          "",
          "    impl Iterator for ZeroSizeIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iterator = ZeroSizeIter;",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(count, 0);"
        ],
        "code": [
          "{",
          "    struct ZeroSizeIter;",
          "",
          "    impl Iterator for ZeroSizeIter {",
          "        type Item = i32;",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iterator = ZeroSizeIter;",
          "    let either_instance = Either::Left(left_iterator);",
          "    let count = either_instance.count();",
          "    assert_eq!(count, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]