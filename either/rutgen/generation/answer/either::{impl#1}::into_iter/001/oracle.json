[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u32>, Vec<u32>> = Right(vec![1, 2, 3]);",
          "    let _result: Either<std::vec::IntoIter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u32>, Vec<u32>> = Right(vec![1, 2, 3]);",
          "    let _result: Either<std::vec::IntoIter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<[u32; 3], Vec<u32>> = Right([1, 2, 3]);",
          "    let _result: Either<std::array::IntoIter<u32, 3>, std::vec::IntoIter<u32>> = right.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(_result, Right(std::array::IntoIter::new([1, 2, 3])));"
        ],
        "code": [
          "{",
          "    let right: Either<[u32; 3], Vec<u32>> = Right([1, 2, 3]);",
          "    let _result: Either<std::array::IntoIter<u32, 3>, std::vec::IntoIter<u32>> = right.into_iter();",
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(_result, Right(std::array::IntoIter::new([1, 2, 3])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, Vec<u32>> = Right(String::from(\"test\"));",
          "    let _result: Either<std::string::IntoIter, std::vec::IntoIter<u32>> = right.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(format!(\"{:?}\", _result), \"Right([])\");",
          "    assert!(matches!(_result.right(), Some(_)));",
          "    assert!(matches!(_result.left(), None));",
          "    assert!(matches!(_result.as_ref(), Either::Right(_)));",
          "    assert!(matches!(_result.as_mut(), Either::Right(_)));",
          "    assert!(matches!(_result.flip(), Left(\"test\".to_string())));"
        ],
        "code": [
          "{",
          "    let right: Either<String, Vec<u32>> = Right(String::from(\"test\"));",
          "    let _result: Either<std::string::IntoIter, std::vec::IntoIter<u32>> = right.into_iter();",
          "    assert!(matches!(_result, Right(_)));",
          "    assert_eq!(format!(\"{:?}\", _result), \"Right([])\");",
          "    assert!(matches!(_result.right(), Some(_)));",
          "    assert!(matches!(_result.left(), None));",
          "    assert!(matches!(_result.as_ref(), Either::Right(_)));",
          "    assert!(matches!(_result.as_mut(), Either::Right(_)));",
          "    assert!(matches!(_result.flip(), Left(\"test\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<&[u32], Vec<u32>> = Right(&[1, 2, 3]);",
          "    let _result: Either<std::slice::Iter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));"
        ],
        "code": [
          "{",
          "    let right: Either<&[u32], Vec<u32>> = Right(&[1, 2, 3]);",
          "    let _result: Either<std::slice::Iter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
          "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]