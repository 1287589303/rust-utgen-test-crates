[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, Vec<String>> = Left(vec![1, 2, 3, 4, 5]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<String>::IntoIter> = left.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Left(_)));",
          "    assert_eq!(result.left().unwrap().collect::<Vec<u32>>(), vec![1, 2, 3, 4, 5]);",
          "    assert!(result.right().is_none());",
          "    assert_eq!(result, Left(vec![1, 2, 3, 4, 5]).into_iter());"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, Vec<String>> = Left(vec![1, 2, 3, 4, 5]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<String>::IntoIter> = left.into_iter();",
          "    assert!(matches!(result, Left(_)));",
          "    assert_eq!(result.left().unwrap().collect::<Vec<u32>>(), vec![1, 2, 3, 4, 5]);",
          "    assert!(result.right().is_none());",
          "    assert_eq!(result, Left(vec![1, 2, 3, 4, 5]).into_iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<[u32; 5], Vec<String>> = Left([1, 2, 3, 4, 5]);",
          "    let result: Either<impl Iterator<Item = u32>, Vec<String>::IntoIter> = left.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.as_pin_ref(), Left(vec![1, 2, 3, 4, 5].into_iter()));",
          "    assert!(result.is_left());",
          "    assert!(result.left().is_some());",
          "    assert_eq!(result.left().unwrap().collect::<Vec<_>>(), vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(result.right(), None);",
          "    assert!(result.left_or_default().collect::<Vec<_>>() == vec![1, 2, 3, 4, 5]);",
          "    assert!(matches!(result.expect_left(\"msg\"), Left(_)));",
          "    assert_eq!(result.unwrap_left(), vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(result.map_left(|x| x.collect::<Vec<_>>()), Left(vec![1, 2, 3, 4, 5]));",
          "    assert_eq!(result.map_either(|x| x.collect::<Vec<_>>(), |_| unreachable!()), Left(vec![1, 2, 3, 4, 5]));"
        ],
        "code": [
          "{",
          "    let left: Either<[u32; 5], Vec<String>> = Left([1, 2, 3, 4, 5]);",
          "    let result: Either<impl Iterator<Item = u32>, Vec<String>::IntoIter> = left.into_iter();",
          "    assert_eq!(result.as_pin_ref(), Left(vec![1, 2, 3, 4, 5].into_iter()));",
          "    assert!(result.is_left());",
          "    assert!(result.left().is_some());",
          "    assert_eq!(result.left().unwrap().collect::<Vec<_>>(), vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(result.right(), None);",
          "    assert!(result.left_or_default().collect::<Vec<_>>() == vec![1, 2, 3, 4, 5]);",
          "    assert!(matches!(result.expect_left(\"msg\"), Left(_)));",
          "    assert_eq!(result.unwrap_left(), vec![1, 2, 3, 4, 5]);",
          "    assert_eq!(result.map_left(|x| x.collect::<Vec<_>>()), Left(vec![1, 2, 3, 4, 5]));",
          "    assert_eq!(result.map_either(|x| x.collect::<Vec<_>>(), |_| unreachable!()), Left(vec![1, 2, 3, 4, 5]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![10, 20, 30]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_left());",
          "    assert_eq!(result.left(), Some(vec![10, 20, 30].into_iter()));"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![10, 20, 30]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "    assert!(result.is_left());",
          "    assert_eq!(result.left(), Some(vec![10, 20, 30].into_iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(vec![].into_iter()));",
          "    assert!(result.is_left());",
          "    assert!(!result.is_right());",
          "    assert!(result.left().is_some());",
          "    assert!(result.right().is_none());",
          "    assert_eq!(result.as_ref(), Left((&vec![].into_iter(), &vec![])));",
          "    assert_eq!(result.as_mut(), Left((&mut vec![].into_iter(), &mut vec![])));",
          "    assert_eq!(result.unwrap_left(), vec![].into_iter());",
          "    assert_eq!(result.expect_left(\"Expected left value\"), vec![].into_iter());"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "    assert_eq!(result, Left(vec![].into_iter()));",
          "    assert!(result.is_left());",
          "    assert!(!result.is_right());",
          "    assert!(result.left().is_some());",
          "    assert!(result.right().is_none());",
          "    assert_eq!(result.as_ref(), Left((&vec![].into_iter(), &vec![])));",
          "    assert_eq!(result.as_mut(), Left((&mut vec![].into_iter(), &mut vec![])));",
          "    assert_eq!(result.unwrap_left(), vec![].into_iter());",
          "    assert_eq!(result.expect_left(\"Expected left value\"), vec![].into_iter());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![100]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(vec![100].into_iter()));"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![100]);",
          "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
          "    assert_eq!(result, Left(vec![100].into_iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]