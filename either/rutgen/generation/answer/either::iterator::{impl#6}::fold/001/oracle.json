[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CountIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for CountIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = CountIter { count: 0 };",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(0, |acc, item| match item {",
          "        Either::Right(val) => acc + val,",
          "        _ => acc",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 15);",
          "    assert_eq!(iter_either.inner, Either::Right(CountIter { count: 5 }));",
          "    assert_eq!(iter_either.fold(0, |acc, item| acc), 0);",
          "    assert_eq!(iter_either.fold(0, |acc, _| acc + 1), 5);",
          "    assert_eq!(iter_either.fold(0, |acc, item| match item { Either::Right(val) => acc + val, _ => acc }), 15);"
        ],
        "code": [
          "{",
          "    struct CountIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for CountIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = CountIter { count: 0 };",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(0, |acc, item| match item {",
          "        Either::Right(val) => acc + val,",
          "        _ => acc",
          "    });",
          "    assert_eq!(result, 15);",
          "    assert_eq!(iter_either.inner, Either::Right(CountIter { count: 5 }));",
          "    assert_eq!(iter_either.fold(0, |acc, item| acc), 0);",
          "    assert_eq!(iter_either.fold(0, |acc, _| acc + 1), 5);",
          "    assert_eq!(iter_either.fold(0, |acc, item| match item { Either::Right(val) => acc + val, _ => acc }), 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iter = EmptyIter;",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(10, |acc, item| match item {",
          "        Either::Right(_) => acc + 1,",
          "        _ => acc",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 10);"
        ],
        "code": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iter = EmptyIter;",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(10, |acc, item| match item {",
          "        Either::Right(_) => acc + 1,",
          "        _ => acc",
          "    });",
          "    assert_eq!(result, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleItemIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleItemIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = SingleItemIter { count: 0 };",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(10, |acc, item| match item {",
          "        Either::Right(val) => acc + val,",
          "        _ => acc",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 52);",
          "    assert_eq!(iter_either.inner, Either::Right(SingleItemIter { count: 1 }));",
          "    assert_eq!(iter_either.fold(10, |acc, _| acc), 10);",
          "    let empty_iter = SingleItemIter { count: 1 };",
          "    let either_inner_empty = Either::Right(empty_iter);",
          "    let iter_either_empty = IterEither { inner: either_inner_empty };",
          "    assert_eq!(iter_either_empty.fold(10, |acc, _| acc), 10);",
          "    assert_eq!(iter_either_empty.fold(20, |acc, _| acc), 20);",
          "    let result_empty = iter_either_empty.fold(0, |acc, item| match item { Either::Right(val) => acc + val, _ => acc });",
          "    assert_eq!(result_empty, 0);"
        ],
        "code": [
          "{",
          "    struct SingleItemIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleItemIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = SingleItemIter { count: 0 };",
          "    let either_inner = Either::Right(right_iter);",
          "    let iter_either = IterEither { inner: either_inner };",
          "",
          "    let result = iter_either.fold(10, |acc, item| match item {",
          "        Either::Right(val) => acc + val,",
          "        _ => acc",
          "    });",
          "    assert_eq!(result, 52);",
          "    assert_eq!(iter_either.inner, Either::Right(SingleItemIter { count: 1 }));",
          "    assert_eq!(iter_either.fold(10, |acc, _| acc), 10);",
          "    let empty_iter = SingleItemIter { count: 1 };",
          "    let either_inner_empty = Either::Right(empty_iter);",
          "    let iter_either_empty = IterEither { inner: either_inner_empty };",
          "    assert_eq!(iter_either_empty.fold(10, |acc, _| acc), 10);",
          "    assert_eq!(iter_either_empty.fold(20, |acc, _| acc), 20);",
          "    let result_empty = iter_either_empty.fold(0, |acc, item| match item { Either::Right(val) => acc + val, _ => acc });",
          "    assert_eq!(result_empty, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]