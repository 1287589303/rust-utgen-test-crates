[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(i32, f64), (i32, String)> = Left((42, 3.14));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 42);",
          "    assert_eq!(matches!(result.1, Left(_)), true);",
          "    assert_eq!(if let Left(l) = result.1 { l } else { panic!() }, 3.14);"
        ],
        "code": [
          "{",
          "    let input: Either<(i32, f64), (i32, String)> = Left((42, 3.14));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 42);",
          "    assert_eq!(matches!(result.1, Left(_)), true);",
          "    assert_eq!(if let Left(l) = result.1 { l } else { panic!() }, 3.14);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(i32, Vec<u8>), (i32, String)> = Right((42, String::from(\"test\")));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 42);",
          "    assert!(matches!(result.1, Right(_)));"
        ],
        "code": [
          "{",
          "    let input: Either<(i32, Vec<u8>), (i32, String)> = Right((42, String::from(\"test\")));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 42);",
          "    assert!(matches!(result.1, Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(String, bool), (String, Vec<u8>)> = Left((String::from(\"hello\"), true));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, String::from(\"hello\"));",
          "    assert!(matches!(result.1, Left(_)));"
        ],
        "code": [
          "{",
          "    let input: Either<(String, bool), (String, Vec<u8>)> = Left((String::from(\"hello\"), true));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, String::from(\"hello\"));",
          "    assert!(matches!(result.1, Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(f64, Vec<i32>), (f64, String)> = Right((3.14, String::from(\"world\")));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 3.14);",
          "    assert!(matches!(result.1, Right(_)));"
        ],
        "code": [
          "{",
          "    let input: Either<(f64, Vec<i32>), (f64, String)> = Right((3.14, String::from(\"world\")));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 3.14);",
          "    assert!(matches!(result.1, Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(usize, Vec<u8>), (usize, String)> = Left((0, Vec::new()));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 0);",
          "    assert!(matches!(result.1, Left(_)));"
        ],
        "code": [
          "{",
          "    let input: Either<(usize, Vec<u8>), (usize, String)> = Left((0, Vec::new()));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 0);",
          "    assert!(matches!(result.1, Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]