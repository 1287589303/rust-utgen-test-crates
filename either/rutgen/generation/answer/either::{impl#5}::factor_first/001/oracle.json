[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(u32, String), _> = Right((42, String::from(\"Hello\")));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 42);",
          "    assert!(matches!(result.1, Right(_)));"
        ],
        "code": [
          "{",
          "    let input: Either<(u32, String), _> = Right((42, String::from(\"Hello\")));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 42);",
          "    assert!(matches!(result.1, Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(i64, Vec<u8>), _> = Right((100, vec![1, 2, 3]));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 100);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(result.1, Right(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let input: Either<(i64, Vec<u8>), _> = Right((100, vec![1, 2, 3]));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 100);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(result.1, Right(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(usize, Vec<String>), _> = Right((7, vec![String::from(\"Test1\"), String::from(\"Test2\")]));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 7);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(matches!(result.1, Right(ref r) if r == &vec![String::from(\"Test1\"), String::from(\"Test2\")]), true);"
        ],
        "code": [
          "{",
          "    let input: Either<(usize, Vec<String>), _> = Right((7, vec![String::from(\"Test1\"), String::from(\"Test2\")]));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 7);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(matches!(result.1, Right(ref r) if r == &vec![String::from(\"Test1\"), String::from(\"Test2\")]), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<(f32, String), _> = Right((3.14, String::from(\"Pi\")));",
          "    let result = input.factor_first();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, 3.14);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(if let Right(r) = result.1 { r } else { panic!() }, String::from(\"Pi\"));"
        ],
        "code": [
          "{",
          "    let input: Either<(f32, String), _> = Right((3.14, String::from(\"Pi\")));",
          "    let result = input.factor_first();",
          "    assert_eq!(result.0, 3.14);",
          "    assert!(matches!(result.1, Right(_)));",
          "    assert_eq!(if let Right(r) = result.1 { r } else { panic!() }, String::from(\"Pi\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]