[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<i32, &str> = Err(\"error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    let result: Result<i32, &str> = Err(\"error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Either::Left(\"error\"));",
          "    assert!(matches!(either, Either::Left(_)));"
        ],
        "code": [
          "{",
          "    let result: Result<i32, &str> = Err(\"error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    let result: Result<i32, &str> = Err(\"error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Either::Left(\"error\"));",
          "    assert!(matches!(either, Either::Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<i32, &str> = Err(\"zero error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    let result: Result<i32, &str> = Err(\"zero error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Either::Left(\"zero error\"));",
          "    assert!(matches!(either, Either::Left(_)));"
        ],
        "code": [
          "{",
          "    let result: Result<i32, &str> = Err(\"zero error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    let result: Result<i32, &str> = Err(\"zero error\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Either::Left(\"zero error\"));",
          "    assert!(matches!(either, Either::Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<i32, &str> = Err(\"large error message that exceeds normal length\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(either, Either::Left(\"large error message that exceeds normal length\")));"
        ],
        "code": [
          "{",
          "    let result: Result<i32, &str> = Err(\"large error message that exceeds normal length\");",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert!(matches!(either, Either::Left(\"large error message that exceeds normal length\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<u32, &str> = Err(\"type error\");",
          "    let either: Either<&str, u32> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    let result: Result<u32, &str> = Err(\"type error\");",
          "    let either: Either<&str, u32> = Either::from(result);",
          "    assert!(matches!(either, Either::Left(\"type error\")));"
        ],
        "code": [
          "{",
          "    let result: Result<u32, &str> = Err(\"type error\");",
          "    let either: Either<&str, u32> = Either::from(result);",
          "    let result: Result<u32, &str> = Err(\"type error\");",
          "    let either: Either<&str, u32> = Either::from(result);",
          "    assert!(matches!(either, Either::Left(\"type error\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]