[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
          "    let either: Either<&str, String> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
          "    let either: Either<&str, String> = Either::from(result);",
          "    assert_eq!(either, Right(String::from(\"Test String\")));"
        ],
        "code": [
          "{",
          "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
          "    let either: Either<&str, String> = Either::from(result);",
          "    let result: Result<String, &str> = Ok(String::from(\"Test String\"));",
          "    let either: Either<&str, String> = Either::from(result);",
          "    assert_eq!(either, Right(String::from(\"Test String\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<i32, &str> = Ok(42);",
          "    let either: Either<&str, i32> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    let result: Result<i32, &str> = Ok(42);",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Right(42));"
        ],
        "code": [
          "{",
          "    let result: Result<i32, &str> = Ok(42);",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    let result: Result<i32, &str> = Ok(42);",
          "    let either: Either<&str, i32> = Either::from(result);",
          "    assert_eq!(either, Right(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<f64, &str> = Ok(3.14);",
          "    let either: Either<&str, f64> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Right(3.14));"
        ],
        "code": [
          "{",
          "    let result: Result<f64, &str> = Ok(3.14);",
          "    let either: Either<&str, f64> = Either::from(result);",
          "    assert_eq!(either, Right(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<Vec<i32>, &str> = Ok(vec![1, 2, 3]);",
          "    let either: Either<&str, Vec<i32>> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let result: Result<Vec<i32>, &str> = Ok(vec![1, 2, 3]);",
          "    let either: Either<&str, Vec<i32>> = Either::from(result);",
          "    assert_eq!(either, Either::Right(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let result: Result<(i32, i32), &str> = Ok((1, 2));",
          "    let either: Either<&str, (i32, i32)> = Either::from(result);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Right((1, 2)));"
        ],
        "code": [
          "{",
          "    let result: Result<(i32, i32), &str> = Ok((1, 2));",
          "    let either: Either<&str, (i32, i32)> = Either::from(result);",
          "    assert_eq!(either, Right((1, 2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]