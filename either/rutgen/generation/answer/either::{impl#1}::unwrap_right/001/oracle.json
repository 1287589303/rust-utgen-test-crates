[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_unwrap_right_should_panic_on_left() {",
      "    let left: Either<i32, ()> = Left(3);",
      "    let _result = left.unwrap_right();",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), i32> = Right(3);",
          "    let result = right.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.unwrap_right(), 3);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let _result = left.unwrap_right(); // This should panic",
          "    assert!(matches!(left.unwrap_right(), Either::Right(_)), \"Expected Either to be Right\");",
          "    assert!(!left.is_left(), \"Expected Either to not be Left after unwrap_right\");"
        ],
        "code": [
          "{",
          "    let right: Either<(), i32> = Right(3);",
          "    let result = right.unwrap_right();",
          "    assert_eq!(right.unwrap_right(), 3);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let _result = left.unwrap_right(); // This should panic",
          "    assert!(matches!(left.unwrap_right(), Either::Right(_)), \"Expected Either to be Right\");",
          "    assert!(!left.is_left(), \"Expected Either to not be Left after unwrap_right\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"hello\"));",
          "    let result = right.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.unwrap_right(), None);",
          "    let right: Either<(), String> = Right(String::from(\"hello\"));",
          "    assert_eq!(result, String::from(\"hello\"));",
          "    let right: Either<i32, f64> = Right(5.5);",
          "    assert_eq!(right.unwrap_right(), 5.5);",
          "    let right: Either<i32, u32> = Right(10u32);",
          "    assert_eq!(right.unwrap_right(), 10u32);",
          "    #[should_panic] left: Either<i32, f64> = Left(3);",
          "    left.expect_right(\"Expected Right value, found Left\");",
          "    assert_eq!(left.unwrap_right(), Err(\"panic\"));",
          "    let right: Either<(), _> = Right(3);"
        ],
        "code": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"hello\"));",
          "    let result = right.unwrap_right();",
          "    assert_eq!(left.unwrap_right(), None);",
          "    let right: Either<(), String> = Right(String::from(\"hello\"));",
          "    assert_eq!(result, String::from(\"hello\"));",
          "    let right: Either<i32, f64> = Right(5.5);",
          "    assert_eq!(right.unwrap_right(), 5.5);",
          "    let right: Either<i32, u32> = Right(10u32);",
          "    assert_eq!(right.unwrap_right(), 10u32);",
          "    #[should_panic] left: Either<i32, f64> = Left(3);",
          "    left.expect_right(\"Expected Right value, found Left\");",
          "    assert_eq!(left.unwrap_right(), Err(\"panic\"));",
          "    let right: Either<(), _> = Right(3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), f64> = Right(3.14);",
          "    let result = right.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.unwrap_right(), 3.14);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let panic_result = std::panic::catch_unwind(|| left.unwrap_right());",
          "    assert!(panic_result.is_err());"
        ],
        "code": [
          "{",
          "    let right: Either<(), f64> = Right(3.14);",
          "    let result = right.unwrap_right();",
          "    assert_eq!(right.unwrap_right(), 3.14);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let panic_result = std::panic::catch_unwind(|| left.unwrap_right());",
          "    assert!(panic_result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), bool> = Right(true);",
          "    let result = right.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Right(3).unwrap_right(), 3);",
          "    assert_eq!(Right(true).unwrap_right(), true);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let panic_msg = format!(\"called `Either::unwrap_right()` on a `Left` value: {:?}\", 3);",
          "    assert!(std::panic::catch_unwind(|| left.unwrap_right()).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| left.unwrap_right()), Err(panic) if panic.downcast_ref::<String>() == Some(&panic_msg)));"
        ],
        "code": [
          "{",
          "    let right: Either<(), bool> = Right(true);",
          "    let result = right.unwrap_right();",
          "    assert_eq!(Right(3).unwrap_right(), 3);",
          "    assert_eq!(Right(true).unwrap_right(), true);",
          "    let left: Either<i32, ()> = Left(3);",
          "    let panic_msg = format!(\"called `Either::unwrap_right()` on a `Left` value: {:?}\", 3);",
          "    assert!(std::panic::catch_unwind(|| left.unwrap_right()).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| left.unwrap_right()), Err(panic) if panic.downcast_ref::<String>() == Some(&panic_msg)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]