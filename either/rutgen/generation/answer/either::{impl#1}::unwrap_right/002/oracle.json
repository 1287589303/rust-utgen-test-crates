[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(test, \"called `Either::unwrap_right()` on a `Left` value: 3\");"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.unwrap_right();",
          "    assert_panics!(test, \"called `Either::unwrap_right()` on a `Left` value: 3\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"error\"));",
          "    left.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(test, || {",
          "    let left: Either<String, ()> = Left(String::from(\"error\"));",
          "    left.unwrap_right();",
          "    });"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"error\"));",
          "    left.unwrap_right();",
          "    assert_panics!(test, || {",
          "    let left: Either<String, ()> = Left(String::from(\"error\"));",
          "    left.unwrap_right();",
          "    });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    left.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(left.unwrap_right());"
        ],
        "code": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    left.unwrap_right();",
          "    assert_panics!(left.unwrap_right());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "    let left: Either<TestStruct, ()> = Left(TestStruct { value: 42 });",
          "    left.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    panic!(\"called `Either::unwrap_right()` on a `Left` value: TestStruct { value: 42 }\");"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct TestStruct {",
          "        value: i32,",
          "    }",
          "    let left: Either<TestStruct, ()> = Left(TestStruct { value: 42 });",
          "    left.unwrap_right();",
          "    panic!(\"called `Either::unwrap_right()` on a `Left` value: TestStruct { value: 42 }\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.unwrap_right();",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.unwrap_right();",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.unwrap_right();",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.unwrap_right();",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]