[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, u32> = Left(\"hello\".to_string());",
          "    let result = left.left_or_else(|_| \"unreachable\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"hello\");",
          "    let right: Either<String, u32> = Right(42);",
          "    let result_from_right = right.left_or_else(|r| r.to_string());",
          "    assert_eq!(result_from_right, \"42\");"
        ],
        "code": [
          "{",
          "    let left: Either<String, u32> = Left(\"hello\".to_string());",
          "    let result = left.left_or_else(|_| \"unreachable\".to_string());",
          "    assert_eq!(result, \"hello\");",
          "    let right: Either<String, u32> = Right(42);",
          "    let result_from_right = right.left_or_else(|r| r.to_string());",
          "    assert_eq!(result_from_right, \"42\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(42);",
          "    let result = right.left_or_else(|x| (x * 2).to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"42\");"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(42);",
          "    let result = right.left_or_else(|x| (x * 2).to_string());",
          "    assert_eq!(result, \"42\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u8>, i32> = Left(vec![1, 2, 3]);",
          "    let result = left.left_or_else(|_| vec![0]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u8>, i32> = Left(vec![1, 2, 3]);",
          "    let result = left.left_or_else(|_| vec![0]);",
          "    assert_eq!(result, vec![1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u8>, i32> = Right(5);",
          "    let result = right.left_or_else(|x| vec![x]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![5]);"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u8>, i32> = Right(5);",
          "    let result = right.left_or_else(|x| vec![x]);",
          "    assert_eq!(result, vec![5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(i32, i32), f32> = Left((1, 2));",
          "    let result = left.left_or_else(|_| (0, 0));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (1, 2));"
        ],
        "code": [
          "{",
          "    let left: Either<(i32, i32), f32> = Left((1, 2));",
          "    let result = left.left_or_else(|_| (0, 0));",
          "    assert_eq!(result, (1, 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(i32, i32), f32> = Right(3.14);",
          "    let result = right.left_or_else(|x| (x as i32, x as i32));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (3, 3));",
          "    let left: Either<(i32, i32), f32> = Left((1, 2));",
          "    let result = left.left_or_else(|x| (x as i32, x as i32));",
          "    assert_eq!(result, (1, 2));",
          "    let left_empty: Either<(i32, i32), f32> = Left((0, 0));",
          "    let result = left_empty.left_or_else(|x| (x as i32, x as i32));",
          "    assert_eq!(result, (0, 0));"
        ],
        "code": [
          "{",
          "    let right: Either<(i32, i32), f32> = Right(3.14);",
          "    let result = right.left_or_else(|x| (x as i32, x as i32));",
          "    assert_eq!(result, (3, 3));",
          "    let left: Either<(i32, i32), f32> = Left((1, 2));",
          "    let result = left.left_or_else(|x| (x as i32, x as i32));",
          "    assert_eq!(result, (1, 2));",
          "    let left_empty: Either<(i32, i32), f32> = Left((0, 0));",
          "    let result = left_empty.left_or_else(|x| (x as i32, x as i32));",
          "    assert_eq!(result, (0, 0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Custom {",
          "        value: i32,",
          "    }",
          "    ",
          "    let left: Either<Custom, f64> = Left(Custom { value: 10 });",
          "    let result = left.left_or_else(|_| Custom { value: 0 });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.value, 10);"
        ],
        "code": [
          "{",
          "    struct Custom {",
          "        value: i32,",
          "    }",
          "    ",
          "    let left: Either<Custom, f64> = Left(Custom { value: 10 });",
          "    let result = left.left_or_else(|_| Custom { value: 0 });",
          "    assert_eq!(result.value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Custom {",
          "        value: i32,",
          "    }",
          "    ",
          "    let right: Either<Custom, f64> = Right(4.5);",
          "    let result = right.left_or_else(|x| Custom { value: x as i32 });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.value, 4);",
          "    assert_eq!(result.value, 4);"
        ],
        "code": [
          "{",
          "    struct Custom {",
          "        value: i32,",
          "    }",
          "    ",
          "    let right: Either<Custom, f64> = Right(4.5);",
          "    let result = right.left_or_else(|x| Custom { value: x as i32 });",
          "    assert_eq!(result.value, 4);",
          "    assert_eq!(result.value, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]