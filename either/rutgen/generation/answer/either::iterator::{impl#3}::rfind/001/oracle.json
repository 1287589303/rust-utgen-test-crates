[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![1, 2, 3], index: 0 };",
          "    let right_iter = RightIter { items: vec![1, 2, 3], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(2));",
          "    let result = either.rfind(|&x| x == 4);",
          "    assert_eq!(result, None);",
          "    let result = either.rfind(|&x| x == 1);",
          "    assert_eq!(result, Some(1));",
          "    let result = either.rfind(|&x| x == 3);",
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![1, 2, 3], index: 0 };",
          "    let right_iter = RightIter { items: vec![1, 2, 3], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 2);",
          "    assert_eq!(result, Some(2));",
          "    let result = either.rfind(|&x| x == 4);",
          "    assert_eq!(result, None);",
          "    let result = either.rfind(|&x| x == 1);",
          "    assert_eq!(result, Some(1));",
          "    let result = either.rfind(|&x| x == 3);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![4, 5, 6], index: 0 };",
          "    let right_iter = RightIter { items: vec![4, 5, 6], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 7);",
          "}"
        ],
        "oracle": [
          "    plaintext",
          "    assert_eq!(result, None);",
          "    let result = either.rfind(|&x| x == 5);",
          "    assert_eq!(result, Some(5));",
          "    let result = either.rfind(|&x| x == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either.rfind(|&x| x == 6);",
          "    assert_eq!(result, Some(6));",
          "    let result = either.rfind(|&x| x == 8);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![4, 5, 6], index: 0 };",
          "    let right_iter = RightIter { items: vec![4, 5, 6], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 7);",
          "    plaintext",
          "    assert_eq!(result, None);",
          "    let result = either.rfind(|&x| x == 5);",
          "    assert_eq!(result, Some(5));",
          "    let result = either.rfind(|&x| x == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either.rfind(|&x| x == 6);",
          "    assert_eq!(result, Some(6));",
          "    let result = either.rfind(|&x| x == 8);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![1, 2, 3], index: 0 };",
          "    let right_iter = RightIter { items: vec![1, 2, 4], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert_eq!(either.rfind(|&x| x == 4), Some(4));",
          "    assert_eq!(either.rfind(|&x| x == 1), Some(1));",
          "    assert_eq!(either.rfind(|&x| x == 5), None);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.items[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter { items: vec![1, 2, 3], index: 0 };",
          "    let right_iter = RightIter { items: vec![1, 2, 4], index: 3 };",
          "",
          "    let mut either = Either::Right(right_iter);",
          "",
          "    let result = either.rfind(|&x| x == 2);",
          "    assert_eq!(result, None);",
          "    assert_eq!(either.rfind(|&x| x == 4), Some(4));",
          "    assert_eq!(either.rfind(|&x| x == 1), Some(1));",
          "    assert_eq!(either.rfind(|&x| x == 5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]