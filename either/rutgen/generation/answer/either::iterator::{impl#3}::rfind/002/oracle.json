[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));",
          "    let result_none = either_instance.rfind(|&x| x == 6);",
          "    assert_eq!(result_none, None);",
          "    let empty_iter = Either::Left(LeftIter { items: vec![], index: 0 });",
          "    let result_empty = empty_iter.rfind(|&x| x == 4);",
          "    assert_eq!(result_empty, None);",
          "    let result_boundary = either_instance.rfind(|&x| x == 1);",
          "    assert_eq!(result_boundary, Some(1));",
          "    let result_last = either_instance.rfind(|&x| x == 5);",
          "    assert_eq!(result_last, Some(5));"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result_none = either_instance.rfind(|&x| x == 6);",
          "    assert_eq!(result_none, None);",
          "    let empty_iter = Either::Left(LeftIter { items: vec![], index: 0 });",
          "    let result_empty = empty_iter.rfind(|&x| x == 4);",
          "    assert_eq!(result_empty, None);",
          "    let result_boundary = either_instance.rfind(|&x| x == 1);",
          "    assert_eq!(result_boundary, Some(1));",
          "    let result_last = either_instance.rfind(|&x| x == 5);",
          "    assert_eq!(result_last, Some(5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![5, 2, 3, 4, 1],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(5));",
          "    let result = either_instance.rfind(|&x| x == 1);",
          "    assert_eq!(result, Some(1));",
          "    let result = either_instance.rfind(|&x| x == 10);",
          "    assert_eq!(result, None);",
          "    let result = either_instance.rfind(|&x| x < 3);",
          "    assert_eq!(result, Some(2));",
          "    let result = either_instance.rfind(|&x| x > 5);",
          "    assert_eq!(result, None);",
          "    let result = either_instance.rfind(|&x| x == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either_instance.rfind(|&x| x % 2 == 0);",
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![5, 2, 3, 4, 1],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 5);",
          "    assert_eq!(result, Some(5));",
          "    let result = either_instance.rfind(|&x| x == 1);",
          "    assert_eq!(result, Some(1));",
          "    let result = either_instance.rfind(|&x| x == 10);",
          "    assert_eq!(result, None);",
          "    let result = either_instance.rfind(|&x| x < 3);",
          "    assert_eq!(result, Some(2));",
          "    let result = either_instance.rfind(|&x| x > 5);",
          "    assert_eq!(result, None);",
          "    let result = either_instance.rfind(|&x| x == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either_instance.rfind(|&x| x % 2 == 0);",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1));",
          "    assert_eq!(either_instance.rfind(|&x| x == 6), None);",
          "    assert_eq!(either_instance.rfind(|&x| x > 3), Some(4));",
          "    assert_eq!(either_instance.rfind(|&x| x < 3), Some(2));",
          "    let empty_iter = LeftIter { items: vec![], index: 0 };",
          "    let empty_either_instance = Either::Left(empty_iter);",
          "    assert_eq!(empty_either_instance.rfind(|&x| x == 1), None);",
          "    let single_item_iter = LeftIter { items: vec![10], index: 0 };",
          "    let single_item_either_instance = Either::Left(single_item_iter);",
          "    assert_eq!(single_item_either_instance.rfind(|&x| x == 10), Some(10));",
          "    assert_eq!(single_item_either_instance.rfind(|&x| x == 5), None);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "        ",
          "        fn size_hint(&self) -> (usize, Option<usize>) {",
          "            (self.items.len() - self.index, Some(self.items.len() - self.index))",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIter {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                self.index += 1;",
          "                Some(self.items[self.index - 1])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>",
          "        where",
          "            P: FnMut(&Self::Item) -> bool,",
          "        {",
          "            let mut rev_index = self.items.len();",
          "            while rev_index > 0 {",
          "                rev_index -= 1;",
          "                if predicate(&self.items[rev_index]) {",
          "                    return Some(self.items[rev_index]);",
          "                }",
          "            }",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIter {",
          "        items: vec![1, 2, 3, 4, 5],",
          "        index: 0,",
          "    };",
          "",
          "    let either_instance = Either::Left(left_iter);",
          "    ",
          "    let result = either_instance.rfind(|&x| x == 1);",
          "    assert_eq!(result, Some(1));",
          "    assert_eq!(either_instance.rfind(|&x| x == 6), None);",
          "    assert_eq!(either_instance.rfind(|&x| x > 3), Some(4));",
          "    assert_eq!(either_instance.rfind(|&x| x < 3), Some(2));",
          "    let empty_iter = LeftIter { items: vec![], index: 0 };",
          "    let empty_either_instance = Either::Left(empty_iter);",
          "    assert_eq!(empty_either_instance.rfind(|&x| x == 1), None);",
          "    let single_item_iter = LeftIter { items: vec![10], index: 0 };",
          "    let single_item_either_instance = Either::Left(single_item_iter);",
          "    assert_eq!(single_item_either_instance.rfind(|&x| x == 10), Some(10));",
          "    assert_eq!(single_item_either_instance.rfind(|&x| x == 5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]