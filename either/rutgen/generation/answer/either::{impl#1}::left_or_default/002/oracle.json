[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, u32> = Left(\"test\".to_string());",
          "    let _result = left.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, \"test\");",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.unwrap_left(), \"test\");",
          "    assert!(left.left_or_else(|_| \"default\".to_string()) == \"test\");"
        ],
        "code": [
          "{",
          "    let left: Either<String, u32> = Left(\"test\".to_string());",
          "    let _result = left.left_or_default();",
          "    assert_eq!(_result, \"test\");",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.unwrap_left(), \"test\");",
          "    assert!(left.left_or_else(|_| \"default\".to_string()) == \"test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, u32> = Left(vec![1, 2, 3]);",
          "    let _result = left.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left_or_default(), vec![1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, u32> = Left(vec![1, 2, 3]);",
          "    let _result = left.left_or_default();",
          "    assert_eq!(left.left_or_default(), vec![1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, u32> = Left(\"default\".to_string());",
          "    let _result = left.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, \"default\");",
          "    assert_eq!(left.left_or_default(), \"default\");",
          "    assert_eq!(left.left_or_default(), String::from(\"default\"));"
        ],
        "code": [
          "{",
          "    let left: Either<String, u32> = Left(\"default\".to_string());",
          "    let _result = left.left_or_default();",
          "    assert_eq!(_result, \"default\");",
          "    assert_eq!(left.left_or_default(), \"default\");",
          "    assert_eq!(left.left_or_default(), String::from(\"default\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Vec<u32>, u32> = Left(vec![]);",
          "    let _result = left.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left_or_default(), vec![]);"
        ],
        "code": [
          "{",
          "    let left: Either<Vec<u32>, u32> = Left(vec![]);",
          "    let _result = left.left_or_default();",
          "    assert_eq!(left.left_or_default(), vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]