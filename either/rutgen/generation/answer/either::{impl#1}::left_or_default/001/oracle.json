[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(42);",
          "    let result = right.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::default());"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(42);",
          "    let result = right.left_or_default();",
          "    assert_eq!(result, String::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(100);",
          "    let result = right.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::default());"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(100);",
          "    let result = right.left_or_default();",
          "    assert_eq!(result, String::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(0);",
          "    let result = right.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::default());"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(0);",
          "    let result = right.left_or_default();",
          "    assert_eq!(result, String::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(std::u32::MAX);",
          "    let result = right.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::default());",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(std::u32::MAX);",
          "    let result = right.left_or_default();",
          "    assert_eq!(result, String::default());",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, u32> = Right(7);",
          "    let result = right.left_or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::default());",
          "    assert_eq!(result, \"\");"
        ],
        "code": [
          "{",
          "    let right: Either<String, u32> = Right(7);",
          "    let result = right.left_or_default();",
          "    assert_eq!(result, String::default());",
          "    assert_eq!(result, \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]