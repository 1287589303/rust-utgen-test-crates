[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 42;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(42));"
        ],
        "code": [
          "{",
          "    let value: i32 = 42;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert_eq!(result, Either::Left(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: char = 'a';",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left('a'));"
        ],
        "code": [
          "{",
          "    let value: char = 'a';",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert_eq!(result, Either::Left('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 0;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Either::Left(_)));",
          "    assert_eq!(result, Either::Left(0));"
        ],
        "code": [
          "{",
          "    let value: i32 = 0;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert!(matches!(result, Either::Left(_)));",
          "    assert_eq!(result, Either::Left(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = i32::MIN;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(i32::MIN));"
        ],
        "code": [
          "{",
          "    let value: i32 = i32::MIN;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert_eq!(result, Either::Left(i32::MIN));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = i32::MAX;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(i32::MAX));"
        ],
        "code": [
          "{",
          "    let value: i32 = i32::MAX;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert_eq!(result, Either::Left(i32::MAX));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = -1;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(-1));"
        ],
        "code": [
          "{",
          "    let value: i32 = -1;",
          "    let either = Either::Left(&value);",
          "    let result = either.copied();",
          "    assert_eq!(result, Either::Left(-1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]