[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(1);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(iter.inner, Either::Left(TestIterator { data: vec![1, 2, 3], index: 2 }));",
          "    assert!(iter.nth_back(0).is_some());",
          "    assert_eq!(iter.nth_back(0), Some(3));",
          "    assert!(iter.nth_back(3).is_none());"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some(2));",
          "    assert_eq!(iter.inner, Either::Left(TestIterator { data: vec![1, 2, 3], index: 2 }));",
          "    assert!(iter.nth_back(0).is_some());",
          "    assert_eq!(iter.nth_back(0), Some(3));",
          "    assert!(iter.nth_back(3).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![5],",
          "        index: 1,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(5));",
          "    assert!(iter.inner == Either::Left(TestIterator { data: vec![5], index: 0 }));",
          "    assert_eq!(iter.nth_back(0), Some(5));",
          "    assert_eq!(iter.nth_back(1), None);",
          "    assert!(matches!(iter.inner, Either::Left(_)));",
          "    assert_eq!(iter.nth_back(0).is_some(), true);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![5],",
          "        index: 1,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(0);",
          "    assert_eq!(result, Some(5));",
          "    assert!(iter.inner == Either::Left(TestIterator { data: vec![5], index: 0 }));",
          "    assert_eq!(iter.nth_back(0), Some(5));",
          "    assert_eq!(iter.nth_back(1), None);",
          "    assert!(matches!(iter.inner, Either::Left(_)));",
          "    assert_eq!(iter.nth_back(0).is_some(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![10, 20, 30, 40],",
          "        index: 4,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(3);",
          "}"
        ],
        "oracle": [
          "    let left_iter = Either::Left(TestIterator { data: vec![10, 20, 30, 40], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(3), Some(10));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![1, 2, 3, 4, 5], index: 5 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(1), Some(4));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![100], index: 1 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(0), Some(100));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![5, 10, 15, 20], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(2), Some(10));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![], index: 0 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(0), None);",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![3, 6, 9, 12], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(4), None);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = Either::Left(TestIterator {",
          "        data: vec![10, 20, 30, 40],",
          "        index: 4,",
          "    });",
          "    let mut iter = IterEither { inner: left_iter };",
          "",
          "    let result = iter.nth_back(3);",
          "    let left_iter = Either::Left(TestIterator { data: vec![10, 20, 30, 40], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(3), Some(10));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![1, 2, 3, 4, 5], index: 5 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(1), Some(4));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![100], index: 1 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(0), Some(100));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![5, 10, 15, 20], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(2), Some(10));",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![], index: 0 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(0), None);",
          "    ",
          "    let left_iter = Either::Left(TestIterator { data: vec![3, 6, 9, 12], index: 4 });",
          "    let mut iter = IterEither { inner: left_iter };",
          "    assert_eq!(iter.nth_back(4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]