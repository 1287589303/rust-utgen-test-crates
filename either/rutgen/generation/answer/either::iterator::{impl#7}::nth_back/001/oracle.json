[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    ",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                self.index = self.data.len() - n - 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "    ",
          "    let result = iter_either.nth_back(0);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 3);",
          "    ",
          "    let result = iter_either.nth_back(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 2);",
          "    ",
          "    let result = iter_either.nth_back(2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 1);",
          "    ",
          "    let result = iter_either.nth_back(3);",
          "    assert!(result.is_none());",
          "    ",
          "    let result = iter_either.nth_back(4);",
          "    assert!(result.is_none());",
          "    ",
          "    let iter = TestIterator { data: vec![], index: 0 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "    ",
          "    let result = iter_either.nth_back(0);",
          "    assert!(result.is_none());",
          "    ",
          "    let result = iter_either.nth_back(1);",
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    ",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                self.index = self.data.len() - n - 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "    ",
          "    let result = iter_either.nth_back(0);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 3);",
          "    ",
          "    let result = iter_either.nth_back(1);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 2);",
          "    ",
          "    let result = iter_either.nth_back(2);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap(), 1);",
          "    ",
          "    let result = iter_either.nth_back(3);",
          "    assert!(result.is_none());",
          "    ",
          "    let result = iter_either.nth_back(4);",
          "    assert!(result.is_none());",
          "    ",
          "    let iter = TestIterator { data: vec![], index: 0 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "    ",
          "    let result = iter_either.nth_back(0);",
          "    assert!(result.is_none());",
          "    ",
          "    let result = iter_either.nth_back(1);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    ",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                self.index = self.data.len() - n - 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "",
          "    let result = iter_either.nth_back(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    ",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                self.index = self.data.len() - n - 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let iter = TestIterator { data: vec![1, 2, 3], index: 3 };",
          "    let inner = Either::Right(iter);",
          "    let mut iter_either = IterEither { inner };",
          "",
          "    let result = iter_either.nth_back(5);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]