[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<String, u32>, Result<i32, u32>> = Left(Ok(\"Test\".to_string()));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.factor_err(), Ok(Left(\"Test\".to_string())));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<String, u32>, Result<i32, u32>> = Left(Ok(\"Test\".to_string()));",
          "    let _ = input.factor_err();",
          "    assert_eq!(input.factor_err(), Ok(Left(\"Test\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<Vec<u8>, u32>, Result<f32, u32>> = Left(Err(42));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.factor_err(), Err(42));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<Vec<u8>, u32>, Result<f32, u32>> = Left(Err(42));",
          "    let _ = input.factor_err();",
          "    assert_eq!(input.factor_err(), Err(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Ok(\"Hello\".to_string()));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.factor_err(), Ok(Right(\"Hello\".to_string())));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Left(Ok(42));",
          "    assert_eq!(input.factor_err(), Ok(Left(42)));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Left(Err(99));",
          "    assert_eq!(input.factor_err(), Err(99));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Err(100));",
          "    assert_eq!(input.factor_err(), Err(100));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Ok(\"World\".to_string()));",
          "    assert_eq!(input.factor_err(), Ok(Right(\"World\".to_string())));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Ok(\"Hello\".to_string()));",
          "    let _ = input.factor_err();",
          "    assert_eq!(input.factor_err(), Ok(Right(\"Hello\".to_string())));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Left(Ok(42));",
          "    assert_eq!(input.factor_err(), Ok(Left(42)));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Left(Err(99));",
          "    assert_eq!(input.factor_err(), Err(99));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Err(100));",
          "    assert_eq!(input.factor_err(), Err(100));",
          "    let input: Either<Result<i32, u32>, Result<String, u32>> = Right(Ok(\"World\".to_string()));",
          "    assert_eq!(input.factor_err(), Ok(Right(\"World\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Err(99));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Left(Ok(3.14));",
          "    assert_eq!(input.factor_err(), Ok(Left(3.14)));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Left(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Ok(vec![1, 2, 3]));",
          "    assert_eq!(input.factor_err(), Ok(Right(vec![1, 2, 3])));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Err(99));",
          "    assert_eq!(input.factor_err(), Err(99));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Err(99));",
          "    let _ = input.factor_err();",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Left(Ok(3.14));",
          "    assert_eq!(input.factor_err(), Ok(Left(3.14)));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Left(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Ok(vec![1, 2, 3]));",
          "    assert_eq!(input.factor_err(), Ok(Right(vec![1, 2, 3])));",
          "    ",
          "    let input: Either<Result<f64, u32>, Result<Vec<i32>, u32>> = Right(Err(99));",
          "    assert_eq!(input.factor_err(), Err(99));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<String, u32>, Result<i32, u32>> = Left(Ok(\"\".to_string()));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.factor_err(), Ok(Left(\"\".to_string())));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<String, u32>, Result<i32, u32>> = Left(Ok(\"\".to_string()));",
          "    let _ = input.factor_err();",
          "    assert_eq!(input.factor_err(), Ok(Left(\"\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Ok(vec![]));",
          "    let _ = input.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(input.factor_err(), Ok(Right(vec![])));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Left(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Left(Ok(vec![1, 2, 3]));",
          "    assert_eq!(input.factor_err(), Ok(Left(vec![1, 2, 3])));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Ok(String::from(\"Hello\")));",
          "    assert_eq!(input.factor_err(), Ok(Right(String::from(\"Hello\"))));"
        ],
        "code": [
          "{",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Ok(vec![]));",
          "    let _ = input.factor_err();",
          "    assert_eq!(input.factor_err(), Ok(Right(vec![])));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Left(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Left(Ok(vec![1, 2, 3]));",
          "    assert_eq!(input.factor_err(), Ok(Left(vec![1, 2, 3])));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Err(42));",
          "    assert_eq!(input.factor_err(), Err(42));",
          "    let input: Either<Result<Vec<u8>, u32>, Result<String, u32>> = Right(Ok(String::from(\"Hello\")));",
          "    assert_eq!(input.factor_err(), Ok(Right(String::from(\"Hello\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]