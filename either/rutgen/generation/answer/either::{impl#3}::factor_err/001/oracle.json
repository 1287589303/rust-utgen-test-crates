[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Ok(String::from(\"test\")));",
          "    let _ = right.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_err(), Ok(Right(String::from(\"test\"))));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Ok(String::from(\"test\")));",
          "    let _ = right.factor_err();",
          "    assert_eq!(right.factor_err(), Ok(Right(String::from(\"test\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Err(42));",
          "    let _ = right.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_err(), Err(42));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Err(42));",
          "    let _ = right.factor_err();",
          "    assert_eq!(right.factor_err(), Err(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Ok(String::from(\"mixed\")));",
          "    let left: Either<Result<i32, u32>, Result<String, u32>> = Left(Err(43));",
          "    let _ = right.factor_err();",
          "    let _ = left.factor_err();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_err(), Ok(Right(String::from(\"mixed\"))));",
          "    assert_eq!(left.factor_err(), Err(43));"
        ],
        "code": [
          "{",
          "    let right: Either<Result<String, u32>, Result<i32, u32>> = Right(Ok(String::from(\"mixed\")));",
          "    let left: Either<Result<i32, u32>, Result<String, u32>> = Left(Err(43));",
          "    let _ = right.factor_err();",
          "    let _ = left.factor_err();",
          "    assert_eq!(right.factor_err(), Ok(Right(String::from(\"mixed\"))));",
          "    assert_eq!(left.factor_err(), Err(43));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]