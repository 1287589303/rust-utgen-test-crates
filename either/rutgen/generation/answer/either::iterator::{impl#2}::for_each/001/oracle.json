[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct RightIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator { items: vec![1, 2, 3], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    let mut sum = 0;",
          "",
          "    either.for_each(|x| sum += x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sum, 6);",
          "    let right_iter_empty = RightIterator { items: vec![], index: 0 };",
          "    let either_empty = Either::Right(right_iter_empty);",
          "    let mut sum_empty = 0;",
          "    either_empty.for_each(|x| sum_empty += x);",
          "    assert_eq!(sum_empty, 0);",
          "    let right_iter_single = RightIterator { items: vec![5], index: 0 };",
          "    let either_single = Either::Right(right_iter_single);",
          "    let mut sum_single = 0;",
          "    either_single.for_each(|x| sum_single += x);",
          "    assert_eq!(sum_single, 5);",
          "    let right_iter_negative = RightIterator { items: vec![-1, -2, -3], index: 0 };",
          "    let either_negative = Either::Right(right_iter_negative);",
          "    let mut sum_negative = 0;",
          "    either_negative.for_each(|x| sum_negative += x);",
          "    assert_eq!(sum_negative, -6);"
        ],
        "code": [
          "{",
          "    struct RightIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator { items: vec![1, 2, 3], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    let mut sum = 0;",
          "",
          "    either.for_each(|x| sum += x);",
          "    assert_eq!(sum, 6);",
          "    let right_iter_empty = RightIterator { items: vec![], index: 0 };",
          "    let either_empty = Either::Right(right_iter_empty);",
          "    let mut sum_empty = 0;",
          "    either_empty.for_each(|x| sum_empty += x);",
          "    assert_eq!(sum_empty, 0);",
          "    let right_iter_single = RightIterator { items: vec![5], index: 0 };",
          "    let either_single = Either::Right(right_iter_single);",
          "    let mut sum_single = 0;",
          "    either_single.for_each(|x| sum_single += x);",
          "    assert_eq!(sum_single, 5);",
          "    let right_iter_negative = RightIterator { items: vec![-1, -2, -3], index: 0 };",
          "    let either_negative = Either::Right(right_iter_negative);",
          "    let mut sum_negative = 0;",
          "    either_negative.for_each(|x| sum_negative += x);",
          "    assert_eq!(sum_negative, -6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyRightIterator;",
          "",
          "    impl Iterator for EmptyRightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let empty_right_iter = EmptyRightIterator;",
          "    let either = Either::Right(empty_right_iter);",
          "    let mut sum = 0;",
          "",
          "    either.for_each(|x| sum += x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sum, 0);"
        ],
        "code": [
          "{",
          "    struct EmptyRightIterator;",
          "",
          "    impl Iterator for EmptyRightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let empty_right_iter = EmptyRightIterator;",
          "    let either = Either::Right(empty_right_iter);",
          "    let mut sum = 0;",
          "",
          "    either.for_each(|x| sum += x);",
          "    assert_eq!(sum, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleItemIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SingleItemIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let single_item_iter = SingleItemIterator { items: vec![42], index: 0 };",
          "    let either = Either::Right(single_item_iter);",
          "    let mut product = 1;",
          "",
          "    either.for_each(|x| product *= x);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(product, 42);"
        ],
        "code": [
          "{",
          "    struct SingleItemIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for SingleItemIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let single_item_iter = SingleItemIterator { items: vec![42], index: 0 };",
          "    let either = Either::Right(single_item_iter);",
          "    let mut product = 1;",
          "",
          "    either.for_each(|x| product *= x);",
          "    assert_eq!(product, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]