[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    fn is_even(x: &u8) -> bool {",
          "        x % 2 == 0",
          "    }",
          "    ",
          "    let x: u8 = 0;",
          "    x.into_either_with(is_even);",
          "    ",
          "    let y: u8 = 1;",
          "    y.into_either_with(is_even);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(0.into_either_with(is_even), Left(0));",
          "    assert_eq!(1.into_either_with(is_even), Right(1));",
          "    assert_eq!(2u8.into_either_with(is_even), Left(2));",
          "    assert_eq!(3u8.into_either_with(is_even), Right(3));",
          "    assert_eq!(4u8.into_either_with(is_even), Left(4));",
          "    assert_eq!(5u8.into_either_with(|x| x % 2 != 0), Right(5));",
          "    assert_eq!(6u8.into_either_with(|x| x % 2 != 0), Right(6));",
          "    assert_eq!(7u8.into_either_with(|x| x % 2 != 0), Right(7));",
          "    assert_eq!(8u8.into_either_with(|x| x % 2 != 0), Right(8));",
          "    assert_eq!(9u8.into_either_with(is_even), Right(9));"
        ],
        "code": [
          "{",
          "    fn is_even(x: &u8) -> bool {",
          "        x % 2 == 0",
          "    }",
          "    ",
          "    let x: u8 = 0;",
          "    x.into_either_with(is_even);",
          "    ",
          "    let y: u8 = 1;",
          "    y.into_either_with(is_even);",
          "    assert_eq!(0.into_either_with(is_even), Left(0));",
          "    assert_eq!(1.into_either_with(is_even), Right(1));",
          "    assert_eq!(2u8.into_either_with(is_even), Left(2));",
          "    assert_eq!(3u8.into_either_with(is_even), Right(3));",
          "    assert_eq!(4u8.into_either_with(is_even), Left(4));",
          "    assert_eq!(5u8.into_either_with(|x| x % 2 != 0), Right(5));",
          "    assert_eq!(6u8.into_either_with(|x| x % 2 != 0), Right(6));",
          "    assert_eq!(7u8.into_either_with(|x| x % 2 != 0), Right(7));",
          "    assert_eq!(8u8.into_either_with(|x| x % 2 != 0), Right(8));",
          "    assert_eq!(9u8.into_either_with(is_even), Right(9));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    fn is_even(x: &u8) -> bool {",
          "        x % 2 == 0",
          "    }",
          "",
          "    let x: u8 = 255;",
          "    x.into_either_with(is_even);",
          "",
          "    let y: u8 = 254;",
          "    y.into_either_with(is_even);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(255.into_either_with(is_even), Right(255));",
          "    assert_eq!(254.into_either_with(is_even), Left(254));"
        ],
        "code": [
          "{",
          "    fn is_even(x: &u8) -> bool {",
          "        x % 2 == 0",
          "    }",
          "",
          "    let x: u8 = 255;",
          "    x.into_either_with(is_even);",
          "",
          "    let y: u8 = 254;",
          "    y.into_either_with(is_even);",
          "    assert_eq!(255.into_either_with(is_even), Right(255));",
          "    assert_eq!(254.into_either_with(is_even), Left(254));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    fn is_length_even(s: &String) -> bool {",
          "        s.len() % 2 == 0",
          "    }",
          "    ",
          "    let s1 = String::from(\"test\");",
          "    s1.into_either_with(is_length_even);",
          "",
          "    let s2 = String::from(\"hello\");",
          "    s2.into_either_with(is_length_even);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(s1.into_either_with(is_length_even), Left(s1));",
          "    assert_eq!(s2.into_either_with(is_length_even), Right(s2));"
        ],
        "code": [
          "{",
          "    fn is_length_even(s: &String) -> bool {",
          "        s.len() % 2 == 0",
          "    }",
          "    ",
          "    let s1 = String::from(\"test\");",
          "    s1.into_either_with(is_length_even);",
          "",
          "    let s2 = String::from(\"hello\");",
          "    s2.into_either_with(is_length_even);",
          "    assert_eq!(s1.into_either_with(is_length_even), Left(s1));",
          "    assert_eq!(s2.into_either_with(is_length_even), Right(s2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    fn is_length_even(s: &String) -> bool {",
          "        s.len() % 2 == 0",
          "    }",
          "    ",
          "    let s1 = String::from(\"\");",
          "    s1.into_either_with(is_length_even);",
          "",
          "    let s2 = String::from(\"odd\");",
          "    s2.into_either_with(is_length_even);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(s1.into_either_with(is_length_even), Left(s1));",
          "    assert_eq!(s2.into_either_with(is_length_even), Right(s2));"
        ],
        "code": [
          "{",
          "    fn is_length_even(s: &String) -> bool {",
          "        s.len() % 2 == 0",
          "    }",
          "    ",
          "    let s1 = String::from(\"\");",
          "    s1.into_either_with(is_length_even);",
          "",
          "    let s2 = String::from(\"odd\");",
          "    s2.into_either_with(is_length_even);",
          "    assert_eq!(s1.into_either_with(is_length_even), Left(s1));",
          "    assert_eq!(s2.into_either_with(is_length_even), Right(s2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Serialize, Deserialize)]",
          "    struct MyStruct {",
          "        value: u8,",
          "    }",
          "",
          "    fn is_value_greater_than_100(s: &MyStruct) -> bool {",
          "        s.value > 100",
          "    }",
          "",
          "    let x = MyStruct { value: 50 };",
          "    x.into_either_with(is_value_greater_than_100);",
          "",
          "    let y = MyStruct { value: 150 };",
          "    y.into_either_with(is_value_greater_than_100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(x.into_either_with(is_value_greater_than_100), Right(x));",
          "    assert_eq!(y.into_either_with(is_value_greater_than_100), Left(y));"
        ],
        "code": [
          "{",
          "    #[derive(Serialize, Deserialize)]",
          "    struct MyStruct {",
          "        value: u8,",
          "    }",
          "",
          "    fn is_value_greater_than_100(s: &MyStruct) -> bool {",
          "        s.value > 100",
          "    }",
          "",
          "    let x = MyStruct { value: 50 };",
          "    x.into_either_with(is_value_greater_than_100);",
          "",
          "    let y = MyStruct { value: 150 };",
          "    y.into_either_with(is_value_greater_than_100);",
          "    assert_eq!(x.into_either_with(is_value_greater_than_100), Right(x));",
          "    assert_eq!(y.into_either_with(is_value_greater_than_100), Left(y));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]