[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, &str> = Left(5);",
          "    let result = left.left_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(10));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, &str> = Left(5);",
          "    let result = left.left_and_then(|x| Right(x * 2));",
          "    assert_eq!(result, Right(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, &str> = Left(String::from(\"test\"));",
          "    let result = left.left_and_then(|x| Right(x.len() as isize));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(4));"
        ],
        "code": [
          "{",
          "    let left: Either<String, &str> = Left(String::from(\"test\"));",
          "    let result = left.left_and_then(|x| Right(x.len() as isize));",
          "    assert_eq!(result, Right(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(i32, i32), f64> = Left((1, 2));",
          "    let result = left.left_and_then(|(x, y)| Right(x + y as f64));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(3.0));"
        ],
        "code": [
          "{",
          "    let left: Either<(i32, i32), f64> = Left((1, 2));",
          "    let result = left.left_and_then(|(x, y)| Right(x + y as f64));",
          "    assert_eq!(result, Right(3.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<[i32; 1], f64> = Left([42]);",
          "    let result = left.left_and_then(|arr| Right(arr[0] as f64));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(42.0));"
        ],
        "code": [
          "{",
          "    let left: Either<[i32; 1], f64> = Left([42]);",
          "    let result = left.left_and_then(|arr| Right(arr[0] as f64));",
          "    assert_eq!(result, Right(42.0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]