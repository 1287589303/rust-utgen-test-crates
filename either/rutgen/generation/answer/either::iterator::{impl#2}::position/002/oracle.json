[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = i32;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = EmptyIter;",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|_| true);",
          "}"
        ],
        "oracle": [
          "    let left_iter = EmptyIter;",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    let position = either.position(|_| true);",
          "    assert_eq!(position, None);"
        ],
        "code": [
          "{",
          "    struct EmptyIter;",
          "",
          "    impl Iterator for EmptyIter {",
          "        type Item = i32;",
          "        ",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left_iter = EmptyIter;",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|_| true);",
          "    let left_iter = EmptyIter;",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    let position = either.position(|_| true);",
          "    assert_eq!(position, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position, Some(0));",
          "    assert_eq!(either.position(|x| *x == 0), None);"
        ],
        "code": [
          "{",
          "    struct SingleIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 42);",
          "    assert_eq!(position, Some(0));",
          "    assert_eq!(either.position(|x| *x == 0), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 100);",
          "}"
        ],
        "oracle": [
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    let position = either.position(|x| *x == 100);",
          "    assert_eq!(position, None);"
        ],
        "code": [
          "{",
          "    struct SingleIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for SingleIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count == 0 {",
          "                self.count += 1;",
          "                Some(42)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 100);",
          "    let left_iter = SingleIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    let position = either.position(|x| *x == 100);",
          "    assert_eq!(position, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultiIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for MultiIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            let value = self.count;",
          "            if value < 5 {",
          "                self.count += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = MultiIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position, Some(3));",
          "    assert_eq!(either.position(|x| *x == 0), Some(0));",
          "    assert_eq!(either.position(|x| *x == 5), None);",
          "    assert_eq!(either.position(|x| *x == 4), Some(4));",
          "    assert_eq!(either.position(|x| *x == 2), Some(2));",
          "    assert_eq!(either.position(|x| *x < 0), None);",
          "    assert_eq!(either.position(|x| *x > 3), Some(4));",
          "    assert_eq!(either.position(|x| *x == 6), None);",
          "    assert_eq!(either.position(|_| true), Some(0));",
          "    assert_eq!(either.position(|_| false), None);"
        ],
        "code": [
          "{",
          "    struct MultiIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for MultiIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            let value = self.count;",
          "            if value < 5 {",
          "                self.count += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = MultiIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 3);",
          "    assert_eq!(position, Some(3));",
          "    assert_eq!(either.position(|x| *x == 0), Some(0));",
          "    assert_eq!(either.position(|x| *x == 5), None);",
          "    assert_eq!(either.position(|x| *x == 4), Some(4));",
          "    assert_eq!(either.position(|x| *x == 2), Some(2));",
          "    assert_eq!(either.position(|x| *x < 0), None);",
          "    assert_eq!(either.position(|x| *x > 3), Some(4));",
          "    assert_eq!(either.position(|x| *x == 6), None);",
          "    assert_eq!(either.position(|_| true), Some(0));",
          "    assert_eq!(either.position(|_| false), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultiIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for MultiIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            let value = self.count;",
          "            if value < 5 {",
          "                self.count += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = MultiIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(position, None);",
          "    assert_eq!(either.position(|&x| x == 0), Some(0));",
          "    assert_eq!(either.position(|&x| x == 1), Some(1));",
          "    assert_eq!(either.position(|&x| x == 2), Some(2));",
          "    assert_eq!(either.position(|&x| x == 3), Some(3));",
          "    assert_eq!(either.position(|&x| x == 4), Some(4));",
          "    assert_eq!(either.position(|&x| x == 5), None);",
          "    let position = either.position(|x| *x < 3);",
          "    assert_eq!(position, Some(0));",
          "    let position = either.position(|x| *x > 1);",
          "    assert_eq!(position, Some(2));",
          "    let position = either.position(|x| *x > 10);",
          "    assert_eq!(position, None);",
          "    let position = either.position(|_| true);",
          "    assert_eq!(position, Some(0));"
        ],
        "code": [
          "{",
          "    struct MultiIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for MultiIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            let value = self.count;",
          "            if value < 5 {",
          "                self.count += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = MultiIter { count: 0 };",
          "    let right_iter = EmptyIter;",
          "    let either = Either::Left(left_iter);",
          "    ",
          "    let position = either.position(|x| *x == 10);",
          "    assert_eq!(position, None);",
          "    assert_eq!(either.position(|&x| x == 0), Some(0));",
          "    assert_eq!(either.position(|&x| x == 1), Some(1));",
          "    assert_eq!(either.position(|&x| x == 2), Some(2));",
          "    assert_eq!(either.position(|&x| x == 3), Some(3));",
          "    assert_eq!(either.position(|&x| x == 4), Some(4));",
          "    assert_eq!(either.position(|&x| x == 5), None);",
          "    let position = either.position(|x| *x < 3);",
          "    assert_eq!(position, Some(0));",
          "    let position = either.position(|x| *x > 1);",
          "    assert_eq!(position, Some(2));",
          "    let position = either.position(|x| *x > 10);",
          "    assert_eq!(position, None);",
          "    let position = either.position(|_| true);",
          "    assert_eq!(position, Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]