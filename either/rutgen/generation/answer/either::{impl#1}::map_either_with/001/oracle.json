[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
          "    ",
          "    let right: Either<String, usize> = Right(42);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(\"42\".into()));",
          "    assert_eq!(sum, 42);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
          "    ",
          "    let right: Either<String, usize> = Right(42);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "    assert_eq!(result, Right(\"42\".into()));",
          "    assert_eq!(sum, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
          "",
          "    let right: Either<String, usize> = Right(58);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(\"58\".into()));",
          "    assert_eq!(sum, 58);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: usize| { *sum += u; u.to_string() };",
          "",
          "    let right: Either<String, usize> = Right(58);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "    assert_eq!(result, Right(\"58\".into()));",
          "    assert_eq!(sum, 58);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: f64| { *sum += u as usize; u.to_string() };",
          "",
          "    let right: Either<String, f64> = Right(3.14);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(\"3\".to_string()));",
          "    assert_eq!(sum, 3);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |_: &mut usize, _: String| 0; // No impact on sum for left",
          "    let g = |sum: &mut usize, u: f64| { *sum += u as usize; u.to_string() };",
          "",
          "    let right: Either<String, f64> = Right(3.14);",
          "    let result = right.map_either_with(&mut sum, &f, &g);",
          "    assert_eq!(result, Right(\"3\".to_string()));",
          "    assert_eq!(sum, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]