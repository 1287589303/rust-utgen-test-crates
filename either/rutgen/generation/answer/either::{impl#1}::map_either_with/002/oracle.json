[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"test\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"TEST\".into()));",
          "    assert_eq!(sum, 4);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"test\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "    assert_eq!(result, Left(\"TEST\".into()));",
          "    assert_eq!(sum, 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"\".into()));",
          "    assert_eq!(sum, 0);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "    assert_eq!(result, Left(\"\".into()));",
          "    assert_eq!(sum, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"longer test string\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"LONGER TEST STRING\".into()));",
          "    assert_eq!(sum, 21);"
        ],
        "code": [
          "{",
          "    let mut sum = 0;",
          "    let f = |ctx: &mut usize, s: String| {",
          "        *ctx += s.len();",
          "        s.to_uppercase()",
          "    };",
          "    let left: Either<String, usize> = Left(\"longer test string\".into());",
          "    let result = left.map_either_with(&mut sum, f, |_, u| u.to_string());",
          "    assert_eq!(result, Left(\"LONGER TEST STRING\".into()));",
          "    assert_eq!(sum, 21);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]