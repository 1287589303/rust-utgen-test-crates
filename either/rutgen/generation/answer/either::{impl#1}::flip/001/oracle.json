[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), u32> = Right(42);",
          "    let result = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(42));"
        ],
        "code": [
          "{",
          "    let right: Either<(), u32> = Right(42);",
          "    let result = right.flip();",
          "    assert_eq!(result, Left(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), &str> = Right(\"test\");",
          "    let result = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"test\"));"
        ],
        "code": [
          "{",
          "    let right: Either<(), &str> = Right(\"test\");",
          "    let result = right.flip();",
          "    assert_eq!(result, Left(\"test\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), f64> = Right(3.14);",
          "    let result = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(3.14));"
        ],
        "code": [
          "{",
          "    let right: Either<(), f64> = Right(3.14);",
          "    let result = right.flip();",
          "    assert_eq!(result, Left(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), Vec<u8>> = Right(Vec::new());",
          "    let result = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(Vec::new()));"
        ],
        "code": [
          "{",
          "    let right: Either<(), Vec<u8>> = Right(Vec::new());",
          "    let result = right.flip();",
          "    assert_eq!(result, Left(Vec::new()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), char> = Right('a');",
          "    let result = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left('a'));"
        ],
        "code": [
          "{",
          "    let right: Either<(), char> = Right('a');",
          "    let result = right.flip();",
          "    assert_eq!(result, Left('a'));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]