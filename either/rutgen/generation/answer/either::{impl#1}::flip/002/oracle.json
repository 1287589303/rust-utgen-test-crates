[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(123);",
          "    let _ = left.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.flip(), Right(123));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(123);",
          "    let _ = left.flip();",
          "    assert_eq!(left.flip(), Right(123));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"text\"));",
          "    let _ = left.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.flip(), Right(String::from(\"text\")));",
          "    let right: Either<(), String> = Right(String::from(\"value\"));",
          "    assert_eq!(right.flip(), Left(String::from(\"value\")));",
          "    let left_int: Either<i32, ()> = Left(456);",
          "    assert_eq!(left_int.flip(), Right(456));",
          "    let right_float: Either<(), f64> = Right(3.14);",
          "    assert_eq!(right_float.flip(), Left(3.14));",
          "    let left_char: Either<char, ()> = Left('a');",
          "    assert_eq!(left_char.flip(), Right('a'));",
          "    let right_bool: Either<(), bool> = Right(true);",
          "    assert_eq!(right_bool.flip(), Left(true));"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"text\"));",
          "    let _ = left.flip();",
          "    assert_eq!(left.flip(), Right(String::from(\"text\")));",
          "    let right: Either<(), String> = Right(String::from(\"value\"));",
          "    assert_eq!(right.flip(), Left(String::from(\"value\")));",
          "    let left_int: Either<i32, ()> = Left(456);",
          "    assert_eq!(left_int.flip(), Right(456));",
          "    let right_float: Either<(), f64> = Right(3.14);",
          "    assert_eq!(right_float.flip(), Left(3.14));",
          "    let left_char: Either<char, ()> = Left('a');",
          "    assert_eq!(left_char.flip(), Right('a'));",
          "    let right_bool: Either<(), bool> = Right(true);",
          "    assert_eq!(right_bool.flip(), Left(true));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), i32> = Right(456);",
          "    let _ = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Right(456).flip(), Left(456));",
          "    let left: Either<i32, ()> = Left(123);",
          "    assert_eq!(left.flip(), Right(123));",
          "    let right: Either<(), i32> = Right(\"some value\");",
          "    assert_eq!(right.flip(), Left(\"some value\"));",
          "    assert_eq!(Left(789).flip(), Right(789));",
          "    assert_eq!(Left(0).flip(), Right(0));",
          "    assert_eq!(Right(1).flip(), Left(1));"
        ],
        "code": [
          "{",
          "    let right: Either<(), i32> = Right(456);",
          "    let _ = right.flip();",
          "    assert_eq!(Right(456).flip(), Left(456));",
          "    let left: Either<i32, ()> = Left(123);",
          "    assert_eq!(left.flip(), Right(123));",
          "    let right: Either<(), i32> = Right(\"some value\");",
          "    assert_eq!(right.flip(), Left(\"some value\"));",
          "    assert_eq!(Left(789).flip(), Right(789));",
          "    assert_eq!(Left(0).flip(), Right(0));",
          "    assert_eq!(Right(1).flip(), Left(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"another text\"));",
          "    let _ = right.flip();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.flip(), Left(String::from(\"another text\")));",
          "    let left: Either<i32, ()> = Left(456);",
          "    assert_eq!(left.flip(), Right(456));",
          "    let left: Either<u32, ()> = Left(789);",
          "    assert_eq!(left.flip(), Right(789));",
          "    let right: Either<(), &str> = Right(\"test\");",
          "    assert_eq!(right.flip(), Left(\"test\"));",
          "    let right: Either<(), f64> = Right(3.14);",
          "    assert_eq!(right.flip(), Left(3.14));"
        ],
        "code": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"another text\"));",
          "    let _ = right.flip();",
          "    assert_eq!(right.flip(), Left(String::from(\"another text\")));",
          "    let left: Either<i32, ()> = Left(456);",
          "    assert_eq!(left.flip(), Right(456));",
          "    let left: Either<u32, ()> = Left(789);",
          "    assert_eq!(left.flip(), Right(789));",
          "    let right: Either<(), &str> = Right(\"test\");",
          "    assert_eq!(right.flip(), Left(\"test\"));",
          "    let right: Either<(), f64> = Right(3.14);",
          "    assert_eq!(right.flip(), Left(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]