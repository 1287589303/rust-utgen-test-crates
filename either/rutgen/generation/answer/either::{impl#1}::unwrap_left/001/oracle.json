[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, &str> = Right(\"error\");",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(right.unwrap_left());"
        ],
        "code": [
          "{",
          "    let right: Either<i32, &str> = Right(\"error\");",
          "    right.unwrap_left();",
          "    assert_panics!(right.unwrap_left());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, &str> = Right(\"\");",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let right: Either<i32, &str> = Right(\"\");",
          "    right.unwrap_left();",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, &str> = Right(\"\");",
          "    right.unwrap_left();",
          "    assert_eq!(std::panic::catch_unwind(|| {",
          "    let right: Either<i32, &str> = Right(\"\");",
          "    right.unwrap_left();",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(0);",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(right.unwrap_left());"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(0);",
          "    right.unwrap_left();",
          "    assert_panics!(right.unwrap_left());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(-100);",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(test, \"called `Either::unwrap_left()` on a `Right` value: -100\");"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(-100);",
          "    right.unwrap_left();",
          "    assert_panics!(test, \"called `Either::unwrap_left()` on a `Right` value: -100\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, bool> = Right(true);",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_panics!(|| {",
          "    let right: Either<i32, bool> = Right(true);",
          "    right.unwrap_left();",
          "    });"
        ],
        "code": [
          "{",
          "    let right: Either<i32, bool> = Right(true);",
          "    right.unwrap_left();",
          "    assert_panics!(|| {",
          "    let right: Either<i32, bool> = Right(true);",
          "    right.unwrap_left();",
          "    });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, char> = Right('a');",
          "    right.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let right: Either<i32, char> = Right('a');",
          "    right.unwrap_left();",
          "    }).is_err(), true);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, char> = Right('a');",
          "    right.unwrap_left();",
          "    assert_eq!(panic::catch_unwind(|| {",
          "    let right: Either<i32, char> = Right('a');",
          "    right.unwrap_left();",
          "    }).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]