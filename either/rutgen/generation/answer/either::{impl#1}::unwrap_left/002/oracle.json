[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _ = left.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.unwrap_left(), 42);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _ = left.unwrap_left();",
          "    assert_eq!(left.unwrap_left(), 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
          "    let _ = left.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
          "    let left: Either<i32, ()> = Left(10);",
          "    assert_eq!(left.unwrap_left(), 10);",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    assert_eq!(left.unwrap_left(), 3.14);",
          "    let left: Either<char, ()> = Left('A');",
          "    assert_eq!(left.unwrap_left(), 'A');",
          "    let left: Either<Vec<u8>, ()> = Left(vec![1, 2, 3]);",
          "    assert_eq!(left.unwrap_left(), vec![1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
          "    let _ = left.unwrap_left();",
          "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
          "    let left: Either<i32, ()> = Left(10);",
          "    assert_eq!(left.unwrap_left(), 10);",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    assert_eq!(left.unwrap_left(), 3.14);",
          "    let left: Either<char, ()> = Left('A');",
          "    assert_eq!(left.unwrap_left(), 'A');",
          "    let left: Either<Vec<u8>, ()> = Left(vec![1, 2, 3]);",
          "    assert_eq!(left.unwrap_left(), vec![1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _ = left.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.unwrap_left(), 3.14);",
          "    assert!(matches!(left.unwrap_left(), 3.14));",
          "    let left_value = left.unwrap_left();",
          "    assert!(left_value == 3.14);",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.unwrap_left(), 42);",
          "    let left: Either<String, ()> = Left(String::from(\"test\"));",
          "    assert_eq!(left.unwrap_left(), \"test\");",
          "    let left: Either<u32, ()> = Left(100);",
          "    assert!(left.unwrap_left() == 100);"
        ],
        "code": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _ = left.unwrap_left();",
          "    assert_eq!(left.unwrap_left(), 3.14);",
          "    assert!(matches!(left.unwrap_left(), 3.14));",
          "    let left_value = left.unwrap_left();",
          "    assert!(left_value == 3.14);",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.unwrap_left(), 42);",
          "    let left: Either<String, ()> = Left(String::from(\"test\"));",
          "    assert_eq!(left.unwrap_left(), \"test\");",
          "    let left: Either<u32, ()> = Left(100);",
          "    assert!(left.unwrap_left() == 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    let _ = left.unwrap_left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.unwrap_left(), (1, 2));",
          "    assert_eq!(left.unwrap_left(), (1, 2));",
          "    let left: Either<(i32, i32), ()> = Left((3, 4));",
          "    assert_eq!(left.unwrap_left(), (3, 4));",
          "    let left: Either<(String, ()), ()> = Left(String::from(\"Hello\"));",
          "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));"
        ],
        "code": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    let _ = left.unwrap_left();",
          "    assert_eq!(left.unwrap_left(), (1, 2));",
          "    assert_eq!(left.unwrap_left(), (1, 2));",
          "    let left: Either<(i32, i32), ()> = Left((3, 4));",
          "    assert_eq!(left.unwrap_left(), (3, 4));",
          "    let left: Either<(String, ()), ()> = Left(String::from(\"Hello\"));",
          "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]