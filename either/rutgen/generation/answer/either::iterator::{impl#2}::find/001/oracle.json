[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count * 2)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = RightIter { count: 0 };",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));",
          "    assert!(either.find(|&item| item == 3).is_none());",
          "    assert!(either.find(|&item| item == 10).is_none());",
          "    assert!(either.find(|&item| item > 5).is_some());",
          "    assert!(either.find(|&item| item < 10).is_some());",
          "    assert!(either.find(|_| false).is_none());"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count * 2)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = RightIter { count: 0 };",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 4);",
          "    assert_eq!(result, Some(4));",
          "    assert!(either.find(|&item| item == 3).is_none());",
          "    assert!(either.find(|&item| item == 10).is_none());",
          "    assert!(either.find(|&item| item > 5).is_some());",
          "    assert!(either.find(|&item| item < 10).is_some());",
          "    assert!(either.find(|_| false).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count * 2)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = RightIter { count: 0 };",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));",
          "    let result = either.find(|&item| item == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either.find(|&item| item == 6);",
          "    assert_eq!(result, Some(6));",
          "    let result = either.find(|&item| item == 8);",
          "    assert_eq!(result, Some(8));",
          "    let result = either.find(|&item| item == 10);",
          "    assert_eq!(result, Some(10));",
          "    let result = either.find(|&item| item == 12);",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 5 {",
          "                self.count += 1;",
          "                Some(self.count * 2)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = RightIter { count: 0 };",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 10);",
          "    assert_eq!(result, None);",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));",
          "    let result = either.find(|&item| item == 4);",
          "    assert_eq!(result, Some(4));",
          "    let result = either.find(|&item| item == 6);",
          "    assert_eq!(result, Some(6));",
          "    let result = either.find(|&item| item == 8);",
          "    assert_eq!(result, Some(8));",
          "    let result = either.find(|&item| item == 10);",
          "    assert_eq!(result, Some(10));",
          "    let result = either.find(|&item| item == 12);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct EmptyRightIter;",
          "",
          "    impl Iterator for EmptyRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = EmptyRightIter;",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let either = Either::Left(left);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));",
          "    let right = LeftIter { count: 0 };",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 1);",
          "    assert_eq!(result, None);",
          "    let right = LeftIter { count: 1 };",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count < 3 {",
          "                self.count += 1;",
          "                Some(self.count)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct EmptyRightIter;",
          "",
          "    impl Iterator for EmptyRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let left = LeftIter { count: 0 };",
          "    let right = EmptyRightIter;",
          "    let either = Either::Right(right);",
          "",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, None);",
          "    let either = Either::Left(left);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));",
          "    let right = LeftIter { count: 0 };",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 1);",
          "    assert_eq!(result, None);",
          "    let right = LeftIter { count: 1 };",
          "    let either = Either::Right(right);",
          "    let result = either.find(|&item| item == 2);",
          "    assert_eq!(result, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]