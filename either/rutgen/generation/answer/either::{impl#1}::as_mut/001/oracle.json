[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        value: u32,",
          "    }",
          "",
          "    let mut right = Right(TestStruct { value: 123 });",
          "    let result: Either<&mut TestStruct, &mut ()> = right.as_mut();",
          "    let right_value: &mut TestStruct = result.right().unwrap();",
          "    right_value.value = 999;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right(TestStruct { value: 999 }));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert!(result.right().is_some());",
          "    let right_value: &mut TestStruct = result.right().unwrap();",
          "    assert_eq!(right_value.value, 999);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        value: u32,",
          "    }",
          "",
          "    let mut right = Right(TestStruct { value: 123 });",
          "    let result: Either<&mut TestStruct, &mut ()> = right.as_mut();",
          "    let right_value: &mut TestStruct = result.right().unwrap();",
          "    right_value.value = 999;",
          "    assert_eq!(right, Right(TestStruct { value: 999 }));",
          "    assert!(matches!(result, Either::Right(_)));",
          "    assert!(result.right().is_some());",
          "    let right_value: &mut TestStruct = result.right().unwrap();",
          "    assert_eq!(right_value.value, 999);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyStruct;",
          "",
          "    let mut right = Right(EmptyStruct);",
          "    let result: Either<&mut EmptyStruct, &mut ()> = right.as_mut();",
          "    let _right_value: &mut EmptyStruct = result.right().unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.as_mut(), Right(&mut EmptyStruct));",
          "    assert!(right.is_right());",
          "    assert!(!right.is_left());",
          "    assert!(matches!(result, Right(_)));",
          "    assert!(result.right().is_some());",
          "    assert!(result.left().is_none());",
          "    assert_eq!(result.right().unwrap(), &mut EmptyStruct);"
        ],
        "code": [
          "{",
          "    struct EmptyStruct;",
          "",
          "    let mut right = Right(EmptyStruct);",
          "    let result: Either<&mut EmptyStruct, &mut ()> = right.as_mut();",
          "    let _right_value: &mut EmptyStruct = result.right().unwrap();",
          "    assert_eq!(right.as_mut(), Right(&mut EmptyStruct));",
          "    assert!(right.is_right());",
          "    assert!(!right.is_left());",
          "    assert!(matches!(result, Right(_)));",
          "    assert!(result.right().is_some());",
          "    assert!(result.left().is_none());",
          "    assert_eq!(result.right().unwrap(), &mut EmptyStruct);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right = Right(String::from(\"initial\"));",
          "    let result: Either<&mut String, &mut ()> = right.as_mut();",
          "    let right_value: &mut String = result.right().unwrap();",
          "    right_value.push_str(\" updated\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right(String::from(\"initial updated\")));",
          "    assert!(result.is_right());",
          "    assert!(result.right().is_some());",
          "    assert!(result.left().is_none());",
          "    assert_eq!(result.right().unwrap(), &mut \"initial updated\".to_string());"
        ],
        "code": [
          "{",
          "    let mut right = Right(String::from(\"initial\"));",
          "    let result: Either<&mut String, &mut ()> = right.as_mut();",
          "    let right_value: &mut String = result.right().unwrap();",
          "    right_value.push_str(\" updated\");",
          "    assert_eq!(right, Right(String::from(\"initial updated\")));",
          "    assert!(result.is_right());",
          "    assert!(result.right().is_some());",
          "    assert!(result.left().is_none());",
          "    assert_eq!(result.right().unwrap(), &mut \"initial updated\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]