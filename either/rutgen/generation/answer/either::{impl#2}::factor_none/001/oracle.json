[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Option<i32>, Option<i32>> = Right(None);",
          "    right.factor_none();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_none(), None);"
        ],
        "code": [
          "{",
          "    let right: Either<Option<i32>, Option<i32>> = Right(None);",
          "    right.factor_none();",
          "    assert_eq!(right.factor_none(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Option<()>, Option<()>> = Right(Some(()));",
          "    right.factor_none();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_none(), Some(Right(())));"
        ],
        "code": [
          "{",
          "    let right: Either<Option<()>, Option<()>> = Right(Some(()));",
          "    right.factor_none();",
          "    assert_eq!(right.factor_none(), Some(Right(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Option<i32>, Option<i32>> = Right(Some(42));",
          "    right.factor_none();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_none(), Some(Right(42)));"
        ],
        "code": [
          "{",
          "    let right: Either<Option<i32>, Option<i32>> = Right(Some(42));",
          "    right.factor_none();",
          "    assert_eq!(right.factor_none(), Some(Right(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Option<String>, Option<String>> = Right(Some(String::from(\"hello\")));",
          "    right.factor_none();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_none(), Some(Right(String::from(\"hello\"))));"
        ],
        "code": [
          "{",
          "    let right: Either<Option<String>, Option<String>> = Right(Some(String::from(\"hello\")));",
          "    right.factor_none();",
          "    assert_eq!(right.factor_none(), Some(Right(String::from(\"hello\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Option<Vec<u8>>, Option<Vec<u8>>> = Right(Some(vec![1, 2, 3]));",
          "    right.factor_none();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.factor_none(), Some(Right(vec![1, 2, 3])));"
        ],
        "code": [
          "{",
          "    let right: Either<Option<Vec<u8>>, Option<Vec<u8>>> = Right(Some(vec![1, 2, 3]));",
          "    right.factor_none();",
          "    assert_eq!(right.factor_none(), Some(Right(vec![1, 2, 3])));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]