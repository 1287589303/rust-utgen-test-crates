[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIterator {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(3));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![1, 2]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![1]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), None);"
        ],
        "code": [
          "{",
          "    struct LeftIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIterator {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(3));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![1, 2]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![1]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    ",
          "    let left_iter = LeftIterator::new(vec![]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    assert_eq!(iter.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIteratorBoundary {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIteratorBoundary {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIteratorBoundary {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIteratorBoundary::new(vec![42]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(42));",
          "    assert_eq!(iter.inner, Either::Left(LeftIteratorBoundary { data: vec![42], index: 0 }));",
          "    assert!(iter.inner.is_left());",
          "    assert!(iter.inner.left().unwrap().next_back().is_none());"
        ],
        "code": [
          "{",
          "    struct LeftIteratorBoundary {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIteratorBoundary {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIteratorBoundary {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIteratorBoundary::new(vec![42]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(42));",
          "    assert_eq!(iter.inner, Either::Left(LeftIteratorBoundary { data: vec![42], index: 0 }));",
          "    assert!(iter.inner.is_left());",
          "    assert!(iter.inner.left().unwrap().next_back().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIteratorEmpty {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIteratorEmpty {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIteratorEmpty {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIteratorEmpty::new(vec![]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    let left_iter = LeftIteratorEmpty::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(3));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct LeftIteratorEmpty {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl LeftIteratorEmpty {",
          "        fn new(data: Vec<i32>) -> Self {",
          "            Self { data, index: data.len() }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for LeftIteratorEmpty {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn len(&self) -> usize {",
          "            self.data.len()",
          "        }",
          "    }",
          "",
          "    let left_iter = LeftIteratorEmpty::new(vec![]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);",
          "    let left_iter = LeftIteratorEmpty::new(vec![1, 2, 3]);",
          "    let inner = Either::Left(left_iter);",
          "    let mut iter = IterEither { inner };",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(3));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(2));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "    let result = iter.next_back();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]