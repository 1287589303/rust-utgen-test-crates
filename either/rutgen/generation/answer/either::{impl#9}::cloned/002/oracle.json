[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: i32 = 42;",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(42));"
        ],
        "code": [
          "{",
          "    let value: i32 = 42;",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "    assert_eq!(result, Either::Left(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: String = String::from(\"hello\");",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(String::from(\"hello\")));"
        ],
        "code": [
          "{",
          "    let value: String = String::from(\"hello\");",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "    assert_eq!(result, Either::Left(String::from(\"hello\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Vec<i32> = vec![1, 2, 3];",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let value: Vec<i32> = vec![1, 2, 3];",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "    assert_eq!(result, Either::Left(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct MyStruct {",
          "        data: i32,",
          "    }",
          "    let value = MyStruct { data: 10 };",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Either::Left(MyStruct { data: 10 }));"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct MyStruct {",
          "        data: i32,",
          "    }",
          "    let value = MyStruct { data: 10 };",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "    assert_eq!(result, Either::Left(MyStruct { data: 10 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: (i32, &str) = (42, \"tuple\");",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Either::Left((42, \"tuple\"))));"
        ],
        "code": [
          "{",
          "    let value: (i32, &str) = (42, \"tuple\");",
          "    let either = Either::Left(&mut value);",
          "    let result = either.cloned();",
          "    assert!(matches!(result, Either::Left((42, \"tuple\"))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]