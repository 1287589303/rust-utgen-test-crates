[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<&[&str; 1], Vec<u8>> = Left([\"hello\"]);",
          "    let iter = left.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Left(&\"hello\")]);"
        ],
        "code": [
          "{",
          "    let left: Either<&[&str; 1], Vec<u8>> = Left([\"hello\"]);",
          "    let iter = left.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "    assert_eq!(result, vec![Left(&\"hello\")]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<[&str; 2], Vec<u8>> = Right(vec![0, 1]);",
          "    let iter = right.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Right(&0), Right(&1)]);",
          "    ",
          "    let left: Either<_, Vec<u8>> = Left([\"hello\"]);",
          "    let left_iter = left.factor_iter();",
          "    assert_eq!(left_iter.next(), Some(Left(&\"hello\")));"
        ],
        "code": [
          "{",
          "    let right: Either<[&str; 2], Vec<u8>> = Right(vec![0, 1]);",
          "    let iter = right.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "    assert_eq!(result, vec![Right(&0), Right(&1)]);",
          "    ",
          "    let left: Either<_, Vec<u8>> = Left([\"hello\"]);",
          "    let left_iter = left.factor_iter();",
          "    assert_eq!(left_iter.next(), Some(Left(&\"hello\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let both: Either<&[&str; 2], Vec<u8>> = Left([\"hello\", \"world\"]);",
          "    let iter = both.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Left(&\"hello\"), Left(&\"world\")]);"
        ],
        "code": [
          "{",
          "    let both: Either<&[&str; 2], Vec<u8>> = Left([\"hello\", \"world\"]);",
          "    let iter = both.factor_iter();",
          "    let result: Vec<_> = iter.collect();",
          "    assert_eq!(result, vec![Left(&\"hello\"), Left(&\"world\")]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]