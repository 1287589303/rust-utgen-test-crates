[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value: &[i32] = &[];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, left_value);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    let right_value: &[i32] = &[1, 2, 3];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);",
          "    assert_eq!(result.len(), 3);",
          "    assert!(!result.is_empty());"
        ],
        "code": [
          "{",
          "    let left_value: &[i32] = &[];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, left_value);",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    let right_value: &[i32] = &[1, 2, 3];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);",
          "    assert_eq!(result.len(), 3);",
          "    assert!(!result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value: &[i32] = &[42];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, left_value);",
          "    assert!(matches!(either, Either::Left(_)));",
          "    let right_value: &[i32] = &[7];",
          "    let either_right = Either::Right(right_value);",
          "    let result_right = either_right.as_ref();",
          "    assert_eq!(result_right, right_value);",
          "    assert!(matches!(either_right, Either::Right(_)));"
        ],
        "code": [
          "{",
          "    let left_value: &[i32] = &[42];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, left_value);",
          "    assert!(matches!(either, Either::Left(_)));",
          "    let right_value: &[i32] = &[7];",
          "    let either_right = Either::Right(right_value);",
          "    let result_right = either_right.as_ref();",
          "    assert_eq!(result_right, right_value);",
          "    assert!(matches!(either_right, Either::Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value: &[i32] = &[1, 2, 3];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, left_value);",
          "    assert!(matches!(either, Either::Left(_)));"
        ],
        "code": [
          "{",
          "    let left_value: &[i32] = &[1, 2, 3];",
          "    let either = Either::Left(left_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, left_value);",
          "    assert!(matches!(either, Either::Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value: &[i32] = &[];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, right_value);",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), right_value.len());",
          "    assert!(matches!(either.as_ref(), &[]));"
        ],
        "code": [
          "{",
          "    let right_value: &[i32] = &[];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(result.is_empty());",
          "    assert_eq!(result.len(), right_value.len());",
          "    assert!(matches!(either.as_ref(), &[]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value: &[i32] = &[99];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, right_value);",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(either.as_ref(), &[99]));",
          "    assert!(result.len() == 1);",
          "    assert!(result[0] == 99);"
        ],
        "code": [
          "{",
          "    let right_value: &[i32] = &[99];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(either.as_ref(), &[99]));",
          "    assert!(result.len() == 1);",
          "    assert!(result[0] == 99);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value: &[i32] = &[5, 10, 15];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "}"
        ],
        "oracle": [
          "    let right_value: &[i32] = &[5, 10, 15];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);"
        ],
        "code": [
          "{",
          "    let right_value: &[i32] = &[5, 10, 15];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    let right_value: &[i32] = &[5, 10, 15];",
          "    let either = Either::Right(right_value);",
          "    let result = either.as_ref();",
          "    assert_eq!(result, right_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]