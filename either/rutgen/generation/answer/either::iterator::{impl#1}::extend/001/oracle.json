[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let empty_iter: Vec<i32> = vec![];",
          "    either.extend(empty_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let empty_iter: Vec<i32> = vec![];",
          "    either.extend(empty_iter);",
          "    assert_eq!(either, Either::Right(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let single_item_iter = vec![4];",
          "    either.extend(single_item_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4]));"
        ],
        "code": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let single_item_iter = vec![4];",
          "    either.extend(single_item_iter);",
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let multiple_items_iter = vec![4, 5, 6];",
          "    either.extend(multiple_items_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4, 5, 6]));"
        ],
        "code": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let multiple_items_iter = vec![4, 5, 6];",
          "    either.extend(multiple_items_iter);",
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 4, 5, 6]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let large_iter = (7..=1000).collect::<Vec<i32>>();",
          "    either.extend(large_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 7, 8, 9, ..., 1000]));"
        ],
        "code": [
          "{",
          "    let mut either = Either::Right(vec![1, 2, 3]);",
          "    let large_iter = (7..=1000).collect::<Vec<i32>>();",
          "    either.extend(large_iter);",
          "    assert_eq!(either, Either::Right(vec![1, 2, 3, 7, 8, 9, ..., 1000]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut either = Either::Right(vec![\"A\", \"B\"]);",
          "    let varied_iter = vec![\"C\", \"D\", \"E\"];",
          "    either.extend(varied_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(vec![\"A\", \"B\", \"C\", \"D\", \"E\"]));"
        ],
        "code": [
          "{",
          "    let mut either = Either::Right(vec![\"A\", \"B\"]);",
          "    let varied_iter = vec![\"C\", \"D\", \"E\"];",
          "    either.extend(varied_iter);",
          "    assert_eq!(either, Either::Right(vec![\"A\", \"B\", \"C\", \"D\", \"E\"]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]