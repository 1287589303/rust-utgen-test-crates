[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![1, 2, 3] });",
          "    let iter = vec![4, 5, 6];",
          "    left.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2, 3, 4, 5, 6] }));"
        ],
        "code": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![1, 2, 3] });",
          "    let iter = vec![4, 5, 6];",
          "    left.extend(iter);",
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2, 3, 4, 5, 6] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![1] });",
          "    let iter = vec![2];",
          "    left.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2] }));"
        ],
        "code": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![1] });",
          "    let iter = vec![2];",
          "    left.extend(iter);",
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![1, 2] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![10, 20, 30] });",
          "    let iter = (1..=100).collect::<Vec<i32>>();",
          "    left.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![10, 20, 30, 1, 2, 3, ..., 100] }));"
        ],
        "code": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![10, 20, 30] });",
          "    let iter = (1..=100).collect::<Vec<i32>>();",
          "    left.extend(iter);",
          "    assert_eq!(left, Either::Left(LeftCollection { items: vec![10, 20, 30, 1, 2, 3, ..., 100] }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![5] });",
          "    let iter = vec![10, 15];",
          "    left.extend(iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.items, vec![5, 10, 15]);",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(left.items.len() == 3);"
        ],
        "code": [
          "{",
          "    struct LeftCollection {",
          "        items: Vec<i32>,",
          "    }",
          "",
          "    impl Extend<i32> for LeftCollection {",
          "        fn extend<T>(&mut self, iter: T)",
          "        where",
          "            T: IntoIterator<Item = i32>,",
          "        {",
          "            self.items.extend(iter);",
          "        }",
          "    }",
          "",
          "    let mut left = Either::Left(LeftCollection { items: vec![5] });",
          "    let iter = vec![10, 15];",
          "    left.extend(iter);",
          "    assert_eq!(left.items, vec![5, 10, 15]);",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(left.items.len() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]