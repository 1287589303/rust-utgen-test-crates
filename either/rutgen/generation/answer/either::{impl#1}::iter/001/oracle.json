[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u32>, _> = Right(vec![1, 2, 3]);",
          "    let mut all = vec![0];",
          "    all.extend(right.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(all, vec![0, 1, 2, 3]);",
          "    let right_empty: Either<Vec<u32>, _> = Right(vec![]);",
          "    let mut all_empty = vec![0];",
          "    all_empty.extend(right_empty.iter());",
          "    assert_eq!(all_empty, vec![0]);",
          "    let right_single: Either<Vec<u32>, _> = Right(vec![99]);",
          "    let mut all_single = vec![0];",
          "    all_single.extend(right_single.iter());",
          "    assert_eq!(all_single, vec![0, 99]);",
          "    let left_empty: Either<_, &[u32]> = Left(vec![]);",
          "    let right_mixed: Either<_, &[u32]> = Right(&[4, 5]);",
          "    let mut all_mixed = vec![0];",
          "    all_mixed.extend(left_empty.iter());",
          "    all_mixed.extend(right_mixed.iter());",
          "    assert_eq!(all_mixed, vec![0, 4, 5]);",
          "    let left_non_empty: Either<_, &[u32]> = Left(vec![2, 3]);",
          "    let right_mixed_non_empty: Either<_, &[u32]> = Right(&[4, 5]);",
          "    let mut all_non_empty = vec![1];",
          "    all_non_empty.extend(left_non_empty.iter());",
          "    all_non_empty.extend(right_mixed_non_empty.iter());",
          "    assert_eq!(all_non_empty, vec![1, 2, 3, 4, 5]);"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u32>, _> = Right(vec![1, 2, 3]);",
          "    let mut all = vec![0];",
          "    all.extend(right.iter());",
          "    assert_eq!(all, vec![0, 1, 2, 3]);",
          "    let right_empty: Either<Vec<u32>, _> = Right(vec![]);",
          "    let mut all_empty = vec![0];",
          "    all_empty.extend(right_empty.iter());",
          "    assert_eq!(all_empty, vec![0]);",
          "    let right_single: Either<Vec<u32>, _> = Right(vec![99]);",
          "    let mut all_single = vec![0];",
          "    all_single.extend(right_single.iter());",
          "    assert_eq!(all_single, vec![0, 99]);",
          "    let left_empty: Either<_, &[u32]> = Left(vec![]);",
          "    let right_mixed: Either<_, &[u32]> = Right(&[4, 5]);",
          "    let mut all_mixed = vec![0];",
          "    all_mixed.extend(left_empty.iter());",
          "    all_mixed.extend(right_mixed.iter());",
          "    assert_eq!(all_mixed, vec![0, 4, 5]);",
          "    let left_non_empty: Either<_, &[u32]> = Left(vec![2, 3]);",
          "    let right_mixed_non_empty: Either<_, &[u32]> = Right(&[4, 5]);",
          "    let mut all_non_empty = vec![1];",
          "    all_non_empty.extend(left_non_empty.iter());",
          "    all_non_empty.extend(right_mixed_non_empty.iter());",
          "    assert_eq!(all_non_empty, vec![1, 2, 3, 4, 5]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, &[u32]> = Left(vec![4, 5]);",
          "    let right: Either<Vec<u32>, _> = Right(&[1, 2, 3][..]);",
          "    let mut all = vec![0];",
          "    all.extend(left.iter());",
          "    all.extend(right.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(all, vec![0, 4, 5, 1, 2, 3]);"
        ],
        "code": [
          "{",
          "    let left: Either<_, &[u32]> = Left(vec![4, 5]);",
          "    let right: Either<Vec<u32>, _> = Right(&[1, 2, 3][..]);",
          "    let mut all = vec![0];",
          "    all.extend(left.iter());",
          "    all.extend(right.iter());",
          "    assert_eq!(all, vec![0, 4, 5, 1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]