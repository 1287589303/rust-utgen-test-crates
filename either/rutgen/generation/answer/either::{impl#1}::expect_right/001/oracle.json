[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), i32> = Right(3);",
          "    right.expect_right(\"value was Left\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.expect_right(\"value was Left\"), 3);"
        ],
        "code": [
          "{",
          "    let right: Either<(), i32> = Right(3);",
          "    right.expect_right(\"value was Left\");",
          "    assert_eq!(right.expect_right(\"value was Left\"), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"Hello\"));",
          "    right.expect_right(\"value was Left\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.expect_right(\"value was Left\"), String::from(\"Hello\"));",
          "    let right_empty: Either<(), String> = Right(String::from(\"\"));",
          "    assert_eq!(right_empty.expect_right(\"value was Left\"), String::from(\"\"));",
          "    let right_num: Either<(), String> = Right(String::from(\"42\"));",
          "    assert_eq!(right_num.expect_right(\"value was Left\"), String::from(\"42\"));",
          "    let right_special: Either<(), String> = Right(String::from(\"@#$%^&*\"));",
          "    assert_eq!(right_special.expect_right(\"value was Left\"), String::from(\"@#$%^&*\"));"
        ],
        "code": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"Hello\"));",
          "    right.expect_right(\"value was Left\");",
          "    assert_eq!(right.expect_right(\"value was Left\"), String::from(\"Hello\"));",
          "    let right_empty: Either<(), String> = Right(String::from(\"\"));",
          "    assert_eq!(right_empty.expect_right(\"value was Left\"), String::from(\"\"));",
          "    let right_num: Either<(), String> = Right(String::from(\"42\"));",
          "    assert_eq!(right_num.expect_right(\"value was Left\"), String::from(\"42\"));",
          "    let right_special: Either<(), String> = Right(String::from(\"@#$%^&*\"));",
          "    assert_eq!(right_special.expect_right(\"value was Left\"), String::from(\"@#$%^&*\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct TestStruct {",
          "        id: i32,",
          "        name: String,",
          "    }",
          "    let right: Either<(), TestStruct> = Right(TestStruct { id: 1, name: String::from(\"Test\") });",
          "    right.expect_right(\"value was Left\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.expect_right(\"value was Left\"), TestStruct { id: 1, name: String::from(\"Test\") });",
          "    let left: Either<i32, ()> = Left(3);",
          "    assert_panics!(left.expect_right(\"value was Right\"), \"value was Left: 3\");"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct TestStruct {",
          "        id: i32,",
          "        name: String,",
          "    }",
          "    let right: Either<(), TestStruct> = Right(TestStruct { id: 1, name: String::from(\"Test\") });",
          "    right.expect_right(\"value was Left\");",
          "    assert_eq!(right.expect_right(\"value was Left\"), TestStruct { id: 1, name: String::from(\"Test\") });",
          "    let left: Either<i32, ()> = Left(3);",
          "    assert_panics!(left.expect_right(\"value was Right\"), \"value was Left: 3\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: 3\")]"
        ],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Left(3).expect_right(\"value was Left\"), panic!(\"value was Left: {:?}\", 3));",
          "    assert_eq!(Right(5).expect_right(\"value was Right\"), 5);",
          "    assert_eq!(Right(-1).expect_right(\"value was Left\"), -1);",
          "    assert_eq!(Right(0).expect_right(\"value was Left\"), 0);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.expect_right(\"value was Right\");",
          "    assert_eq!(Left(3).expect_right(\"value was Left\"), panic!(\"value was Left: {:?}\", 3));",
          "    assert_eq!(Right(5).expect_right(\"value was Right\"), 5);",
          "    assert_eq!(Right(-1).expect_right(\"value was Left\"), -1);",
          "    assert_eq!(Right(0).expect_right(\"value was Left\"), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: Hello\")]"
        ],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_right(\"value was Right\"), panic!(\"value was Right: Hello\"));",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.unwrap_right(), panic!(\"value was Right: Hello\"));",
          "    assert_eq!(left.expect_left(\"value was Right\"), String::from(\"Hello\"));"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
          "    left.expect_right(\"value was Right\");",
          "    assert_eq!(left.expect_right(\"value was Right\"), panic!(\"value was Right: Hello\"));",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.unwrap_right(), panic!(\"value was Right: Hello\"));",
          "    assert_eq!(left.expect_left(\"value was Right\"), String::from(\"Hello\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]