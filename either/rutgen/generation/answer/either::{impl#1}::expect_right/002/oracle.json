[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: 3\")]"
        ],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_right(\"value was Right\"), Err(\"value was Right: 3\"));",
          "    assert!(matches!(left, Either::Left(_)));",
          "    let panic_msg = std::panic::catch_unwind(|| { left.expect_right(\"value was Right\") });",
          "    assert!(panic_msg.is_err());",
          "    assert_eq!(panic_msg.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(3);",
          "    left.expect_right(\"value was Right\");",
          "    assert_eq!(left.expect_right(\"value was Right\"), Err(\"value was Right: 3\"));",
          "    assert!(matches!(left, Either::Left(_)));",
          "    let panic_msg = std::panic::catch_unwind(|| { left.expect_right(\"value was Right\") });",
          "    assert!(panic_msg.is_err());",
          "    assert_eq!(panic_msg.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: test\")]"
        ],
        "prefix": [
          "{",
          "    let left: Either<&str, ()> = Left(\"test\");",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_panics!(left.expect_right(\"value was Right\"), \"value was Right: test\");"
        ],
        "code": [
          "{",
          "    let left: Either<&str, ()> = Left(\"test\");",
          "    left.expect_right(\"value was Right\");",
          "    assert_panics!(left.expect_right(\"value was Right\"), \"value was Right: test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: MyDebug\")]"
        ],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyDebug;",
          "",
          "    let left: Either<MyDebug, ()> = Left(MyDebug);",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_right(\"value was Right\"), panic!(\"value was Right: MyDebug\"));"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyDebug;",
          "",
          "    let left: Either<MyDebug, ()> = Left(MyDebug);",
          "    left.expect_right(\"value was Right\");",
          "    assert_eq!(left.expect_right(\"value was Right\"), panic!(\"value was Right: MyDebug\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: (1, 2)\")]"
        ],
        "prefix": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.expect_right(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_right(\"value was Right\"), None); // This line is expected to panic.",
          "    assert_eq!(panic!(\"value was Right: {:?}\", left.unwrap_left()); // ensures a panic on Left with debug output.",
          "    assert!(matches!(left, Either::Left(_))); // verifies that the value is indeed Left."
        ],
        "code": [
          "{",
          "    let left: Either<(i32, i32), ()> = Left((1, 2));",
          "    left.expect_right(\"value was Right\");",
          "    assert_eq!(left.expect_right(\"value was Right\"), None); // This line is expected to panic.",
          "    assert_eq!(panic!(\"value was Right: {:?}\", left.unwrap_left()); // ensures a panic on Left with debug output.",
          "    assert!(matches!(left, Either::Left(_))); // verifies that the value is indeed Left.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]