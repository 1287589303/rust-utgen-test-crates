[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [i32]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, u8>();",
          "}"
        ],
        "oracle": [
          "    check_array_ref::<Either<ArrayRef1, ArrayRef2>, _>();"
        ],
        "code": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [i32]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, u8>();",
          "    check_array_ref::<Either<ArrayRef1, ArrayRef2>, _>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [f64]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, f64>();",
          "}"
        ],
        "oracle": [
          "    check_array_ref::<Either<ArrayRef1<'_>, ArrayRef2<'_>>, f64>();"
        ],
        "code": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [f64]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, f64>();",
          "    check_array_ref::<Either<ArrayRef1<'_>, ArrayRef2<'_>>, f64>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ArrayMut1<'a>(&'a mut [u8]);",
          "    struct ArrayMut2<'a>(&'a mut [i32]);",
          "",
          "    fn check_array_mut<T: AsMut<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {",
          "        check_array_mut::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, u8>();",
          "}"
        ],
        "oracle": [
          "    check_array_mut::<Either<ArrayMut1, ArrayMut2>, _>();",
          "    check_array_mut::<Either<ArrayMut2, ArrayMut1>, _>();",
          "    check_array_mut::<Either<ArrayMut1, ArrayMut1>, _>();",
          "    check_array_mut::<Either<ArrayMut2, ArrayMut2>, _>();",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, u8>();",
          "    propagate_array_mut::<ArrayMut2, ArrayMut1, u8>();",
          "    propagate_array_mut::<ArrayMut1, ArrayMut1, u8>();",
          "    propagate_array_mut::<ArrayMut2, ArrayMut2, u8>();"
        ],
        "code": [
          "{",
          "    struct ArrayMut1<'a>(&'a mut [u8]);",
          "    struct ArrayMut2<'a>(&'a mut [i32]);",
          "",
          "    fn check_array_mut<T: AsMut<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {",
          "        check_array_mut::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, u8>();",
          "    check_array_mut::<Either<ArrayMut1, ArrayMut2>, _>();",
          "    check_array_mut::<Either<ArrayMut2, ArrayMut1>, _>();",
          "    check_array_mut::<Either<ArrayMut1, ArrayMut1>, _>();",
          "    check_array_mut::<Either<ArrayMut2, ArrayMut2>, _>();",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, u8>();",
          "    propagate_array_mut::<ArrayMut2, ArrayMut1, u8>();",
          "    propagate_array_mut::<ArrayMut1, ArrayMut1, u8>();",
          "    propagate_array_mut::<ArrayMut2, ArrayMut2, u8>();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ArrayMut1<'a>(&'a mut [u8]);",
          "    struct ArrayMut2<'a>(&'a mut [f64]);",
          "",
          "    fn check_array_mut<T: AsMut<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {",
          "        check_array_mut::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, f64>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(propagate_array_mut::<ArrayMut1, ArrayMut2, f64>(), expected_value);",
          "    assert!(std::mem::size_of::<ArrayMut1>() > 0);",
          "    assert!(std::mem::size_of::<ArrayMut2>() > 0);",
          "    let array1 = &mut [1u8; 5];",
          "    let array2 = &mut [1.0f64; 5];",
          "    let array_mut1 = ArrayMut1(array1);",
          "    let array_mut2 = ArrayMut2(array2);",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, f64>();",
          "    assert!(std::any::TypeId::of::<ArrayMut1>() == std::any::TypeId::of::<ArrayMut1>());",
          "    assert!(std::any::TypeId::of::<ArrayMut2>() == std::any::TypeId::of::<ArrayMut2>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayMut1, ArrayMut2>>() != std::any::TypeId::of::<ArrayMut1>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayMut1, ArrayMut2>>() != std::any::TypeId::of::<ArrayMut2>());"
        ],
        "code": [
          "{",
          "    struct ArrayMut1<'a>(&'a mut [u8]);",
          "    struct ArrayMut2<'a>(&'a mut [f64]);",
          "",
          "    fn check_array_mut<T: AsMut<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {",
          "        check_array_mut::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, f64>();",
          "    assert_eq!(propagate_array_mut::<ArrayMut1, ArrayMut2, f64>(), expected_value);",
          "    assert!(std::mem::size_of::<ArrayMut1>() > 0);",
          "    assert!(std::mem::size_of::<ArrayMut2>() > 0);",
          "    let array1 = &mut [1u8; 5];",
          "    let array2 = &mut [1.0f64; 5];",
          "    let array_mut1 = ArrayMut1(array1);",
          "    let array_mut2 = ArrayMut2(array2);",
          "    propagate_array_mut::<ArrayMut1, ArrayMut2, f64>();",
          "    assert!(std::any::TypeId::of::<ArrayMut1>() == std::any::TypeId::of::<ArrayMut1>());",
          "    assert!(std::any::TypeId::of::<ArrayMut2>() == std::any::TypeId::of::<ArrayMut2>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayMut1, ArrayMut2>>() != std::any::TypeId::of::<ArrayMut1>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayMut1, ArrayMut2>>() != std::any::TypeId::of::<ArrayMut2>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [i32]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    let empty_u8: &[u8] = &[];",
          "    let empty_i32: &[i32] = &[];",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, u8>();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(propagate_array_ref::<ArrayRef1, ArrayRef2, u8>(), ());",
          "    assert!(std::mem::size_of::<ArrayRef1>() > 0);",
          "    assert!(std::mem::size_of::<ArrayRef2>() > 0);",
          "    assert!(std::any::TypeId::of::<ArrayRef1>() != std::any::TypeId::of::<ArrayRef2>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayRef1, ArrayRef2>>() != std::any::TypeId::of::<ArrayRef1>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayRef1, ArrayRef2>>() != std::any::TypeId::of::<ArrayRef2>());",
          "    assert!(empty_u8.len() == 0);",
          "    assert!(empty_i32.len() == 0);"
        ],
        "code": [
          "{",
          "    struct ArrayRef1<'a>(&'a [u8]);",
          "    struct ArrayRef2<'a>(&'a [i32]);",
          "",
          "    fn check_array_ref<T: AsRef<[Item]>, Item>() {}",
          "",
          "    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {",
          "        check_array_ref::<Either<T1, T2>, _>()",
          "    }",
          "",
          "    let empty_u8: &[u8] = &[];",
          "    let empty_i32: &[i32] = &[];",
          "",
          "    propagate_array_ref::<ArrayRef1, ArrayRef2, u8>();",
          "    assert_eq!(propagate_array_ref::<ArrayRef1, ArrayRef2, u8>(), ());",
          "    assert!(std::mem::size_of::<ArrayRef1>() > 0);",
          "    assert!(std::mem::size_of::<ArrayRef2>() > 0);",
          "    assert!(std::any::TypeId::of::<ArrayRef1>() != std::any::TypeId::of::<ArrayRef2>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayRef1, ArrayRef2>>() != std::any::TypeId::of::<ArrayRef1>());",
          "    assert!(std::any::TypeId::of::<Either<ArrayRef1, ArrayRef2>>() != std::any::TypeId::of::<ArrayRef2>());",
          "    assert!(empty_u8.len() == 0);",
          "    assert!(empty_i32.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]