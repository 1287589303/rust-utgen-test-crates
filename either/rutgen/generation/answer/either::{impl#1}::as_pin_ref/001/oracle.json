[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "",
          "    let value = Right(TestStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&TestStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Right(Pin::new_unchecked(&TestStruct)));",
          "    assert!(matches!(_result, Right(_)));",
          "    assert!(!_result.is_left());",
          "    assert!(_result.is_right());",
          "    assert!(std::ptr::eq(Pin::get_ref(&_result).0.as_ref(), &TestStruct));"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "",
          "    let value = Right(TestStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&TestStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "    assert_eq!(_result, Right(Pin::new_unchecked(&TestStruct)));",
          "    assert!(matches!(_result, Right(_)));",
          "    assert!(!_result.is_left());",
          "    assert!(_result.is_right());",
          "    assert!(std::ptr::eq(Pin::get_ref(&_result).0.as_ref(), &TestStruct));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherStruct;",
          "",
          "    let value = Right(AnotherStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&AnotherStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "}"
        ],
        "oracle": [
          "    assert!(pinned_value.as_pin_ref().is_right());",
          "    assert_eq!(pinned_value.as_pin_ref().right(), Some(Pin::new_unchecked(&AnotherStruct)));",
          "    assert!(matches!(pinned_value.as_pin_ref(), Right(_)));"
        ],
        "code": [
          "{",
          "    struct AnotherStruct;",
          "",
          "    let value = Right(AnotherStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&AnotherStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "    assert!(pinned_value.as_pin_ref().is_right());",
          "    assert_eq!(pinned_value.as_pin_ref().right(), Some(Pin::new_unchecked(&AnotherStruct)));",
          "    assert!(matches!(pinned_value.as_pin_ref(), Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct UnpinStruct;",
          "",
          "    let value = Right(UnpinStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&UnpinStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(_result, Right(_)));",
          "    assert!(matches!(_result.right(), Some(pin_ref)) && pin_ref.is_pinned());",
          "    assert_eq!(std::mem::transmute::<_, &UnpinStruct>(pin_ref.as_ref()), &UnpinStruct);",
          "    assert!(matches!(_result.left(), None));"
        ],
        "code": [
          "{",
          "    struct UnpinStruct;",
          "",
          "    let value = Right(UnpinStruct);",
          "    let pinned_value = Pin::new(Box::new(value));",
          "",
          "    let _result: Either<Pin<&UnpinStruct>, Pin<&()>> = pinned_value.as_pin_ref();",
          "    assert!(matches!(_result, Right(_)));",
          "    assert!(matches!(_result.right(), Some(pin_ref)) && pin_ref.is_pinned());",
          "    assert_eq!(std::mem::transmute::<_, &UnpinStruct>(pin_ref.as_ref()), &UnpinStruct);",
          "    assert!(matches!(_result.left(), None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]