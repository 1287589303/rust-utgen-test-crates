[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic(expected = \"value was Right: 3\")]"
        ],
        "prefix": [
          "{",
          "    let right: Either<i32, ()> = Right(3);",
          "    right.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Right(3).expect_left(\"value was Right\"), panic!(\"value was Right: 3\"));"
        ],
        "code": [
          "{",
          "    let right: Either<i32, ()> = Right(3);",
          "    right.expect_left(\"value was Right\");",
          "    assert_eq!(Right(3).expect_left(\"value was Right\"), panic!(\"value was Right: 3\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"message: \\\"panic\\\"\")]"
        ],
        "prefix": [
          "{",
          "    let right: Either<(), ()> = Right(4);",
          "    right.expect_left(\"panic\");",
          "}"
        ],
        "oracle": [
          "    #[should_panic(expected = \"panic: {:?}\", 4)]",
          "    #[test]",
          "    fn test_expect_left_panics_on_right() {",
          "    let right: Either<(), ()> = Right(4);",
          "    right.expect_left(\"panic\");",
          "    }"
        ],
        "code": [
          "{",
          "    let right: Either<(), ()> = Right(4);",
          "    right.expect_left(\"panic\");",
          "    #[should_panic(expected = \"panic: {:?}\", 4)]",
          "    #[test]",
          "    fn test_expect_left_panics_on_right() {",
          "    let right: Either<(), ()> = Right(4);",
          "    right.expect_left(\"panic\");",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"error message: \\\"this is a panic message\\\"\")]"
        ],
        "prefix": [
          "{",
          "    let right: Either<(), ()> = Right(5);",
          "    right.expect_left(\"error message: this is a panic message\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.expect_left(\"error message: this is a panic message\"), panic!(\"{}: {:?}\", \"error message: this is a panic message\", 5));"
        ],
        "code": [
          "{",
          "    let right: Either<(), ()> = Right(5);",
          "    right.expect_left(\"error message: this is a panic message\");",
          "    assert_eq!(right.expect_left(\"error message: this is a panic message\"), panic!(\"{}: {:?}\", \"error message: this is a panic message\", 5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic(expected = \"unexpected result: 100\")]"
        ],
        "prefix": [
          "{",
          "    let right: Either<(), ()> = Right(100);",
          "    right.expect_left(\"unexpected result\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.expect_left(\"unexpected result\"), panic!(\"unexpected result: {:?}\", 100));"
        ],
        "code": [
          "{",
          "    let right: Either<(), ()> = Right(100);",
          "    right.expect_left(\"unexpected result\");",
          "    assert_eq!(right.expect_left(\"unexpected result\"), panic!(\"unexpected result: {:?}\", 100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]