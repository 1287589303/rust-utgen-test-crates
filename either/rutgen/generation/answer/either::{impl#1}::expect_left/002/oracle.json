[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _result = left.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    panic::catch_unwind(|| { Right(3).expect_left(\"value was Right\"); }).is_err();",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(matches!(Right(3).expect_left(\"value was Right\"), Either::Right(_)));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _result = left.expect_left(\"value was Right\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    panic::catch_unwind(|| { Right(3).expect_left(\"value was Right\"); }).is_err();",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert!(matches!(Right(3).expect_left(\"value was Right\"), Either::Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<&str, ()> = Left(\"Hello\");",
          "    let _result = left.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_left(\"value was Right\"), \"Hello\");",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    let left: Either<(i32, i32), ()> = Left((5, 10));",
          "    assert_eq!(left.expect_left(\"value was Right\"), (5, 10));",
          "    let left: Either<Vec<i32>, ()> = Left(vec![1, 2, 3]);",
          "    assert_eq!(left.expect_left(\"value was Right\"), vec![1, 2, 3]);",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
          "    let left: Either<String, ()> = Left(String::from(\"Test\"));",
          "    assert_eq!(left.expect_left(\"value was Right\"), \"Test\");"
        ],
        "code": [
          "{",
          "    let left: Either<&str, ()> = Left(\"Hello\");",
          "    let _result = left.expect_left(\"value was Right\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), \"Hello\");",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    let left: Either<(i32, i32), ()> = Left((5, 10));",
          "    assert_eq!(left.expect_left(\"value was Right\"), (5, 10));",
          "    let left: Either<Vec<i32>, ()> = Left(vec![1, 2, 3]);",
          "    assert_eq!(left.expect_left(\"value was Right\"), vec![1, 2, 3]);",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
          "    let left: Either<String, ()> = Left(String::from(\"Test\"));",
          "    assert_eq!(left.expect_left(\"value was Right\"), \"Test\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _result = left.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);"
        ],
        "code": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _result = left.expect_left(\"value was Right\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), 3.14);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let left: Either<MyStruct, ()> = Left(MyStruct { value: 10 });",
          "    let _result = left.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_left(\"value was Right\"), MyStruct { value: 10 });",
          "    let left_value = left.expect_left(\"value was Right\");",
          "    assert_eq!(left_value.value, 10);"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct MyStruct {",
          "        value: i32,",
          "    }",
          "    let left: Either<MyStruct, ()> = Left(MyStruct { value: 10 });",
          "    let _result = left.expect_left(\"value was Right\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), MyStruct { value: 10 });",
          "    let left_value = left.expect_left(\"value was Right\");",
          "    assert_eq!(left_value.value, 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(), ()> = Left(());",
          "    let _result = left.expect_left(\"value was Right\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.expect_left(\"value was Right\"), ());",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    let left: Either<&str, ()> = Left(\"test\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), \"test\");",
          "    let right: Either<(), i32> = Right(3);",
          "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
          "    assert!(panic_message.is_err());",
          "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));",
          "    let right: Either<&str, i32> = Right(5);",
          "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
          "    assert!(panic_message.is_err());",
          "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 5\".to_string()));"
        ],
        "code": [
          "{",
          "    let left: Either<(), ()> = Left(());",
          "    let _result = left.expect_left(\"value was Right\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), ());",
          "    let left: Either<i32, ()> = Left(42);",
          "    assert_eq!(left.expect_left(\"value was Right\"), 42);",
          "    let left: Either<&str, ()> = Left(\"test\");",
          "    assert_eq!(left.expect_left(\"value was Right\"), \"test\");",
          "    let right: Either<(), i32> = Right(3);",
          "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
          "    assert!(panic_message.is_err());",
          "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 3\".to_string()));",
          "    let right: Either<&str, i32> = Right(5);",
          "    let panic_message = std::panic::catch_unwind(|| right.expect_left(\"value was Right\"));",
          "    assert!(panic_message.is_err());",
          "    assert_eq!(panic_message.unwrap_err().downcast_ref::<String>(), Some(&\"value was Right: 5\".to_string()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]