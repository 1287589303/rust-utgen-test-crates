[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyIterator;",
          "",
          "    impl DoubleEndedIterator for EmptyIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(EmptyIterator);",
          "    let mut iter = right_iterator;",
          "    iter.next_back();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), None);"
        ],
        "code": [
          "{",
          "    struct EmptyIterator;",
          "",
          "    impl DoubleEndedIterator for EmptyIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(EmptyIterator);",
          "    let mut iter = right_iterator;",
          "    iter.next_back();",
          "    assert_eq!(iter.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SingleElementIterator {",
          "        has_yielded: bool,",
          "    }",
          "",
          "    impl DoubleEndedIterator for SingleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.has_yielded {",
          "                None",
          "            } else {",
          "                self.has_yielded = true;",
          "                Some(1)",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(SingleElementIterator { has_yielded: false });",
          "    let mut iter = right_iterator;",
          "    iter.next_back();",
          "}"
        ],
        "oracle": [
          "    let right_iterator = Either::Right(SingleElementIterator { has_yielded: false });",
          "    let mut iter = right_iterator;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));"
        ],
        "code": [
          "{",
          "    struct SingleElementIterator {",
          "        has_yielded: bool,",
          "    }",
          "",
          "    impl DoubleEndedIterator for SingleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.has_yielded {",
          "                None",
          "            } else {",
          "                self.has_yielded = true;",
          "                Some(1)",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(SingleElementIterator { has_yielded: false });",
          "    let mut iter = right_iterator;",
          "    iter.next_back();",
          "    let right_iterator = Either::Right(SingleElementIterator { has_yielded: false });",
          "    let mut iter = right_iterator;",
          "    let result = iter.next_back();",
          "    assert_eq!(result, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MultipleElementIterator {",
          "        elements: Vec<usize>,",
          "        current_index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for MultipleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current_index == 0 {",
          "                None",
          "            } else {",
          "                self.current_index -= 1;",
          "                Some(self.elements[self.current_index])",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(MultipleElementIterator {",
          "        elements: vec![1, 2, 3],",
          "        current_index: 3,",
          "    });",
          "    let mut iter = right_iterator;",
          "    iter.next_back(); // should yield 3",
          "    iter.next_back(); // should yield 2",
          "    iter.next_back(); // should yield 1",
          "    iter.next_back(); // should yield None",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next_back(), Some(3));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), None);"
        ],
        "code": [
          "{",
          "    struct MultipleElementIterator {",
          "        elements: Vec<usize>,",
          "        current_index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for MultipleElementIterator {",
          "        type Item = usize;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.current_index == 0 {",
          "                None",
          "            } else {",
          "                self.current_index -= 1;",
          "                Some(self.elements[self.current_index])",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = Either::Right(MultipleElementIterator {",
          "        elements: vec![1, 2, 3],",
          "        current_index: 3,",
          "    });",
          "    let mut iter = right_iterator;",
          "    iter.next_back(); // should yield 3",
          "    iter.next_back(); // should yield 2",
          "    iter.next_back(); // should yield 1",
          "    iter.next_back(); // should yield None",
          "    assert_eq!(iter.next_back(), Some(3));",
          "    assert_eq!(iter.next_back(), Some(2));",
          "    assert_eq!(iter.next_back(), Some(1));",
          "    assert_eq!(iter.next_back(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]