[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    let iter_either_empty = IterEither { inner: Either::Left(LeftIter { values: vec![], index: 0 }) };",
          "    let result_empty = iter_either_empty.any(|x| x == Either::Left(2));",
          "    assert_eq!(result_empty, false);",
          "    let iter_either_right = IterEither { inner: Either::Right(RightIter { values: vec![7, 8, 9], index: 0 }) };",
          "    let result_right = iter_either_right.any(|x| x == Either::Left(2));",
          "    assert_eq!(result_right, false);",
          "    let iter_either_both = IterEither { inner: Either::Left(LeftIter { values: vec![1, 2, 3], index: 0 }) };",
          "    let result_both = iter_either_both.any(|x| x == Either::Left(1));",
          "    assert_eq!(result_both, true);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    let iter_either_empty = IterEither { inner: Either::Left(LeftIter { values: vec![], index: 0 }) };",
          "    let result_empty = iter_either_empty.any(|x| x == Either::Left(2));",
          "    assert_eq!(result_empty, false);",
          "    let iter_either_right = IterEither { inner: Either::Right(RightIter { values: vec![7, 8, 9], index: 0 }) };",
          "    let result_right = iter_either_right.any(|x| x == Either::Left(2));",
          "    assert_eq!(result_right, false);",
          "    let iter_either_both = IterEither { inner: Either::Left(LeftIter { values: vec![1, 2, 3], index: 0 }) };",
          "    let result_both = iter_either_both.any(|x| x == Either::Left(1));",
          "    assert_eq!(result_both, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Right(5));",
          "}"
        ],
        "oracle": [
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(4));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(5));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(6));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(7));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|_| true);",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(4));",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Right(5));",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(4));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(5));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(6));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Right(right_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(7));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|_| true);",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(4));",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    let left_iterator = LeftIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, false);",
          "    let left_iterator = LeftIter { values: vec![7, 8, 9], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(7));",
          "    assert_eq!(result, true);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, false);",
          "    let left_iterator = LeftIter { values: vec![1, 2, 3], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    let left_iterator = LeftIter { values: vec![4, 5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, false);",
          "    let left_iterator = LeftIter { values: vec![7, 8, 9], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(7));",
          "    assert_eq!(result, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "}"
        ],
        "oracle": [
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2], index: 0 };",
          "    let right_iterator = RightIter { values: vec![3, 4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(4));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct LeftIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for LeftIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    struct RightIter {",
          "        values: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.values.len() {",
          "                let value = self.values[self.index];",
          "                self.index += 1;",
          "                Some(value)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![1, 2], index: 0 };",
          "    let right_iterator = RightIter { values: vec![3, 4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(2));",
          "    assert_eq!(result, true);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![5, 6], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(1));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![3], index: 0 };",
          "    let right_iterator = RightIter { values: vec![4], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Right(4));",
          "    assert_eq!(result, false);",
          "    ",
          "    let left_iterator = LeftIter { values: vec![], index: 0 };",
          "    let right_iterator = RightIter { values: vec![], index: 0 };",
          "    let iter_either = IterEither { inner: Either::Left(left_iterator) };",
          "    let result = iter_either.any(|x| x == Either::Left(3));",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]