[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((5, 123));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Left(5), 123));"
        ],
        "code": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((5, 123));",
          "    let result = left.factor_second();",
          "    assert_eq!(result, (Left(5), 123));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (String, u32)> = Left((String::from(\"test\"), 456));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Left(String::from(\"test\")), 456));"
        ],
        "code": [
          "{",
          "    let left: Either<_, (String, u32)> = Left((String::from(\"test\"), 456));",
          "    let result = left.factor_second();",
          "    assert_eq!(result, (Left(String::from(\"test\")), 456));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (Vec<u32>, u32)> = Left((vec![], 789));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Left(vec![]));",
          "    assert_eq!(result.1, 789);"
        ],
        "code": [
          "{",
          "    let left: Either<_, (Vec<u32>, u32)> = Left((vec![], 789));",
          "    let result = left.factor_second();",
          "    assert_eq!(result.0, Left(vec![]));",
          "    assert_eq!(result.1, 789);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((0, std::u32::MIN));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Left(0));",
          "    assert_eq!(result.1, std::u32::MIN);"
        ],
        "code": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((0, std::u32::MIN));",
          "    let result = left.factor_second();",
          "    assert_eq!(result.0, Left(0));",
          "    assert_eq!(result.1, std::u32::MIN);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((42, std::u32::MAX));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Left(42));",
          "    assert_eq!(result.1, std::u32::MAX);"
        ],
        "code": [
          "{",
          "    let left: Either<_, (u32, u32)> = Left((42, std::u32::MAX));",
          "    let result = left.factor_second();",
          "    assert_eq!(result.0, Left(42));",
          "    assert_eq!(result.1, std::u32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, (String, u32)> = Left((String::new(), 100));",
          "    let result = left.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Left(String::new()));",
          "    assert_eq!(result.1, 100);"
        ],
        "code": [
          "{",
          "    let left: Either<_, (String, u32)> = Left((String::new(), 100));",
          "    let result = left.factor_second();",
          "    assert_eq!(result.0, Left(String::new()));",
          "    assert_eq!(result.1, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]