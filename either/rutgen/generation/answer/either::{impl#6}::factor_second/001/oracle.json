[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(String, u32), (String, u32)> = Right((String::from(\"test\"), 42));",
          "    let result = right.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Right(String::from(\"test\")));",
          "    assert_eq!(result.1, 42);"
        ],
        "code": [
          "{",
          "    let right: Either<(String, u32), (String, u32)> = Right((String::from(\"test\"), 42));",
          "    let result = right.factor_second();",
          "    assert_eq!(result.0, Right(String::from(\"test\")));",
          "    assert_eq!(result.1, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(Vec<u32>, u32), (Vec<u32>, u32)> = Right((vec![1, 2, 3], 99));",
          "    let result = right.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Right(vec![1, 2, 3]));",
          "    assert_eq!(result.1, 99);",
          "    assert!(matches!(result.0, Right(_)));",
          "    assert!(matches!(result, (Either::Right(_), 99));",
          "    assert!(result.0.is_right());",
          "    assert!(result.1 > 0);"
        ],
        "code": [
          "{",
          "    let right: Either<(Vec<u32>, u32), (Vec<u32>, u32)> = Right((vec![1, 2, 3], 99));",
          "    let result = right.factor_second();",
          "    assert_eq!(result.0, Right(vec![1, 2, 3]));",
          "    assert_eq!(result.1, 99);",
          "    assert!(matches!(result.0, Right(_)));",
          "    assert!(matches!(result, (Either::Right(_), 99));",
          "    assert!(result.0.is_right());",
          "    assert!(result.1 > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<((i32, String), u32), ((i32, String), u32)> = Right(((7, String::from(\"example\")), 100));",
          "    let result = right.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (Right((7, String::from(\"example\"))), 100));"
        ],
        "code": [
          "{",
          "    let right: Either<((i32, String), u32), ((i32, String), u32)> = Right(((7, String::from(\"example\")), 100));",
          "    let result = right.factor_second();",
          "    assert_eq!(result, (Right((7, String::from(\"example\"))), 100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<((f32, bool), f32), ((f32, bool), f32)> = Right(((1.1, true), 3.14));",
          "    let result = right.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Right((1.1, true)));",
          "    assert_eq!(result.1, 3.14);"
        ],
        "code": [
          "{",
          "    let right: Either<((f32, bool), f32), ((f32, bool), f32)> = Right(((1.1, true), 3.14));",
          "    let result = right.factor_second();",
          "    assert_eq!(result.0, Right((1.1, true)));",
          "    assert_eq!(result.1, 3.14);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(String, u32), (String, u32)> = Right((String::from(\"\"), 0));",
          "    let result = right.factor_second();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.0, Right((String::from(\"\"),)));",
          "    assert_eq!(result.1, 0);",
          "    assert!(matches!(result.0, Right(_)));",
          "    assert!(result.1.is::<u32>());",
          "    assert_eq!(result.0, Right(()));",
          "    assert_eq!(result.1, 0);"
        ],
        "code": [
          "{",
          "    let right: Either<(String, u32), (String, u32)> = Right((String::from(\"\"), 0));",
          "    let result = right.factor_second();",
          "    assert_eq!(result.0, Right((String::from(\"\"),)));",
          "    assert_eq!(result.1, 0);",
          "    assert!(matches!(result.0, Right(_)));",
          "    assert!(result.1.is::<u32>());",
          "    assert_eq!(result.0, Right(()));",
          "    assert_eq!(result.1, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]