[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_variant: Either<String, i32> = Right(42);",
          "    let _ = right_variant.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right_variant.left(), None);"
        ],
        "code": [
          "{",
          "    let right_variant: Either<String, i32> = Right(42);",
          "    let _ = right_variant.left();",
          "    assert_eq!(right_variant.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_variant: Either<i32, f64> = Right(3.14);",
          "    let _ = right_variant.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right_variant.left(), None);"
        ],
        "code": [
          "{",
          "    let right_variant: Either<i32, f64> = Right(3.14);",
          "    let _ = right_variant.left();",
          "    assert_eq!(right_variant.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_variant: Either<(i32, i32), char> = Right('a');",
          "    let _ = right_variant.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right_variant.left(), None);"
        ],
        "code": [
          "{",
          "    let right_variant: Either<(i32, i32), char> = Right('a');",
          "    let _ = right_variant.left();",
          "    assert_eq!(right_variant.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SampleStruct;",
          "    let right_variant: Either<SampleStruct, i32> = Right(100);",
          "    let _ = right_variant.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right_variant.left(), None);"
        ],
        "code": [
          "{",
          "    struct SampleStruct;",
          "    let right_variant: Either<SampleStruct, i32> = Right(100);",
          "    let _ = right_variant.left();",
          "    assert_eq!(right_variant.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_variant: Either<(), f64> = Right(2.718);",
          "    let _ = right_variant.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right_variant.left(), None);"
        ],
        "code": [
          "{",
          "    let right_variant: Either<(), f64> = Right(2.718);",
          "    let _ = right_variant.left();",
          "    assert_eq!(right_variant.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]