[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"some value\"));",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left(), Some(String::from(\"some value\")));"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"some value\"));",
          "    let _result = left.left();",
          "    assert_eq!(left.left(), Some(String::from(\"some value\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, Some(42));",
          "    assert!(matches!(left, Left(_)));",
          "    assert!(left.is_left());"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(42);",
          "    let _result = left.left();",
          "    assert_eq!(_result, Some(42));",
          "    assert!(matches!(left, Left(_)));",
          "    assert!(left.is_left());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left(), Some(3.14));"
        ],
        "code": [
          "{",
          "    let left: Either<f64, ()> = Left(3.14);",
          "    let _result = left.left();",
          "    assert_eq!(left.left(), Some(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"\"));",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left(), Some(String::from(\"\")));"
        ],
        "code": [
          "{",
          "    let left: Either<String, ()> = Left(String::from(\"\"));",
          "    let _result = left.left();",
          "    assert_eq!(left.left(), Some(String::from(\"\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, ()> = Left(0);",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left(), Some(0));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, ()> = Left(0);",
          "    let _result = left.left();",
          "    assert_eq!(left.left(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<Option<i32>, ()> = Left(None);",
          "    let _result = left.left();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.left(), Some(None));",
          "    let left_with_value: Either<i32, ()> = Left(42);",
          "    assert_eq!(left_with_value.left(), Some(42));",
          "    let another_left: Either<String, ()> = Left(\"test\".to_string());",
          "    assert_eq!(another_left.left(), Some(\"test\".to_string()));",
          "    let right: Either<(), i32> = Right(100);",
          "    assert_eq!(right.left(), None);",
          "    let right_with_value: Either<(), String> = Right(\"value\".to_string());",
          "    assert_eq!(right_with_value.left(), None);"
        ],
        "code": [
          "{",
          "    let left: Either<Option<i32>, ()> = Left(None);",
          "    let _result = left.left();",
          "    assert_eq!(left.left(), Some(None));",
          "    let left_with_value: Either<i32, ()> = Left(42);",
          "    assert_eq!(left_with_value.left(), Some(42));",
          "    let another_left: Either<String, ()> = Left(\"test\".to_string());",
          "    assert_eq!(another_left.left(), Some(\"test\".to_string()));",
          "    let right: Either<(), i32> = Right(100);",
          "    assert_eq!(right.left(), None);",
          "    let right_with_value: Either<(), String> = Right(\"value\".to_string());",
          "    assert_eq!(right_with_value.left(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]