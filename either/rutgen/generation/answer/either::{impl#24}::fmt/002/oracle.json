[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Left(\"Test String\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Left(\"Test String\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(fmt::Display::fmt(&either, &mut fmt::Formatter::new()).is_ok());",
          "    assert_eq!(format!(\"{}\", either), \"Test String\");"
        ],
        "code": [
          "{",
          "    let either = Either::Left(\"Test String\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    assert_eq!(either, Either::Left(\"Test String\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(fmt::Display::fmt(&either, &mut fmt::Formatter::new()).is_ok());",
          "    assert_eq!(format!(\"{}\", either), \"Test String\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Left(\"\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    let either = Either::Left(\"test\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"test\");",
          "    let either = Either::Left(\"example\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"example\");",
          "    let either = Either::Left(\"Rust\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"Rust\");",
          "    let either = Either::Left(\"fmt\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"fmt\");",
          "    let either = Either::Left(\"\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"\");"
        ],
        "code": [
          "{",
          "    let either = Either::Left(\"\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    let either = Either::Left(\"test\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"test\");",
          "    let either = Either::Left(\"example\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"example\");",
          "    let either = Either::Left(\"Rust\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"Rust\");",
          "    let either = Either::Left(\"fmt\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"fmt\");",
          "    let either = Either::Left(\"\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Right(42);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_err(), true);",
          "    let either = Either::Left(\"Hello\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_ok(), true);",
          "    let either = Either::Left(5.5);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_ok(), true);",
          "    let either = Either::Right(\"World\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_err(), true);"
        ],
        "code": [
          "{",
          "    let either = Either::Right(42);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_err(), true);",
          "    let either = Either::Left(\"Hello\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_ok(), true);",
          "    let either = Either::Left(5.5);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_ok(), true);",
          "    let either = Either::Right(\"World\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).is_err(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Left(None::<&str>);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Left(None::<&str>));",
          "    assert!(matches!(either, Either::Left(_)));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());"
        ],
        "code": [
          "{",
          "    let either = Either::Left(None::<&str>);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    assert_eq!(either, Either::Left(None::<&str>));",
          "    assert!(matches!(either, Either::Left(_)));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Right(true);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(true));",
          "    assert!(format!(\"{}\", either).contains(\"true\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap_err().kind(), std::io::ErrorKind::Other);"
        ],
        "code": [
          "{",
          "    let either = Either::Right(true);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    assert_eq!(either, Either::Right(true));",
          "    assert!(format!(\"{}\", either).contains(\"true\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap_err().kind(), std::io::ErrorKind::Other);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Left(\"!@#$%^&*()\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Left(\"!@#$%^&*()\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap_err().kind(), fmt::Error::new());",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).to_string(), \"!@#$%^&*()\");"
        ],
        "code": [
          "{",
          "    let either = Either::Left(\"!@#$%^&*()\");",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    assert_eq!(either, Either::Left(\"!@#$%^&*()\"));",
          "    assert!(either.fmt(&mut fmt::Formatter::new()).is_ok());",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap_err().kind(), fmt::Error::new());",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).to_string(), \"!@#$%^&*()\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let either = Either::Right(0);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "}"
        ],
        "oracle": [
          "    either = Either::Left(42);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"42\");",
          "    ",
          "    either = Either::Left(\"test\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"test\");",
          "    ",
          "    either = Either::Left(3.14);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"3.14\");",
          "    ",
          "    either = Either::Left(true);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"true\");",
          "    ",
          "    either = Either::Left((1, 2));",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"(1, 2)\");"
        ],
        "code": [
          "{",
          "    let either = Either::Right(0);",
          "    either.fmt(&mut fmt::Formatter::new()).unwrap();",
          "    either = Either::Left(42);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"42\");",
          "    ",
          "    either = Either::Left(\"test\");",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"test\");",
          "    ",
          "    either = Either::Left(3.14);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"3.14\");",
          "    ",
          "    either = Either::Left(true);",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"true\");",
          "    ",
          "    either = Either::Left((1, 2));",
          "    assert_eq!(either.fmt(&mut fmt::Formatter::new()).unwrap(), \"(1, 2)\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]