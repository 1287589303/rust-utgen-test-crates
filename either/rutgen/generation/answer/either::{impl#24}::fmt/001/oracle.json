[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value = 0;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"0\");",
          "    assert!(buffer.len() > 0);",
          "    assert!(buffer.contains(\"0\"));",
          "    assert_eq!(either_value, Right(0));"
        ],
        "code": [
          "{",
          "    let right_value = 0;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "    assert_eq!(buffer, \"0\");",
          "    assert!(buffer.len() > 0);",
          "    assert!(buffer.contains(\"0\"));",
          "    assert_eq!(either_value, Right(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value = -1;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "}"
        ],
        "oracle": [
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"-1\");",
          "    let right_value = 0;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"0\");",
          "    let right_value = 100;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"100\");",
          "    let right_value = i32::MAX;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"2147483647\");",
          "    let right_value = i32::MIN;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"-2147483648\");"
        ],
        "code": [
          "{",
          "    let right_value = -1;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"-1\");",
          "    let right_value = 0;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"0\");",
          "    let right_value = 100;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"100\");",
          "    let right_value = i32::MAX;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"2147483647\");",
          "    let right_value = i32::MIN;",
          "    let either_value = Right(right_value);",
          "    buffer.clear();",
          "    write!(&mut buffer, \"{}\", either_value).unwrap();",
          "    assert_eq!(buffer, \"-2147483648\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value = 1.0;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"1.0\");",
          "    assert!(buffer.contains(\"1.0\"));",
          "    assert!(buffer.len() > 0);",
          "    assert!(either_value.is_right());",
          "    assert!(either_value.as_ref() == &right_value);"
        ],
        "code": [
          "{",
          "    let right_value = 1.0;",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "    assert_eq!(buffer, \"1.0\");",
          "    assert!(buffer.contains(\"1.0\"));",
          "    assert!(buffer.len() > 0);",
          "    assert!(either_value.is_right());",
          "    assert!(either_value.as_ref() == &right_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_value = \"string\";",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buffer, \"string\");"
        ],
        "code": [
          "{",
          "    let right_value = \"string\";",
          "    let either_value = Right(right_value);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "    assert_eq!(buffer, \"string\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct NonDisplayable;",
          "    let either_value = Right(NonDisplayable);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(either_value, Right(_)));",
          "    assert_eq!(buffer, \"\");",
          "    assert!(std::any::panic::catch_unwind(|| write!(&mut buffer, \"{}\", either_value)).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| write!(&mut buffer, \"{}\", either_value)), Err(_)));"
        ],
        "code": [
          "{",
          "    struct NonDisplayable;",
          "    let either_value = Right(NonDisplayable);",
          "    let mut buffer = String::new();",
          "    let _ = write!(&mut buffer, \"{}\", either_value);",
          "    assert!(matches!(either_value, Right(_)));",
          "    assert_eq!(buffer, \"\");",
          "    assert!(std::any::panic::catch_unwind(|| write!(&mut buffer, \"{}\", either_value)).is_err());",
          "    assert!(matches!(std::panic::catch_unwind(|| write!(&mut buffer, \"{}\", either_value)), Err(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]