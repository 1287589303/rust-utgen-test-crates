[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleAcc {",
          "        value: i32,",
          "    }",
          "",
          "    let right_iter = std::iter::empty::<i32>();",
          "    let either = Either::Right(right_iter);",
          "    let init = SimpleAcc { value: 0 };",
          "    let result = either.rfold(init, |acc, item| {",
          "        SimpleAcc { value: acc.value + item }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.value, 0);"
        ],
        "code": [
          "{",
          "    struct SimpleAcc {",
          "        value: i32,",
          "    }",
          "",
          "    let right_iter = std::iter::empty::<i32>();",
          "    let either = Either::Right(right_iter);",
          "    let init = SimpleAcc { value: 0 };",
          "    let result = either.rfold(init, |acc, item| {",
          "        SimpleAcc { value: acc.value + item }",
          "    });",
          "    assert_eq!(result.value, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleAcc {",
          "        value: i32,",
          "    }",
          "",
          "    let right_iter = vec![1, 2, 3].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = SimpleAcc { value: 0 };",
          "    let result = either.rfold(init, |acc, item| {",
          "        SimpleAcc { value: acc.value + item }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.value, 6);",
          "    assert_eq!(result.value, 0 + 3 + 2 + 1);",
          "    assert!(result.value > 0);",
          "    assert!(result.value.is_positive());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert_eq!(result.value, (1 + 2 + 3));"
        ],
        "code": [
          "{",
          "    struct SimpleAcc {",
          "        value: i32,",
          "    }",
          "",
          "    let right_iter = vec![1, 2, 3].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = SimpleAcc { value: 0 };",
          "    let result = either.rfold(init, |acc, item| {",
          "        SimpleAcc { value: acc.value + item }",
          "    });",
          "    assert_eq!(result.value, 6);",
          "    assert_eq!(result.value, 0 + 3 + 2 + 1);",
          "    assert!(result.value > 0);",
          "    assert!(result.value.is_positive());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert_eq!(result.value, (1 + 2 + 3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct ComplexAcc {",
          "        total: i32,",
          "        count: usize,",
          "    }",
          "",
          "    let right_iter = vec![10, 20, 30].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = ComplexAcc { total: 0, count: 0 };",
          "    let result = either.rfold(init, |mut acc, item| {",
          "        acc.total += item;",
          "        acc.count += 1;",
          "        acc",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.total, 60);",
          "    assert_eq!(result.count, 3);"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct ComplexAcc {",
          "        total: i32,",
          "        count: usize,",
          "    }",
          "",
          "    let right_iter = vec![10, 20, 30].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = ComplexAcc { total: 0, count: 0 };",
          "    let result = either.rfold(init, |mut acc, item| {",
          "        acc.total += item;",
          "        acc.count += 1;",
          "        acc",
          "    });",
          "    assert_eq!(result.total, 60);",
          "    assert_eq!(result.count, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_iter = vec![5, 10, 15].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = 100;",
          "    let result = either.rfold(init, |acc, item| acc);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 100);",
          "    assert_eq!(either.rfold(init, |acc, item| acc + item), 130);",
          "    assert_eq!(either.rfold(init, |acc, item| acc - item), 75);",
          "    assert_eq!(either.rfold(init, |acc, item| acc * item), 1500);",
          "    assert_eq!(either.rfold(init, |acc, item| acc / item), 6);"
        ],
        "code": [
          "{",
          "    let right_iter = vec![5, 10, 15].into_iter().rev();",
          "    let either = Either::Right(right_iter);",
          "    let init = 100;",
          "    let result = either.rfold(init, |acc, item| acc);",
          "    assert_eq!(result, 100);",
          "    assert_eq!(either.rfold(init, |acc, item| acc + item), 130);",
          "    assert_eq!(either.rfold(init, |acc, item| acc - item), 75);",
          "    assert_eq!(either.rfold(init, |acc, item| acc * item), 1500);",
          "    assert_eq!(either.rfold(init, |acc, item| acc / item), 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_iter = std::iter::once(42);",
          "    let either = Either::Right(right_iter);",
          "    let init = 0;",
          "    let result = either.rfold(init, |acc, item| acc + item);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 42);",
          "    assert_eq!(either, Either::Right(std::iter::once(42)));",
          "    assert_eq!(init, 0);",
          "    assert!(result > init);"
        ],
        "code": [
          "{",
          "    let right_iter = std::iter::once(42);",
          "    let either = Either::Right(right_iter);",
          "    let init = 0;",
          "    let result = either.rfold(init, |acc, item| acc + item);",
          "    assert_eq!(result, 42);",
          "    assert_eq!(either, Either::Right(std::iter::once(42)));",
          "    assert_eq!(init, 0);",
          "    assert!(result > init);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]