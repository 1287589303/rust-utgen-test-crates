[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        items: vec![1, 2, 3, 4, 5], // All values are positive",
          "        index: 0,",
          "    };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "}"
        ],
        "oracle": [
          "    result == true",
          "    result == false",
          "    result == iter.inner.count() == 5",
          "    result == iter.inner.all(|&x| x % 2 == 0)",
          "    result == iter.all(|&x| x < 10)",
          "    result == iter.all(|&x| x > 5)",
          "    result == iter.all(|&x| x == 3)",
          "    result == iter.all(|&x| x < 1)"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        items: vec![1, 2, 3, 4, 5], // All values are positive",
          "        index: 0,",
          "    };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "    result == true",
          "    result == false",
          "    result == iter.inner.count() == 5",
          "    result == iter.inner.all(|&x| x % 2 == 0)",
          "    result == iter.all(|&x| x < 10)",
          "    result == iter.all(|&x| x > 5)",
          "    result == iter.all(|&x| x == 3)",
          "    result == iter.all(|&x| x < 1)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        items: vec![1, -2, 3, 4, 5], // Contains a negative value",
          "        index: 0,",
          "    };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        items: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.items.len() {",
          "                let item = self.items[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        items: vec![1, -2, 3, 4, 5], // Contains a negative value",
          "        index: 0,",
          "    };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None // No items in iterator",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator { index: 0 };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, true);",
          "    assert!(matches!(iter.inner, Either::Left(_)));",
          "    assert!(iter.all(|_| false));",
          "    assert!(iter.all(|_| true));",
          "    assert_eq!(iter.inner, Either::Left(TestIterator { index: 0 }));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        index: usize,",
          "    }",
          "",
          "    impl Iterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None // No items in iterator",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator { index: 0 };",
          "",
          "    let iter = IterEither {",
          "        inner: Either::Left(left_iter),",
          "    };",
          "",
          "    let result = iter.all(|&x| x > 0);",
          "    assert_eq!(result, true);",
          "    assert!(matches!(iter.inner, Either::Left(_)));",
          "    assert!(iter.all(|_| false));",
          "    assert!(iter.all(|_| true));",
          "    assert_eq!(iter.inner, Either::Left(TestIterator { index: 0 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]