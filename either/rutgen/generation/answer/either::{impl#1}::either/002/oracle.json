[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, i32> = Left(0);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, i32> = Left(0);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, i32> = Left(1);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1);",
          "    let left_value: Either<u32, i32> = Left(3);",
          "    let result_value = left_value.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_value, 9);",
          "    let left_zero: Either<u32, i32> = Left(0);",
          "    let result_zero = left_zero.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_zero, 0);",
          "    let left_large: Either<u32, i32> = Left(100);",
          "    let result_large = left_large.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_large, 10000);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, i32> = Left(1);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result, 1);",
          "    let left_value: Either<u32, i32> = Left(3);",
          "    let result_value = left_value.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_value, 9);",
          "    let left_zero: Either<u32, i32> = Left(0);",
          "    let result_zero = left_zero.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_zero, 0);",
          "    let left_large: Either<u32, i32> = Left(100);",
          "    let result_large = left_large.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result_large, 10000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, i32> = Left(u32::MAX);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (u32::MAX * u32::MAX) as i32);",
          "    assert!(result >= 0);",
          "    assert!(result == (u32::MAX * u32::MAX) as i32);",
          "    assert!(result.is_left());",
          "    assert!(left.is_left());"
        ],
        "code": [
          "{",
          "    let left: Either<u32, i32> = Left(u32::MAX);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result, (u32::MAX * u32::MAX) as i32);",
          "    assert!(result >= 0);",
          "    assert!(result == (u32::MAX * u32::MAX) as i32);",
          "    assert!(result.is_left());",
          "    assert!(left.is_left());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, i32> = Left(12345);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 152399875);",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left(), Some(12345));",
          "    assert_eq!(left.right(), None);",
          "    assert_eq!(left.left_or_else(|n| -n), 152399875);",
          "    assert_eq!(left.unwrap_left(), 12345);",
          "    assert_eq!(left.expect_left(\"Expected left value\"), 12345);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, i32> = Left(12345);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result, 152399875);",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left(), Some(12345));",
          "    assert_eq!(left.right(), None);",
          "    assert_eq!(left.left_or_else(|n| -n), 152399875);",
          "    assert_eq!(left.unwrap_left(), 12345);",
          "    assert_eq!(left.expect_left(\"Expected left value\"), 12345);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, i32> = Left(3);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 9);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, i32> = Left(3);",
          "    let result = left.either(|n| (n * n) as i32, |n| -n);",
          "    assert_eq!(result, 9);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]