[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Initial\".to_string()));",
          "    let source = Either::Right(TestData(\"Cloned\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Either::Right(TestData(\"Cloned\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Initial\".to_string()));",
          "    let source = Either::Right(TestData(\"Cloned\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Either::Right(TestData(\"Cloned\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Old Value\".to_string()));",
          "    let source = Either::Right(TestData(\"New Value\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Either::Right(TestData(\"New Value\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Old Value\".to_string()));",
          "    let source = Either::Right(TestData(\"New Value\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Either::Right(TestData(\"New Value\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Not Empty\".to_string()));",
          "    let source = Either::Right(TestData(\"\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Either::Right(TestData(\"\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Not Empty\".to_string()));",
          "    let source = Either::Right(TestData(\"\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Either::Right(TestData(\"\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Short\".to_string()));",
          "    let source = Either::Right(TestData(\"A very long string that exceeds usual lengths.\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Either::Right(TestData(\"A very long string that exceeds usual lengths.\".to_string())));"
        ],
        "code": [
          "{",
          "    struct TestData(String);",
          "",
          "    let mut dest = Either::Right(TestData(\"Short\".to_string()));",
          "    let source = Either::Right(TestData(\"A very long string that exceeds usual lengths.\".to_string()));",
          "",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Either::Right(TestData(\"A very long string that exceeds usual lengths.\".to_string())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]