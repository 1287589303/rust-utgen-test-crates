[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftType;",
          "    impl Clone for LeftType {",
          "        fn clone(&self) -> Self {",
          "            LeftType",
          "        }",
          "    }",
          "",
          "    let mut dest = Left(LeftType);",
          "    let source = Left(LeftType);",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Left(LeftType));",
          "    assert!(matches!(dest, Left(_)));",
          "    assert!(matches!(source, Left(_)));",
          "    assert_ne!(std::ptr::eq(&dest, &source));",
          "    assert!(std::mem::size_of::<Either<LeftType, LeftType>>() > 0);"
        ],
        "code": [
          "{",
          "    struct LeftType;",
          "    impl Clone for LeftType {",
          "        fn clone(&self) -> Self {",
          "            LeftType",
          "        }",
          "    }",
          "",
          "    let mut dest = Left(LeftType);",
          "    let source = Left(LeftType);",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Left(LeftType));",
          "    assert!(matches!(dest, Left(_)));",
          "    assert!(matches!(source, Left(_)));",
          "    assert_ne!(std::ptr::eq(&dest, &source));",
          "    assert!(std::mem::size_of::<Either<LeftType, LeftType>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct RightType;",
          "    impl Clone for RightType {",
          "        fn clone(&self) -> Self {",
          "            RightType",
          "        }",
          "    }",
          "",
          "    let mut dest = Right(RightType);",
          "    let source = Right(RightType);",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Right(RightType));"
        ],
        "code": [
          "{",
          "    struct RightType;",
          "    impl Clone for RightType {",
          "        fn clone(&self) -> Self {",
          "            RightType",
          "        }",
          "    }",
          "",
          "    let mut dest = Right(RightType);",
          "    let source = Right(RightType);",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Right(RightType));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftType;",
          "    struct RightType;",
          "    ",
          "    impl Clone for LeftType {",
          "        fn clone(&self) -> Self {",
          "            LeftType",
          "        }",
          "    }",
          "    ",
          "    let mut dest = Right(RightType);",
          "    let source = Left(LeftType);",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(dest, Right(RightType)));",
          "    assert!(matches!(source, Left(LeftType)));",
          "    assert!(dest.clone() != source.clone());"
        ],
        "code": [
          "{",
          "    struct LeftType;",
          "    struct RightType;",
          "    ",
          "    impl Clone for LeftType {",
          "        fn clone(&self) -> Self {",
          "            LeftType",
          "        }",
          "    }",
          "    ",
          "    let mut dest = Right(RightType);",
          "    let source = Left(LeftType);",
          "    dest.clone_from(&source);",
          "    assert!(matches!(dest, Right(RightType)));",
          "    assert!(matches!(source, Left(LeftType)));",
          "    assert!(dest.clone() != source.clone());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LeftType;",
          "    struct RightType;",
          "    ",
          "    impl Clone for RightType {",
          "        fn clone(&self) -> Self {",
          "            RightType",
          "        }",
          "    }",
          "    ",
          "    let mut dest = Left(LeftType);",
          "    let source = Right(RightType);",
          "    dest.clone_from(&source);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(dest, Left(LeftType));",
          "    assert!(matches!(dest, Left(_)));",
          "    assert!(matches!(source, Right(_)));",
          "    assert!(std::mem::size_of::<LeftType>() > 0);",
          "    assert!(std::mem::size_of::<RightType>() > 0);",
          "    assert!(std::mem::size_of::<Either<LeftType, RightType>>() > 0);"
        ],
        "code": [
          "{",
          "    struct LeftType;",
          "    struct RightType;",
          "    ",
          "    impl Clone for RightType {",
          "        fn clone(&self) -> Self {",
          "            RightType",
          "        }",
          "    }",
          "    ",
          "    let mut dest = Left(LeftType);",
          "    let source = Right(RightType);",
          "    dest.clone_from(&source);",
          "    assert_eq!(dest, Left(LeftType));",
          "    assert!(matches!(dest, Left(_)));",
          "    assert!(matches!(source, Right(_)));",
          "    assert!(std::mem::size_of::<LeftType>() > 0);",
          "    assert!(std::mem::size_of::<RightType>() > 0);",
          "    assert!(std::mem::size_of::<Either<LeftType, RightType>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]