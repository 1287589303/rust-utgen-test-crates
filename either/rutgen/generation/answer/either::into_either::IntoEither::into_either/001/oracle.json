[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct IntegerWrapper(i32);",
          "    ",
          "    impl IntoEither for IntegerWrapper {}",
          "    ",
          "    let value = IntegerWrapper(42);",
          "    let result = value.into_either(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(value));",
          "    assert!(matches!(result, Left(_)));",
          "    assert_eq!(result.0, 42);"
        ],
        "code": [
          "{",
          "    struct IntegerWrapper(i32);",
          "    ",
          "    impl IntoEither for IntegerWrapper {}",
          "    ",
          "    let value = IntegerWrapper(42);",
          "    let result = value.into_either(true);",
          "    assert_eq!(result, Left(value));",
          "    assert!(matches!(result, Left(_)));",
          "    assert_eq!(result.0, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct FloatWrapper(f32);",
          "    ",
          "    impl IntoEither for FloatWrapper {}",
          "    ",
          "    let value = FloatWrapper(3.14);",
          "    let result = value.into_either(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(value));"
        ],
        "code": [
          "{",
          "    struct FloatWrapper(f32);",
          "    ",
          "    impl IntoEither for FloatWrapper {}",
          "    ",
          "    let value = FloatWrapper(3.14);",
          "    let result = value.into_either(true);",
          "    assert_eq!(result, Left(value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct StringWrapper(String);",
          "    ",
          "    impl IntoEither for StringWrapper {}",
          "    ",
          "    let value = StringWrapper(\"Hello\".to_string());",
          "    let result = value.into_either(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(value));"
        ],
        "code": [
          "{",
          "    struct StringWrapper(String);",
          "    ",
          "    impl IntoEither for StringWrapper {}",
          "    ",
          "    let value = StringWrapper(\"Hello\".to_string());",
          "    let result = value.into_either(true);",
          "    assert_eq!(result, Left(value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CharWrapper(char);",
          "    ",
          "    impl IntoEither for CharWrapper {}",
          "    ",
          "    let value = CharWrapper('A');",
          "    let result = value.into_either(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(CharWrapper('A')));"
        ],
        "code": [
          "{",
          "    struct CharWrapper(char);",
          "    ",
          "    impl IntoEither for CharWrapper {}",
          "    ",
          "    let value = CharWrapper('A');",
          "    let result = value.into_either(true);",
          "    assert_eq!(result, Left(CharWrapper('A')));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct BoolWrapper(bool);",
          "    ",
          "    impl IntoEither for BoolWrapper {}",
          "    ",
          "    let value = BoolWrapper(true);",
          "    let result = value.into_either(true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(value));"
        ],
        "code": [
          "{",
          "    struct BoolWrapper(bool);",
          "    ",
          "    impl IntoEither for BoolWrapper {}",
          "    ",
          "    let value = BoolWrapper(true);",
          "    let result = value.into_either(true);",
          "    assert_eq!(result, Left(value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]