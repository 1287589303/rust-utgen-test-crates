[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = 42;",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(x));"
        ],
        "code": [
          "{",
          "    let x = 42;",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(x));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = -1;",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(x));"
        ],
        "code": [
          "{",
          "    let x = -1;",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(x));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = 3.14;",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(x));"
        ],
        "code": [
          "{",
          "    let x = 3.14;",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(x));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = true;",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(x));"
        ],
        "code": [
          "{",
          "    let x = true;",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(x));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = String::from(\"Hello\");",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(String::from(\"Hello\")));"
        ],
        "code": [
          "{",
          "    let x = String::from(\"Hello\");",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(String::from(\"Hello\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let x = vec![1, 2, 3];",
          "    let result = x.into_either(false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Right(x));"
        ],
        "code": [
          "{",
          "    let x = vec![1, 2, 3];",
          "    let result = x.into_either(false);",
          "    assert_eq!(result, Right(x));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]