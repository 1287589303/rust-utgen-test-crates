[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, u32> = Left(123);",
          "    let _ = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), 123);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, u32> = Left(123);",
          "    let _ = left.into_inner();",
          "    assert_eq!(left.into_inner(), 123);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, i32> = Left(0);",
          "    let _ = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), 0);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, i32> = Left(0);",
          "    let _ = left.into_inner();",
          "    assert_eq!(left.into_inner(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, i32> = Left(-456);",
          "    let _ = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), -456);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, i32> = Left(-456);",
          "    let _ = left.into_inner();",
          "    assert_eq!(left.into_inner(), -456);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, i32> = Left(i32::MAX);",
          "    let _ = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), i32::MAX);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, i32> = Left(i32::MAX);",
          "    let _ = left.into_inner();",
          "    assert_eq!(left.into_inner(), i32::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, u32> = Right(123);",
          "    let _ = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), 123);"
        ],
        "code": [
          "{",
          "    let right: Either<u32, u32> = Right(123);",
          "    let _ = right.into_inner();",
          "    assert_eq!(right.into_inner(), 123);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(0);",
          "    let _ = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), 0);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(0);",
          "    let _ = right.into_inner();",
          "    assert_eq!(right.into_inner(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(-456);",
          "    let _ = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), -456);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(-456);",
          "    let _ = right.into_inner();",
          "    assert_eq!(right.into_inner(), -456);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(i32::MAX);",
          "    let _ = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Right(i32::MAX).into_inner(), i32::MAX);",
          "    let left: Either<i32, i32> = Left(i32::MIN);",
          "    assert_eq!(left.into_inner(), i32::MIN);",
          "    assert_eq!(Left(0).into_inner(), 0);",
          "    assert_eq!(Right(-1).into_inner(), -1);",
          "    let left_123: Either<i32, i32> = Left(123);",
          "    assert_eq!(left_123.into_inner(), 123);",
          "    let right_456: Either<i32, i32> = Right(456);",
          "    assert_eq!(right_456.into_inner(), 456);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(i32::MAX);",
          "    let _ = right.into_inner();",
          "    assert_eq!(Right(i32::MAX).into_inner(), i32::MAX);",
          "    let left: Either<i32, i32> = Left(i32::MIN);",
          "    assert_eq!(left.into_inner(), i32::MIN);",
          "    assert_eq!(Left(0).into_inner(), 0);",
          "    assert_eq!(Right(-1).into_inner(), -1);",
          "    let left_123: Either<i32, i32> = Left(123);",
          "    assert_eq!(left_123.into_inner(), 123);",
          "    let right_456: Either<i32, i32> = Right(456);",
          "    assert_eq!(right_456.into_inner(), 456);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]