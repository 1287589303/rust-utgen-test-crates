[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, i32> = Left(123);",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), 123);"
        ],
        "code": [
          "{",
          "    let left: Either<i32, i32> = Left(123);",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), 123);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<i32, i32> = Right(123);",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 123);"
        ],
        "code": [
          "{",
          "    let right: Either<i32, i32> = Right(123);",
          "    let _result = right.into_inner();",
          "    assert_eq!(_result, 123);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, f64> = Left(45.67);",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), 45.67);"
        ],
        "code": [
          "{",
          "    let left: Either<f64, f64> = Left(45.67);",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), 45.67);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<f64, f64> = Right(45.67);",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 45.67);"
        ],
        "code": [
          "{",
          "    let right: Either<f64, f64> = Right(45.67);",
          "    let _result = right.into_inner();",
          "    assert_eq!(_result, 45.67);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<bool, bool> = Left(true);",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), true);",
          "    let right: Either<bool, bool> = Right(false);",
          "    assert_eq!(right.into_inner(), false);",
          "    let left: Either<i32, i32> = Left(42);",
          "    assert_eq!(left.into_inner(), 42);",
          "    let right: Either<i32, i32> = Right(99);",
          "    assert_eq!(right.into_inner(), 99);",
          "    let left: Either<f64, f64> = Left(3.14);",
          "    assert_eq!(left.into_inner(), 3.14);",
          "    let right: Either<f64, f64> = Right(2.718);",
          "    assert_eq!(right.into_inner(), 2.718);",
          "    let left: Either<String, String> = Left(String::from(\"hello\"));",
          "    assert_eq!(left.into_inner(), String::from(\"hello\"));",
          "    let right: Either<String, String> = Right(String::from(\"world\"));",
          "    assert_eq!(right.into_inner(), String::from(\"world\"));"
        ],
        "code": [
          "{",
          "    let left: Either<bool, bool> = Left(true);",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), true);",
          "    let right: Either<bool, bool> = Right(false);",
          "    assert_eq!(right.into_inner(), false);",
          "    let left: Either<i32, i32> = Left(42);",
          "    assert_eq!(left.into_inner(), 42);",
          "    let right: Either<i32, i32> = Right(99);",
          "    assert_eq!(right.into_inner(), 99);",
          "    let left: Either<f64, f64> = Left(3.14);",
          "    assert_eq!(left.into_inner(), 3.14);",
          "    let right: Either<f64, f64> = Right(2.718);",
          "    assert_eq!(right.into_inner(), 2.718);",
          "    let left: Either<String, String> = Left(String::from(\"hello\"));",
          "    assert_eq!(left.into_inner(), String::from(\"hello\"));",
          "    let right: Either<String, String> = Right(String::from(\"world\"));",
          "    assert_eq!(right.into_inner(), String::from(\"world\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<bool, bool> = Right(true);",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), true);",
          "    assert!(matches!(right, Either::Right(_)));",
          "    assert!(matches!(right, Either::Left(_) => false, Either::Right(_) => true));",
          "    assert_eq!(std::mem::size_of_val(&right), std::mem::size_of::<Either<bool, bool>>());",
          "    assert_eq!(std::mem::size_of::<Either<bool, bool>>(), 1);"
        ],
        "code": [
          "{",
          "    let right: Either<bool, bool> = Right(true);",
          "    let _result = right.into_inner();",
          "    assert_eq!(right.into_inner(), true);",
          "    assert!(matches!(right, Either::Right(_)));",
          "    assert!(matches!(right, Either::Left(_) => false, Either::Right(_) => true));",
          "    assert_eq!(std::mem::size_of_val(&right), std::mem::size_of::<Either<bool, bool>>());",
          "    assert_eq!(std::mem::size_of::<Either<bool, bool>>(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, String> = Left(String::from(\"Hello\"));",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), String::from(\"Hello\"));",
          "    let right: Either<String, String> = Right(String::from(\"World\"));",
          "    assert_eq!(right.into_inner(), String::from(\"World\"));",
          "    let right: Either<i32, i32> = Right(42);",
          "    assert_eq!(right.into_inner(), 42);",
          "    let left: Either<f64, f64> = Left(3.14);",
          "    assert_eq!(left.into_inner(), 3.14);"
        ],
        "code": [
          "{",
          "    let left: Either<String, String> = Left(String::from(\"Hello\"));",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), String::from(\"Hello\"));",
          "    let right: Either<String, String> = Right(String::from(\"World\"));",
          "    assert_eq!(right.into_inner(), String::from(\"World\"));",
          "    let right: Either<i32, i32> = Right(42);",
          "    assert_eq!(right.into_inner(), 42);",
          "    let left: Either<f64, f64> = Left(3.14);",
          "    assert_eq!(left.into_inner(), 3.14);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, String> = Right(String::from(\"Hello\"));",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, \"Hello\");"
        ],
        "code": [
          "{",
          "    let right: Either<String, String> = Right(String::from(\"Hello\"));",
          "    let _result = right.into_inner();",
          "    assert_eq!(_result, \"Hello\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<String, String> = Left(String::from(\"\"));",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), String::from(\"\"));",
          "    let right: Either<String, String> = Right(String::from(\"Test\"));",
          "    assert_eq!(right.into_inner(), String::from(\"Test\"));",
          "    let left_numeric: Either<i32, i32> = Left(42);",
          "    assert_eq!(left_numeric.into_inner(), 42);",
          "    let right_numeric: Either<i32, i32> = Right(7);",
          "    assert_eq!(right_numeric.into_inner(), 7);",
          "    let left_empty: Either<Vec<u8>, Vec<u8>> = Left(vec![]);",
          "    assert_eq!(left_empty.into_inner(), vec![]);",
          "    let right_empty: Either<Box<str>, Box<str>> = Right(Box::from(\"Hello\"));",
          "    assert_eq!(right_empty.into_inner(), Box::from(\"Hello\"));"
        ],
        "code": [
          "{",
          "    let left: Either<String, String> = Left(String::from(\"\"));",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), String::from(\"\"));",
          "    let right: Either<String, String> = Right(String::from(\"Test\"));",
          "    assert_eq!(right.into_inner(), String::from(\"Test\"));",
          "    let left_numeric: Either<i32, i32> = Left(42);",
          "    assert_eq!(left_numeric.into_inner(), 42);",
          "    let right_numeric: Either<i32, i32> = Right(7);",
          "    assert_eq!(right_numeric.into_inner(), 7);",
          "    let left_empty: Either<Vec<u8>, Vec<u8>> = Left(vec![]);",
          "    assert_eq!(left_empty.into_inner(), vec![]);",
          "    let right_empty: Either<Box<str>, Box<str>> = Right(Box::from(\"Hello\"));",
          "    assert_eq!(right_empty.into_inner(), Box::from(\"Hello\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<String, String> = Right(String::from(\"\"));",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), String::from(\"\"));"
        ],
        "code": [
          "{",
          "    let right: Either<String, String> = Right(String::from(\"\"));",
          "    let _result = right.into_inner();",
          "    assert_eq!(right.into_inner(), String::from(\"\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(), ()> = Left(());",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), ());",
          "    let right: Either<u32, ()> = Right(123);",
          "    assert_eq!(right.into_inner(), 123);",
          "    let right_empty: Either<(), ()> = Right(());",
          "    assert_eq!(right_empty.into_inner(), ());",
          "    let left_empty: Either<(), ()> = Left(());",
          "    assert_eq!(left_empty.into_inner(), ());",
          "    let right_value: Either<u32, u32> = Right(456);",
          "    assert_eq!(right_value.into_inner(), 456);"
        ],
        "code": [
          "{",
          "    let left: Either<(), ()> = Left(());",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), ());",
          "    let right: Either<u32, ()> = Right(123);",
          "    assert_eq!(right.into_inner(), 123);",
          "    let right_empty: Either<(), ()> = Right(());",
          "    assert_eq!(right_empty.into_inner(), ());",
          "    let left_empty: Either<(), ()> = Left(());",
          "    assert_eq!(left_empty.into_inner(), ());",
          "    let right_value: Either<u32, u32> = Right(456);",
          "    assert_eq!(right_value.into_inner(), 456);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), ()> = Right(());",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.into_inner(), ());"
        ],
        "code": [
          "{",
          "    let right: Either<(), ()> = Right(());",
          "    let _result = right.into_inner();",
          "    assert_eq!(right.into_inner(), ());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u32, u32> = Left(0);",
          "    let _result = left.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.into_inner(), 0);",
          "    assert_eq!(Right(5).into_inner(), 5);",
          "    assert_eq!(Right(10).into_inner(), 10);",
          "    assert_eq!(Right(123).into_inner(), 123);",
          "    assert_eq!(Right(0).into_inner(), 0);"
        ],
        "code": [
          "{",
          "    let left: Either<u32, u32> = Left(0);",
          "    let _result = left.into_inner();",
          "    assert_eq!(left.into_inner(), 0);",
          "    assert_eq!(Right(5).into_inner(), 5);",
          "    assert_eq!(Right(10).into_inner(), 10);",
          "    assert_eq!(Right(123).into_inner(), 123);",
          "    assert_eq!(Right(0).into_inner(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, u32> = Right(0);",
          "    let _result = right.into_inner();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, 0);"
        ],
        "code": [
          "{",
          "    let right: Either<u32, u32> = Right(0);",
          "    let _result = right.into_inner();",
          "    assert_eq!(_result, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]