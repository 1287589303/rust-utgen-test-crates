[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_iter = vec![42].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(42));"
        ],
        "code": [
          "{",
          "    let right_iter = vec![42].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "    assert_eq!(result, Some(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_iter = vec![1, 2, 3].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    let right_iter = vec![1, 2, 3].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_iter = std::iter::empty::<i32>();",
          "    let right_iter = vec![100].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(100));"
        ],
        "code": [
          "{",
          "    let left_iter = std::iter::empty::<i32>();",
          "    let right_iter = vec![100].into_iter();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "    assert_eq!(result, Some(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_iter = vec![1, 2].into_iter();",
          "    let right_iter = std::iter::empty::<i32>();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let left_iter = vec![1, 2].into_iter();",
          "    let right_iter = std::iter::empty::<i32>();",
          "    let either = Either::Right(right_iter);",
          "    let result = either.last();",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right_iter = vec![10, 20, 30].into_iter();",
          "    let mut either = Either::Right(right_iter);",
          "    let _ = either.next(); // Consume an element",
          "    let result = either.last();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(30));",
          "    assert!(either.size_hint() == (0, None));",
          "    assert!(either.count() == 0);"
        ],
        "code": [
          "{",
          "    let right_iter = vec![10, 20, 30].into_iter();",
          "    let mut either = Either::Right(right_iter);",
          "    let _ = either.next(); // Consume an element",
          "    let result = either.last();",
          "    assert_eq!(result, Some(30));",
          "    assert!(either.size_hint() == (0, None));",
          "    assert!(either.count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]