[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Either::Right(42);",
          "    let cloned_value = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_value, Either::Right(42));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(cloned_value != value);",
          "    assert_eq!(cloned_value.clone(), cloned_value);"
        ],
        "code": [
          "{",
          "    let value = Either::Right(42);",
          "    let cloned_value = value.clone();",
          "    assert_eq!(cloned_value, Either::Right(42));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(cloned_value != value);",
          "    assert_eq!(cloned_value.clone(), cloned_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value = Either::Right(String::from(\"Hello, World!\"));",
          "    let cloned_value = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(cloned_value, Either::Right(ref s) if s == \"Hello, World!\"));",
          "    assert_ne!(cloned_value as *const _, value as *const _);"
        ],
        "code": [
          "{",
          "    let value = Either::Right(String::from(\"Hello, World!\"));",
          "    let cloned_value = value.clone();",
          "    assert!(matches!(cloned_value, Either::Right(ref s) if s == \"Hello, World!\"));",
          "    assert_ne!(cloned_value as *const _, value as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Either<Vec<i32>, ()> = Either::Right(vec![]);",
          "    let cloned_value = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_value, Either::Right(vec![]));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(matches!(value, Either::Right(_)));",
          "    assert_ne!(cloned_value, value);"
        ],
        "code": [
          "{",
          "    let value: Either<Vec<i32>, ()> = Either::Right(vec![]);",
          "    let cloned_value = value.clone();",
          "    assert_eq!(cloned_value, Either::Right(vec![]));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(matches!(value, Either::Right(_)));",
          "    assert_ne!(cloned_value, value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value: Either<Vec<i32>, ()> = Either::Right((0..1000).collect());",
          "    let cloned_value = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_value, Either::Right((0..1000).collect()));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(cloned_value.right().is_some());",
          "    assert!(cloned_value.right().unwrap().len() == 1000);",
          "    assert!(cloned_value.right().unwrap().get(0) == Some(&0));",
          "    assert!(cloned_value.right().unwrap().get(999) == Some(&999));"
        ],
        "code": [
          "{",
          "    let value: Either<Vec<i32>, ()> = Either::Right((0..1000).collect());",
          "    let cloned_value = value.clone();",
          "    assert_eq!(cloned_value, Either::Right((0..1000).collect()));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(cloned_value.right().is_some());",
          "    assert!(cloned_value.right().unwrap().len() == 1000);",
          "    assert!(cloned_value.right().unwrap().get(0) == Some(&0));",
          "    assert!(cloned_value.right().unwrap().get(999) == Some(&999));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Clone)]",
          "    struct ComplexStruct {",
          "        data: Vec<i32>,",
          "    }",
          "    let value = Either::Right(ComplexStruct { data: vec![1, 2, 3] });",
          "    let cloned_value = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_value, Either::Right(ComplexStruct { data: vec![1, 2, 3] }));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(matches!(value, Either::Right(_)));",
          "    assert_ne!(cloned_value as *const _, value as *const _);"
        ],
        "code": [
          "{",
          "    #[derive(Clone)]",
          "    struct ComplexStruct {",
          "        data: Vec<i32>,",
          "    }",
          "    let value = Either::Right(ComplexStruct { data: vec![1, 2, 3] });",
          "    let cloned_value = value.clone();",
          "    assert_eq!(cloned_value, Either::Right(ComplexStruct { data: vec![1, 2, 3] }));",
          "    assert!(matches!(cloned_value, Either::Right(_)));",
          "    assert!(matches!(value, Either::Right(_)));",
          "    assert_ne!(cloned_value as *const _, value as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]