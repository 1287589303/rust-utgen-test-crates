[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            let data = b\"hello\";",
          "            let len = data.len().min(buf.len());",
          "            buf[..len].copy_from_slice(&data[..len]);",
          "            Ok(len)",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 5];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf, b\"hello\");",
          "    assert!(either.is_right());",
          "    assert!(either.is_left() == false);"
        ],
        "code": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            let data = b\"hello\";",
          "            let len = data.len().min(buf.len());",
          "            buf[..len].copy_from_slice(&data[..len]);",
          "            Ok(len)",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 5];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "    assert_eq!(buf, b\"hello\");",
          "    assert!(either.is_right());",
          "    assert!(either.is_left() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            buf[0] = b'h';",
          "            Ok(1)",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 1];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf[0], b'h');",
          "    assert_eq!(either, Either::Right(MockRead));",
          "    assert!(either.read_exact(&mut buf).is_ok());",
          "    assert_eq!(either.read_exact(&mut [0u8; 1]).unwrap(), 1);",
          "    assert!(either.read_exact(&mut buf).is_err());"
        ],
        "code": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            buf[0] = b'h';",
          "            Ok(1)",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 1];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "    assert_eq!(buf[0], b'h');",
          "    assert_eq!(either, Either::Right(MockRead));",
          "    assert!(either.read_exact(&mut buf).is_ok());",
          "    assert_eq!(either.read_exact(&mut [0u8; 1]).unwrap(), 1);",
          "    assert!(either.read_exact(&mut buf).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            for i in 0..buf.len() {",
          "                buf[i] = i as u8;",
          "            }",
          "            Ok(buf.len())",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 1024];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(buf[0], 0);",
          "    assert_eq!(buf[1], 1);",
          "    assert_eq!(buf[2], 2);",
          "    assert_eq!(buf[3], 3);",
          "    assert_eq!(buf[4], 4);",
          "    assert_eq!(buf[5], 5);",
          "    assert_eq!(buf[6], 6);",
          "    assert_eq!(buf[7], 7);",
          "    assert_eq!(buf[8], 8);",
          "    assert_eq!(buf[9], 9);",
          "    assert_eq!(buf[10], 10);",
          "    assert_eq!(buf[11], 11);",
          "    assert_eq!(buf[12], 12);",
          "    assert_eq!(buf[13], 13);",
          "    assert_eq!(buf[14], 14);",
          "    assert_eq!(buf[15], 15);",
          "    assert_eq!(buf[16], 16);",
          "    assert_eq!(buf[17], 17);",
          "    assert_eq!(buf[18], 18);",
          "    assert_eq!(buf[19], 19);",
          "    ... // Continue up to buf[1023] if needed",
          "    assert_eq!(buf[1023], 1023);"
        ],
        "code": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            for i in 0..buf.len() {",
          "                buf[i] = i as u8;",
          "            }",
          "            Ok(buf.len())",
          "        }",
          "    }",
          "",
          "    let mut buf = [0u8; 1024];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "    assert_eq!(buf[0], 0);",
          "    assert_eq!(buf[1], 1);",
          "    assert_eq!(buf[2], 2);",
          "    assert_eq!(buf[3], 3);",
          "    assert_eq!(buf[4], 4);",
          "    assert_eq!(buf[5], 5);",
          "    assert_eq!(buf[6], 6);",
          "    assert_eq!(buf[7], 7);",
          "    assert_eq!(buf[8], 8);",
          "    assert_eq!(buf[9], 9);",
          "    assert_eq!(buf[10], 10);",
          "    assert_eq!(buf[11], 11);",
          "    assert_eq!(buf[12], 12);",
          "    assert_eq!(buf[13], 13);",
          "    assert_eq!(buf[14], 14);",
          "    assert_eq!(buf[15], 15);",
          "    assert_eq!(buf[16], 16);",
          "    assert_eq!(buf[17], 17);",
          "    assert_eq!(buf[18], 18);",
          "    assert_eq!(buf[19], 19);",
          "    ... // Continue up to buf[1023] if needed",
          "    assert_eq!(buf[1023], 1023);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            // No data to read for zero-length buffer",
          "            Ok(0)",
          "        }",
          "    }",
          "",
          "    let mut buf: &mut [u8] = &mut [];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(MockRead));",
          "    assert!(either.read_exact(&mut buf).is_ok());",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(either.read_exact(&mut buf).unwrap(), ());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(either.read_exact(&mut buf), Ok(())));"
        ],
        "code": [
          "{",
          "    struct MockRead;",
          "    impl Read for MockRead {",
          "        fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {",
          "            // No data to read for zero-length buffer",
          "            Ok(0)",
          "        }",
          "    }",
          "",
          "    let mut buf: &mut [u8] = &mut [];",
          "    let mut either = Either::Right(MockRead);",
          "    either.read_exact(&mut buf).unwrap();",
          "    assert_eq!(either, Either::Right(MockRead));",
          "    assert!(either.read_exact(&mut buf).is_ok());",
          "    assert_eq!(buf.len(), 0);",
          "    assert_eq!(either.read_exact(&mut buf).unwrap(), ());",
          "    assert!(matches!(either, Either::Right(_)));",
          "    assert!(matches!(either.read_exact(&mut buf), Ok(())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]