[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![0, 1, 2]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right(vec![0, -1, -2]));"
        ],
        "code": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![0, 1, 2]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "    assert_eq!(right, Right(vec![0, -1, -2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right(vec![]));",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![1, 2, 3]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "    if let Right(r) = x {",
          "    *r = -*r;",
          "    }",
          "    });",
          "    assert_eq!(right, Right(vec![-1, -2, -3]));"
        ],
        "code": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "    assert_eq!(right, Right(vec![]));",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![1, 2, 3]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "    if let Right(r) = x {",
          "    *r = -*r;",
          "    }",
          "    });",
          "    assert_eq!(right, Right(vec![-1, -2, -3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right: Either<Vec<&str>, [&mut i32; 3]> = Right([&mut 0, &mut 1, &mut 2]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right([&mut 0, &mut -1, &mut -2]));"
        ],
        "code": [
          "{",
          "    let mut right: Either<Vec<&str>, [&mut i32; 3]> = Right([&mut 0, &mut 1, &mut 2]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "    assert_eq!(right, Right([&mut 0, &mut -1, &mut -2]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![3, 4, 5, 6, 7]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right, Right(vec![-3, -4, -5, -6, -7]));"
        ],
        "code": [
          "{",
          "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![3, 4, 5, 6, 7]);",
          "    right.factor_iter_mut().for_each(|x| {",
          "        if let Right(r) = x {",
          "            *r = -*r;",
          "        }",
          "    });",
          "    assert_eq!(right, Right(vec![-3, -4, -5, -6, -7]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]