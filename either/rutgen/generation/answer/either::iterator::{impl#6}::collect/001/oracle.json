[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count > 0 {",
          "                self.count -= 1;",
          "                Some(42) // producing a constant value",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = RightIter { count: 5 };",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Either::Right(42), Either::Right(42), Either::Right(42), Either::Right(42), Either::Right(42)]);",
          "    assert_eq!(right_iterator.count, 0);",
          "    assert!(result.len() == 5);",
          "    assert!(matches!(result[0], Either::Right(_)));",
          "    assert!(matches!(result[4], Either::Right(_)));",
          "    assert!(result.iter().all(|x| match x { Either::Right(v) => *v == 42, _ => false }));"
        ],
        "code": [
          "{",
          "    struct RightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for RightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count > 0 {",
          "                self.count -= 1;",
          "                Some(42) // producing a constant value",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = RightIter { count: 5 };",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "    assert_eq!(result, vec![Either::Right(42), Either::Right(42), Either::Right(42), Either::Right(42), Either::Right(42)]);",
          "    assert_eq!(right_iterator.count, 0);",
          "    assert!(result.len() == 5);",
          "    assert!(matches!(result[0], Either::Right(_)));",
          "    assert!(matches!(result[4], Either::Right(_)));",
          "    assert!(result.iter().all(|x| match x { Either::Right(v) => *v == 42, _ => false }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyRightIter;",
          "",
          "    impl Iterator for EmptyRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iterator = EmptyRightIter;",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Vec::<Either<i32, usize>>::new());"
        ],
        "code": [
          "{",
          "    struct EmptyRightIter;",
          "",
          "    impl Iterator for EmptyRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            None",
          "        }",
          "    }",
          "",
          "    let right_iterator = EmptyRightIter;",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "    assert_eq!(result, Vec::<Either<i32, usize>>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct LargeRightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LargeRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count > 0 {",
          "                self.count -= 1;",
          "                Some(self.count) // producing decreasing values",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = LargeRightIter { count: 1_000_000 };",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 1_000_000);",
          "    assert_eq!(result[999_999], Either::Right(0));",
          "    assert_eq!(result[0], Either::Right(999_999));",
          "    assert!(result.iter().all(|x| matches!(x, Either::Right(_))));",
          "    assert!(result.iter().enumerate().all(|(i, x)| if let Either::Right(val) = x { *val == 999_999 - i } else { false }));"
        ],
        "code": [
          "{",
          "    struct LargeRightIter {",
          "        count: usize,",
          "    }",
          "",
          "    impl Iterator for LargeRightIter {",
          "        type Item = usize;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.count > 0 {",
          "                self.count -= 1;",
          "                Some(self.count) // producing decreasing values",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iterator = LargeRightIter { count: 1_000_000 };",
          "    let iter = IterEither { inner: Either::Right(right_iterator) };",
          "    let result: Vec<Either<i32, usize>> = iter.collect();",
          "    assert_eq!(result.len(), 1_000_000);",
          "    assert_eq!(result[999_999], Either::Right(0));",
          "    assert_eq!(result[0], Either::Right(999_999));",
          "    assert!(result.iter().all(|x| matches!(x, Either::Right(_))));",
          "    assert!(result.iter().enumerate().all(|(i, x)| if let Either::Right(val) = x { *val == 999_999 - i } else { false }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]