[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 3u64);",
          "    assert_eq!(result, left.either_into::<u64>());",
          "    assert!(matches!(left, Left(3u16)));",
          "    assert!(matches!(left.either_into(), 3u64));",
          "    assert!(matches!(left.either_into::<u64>(), 3u64));"
        ],
        "code": [
          "{",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 3u64);",
          "    assert_eq!(result, left.either_into::<u64>());",
          "    assert!(matches!(left, Left(3u16)));",
          "    assert!(matches!(left.either_into(), 3u64));",
          "    assert!(matches!(left.either_into::<u64>(), 3u64));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u32> = Right(7u32);",
          "    let result: u64 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 7u64);",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 3u64);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u32> = Right(7u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 7u64);",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 3u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0u64);",
          "    let right: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let left: Either<u16, u32> = Left(5u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 5u64);",
          "    let right: Either<u16, u32> = Right(10u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 10u64);",
          "    let left: Either<u16, u32> = Left(u16::MAX);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, u16::MAX as u64);",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, u32::MAX as u64);"
        ],
        "code": [
          "{",
          "    let left: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let right: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let left: Either<u16, u32> = Left(5u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 5u64);",
          "    let right: Either<u16, u32> = Right(10u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 10u64);",
          "    let left: Either<u16, u32> = Left(u16::MAX);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, u16::MAX as u64);",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, u32::MAX as u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 0u64);",
          "    let left: Either<u16, u32> = Left(10u16);",
          "    let result_left: u64 = left.either_into();",
          "    assert_eq!(result_left, 10u64);",
          "    let left_negative: Either<i16, u32> = Left(-5i16);",
          "    let result_left_negative: u64 = left_negative.either_into();",
          "    assert_eq!(result_left_negative, -5i16 as u64);",
          "    let right_large: Either<u16, u32> = Right(1000u32);",
          "    let result_right_large: u64 = right_large.either_into();",
          "    assert_eq!(result_right_large, 1000u64);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let left: Either<u16, u32> = Left(10u16);",
          "    let result_left: u64 = left.either_into();",
          "    assert_eq!(result_left, 10u64);",
          "    let left_negative: Either<i16, u32> = Left(-5i16);",
          "    let result_left_negative: u64 = left_negative.either_into();",
          "    assert_eq!(result_left_negative, -5i16 as u64);",
          "    let right_large: Either<u16, u32> = Right(1000u32);",
          "    let result_right_large: u64 = right_large.either_into();",
          "    assert_eq!(result_right_large, 1000u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<u16, u32> = Left(u16::MAX);",
          "    let result: u64 = left.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, u64::from(u16::MAX));",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, u64::from(u32::MAX));",
          "    let left_zero: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left_zero.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let right_zero: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right_zero.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let left_small: Either<u16, u32> = Left(1u16);",
          "    let result: u64 = left_small.either_into();",
          "    assert_eq!(result, 1u64);",
          "    let right_small: Either<u16, u32> = Right(1u32);",
          "    let result: u64 = right_small.either_into();",
          "    assert_eq!(result, 1u64);",
          "    let large_left: Either<u16, u32> = Left(u16::MAX - 1);",
          "    let result: u64 = large_left.either_into();",
          "    assert_eq!(result, u64::from(u16::MAX - 1));",
          "    let large_right: Either<u16, u32> = Right(u32::MAX - 1);",
          "    let result: u64 = large_right.either_into();",
          "    assert_eq!(result, u64::from(u32::MAX - 1));"
        ],
        "code": [
          "{",
          "    let left: Either<u16, u32> = Left(u16::MAX);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, u64::from(u16::MAX));",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, u64::from(u32::MAX));",
          "    let left_zero: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left_zero.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let right_zero: Either<u16, u32> = Right(0u32);",
          "    let result: u64 = right_zero.either_into();",
          "    assert_eq!(result, 0u64);",
          "    let left_small: Either<u16, u32> = Left(1u16);",
          "    let result: u64 = left_small.either_into();",
          "    assert_eq!(result, 1u64);",
          "    let right_small: Either<u16, u32> = Right(1u32);",
          "    let result: u64 = right_small.either_into();",
          "    assert_eq!(result, 1u64);",
          "    let large_left: Either<u16, u32> = Left(u16::MAX - 1);",
          "    let result: u64 = large_left.either_into();",
          "    assert_eq!(result, u64::from(u16::MAX - 1));",
          "    let large_right: Either<u16, u32> = Right(u32::MAX - 1);",
          "    let result: u64 = large_right.either_into();",
          "    assert_eq!(result, u64::from(u32::MAX - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, u32::MAX.into());",
          "    ",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 3u64);",
          "    ",
          "    let left: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 0u64);",
          "    ",
          "    let right: Either<u16, u32> = Right(7u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 7u64);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u32> = Right(u32::MAX);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, u32::MAX.into());",
          "    ",
          "    let left: Either<u16, u32> = Left(3u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 3u64);",
          "    ",
          "    let left: Either<u16, u32> = Left(0u16);",
          "    let result: u64 = left.either_into();",
          "    assert_eq!(result, 0u64);",
          "    ",
          "    let right: Either<u16, u32> = Right(7u32);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 7u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]