[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u32> = Right(255u32);",
          "    let result: u8 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 255u8);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u32> = Right(255u32);",
          "    let result: u8 = right.either_into();",
          "    assert_eq!(result, 255u8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u32> = Right(123456789u32);",
          "    let result: i32 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 123456789u32);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u32> = Right(123456789u32);",
          "    let result: i32 = right.either_into();",
          "    assert_eq!(result, 123456789u32);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<&str, &str> = Right(\"test\");",
          "    let result: String = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, \"test\".to_string());"
        ],
        "code": [
          "{",
          "    let right: Either<&str, &str> = Right(\"test\");",
          "    let result: String = right.either_into();",
          "    assert_eq!(result, \"test\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u8>, Vec<u8>> = Right(Vec::new());",
          "    let result: Vec<u8> = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Vec::<u8>::new());"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u8>, Vec<u8>> = Right(Vec::new());",
          "    let result: Vec<u8> = right.either_into();",
          "    assert_eq!(result, Vec::<u8>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u16, u64> = Right(1_000_000_000_000_000_000u64);",
          "    let result: u64 = right.either_into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, 1_000_000_000_000_000_000u64);"
        ],
        "code": [
          "{",
          "    let right: Either<u16, u64> = Right(1_000_000_000_000_000_000u64);",
          "    let result: u64 = right.either_into();",
          "    assert_eq!(result, 1_000_000_000_000_000_000u64);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]