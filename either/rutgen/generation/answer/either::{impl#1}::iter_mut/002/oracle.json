[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![]);",
          "    for _ in left.iter_mut() {}",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.iter_mut(), Left(vec![]));",
          "    ",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 3]);",
          "    for l in left.iter_mut() {",
          "    *l *= *l;",
          "    }",
          "    assert_eq!(left, Left(vec![4, 9]));",
          "    ",
          "    let mut inner = [4, 5];",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);",
          "    for r in right.iter_mut() {",
          "    *r *= *r;",
          "    }",
          "    assert_eq!(inner, [16, 25]);"
        ],
        "code": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![]);",
          "    for _ in left.iter_mut() {}",
          "    assert_eq!(left.iter_mut(), Left(vec![]));",
          "    ",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 3]);",
          "    for l in left.iter_mut() {",
          "    *l *= *l;",
          "    }",
          "    assert_eq!(left, Left(vec![4, 9]));",
          "    ",
          "    let mut inner = [4, 5];",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);",
          "    for r in right.iter_mut() {",
          "    *r *= *r;",
          "    }",
          "    assert_eq!(inner, [16, 25]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![5]);",
          "    for l in left.iter_mut() {",
          "        *l *= 2;",
          "    }",
          "    assert_eq!(left, Left(vec![10]));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.iter_mut(), Either::Left(vec![10]).into_iter());",
          "    assert!(left.is_left());",
          "    assert_eq!(left.left(), Some(vec![10]));",
          "    assert_eq!(left.as_mut(), Either::Left(&mut vec![10]));",
          "    assert_eq!(left.factor_iter_mut(), IterEither::Left(vec![10].into_iter()));"
        ],
        "code": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![5]);",
          "    for l in left.iter_mut() {",
          "        *l *= 2;",
          "    }",
          "    assert_eq!(left, Left(vec![10]));",
          "    assert_eq!(left.iter_mut(), Either::Left(vec![10]).into_iter());",
          "    assert!(left.is_left());",
          "    assert_eq!(left.left(), Some(vec![10]));",
          "    assert_eq!(left.as_mut(), Either::Left(&mut vec![10]));",
          "    assert_eq!(left.factor_iter_mut(), IterEither::Left(vec![10].into_iter()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 4]);",
          "    for l in left.iter_mut() {",
          "        *l += 3;",
          "    }",
          "    assert_eq!(left, Left(vec![5, 7]));",
          "}"
        ],
        "oracle": [
          "    assert!(left.is_left());",
          "    assert_eq!(left.left(), Some(vec![2, 4]));",
          "    assert_eq!(left.iter_mut().collect::<Vec<_>>(), vec![&mut 2, &mut 4]);",
          "    assert_eq!(left, Left(vec![5, 7]));"
        ],
        "code": [
          "{",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 4]);",
          "    for l in left.iter_mut() {",
          "        *l += 3;",
          "    }",
          "    assert_eq!(left, Left(vec![5, 7]));",
          "    assert!(left.is_left());",
          "    assert_eq!(left.left(), Some(vec![2, 4]));",
          "    assert_eq!(left.iter_mut().collect::<Vec<_>>(), vec![&mut 2, &mut 4]);",
          "    assert_eq!(left, Left(vec![5, 7]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner: &mut [u32] = &mut [];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for _ in right.iter_mut() {}",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.iter_mut(), Either::Right(inner.into_iter()));",
          "    assert!(matches!(right, Either::Right(_)));",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 3]);",
          "    for l in left.iter_mut() { *l *= *l };",
          "    assert_eq!(left, Either::Left(vec![4, 9]));",
          "    let mut inner = [4, 5];",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);",
          "    for r in right.iter_mut() { *r *= *r };",
          "    assert_eq!(inner, [16, 25]);",
          "    assert!(left.iter_mut().is_left());",
          "    assert!(right.iter_mut().is_right());"
        ],
        "code": [
          "{",
          "    let mut inner: &mut [u32] = &mut [];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for _ in right.iter_mut() {}",
          "    assert_eq!(right.iter_mut(), Either::Right(inner.into_iter()));",
          "    assert!(matches!(right, Either::Right(_)));",
          "    let mut left: Either<Vec<u32>, &mut [u32]> = Left(vec![2, 3]);",
          "    for l in left.iter_mut() { *l *= *l };",
          "    assert_eq!(left, Either::Left(vec![4, 9]));",
          "    let mut inner = [4, 5];",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut inner[..]);",
          "    for r in right.iter_mut() { *r *= *r };",
          "    assert_eq!(inner, [16, 25]);",
          "    assert!(left.iter_mut().is_left());",
          "    assert!(right.iter_mut().is_right());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner: &mut [u32] = &mut [1];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for r in right.iter_mut() {",
          "        *r *= 5;",
          "    }",
          "    assert_eq!(inner, [5]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.iter_mut().next(), Some(&mut 1));",
          "    assert_eq!(right.iter_mut().count(), 1);",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![1, 2]);",
          "    for l in left.iter_mut() { *l *= 2; }",
          "    assert_eq!(left, Left(vec![2, 4]));",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![3, 4, 5]);",
          "    for l in left.iter_mut() { *l += 1; }",
          "    assert_eq!(left, Left(vec![4, 5, 6]));",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut [10, 20]);",
          "    for r in right.iter_mut() { *r -= 5; }",
          "    assert_eq!(right.iter_mut().collect::<Vec<_>>(), vec![&mut 5, &mut 15]);",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut [3, 4]);",
          "    let rhs: u32 = right.iter_mut().next().unwrap();",
          "    assert_eq!(rhs, 3);",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![2, 4, 6]);",
          "    for l in left.iter_mut() { *l /= 2; }",
          "    assert_eq!(left, Left(vec![1, 2, 3]));"
        ],
        "code": [
          "{",
          "    let mut inner: &mut [u32] = &mut [1];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for r in right.iter_mut() {",
          "        *r *= 5;",
          "    }",
          "    assert_eq!(inner, [5]);",
          "    assert_eq!(right.iter_mut().next(), Some(&mut 1));",
          "    assert_eq!(right.iter_mut().count(), 1);",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![1, 2]);",
          "    for l in left.iter_mut() { *l *= 2; }",
          "    assert_eq!(left, Left(vec![2, 4]));",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![3, 4, 5]);",
          "    for l in left.iter_mut() { *l += 1; }",
          "    assert_eq!(left, Left(vec![4, 5, 6]));",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut [10, 20]);",
          "    for r in right.iter_mut() { *r -= 5; }",
          "    assert_eq!(right.iter_mut().collect::<Vec<_>>(), vec![&mut 5, &mut 15]);",
          "    let mut right: Either<Vec<u32>, _> = Right(&mut [3, 4]);",
          "    let rhs: u32 = right.iter_mut().next().unwrap();",
          "    assert_eq!(rhs, 3);",
          "    let mut left: Either<Vec<u32>, _> = Left(vec![2, 4, 6]);",
          "    for l in left.iter_mut() { *l /= 2; }",
          "    assert_eq!(left, Left(vec![1, 2, 3]));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut inner: &mut [u32] = &mut [1, 2, 3];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for r in right.iter_mut() {",
          "        *r += 2;",
          "    }",
          "    assert_eq!(inner, [3, 4, 5]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.iter_mut(), Right(inner.into_iter()));",
          "    assert_eq!(right.unwrap_right(), inner);",
          "    assert!(right.is_right());",
          "    let result = right.map_right(|x| *x + 2);",
          "    assert_eq!(result, Right(vec![3, 4, 5]));",
          "    let left_case: Either<Vec<u32>, _> = Left(vec![1, 2]);",
          "    let mut left = left_case;",
          "    for l in left.iter_mut() { *l += 2; }",
          "    assert_eq!(left, Left(vec![3, 4]));",
          "    assert!(left.is_left());",
          "    assert_eq!(left.unwrap_left(), vec![3, 4]);"
        ],
        "code": [
          "{",
          "    let mut inner: &mut [u32] = &mut [1, 2, 3];",
          "    let mut right: Either<Vec<u32>, _> = Right(inner);",
          "    for r in right.iter_mut() {",
          "        *r += 2;",
          "    }",
          "    assert_eq!(inner, [3, 4, 5]);",
          "    assert_eq!(right.iter_mut(), Right(inner.into_iter()));",
          "    assert_eq!(right.unwrap_right(), inner);",
          "    assert!(right.is_right());",
          "    let result = right.map_right(|x| *x + 2);",
          "    assert_eq!(result, Right(vec![3, 4, 5]));",
          "    let left_case: Either<Vec<u32>, _> = Left(vec![1, 2]);",
          "    let mut left = left_case;",
          "    for l in left.iter_mut() { *l += 2; }",
          "    assert_eq!(left, Left(vec![3, 4]));",
          "    assert!(left.is_left());",
          "    assert_eq!(left.unwrap_left(), vec![3, 4]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]