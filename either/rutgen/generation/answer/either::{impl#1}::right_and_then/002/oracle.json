[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<i32, u32> = Left(123);",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(123));"
        ],
        "code": [
          "{",
          "    let left: Either<i32, u32> = Left(123);",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "    assert_eq!(result, Left(123));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<&str, u32> = Left(\"error\");",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(\"error\"));"
        ],
        "code": [
          "{",
          "    let left: Either<&str, u32> = Left(\"error\");",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "    assert_eq!(result, Left(\"error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<f64, u32> = Left(45.67);",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(45.67));"
        ],
        "code": [
          "{",
          "    let left: Either<f64, u32> = Left(45.67);",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "    assert_eq!(result, Left(45.67));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<(), u32> = Left(());",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Left(()));"
        ],
        "code": [
          "{",
          "    let left: Either<(), u32> = Left(());",
          "    let result = left.right_and_then(|x| Right(x * 2));",
          "    assert_eq!(result, Left(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]