[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, u32> = Right(0);",
          "    right.right_and_then(|x| Right(x + 10));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(10));"
        ],
        "code": [
          "{",
          "    let right: Either<u32, u32> = Right(0);",
          "    right.right_and_then(|x| Right(x + 10));",
          "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(10));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, u32> = Right(u32::MAX);",
          "    right.right_and_then(|x| Right(x / 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right_and_then(|x| Right(x / 2)), Right(u32::MAX / 2));"
        ],
        "code": [
          "{",
          "    let right: Either<u32, u32> = Right(u32::MAX);",
          "    right.right_and_then(|x| Right(x / 2));",
          "    assert_eq!(right.right_and_then(|x| Right(x / 2)), Right(u32::MAX / 2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, u32> = Right(123);",
          "    right.right_and_then(|x| Right(x * 2));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));"
        ],
        "code": [
          "{",
          "    let right: Either<u32, u32> = Right(123);",
          "    right.right_and_then(|x| Right(x * 2));",
          "    assert_eq!(right.right_and_then(|x| Right(x * 2)), Right(246));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, &str> = Right(50);",
          "    right.right_and_then(|x| Left(\"Error\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right_and_then(|x| Left(\"Error\")), Left(\"Error\"));"
        ],
        "code": [
          "{",
          "    let right: Either<u32, &str> = Right(50);",
          "    right.right_and_then(|x| Left(\"Error\"));",
          "    assert_eq!(right.right_and_then(|x| Left(\"Error\")), Left(\"Error\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<u32, &str> = Right(34);",
          "    right.right_and_then(|x| Right(format!(\"Value: {}\", x)));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right_and_then(|x| Right(format!(\"Value: {}\", x))), Right(String::from(\"Value: 34\")));",
          "    assert_eq!(right.right_and_then(|x| Right(format!(\"Result: {}\", x * 2))), Right(String::from(\"Result: 68\")));",
          "    assert_eq!(right.right_and_then(|x| Right(x.to_string())), Right(String::from(\"34\")));",
          "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(44));"
        ],
        "code": [
          "{",
          "    let right: Either<u32, &str> = Right(34);",
          "    right.right_and_then(|x| Right(format!(\"Value: {}\", x)));",
          "    assert_eq!(right.right_and_then(|x| Right(format!(\"Value: {}\", x))), Right(String::from(\"Value: 34\")));",
          "    assert_eq!(right.right_and_then(|x| Right(format!(\"Result: {}\", x * 2))), Right(String::from(\"Result: 68\")));",
          "    assert_eq!(right.right_and_then(|x| Right(x.to_string())), Right(String::from(\"34\")));",
          "    assert_eq!(right.right_and_then(|x| Right(x + 10)), Right(44));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]