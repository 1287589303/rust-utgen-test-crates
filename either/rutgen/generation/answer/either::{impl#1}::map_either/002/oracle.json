[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"hello\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(5));",
          "    assert!(matches!(left.map_either(f, |x| x.to_string()), Left(5)));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());"
        ],
        "code": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"hello\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(5));",
          "    assert!(matches!(left.map_either(f, |x| x.to_string()), Left(5)));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));"
        ],
        "code": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));"
        ],
        "code": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"\".into());",
          "    let _ = left.map_either(f, |x| x.to_string());",
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"zero\".into());",
          "    let _ = left.map_either(f, |x| x.to_string()); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(4));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left(), Some(\"zero\".into()));",
          "    assert_eq!(left.right(), None);"
        ],
        "code": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"zero\".into());",
          "    let _ = left.map_either(f, |x| x.to_string()); ",
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(4));",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left(), Some(\"zero\".into()));",
          "    assert_eq!(left.right(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"maximum\".into());",
          "    let _ = left.map_either(f, |x| x.to_string()); ",
          "}"
        ],
        "oracle": [
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(7));"
        ],
        "code": [
          "{",
          "    let f = |s: String| s.len();",
          "    let left: Either<String, u8> = Left(\"maximum\".into());",
          "    let _ = left.map_either(f, |x| x.to_string()); ",
          "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]