[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let g = |u: u8| u.to_string();",
          "",
          "    let right: Either<String, u8> = Right(0);",
          "    let _ = right.map_either(|_s| 0, g);",
          "",
          "    let right: Either<String, u8> = Right(128);",
          "    let _ = right.map_either(|_s| 0, g);",
          "",
          "    let right: Either<String, u8> = Right(255);",
          "    let _ = right.map_either(|_s| 0, g);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"0\".into()));",
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"128\".into()));",
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"255\".into()));"
        ],
        "code": [
          "{",
          "    let g = |u: u8| u.to_string();",
          "",
          "    let right: Either<String, u8> = Right(0);",
          "    let _ = right.map_either(|_s| 0, g);",
          "",
          "    let right: Either<String, u8> = Right(128);",
          "    let _ = right.map_either(|_s| 0, g);",
          "",
          "    let right: Either<String, u8> = Right(255);",
          "    let _ = right.map_either(|_s| 0, g);",
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"0\".into()));",
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"128\".into()));",
          "    assert_eq!(right.map_either(|_s| 0, g), Right(\"255\".into()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]