[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct RightIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let item = self.data[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n == 0 {",
          "                self.next_back()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    };",
          "",
          "    let either = Either::Right(right_iter);",
          "    let result = either.nth_back(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(3));"
        ],
        "code": [
          "{",
          "    struct RightIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let item = self.data[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n == 0 {",
          "                self.next_back()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    };",
          "",
          "    let either = Either::Right(right_iter);",
          "    let result = either.nth_back(0);",
          "    assert_eq!(result, Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct RightIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let item = self.data[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n >= self.data.len() {",
          "                None",
          "            } else {",
          "                self.next_back()",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    };",
          "",
          "    let either = Either::Right(right_iter);",
          "    let result = either.nth_back(3);",
          "}"
        ],
        "oracle": [
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(3), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 2 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 1 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(1), Some(2));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), Some(1));",
          "    let right_iter = RightIterator { data: vec![], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(4), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 2 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(1), Some(2));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 1 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), Some(1));"
        ],
        "code": [
          "{",
          "    struct RightIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "    impl Iterator for RightIterator {",
          "        type Item = i32;",
          "",
          "        fn next(&mut self) -> Option<Self::Item> {",
          "            if self.index < self.data.len() {",
          "                let item = self.data[self.index];",
          "                self.index += 1;",
          "                Some(item)",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    impl DoubleEndedIterator for RightIterator {",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                Some(self.data[self.index])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n >= self.data.len() {",
          "                None",
          "            } else {",
          "                self.next_back()",
          "            }",
          "        }",
          "    }",
          "",
          "    let right_iter = RightIterator {",
          "        data: vec![1, 2, 3],",
          "        index: 3,",
          "    };",
          "",
          "    let either = Either::Right(right_iter);",
          "    let result = either.nth_back(3);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(3), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 2 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 1 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(1), Some(2));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), Some(1));",
          "    let right_iter = RightIterator { data: vec![], index: 0 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(4), None);",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 2 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(1), Some(2));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 3 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    let right_iter = RightIterator { data: vec![1, 2, 3], index: 1 };",
          "    let either = Either::Right(right_iter);",
          "    assert_eq!(either.nth_back(0), Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]