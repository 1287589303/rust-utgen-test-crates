[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(4));",
          "    let result_out_of_bounds = either.nth_back(5);",
          "    assert_eq!(result_out_of_bounds, None);",
          "    let result_zero = either.nth_back(0);",
          "    assert_eq!(result_zero, Some(5));",
          "    let result_negative = either.nth_back(usize::MAX);",
          "    assert_eq!(result_negative, None);",
          "    let result_boundary = either.nth_back(4);",
          "    assert_eq!(result_boundary, Some(1));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(1);",
          "    assert_eq!(result, Some(4));",
          "    let result_out_of_bounds = either.nth_back(5);",
          "    assert_eq!(result_out_of_bounds, None);",
          "    let result_zero = either.nth_back(0);",
          "    assert_eq!(result_zero, Some(5));",
          "    let result_negative = either.nth_back(usize::MAX);",
          "    assert_eq!(result_negative, None);",
          "    let result_boundary = either.nth_back(4);",
          "    assert_eq!(result_boundary, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(5));",
          "    assert_eq!(either.nth_back(1), Some(4));",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    assert_eq!(either.nth_back(3), Some(2));",
          "    assert_eq!(either.nth_back(4), Some(1));",
          "    assert_eq!(either.nth_back(5), None);"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(0);",
          "    assert_eq!(result, Some(5));",
          "    assert_eq!(either.nth_back(1), Some(4));",
          "    assert_eq!(either.nth_back(2), Some(3));",
          "    assert_eq!(either.nth_back(3), Some(2));",
          "    assert_eq!(either.nth_back(4), Some(1));",
          "    assert_eq!(either.nth_back(5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(1));",
          "    let result_out_of_bounds = either.nth_back(5);",
          "    assert_eq!(result_out_of_bounds, None);",
          "    let result_empty = Either::Left(TestIterator { data: vec![], index: 0 }).nth_back(0);",
          "    assert_eq!(result_empty, None);",
          "    let result_with_multiple_elements = Either::Left(TestIterator { data: vec![10, 20, 30], index: 3 }).nth_back(1);",
          "    assert_eq!(result_with_multiple_elements, Some(20));",
          "    let result_with_index_zero = Either::Left(TestIterator { data: vec![100], index: 1 }).nth_back(0);",
          "    assert_eq!(result_with_index_zero, Some(100));"
        ],
        "code": [
          "{",
          "    struct TestIterator {",
          "        data: Vec<i32>,",
          "        index: usize,",
          "    }",
          "",
          "    impl DoubleEndedIterator for TestIterator {",
          "        type Item = i32;",
          "",
          "        fn next_back(&mut self) -> Option<Self::Item> {",
          "            if self.index > 0 {",
          "                self.index -= 1;",
          "                self.data.get(self.index).copied()",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "",
          "        fn nth_back(&mut self, n: usize) -> Option<Self::Item> {",
          "            if n < self.data.len() {",
          "                Some(self.data[self.data.len() - 1 - n])",
          "            } else {",
          "                None",
          "            }",
          "        }",
          "    }",
          "",
          "    let left_iter = TestIterator {",
          "        data: vec![1, 2, 3, 4, 5],",
          "        index: 5,",
          "    };",
          "",
          "    let mut either = Either::Left(left_iter);",
          "    let result = either.nth_back(4);",
          "    assert_eq!(result, Some(1));",
          "    let result_out_of_bounds = either.nth_back(5);",
          "    assert_eq!(result_out_of_bounds, None);",
          "    let result_empty = Either::Left(TestIterator { data: vec![], index: 0 }).nth_back(0);",
          "    assert_eq!(result_empty, None);",
          "    let result_with_multiple_elements = Either::Left(TestIterator { data: vec![10, 20, 30], index: 3 }).nth_back(1);",
          "    assert_eq!(result_with_multiple_elements, Some(20));",
          "    let result_with_index_zero = Either::Left(TestIterator { data: vec![100], index: 1 }).nth_back(0);",
          "    assert_eq!(result_with_index_zero, Some(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]