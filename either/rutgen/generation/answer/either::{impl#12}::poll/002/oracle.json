[
  {
    "uses": [
      "use core::pin::Pin;",
      "use core::future::Future;",
      "use core::task::Context;",
      "use std::task::Poll;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::pin::Pin;",
          "    use core::future::Future;",
          "    use core::task::Context;",
          "    use std::task::Poll;",
          "",
          "    struct MockFuture;",
          "",
          "    impl Future for MockFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(42)",
          "        }",
          "    }",
          "",
          "    struct AnotherFuture;",
          "",
          "    impl Future for AnotherFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(100)",
          "        }",
          "    }",
          "",
          "    let future_left = MockFuture;",
          "    let future_right = AnotherFuture;",
          "",
          "    let either_instance = Either::Left(future_left);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "",
          "    let _ = pinned_either.poll(&mut context);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(pinned_either.poll(&mut context), Poll::Ready(42));",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    assert_eq!(pinned_either.poll(&mut context), Poll::Ready(100));"
        ],
        "code": [
          "{",
          "    use core::pin::Pin;",
          "    use core::future::Future;",
          "    use core::task::Context;",
          "    use std::task::Poll;",
          "",
          "    struct MockFuture;",
          "",
          "    impl Future for MockFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(42)",
          "        }",
          "    }",
          "",
          "    struct AnotherFuture;",
          "",
          "    impl Future for AnotherFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(100)",
          "        }",
          "    }",
          "",
          "    let future_left = MockFuture;",
          "    let future_right = AnotherFuture;",
          "",
          "    let either_instance = Either::Left(future_left);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "",
          "    let _ = pinned_either.poll(&mut context);",
          "    assert_eq!(pinned_either.poll(&mut context), Poll::Ready(42));",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    assert_eq!(pinned_either.poll(&mut context), Poll::Ready(100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use core::pin::Pin;",
          "    use core::future::Future;",
          "    use core::task::Context;",
          "    use std::task::Poll;",
          "",
          "    struct AnotherFuture;",
          "",
          "    impl Future for AnotherFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(100)",
          "        }",
          "    }",
          "",
          "    struct MockFuture;",
          "",
          "    impl Future for MockFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(42)",
          "        }",
          "    }",
          "",
          "    let future_left = AnotherFuture;",
          "    let future_right = MockFuture;",
          "",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "",
          "    let _ = pinned_either.poll(&mut context);",
          "}"
        ],
        "oracle": [
          "    let future_left = AnotherFuture;",
          "    let future_right = MockFuture;",
          "    let either_instance = Either::Left(future_left);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "    let result = pinned_either.poll(&mut context);",
          "    assert_eq!(result, Poll::Ready(100));",
          "    ",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.poll(&mut context);",
          "    assert_eq!(result, Poll::Ready(42));"
        ],
        "code": [
          "{",
          "    use core::pin::Pin;",
          "    use core::future::Future;",
          "    use core::task::Context;",
          "    use std::task::Poll;",
          "",
          "    struct AnotherFuture;",
          "",
          "    impl Future for AnotherFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(100)",
          "        }",
          "    }",
          "",
          "    struct MockFuture;",
          "",
          "    impl Future for MockFuture {",
          "        type Output = i32;",
          "",
          "        fn poll(self: Pin<&mut Self>, _: &mut Context<'_>) -> Poll<Self::Output> {",
          "            Poll::Ready(42)",
          "        }",
          "    }",
          "",
          "    let future_left = AnotherFuture;",
          "    let future_right = MockFuture;",
          "",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "",
          "    let _ = pinned_either.poll(&mut context);",
          "    let future_left = AnotherFuture;",
          "    let future_right = MockFuture;",
          "    let either_instance = Either::Left(future_left);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let mut context = Context::from_waker(futures::task::noop_waker_ref());",
          "    let result = pinned_either.poll(&mut context);",
          "    assert_eq!(result, Poll::Ready(100));",
          "    ",
          "    let either_instance = Either::Right(future_right);",
          "    let pinned_either = Pin::new(&mut either_instance);",
          "    let result = pinned_either.poll(&mut context);",
          "    assert_eq!(result, Poll::Ready(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]