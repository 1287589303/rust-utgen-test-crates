[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), i32> = Right(123);",
          "    right.right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right(), Some(123));"
        ],
        "code": [
          "{",
          "    let right: Either<(), i32> = Right(123);",
          "    right.right();",
          "    assert_eq!(right.right(), Some(123));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"Hello\"));",
          "    right.right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right(), Some(String::from(\"Hello\")));"
        ],
        "code": [
          "{",
          "    let right: Either<(), String> = Right(String::from(\"Hello\"));",
          "    right.right();",
          "    assert_eq!(right.right(), Some(String::from(\"Hello\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomStruct {",
          "        value: i32,",
          "    }",
          "    let right: Either<(), CustomStruct> = Right(CustomStruct { value: 42 });",
          "    right.right();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(right.right(), Some(CustomStruct { value: 42 }));"
        ],
        "code": [
          "{",
          "    struct CustomStruct {",
          "        value: i32,",
          "    }",
          "    let right: Either<(), CustomStruct> = Right(CustomStruct { value: 42 });",
          "    right.right();",
          "    assert_eq!(right.right(), Some(CustomStruct { value: 42 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]