[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![1, 2, 3]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Left(&1), Left(&2), Left(&3)]);"
        ],
        "code": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![1, 2, 3]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result, vec![Left(&1), Left(&2), Left(&3)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![4]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Left(&4)]);",
          "    assert!(result.len() == 1);",
          "    assert!(matches!(left.factor_into_iter().next(), Some(Left(&4))));"
        ],
        "code": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![4]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result, vec![Left(&4)]);",
          "    assert!(result.len() == 1);",
          "    assert!(matches!(left.factor_into_iter().next(), Some(Left(&4))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![]);",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left().unwrap(), vec![]);",
          "    assert_eq!(left.left_or(vec![1, 2, 3]), vec![]);",
          "    assert_eq!(left.left_or_else(|_| vec![1, 2, 3]), vec![]);",
          "    assert!(left.unwrap_left().is_empty());",
          "    assert_eq!(left.expect_left(\"Expected left value\"), vec![]);",
          "    assert_eq!(left.map_either(|v| v.len(), |v| v.len()), Left(0));",
          "    assert_eq!(left.map_left(|v| v.len()), Left(0));",
          "    assert_eq!(left.factor_into_iter().count(), 0);"
        ],
        "code": [
          "{",
          "    let left: Either<_, Vec<u8>> = Left(vec![]);",
          "    let result: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result, vec![]);",
          "    assert!(left.is_left());",
          "    assert!(!left.is_right());",
          "    assert_eq!(left.left().unwrap(), vec![]);",
          "    assert_eq!(left.left_or(vec![1, 2, 3]), vec![]);",
          "    assert_eq!(left.left_or_else(|_| vec![1, 2, 3]), vec![]);",
          "    assert!(left.unwrap_left().is_empty());",
          "    assert_eq!(left.expect_left(\"Expected left value\"), vec![]);",
          "    assert_eq!(left.map_either(|v| v.len(), |v| v.len()), Left(0));",
          "    assert_eq!(left.map_left(|v| v.len()), Left(0));",
          "    assert_eq!(left.factor_into_iter().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![5, 6, 7]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Right(5), Right(6), Right(7)]);",
          "    let left: Either<_, Vec<u8>> = Left(&[\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let empty_left: Either<_, Vec<u8>> = Left(&[]);",
          "    let result_empty_left: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(result_empty_left, vec![]);",
          "    let mixed: Either<Vec<&str>, Vec<u8>> = Right(vec![0, 1]);",
          "    let result_mixed: Vec<_> = mixed.factor_into_iter().collect();",
          "    assert_eq!(result_mixed, vec![Right(0), Right(1)]);",
          "    let single_element: Either<Vec<&str>, Vec<u8>> = Left(vec![\"single\"]);",
          "    let result_single: Vec<_> = single_element.factor_into_iter().collect();",
          "    assert_eq!(result_single, vec![Left(&\"single\")]);"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![5, 6, 7]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "    assert_eq!(result, vec![Right(5), Right(6), Right(7)]);",
          "    let left: Either<_, Vec<u8>> = Left(&[\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let empty_left: Either<_, Vec<u8>> = Left(&[]);",
          "    let result_empty_left: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(result_empty_left, vec![]);",
          "    let mixed: Either<Vec<&str>, Vec<u8>> = Right(vec![0, 1]);",
          "    let result_mixed: Vec<_> = mixed.factor_into_iter().collect();",
          "    assert_eq!(result_mixed, vec![Right(0), Right(1)]);",
          "    let single_element: Either<Vec<&str>, Vec<u8>> = Left(vec![\"single\"]);",
          "    let result_single: Vec<_> = single_element.factor_into_iter().collect();",
          "    assert_eq!(result_single, vec![Left(&\"single\")]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![8]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![Right(8)]);",
          "    let left: Either<Vec<&str>, _> = Left(vec![\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let empty_left: Either<Vec<&str>, _> = Left(vec![]);",
          "    let empty_result: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(empty_result, vec![]);",
          "    let mixed: Either<Vec<u8>, Vec<&str>> = Right(vec![\"world\"]);",
          "    let mixed_result: Vec<_> = mixed.factor_into_iter().collect();",
          "    assert_eq!(mixed_result, vec![Right(\"world\")]);"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![8]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "    assert_eq!(result, vec![Right(8)]);",
          "    let left: Either<Vec<&str>, _> = Left(vec![\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let empty_left: Either<Vec<&str>, _> = Left(vec![]);",
          "    let empty_result: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(empty_result, vec![]);",
          "    let mixed: Either<Vec<u8>, Vec<&str>> = Right(vec![\"world\"]);",
          "    let mixed_result: Vec<_> = mixed.factor_into_iter().collect();",
          "    assert_eq!(mixed_result, vec![Right(\"world\")]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, vec![]);",
          "    let left: Either<&[&str], Vec<u8>> = Left(&[\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let right_with_elements: Either<&[&str], Vec<u8>> = Right(vec![0, 1]);",
          "    let result_right: Vec<_> = right_with_elements.factor_into_iter().collect();",
          "    assert_eq!(result_right, vec![Right(0), Right(1)]);",
          "    let empty_left: Either<Vec<u8>, Vec<u8>> = Left(vec![]);",
          "    let result_empty_left: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(result_empty_left, vec![]);"
        ],
        "code": [
          "{",
          "    let right: Either<Vec<u8>, _> = Right(vec![]);",
          "    let result: Vec<_> = right.factor_into_iter().collect();",
          "    assert_eq!(result, vec![]);",
          "    let left: Either<&[&str], Vec<u8>> = Left(&[\"hello\"]);",
          "    let result_left: Vec<_> = left.factor_into_iter().collect();",
          "    assert_eq!(result_left, vec![Left(&\"hello\")]);",
          "    let right_with_elements: Either<&[&str], Vec<u8>> = Right(vec![0, 1]);",
          "    let result_right: Vec<_> = right_with_elements.factor_into_iter().collect();",
          "    assert_eq!(result_right, vec![Right(0), Right(1)]);",
          "    let empty_left: Either<Vec<u8>, Vec<u8>> = Left(vec![]);",
          "    let result_empty_left: Vec<_> = empty_left.factor_into_iter().collect();",
          "    assert_eq!(result_empty_left, vec![]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]