[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value = \"left_value\";",
          "    let other_value = \"other_value\";",
          "    let left: Either<&str, &str> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, other_value);"
        ],
        "code": [
          "{",
          "    let left_value = \"left_value\";",
          "    let other_value = \"other_value\";",
          "    let left: Either<&str, &str> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "    assert_eq!(result, other_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value = 42;",
          "    let other_value = 3.14;",
          "    let left: Either<i32, f64> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, other_value);",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert_eq!(left.right_or(other_value), other_value);"
        ],
        "code": [
          "{",
          "    let left_value = 42;",
          "    let other_value = 3.14;",
          "    let left: Either<i32, f64> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "    assert_eq!(result, other_value);",
          "    assert!(matches!(left, Either::Left(_)));",
          "    assert_eq!(left.right_or(other_value), other_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value = \"\";",
          "    let other_value = \"fallback\";",
          "    let left: Either<&str, &str> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, other_value);"
        ],
        "code": [
          "{",
          "    let left_value = \"\";",
          "    let other_value = \"fallback\";",
          "    let left: Either<&str, &str> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "    assert_eq!(result, other_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let left_value = \"some_value\";",
          "    let other_value: Option<&str> = None;",
          "    let left: Either<&str, Option<&str>> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let left_value = \"some_value\";",
          "    let other_value: Option<&str> = None;",
          "    let left: Either<&str, Option<&str>> = Left(left_value);",
          "    let result = left.right_or(other_value);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]