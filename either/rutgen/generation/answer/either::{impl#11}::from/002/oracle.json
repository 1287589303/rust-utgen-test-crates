[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Left(42);",
          "    let result: Result<i32, i32> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(42)));"
        ],
        "code": [
          "{",
          "    let val = Left(42);",
          "    let result: Result<i32, i32> = Result::from(val);",
          "    assert!(matches!(result, Err(42)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Left(String::from(\"error\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    let val = Left(String::from(\"error\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "    assert_eq!(result, Err(String::from(\"error\")));"
        ],
        "code": [
          "{",
          "    let val = Left(String::from(\"error\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "    let val = Left(String::from(\"error\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "    assert_eq!(result, Err(String::from(\"error\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Debug)]",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "",
          "    let val = Left(CustomType { value: 10 });",
          "    let result: Result<CustomType, CustomType> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(CustomType { value: 10 }));"
        ],
        "code": [
          "{",
          "    #[derive(Debug)]",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "",
          "    let val = Left(CustomType { value: 10 });",
          "    let result: Result<CustomType, CustomType> = Result::from(val);",
          "    assert_eq!(result, Err(CustomType { value: 10 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Left(String::from(\"\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(String::from(\"\")));"
        ],
        "code": [
          "{",
          "    let val = Left(String::from(\"\"));",
          "    let result: Result<String, String> = Result::from(val);",
          "    assert_eq!(result, Err(String::from(\"\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Left(0);",
          "    let result: Result<i32, i32> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(0));"
        ],
        "code": [
          "{",
          "    let val = Left(0);",
          "    let result: Result<i32, i32> = Result::from(val);",
          "    assert_eq!(result, Err(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]