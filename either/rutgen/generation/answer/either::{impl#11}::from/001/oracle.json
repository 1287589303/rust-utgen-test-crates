[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Either::Right(());",
          "    let result: Result<(), _> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));"
        ],
        "code": [
          "{",
          "    let val = Either::Right(());",
          "    let result: Result<(), _> = Result::from(val);",
          "    assert_eq!(result, Ok(()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Either::Right(42);",
          "    let result: Result<i32, _> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(42));"
        ],
        "code": [
          "{",
          "    let val = Either::Right(42);",
          "    let result: Result<i32, _> = Result::from(val);",
          "    assert_eq!(result, Ok(42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Either::Right(String::from(\"test\"));",
          "    let result: Result<String, _> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(String::from(\"test\")));"
        ],
        "code": [
          "{",
          "    let val = Either::Right(String::from(\"test\"));",
          "    let result: Result<String, _> = Result::from(val);",
          "    assert_eq!(result, Ok(String::from(\"test\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "    ",
          "    let val = Either::Right(CustomType { value: 5 });",
          "    let result: Result<CustomType, _> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Ok(CustomType { value: 5 })));"
        ],
        "code": [
          "{",
          "    struct CustomType {",
          "        value: i32,",
          "    }",
          "    ",
          "    let val = Either::Right(CustomType { value: 5 });",
          "    let result: Result<CustomType, _> = Result::from(val);",
          "    assert!(matches!(result, Ok(CustomType { value: 5 })));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let val = Either::Right(3.14);",
          "    let result: Result<f64, _> = Result::from(val);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(3.14));"
        ],
        "code": [
          "{",
          "    let val = Either::Right(3.14);",
          "    let result: Result<f64, _> = Result::from(val);",
          "    assert_eq!(result, Ok(3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]