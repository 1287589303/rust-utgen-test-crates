[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    assert!(matches!(cloned_result, Either::Left(_)));"
        ],
        "code": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    assert!(matches!(cloned_result, Either::Left(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));"
        ],
        "code": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left = String::from(\"\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));"
        ],
        "code": [
          "{",
          "    let value_left = String::from(\"\");",
          "    let value_right = String::from(\"right_value\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"\");",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    ",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Right(value_right.clone()));",
          "    ",
          "    let either_instance = Either::Left(&String::from(\"new_left_value\"));",
          "    let cloned_result = either_instance.cloned();",
          "    assert!(matches!(cloned_result, Either::Left(ref v) if v == \"new_left_value\"));",
          "    ",
          "    let either_instance = Either::Left(&String::from(\"another_value\"));",
          "    let cloned_result = either_instance.cloned();",
          "    assert!(matches!(cloned_result, Either::Left(ref v) if v == \"another_value\"));"
        ],
        "code": [
          "{",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"\");",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "    let value_left = String::from(\"left_value\");",
          "    let value_right = String::from(\"\");",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    ",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Right(value_right.clone()));",
          "    ",
          "    let either_instance = Either::Left(&String::from(\"new_left_value\"));",
          "    let cloned_result = either_instance.cloned();",
          "    assert!(matches!(cloned_result, Either::Left(ref v) if v == \"new_left_value\"));",
          "    ",
          "    let either_instance = Either::Left(&String::from(\"another_value\"));",
          "    let cloned_result = either_instance.cloned();",
          "    assert!(matches!(cloned_result, Either::Left(ref v) if v == \"another_value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left: i32 = 42;",
          "    let value_right: i32 = 84;",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    assert!(matches!(cloned_result, Either::Left(_)));",
          "    assert!(matches!(either_instance, Either::Left(_)));",
          "    assert_eq!(cloned_result, Either::Left(42));",
          "    assert_eq!(either_instance, Either::Left(&42));"
        ],
        "code": [
          "{",
          "    let value_left: i32 = 42;",
          "    let value_right: i32 = 84;",
          "    let either_instance = Either::Left(&value_left);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Left(value_left.clone()));",
          "    assert!(matches!(cloned_result, Either::Left(_)));",
          "    assert!(matches!(either_instance, Either::Left(_)));",
          "    assert_eq!(cloned_result, Either::Left(42));",
          "    assert_eq!(either_instance, Either::Left(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let value_left: i32 = 42;",
          "    let value_right: i32 = 84;",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cloned_result, Either::Right(84));",
          "    let either_left_instance = Either::Left(&value_left);",
          "    let cloned_left_result = either_left_instance.cloned();",
          "    assert_eq!(cloned_left_result, Either::Left(42));",
          "    assert!(matches!(cloned_result, Either::Right(_)));",
          "    assert!(matches!(cloned_left_result, Either::Left(_)));",
          "    assert!(cloned_left_result == Either::Left(42));",
          "    assert!(cloned_result == Either::Right(84));"
        ],
        "code": [
          "{",
          "    let value_left: i32 = 42;",
          "    let value_right: i32 = 84;",
          "    let either_instance = Either::Right(&value_right);",
          "    let cloned_result = either_instance.cloned();",
          "    assert_eq!(cloned_result, Either::Right(84));",
          "    let either_left_instance = Either::Left(&value_left);",
          "    let cloned_left_result = either_left_instance.cloned();",
          "    assert_eq!(cloned_left_result, Either::Left(42));",
          "    assert!(matches!(cloned_result, Either::Right(_)));",
          "    assert!(matches!(cloned_left_result, Either::Left(_)));",
          "    assert!(cloned_left_result == Either::Left(42));",
          "    assert!(cloned_result == Either::Right(84));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]