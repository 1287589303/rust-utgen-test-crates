[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(0);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(0);",
          "    let result = either.seek(pos);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 0);"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(0);",
          "    let _ = either.seek(pos);",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(0);",
          "    let result = either.seek(pos);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(100) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(1_000_000);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(1_000_000);",
          "    let result = either.seek(pos);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 100);"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(100) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(1_000_000);",
          "    let _ = either.seek(pos);",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Start(1_000_000);",
          "    let result = either.seek(pos);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::End(-1_000_000);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either.seek(SeekFrom::End(-1_000_000)).unwrap(), 0);",
          "    let err_result = either.seek(SeekFrom::Current(-1));",
          "    assert!(err_result.is_ok());",
          "    let result = either.seek(SeekFrom::Start(0));",
          "    assert_eq!(result.unwrap(), 0);"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::End(-1_000_000);",
          "    let _ = either.seek(pos);",
          "    assert_eq!(either.seek(SeekFrom::End(-1_000_000)).unwrap(), 0);",
          "    let err_result = either.seek(SeekFrom::Current(-1));",
          "    assert!(err_result.is_ok());",
          "    let result = either.seek(SeekFrom::Start(0));",
          "    assert_eq!(result.unwrap(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(0);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either.seek(SeekFrom::Current(0)).unwrap(), 0);",
          "    assert!(matches!(either, Either::Right(_)));"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(0);",
          "    let _ = either.seek(pos);",
          "    assert_eq!(either.seek(SeekFrom::Current(0)).unwrap(), 0);",
          "    assert!(matches!(either, Either::Right(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(200) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(1_000_000);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(MockSeek));",
          "    assert_eq!(either.seek(pos).unwrap(), 200);",
          "    assert!(either.seek(SeekFrom::Start(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::Current(0)).is_ok());"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(200) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(1_000_000);",
          "    let _ = either.seek(pos);",
          "    assert_eq!(either, Either::Right(MockSeek));",
          "    assert_eq!(either.seek(pos).unwrap(), 200);",
          "    assert!(either.seek(SeekFrom::Start(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::Current(0)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(-1_000_000);",
          "    let _ = either.seek(pos);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(either, Either::Right(MockSeek));",
          "    assert!(either.seek(pos).is_ok());",
          "    assert_eq!(either.seek(pos).unwrap(), 0);",
          "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::Start(10)).is_ok());"
        ],
        "code": [
          "{",
          "    struct MockSeek;",
          "    impl Read for MockSeek {",
          "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
          "    }",
          "    impl Seek for MockSeek {",
          "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
          "    }",
          "",
          "    let mut either = Either::Right(MockSeek);",
          "    let pos = SeekFrom::Current(-1_000_000);",
          "    let _ = either.seek(pos);",
          "    assert_eq!(either, Either::Right(MockSeek));",
          "    assert!(either.seek(pos).is_ok());",
          "    assert_eq!(either.seek(pos).unwrap(), 0);",
          "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
          "    assert!(either.seek(SeekFrom::Start(10)).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]