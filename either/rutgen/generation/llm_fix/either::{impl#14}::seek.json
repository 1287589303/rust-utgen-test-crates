{
  "name": "either::{impl#14}::seek",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:1192:5:1194:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Right($pattern) at line 1193 is true\n"
      ],
      "input_infer": "self must be Either::Right with a compliant R type that implements Seek trait; pos must be a valid SeekFrom variant (e.g., SeekFrom::Start(n), SeekFrom::End(n), SeekFrom::Current(n)) where n can be any i64 value including edge cases like 0, very large positive values, very large negative values, and cases leading to overflow or underflow situations.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(0);",
                "    let result = either.seek(pos);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 0);"
              ],
              "code": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos);",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(0);",
                "    let result = either.seek(pos);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(100) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(1_000_000);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(1_000_000);",
                "    let result = either.seek(pos);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 100);"
              ],
              "code": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(100) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(1_000_000);",
                "    let _ = either.seek(pos);",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Start(1_000_000);",
                "    let result = either.seek(pos);",
                "    assert!(result.is_ok());",
                "    assert_eq!(result.unwrap(), 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::End(-1_000_000);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either.seek(SeekFrom::End(-1_000_000)).unwrap(), 0);",
                "    let err_result = either.seek(SeekFrom::Current(-1));",
                "    assert!(err_result.is_ok());",
                "    let result = either.seek(SeekFrom::Start(0));",
                "    assert_eq!(result.unwrap(), 0);"
              ],
              "code": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::End(-1_000_000);",
                "    let _ = either.seek(pos);",
                "    assert_eq!(either.seek(SeekFrom::End(-1_000_000)).unwrap(), 0);",
                "    let err_result = either.seek(SeekFrom::Current(-1));",
                "    assert!(err_result.is_ok());",
                "    let result = either.seek(SeekFrom::Start(0));",
                "    assert_eq!(result.unwrap(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Current(0);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either.seek(SeekFrom::Current(0)).unwrap(), 0);",
                "    assert!(matches!(either, Either::Right(_)));"
              ],
              "code": [
                "{",
                "  struct MockSeek;  ",
                "  impl Read for MockSeek {  ",
                "      fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }  ",
                "  }  ",
                "  impl Seek for MockSeek {  ",
                "      fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }  ",
                "  }  ",
                "   ",
                "  let mut either: Either<MockSeek, MockSeek> = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Current(0);",
                "    let _ = either.seek(pos);",
                "    assert_eq!(either.seek(SeekFrom::Current(0)).unwrap(), 0);",
                "    assert!(matches!(either, Either::Right(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(200) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Current(1_000_000);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(MockSeek));",
                "    assert_eq!(either.seek(pos).unwrap(), 200);",
                "    assert!(either.seek(SeekFrom::Start(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::Current(0)).is_ok());"
              ],
              "code": [
                "{",
                "   #[derive(Debug)]",
                "   struct MockSeek;",
                "   impl Read for MockSeek {",
                "       fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "   }",
                "   impl Seek for MockSeek {",
                "       fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(200) }",
                "   }",
                "   ",
                "   let mut either = Either::Right(MockSeek);",
                "   let pos = SeekFrom::Current(1_000_000);",
                "   let _ = either.seek(pos);",
                "   assert_eq!(either, Either::Right(MockSeek));",
                "   assert_eq!(either.seek(pos).unwrap(), 200);",
                "   assert!(either.seek(SeekFrom::Start(0)).is_ok());",
                "   assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MockSeek;",
                "    impl Read for MockSeek {",
                "        fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "    }",
                "    impl Seek for MockSeek {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Current(-1_000_000);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either, Either::Right(MockSeek));",
                "    assert!(either.seek(pos).is_ok());",
                "    assert_eq!(either.seek(pos).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::Start(10)).is_ok());"
              ],
              "code": [
                "{",
                "   #[derive(Debug)]",
                "   struct MockSeek;",
                "   impl Read for MockSeek {",
                "       fn read(&mut self, _buf: &mut [u8]) -> io::Result<usize> { Ok(0) }",
                "   }",
                "   impl Seek for MockSeek {",
                "       fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> { Ok(0) }",
                "    }",
                "",
                "    let mut either = Either::Right(MockSeek);",
                "    let pos = SeekFrom::Current(-1_000_000);",
                "    let _ = either.seek(pos);",
                "    assert_eq!(either, Either::Right(MockSeek));",
                "    assert!(either.seek(pos).is_ok());",
                "    assert_eq!(either.seek(pos).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::Start(10)).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches $crate::Either::Left($pattern) at line 1193 is true\n"
      ],
      "input_infer": "self must be an instance of Either with L being a type that implements Seek and R being any type, pos must be a valid SeekFrom variant (Start, End, Current), and the expected return type is io::Result<u64> which can be evaluated for both success (Ok(u64)) and failure (Err(io::Error)).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(0)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either.seek(pos).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::Current(0)).is_ok());",
                "    assert_eq!(either.seek(SeekFrom::Start(10)).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::Start(10)).is_ok());",
                "    assert_eq!(either.seek(SeekFrom::Start(0)).unwrap(), 0);"
              ],
              "code": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(0)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos);",
                "    assert_eq!(either.seek(pos).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::End(0)).is_ok());",
                "    assert!(either.seek(SeekFrom::Current(0)).is_ok());",
                "    assert_eq!(either.seek(SeekFrom::Start(10)).unwrap(), 0);",
                "    assert!(either.seek(SeekFrom::Start(10)).is_ok());",
                "    assert_eq!(either.seek(SeekFrom::Start(0)).unwrap(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(100)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::End(0);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::End(0);",
                "    let result = either.seek(pos);",
                "    assert_eq!(result, Ok(100));",
                "    assert!(matches!(either, Either::Left(_)));"
              ],
              "code": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(100)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::End(0);",
                "    let _ = either.seek(pos);",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::End(0);",
                "    let result = either.seek(pos);",
                "    assert_eq!(result, Ok(100));",
                "    assert!(matches!(either, Either::Left(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(50)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::Current(0);",
                "    let _ = either.seek(pos);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(either.seek(pos).unwrap(), 50);"
              ],
              "code": [
                "{",
                "    struct LeftSeekable;",
                "    impl Seek for LeftSeekable {",
                "        fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {",
                "            Ok(50)",
                "        }",
                "    }",
                "    ",
                "    let mut either = Either::Left(LeftSeekable);",
                "    let pos = SeekFrom::Current(0);",
                "    let _ = either.seek(pos);",
                "    assert_eq!(either.seek(pos).unwrap(), 50);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct LeftFailingSeekable;",
                "    impl Seek for LeftFailingSeekable {",
                "        fn seek(&mut self, _: SeekFrom) -> io::Result<u64> {",
                "            Err(io::Error::new(io::ErrorKind::Other, \"seek failed\"))",
                "        }",
                "    }",
                "",
                "    let mut either = Either::Left(LeftFailingSeekable);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(either, Either::Left(_)));",
                "    let result = either.seek(pos);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind(), io::ErrorKind::Other);",
                "    assert_eq!(result.err().unwrap().to_string(), \"seek failed\");"
              ],
              "code": [
                "{",
                "    struct LeftFailingSeekable;",
                "    impl Seek for LeftFailingSeekable {",
                "        fn seek(&mut self, _: SeekFrom) -> io::Result<u64> {",
                "            Err(io::Error::new(io::ErrorKind::Other, \"seek failed\"))",
                "        }",
                "    }",
                "",
                "    let mut either = Either::Left(LeftFailingSeekable);",
                "    let pos = SeekFrom::Start(0);",
                "    let _ = either.seek(pos).unwrap();",
                "    assert!(matches!(either, Either::Left(_)));",
                "    let result = either.seek(pos);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.err().unwrap().kind(), io::ErrorKind::Other);",
                "    assert_eq!(result.err().unwrap().to_string(), \"seek failed\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}