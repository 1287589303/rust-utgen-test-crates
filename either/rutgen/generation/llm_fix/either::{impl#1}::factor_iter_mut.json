{
  "name": "either::{impl#1}::factor_iter_mut",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:647:5:655:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right($pattern) at line 654 is true\n"
      ],
      "input_infer": "self must be a mutable reference to an Either type that encapsulates a Right variant containing an iterable type that supports mutation, including but not limited to different-sized vectors or arrays.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right, Right(vec![0, -1, -2]));"
              ],
              "code": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "    assert_eq!(right, Right(vec![0, -1, -2]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right, Right(vec![]));",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![1, 2, 3]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "    if let Right(r) = x {",
                "    *r = -*r;",
                "    }",
                "    });",
                "    assert_eq!(right, Right(vec![-1, -2, -3]));"
              ],
              "code": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "    assert_eq!(right, Right(vec![]));",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![1, 2, 3]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "    if let Right(r) = x {",
                "    *r = -*r;",
                "    }",
                "    });",
                "    assert_eq!(right, Right(vec![-1, -2, -3]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut right: Either<Vec<&str>, [&mut i32; 3]> = Right([&mut 0, &mut 1, &mut 2]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right, Right([&mut 0, &mut -1, &mut -2]));"
              ],
              "code": [
                "{",
                "    let mut right: Either<Vec<&str>, [&mut i32; 3]> = Right([&mut 0, &mut 1, &mut 2]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "    assert_eq!(right, Right([&mut 0, &mut -1, &mut -2]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![3, 4, 5, 6, 7]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right, Right(vec![-3, -4, -5, -6, -7]));"
              ],
              "code": [
                "{",
                "    let mut right: Either<Vec<&str>, Vec<i32>> = Right(vec![3, 4, 5, 6, 7]);",
                "    right.factor_iter_mut().for_each(|x| {",
                "        if let Right(r) = x {",
                "            *r = -*r;",
                "        }",
                "    });",
                "    assert_eq!(right, Right(vec![-3, -4, -5, -6, -7]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left($pattern) at line 654 is true\n"
      ],
      "input_infer": "self is either an instance of Left with an iterable type L, where L is a slice or vector of values, or Right does not apply; the items in L should be mutable and fit into two categories: L contains at least 1 item and at most 1000 items.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut left: Either<&mut [&str], Vec<u8>> = Left(&mut [\"hello\"]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left, Left(&mut [\"goodbye\"]));",
                "    let mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });",
                "    assert_eq!(right, Right(vec![0, -1, -2]));"
              ],
              "code": [
                "{",
                "    let mut left: Either<&mut [&str], Vec<u8>> = Left(&mut [\"hello\"]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"goodbye\");",
                "    assert_eq!(left, Left(&mut [\"goodbye\"]));",
                "    let mut right: Either<[&str; 2], _> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut().for_each(|x| if let Right(r) = x { *r = -*r; });",
                "    assert_eq!(right, Right(vec![0, -1, -2]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut left: Either<&mut [&str; 3], Vec<u8>> = Left(&mut [\"one\", \"two\", \"three\"]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"changed\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left, Left(&mut [\"changed\", \"changed\", \"changed\"]));",
                "    let mut right: Either<_, Vec<u8>> = Right(vec![1, 2, 3]);",
                "    right.factor_iter_mut().for_each(|x| if let Right(r) = x { *r += 1; });",
                "    assert_eq!(right, Right(vec![2, 3, 4]));",
                "    let mut left_empty: Either<&mut [&str; 0], Vec<u8>> = Left(&mut []);",
                "    left_empty.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"should not change\");",
                "    assert_eq!(left_empty, Left(&mut []));",
                "    let mut right_empty: Either<_, Vec<u8>> = Right(vec![]);",
                "    right_empty.factor_iter_mut().for_each(|x| if let Right(r) = x { *r += 1; });",
                "    assert_eq!(right_empty, Right(vec![]));"
              ],
              "code": [
                "{",
                "    let mut left: Either<&mut [&str; 3], Vec<u8>> = Left(&mut [\"one\", \"two\", \"three\"]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"changed\");",
                "    assert_eq!(left, Left(&mut [\"changed\", \"changed\", \"changed\"]));",
                "    let mut right: Either<_, Vec<u8>> = Right(vec![1, 2, 3]);",
                "    right.factor_iter_mut().for_each(|x| if let Right(r) = x { *r += 1; });",
                "    assert_eq!(right, Right(vec![2, 3, 4]));",
                "    let mut left_empty: Either<&mut [&str; 0], Vec<u8>> = Left(&mut []);",
                "    left_empty.factor_iter_mut().for_each(|x| *x.unwrap_left() = \"should not change\");",
                "    assert_eq!(left_empty, Left(&mut []));",
                "    let mut right_empty: Either<_, Vec<u8>> = Right(vec![]);",
                "    right_empty.factor_iter_mut().for_each(|x| if let Right(r) = x { *r += 1; });",
                "    assert_eq!(right_empty, Right(vec![]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut left: Either<&mut Vec<u32>, Vec<u8>> = Left(&mut vec![1; 1000]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() += 1);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(left, Left(ref l) if l == &mut vec![2; 1000]));"
              ],
              "code": [
                "{",
                "    let mut left: Either<&mut Vec<u32>, Vec<u8>> = Left(&mut vec![1; 1000]);",
                "    left.factor_iter_mut().for_each(|x| *x.unwrap_left() += 1);",
                "    assert!(matches!(left, Left(ref l) if l == &mut vec![2; 1000]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut right: Either<&str, Vec<u8>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut(); // This should panic as we expect Left",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut right: Either<&str, Vec<u8>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut right: Either<&str, Vec<u8>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut(); // This should panic as we expect Left",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut right: Either<&str, Vec<u8>> = Right(vec![0, 1, 2]);",
                "    right.factor_iter_mut();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}