{
  "name": "either::{impl#1}::left_or_else",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:714:5:722:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(r) at line 718 is true\n"
      ],
      "input_infer": "self must be an instance of Either::Right with R being any valid type, and the closure F must be a function that takes a valid R instance and returns a corresponding L type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, u32> = Right(3);",
                "    let result = right.left_or_else(|x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"3\");"
              ],
              "code": [
                "{",
                "    let right: Either<String, u32> = Right(3);",
                "    let result = right.left_or_else(|x| x.to_string());",
                "    assert_eq!(result, \"3\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, f64> = Right(2.5);",
                "    let result = right.left_or_else(|x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"2.5\");"
              ],
              "code": [
                "{",
                "    let right: Either<String, f64> = Right(2.5);",
                "    let result = right.left_or_else(|x| x.to_string());",
                "    assert_eq!(result, \"2.5\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, char> = Right('a');",
                "    let result = right.left_or_else(|x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"a\");"
              ],
              "code": [
                "{",
                "    let right: Either<String, char> = Right('a');",
                "    let result = right.left_or_else(|x| x.to_string());",
                "    assert_eq!(result, \"a\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, Option<i32>> = Right(Some(10));",
                "    let result = right.left_or_else(|x| x.unwrap_or(0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 10);",
                "    assert_eq!(right.left_or_else(|x| x.unwrap_or(0)), 10);",
                "    let right_none: Either<String, Option<i32>> = Right(None);",
                "    let result_none = right_none.left_or_else(|x| x.unwrap_or(0));",
                "    assert_eq!(result_none, 0);"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(l) at line 718 is true\n",
        "precondition: self matches Either::Left(l) at line 718 is true\n",
        "expected return value/type: l\n"
      ],
      "input_infer": "Left variants of Either with various types L and Right variants with different values R that implement the required FnOnce(R) -> L closure\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, u32> = Left(\"hello\".to_string());",
                "    let result = left.left_or_else(|_| \"unreachable\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"hello\");",
                "    let right: Either<String, u32> = Right(42);",
                "    let result_from_right = right.left_or_else(|r| r.to_string());",
                "    assert_eq!(result_from_right, \"42\");"
              ],
              "code": [
                "{",
                "   let left: Either<std::string::String, u32> = Left(\"hello\".to_string());",
                "   let result = left.left_or_else(|_| \"unreachable\".to_string());",
                "   assert_eq!(result, \"hello\");",
                "   let right: Either<std::string::String, u32> = Right(42);",
                "   let result_from_right = right.left_or_else(|r| r.to_string());",
                "   assert_eq!(result_from_right, \"42\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, u32> = Right(42);",
                "    let result = right.left_or_else(|x| (x * 2).to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, \"42\");"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<Vec<u8>, i32> = Left(vec![1, 2, 3]);",
                "    let result = left.left_or_else(|_| vec![0]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, vec![1, 2, 3]);"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<Vec<u8>, i32> = Right(5);",
                "    let result = right.left_or_else(|x| vec![x]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, vec![5]);"
              ],
              "code": [
                "{",
                "  use std::vec::Vec;  ",
                "  let right: Either<Vec<u8>, i32> = Right(5);  ",
                "  let result = right.left_or_else(|x| vec![x]);  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<(i32, i32), f32> = Left((1, 2));",
                "    let result = left.left_or_else(|_| (0, 0));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (1, 2));"
              ],
              "code": [
                "{",
                "    let left: Either<(i32, i32), f32> = Left((1, 2));",
                "    let result = left.left_or_else(|_| (0, 0));",
                "    assert_eq!(result, (1, 2));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<(i32, i32), f32> = Right(3.14);",
                "    let result = right.left_or_else(|x| (x as i32, x as i32));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (3, 3));",
                "    let left: Either<(i32, i32), f32> = Left((1, 2));",
                "    let result = left.left_or_else(|x| (x as i32, x as i32));",
                "    assert_eq!(result, (1, 2));",
                "    let left_empty: Either<(i32, i32), f32> = Left((0, 0));",
                "    let result = left_empty.left_or_else(|x| (x as i32, x as i32));",
                "    assert_eq!(result, (0, 0));"
              ],
              "code": [
                "{",
                "    let right: Either<(i32, i32), f32> = Right(3.14);",
                "    let result = right.left_or_else(|x| (x as i32, x as i32));",
                "    assert_eq!(result, (3, 3));",
                "    let left: Either<(i32, i32), f32> = Left((1, 2));",
                "    let result = left.left_or_else(|x| (x as i32, x as i32));",
                "    assert_eq!(result, (1, 2));",
                "    let left_empty: Either<(i32, i32), f32> = Left((0, 0));",
                "    let result = left_empty.left_or_else(|x| (x as i32, x as i32));",
                "    assert_eq!(result, (0, 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Custom {",
                "        value: i32,",
                "    }",
                "    ",
                "    let left: Either<Custom, f64> = Left(Custom { value: 10 });",
                "    let result = left.left_or_else(|_| Custom { value: 0 });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 10);"
              ],
              "code": [
                "{",
                "    struct Custom {",
                "        value: i32,",
                "    }",
                "    ",
                "    let left: Either<Custom, f64> = Left(Custom { value: 10 });",
                "    let result = left.left_or_else(|_| Custom { value: 0 });",
                "    assert_eq!(result.value, 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Custom {",
                "        value: i32,",
                "    }",
                "    ",
                "    let right: Either<Custom, f64> = Right(4.5);",
                "    let result = right.left_or_else(|x| Custom { value: x as i32 });",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.value, 4);",
                "    assert_eq!(result.value, 4);"
              ],
              "code": [
                "{",
                "    struct Custom {",
                "        value: i32,",
                "    }",
                "    ",
                "    let right: Either<Custom, f64> = Right(4.5);",
                "    let result = right.left_or_else(|x| Custom { value: x as i32 });",
                "    assert_eq!(result.value, 4);",
                "    assert_eq!(result.value, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}