{
  "name": "either::{impl#1}::map_either",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:366:5:375:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 371 is true\n",
        "expected return value/type: Right(g(r))\n"
      ],
      "input_infer": "self should be of type Either<L, u8> with value Right(r) where r is a u8 in the range [0, 255] and g: FnOnce(u8) -> S can convert u8 to type S to return Right(g(r))\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let g = |u: u8| u.to_string();",
                "",
                "    let right: Either<String, u8> = Right(0);",
                "    let _ = right.map_either(|_s| 0, g);",
                "",
                "    let right: Either<String, u8> = Right(128);",
                "    let _ = right.map_either(|_s| 0, g);",
                "",
                "    let right: Either<String, u8> = Right(255);",
                "    let _ = right.map_either(|_s| 0, g);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"0\".into()));",
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"128\".into()));",
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"255\".into()));"
              ],
              "code": [
                "{",
                "    let g = |u: u8| u.to_string();",
                "",
                "    let right: Either<String, u8> = Right(0);",
                "    let _ = right.map_either(|_s| 0, g);",
                "",
                "    let right: Either<String, u8> = Right(128);",
                "    let _ = right.map_either(|_s| 0, g);",
                "",
                "    let right: Either<String, u8> = Right(255);",
                "    let _ = right.map_either(|_s| 0, g);",
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"0\".into()));",
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"128\".into()));",
                "    assert_eq!(right.map_either(|_s| 0, g), Right(\"255\".into()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 371 is true\n",
        "precondition: self matches Left(l) at line 371 is true\n",
        "expected return value/type: Left(f(l))\n"
      ],
      "input_infer": "Either<L, R> with L as String (non-empty and empty), and R as u8 (0-255) for valid mappings, with functions f: FnOnce(L) -> M and g: FnOnce(R) -> S being properly defined.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"hello\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(5));",
                "    assert!(matches!(left.map_either(f, |x| x.to_string()), Left(5)));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());"
              ],
              "code": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"hello\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(5));",
                "    assert!(matches!(left.map_either(f, |x| x.to_string()), Left(5)));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));"
              ],
              "code": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));"
              ],
              "code": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"\".into());",
                "    let _ = left.map_either(f, |x| x.to_string());",
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"zero\".into());",
                "    let _ = left.map_either(f, |x| x.to_string()); ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(4));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left(), Some(\"zero\".into()));",
                "    assert_eq!(left.right(), None);"
              ],
              "code": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"zero\".into());",
                "    let _ = left.map_either(f, |x| x.to_string()); ",
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(4));",
                "    assert!(left.is_left());",
                "    assert!(!left.is_right());",
                "    assert_eq!(left.left(), Some(\"zero\".into()));",
                "    assert_eq!(left.right(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"maximum\".into());",
                "    let _ = left.map_either(f, |x| x.to_string()); ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(7));"
              ],
              "code": [
                "{",
                "    let f = |s: String| s.len();",
                "    let left: Either<String, u8> = Left(\"maximum\".into());",
                "    let _ = left.map_either(f, |x| x.to_string()); ",
                "    assert_eq!(left.map_either(f, |x| x.to_string()), Left(7));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}