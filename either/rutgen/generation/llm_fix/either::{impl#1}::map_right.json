{
  "name": "either::{impl#1}::map_right",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:339:5:347:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 343 is true\n",
        "expected return value/type: Right(f(r))\n"
      ],
      "input_infer": "Self must be of type Either<L, R> where R is a valid type for f to process, f must be a function that accepts type R and returns type S, and R should be within a reasonable range to ensure f operates correctly (e.g., R being a positive integer from 1 to 1000).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, _> = Right(500);",
                "    let result = right.map_right(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(1000));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, _> = Right(500);",
                "    let result = right.map_right(|x| x * 2);",
                "    assert_eq!(result, Right(1000));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, _> = Right(1000);",
                "    let result = right.map_right(|x| x + 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(1001));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, _> = Right(1000);",
                "    let result = right.map_right(|x| x + 1);",
                "    assert_eq!(result, Right(1001));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, _> = Right(1);",
                "    let result = right.map_right(|x| x - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(0));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, _> = Right(1);",
                "    let result = right.map_right(|x| x - 1);",
                "    assert_eq!(result, Right(0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, _> = Right(0);",
                "    let result = right.map_right(|x| x + 5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(5));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, _> = Right(0);",
                "    let result = right.map_right(|x| x + 5);",
                "    assert_eq!(result, Right(5));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, _> = Right(999);",
                "    let result = right.map_right(|x| x * 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(9990));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, _> = Right(999);",
                "    let result = right.map_right(|x| x * 10);",
                "    assert_eq!(result, Right(9990));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 343 is true\n",
        "precondition: self matches Left(l) at line 343 is true\n",
        "expected return value/type: Left(l)\n"
      ],
      "input_infer": "Either::Left variant with any type L and a map_right function that takes any function F that can process the Right variant. Also test with Either::Right variant containing any type R and ensuring the function F applied to R produces S.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, u32> = Left(\"test\");",
                "    let result = left.map_right(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"test\"));"
              ],
              "code": [
                "{",
                "    let left: Either<&str, u32> = Left(\"test\");",
                "    let result = left.map_right(|x| x * 2);",
                "    assert_eq!(result, Left(\"test\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, f64> = Right(123.0);",
                "    let result = right.map_right(|x| x * 2.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(246.0));",
                "    let left: Either<u32, f64> = Left(123);",
                "    let result_left = left.map_right(|x| x * 2.0);",
                "    assert_eq!(result_left, Left(123));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, f64> = Right(123.0);",
                "    let result = right.map_right(|x| x * 2.0);",
                "    assert_eq!(result, Right(246.0));",
                "    let left: Either<u32, f64> = Left(123);",
                "    let result_left = left.map_right(|x| x * 2.0);",
                "    assert_eq!(result_left, Left(123));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}