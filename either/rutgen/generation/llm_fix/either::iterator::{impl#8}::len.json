{
  "name": "either::iterator::{impl#8}::len",
  "mod_info": {
    "name": "iterator",
    "loc": "src/lib.rs:142:1:142:14"
  },
  "visible": true,
  "loc": "src/iterator.rs:305:5:307:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.inner matches $crate::Either::Right($pattern) at line 306 is true\n"
      ],
      "input_infer": "self.inner must be Either::Right with an ExactSizeIterator containing 0 to N elements, where N is the maximum size of the inner iterator.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for TestIterator {",
                "        fn len(&self) -> usize {",
                "            self.count",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(TestIterator { count: 0 });",
                "    let iter_either = IterEither { inner };",
                "    let _ = iter_either.len();",
                "}"
              ],
              "oracle": [
                "    let inner = Either::Right(TestIterator { count: 10 });",
                "    let iter_either = IterEither { inner };",
                "    assert_eq!(iter_either.len(), 10);",
                "    ",
                "    let inner = Either::Right(TestIterator { count: 5 });",
                "    let iter_either = IterEither { inner };",
                "    assert_eq!(iter_either.len(), 5);",
                "    ",
                "    let inner = Either::Right(TestIterator { count: 1 });",
                "    let iter_either = IterEither { inner };",
                "    assert_eq!(iter_either.len(), 1);",
                "    ",
                "    let inner = Either::Right(TestIterator { count: 20 });",
                "    let iter_either = IterEither { inner };",
                "    assert_eq!(iter_either.len(), 20);",
                "    ",
                "    let inner = Either::Right(TestIterator { count: u32::MAX as usize });",
                "    let iter_either = IterEither { inner };",
                "    assert_eq!(iter_either.len(), u32::MAX as usize);"
              ],
              "code": [
                "{",
                "   struct TestIterator {",
                "       count: usize,",
                "   }",
                "",
                "   impl Iterator for TestIterator {",
                "       type Item = ();",
                "       ",
                "       fn next(&mut self) -> Option<Self::Item> {",
                "           if self.count > 0 {",
                "               self.count -= 1;",
                "               Some(())",
                "           } else {",
                "               None",
                "           }",
                "       }",
                "   }",
                "   ",
                "   impl ExactSizeIterator for TestIterator {",
                "       fn len(&self) -> usize {",
                "           self.count",
                "       }",
                "   }",
                "   ",
                "   let inner = Either::Right(TestIterator { count: 0 });",
                "   let iter_either = IterEither { inner };",
                "   let _ = iter_either.len();",
                "   let inner = Either::Right(TestIterator { count: 10 });",
                "   let iter_either = IterEither { inner };",
                "   assert_eq!(iter_either.len(), 10);",
                "   ",
                "   let inner = Either::Right(TestIterator { count: 5 });",
                "   let iter_either = IterEither { inner };",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for TestIterator {",
                "        fn len(&self) -> usize {",
                "            self.count",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(TestIterator { count: 5 });",
                "    let iter_either = IterEither { inner };",
                "    let _ = iter_either.len();",
                "}"
              ],
              "oracle": [
                "    let inner = Either::Right(TestIterator { count: 5 });",
                "    assert_eq!(iter_either.len(), 5);"
              ],
              "code": [
                "{",
                "   struct TestIterator {",
                "       count: usize,",
                "   }",
                "   ",
                "   impl Iterator for TestIterator {",
                "       type Item = ();",
                "       fn next(&mut self) -> Option<Self::Item> {",
                "           if self.count > 0 {",
                "               self.count -= 1;",
                "               Some(())",
                "           } else {",
                "               None",
                "           }",
                "       }",
                "   }",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for TestIterator {",
                "        fn len(&self) -> usize {",
                "            self.count",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(TestIterator { count: usize::MAX });",
                "    let iter_either = IterEither { inner };",
                "    let _ = iter_either.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter_either.len(), usize::MAX);"
              ],
              "code": [
                "{",
                "    struct TestIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for TestIterator {",
                "        fn len(&self) -> usize {",
                "            self.count",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(TestIterator { count: usize::MAX });",
                "    let iter_either = IterEither { inner };",
                "    let _ = iter_either.len();",
                "    assert_eq!(iter_either.len(), usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.inner matches $crate::Either::Left($pattern) at line 306 is true\n"
      ],
      "input_infer": "self.inner set to Either::Left with iterators of varying lengths (0, 1, 2, and maximum representable size) providing instances of L that implement ExactSizeIterator.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyIterator;",
                "    impl ExactSizeIterator for EmptyIterator {",
                "        fn len(&self) -> usize { 0 }",
                "        fn is_empty(&self) -> bool { true }",
                "    }",
                "",
                "    let iter_empty = IterEither { inner: Either::Left(EmptyIterator) };",
                "    let _result = iter_empty.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter_empty.len(), 0);"
              ],
              "code": [
                "{",
                "   struct EmptyIterator;",
                "   impl Iterator for EmptyIterator {",
                "      type Item = ();",
                "      fn next(&mut self) -> Option<Self::Item> { None }",
                "  }",
                "   impl ExactSizeIterator for EmptyIterator {",
                "      fn len(&self) -> usize { 0 }",
                "  }",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct OneElementIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for OneElementIterator {",
                "        fn len(&self) -> usize { 1 }",
                "        fn is_empty(&self) -> bool { false }",
                "    }",
                "",
                "    let iter_one = IterEither { inner: Either::Left(OneElementIterator { count: 1 }) };",
                "    let _result = iter_one.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter_one.len(), 1);"
              ],
              "code": [
                "{",
                "    struct OneElementIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for OneElementIterator {",
                "        fn len(&self) -> usize { 1 }",
                "        fn is_empty(&self) -> bool { false }",
                "    }",
                "",
                "    let iter_one = IterEither { inner: Either::Left(OneElementIterator { count: 1 }) };",
                "    let _result = iter_one.len();",
                "    assert_eq!(iter_one.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TwoElementsIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for TwoElementsIterator {",
                "        fn len(&self) -> usize { 2 }",
                "        fn is_empty(&self) -> bool { false }",
                "    }",
                "",
                "    let iter_two = IterEither { inner: Either::Left(TwoElementsIterator { count: 2 }) };",
                "    let _result = iter_two.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter_two.len(), 2);"
              ],
              "code": [
                "{",
                "    struct TwoElementsIterator {",
                "        count: usize,",
                "    }",
                "",
                "   impl ExactSizeIterator for TwoElementsIterator {",
                "       fn len(&self) -> usize { 2 }",
                "   }",
                "",
                "",
                "    let iter_two = IterEither { inner: Either::Left(TwoElementsIterator { count: 2 }) };",
                "    let _result = iter_two.len();",
                "    assert_eq!(iter_two.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MaxElementsIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for MaxElementsIterator {",
                "        fn len(&self) -> usize { usize::MAX }",
                "        fn is_empty(&self) -> bool { false }",
                "    }",
                "",
                "    let iter_max = IterEither { inner: Either::Left(MaxElementsIterator { count: usize::MAX }) };",
                "    let _result = iter_max.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, usize::MAX);"
              ],
              "code": [
                "{",
                "    struct MaxElementsIterator {",
                "        count: usize,",
                "    }",
                "",
                "    impl ExactSizeIterator for MaxElementsIterator {",
                "        fn len(&self) -> usize { usize::MAX }",
                "        fn is_empty(&self) -> bool { false }",
                "    }",
                "",
                "    let iter_max = IterEither { inner: Either::Left(MaxElementsIterator { count: usize::MAX }) };",
                "    let _result = iter_max.len();",
                "    assert_eq!(_result, usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}