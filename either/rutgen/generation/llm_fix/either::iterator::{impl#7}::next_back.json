{
  "name": "either::iterator::{impl#7}::next_back",
  "mod_info": {
    "name": "iterator",
    "loc": "src/lib.rs:142:1:142:14"
  },
  "visible": true,
  "loc": "src/iterator.rs:277:5:279:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.inner matches Right($pattern) at line 278 is true\n",
        "precondition: inner.next_back()? at line 278 is Err/None\n"
      ],
      "input_infer": "self.inner must be an instance of Right with a DoubleEndedIterator that is empty or produces an error when calling next_back.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyIterator;",
                "",
                "    impl Iterator for EmptyIterator {",
                "        type Item = usize;",
                "",
                "        fn next(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for EmptyIterator {",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(EmptyIterator);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct EmptyIterator;",
                "",
                "    impl Iterator for EmptyIterator {",
                "        type Item = usize;",
                "",
                "        fn next(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for EmptyIterator {",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(EmptyIterator);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ErrIterator;",
                "",
                "    impl Iterator for ErrIterator {",
                "        type Item = usize;",
                "",
                "        fn next(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for ErrIterator {",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            Err(())",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(ErrIterator);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    assert!(matches!(iter.inner, Either::Right(_)));",
                "    assert!(iter.inner.is_right());",
                "    assert!(iter.inner.as_right().is_some());"
              ],
              "code": [
                "{",
                "    struct ErrIterator;",
                "",
                "    impl Iterator for ErrIterator {",
                "        type Item = usize;",
                "",
                "        fn next(&mut self) -> Option<Self::Item> {",
                "            None",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for ErrIterator {",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            Err(())",
                "        }",
                "    }",
                "",
                "    let inner = Either::Right(ErrIterator);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "    assert_eq!(result, None);",
                "    assert!(matches!(iter.inner, Either::Right(_)));",
                "    assert!(iter.inner.is_right());",
                "    assert!(iter.inner.as_right().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 4,
      "prompt_conds": [
        "precondition: self.inner matches Left($pattern) at line 278 is true\n",
        "precondition: self.inner matches Left($pattern) at line 278 is true\n",
        "precondition: inner.next_back()? at line 278 is Ok/Some\n",
        "expected return value/type: Some(map_either!(self.inner, ref mut inner => inner.next_back()?))\n"
      ],
      "input_infer": "self.inner must be an instance of Either::Left with a mutable DoubleEndedIterator wrapped inside, and the iterator must contain at least one element to ensure inner.next_back()? returns Some.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIterator {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "}"
              ],
              "oracle": [
                "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(3));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![1, 2]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(2));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![1]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(1));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), None);"
              ],
              "code": [
                "{",
                "    struct LeftIterator {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIterator {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIterator {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "    let left_iter = LeftIterator::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(3));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![1, 2]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(2));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![1]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), Some(1));",
                "    ",
                "    let left_iter = LeftIterator::new(vec![]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    assert_eq!(iter.next_back(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftIteratorBoundary {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIteratorBoundary {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIteratorBoundary {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIteratorBoundary::new(vec![42]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(42));",
                "    assert_eq!(iter.inner, Either::Left(LeftIteratorBoundary { data: vec![42], index: 0 }));",
                "    assert!(iter.inner.is_left());",
                "    assert!(iter.inner.left().unwrap().next_back().is_none());"
              ],
              "code": [
                "{",
                "    struct LeftIteratorBoundary {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIteratorBoundary {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIteratorBoundary {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIteratorBoundary::new(vec![42]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(42));",
                "    assert_eq!(iter.inner, Either::Left(LeftIteratorBoundary { data: vec![42], index: 0 }));",
                "    assert!(iter.inner.is_left());",
                "    assert!(iter.inner.left().unwrap().next_back().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct LeftIteratorEmpty {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIteratorEmpty {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIteratorEmpty {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIteratorEmpty::new(vec![]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let left_iter = LeftIteratorEmpty::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(3));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(2));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(1));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct LeftIteratorEmpty {",
                "        data: Vec<i32>,",
                "        index: usize,",
                "    }",
                "",
                "    impl LeftIteratorEmpty {",
                "        fn new(data: Vec<i32>) -> Self {",
                "            Self { data, index: data.len() }",
                "        }",
                "    }",
                "",
                "    impl DoubleEndedIterator for LeftIteratorEmpty {",
                "        type Item = i32;",
                "",
                "        fn next_back(&mut self) -> Option<Self::Item> {",
                "            if self.index > 0 {",
                "                self.index -= 1;",
                "                Some(self.data[self.index])",
                "            } else {",
                "                None",
                "            }",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let left_iter = LeftIteratorEmpty::new(vec![]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "",
                "    let result = iter.next_back();",
                "    assert_eq!(result, None);",
                "    let left_iter = LeftIteratorEmpty::new(vec![1, 2, 3]);",
                "    let inner = Either::Left(left_iter);",
                "    let mut iter = IterEither { inner };",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(3));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(2));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, Some(1));",
                "    let result = iter.next_back();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}