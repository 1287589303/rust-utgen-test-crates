{
  "name": "either::{impl#1}::is_left",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:175:5:180:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(_) at line 176 is true\n",
        "expected return value/type: false\n"
      ],
      "input_infer": "self must be an instance of Either<L, R> where L and R can be any types, and specifically must be constructed as Right(value) for some value of type R.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = value.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value: Either<i32, &str> = Right(\"the right value\");",
                "    let result = value.is_left();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<f64, bool> = Right(true);",
                "    let result = value.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value: Either<f64, bool> = Right(true);",
                "    let result = value.is_left();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<&str, String> = Right(String::from(\"\"));",
                "    let result = value.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "   use std::string::String;  ",
                "   let value: Either<&str, String> = Right(String::from(\"\"));  ",
                "   let result = value.is_left();  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<u32, f64> = Right(3.14);",
                "    let result = value.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let value: Either<u32, f64> = Right(3.14);",
                "    let result = value.is_left();",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let value: Either<(i32, i32), Vec<i32>> = Right(vec![1, 2, 3]);",
                "    let result = value.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);"
              ],
              "code": [
                "   fn test_is_left_01()  ",
                "      {  ",
                "          let value: Either<(i32, i32), Vec<i32>> = Right(vec![1, 2, 3]);  ",
                "          let result = value.is_left();  ",
                "          assert_eq!(result, false);  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(_) at line 176 is true\n",
        "precondition: self matches Left(_) at line 176 is true\n",
        "expected return value/type: true\n"
      ],
      "input_infer": "self must be an instance of Either<L, R> where L is any type (e.g., L = i32) and R is any type (e.g., R = &str) and the specific instance should be Left(L) to ensure is_left() returns true.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = Left(42);",
                "    instance.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.is_left(), true);"
              ],
              "code": [
                "{",
                "    let instance = Left(42);",
                "    instance.is_left();",
                "    assert_eq!(instance.is_left(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = Left(\"left value\".to_string());",
                "    instance.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.is_left(), true);"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = Left(3.14);",
                "    instance.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.is_left(), true);"
              ],
              "code": [
                "{",
                "    let instance = Left(3.14);",
                "    instance.is_left();",
                "    assert_eq!(instance.is_left(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = Left((1, \"value\"));",
                "    instance.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.is_left(), true);"
              ],
              "code": [
                "{",
                "  let instance: Either<(i32, &str), ()> = Left((1, \"value\"));  ",
                "  instance.is_left();  ",
                "  assert_eq!(instance.is_left(), true);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let instance = Left(vec![1, 2, 3]);",
                "    instance.is_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(instance.is_left(), true);"
              ],
              "code": [
                "{",
                "    let instance = Left(vec![1, 2, 3]);",
                "    instance.is_left();",
                "    assert_eq!(instance.is_left(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}