{
  "name": "either::{impl#1}::map_left",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:317:5:325:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right(r) at line 321 is true\n",
        "expected return value/type: Right(r)\n"
      ],
      "input_infer": "self must be of type Either<L, R> where L is any type and R is a specific type (matching the type of r in Right(r)), and r should be non-null and valid to satisfy both the variant condition and the operation of map_left without executing the left side.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, &str> = Right(\"value\");",
                "    let result = right.map_left(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"value\"));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, &str> = Right(\"value\");",
                "    let result = right.map_left(|x| x * 2);",
                "    assert_eq!(result, Right(\"value\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, u32> = Right(42);",
                "    let result = right.map_left(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(42));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, u32> = Right(42);",
                "    let result = right.map_left(|x| x * 2);",
                "    assert_eq!(result, Right(42));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, &str> = Right(\"test\");",
                "    let result = right.map_left(|x| x.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"test\"));"
              ],
              "code": [
                "{",
                "   use std::string::String;  ",
                "   let right: Either<String, &str> = Right(\"test\");  ",
                "   let result = right.map_left(|x| x.len());  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<f64, f64> = Right(3.14);",
                "    let result = right.map_left(|x| x * 2.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(3.14));"
              ],
              "code": [
                "{",
                "    let right: Either<f64, f64> = Right(3.14);",
                "    let result = right.map_left(|x| x * 2.0);",
                "    assert_eq!(result, Right(3.14));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<u32, &str> = Right(\"\");",
                "    let result = right.map_left(|x| x * 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Right(\"\"));"
              ],
              "code": [
                "{",
                "    let right: Either<u32, &str> = Right(\"\");",
                "    let result = right.map_left(|x| x * 3);",
                "    assert_eq!(result, Right(\"\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left(l) at line 321 is true\n",
        "precondition: self matches Left(l) at line 321 is true\n",
        "expected return value/type: Left(f(l))\n"
      ],
      "input_infer": "L: Any value type compatible with the Left variant, R: Any value type compatible with the Right variant, f: Any function that takes an L type as input and returns an M type, where M can be any type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, u32> = Left(123);",
                "    let result = left.map_left(|x| x * 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(246));",
                "    assert!(matches!(result, Left(_)));",
                "    assert!(!matches!(result, Right(_)));",
                "    assert_eq!(result.as_ref(), Left(&246));",
                "    assert_eq!(result.left(), Some(246));",
                "    assert_eq!(result.right(), None);"
              ],
              "code": [
                "{",
                "    let left: Either<i32, u32> = Left(123);",
                "    let result = left.map_left(|x| x * 2);",
                "    assert_eq!(result, Left(246));",
                "    assert!(matches!(result, Left(_)));",
                "    assert!(!matches!(result, Right(_)));",
                "    assert_eq!(result.as_ref(), Left(&246));",
                "    assert_eq!(result.left(), Some(246));",
                "    assert_eq!(result.right(), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, u32> = Left(-50);",
                "    let result = left.map_left(|x| x * 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(-150));"
              ],
              "code": [
                "{",
                "    let left: Either<i32, u32> = Left(-50);",
                "    let result = left.map_left(|x| x * 3);",
                "    assert_eq!(result, Left(-150));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, u32> = Left(0);",
                "    let result = left.map_left(|x| x + 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(1));"
              ],
              "code": [
                "{",
                "    let left: Either<i32, u32> = Left(0);",
                "    let result = left.map_left(|x| x + 1);",
                "    assert_eq!(result, Left(1));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<&str, u32> = Left(\"Hello\");",
                "    let result = left.map_left(|x| format!(\"{} World\", x));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(\"Hello World\"));"
              ],
              "code": [
                "{  ",
                "   use std::format;  ",
                "   let left: Either<&str, u32> = Left(\"Hello\");  ",
                "   let result = left.map_left(|x| format!(\"{} World\", x));  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<f32, u32> = Left(3.14);",
                "    let result = left.map_left(|x| x * 2.0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(6.28));"
              ],
              "code": [
                "{",
                "    let left: Either<f32, u32> = Left(3.14);",
                "    let result = left.map_left(|x| x * 2.0);",
                "    assert_eq!(result, Left(6.28));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}