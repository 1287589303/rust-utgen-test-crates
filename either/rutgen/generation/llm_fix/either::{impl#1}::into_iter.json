{
  "name": "either::{impl#1}::into_iter",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:521:5:527:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Right($pattern) at line 526 is true\n",
        "expected return value/type: Right($result)\n"
      ],
      "input_infer": "Self is Right with any iterable type R and $result being an Either type containing a Right value that is an iterator over the items produced by the iterable R where the item type matches that of L.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<Vec<u32>, Vec<u32>> = Right(vec![1, 2, 3]);",
                "    let _result: Either<std::vec::IntoIter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Right(_)));",
                "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));"
              ],
              "code": [
                "{",
                "   use std::vec::Vec;  ",
                "   let right: Either<Vec<u32>, Vec<u32>> = Right(vec![1, 2, 3]);  ",
                "   let _result: Either<std::vec::IntoIter<u32>, std::vec::IntoIter<u32>> = right.into_iter();  ",
                "   assert!(matches!(_result, Right(_)));  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<[u32; 3], Vec<u32>> = Right([1, 2, 3]);",
                "    let _result: Either<std::array::IntoIter<u32, 3>, std::vec::IntoIter<u32>> = right.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Right(_)));",
                "    assert_eq!(_result, Right(std::array::IntoIter::new([1, 2, 3])));"
              ],
              "code": [
                "{",
                "    let right: Either<[u32; 3], Vec<u32>> = Right([1, 2, 3]);",
                "    let _result: Either<std::array::IntoIter<u32, 3>, std::vec::IntoIter<u32>> = right.into_iter();",
                "    assert!(matches!(_result, Right(_)));",
                "    assert_eq!(_result, Right(std::array::IntoIter::new([1, 2, 3])));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<String, Vec<u32>> = Right(String::from(\"test\"));",
                "    let _result: Either<std::string::IntoIter, std::vec::IntoIter<u32>> = right.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(_result, Right(_)));",
                "    assert_eq!(format!(\"{:?}\", _result), \"Right([])\");",
                "    assert!(matches!(_result.right(), Some(_)));",
                "    assert!(matches!(_result.left(), None));",
                "    assert!(matches!(_result.as_ref(), Either::Right(_)));",
                "    assert!(matches!(_result.as_mut(), Either::Right(_)));",
                "    assert!(matches!(_result.flip(), Left(\"test\".to_string())));"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<&[u32], Vec<u32>> = Right(&[1, 2, 3]);",
                "    let _result: Either<std::slice::Iter<u32>, std::vec::IntoIter<u32>> = right.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, Right(vec![1, 2, 3].into_iter()));"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Left($pattern) at line 526 is true\n",
        "precondition: self matches Left($pattern) at line 526 is true\n",
        "expected return value/type: Left($result)\n"
      ],
      "input_infer": "Left of type L where L implements IntoIterator and R implements IntoIterator with the same item type as L's items.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<Vec<u32>, Vec<String>> = Left(vec![1, 2, 3, 4, 5]);",
                "    let result: Either<Vec<u32>::IntoIter, Vec<String>::IntoIter> = left.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(result, Left(_)));",
                "    assert_eq!(result.left().unwrap().collect::<Vec<u32>>(), vec![1, 2, 3, 4, 5]);",
                "    assert!(result.right().is_none());",
                "    assert_eq!(result, Left(vec![1, 2, 3, 4, 5]).into_iter());"
              ],
              "code": [
                "       fn test_into_iter_04()",
                "       {",
                "           let left: Either<Vec<u32>, Vec<String>> = Left(vec![1, 2, 3, 4, 5]);",
                "           let result: Either<Vec<u32>::IntoIter, Vec<String>::IntoIter> = left.into_iter();",
                "           assert!(matches!(result, Left(_)));",
                "           assert_eq!(result.left().unwrap().collect::<Vec<u32>>(), vec![1, 2, 3, 4, 5]);",
                "           assert_eq!(result, Left(vec![1, 2, 3, 4, 5]).into_iter());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<[u32; 5], Vec<String>> = Left([1, 2, 3, 4, 5]);",
                "    let result: Either<impl Iterator<Item = u32>, Vec<String>::IntoIter> = left.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.as_pin_ref(), Left(vec![1, 2, 3, 4, 5].into_iter()));",
                "    assert!(result.is_left());",
                "    assert!(result.left().is_some());",
                "    assert_eq!(result.left().unwrap().collect::<Vec<_>>(), vec![1, 2, 3, 4, 5]);",
                "    assert_eq!(result.right(), None);",
                "    assert!(result.left_or_default().collect::<Vec<_>>() == vec![1, 2, 3, 4, 5]);",
                "    assert!(matches!(result.expect_left(\"msg\"), Left(_)));",
                "    assert_eq!(result.unwrap_left(), vec![1, 2, 3, 4, 5]);",
                "    assert_eq!(result.map_left(|x| x.collect::<Vec<_>>()), Left(vec![1, 2, 3, 4, 5]));",
                "    assert_eq!(result.map_either(|x| x.collect::<Vec<_>>(), |_| unreachable!()), Left(vec![1, 2, 3, 4, 5]));"
              ],
              "code": [
                "fn test_into_iter_05()",
                "{",
                "   let left: Either<[u32; 5], Vec<String>> = Left([1, 2, 3, 4, 5]);",
                "   let result: Either<impl Iterator<Item = u32>, Vec<String>::IntoIter> = left.into_iter();",
                "   assert_eq!(result.as_pin_ref(), Left(vec![1, 2, 3, 4, 5].into_iter()));",
                "   assert!(result.is_left());",
                "   assert!(result.left().is_some());",
                "   assert_eq!(result.left().unwrap().collect::<Vec<_>>(), vec![1, 2, 3, 4, 5]);",
                "   assert_eq!(result.right(), None);",
                "   assert!(result.left_or_default().collect::<Vec<_>>() == vec![1, 2, 3, 4, 5]);",
                "   assert!(matches!(result.expect_left(\"msg\"), Left(_)));",
                "    assert_eq!(result.unwrap_left(), vec![1, 2, 3, 4, 5]);",
                "    assert_eq!(result.map_left(|x| x.collect::<Vec<_>>()), Left(vec![1, 2, 3, 4, 5]));",
                "    assert_eq!(result.map_either(|x| x.collect::<Vec<_>>(), |_| unreachable!()), Left(vec![1, 2, 3, 4, 5]));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![10, 20, 30]);",
                "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_left());",
                "    assert_eq!(result.left(), Some(vec![10, 20, 30].into_iter()));"
              ],
              "code": [
                "{",
                "   use std::vec::Vec;  ",
                "   let left: Either<Vec<u32>, Vec<u32>> = Left(vec![10, 20, 30]);  ",
                "   let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();  ",
                "   assert!(result.is_left());  ",
                "   assert_eq!(result.left(), Some(vec![10, 20, 30].into_iter()));  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![]);",
                "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(vec![].into_iter()));",
                "    assert!(result.is_left());",
                "    assert!(!result.is_right());",
                "    assert!(result.left().is_some());",
                "    assert!(result.right().is_none());",
                "    assert_eq!(result.as_ref(), Left((&vec![].into_iter(), &vec![])));",
                "    assert_eq!(result.as_mut(), Left((&mut vec![].into_iter(), &mut vec![])));",
                "    assert_eq!(result.unwrap_left(), vec![].into_iter());",
                "    assert_eq!(result.expect_left(\"Expected left value\"), vec![].into_iter());"
              ],
              "code": [
                "   {  ",
                "      let left: Either<std::vec::Vec<u32>, std::vec::Vec<u32>> = Left(std::vec::vec![]);  ",
                "      let result: Either<std::vec::Vec<u32>::IntoIter, std::vec::Vec<u32>::IntoIter> = left.into_iter();  ",
                "    assert_eq!(result, Left(vec![].into_iter()));",
                "    assert!(result.is_left());",
                "    assert!(!result.is_right());",
                "    assert!(result.left().is_some());",
                "    assert!(result.right().is_none());",
                "    assert_eq!(result.as_ref(), Left((&vec![].into_iter(), &vec![])));",
                "    assert_eq!(result.as_mut(), Left((&mut vec![].into_iter(), &mut vec![])));",
                "    assert_eq!(result.unwrap_left(), vec![].into_iter());",
                "    assert_eq!(result.expect_left(\"Expected left value\"), vec![].into_iter());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<Vec<u32>, Vec<u32>> = Left(vec![100]);",
                "    let result: Either<Vec<u32>::IntoIter, Vec<u32>::IntoIter> = left.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Left(vec![100].into_iter()));"
              ],
              "code": [
                "{",
                " let left: Either<std::vec::Vec<u32>, std::vec::Vec<u32>> = Left(std::vec![100]);  ",
                " let result: Either< std::vec::IntoIter<u32>, std::vec::IntoIter<u32>> = left.into_iter();  ",
                " assert_eq!(result, Left(std::vec![100].into_iter()));  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}