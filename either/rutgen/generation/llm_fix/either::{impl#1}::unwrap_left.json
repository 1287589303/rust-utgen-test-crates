{
  "name": "either::{impl#1}::unwrap_left",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:1:1:1561:2"
  },
  "visible": true,
  "loc": "src/lib.rs:810:5:820:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Either::Right(r) at line 814 is true\n"
      ],
      "input_infer": "self is an instance of Either with R being any type (except for L) and containing a value in Either::Right(r)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, &str> = Right(\"error\");",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_panics!(right.unwrap_left());"
              ],
              "code": [
                "{",
                "    let right: Either<i32, &str> = Right(\"error\");",
                "    right.unwrap_left();",
                "    assert_panics!(right.unwrap_left());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, &str> = Right(\"\");",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let right: Either<i32, &str> = Right(\"\");",
                "    right.unwrap_left();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let right: Either<i32, &str> = Right(\"\");",
                "    right.unwrap_left();",
                "    assert_eq!(std::panic::catch_unwind(|| {",
                "    let right: Either<i32, &str> = Right(\"\");",
                "    right.unwrap_left();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, i32> = Right(0);",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_panics!(right.unwrap_left());"
              ],
              "code": [
                "{",
                "    let right: Either<i32, i32> = Right(0);",
                "    right.unwrap_left();",
                "    assert_panics!(right.unwrap_left());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, i32> = Right(-100);",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_panics!(test, \"called `Either::unwrap_left()` on a `Right` value: -100\");"
              ],
              "code": [
                "{",
                "    let right: Either<i32, i32> = Right(-100);",
                "    right.unwrap_left();",
                "    assert_panics!(test, \"called `Either::unwrap_left()` on a `Right` value: -100\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, bool> = Right(true);",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_panics!(|| {",
                "    let right: Either<i32, bool> = Right(true);",
                "    right.unwrap_left();",
                "    });"
              ],
              "code": [
                "{",
                "    let right: Either<i32, bool> = Right(true);",
                "    right.unwrap_left();",
                "    assert_panics!(|| {",
                "    let right: Either<i32, bool> = Right(true);",
                "    right.unwrap_left();",
                "    });",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let right: Either<i32, char> = Right('a');",
                "    right.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let right: Either<i32, char> = Right('a');",
                "    right.unwrap_left();",
                "    }).is_err(), true);"
              ],
              "code": [
                "{",
                "    let right: Either<i32, char> = Right('a');",
                "    right.unwrap_left();",
                "    assert_eq!(panic::catch_unwind(|| {",
                "    let right: Either<i32, char> = Right('a');",
                "    right.unwrap_left();",
                "    }).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Either::Left(l) at line 814 is true\n",
        "precondition: self matches Either::Left(l) at line 814 is true\n",
        "expected return value/type: l\n"
      ],
      "input_infer": "self must be an instance of Either::Left(l) with any type L, and R must implement core::fmt::Debug\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<i32, ()> = Left(42);",
                "    let _ = left.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.unwrap_left(), 42);"
              ],
              "code": [
                "{",
                "    let left: Either<i32, ()> = Left(42);",
                "    let _ = left.unwrap_left();",
                "    assert_eq!(left.unwrap_left(), 42);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
                "    let _ = left.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
                "    let left: Either<i32, ()> = Left(10);",
                "    assert_eq!(left.unwrap_left(), 10);",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    assert_eq!(left.unwrap_left(), 3.14);",
                "    let left: Either<char, ()> = Left('A');",
                "    assert_eq!(left.unwrap_left(), 'A');",
                "    let left: Either<Vec<u8>, ()> = Left(vec![1, 2, 3]);",
                "    assert_eq!(left.unwrap_left(), vec![1, 2, 3]);"
              ],
              "code": [
                "{",
                "    let left: Either<String, ()> = Left(String::from(\"Hello\"));",
                "    let _ = left.unwrap_left();",
                "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
                "    let left: Either<i32, ()> = Left(10);",
                "    assert_eq!(left.unwrap_left(), 10);",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    assert_eq!(left.unwrap_left(), 3.14);",
                "    let left: Either<char, ()> = Left('A');",
                "    assert_eq!(left.unwrap_left(), 'A');",
                "    let left: Either<Vec<u8>, ()> = Left(vec![1, 2, 3]);",
                "    assert_eq!(left.unwrap_left(), vec![1, 2, 3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    let _ = left.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.unwrap_left(), 3.14);",
                "    assert!(matches!(left.unwrap_left(), 3.14));",
                "    let left_value = left.unwrap_left();",
                "    assert!(left_value == 3.14);",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.unwrap_left(), 42);",
                "    let left: Either<String, ()> = Left(String::from(\"test\"));",
                "    assert_eq!(left.unwrap_left(), \"test\");",
                "    let left: Either<u32, ()> = Left(100);",
                "    assert!(left.unwrap_left() == 100);"
              ],
              "code": [
                "{",
                "    let left: Either<f64, ()> = Left(3.14);",
                "    let _ = left.unwrap_left();",
                "    assert_eq!(left.unwrap_left(), 3.14);",
                "    assert!(matches!(left.unwrap_left(), 3.14));",
                "    let left_value = left.unwrap_left();",
                "    assert!(left_value == 3.14);",
                "    let left: Either<i32, ()> = Left(42);",
                "    assert_eq!(left.unwrap_left(), 42);",
                "    let left: Either<String, ()> = Left(String::from(\"test\"));",
                "    assert_eq!(left.unwrap_left(), \"test\");",
                "    let left: Either<u32, ()> = Left(100);",
                "    assert!(left.unwrap_left() == 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let left: Either<(i32, i32), ()> = Left((1, 2));",
                "    let _ = left.unwrap_left();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(left.unwrap_left(), (1, 2));",
                "    assert_eq!(left.unwrap_left(), (1, 2));",
                "    let left: Either<(i32, i32), ()> = Left((3, 4));",
                "    assert_eq!(left.unwrap_left(), (3, 4));",
                "    let left: Either<(String, ()), ()> = Left(String::from(\"Hello\"));",
                "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));"
              ],
              "code": [
                "{",
                "    let left: Either<(i32, i32), ()> = Left((1, 2));",
                "    let _ = left.unwrap_left();",
                "    assert_eq!(left.unwrap_left(), (1, 2));",
                "    assert_eq!(left.unwrap_left(), (1, 2));",
                "    let left: Either<(i32, i32), ()> = Left((3, 4));",
                "    assert_eq!(left.unwrap_left(), (3, 4));",
                "    let left: Either<(String, ()), ()> = Left(String::from(\"Hello\"));",
                "    assert_eq!(left.unwrap_left(), String::from(\"Hello\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}