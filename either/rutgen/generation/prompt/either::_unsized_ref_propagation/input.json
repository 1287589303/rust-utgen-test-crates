{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\nfn _unsized_ref_propagation() {\n    check_t!(str);\n    fn check_array_ref<T: AsRef<[Item]>, Item>() {}\n    fn check_array_mut<T: AsMut<[Item]>, Item>() {}\n    fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {\n        check_array_ref::<Either<T1, T2>, _>()\n    }\n    fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {\n        check_array_mut::<Either<T1, T2>, _>()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1540 fn _unsized_ref_propagation() {\n1541     check_t!(str);\n1542 \n1543     fn check_array_ref<T: AsRef<[Item]>, Item>() {}\n1544     fn check_array_mut<T: AsMut<[Item]>, Item>() {}\n1545 \n1546     fn propagate_array_ref<T1: AsRef<[Item]>, T2: AsRef<[Item]>, Item>() {\n1547         check_array_ref::<Either<T1, T2>, _>()\n1548     }\n1549 \n1550     fn propagate_array_mut<T1: AsMut<[Item]>, T2: AsMut<[Item]>, Item>() {\n1551         check_array_mut::<Either<T1, T2>, _>()\n1552     }\n1553 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}