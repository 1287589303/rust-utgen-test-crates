{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<L, R> Either<L, R> {\n    pub fn is_left(&self) -> bool {}\n    pub fn is_right(&self) -> bool {}\n    pub fn left(self) -> Option<L> {}\n    pub fn right(self) -> Option<R> {}\n    pub fn as_ref(&self) -> Either<&L, &R> {}\n    pub fn as_mut(&mut self) -> Either<&mut L, &mut R> {}\n    pub fn as_pin_ref(self: Pin<&Self>) -> Either<Pin<&L>, Pin<&R>> {}\n    pub fn as_pin_mut(self: Pin<&mut Self>) -> Either<Pin<&mut L>, Pin<&mut R>> {}\n    pub fn flip(self) -> Either<R, L> {}\n    pub fn map_left<F, M>(self, f: F) -> Either<M, R>\n    where\n        F: FnOnce(L) -> M,\n    {}\n    pub fn map_right<F, S>(self, f: F) -> Either<L, S>\n    where\n        F: FnOnce(R) -> S,\n    {}\n    pub fn map_either<F, G, M, S>(self, f: F, g: G) -> Either<M, S>\n    where\n        F: FnOnce(L) -> M,\n        G: FnOnce(R) -> S,\n    {}\n    pub fn map_either_with<Ctx, F, G, M, S>(self, ctx: Ctx, f: F, g: G) -> Either<M, S>\n    where\n        F: FnOnce(Ctx, L) -> M,\n        G: FnOnce(Ctx, R) -> S,\n    {}\n    pub fn either<F, G, T>(self, f: F, g: G) -> T\n    where\n        F: FnOnce(L) -> T,\n        G: FnOnce(R) -> T,\n    {}\n    pub fn either_with<Ctx, F, G, T>(self, ctx: Ctx, f: F, g: G) -> T\n    where\n        F: FnOnce(Ctx, L) -> T,\n        G: FnOnce(Ctx, R) -> T,\n    {}\n    pub fn left_and_then<F, S>(self, f: F) -> Either<S, R>\n    where\n        F: FnOnce(L) -> Either<S, R>,\n    {}\n    pub fn right_and_then<F, S>(self, f: F) -> Either<L, S>\n    where\n        F: FnOnce(R) -> Either<L, S>,\n    {}\n    #[allow(clippy::should_implement_trait)]\n    pub fn into_iter(self) -> Either<L::IntoIter, R::IntoIter>\n    where\n        L: IntoIterator,\n        R: IntoIterator<Item = L::Item>,\n    {}\n    pub fn iter(\n        &self,\n    ) -> Either<<&L as IntoIterator>::IntoIter, <&R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a L: IntoIterator,\n        for<'a> &'a R: IntoIterator<Item = <&'a L as IntoIterator>::Item>,\n    {}\n    pub fn iter_mut(\n        &mut self,\n    ) -> Either<<&mut L as IntoIterator>::IntoIter, <&mut R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a mut L: IntoIterator,\n        for<'a> &'a mut R: IntoIterator<Item = <&'a mut L as IntoIterator>::Item>,\n    {}\n    pub fn factor_into_iter(self) -> IterEither<L::IntoIter, R::IntoIter>\n    where\n        L: IntoIterator,\n        R: IntoIterator,\n    {}\n    pub fn factor_iter(\n        &self,\n    ) -> IterEither<<&L as IntoIterator>::IntoIter, <&R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a L: IntoIterator,\n        for<'a> &'a R: IntoIterator,\n    {}\n    pub fn factor_iter_mut(\n        &mut self,\n    ) -> IterEither<\n        <&mut L as IntoIterator>::IntoIter,\n        <&mut R as IntoIterator>::IntoIter,\n    >\n    where\n        for<'a> &'a mut L: IntoIterator,\n        for<'a> &'a mut R: IntoIterator,\n    {}\n    pub fn left_or(self, other: L) -> L {}\n    pub fn left_or_default(self) -> L\n    where\n        L: Default,\n    {}\n    pub fn left_or_else<F>(self, f: F) -> L\n    where\n        F: FnOnce(R) -> L,\n    {}\n    pub fn right_or(self, other: R) -> R {}\n    pub fn right_or_default(self) -> R\n    where\n        R: Default,\n    {}\n    pub fn right_or_else<F>(self, f: F) -> R\n    where\n        F: FnOnce(L) -> R,\n    {\n        match self {\n            Either::Left(l) => f(l),\n            Either::Right(r) => r,\n        }\n    }\n    pub fn unwrap_left(self) -> L\n    where\n        R: core::fmt::Debug,\n    {}\n    pub fn unwrap_right(self) -> R\n    where\n        L: core::fmt::Debug,\n    {}\n    pub fn expect_left(self, msg: &str) -> L\n    where\n        R: core::fmt::Debug,\n    {}\n    pub fn expect_right(self, msg: &str) -> R\n    where\n        L: core::fmt::Debug,\n    {}\n    pub fn either_into<T>(self) -> T\n    where\n        L: Into<T>,\n        R: Into<T>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns right value or computes it from a closure\n///\n/// # Examples\n///\n/// ```\n/// # use either::*;\n/// let left: Either<String, u32> = Left(\"3\".to_string());\n/// assert_eq!(left.right_or_else(|x| x.parse().unwrap()), 3);\n///\n/// let right: Either<String, u32> = Right(3);\n/// assert_eq!(right.right_or_else(|_| unreachable!()), 3);\n/// ```\n781 pub fn right_or_else<F>(self, f: F) -> R\n782 where\n783     F: FnOnce(L) -> R,\n784 {\n785     match self {\n786         Either::Left(l) => f(l),\n787         Either::Right(r) => r,\n788     }\n789 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}