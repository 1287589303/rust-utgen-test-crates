{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<L, R> Either<&mut L, &mut R> {\n    pub fn cloned(self) -> Either<L, R>\n    where\n        L: Clone,\n        R: Clone,\n    {}\n    pub fn copied(self) -> Either<L, R>\n    where\n        L: Copy,\n        R: Copy,\n    {\n        map_either!(self, inner => * inner)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Maps an `Either<&L, &R>` to an `Either<L, R>` by copying the contents of\n/// either branch.\n1090 pub fn copied(self) -> Either<L, R>\n1091 where\n1092     L: Copy,\n1093     R: Copy,\n1094 {\n1095     map_either!(self, inner => *inner)\n1096 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}