{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<T, L, R> Either<(L, T), (R, T)> {\n    pub fn factor_second(self) -> (Either<L, R>, T) {\n        match self {\n            Left((l, t)) => (Left(l), t),\n            Right((r, t)) => (Right(r), t),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Factor out a homogeneous type from an either of pairs.\n///\n/// Here, the homogeneous type is the second element of the pairs.\n///\n/// ```\n/// use either::*;\n/// let left: Either<_, (String, u32)> = Left((vec![0], 123));\n/// assert_eq!(left.factor_second().1, 123);\n///\n/// let right: Either<(Vec<u8>, u32), _> = Right((String::new(), 123));\n/// assert_eq!(right.factor_second().1, 123);\n/// ```\n1031 pub fn factor_second(self) -> (Either<L, R>, T) {\n1032     match self {\n1033         Left((l, t)) => (Left(l), t),\n1034         Right((r, t)) => (Right(r), t),\n1035     }\n1036 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}