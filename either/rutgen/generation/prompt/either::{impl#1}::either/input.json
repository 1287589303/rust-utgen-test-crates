{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<L, R> Either<L, R> {\n    pub fn is_left(&self) -> bool {}\n    pub fn is_right(&self) -> bool {}\n    pub fn left(self) -> Option<L> {}\n    pub fn right(self) -> Option<R> {}\n    pub fn as_ref(&self) -> Either<&L, &R> {}\n    pub fn as_mut(&mut self) -> Either<&mut L, &mut R> {}\n    pub fn as_pin_ref(self: Pin<&Self>) -> Either<Pin<&L>, Pin<&R>> {}\n    pub fn as_pin_mut(self: Pin<&mut Self>) -> Either<Pin<&mut L>, Pin<&mut R>> {}\n    pub fn flip(self) -> Either<R, L> {}\n    pub fn map_left<F, M>(self, f: F) -> Either<M, R>\n    where\n        F: FnOnce(L) -> M,\n    {}\n    pub fn map_right<F, S>(self, f: F) -> Either<L, S>\n    where\n        F: FnOnce(R) -> S,\n    {}\n    pub fn map_either<F, G, M, S>(self, f: F, g: G) -> Either<M, S>\n    where\n        F: FnOnce(L) -> M,\n        G: FnOnce(R) -> S,\n    {}\n    pub fn map_either_with<Ctx, F, G, M, S>(self, ctx: Ctx, f: F, g: G) -> Either<M, S>\n    where\n        F: FnOnce(Ctx, L) -> M,\n        G: FnOnce(Ctx, R) -> S,\n    {}\n    pub fn either<F, G, T>(self, f: F, g: G) -> T\n    where\n        F: FnOnce(L) -> T,\n        G: FnOnce(R) -> T,\n    {\n        match self {\n            Left(l) => f(l),\n            Right(r) => g(r),\n        }\n    }\n    pub fn either_with<Ctx, F, G, T>(self, ctx: Ctx, f: F, g: G) -> T\n    where\n        F: FnOnce(Ctx, L) -> T,\n        G: FnOnce(Ctx, R) -> T,\n    {}\n    pub fn left_and_then<F, S>(self, f: F) -> Either<S, R>\n    where\n        F: FnOnce(L) -> Either<S, R>,\n    {}\n    pub fn right_and_then<F, S>(self, f: F) -> Either<L, S>\n    where\n        F: FnOnce(R) -> Either<L, S>,\n    {}\n    #[allow(clippy::should_implement_trait)]\n    pub fn into_iter(self) -> Either<L::IntoIter, R::IntoIter>\n    where\n        L: IntoIterator,\n        R: IntoIterator<Item = L::Item>,\n    {}\n    pub fn iter(\n        &self,\n    ) -> Either<<&L as IntoIterator>::IntoIter, <&R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a L: IntoIterator,\n        for<'a> &'a R: IntoIterator<Item = <&'a L as IntoIterator>::Item>,\n    {}\n    pub fn iter_mut(\n        &mut self,\n    ) -> Either<<&mut L as IntoIterator>::IntoIter, <&mut R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a mut L: IntoIterator,\n        for<'a> &'a mut R: IntoIterator<Item = <&'a mut L as IntoIterator>::Item>,\n    {}\n    pub fn factor_into_iter(self) -> IterEither<L::IntoIter, R::IntoIter>\n    where\n        L: IntoIterator,\n        R: IntoIterator,\n    {}\n    pub fn factor_iter(\n        &self,\n    ) -> IterEither<<&L as IntoIterator>::IntoIter, <&R as IntoIterator>::IntoIter>\n    where\n        for<'a> &'a L: IntoIterator,\n        for<'a> &'a R: IntoIterator,\n    {}\n    pub fn factor_iter_mut(\n        &mut self,\n    ) -> IterEither<\n        <&mut L as IntoIterator>::IntoIter,\n        <&mut R as IntoIterator>::IntoIter,\n    >\n    where\n        for<'a> &'a mut L: IntoIterator,\n        for<'a> &'a mut R: IntoIterator,\n    {}\n    pub fn left_or(self, other: L) -> L {}\n    pub fn left_or_default(self) -> L\n    where\n        L: Default,\n    {}\n    pub fn left_or_else<F>(self, f: F) -> L\n    where\n        F: FnOnce(R) -> L,\n    {}\n    pub fn right_or(self, other: R) -> R {}\n    pub fn right_or_default(self) -> R\n    where\n        R: Default,\n    {}\n    pub fn right_or_else<F>(self, f: F) -> R\n    where\n        F: FnOnce(L) -> R,\n    {}\n    pub fn unwrap_left(self) -> L\n    where\n        R: core::fmt::Debug,\n    {}\n    pub fn unwrap_right(self) -> R\n    where\n        L: core::fmt::Debug,\n    {}\n    pub fn expect_left(self, msg: &str) -> L\n    where\n        R: core::fmt::Debug,\n    {}\n    pub fn expect_right(self, msg: &str) -> R\n    where\n        L: core::fmt::Debug,\n    {}\n    pub fn either_into<T>(self) -> T\n    where\n        L: Into<T>,\n        R: Into<T>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Apply one of two functions depending on contents, unifying their result. If the value is\n/// `Left(L)` then the first function `f` is applied; if it is `Right(R)` then the second\n/// function `g` is applied.\n///\n/// ```\n/// use either::*;\n///\n/// fn square(n: u32) -> i32 { (n * n) as i32 }\n/// fn negate(n: i32) -> i32 { -n }\n///\n/// let left: Either<u32, i32> = Left(4);\n/// assert_eq!(left.either(square, negate), 16);\n///\n/// let right: Either<u32, i32> = Right(-4);\n/// assert_eq!(right.either(square, negate), 4);\n/// ```\n424 pub fn either<F, G, T>(self, f: F, g: G) -> T\n425 where\n426     F: FnOnce(L) -> T,\n427     G: FnOnce(R) -> T,\n428 {\n429     match self {\n430         Left(l) => f(l),\n431         Right(r) => g(r),\n432     }\n433 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}