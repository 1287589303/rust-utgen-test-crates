{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/iterator.rs\n// crate name is either\nuse super::{for_both, Either, Left, Right};\nuse core::iter;\n#[derive(Clone, Debug)]\npub struct IterEither<L, R> {\n    inner: Either<L, R>,\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<L, R> DoubleEndedIterator for IterEither<L, R>\nwhere\n    L: DoubleEndedIterator,\n    R: DoubleEndedIterator,\n{\n    fn next_back(&mut self) -> Option<Self::Item> {\n        Some(map_either!(self.inner, ref mut inner => inner.next_back() ?))\n    }\n    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n        Some(map_either!(self.inner, ref mut inner => inner.nth_back(n) ?))\n    }\n    fn rfold<Acc, G>(self, init: Acc, f: G) -> Acc\n    where\n        G: FnMut(Acc, Self::Item) -> Acc,\n    {}\n    fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n    where\n        P: FnMut(&Self::Item) -> bool,\n    {\n        wrap_either!(& mut self.inner => .rfind(predicate))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n292 fn rfind<P>(&mut self, predicate: P) -> Option<Self::Item>\n293 where\n294     P: FnMut(&Self::Item) -> bool,\n295 {\n296     wrap_either!(&mut self.inner => .rfind(predicate))\n297 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}