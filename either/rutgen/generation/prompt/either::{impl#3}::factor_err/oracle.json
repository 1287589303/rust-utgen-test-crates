{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is either\nuse core::convert::{AsMut, AsRef};\nuse core::fmt;\nuse core::future::Future;\nuse core::ops::Deref;\nuse core::ops::DerefMut;\nuse core::pin::Pin;\n#[cfg(any(test, feature = \"std\"))]\nuse std::error::Error;\n#[cfg(any(test, feature = \"std\"))]\nuse std::io::{self, BufRead, Read, Seek, SeekFrom, Write};\npub use crate::Either::{Left, Right};\npub use self::iterator::IterEither;\npub use self::into_either::IntoEither;\n#[cfg_attr(feature = \"serde\", derive(serde::Serialize, serde::Deserialize))]\n#[derive(Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\npub enum Either<L, R> {\n    /// A value of type `L`.\n    Left(L),\n    /// A value of type `R`.\n    Right(R),\n}\n#[derive(Serialize, Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\n#[derive(serde::Serialize, serde::Deserialize)]\n#[serde(untagged)]\nenum Either<L, R> {\n    Left(L),\n    Right(R),\n}\nimpl<L, R, E> Either<Result<L, E>, Result<R, E>> {\n    pub fn factor_err(self) -> Result<Either<L, R>, E> {\n        match self {\n            Left(l) => l.map(Either::Left),\n            Right(r) => r.map(Either::Right),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Factors out a homogenous type from an `Either` of [`Result`].\n///\n/// Here, the homogeneous type is the `Err` type of the [`Result`].\n///\n/// ```\n/// use either::*;\n/// let left: Either<_, Result<String, u32>> = Left(Ok(vec![0]));\n/// assert_eq!(left.factor_err(), Ok(Left(vec![0])));\n///\n/// let right: Either<Result<Vec<u8>, u32>, _> = Right(Ok(String::new()));\n/// assert_eq!(right.factor_err(), Ok(Right(String::new())));\n/// ```\n966 pub fn factor_err(self) -> Result<Either<L, R>, E> {\n967     match self {\n968         Left(l) => l.map(Either::Left),\n969         Right(r) => r.map(Either::Right),\n970     }\n971 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}