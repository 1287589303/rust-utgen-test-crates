[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention((_1.0: Either<L, R>)),
            _3 = discriminant((_1.0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:9: 135:9 (#38),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (_1.0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:26: 214:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:13: 136:27 (#38),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move (((_1.0: Either<L, R>) as Right).0: R),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:59 (#0),
                    scope: scope[6],
                },
                kind: _17 = <R as core::iter::Iterator>::last(move _18) -> [return: bb16, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (((_1.0: Either<L, R>) as Left).0: L),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:59 (#0),
                    scope: scope[1],
                },
                kind: _7 = <L as core::iter::Iterator>::last(move _8) -> [return: bb5, unwind: bb41],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#133),
                    scope: scope[1],
                },
                kind: _6 = <core::option::Option<<L as core::iter::Iterator>::Item> as core::ops::Try>::branch(move _7) -> [return: bb6, unwind: bb40],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _9 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#133),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#133),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#134),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_6 as Continue).0: <L as core::iter::Iterator>::Item),
            _5 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb12, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#133),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _12) -> [return: bb11, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb31, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _2 = Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb39],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb14, unwind: bb42],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb15, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#135),
                    scope: scope[6],
                },
                kind: _16 = <core::option::Option<<R as core::iter::Iterator>::Item> as core::ops::Try>::branch(move _17) -> [return: bb17, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#135),
                    scope: scope[6],
                },
                kind: switchInt(move _19) -> [0: bb20, 1: bb19, otherwise: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#135),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#136),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb21, imaginary: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_16 as Continue).0: <R as core::iter::Iterator>::Item),
            _15 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#0),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb23, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_16 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_22),
            _22 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:47: 214:60 (#135),
                    scope: scope[8],
                },
                kind: _0 = <core::option::Option<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _22) -> [return: bb22, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb29, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _2 = Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right(move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[6],
                },
                kind: drop(_15) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb25, unwind: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb26, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: goto -> bb27,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>>::Some(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:61: 214:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb28, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:215:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb34, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb30, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb32, unwind: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:215:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb34, unwind: bb44],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:215:6: 215:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#135),
                    scope: scope[6],
                },
                kind: drop(_17) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:58: 214:59 (#0),
                    scope: scope[6],
                },
                kind: drop(_18) -> [return: bb38, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#38),
                    scope: scope[0],
                },
                kind: drop(_14) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:59: 214:60 (#133),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:214:58: 214:59 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb42, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#38),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb43, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:215:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb44, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:213:5: 215:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Either<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:213:22: 213:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: iterator::IterEither<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:213:13: 213:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Either<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:135:9: 138:10 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:13: 136:27 (#38),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: Either<L, R>),
                                ),
                                src/iterator.rs:214:26: 214:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:136:13: 136:27 (#38),
                    },
                ),
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:38: 214:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    L/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#133),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#134),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/iterator.rs:214:47: 214:60 (#133),
                            ),
                        ),
                        pat_span: src/iterator.rs:214:59: 214:60 (#134),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#134),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#134),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#134),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/iterator.rs:214:47: 214:60 (#133),
                            ),
                        ),
                        pat_span: src/iterator.rs:214:47: 214:60 (#133),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    L/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: Either<L, R>),
                                ),
                                src/iterator.rs:214:26: 214:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:137:13: 137:28 (#38),
                    },
                ),
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:38: 214:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#1,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#135),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#136),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/iterator.rs:214:47: 214:60 (#135),
                            ),
                        ),
                        pat_span: src/iterator.rs:214:59: 214:60 (#136),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#136),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#136),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:214:9: 214:62 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:59: 214:60 (#136),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/iterator.rs:214:47: 214:60 (#135),
                            ),
                        ),
                        pat_span: src/iterator.rs:214:47: 214:60 (#135),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#1,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:214:47: 214:60 (#0),
            scope: scope[6],
        },
    },
]