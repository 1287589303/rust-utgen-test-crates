[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1011:9: 1011:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1011:15: 1011:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:13: 1012:25 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move (((_1 as Right).0: (T, R)).0: T),
            StorageLive(_9),
            _9 = move (((_1 as Right).0: (T, R)).1: R),
            StorageLive(_10),
            _10 = move _8,
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _9,
            _11 = Either::<L, R>::Right(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:41: 1013:42 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb10, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move (((_1 as Left).0: (T, L)).0: T),
            StorageLive(_4),
            _4 = move (((_1 as Left).0: (T, L)).1: L),
            StorageLive(_5),
            _5 = move _3,
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _4,
            _6 = Either::<L, R>::Left(move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:39: 1012:40 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb5, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _0 = (move _5, move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb6, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb7, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb8, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = (move _10, move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb11, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb13, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb14, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1015:5: 1015:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1015:6: 1015:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1013:42: 1013:43 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1012:40: 1012:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1015:5: 1015:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1010:5: 1015:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#0, Either<L/#1, R/#2>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1010:34: 1010:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Either<(T/#0, L/#1), (T/#0, R/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1010:25: 1010:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:13: 1012:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1011:15: 1011:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1012:13: 1012:25 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:19: 1012:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1011:15: 1011:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1012:13: 1012:25 (#0),
                    },
                ),
            ),
        ),
        ty: L/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:22: 1012:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1014:10 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:30: 1012:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1014:10 (#0),
                },
            ),
        ),
        ty: Either<L/#1, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:33: 1012:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: L/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1012:38: 1012:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1011:15: 1011:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1013:13: 1013:26 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1013:20: 1013:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1011:15: 1011:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1013:13: 1013:26 (#0),
                    },
                ),
            ),
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1013:23: 1013:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1014:10 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1013:31: 1013:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:1011:9: 1014:10 (#0),
                },
            ),
        ),
        ty: Either<L/#1, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1013:34: 1013:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1013:40: 1013:41 (#0),
            scope: scope[0],
        },
    },
]