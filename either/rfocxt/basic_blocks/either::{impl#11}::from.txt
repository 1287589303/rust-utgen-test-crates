[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1134:9: 1134:18 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1134:15: 1134:18 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1135:13: 1135:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_1 as Right).0: R),
            StorageLive(_6),
            _6 = move _5,
            _0 = core::result::Result::<R, L>::Ok(move _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1136:29: 1136:30 (#0),
                    scope: scope[2],
                },
                kind: drop(_6) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move ((_1 as Left).0: L),
            StorageLive(_4),
            _4 = move _3,
            _0 = core::result::Result::<R, L>::Err(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1135:29: 1135:30 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1135:29: 1135:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1135:29: 1135:30 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1136:29: 1136:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1136:29: 1136:30 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1138:5: 1138:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1138:6: 1138:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1136:29: 1136:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1135:29: 1135:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1138:5: 1138:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1133:5: 1138:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<R/#1, L/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1133:35: 1133:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1133:18: 1133:30 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1133:13: 1133:16 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1133:13: 1133:16 (#0),
                    },
                ),
            ),
        ),
        ty: Either<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1133:13: 1133:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1135:13: 1135:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1134:15: 1134:18 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1135:13: 1135:20 (#0),
                    },
                ),
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1135:18: 1135:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1135:28: 1135:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1134:15: 1134:18 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1136:13: 1136:21 (#0),
                    },
                ),
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1136:19: 1136:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1136:28: 1136:29 (#0),
            scope: scope[0],
        },
    },
]