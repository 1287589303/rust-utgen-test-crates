[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((*_1).0: Either<L, R>),
            PlaceMention(_3),
            _4 = discriminant((*_3)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:6:9: 6:9 (#50),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:296:22: 296:37 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:13: 7:24 (#50),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &mut (((*_3) as Right).0: R),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut (*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:29: 8:45 (#50),
                    scope: scope[2],
                },
                kind: _12 = <&mut R as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}>(move _13, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &mut (((*_3) as Left).0: L),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:28: 7:43 (#50),
                    scope: scope[1],
                },
                kind: _7 = <&mut L as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}>(move _8, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &mut _7,
            StorageDead(_8),
            StorageLive(_9),
            _9 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:28: 7:33 (#50),
                    scope: scope[1],
                },
                kind: _0 = <core::iter::Map<&mut L, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}> as core::iter::DoubleEndedIterator>::rfind::<P>(move _6, move _9) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_6),
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#50),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _11 = &mut _12,
            StorageDead(_13),
            StorageLive(_14),
            _14 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:29: 8:34 (#50),
                    scope: scope[2],
                },
                kind: _0 = <core::iter::Map<&mut R, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}> as core::iter::DoubleEndedIterator>::rfind::<P>(move _11, move _14) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_12),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#50),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:297:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:297:6: 297:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#50),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#50),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:297:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:292:5: 297:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Either<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:292:45: 292:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut iterator::IterEither<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:292:17: 292:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/iterator.rs:292:39: 292:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/iterator.rs:292:28: 292:37 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:292:28: 292:37 (#0),
                    },
                ),
            ),
        ),
        ty: P/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:292:28: 292:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: &'{erased} mut Either<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:296:22: 296:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:13: 7:24 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/iterator.rs:296:22: 296:37 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:7:13: 7:24 (#50),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:18: 7:23 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Map<&'{erased} mut L/#0, FnDef(DefId(0:375 ~ either[3098]::Either::Left::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:28: 7:43 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: core::iter::Map<&'{erased} mut L/#0, FnDef(DefId(0:375 ~ either[3098]::Either::Left::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:28: 7:43 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: &'{erased} mut L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:28: 7:33 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: P/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:296:48: 296:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/iterator.rs:296:22: 296:37 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:8:13: 8:25 (#50),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:19: 8:24 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: &'{erased} mut core::iter::Map<&'{erased} mut R/#1, FnDef(DefId(0:378 ~ either[3098]::Either::Right::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:29: 8:45 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: core::iter::Map<&'{erased} mut R/#1, FnDef(DefId(0:378 ~ either[3098]::Either::Right::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:29: 8:45 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:29: 8:34 (#50),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#50),
                },
            ),
        ),
        ty: P/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:296:48: 296:57 (#0),
            scope: scope[0],
        },
    },
]