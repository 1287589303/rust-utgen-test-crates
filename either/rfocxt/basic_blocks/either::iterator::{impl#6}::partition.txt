[
    BasicBlockData {
        statements: [
            PlaceMention((_1.0: Either<L, R>)),
            _3 = discriminant((_1.0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:6:9: 6:9 (#41),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (_1.0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:233:22: 233:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:13: 7:24 (#41),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move (((_1.0: Either<L, R>) as Right).0: R),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:29: 8:45 (#41),
                    scope: scope[2],
                },
                kind: _9 = <R as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}>(move _10, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (((_1.0: Either<L, R>) as Left).0: L),
            StorageLive(_5),
            StorageLive(_6),
            _6 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:28: 7:43 (#41),
                    scope: scope[1],
                },
                kind: _5 = <L as core::iter::Iterator>::map::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}>(move _6, Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left) -> [return: bb5, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:28: 7:33 (#41),
                    scope: scope[1],
                },
                kind: _0 = <core::iter::Map<L, fn(<L as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left}> as core::iter::Iterator>::partition::<B, F>(move _5, move _7) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#41),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#41),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageLive(_11),
            _11 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:29: 8:34 (#41),
                    scope: scope[2],
                },
                kind: _0 = <core::iter::Map<R, fn(<R as core::iter::Iterator>::Item) -> Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item> {Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right}> as core::iter::Iterator>::partition::<B, F>(move _9, move _11) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#41),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb10, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#41),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:234:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:234:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb13, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:234:6: 234:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#41),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#41),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:44: 8:45 (#41),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:8:33: 8:34 (#41),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#41),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#41),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:42: 7:43 (#41),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:7:32: 7:33 (#41),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:234:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb23, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:234:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:228:5: 234:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (B/#2, B/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:228:39: 228:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: iterator::IterEither<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:228:24: 228:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/iterator.rs:228:33: 228:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/iterator.rs:228:30: 228:31 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:228:30: 228:31 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:228:30: 228:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:13: 7:24 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: Either<L, R>),
                                ),
                                src/iterator.rs:233:22: 233:32 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:7:13: 7:24 (#41),
                    },
                ),
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:18: 7:23 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: core::iter::Map<L/#0, FnDef(DefId(0:375 ~ either[3098]::Either::Left::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:28: 7:43 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:7:28: 7:33 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:233:47: 233:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (_1.0: Either<L, R>),
                                ),
                                src/iterator.rs:233:22: 233:32 (#0),
                            ),
                        ),
                        pat_span: src/iterator.rs:8:13: 8:25 (#41),
                    },
                ),
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:19: 8:24 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: core::iter::Map<R/#1, FnDef(DefId(0:378 ~ either[3098]::Either::Right::{constructor#0}), [Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:29: 8:45 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:8:29: 8:34 (#41),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:6:9: 9:10 (#41),
                },
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:233:47: 233:48 (#0),
            scope: scope[0],
        },
    },
]