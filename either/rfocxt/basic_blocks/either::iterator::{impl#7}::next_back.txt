[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            PlaceMention(((*_1).0: Either<L, R>)),
            _3 = discriminant(((*_1).0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:9: 135:9 (#47),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), ((*_1).0: Either<L, R>)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:26: 278:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:13: 136:27 (#47),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &mut ((((*_1).0: Either<L, R>) as Right).0: R),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            _18 = &mut (*_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:72 (#0),
                    scope: scope[6],
                },
                kind: _17 = <R as core::iter::DoubleEndedIterator>::next_back(move _18) -> [return: bb15, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut ((((*_1).0: Either<L, R>) as Left).0: L),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (*_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:72 (#0),
                    scope: scope[1],
                },
                kind: _7 = <L as core::iter::DoubleEndedIterator>::next_back(move _8) -> [return: bb5, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#141),
                    scope: scope[1],
                },
                kind: _6 = <core::option::Option<<L as core::iter::Iterator>::Item> as core::ops::Try>::branch(move _7) -> [return: bb6, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            PlaceMention(_6),
            _9 = discriminant(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#141),
                    scope: scope[1],
                },
                kind: switchInt(move _9) -> [0: bb9, 1: bb8, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#141),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#142),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb10, imaginary: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = move ((_6 as Continue).0: <L as core::iter::Iterator>::Item),
            _5 = move _13,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb12, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = ((_6 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_12),
            _12 = _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#141),
                    scope: scope[3],
                },
                kind: _0 = <core::option::Option<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _12) -> [return: bb11, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#47),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb28, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _2 = Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Left(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#47),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb13, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#47),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb14, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#47),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#143),
                    scope: scope[6],
                },
                kind: _16 = <core::option::Option<<R as core::iter::Iterator>::Item> as core::ops::Try>::branch(move _17) -> [return: bb16, unwind: bb32],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            PlaceMention(_16),
            _19 = discriminant(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#143),
                    scope: scope[6],
                },
                kind: switchInt(move _19) -> [0: bb19, 1: bb18, otherwise: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#143),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#144),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb20, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_16 as Continue).0: <R as core::iter::Iterator>::Item),
            _15 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#0),
                    scope: scope[6],
                },
                kind: drop(_23) -> [return: bb22, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            _20 = ((_16 as Break).0: core::option::Option<core::convert::Infallible>),
            StorageLive(_22),
            _22 = _20,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:55: 278:73 (#143),
                    scope: scope[8],
                },
                kind: _0 = <core::option::Option<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>> as core::ops::FromResidual<core::option::Option<core::convert::Infallible>>>::from_residual(move _22) -> [return: bb21, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#47),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb27, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            _2 = Either::<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>::Right(move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#47),
                    scope: scope[6],
                },
                kind: drop(_15) -> [return: bb23, unwind: bb31],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#47),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#47),
                    scope: scope[0],
                },
                kind: goto -> bb25,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<Either<<L as core::iter::Iterator>::Item, <R as core::iter::Iterator>::Item>>::Some(move _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:74: 278:75 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb26, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:279:6: 279:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb29,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:279:6: 279:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb30,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:279:6: 279:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#47),
                    scope: scope[0],
                },
                kind: drop(_16) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#143),
                    scope: scope[6],
                },
                kind: drop(_17) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#47),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:278:72: 278:73 (#141),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/iterator.rs:277:5: 279:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<Either<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:277:32: 277:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut iterator::IterEither<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:277:18: 277:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Either<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) }), Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:135:9: 138:10 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:13: 136:27 (#47),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: Either<L, R>),
                                ),
                                src/iterator.rs:278:26: 278:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:136:13: 136:27 (#47),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:38: 278:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    L/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#141),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: &'{erased} mut L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#142),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/iterator.rs:278:55: 278:73 (#141),
                            ),
                        ),
                        pat_span: src/iterator.rs:278:72: 278:73 (#142),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#142),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#142),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#142),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _6,
                                ),
                                src/iterator.rs:278:55: 278:73 (#141),
                            ),
                        ),
                        pat_span: src/iterator.rs:278:55: 278:73 (#141),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    L/#0,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    ((*_1).0: Either<L, R>),
                                ),
                                src/iterator.rs:278:26: 278:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:137:13: 137:28 (#47),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:38: 278:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#1,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#143),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<Alias(Projection, AliasTy { args: [R/#1], def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: &'{erased} mut R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#144),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/iterator.rs:278:55: 278:73 (#143),
                            ),
                        ),
                        pat_span: src/iterator.rs:278:72: 278:73 (#144),
                    },
                ),
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#144),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#144),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/iterator.rs:278:9: 278:75 (#0),
                },
            ),
        ),
        ty: core::option::Option<core::convert::Infallible>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:72: 278:73 (#144),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _16,
                                ),
                                src/iterator.rs:278:55: 278:73 (#143),
                            ),
                        ),
                        pat_span: src/iterator.rs:278:55: 278:73 (#143),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    R/#1,
                ],
                def_id: DefId(1:8502 ~ core[a245]::iter::traits::iterator::Iterator::Item),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/iterator.rs:278:55: 278:73 (#0),
            scope: scope[6],
        },
    },
]