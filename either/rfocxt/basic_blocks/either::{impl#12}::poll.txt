[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1153:19: 1153:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = Either::<L, R>::as_pin_mut(move _4) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            _5 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:83:9: 83:9 (#85),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1153:19: 1153:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:84:13: 84:43 (#85),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_3 as Right).0: core::pin::Pin<&mut R>),
            StorageLive(_10),
            _10 = move _9,
            StorageLive(_11),
            _11 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1153:47: 1153:61 (#0),
                    scope: scope[2],
                },
                kind: _0 = <R as core::future::Future>::poll(move _10, move _11) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_3 as Left).0: core::pin::Pin<&mut L>),
            StorageLive(_7),
            _7 = move _6,
            StorageLive(_8),
            _8 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1153:47: 1153:61 (#0),
                    scope: scope[1],
                },
                kind: _0 = <L as core::future::Future>::poll(move _7, move _8) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:84:18: 84:19 (#85),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:85:18: 85:19 (#85),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1154:6: 1154:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1149:5: 1154:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::task::Poll<Alias(Projection, AliasTy { args: [L/#0], def_id: DefId(1:45484 ~ core[a245]::future::future::Future::Output) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1152:10: 1152:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1150:15: 1150:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1150:9: 1150:13 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1150:9: 1150:13 (#0),
                    },
                ),
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut Either<L/#0, R/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1150:9: 1150:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:1151:13: 1151:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:1151:9: 1151:11 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:1151:9: 1151:11 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::task::Context<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1151:9: 1151:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: Either<core::pin::Pin<&'{erased} mut L/#0>, core::pin::Pin<&'{erased} mut R/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:19: 1153:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut Either<L/#0, R/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:19: 1153:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:84:13: 84:43 (#85),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:1153:19: 1153:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:84:13: 84:43 (#85),
                    },
                ),
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut L/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:38: 1153:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut L/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:47: 1153:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: &'{erased} mut core::task::Context<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:58: 1153:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/lib.rs:1153:19: 1153:36 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:85:13: 85:44 (#85),
                    },
                ),
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:38: 1153:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: core::pin::Pin<&'{erased} mut R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:47: 1153:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:83:9: 86:10 (#85),
                },
            ),
        ),
        ty: &'{erased} mut core::task::Context<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1153:58: 1153:60 (#0),
            scope: scope[0],
        },
    },
]