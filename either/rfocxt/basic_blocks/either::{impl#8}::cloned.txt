[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:135:9: 135:9 (#81),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1085:21: 1085:25 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:13: 136:27 (#81),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = ((_1 as Right).0: &R),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1085:36: 1085:49 (#0),
                    scope: scope[2],
                },
                kind: _7 = <R as core::clone::Clone>::clone(move _8) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = ((_1 as Left).0: &L),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1085:36: 1085:49 (#0),
                    scope: scope[1],
                },
                kind: _4 = <L as core::clone::Clone>::clone(move _5) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            _0 = Either::<L, R>::Left(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#81),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:136:43: 136:44 (#81),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _0 = Either::<L, R>::Right(move _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#81),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb8, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:137:45: 137:46 (#81),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1086:6: 1086:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:1080:5: 1086:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Either<L/#2, R/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1080:28: 1080:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Either<&'{erased} L/#2, &'{erased} R/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1080:19: 1080:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:136:13: 136:27 (#81),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1085:21: 1085:25 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:136:13: 136:27 (#81),
                    },
                ),
            ),
        ),
        ty: &'{erased} L/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:27: 1085:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: L/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:36: 1085:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:135:9: 138:10 (#81),
                },
            ),
        ),
        ty: &'{erased} L/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:36: 1085:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:1085:21: 1085:25 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:137:13: 137:28 (#81),
                    },
                ),
            ),
        ),
        ty: &'{erased} R/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:27: 1085:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: R/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:36: 1085:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:135:9: 138:10 (#81),
                },
            ),
        ),
        ty: &'{erased} R/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:1085:36: 1085:41 (#0),
            scope: scope[0],
        },
    },
]