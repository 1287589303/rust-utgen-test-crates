[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _2 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:990:9: 990:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:990:15: 990:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:13: 991:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_1 as Right).0: core::result::Result<T, R>),
            StorageLive(_6),
            _6 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:992:25: 992:49 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::result::Result::<T, R>::map_err::<Either<L, R>, fn(R) -> Either<L, R> {Either::<L, R>::Right}>(move _6, Either::<L, R>::Right) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move ((_1 as Left).0: core::result::Result<T, L>),
            StorageLive(_4),
            _4 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:24: 991:47 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::result::Result::<T, L>::map_err::<Either<L, R>, fn(L) -> Either<L, R> {Either::<L, R>::Left}>(move _4, Either::<L, R>::Left) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:46: 991:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:46: 991:47 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:992:48: 992:49 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:992:48: 992:49 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:994:5: 994:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:994:6: 994:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:992:48: 992:49 (#0),
                    scope: scope[2],
                },
                kind: drop(_6) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:992:48: 992:49 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:46: 991:47 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:991:46: 991:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:994:5: 994:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:989:5: 994:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<T/#0, Either<L/#1, R/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:989:31: 989:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Either<core::result::Result<T/#0, L/#1>, core::result::Result<T/#0, R/#2>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:989:22: 989:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:991:13: 991:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:990:15: 990:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:991:13: 991:20 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<T/#0, L/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:991:18: 991:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:990:9: 993:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<T/#0, L/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:991:24: 991:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:990:15: 990:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:992:13: 992:21 (#0),
                    },
                ),
            ),
        ),
        ty: core::result::Result<T/#0, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:992:19: 992:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:990:9: 993:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<T/#0, R/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:992:25: 992:26 (#0),
            scope: scope[0],
        },
    },
]