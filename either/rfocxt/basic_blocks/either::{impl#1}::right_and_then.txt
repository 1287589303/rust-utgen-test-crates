[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:501:9: 501:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:501:15: 501:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:13: 502:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_1 as Right).0: R),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _6,
            _8 = (move _9,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:25: 503:29 (#0),
                    scope: scope[2],
                },
                kind: _0 = <F as core::ops::FnOnce<(R,)>>::call_once(move _7, move _8) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_1 as Left).0: L),
            StorageLive(_5),
            _5 = move _4,
            _0 = Either::<L, S>::Left(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:30: 502:31 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb5, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:30: 502:31 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb6, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:30: 502:31 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:6: 505:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:503:28: 503:29 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:502:30: 502:31 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:505:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/lib.rs:497:5: 505:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Either<L/#0, S/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:48: 497:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Either<L/#0, R/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:33: 497:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/lib.rs:497:42: 497:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/lib.rs:497:39: 497:40 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:497:39: 497:40 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:497:39: 497:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:502:13: 502:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:501:15: 501:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:502:13: 502:20 (#0),
                    },
                ),
            ),
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:502:18: 502:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: L/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:502:29: 502:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/lib.rs:501:15: 501:19 (#0),
                            ),
                        ),
                        pat_span: src/lib.rs:503:13: 503:21 (#0),
                    },
                ),
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:503:19: 503:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:501:9: 504:10 (#0),
                },
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:503:25: 503:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:501:9: 504:10 (#0),
                },
            ),
        ),
        ty: (R/#1,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:503:25: 503:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/lib.rs:501:9: 504:10 (#0),
                },
            ),
        ),
        ty: R/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/lib.rs:503:27: 503:28 (#0),
            scope: scope[0],
        },
    },
]