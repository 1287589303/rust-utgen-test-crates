[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:30:12: 30:21 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move _1,
            _0 = Either::<Self, Self>::Left(move _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:31:22: 31:23 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:30:9: 34:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move _1,
            _0 = Either::<Self, Self>::Right(move _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:33:23: 33:24 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:30:9: 34:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:35:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:35:6: 35:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:35:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:29:5: 35:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Either<Self/#0, Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:29:46: 29:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:29:20: 29:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/into_either.rs:29:37: 29:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/into_either.rs:29:26: 29:35 (#0),
                            ),
                        ),
                        pat_span: src/into_either.rs:29:26: 29:35 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:29:26: 29:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/into_either.rs:30:9: 34:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:30:12: 30:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:31:18: 31:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:33:19: 33:23 (#0),
            scope: scope[0],
        },
    },
]