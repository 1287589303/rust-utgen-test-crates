[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = move _2,
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_1,
            _6 = &(*_7),
            _5 = (move _6,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:59:25: 59:41 (#0),
                    scope: scope[0],
                },
                kind: _3 = <F as core::ops::FnOnce<(&Self,)>>::call_once(move _4, move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageLive(_8),
            _8 = move _1,
            StorageLive(_9),
            _9 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:60:9: 60:36 (#0),
                    scope: scope[1],
                },
                kind: _0 = <Self as into_either::IntoEither>::into_either(move _8, move _9) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:61:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:61:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:61:6: 61:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:60:35: 60:36 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:59:40: 59:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:61:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:61:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/into_either.rs:55:5: 61:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Either<Self/#0, Self/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:55:51: 55:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:55:28: 55:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/into_either.rs:55:45: 55:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/into_either.rs:55:34: 55:43 (#0),
                            ),
                        ),
                        pat_span: src/into_either.rs:55:34: 55:43 (#0),
                    },
                ),
            ),
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:55:34: 55:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/into_either.rs:59:25: 59:41 (#0),
                            ),
                        ),
                        pat_span: src/into_either.rs:59:13: 59:22 (#0),
                    },
                ),
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:59:13: 59:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:59:25: 59:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} Self/#0,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:59:25: 59:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:59:35: 59:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:59:35: 59:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/into_either.rs:60:9: 60:36 (#0),
                },
            ),
        ),
        ty: Self/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:60:9: 60:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/into_either.rs:60:9: 60:36 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/into_either.rs:60:26: 60:35 (#0),
            scope: scope[0],
        },
    },
]