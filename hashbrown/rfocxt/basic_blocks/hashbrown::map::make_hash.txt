[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:246:21: 246:48 (#0),
                    scope: scope[0],
                },
                kind: _3 = <S as core::hash::BuildHasher>::build_hasher(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            _7 = &mut (*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:247:5: 247:25 (#0),
                    scope: scope[1],
                },
                kind: _5 = <Q as core::hash::Hash>::hash::<<S as core::hash::BuildHasher>::Hasher>(move _6, move _7) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_8),
            StorageDead(_5),
            StorageLive(_9),
            _9 = &_3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:248:5: 248:19 (#0),
                    scope: scope[1],
                },
                kind: _0 = <<S as core::hash::BuildHasher>::Hasher as core::hash::Hasher>::finish(move _9) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:249:1: 249:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:249:2: 249:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:249:1: 249:2 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:240:1: 249:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:240:61: 240:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:240:45: 240:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:240:31: 240:43 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:240:31: 240:43 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:240:31: 240:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:240:54: 240:56 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:240:49: 240:52 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:240:49: 240:52 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:240:49: 240:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:246:21: 246:48 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:246:9: 246:18 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    S/#1,
                ],
                def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:246:9: 246:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:246:21: 246:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:247:5: 247:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Q/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:247:5: 247:8 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:247:14: 247:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:247:14: 247:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:248:5: 248:19 (#0),
                },
            ),
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [S/#1], def_id: DefId(1:10922 ~ core[a245]::hash::BuildHasher::Hasher) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:248:5: 248:10 (#0),
            scope: scope[0],
        },
    },
]