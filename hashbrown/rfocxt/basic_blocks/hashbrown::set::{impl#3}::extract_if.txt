[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _2,
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(((*_1).0: map::HashMap<T, (), S, A>).1: raw::RawTable<(T, ()), A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:411:32: 411:53 (#0),
                    scope: scope[0],
                },
                kind: _5 = raw::RawTable::<(T, ()), A>::iter(move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut (((*_1).0: map::HashMap<T, (), S, A>).1: raw::RawTable<(T, ()), A>),
            _7 = &mut (*_8),
            _4 = raw::RawExtractIf::<'_, (T, ()), A> { iter: move _5, table: move _7 },
            StorageDead(_7),
            StorageDead(_5),
            _0 = set::ExtractIf::<'_, T, F, A> { f: move _3, inner: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:414:9: 414:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:415:5: 415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:415:6: 415:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:414:9: 414:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:415:5: 415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:404:5: 415:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::ExtractIf<'{erased}, T/#0, F/#3, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:404:46: 404:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:404:26: 404:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:404:40: 404:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:404:37: 404:38 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:404:37: 404:38 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:404:37: 404:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:409:13: 409:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::RawExtractIf<'{erased}, (T/#0, ()), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:410:20: 413:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::RawIter<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:411:23: 411:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:411:32: 411:53 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(T/#0, ()), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:411:32: 411:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut raw::RawTable<(T/#0, ()), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:412:24: 412:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:408:9: 414:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<(T/#0, ()), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:412:24: 412:43 (#0),
            scope: scope[0],
        },
    },
]