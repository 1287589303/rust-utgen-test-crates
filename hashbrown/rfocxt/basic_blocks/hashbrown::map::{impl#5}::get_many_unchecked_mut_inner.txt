[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1747:22: 1747:49 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::HashMap::<K, V, S, A>::build_hashes_inner::<Q, N>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_6),
            _6 = &mut ((*_1).1: raw::RawTable<(K, V), A>),
            StorageLive(_7),
            _7 = _3,
            StorageLive(_8),
            StorageLive(_9),
            _9 = &_2,
            _8 = {closure@src/map.rs:1749:45: 1749:56} { ks: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1748:9: 1749:77 (#0),
                    scope: scope[1],
                },
                kind: _0 = raw::RawTable::<(K, V), A>::get_many_unchecked_mut::<N, {closure@src/map.rs:1749:45: 1749:56}>(move _6, move _7, move _8) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1750:6: 1750:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1740:5: 1750:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<&'{erased} mut (K/#0, V/#1)>; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1743:10: 1743:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1741:9: 1741:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1742:13: 1742:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1742:9: 1742:11 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1742:9: 1742:11 (#0),
                    },
                ),
            ),
        ),
        ty: [&'{erased} Q/#4; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1742:9: 1742:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1747:22: 1747:49 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1747:13: 1747:19 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1747:13: 1747:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1747:22: 1747:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} Q/#4; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1747:46: 1747:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1748:9: 1749:77 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<(K/#0, V/#1), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1748:9: 1748:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1748:9: 1749:77 (#0),
                },
            ),
        ),
        ty: [u64; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1749:37: 1749:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1748:9: 1749:77 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:659 ~ hashbrown[7d72]::map::{impl#5}::get_many_unchecked_mut_inner::{closure#0}),
            [
                K/#0,
                V/#1,
                S/#2,
                A/#3,
                Q/#4,
                N/#5,
                i16,
                Binder { value: extern "RustCall" fn((usize, &'^0 (K/#0, V/#1))) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} [&'{erased} Q/#4; N/#5],),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1749:45: 1749:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1748:9: 1749:77 (#0),
                },
            ),
        ),
        ty: &'{erased} [&'{erased} Q/#4; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1749:45: 1749:76 (#0),
            scope: scope[0],
        },
    },
]