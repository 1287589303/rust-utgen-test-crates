[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &mut ((*_1).0: raw::RawTableInner),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).1: A),
            _6 = &(*_7),
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_3,
            _12 = {closure@src/raw/mod.rs:959:18: 959:32} { hasher: move _13 },
            StorageDead(_13),
            _11 = &_12,
            _10 = &(*_11),
            _9 = move _10 as &dyn for<'a> core::ops::Fn(&'a mut raw::RawTableInner, usize) -> u64 (PointerCoercion(Unsize)),
            StorageDead(_10),
            StorageLive(_14),
            _14 = _4,
            StorageLive(_15),
            StorageLive(_16),
            _16 = const <T as raw::SizedTypeProperties>::NEEDS_DROP,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:962:20: 962:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _16) -> [0: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            StorageLive(_18),
            _18 = {closure@src/raw/mod.rs:963:26: 963:31},
            _17 = move _18 as unsafe fn(*mut u8) (PointerCoercion(ClosureFnPointer(Unsafe))),
            StorageDead(_18),
            _15 = core::option::Option::<unsafe fn(*mut u8)>::Some(move _17),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:962:17: 966:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = core::option::Option::<unsafe fn(*mut u8)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:962:17: 966:18 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb3,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawTableInner::reserve_rehash_inner::<A>(move _5, move _6, move _8, move _9, move _14, const raw::RawTable::<T, A>::TABLE_LAYOUT, move _15) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:969:5: 969:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:969:6: 969:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:969:5: 969:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:942:5: 969:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:947:10: 947:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:943:9: 943:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:944:21: 944:26 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:944:9: 944:19 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:944:9: 944:19 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:944:9: 944:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:945:17: 945:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:945:9: 945:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:945:9: 945:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:945:9: 945:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:946:22: 946:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:946:9: 946:20 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:946:9: 946:20 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:946:9: 946:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:956:13: 956:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:957:17: 957:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:957:17: 957:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:958:17: 958:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2717 ~ hashbrown[7d72]::raw::{impl#12}::reserve_rehash_inner::'_#3), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2717 ~ hashbrown[7d72]::raw::{impl#12}::reserve_rehash_inner::'_#3), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:959:17: 959:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:190 ~ hashbrown[7d72]::raw::{impl#8}::reserve_rehash::{closure#0}), [T/#0, A/#1, impl Fn(&T) -> u64/#2, i8, Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] }, (&'{erased} impl Fn(&T) -> u64/#2,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:959:17: 959:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:190 ~ hashbrown[7d72]::raw::{impl#8}::reserve_rehash::{closure#0}), [T/#0, A/#1, impl Fn(&T) -> u64/#2, i8, Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] }, (&'{erased} impl Fn(&T) -> u64/#2,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:959:17: 959:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:190 ~ hashbrown[7d72]::raw::{impl#8}::reserve_rehash::{closure#0}),
            [
                T/#0,
                A/#1,
                impl Fn(&T) -> u64/#2,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] },
                (&'{erased} impl Fn(&T) -> u64/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:959:18: 959:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:959:18: 959:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:960:17: 960:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:956:13: 967:14 (#0),
                },
            ),
        ),
        ty: core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:962:17: 966:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:116 ~ hashbrown[7d72]::raw::SizedTypeProperties::NEEDS_DROP),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:962:20: 962:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: Binder { value: unsafe fn(*mut u8), bound_vars: [] },
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:963:26: 963:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:963:21: 963:66 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:191 ~ hashbrown[7d72]::raw::{impl#8}::reserve_rehash::{closure#1}),
            [
                T/#0,
                A/#1,
                impl Fn(&T) -> u64/#2,
                i8,
                Binder { value: extern "RustCall" fn((*mut u8,)), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:963:26: 963:65 (#0),
            scope: scope[0],
        },
    },
]