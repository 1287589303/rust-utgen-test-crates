[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &((*_1).0: S),
            _5 = &(*_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
            _7 = &(*_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1878:20: 1878:61 (#0),
                    scope: scope[0],
                },
                kind: _4 = map::make_hash::<K, S>(move _5, move _7) -> [return: bb1, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_8),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut ((*_1).1: raw::RawTable<(K, V), A>),
            StorageLive(_11),
            _11 = _4,
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _2,
            StorageLive(_14),
            _14 = move _3,
            _12 = (move _13, move _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:32: 1881:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb2, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:32: 1881:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &((*_1).0: S),
            _16 = &(*_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:35: 1881:77 (#0),
                    scope: scope[1],
                },
                kind: _15 = map::make_hasher::<K, V, S>(move _16) -> [return: bb4, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1879:22: 1881:78 (#0),
                    scope: scope[1],
                },
                kind: _9 = raw::RawTable::<(K, V), A>::insert::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _10, move _11, move _12, move _15) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageDead(_17),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1882:39: 1882:54 (#0),
                    scope: scope[2],
                },
                kind: _21 = raw::Bucket::<(K, V)>::as_mut::<'_>(move _22) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            _20 = &mut (*_21),
            PlaceMention(_20),
            StorageLive(_18),
            _18 = &mut ((*_20).0: K),
            StorageLive(_19),
            _19 = &mut ((*_20).1: V),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_23),
            _23 = &(*_18),
            StorageLive(_24),
            _24 = &mut (*_19),
            _0 = (move _23, move _24),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_9),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1884:5: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1884:5: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1884:6: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:77: 1881:78 (#0),
                    scope: scope[1],
                },
                kind: drop(_15) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:32: 1881:33 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1881:77: 1881:78 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1884:5: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1884:5: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1877:5: 1884:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} K/#0, &'{erased} mut V/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1877:69: 1877:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1877:43: 1877:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1877:57: 1877:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1877:54: 1877:55 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1877:54: 1877:55 (#0),
                    },
                ),
            ),
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1877:54: 1877:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1877:63: 1877:64 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1877:60: 1877:61 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1877:60: 1877:61 (#0),
                    },
                ),
            ),
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1877:60: 1877:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1878:20: 1878:61 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1878:13: 1878:17 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1878:13: 1878:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1878:38: 1878:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1878:38: 1878:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1878:58: 1878:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1878:58: 1878:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1879:22: 1881:78 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1879:13: 1879:19 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1879:13: 1879:19 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#0, V/#1), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1879:22: 1880:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:21: 1881:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (K/#0, V/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:27: 1881:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:28: 1881:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:31: 1881:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#0,
                    V/#1,
                    S/#2,
                    '{erased},
                ],
                def_id: DefId(0:2778 ~ hashbrown[7d72]::map::make_hasher::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:35: 1881:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:58: 1881:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1881:58: 1881:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/map.rs:1882:30: 1882:56 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1882:13: 1882:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1882:14: 1882:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/map.rs:1882:30: 1882:56 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1882:13: 1882:27 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1882:21: 1882:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut (K/#0, V/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1882:39: 1882:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut (K/#0, V/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1882:39: 1882:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1882:39: 1882:54 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::Bucket<(K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1882:39: 1882:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1883:9: 1883:23 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1883:10: 1883:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1883:9: 1883:23 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1883:17: 1883:22 (#0),
            scope: scope[0],
        },
    },
]