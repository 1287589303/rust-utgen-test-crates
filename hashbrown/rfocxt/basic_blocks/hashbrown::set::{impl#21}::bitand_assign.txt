[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            StorageLive(_6),
            _6 = &(*_2),
            _5 = {closure@src/set.rs:1556:21: 1556:27} { rhs: move _6 },
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1556:9: 1556:47 (#0),
                    scope: scope[0],
                },
                kind: _3 = set::HashSet::<T, S, A>::retain::<{closure@src/set.rs:1556:21: 1556:27}>(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1557:6: 1557:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1555:5: 1557:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1555:56: 1555:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1555:22: 1555:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1555:38: 1555:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1555:33: 1555:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1555:33: 1555:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1555:33: 1555:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1556:9: 1556:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1556:9: 1556:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1783 ~ hashbrown[7d72]::set::{impl#21}::bitand_assign::{closure#0}),
            [
                '{erased},
                T/#1,
                S/#2,
                A/#3,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 T/#1,)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} set::HashSet<T/#1, S/#2, A/#3>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1556:21: 1556:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1556:21: 1556:46 (#0),
            scope: scope[0],
        },
    },
]