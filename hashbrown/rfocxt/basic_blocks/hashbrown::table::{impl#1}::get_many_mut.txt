[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &mut ((*_1).0: raw::RawTable<T, A>),
            StorageLive(_5),
            _5 = _2,
            StorageLive(_6),
            _6 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1046:9: 1046:42 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawTable::<T, A>::get_many_mut::<N, impl FnMut(usize, &T) -> bool>(move _4, move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1047:5: 1047:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1047:6: 1047:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1046:41: 1046:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1047:5: 1047:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1041:5: 1047:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<&'{erased} mut T/#0>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1045:10: 1045:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1042:9: 1042:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:1043:17: 1043:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:1043:9: 1043:15 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1043:9: 1043:15 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1043:9: 1043:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:1044:13: 1044:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:1044:9: 1044:11 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1044:9: 1044:11 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1044:9: 1044:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1046:9: 1046:42 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1046:9: 1046:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1046:9: 1046:42 (#0),
                },
            ),
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1046:31: 1046:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1046:9: 1046:42 (#0),
                },
            ),
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1046:39: 1046:41 (#0),
            scope: scope[0],
        },
    },
]