[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).1: raw::RawExtractIf<'_, (K, ()), A>),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: F),
            _4 = {closure@src/set.rs:1926:19: 1926:37} { self: move _5 },
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1925:9: 1926:50 (#0),
                    scope: scope[0],
                },
                kind: _2 = raw::RawExtractIf::<'_, (K, ()), A>::next::<{closure@src/set.rs:1926:19: 1926:37}>(move _3, move _4) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_6),
            _6 = {closure@src/set.rs:1927:18: 1927:27},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1925:9: 1927:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<(K, ())>::map::<K, {closure@src/set.rs:1927:18: 1927:27}>(move _2, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1928:6: 1928:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1927:29: 1927:30 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1924:5: 1928:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<K/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1924:27: 1924:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::ExtractIf<'{erased}, K/#1, F/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1924:13: 1924:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1925:9: 1927:30 (#0),
                },
            ),
        ),
        ty: core::option::Option<(K/#1, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1925:9: 1926:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1925:9: 1927:30 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawExtractIf<'{erased}, (K/#1, ()), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1925:9: 1925:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1925:9: 1927:30 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1933 ~ hashbrown[7d72]::set::{impl#41}::next::{closure#0}),
            [
                '{erased},
                K/#1,
                F/#2,
                A/#3,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut (K/#1, ()),)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut F/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1926:19: 1926:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1926:19: 1926:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1925:9: 1927:30 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1934 ~ hashbrown[7d72]::set::{impl#41}::next::{closure#1}),
            [
                '{erased},
                K/#1,
                F/#2,
                A/#3,
                i32,
                Binder { value: extern "RustCall" fn(((K/#1, ()),)) -> K/#1, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1927:18: 1927:29 (#0),
            scope: scope[0],
        },
    },
]