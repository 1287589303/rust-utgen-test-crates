[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1727:9: 1727:46 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::HashMap::<K, V, S, A>::get_many_unchecked_mut_inner::<Q, N>(move _4, move _5) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            _6 = {closure@src/map.rs:1728:18: 1728:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1727:9: 1728:51 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::array::<impl [core::option::Option<&mut (K, V)>; N]>::map::<{closure@src/map.rs:1728:18: 1728:23}, core::option::Option<(&K, &mut V)>>(move _3, move _6) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1729:6: 1729:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1720:5: 1729:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<(&'{erased} K/#0, &'{erased} mut V/#1)>; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1723:10: 1723:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1721:9: 1721:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1722:13: 1722:20 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1722:9: 1722:11 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1722:9: 1722:11 (#0),
                    },
                ),
            ),
        ),
        ty: [&'{erased} Q/#4; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1722:9: 1722:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1727:9: 1728:51 (#0),
                },
            ),
        ),
        ty: [core::option::Option<&'{erased} mut (K/#0, V/#1)>; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1727:9: 1727:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1727:9: 1728:51 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1727:9: 1727:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1727:9: 1728:51 (#0),
                },
            ),
        ),
        ty: [&'{erased} Q/#4; N/#5],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1727:43: 1727:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1727:9: 1728:51 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:650 ~ hashbrown[7d72]::map::{impl#5}::get_many_key_value_unchecked_mut::{closure#0}),
            [
                K/#0,
                V/#1,
                S/#2,
                A/#3,
                Q/#4,
                N/#5,
                i16,
                Binder { value: extern "RustCall" fn((core::option::Option<&'{erased} mut (K/#0, V/#1)>,)) -> core::option::Option<(&'{erased} K/#0, &'{erased} mut V/#1)>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1728:18: 1728:50 (#0),
            scope: scope[0],
        },
    },
]