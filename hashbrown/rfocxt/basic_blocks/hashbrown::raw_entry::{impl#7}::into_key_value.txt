[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(_1.0: raw::Bucket<(K, V)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1148:53: 1148:71 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::Bucket::<(K, V)>::as_mut::<'_>(move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_2),
            _2 = &mut ((*_4).0: K),
            StorageLive(_3),
            _3 = &mut ((*_4).1: V),
            StorageDead(_4),
            StorageLive(_6),
            _6 = &mut (*_2),
            StorageLive(_7),
            _7 = &mut (*_3),
            _0 = (move _6, move _7),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1151:6: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1146:5: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1146:36: 1146:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1146:27: 1146:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw_entry.rs:1148:53: 1148:71 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1148:17: 1148:50 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1148:23: 1148:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw_entry.rs:1148:53: 1148:71 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1148:17: 1148:50 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1148:36: 1148:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut (K/#1, V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1148:53: 1148:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1148:53: 1148:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1149:13: 1149:25 (#0),
                },
            ),
        ),
        ty: &'{erased} mut K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1149:14: 1149:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1149:13: 1149:25 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1149:19: 1149:24 (#0),
            scope: scope[0],
        },
    },
]