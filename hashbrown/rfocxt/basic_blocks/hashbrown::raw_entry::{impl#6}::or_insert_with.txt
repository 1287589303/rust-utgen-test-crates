[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:789:9: 789:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:789:15: 789:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:790:13: 790:41 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_1 as Vacant).0: raw_entry::RawVacantEntryMut<'_, K, V, S, A>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _2,
            StorageLive(_11),
            _11 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:792:30: 792:39 (#0),
                    scope: scope[2],
                },
                kind: _9 = <F as core::ops::FnOnce<()>>::call_once(move _10, move _11) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_1 as Occupied).0: raw_entry::RawOccupiedEntryMut<'_, K, V, S, A>),
            StorageLive(_5),
            _5 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:790:45: 790:67 (#0),
                    scope: scope[1],
                },
                kind: _0 = raw_entry::RawOccupiedEntryMut::<'_, K, V, S, A>::into_key_value(move _5) -> [return: bb5, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:790:66: 790:67 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_7),
            _7 = move (_9.0: K),
            StorageLive(_8),
            _8 = move (_9.1: V),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:792:39: 792:40 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb7, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_12),
            _12 = move _6,
            StorageLive(_13),
            _13 = move _7,
            StorageLive(_14),
            _14 = move _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:793:17: 793:35 (#0),
                    scope: scope[3],
                },
                kind: _0 = raw_entry::RawVacantEntryMut::<'_, K, V, S, A>::insert(move _12, move _13, move _14) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:794:13: 794:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:794:13: 794:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:794:13: 794:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:796:5: 796:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:796:6: 796:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:793:34: 793:35 (#0),
                    scope: scope[3],
                },
                kind: drop(_14) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:793:34: 793:35 (#0),
                    scope: scope[3],
                },
                kind: drop(_13) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:794:13: 794:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_8) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:794:13: 794:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_7) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:792:38: 792:39 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:796:5: 796:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:783:5: 796:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:783:51: 783:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:783:30: 783:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:783:45: 783:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:783:36: 783:43 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:783:36: 783:43 (#0),
                    },
                ),
            ),
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:783:36: 783:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:790:13: 790:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/raw_entry.rs:789:15: 789:19 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:790:13: 790:41 (#0),
                    },
                ),
            ),
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:790:35: 790:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:789:9: 795:10 (#0),
                },
            ),
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:790:45: 790:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/raw_entry.rs:789:15: 789:19 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:791:13: 791:39 (#0),
                    },
                ),
            ),
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:791:33: 791:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/raw_entry.rs:792:30: 792:39 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:792:21: 792:27 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:792:22: 792:23 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/raw_entry.rs:792:30: 792:39 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:792:21: 792:27 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:792:25: 792:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (K/#1, V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:792:30: 792:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:792:30: 792:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:792:30: 792:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:793:17: 793:35 (#0),
                },
            ),
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:793:17: 793:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:793:17: 793:35 (#0),
                },
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:793:30: 793:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:793:17: 793:35 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:793:33: 793:34 (#0),
            scope: scope[0],
        },
    },
]