[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1350:9: 1350:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1350:15: 1350:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1351:13: 1351:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_1 as Vacant).0: table::VacantEntry<'_, T, A>),
            StorageLive(_9),
            _9 = move _8,
            StorageLive(_10),
            _10 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1355:37: 1355:56 (#0),
                    scope: scope[2],
                },
                kind: _0 = table::VacantEntry::<'_, T, A>::insert(move _9, move _10) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_1 as Occupied).0: table::OccupiedEntry<'_, T, A>),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1352:18: 1352:33 (#0),
                    scope: scope[1],
                },
                kind: _6 = table::OccupiedEntry::<'_, T, A>::get_mut(move _7) -> [return: bb5, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1352:17: 1352:33 (#0),
                    scope: scope[1],
                },
                kind: drop((*_6)) -> [return: bb6, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_6) = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1352:40: 1352:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (*_6) = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1352:17: 1352:33 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_6),
            _0 = move _4,
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1354:13: 1354:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1355:55: 1355:56 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1357:5: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1357:6: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1355:55: 1355:56 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1352:40: 1352:41 (#0),
                    scope: scope[1],
                },
                kind: drop(_5) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1357:5: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1349:5: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1349:38: 1349:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: table::Entry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1349:19: 1349:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:1349:32: 1349:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:1349:25: 1349:30 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1349:25: 1349:30 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1349:25: 1349:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1351:13: 1351:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/table.rs:1350:15: 1350:19 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1351:13: 1351:39 (#0),
                    },
                ),
            ),
        ),
        ty: table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1351:29: 1351:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1352:36: 1352:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1352:18: 1352:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1352:18: 1352:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/table.rs:1350:15: 1350:19 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1355:13: 1355:33 (#0),
                    },
                ),
            ),
        ),
        ty: table::VacantEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1355:27: 1355:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1350:9: 1356:10 (#0),
                },
            ),
        ),
        ty: table::VacantEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1355:37: 1355:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1350:9: 1356:10 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1355:50: 1355:55 (#0),
            scope: scope[0],
        },
    },
]