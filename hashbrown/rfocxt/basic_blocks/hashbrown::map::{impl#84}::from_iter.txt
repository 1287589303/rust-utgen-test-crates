[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4426:20: 4426:36 (#0),
                    scope: scope[0],
                },
                kind: _2 = <T as core::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:47: 4428:63 (#0),
                    scope: scope[1],
                },
                kind: _6 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::size_hint(move _7) -> [return: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            _5 = (_6.0: usize),
            StorageLive(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:67: 4428:79 (#0),
                    scope: scope[1],
                },
                kind: _8 = <S as core::default::Default>::default() -> [return: bb3, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:81: 4428:93 (#0),
                    scope: scope[1],
                },
                kind: _9 = <A as core::default::Default>::default() -> [return: bb4, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:13: 4428:94 (#0),
                    scope: scope[1],
                },
                kind: _4 = map::HashMap::<K, V, S, A>::with_capacity_and_hasher_in(move _5, move _8, move _9) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_6),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _2,
            StorageLive(_12),
            StorageLive(_13),
            _13 = &mut _4,
            _12 = {closure@src/map.rs:4429:23: 4429:31} { map: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4429:9: 4431:11 (#0),
                    scope: scope[2],
                },
                kind: _10 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::for_each::<{closure@src/map.rs:4429:23: 4429:31}>(move _11, move _12) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            _0 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb9, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:6: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4431:10: 4431:11 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:93: 4428:94 (#0),
                    scope: scope[1],
                },
                kind: drop(_9) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4428:93: 4428:94 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4426:35: 4426:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4433:5: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4425:5: 4433:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4425:62: 4425:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:4425:56: 4425:57 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4425:50: 4425:54 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4425:50: 4425:54 (#0),
                    },
                ),
            ),
        ),
        ty: T/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4425:50: 4425:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4426:20: 4426:36 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4426:13: 4426:17 (#0),
                    },
                ),
            ),
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    T/#4,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4426:13: 4426:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4426:20: 4426:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4428:13: 4428:94 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4427:13: 4427:20 (#0),
                    },
                ),
            ),
        ),
        ty: map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4427:13: 4427:20 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4428:47: 4428:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4428:47: 4428:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Alias(Projection, AliasTy { args: [T/#4], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4428:47: 4428:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4428:67: 4428:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: A/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4428:81: 4428:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4429:9: 4431:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    T/#4,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4429:9: 4429:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1295 ~ hashbrown[7d72]::map::{impl#84}::from_iter::{closure#0}),
            [
                K/#0,
                V/#1,
                S/#2,
                A/#3,
                T/#4,
                i16,
                Binder { value: extern "RustCall" fn(((K/#0, V/#1),)), bound_vars: [] },
                (&'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4429:23: 4431:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4429:23: 4431:10 (#0),
            scope: scope[0],
        },
    },
]