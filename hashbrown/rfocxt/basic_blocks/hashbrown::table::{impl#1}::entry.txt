[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: raw::RawTable<T, A>),
            StorageLive(_7),
            _7 = _2,
            StorageLive(_8),
            _8 = move _3,
            StorageLive(_9),
            _9 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:365:15: 365:66 (#0),
                    scope: scope[0],
                },
                kind: _5 = raw::RawTable::<T, A>::find_or_find_insert_slot::<impl FnMut(&T) -> bool, impl Fn(&T) -> u64>(move _6, move _7, move _8, move _9) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            PlaceMention(_5),
            _10 = discriminant(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:365:9: 365:66 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _10) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:365:15: 365:66 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:366:13: 366:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_5 as Err).0: raw::InsertSlot),
            StorageLive(_17),
            StorageLive(_18),
            _18 = _2,
            StorageLive(_19),
            _19 = move _16,
            StorageLive(_20),
            _20 = &mut (*_1),
            _17 = table::VacantEntry::<'_, T, A> { hash: move _18, insert_slot: move _19, table: move _20 },
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_18),
            _0 = table::Entry::<'_, T, A>::Vacant(move _17),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:375:14: 375:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_5 as Ok).0: raw::Bucket<T>),
            StorageLive(_12),
            StorageLive(_13),
            _13 = _2,
            StorageLive(_14),
            _14 = move _11,
            StorageLive(_15),
            _15 = &mut (*_1),
            _12 = table::OccupiedEntry::<'_, T, A> { hash: move _13, bucket: move _14, table: move _15 },
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            _0 = table::Entry::<'_, T, A>::Occupied(move _12),
            StorageDead(_12),
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:370:14: 370:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:377:5: 377:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:377:5: 377:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:377:6: 377:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:365:65: 365:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:365:65: 365:66 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:377:5: 377:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:377:5: 377:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:359:5: 377:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: table::Entry<'{erased}, T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:364:10: 364:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:360:9: 360:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:361:15: 361:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:361:9: 361:13 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:361:9: 361:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:361:9: 361:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:362:13: 362:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:362:9: 362:11 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:362:9: 362:11 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:362:9: 362:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:363:17: 363:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:363:9: 363:15 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:363:9: 363:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:363:9: 363:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:365:9: 376:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<raw::Bucket<T/#0>, raw::InsertSlot>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:365:15: 365:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:365:9: 376:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:365:15: 365:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:365:9: 376:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:365:49: 365:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:365:9: 376:10 (#0),
                },
            ),
        ),
        ty: impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:365:55: 365:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:365:9: 376:10 (#0),
                },
            ),
        ),
        ty: impl Fn(&T) -> u64/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:365:59: 365:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:366:13: 366:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/table.rs:365:15: 365:66 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:366:13: 366:23 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:366:16: 366:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: table::OccupiedEntry<'{erased}, T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:366:43: 370:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:367:17: 367:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:368:17: 368:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:369:24: 369:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _5,
                                ),
                                src/table.rs:365:15: 365:66 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:371:13: 371:29 (#0),
                    },
                ),
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:371:17: 371:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: table::VacantEntry<'{erased}, T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:371:47: 375:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:372:17: 372:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:373:17: 373:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:374:24: 374:28 (#0),
            scope: scope[0],
        },
    },
]