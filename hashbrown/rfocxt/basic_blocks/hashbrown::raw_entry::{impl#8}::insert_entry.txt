[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*(_1.1: &S)),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1435:20: 1435:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = map::make_hash::<K, S>(move _5, move _6) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*(_1.0: &mut raw::RawTable<(K, V), A>)),
            StorageLive(_10),
            _10 = _4,
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _2,
            StorageLive(_13),
            _13 = move _3,
            _11 = (move _12, move _13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1438:24: 1438:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_13) -> [return: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1438:24: 1438:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb3, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &(*(_1.1: &S)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1439:13: 1439:54 (#0),
                    scope: scope[1],
                },
                kind: _14 = map::make_hasher::<K, V, S>(move _15) -> [return: bb4, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1436:20: 1440:10 (#0),
                    scope: scope[1],
                },
                kind: _8 = raw::RawTable::<(K, V), A>::insert::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _9, move _10, move _11, move _14) -> [return: bb5, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            FakeRead(ForLet(None), _8),
            StorageLive(_16),
            _16 = move _8,
            StorageLive(_17),
            _17 = &mut (*(_1.0: &mut raw::RawTable<(K, V), A>)),
            StorageLive(_18),
            _18 = &(*(_1.1: &S)),
            _0 = raw_entry::RawOccupiedEntryMut::<'_, K, V, S, A> { elem: move _16, table: move _17, hash_builder: move _18 },
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1446:5: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1446:5: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1446:6: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1440:9: 1440:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_14) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1438:24: 1438:25 (#0),
                    scope: scope[1],
                },
                kind: drop(_12) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1440:9: 1440:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1446:5: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1446:5: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1430:5: 1446:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1430:48: 1430:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1430:21: 1430:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:1430:32: 1430:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:1430:27: 1430:30 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1430:27: 1430:30 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1430:27: 1430:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:1430:42: 1430:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:1430:35: 1430:40 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1430:35: 1430:40 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1430:35: 1430:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:1435:20: 1435:62 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1435:13: 1435:17 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1435:13: 1435:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1435:38: 1435:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1435:57: 1435:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1435:57: 1435:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:1436:20: 1440:10 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1436:13: 1436:17 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1436:13: 1436:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1436:20: 1436:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1437:13: 1437:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (K/#1, V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1438:13: 1438:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1438:14: 1438:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1438:19: 1438:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#1,
                    V/#2,
                    S/#3,
                    '{erased},
                ],
                def_id: DefId(0:2778 ~ hashbrown[7d72]::map::make_hasher::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1439:13: 1439:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1439:36: 1439:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1442:13: 1442:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1443:20: 1443:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1444:27: 1444:44 (#0),
            scope: scope[0],
        },
    },
]