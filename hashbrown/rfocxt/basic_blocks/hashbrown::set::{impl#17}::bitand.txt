[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1424:9: 1424:31 (#0),
                    scope: scope[0],
                },
                kind: _4 = set::HashSet::<T, S, A>::intersection(move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1424:9: 1424:40 (#0),
                    scope: scope[0],
                },
                kind: _3 = <set::Intersection<'_, T, S, A> as core::iter::Iterator>::cloned::<'_, T>(move _4) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1424:9: 1424:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::iter::Cloned<set::Intersection<'_, T, S, A>> as core::iter::Iterator>::collect::<set::HashSet<T, S, A>>(move _3) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1425:6: 1425:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1423:5: 1425:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::HashSet<T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1423:48: 1423:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1423:15: 1423:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1423:26: 1423:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1423:21: 1423:24 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1423:21: 1423:24 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1423:21: 1423:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1424:9: 1424:50 (#0),
                },
            ),
        ),
        ty: core::iter::Cloned<set::Intersection<'{erased}, T/#2, S/#3, A/#4>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1424:9: 1424:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1424:9: 1424:50 (#0),
                },
            ),
        ),
        ty: set::Intersection<'{erased}, T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1424:9: 1424:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1424:9: 1424:50 (#0),
                },
            ),
        ),
        ty: &'{erased} set::HashSet<T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1424:9: 1424:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1424:9: 1424:50 (#0),
                },
            ),
        ),
        ty: &'{erased} set::HashSet<T/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1424:27: 1424:30 (#0),
            scope: scope[0],
        },
    },
]