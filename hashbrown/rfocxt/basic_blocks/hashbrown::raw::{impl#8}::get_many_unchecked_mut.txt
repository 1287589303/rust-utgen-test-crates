[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            _7 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1233:20: 1233:58 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<T, A>::get_many_mut_pointers::<N, impl FnMut(usize, &T) -> bool>(move _5, move _6, move _7) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
            _8 = _4,
            StorageLive(_9),
            _9 = {closure@src/raw/mod.rs:1234:18: 1234:23},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1234:9: 1234:56 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::array::<impl [core::option::Option<core::ptr::NonNull<T>>; N]>::map::<{closure@src/raw/mod.rs:1234:18: 1234:23}, core::option::Option<&mut T>>(move _8, move _9) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1235:5: 1235:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1235:6: 1235:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1233:57: 1233:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1235:5: 1235:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1228:5: 1235:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<&'{erased} mut T/#0>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1232:10: 1232:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1229:9: 1229:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1230:17: 1230:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1230:9: 1230:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1230:9: 1230:15 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1230:9: 1230:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1231:13: 1231:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1231:9: 1231:11 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1231:9: 1231:11 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1231:9: 1231:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1233:20: 1233:58 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1233:13: 1233:17 (#0),
                    },
                ),
            ),
        ),
        ty: [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1233:13: 1233:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1233:20: 1233:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1233:47: 1233:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1233:55: 1233:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1234:9: 1234:56 (#0),
                },
            ),
        ),
        ty: [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1234:9: 1234:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1234:9: 1234:56 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:211 ~ hashbrown[7d72]::raw::{impl#8}::get_many_unchecked_mut::{closure#0}),
            [
                T/#0,
                A/#1,
                N/#2,
                impl FnMut(usize, &T) -> bool/#3,
                i16,
                Binder { value: extern "RustCall" fn((core::option::Option<core::ptr::NonNull<T/#0>>,)) -> core::option::Option<&'{erased} mut T/#0>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1234:18: 1234:55 (#0),
            scope: scope[0],
        },
    },
]