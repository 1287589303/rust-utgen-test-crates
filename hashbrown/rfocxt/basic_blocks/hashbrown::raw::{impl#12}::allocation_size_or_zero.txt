[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3009:12: 3009:37 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTableInner::is_empty_singleton(move _4) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3009:12: 3009:37 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = const 0_usize,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3009:9: 3017:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3016:22: 3016:56 (#0),
                    scope: scope[0],
                },
                kind: _6 = raw::RawTableInner::allocation_info(move _7, move _8) -> [return: bb4, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _5 = &(_6.1: core::alloc::Layout),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3016:22: 3016:65 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::alloc::Layout::size(move _5) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3009:9: 3017:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3018:6: 3018:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3008:5: 3018:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3008:76: 3008:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3008:39: 3008:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:3008:60: 3008:71 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:3008:46: 3008:58 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3008:46: 3008:58 (#0),
                    },
                ),
            ),
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3008:46: 3008:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3009:9: 3017:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3009:12: 3009:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3009:9: 3017:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3009:12: 3009:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3016:22: 3016:65 (#0),
                },
            ),
        ),
        ty: &'{erased} core::alloc::Layout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3016:22: 3016:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3016:22: 3016:65 (#0),
                },
            ),
        ),
        ty: (core::ptr::NonNull<u8>, core::alloc::Layout),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3016:22: 3016:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3016:22: 3016:65 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3016:22: 3016:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:3016:22: 3016:65 (#0),
                },
            ),
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3016:43: 3016:55 (#0),
            scope: scope[0],
        },
    },
]