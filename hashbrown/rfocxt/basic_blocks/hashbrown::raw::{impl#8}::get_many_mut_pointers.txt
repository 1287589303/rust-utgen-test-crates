[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            _6 = &_2,
            StorageLive(_7),
            _7 = &mut _3,
            _4 = {closure@src/raw/mod.rs:1242:24: 1242:27} { self: move _5, hashes: move _6, eq: move _7 },
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1242:9: 1245:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::array::from_fn::<core::option::Option<core::ptr::NonNull<T>>, N, {closure@src/raw/mod.rs:1242:24: 1242:27}>(move _4) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1246:5: 1246:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1246:6: 1246:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1246:5: 1246:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1237:5: 1246:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1241:10: 1241:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1238:9: 1238:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1239:17: 1239:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1239:9: 1239:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1239:9: 1239:15 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1239:9: 1239:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1240:17: 1240:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1240:9: 1240:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1240:9: 1240:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1240:9: 1240:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1242:9: 1245:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:215 ~ hashbrown[7d72]::raw::{impl#8}::get_many_mut_pointers::{closure#0}),
            [
                T/#0,
                A/#1,
                N/#2,
                impl FnMut(usize, &T) -> bool/#3,
                i16,
                Binder { value: extern "RustCall" fn((usize,)) -> core::option::Option<core::ptr::NonNull<T/#0>>, bound_vars: [] },
                (&'{erased} raw::RawTable<T/#0, A/#1>, &'{erased} [u64; N/#2], &'{erased} mut impl FnMut(usize, &T) -> bool/#3),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1242:24: 1245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1242:9: 1245:11 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1242:24: 1245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1242:9: 1245:11 (#0),
                },
            ),
        ),
        ty: &'{erased} [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1242:24: 1245:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1242:24: 1245:10 (#0),
            scope: scope[0],
        },
    },
]