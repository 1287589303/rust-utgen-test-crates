[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &((*_1).0: raw::RawTable<T, A>),
            StorageLive(_5),
            _5 = _2,
            StorageLive(_6),
            _6 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:224:9: 224:31 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawTable::<T, A>::get::<impl FnMut(&T) -> bool>(move _4, move _5, move _6) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:225:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:225:6: 225:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:224:30: 224:31 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:225:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:223:5: 225:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:223:66: 223:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:223:17: 223:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:223:30: 223:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:223:24: 223:28 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:223:24: 223:28 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:223:24: 223:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:223:39: 223:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:223:35: 223:37 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:223:35: 223:37 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:223:35: 223:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:224:9: 224:31 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:224:9: 224:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:224:9: 224:31 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:224:22: 224:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:224:9: 224:31 (#0),
                },
            ),
        ),
        ty: impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:224:28: 224:30 (#0),
            scope: scope[0],
        },
    },
]