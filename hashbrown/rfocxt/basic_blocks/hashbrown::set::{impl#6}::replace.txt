[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(((*_1).0: map::HashMap<T, (), S, A>).0: S),
            _4 = &(*_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1141:20: 1141:61 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::make_hash::<T, S>(move _4, move _6) -> [return: bb1, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut ((*_1).0: map::HashMap<T, (), S, A>),
            StorageLive(_10),
            _10 = _3,
            StorageLive(_11),
            StorageLive(_12),
            _12 = &_2,
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1142:15: 1142:62 (#0),
                    scope: scope[1],
                },
                kind: _8 = map::HashMap::<T, (), S, A>::find_or_find_insert_slot::<T>(move _9, move _10, move _11) -> [return: bb2, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            PlaceMention(_8),
            _13 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1142:9: 1142:62 (#0),
                    scope: scope[1],
                },
                kind: switchInt(move _13) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1142:15: 1142:62 (#0),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:13: 1143:23 (#0),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_8 as Err).0: raw::InsertSlot),
            StorageLive(_23),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut (((*_1).0: map::HashMap<T, (), S, A>).1: raw::RawTable<(T, ()), A>),
            StorageLive(_26),
            _26 = _3,
            StorageLive(_27),
            _27 = move _22,
            StorageLive(_28),
            StorageLive(_29),
            _29 = move _2,
            StorageLive(_30),
            _30 = (),
            _28 = (move _29, move _30),
            StorageDead(_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1146:73: 1146:74 (#0),
                    scope: scope[3],
                },
                kind: drop(_29) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_8 as Ok).0: raw::Bucket<(T, ())>),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:59: 1143:74 (#0),
                    scope: scope[2],
                },
                kind: _19 = raw::Bucket::<(T, ())>::as_mut::<'_>(move _20) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            _18 = &mut ((*_19).0: T),
            _17 = &mut (*_18),
            _16 = &mut (*_17),
            StorageLive(_21),
            _21 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:32: 1143:86 (#0),
                    scope: scope[2],
                },
                kind: _15 = core::mem::replace::<T>(move _16, move _21) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_16),
            _0 = core::option::Option::<T>::Some(move _15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:86: 1143:87 (#0),
                    scope: scope[2],
                },
                kind: drop(_15) -> [return: bb9, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:86: 1143:87 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1146:21: 1146:75 (#0),
                    scope: scope[3],
                },
                kind: _24 = raw::RawTable::<(T, ()), A>::insert_in_slot(move _25, move _26, move _27, move _28) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            StorageDead(_24),
            _23 = const (),
            StorageDead(_23),
            _0 = core::option::Option::<T>::None,
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1149:13: 1149:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_12),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1151:5: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1151:6: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1146:74: 1146:75 (#0),
                    scope: scope[3],
                },
                kind: drop(_28) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1143:85: 1143:86 (#0),
                    scope: scope[2],
                },
                kind: drop(_21) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1151:5: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1140:5: 1151:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1140:44: 1140:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1140:20: 1140:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1140:38: 1140:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1140:31: 1140:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1140:31: 1140:36 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1140:31: 1140:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1141:20: 1141:61 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1141:13: 1141:17 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1141:13: 1141:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1141:30: 1141:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1141:30: 1141:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1141:54: 1141:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1141:54: 1141:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: core::result::Result<raw::Bucket<(T/#0, ())>, raw::InsertSlot>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1142:15: 1142:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::HashMap<T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1142:15: 1142:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1142:49: 1142:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1142:55: 1142:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1142:55: 1142:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:13: 1143:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/set.rs:1142:15: 1142:62 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1143:13: 1143:23 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:16: 1143:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:32: 1143:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:54: 1143:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:54: 1143:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1143:54: 1143:76 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:54: 1143:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1143:54: 1143:76 (#0),
                },
            ),
        ),
        ty: &'{erased} mut (T/#0, ()),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:59: 1143:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1143:54: 1143:76 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::Bucket<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:59: 1143:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1142:9: 1150:10 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1143:80: 1143:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/set.rs:1142:15: 1142:62 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1144:13: 1144:22 (#0),
                    },
                ),
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1144:17: 1144:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1145:17: 1147:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<(T/#0, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:21: 1146:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(T/#0, ()), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:21: 1146:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:51: 1146:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:57: 1146:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#0, ()),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:63: 1146:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:64: 1146:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1146:71: 1146:73 (#0),
            scope: scope[0],
        },
    },
]