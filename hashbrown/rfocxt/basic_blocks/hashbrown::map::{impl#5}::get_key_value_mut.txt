[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            _5 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1388:15: 1388:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::HashMap::<K, V, S, A>::get_inner_mut::<Q>(move _4, move _5) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1388:9: 1388:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1388:15: 1388:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1389:13: 1389:48 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<(&K, &mut V)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1390:21: 1390:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = &((*((_3 as Some).0: &mut (K, V))).0: K),
            StorageLive(_8),
            _8 = &mut ((*((_3 as Some).0: &mut (K, V))).1: V),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_7),
            StorageLive(_11),
            _11 = &mut (*_8),
            _9 = (move _10, move _11),
            StorageDead(_11),
            StorageDead(_10),
            _0 = core::option::Option::<(&K, &mut V)>::Some(move _9),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1389:69: 1389:70 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1392:6: 1392:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1383:5: 1392:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#0, &'{erased} mut V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1383:54: 1383:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1383:33: 1383:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1383:47: 1383:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1383:44: 1383:45 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1383:44: 1383:45 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1383:44: 1383:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1388:9: 1391:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} mut (K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1388:15: 1388:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1388:9: 1391:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1388:15: 1388:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1388:9: 1391:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Q/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1388:34: 1388:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:13: 1389:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/map.rs:1388:15: 1388:36 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1389:13: 1389:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:24: 1389:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Mut,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/map.rs:1388:15: 1388:36 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1389:13: 1389:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:33: 1389:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (&'{erased} K/#0, &'{erased} mut V/#1),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:57: 1389:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1388:9: 1391:10 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:58: 1389:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1388:9: 1391:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1389:63: 1389:68 (#0),
            scope: scope[0],
        },
    },
]