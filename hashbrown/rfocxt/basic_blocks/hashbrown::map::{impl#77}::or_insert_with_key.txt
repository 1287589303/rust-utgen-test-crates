[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            PlaceMention(_1),
            _5 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3588:9: 3588:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3588:15: 3588:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3589:13: 3589:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_1 as Vacant).0: map::VacantEntry<'_, K, V, S, A>),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _2,
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &_9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3591:37: 3591:48 (#0),
                    scope: scope[2],
                },
                kind: _14 = map::VacantEntry::<'_, K, V, S, A>::key(move _15) -> [return: bb6, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3589:39: 3589:55 (#0),
                    scope: scope[1],
                },
                kind: _7 = map::OccupiedEntry::<'_, K, V, S, A>::into_mut(move _8) -> [return: bb5, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_7),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3589:54: 3589:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _13 = &(*_14),
            StorageDead(_15),
            _12 = (move _13,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3591:29: 3591:49 (#0),
                    scope: scope[2],
                },
                kind: _10 = <F as core::ops::FnOnce<(&K,)>>::call_once(move _11, move _12) -> [return: bb7, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageDead(_14),
            StorageLive(_16),
            StorageLive(_17),
            _17 = move _9,
            StorageLive(_18),
            _18 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3592:17: 3592:36 (#0),
                    scope: scope[3],
                },
                kind: _16 = map::VacantEntry::<'_, K, V, S, A>::insert(move _17, move _18) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_16),
            StorageDead(_18),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3593:13: 3593:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3593:13: 3593:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb10, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3593:13: 3593:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            _0 = &mut (*_3),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3595:5: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb12, unwind: bb20],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3595:5: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb13, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3595:6: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3592:35: 3592:36 (#0),
                    scope: scope[3],
                },
                kind: drop(_18) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3592:35: 3592:36 (#0),
                    scope: scope[3],
                },
                kind: drop(_17) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3593:13: 3593:14 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3591:48: 3591:49 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3593:13: 3593:14 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3595:5: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb20, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3595:5: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb21, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3583:5: 3595:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3583:72: 3583:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::Entry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3583:51: 3583:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3583:66: 3583:67 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3583:57: 3583:64 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3583:57: 3583:64 (#0),
                    },
                ),
            ),
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3583:57: 3583:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3588:9: 3594:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3588:9: 3594:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3588:9: 3594:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3589:13: 3589:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:3588:15: 3588:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3589:13: 3589:35 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3589:29: 3589:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3588:9: 3594:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3589:39: 3589:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3588:9: 3594:10 (#0),
                },
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3589:39: 3589:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:3588:15: 3588:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3590:13: 3590:33 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3590:27: 3590:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3591:29: 3591:49 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3591:21: 3591:26 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:21: 3591:26 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:29: 3591:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} K/#1,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:29: 3591:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:37: 3591:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:37: 3591:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3591:37: 3591:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3592:17: 3592:36 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3592:17: 3592:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3592:17: 3592:36 (#0),
                },
            ),
        ),
        ty: map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3592:17: 3592:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3592:17: 3592:36 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3592:30: 3592:35 (#0),
            scope: scope[0],
        },
    },
]