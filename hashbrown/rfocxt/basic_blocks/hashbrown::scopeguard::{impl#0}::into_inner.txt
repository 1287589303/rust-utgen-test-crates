[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:33:21: 33:45 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::mem::ManuallyDrop::<scopeguard::ScopeGuard<T, F>>::new(move _3) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:35:36: 35:47 (#0),
                    scope: scope[1],
                },
                kind: _7 = <core::mem::ManuallyDrop<scopeguard::ScopeGuard<T, F>> as core::ops::Deref>::deref(move _8) -> [return: bb2, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            _6 = &((*_7).1: T),
            _5 = &raw const (*_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:35:25: 35:48 (#0),
                    scope: scope[1],
                },
                kind: _4 = core::ptr::read::<T>(move _5) -> [return: bb3, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:37:32: 37:44 (#0),
                    scope: scope[2],
                },
                kind: _12 = <core::mem::ManuallyDrop<scopeguard::ScopeGuard<T, F>> as core::ops::Deref>::deref(move _13) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            _11 = &((*_12).0: F),
            _10 = &raw const (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:37:21: 37:45 (#0),
                    scope: scope[2],
                },
                kind: _9 = core::ptr::read::<F>(move _10) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:37:45: 37:46 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_9),
            _0 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:39:9: 39:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:40:5: 40:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:40:6: 40:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:39:9: 39:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_4) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:33:44: 33:45 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:40:5: 40:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/scopeguard.rs:29:5: 40:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:29:39: 29:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/scopeguard.rs:29:30: 29:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/scopeguard.rs:29:23: 29:28 (#0),
                            ),
                        ),
                        pat_span: src/scopeguard.rs:29:23: 29:28 (#0),
                    },
                ),
            ),
        ),
        ty: scopeguard::ScopeGuard<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:29:23: 29:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/scopeguard.rs:33:21: 33:45 (#0),
                            ),
                        ),
                        pat_span: src/scopeguard.rs:33:13: 33:18 (#0),
                    },
                ),
            ),
        ),
        ty: core::mem::ManuallyDrop<scopeguard::ScopeGuard<T/#0, F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:33:13: 33:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: scopeguard::ScopeGuard<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:33:39: 33:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/scopeguard.rs:35:25: 35:48 (#0),
                            ),
                        ),
                        pat_span: src/scopeguard.rs:35:17: 35:22 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:35:17: 35:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:35:35: 35:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:35:35: 35:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:35:36: 35:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<scopeguard::ScopeGuard<T/#0, F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:35:36: 35:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:37:21: 37:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:37:31: 37:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} F/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:37:31: 37:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<T/#0, F/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:37:32: 37:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} core::mem::ManuallyDrop<scopeguard::ScopeGuard<T/#0, F/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/scopeguard.rs:37:32: 37:37 (#0),
            scope: scope[0],
        },
    },
]