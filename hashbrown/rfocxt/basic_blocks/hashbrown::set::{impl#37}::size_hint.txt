[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: map::Drain<'_, K, (), A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1891:9: 1891:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = <map::Drain<'_, K, (), A> as core::iter::Iterator>::size_hint(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1892:6: 1892:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1890:5: 1892:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1890:28: 1890:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::Drain<'{erased}, K/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1890:18: 1890:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1891:9: 1891:30 (#0),
                },
            ),
        ),
        ty: &'{erased} map::Drain<'{erased}, K/#1, (), A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1891:9: 1891:18 (#0),
            scope: scope[0],
        },
    },
]