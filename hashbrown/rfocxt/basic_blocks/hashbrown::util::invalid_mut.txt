[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:13:14: 13:40 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::intrinsics::transmute::<usize, *mut T>(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:14:2: 14:2 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/util.rs:12:1: 14:2 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:12:46: 12:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/util.rs:12:36: 12:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/util.rs:12:30: 12:34 (#0),
                            ),
                        ),
                        pat_span: src/util.rs:12:30: 12:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:12:30: 12:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/util.rs:13:14: 13:40 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/util.rs:13:35: 13:39 (#0),
            scope: scope[0],
        },
    },
]