[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*(_1.0: &mut map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            _7 = {closure@src/raw_entry.rs:603:41: 603:49} { is_match: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:603:15: 603:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<(K, V), A>::find::<{closure@src/raw_entry.rs:603:41: 603:49}>(move _5, move _6, move _7) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:603:9: 603:62 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:603:15: 603:62 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:604:13: 604:23 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut ((*(_1.0: &mut map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            _18 = &mut (*_19),
            StorageLive(_20),
            StorageLive(_21),
            _21 = &((*(_1.0: &mut map::HashMap<K, V, S, A>)).0: S),
            _20 = &(*_21),
            _17 = raw_entry::RawVacantEntryMut::<'_, K, V, S, A> { table: move _18, hash_builder: move _20 },
            StorageDead(_20),
            StorageDead(_18),
            _0 = raw_entry::RawEntryMut::<'_, K, V, S, A>::Vacant(move _17),
            StorageDead(_17),
            StorageDead(_21),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:612:14: 612:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_4 as Some).0: raw::Bucket<(K, V)>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _10,
            StorageLive(_13),
            StorageLive(_14),
            _14 = &mut ((*(_1.0: &mut map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            _13 = &mut (*_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &((*(_1.0: &mut map::HashMap<K, V, S, A>)).0: S),
            _15 = &(*_16),
            _11 = raw_entry::RawOccupiedEntryMut::<'_, K, V, S, A> { elem: move _12, table: move _13, hash_builder: move _15 },
            StorageDead(_15),
            StorageDead(_13),
            StorageDead(_12),
            _0 = raw_entry::RawEntryMut::<'_, K, V, S, A>::Occupied(move _11),
            StorageDead(_11),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:608:14: 608:15 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:614:5: 614:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:614:6: 614:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:614:5: 614:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:599:5: 614:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw_entry::RawEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:599:55: 599:82 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawEntryBuilderMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:599:18: 599:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:599:30: 599:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:599:24: 599:28 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:599:24: 599:28 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:599:24: 599:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:599:49: 599:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:599:35: 599:47 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:599:35: 599:47 (#0),
                    },
                ),
            ),
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:599:35: 599:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<raw::Bucket<(K/#1, V/#2)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:603:15: 603:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:603:15: 603:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:603:35: 603:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1455 ~ hashbrown[7d72]::raw_entry::{impl#4}::search::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                A/#4,
                F/#5,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 (K/#1, V/#2),)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut F/#5,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:603:41: 603:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:603:41: 603:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:604:13: 604:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw_entry.rs:603:15: 603:62 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:604:13: 604:23 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:604:18: 604:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:604:49: 608:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:605:17: 605:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:606:24: 606:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:606:24: 606:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:607:31: 607:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:607:31: 607:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:609:41: 612:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:610:24: 610:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:610:24: 610:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:611:31: 611:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:603:9: 613:10 (#0),
                },
            ),
        ),
        ty: &'{erased} S/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:611:31: 611:53 (#0),
            scope: scope[0],
        },
    },
]