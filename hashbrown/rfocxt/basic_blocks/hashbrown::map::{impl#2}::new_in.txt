[
    BasicBlockData {
        statements: [
            StorageLive(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:367:30: 367:59 (#0),
                    scope: scope[0],
                },
                kind: _2 = <foldhash::fast::RandomState as core::default::Default>::default() -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:367:9: 367:67 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::HashMap::<K, V, foldhash::fast::RandomState, A>::with_hasher_in(move _2, move _3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:368:5: 368:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:368:6: 368:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:367:66: 367:67 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:368:5: 368:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:366:5: 368:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::HashMap<K/#0, V/#1, foldhash::fast::RandomState, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:366:32: 366:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:366:26: 366:27 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:366:19: 366:24 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:366:19: 366:24 (#0),
                    },
                ),
            ),
        ),
        ty: A/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:366:19: 366:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:367:9: 367:67 (#0),
                },
            ),
        ),
        ty: foldhash::fast::RandomState,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:367:30: 367:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:367:9: 367:67 (#0),
                },
            ),
        ),
        ty: A/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:367:61: 367:66 (#0),
            scope: scope[0],
        },
    },
]