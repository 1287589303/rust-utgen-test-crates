[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &_2,
            _4 = &(*_5),
            StorageLive(_6),
            _6 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:645:20: 645:86 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTableInner::with_capacity::<A>(move _4, const raw::RawTable::<T, A>::TABLE_LAYOUT, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            _8 = core::marker::PhantomData::<T>,
            _0 = raw::RawTable::<T, A> { table: move _3, alloc: move _7, marker: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:648:9: 648:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:649:5: 649:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:649:6: 649:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:649:5: 649:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:643:5: 649:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:643:59: 643:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:643:39: 643:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:643:29: 643:37 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:643:29: 643:37 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:643:29: 643:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:643:53: 643:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:643:46: 643:51 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:643:46: 643:51 (#0),
                    },
                ),
            ),
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:643:46: 643:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:645:20: 645:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:644:9: 648:10 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:645:49: 645:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:644:9: 648:10 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:645:49: 645:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:644:9: 648:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:645:77: 645:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:646:13: 646:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:647:21: 647:32 (#0),
            scope: scope[0],
        },
    },
]