[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (_1.0: raw::RawIter<T>),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
            _6 = {closure@src/table.rs:2064:25: 2064:38} { f: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2063:9: 2064:74 (#0),
                    scope: scope[0],
                },
                kind: _0 = <raw::RawIter<T> as core::iter::Iterator>::fold::<B, {closure@src/table.rs:2064:25: 2064:38}>(move _4, move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2065:5: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2065:5: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2065:6: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2064:73: 2064:74 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2065:5: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2065:5: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2058:5: 2065:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2058:47: 2058:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: table::IterMut<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2058:19: 2058:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:2058:31: 2058:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:2058:25: 2058:29 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:2058:25: 2058:29 (#0),
                    },
                ),
            ),
        ),
        ty: B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2058:25: 2058:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:2058:41: 2058:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:2058:34: 2058:39 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:2058:34: 2058:39 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2058:34: 2058:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:2063:9: 2064:74 (#0),
                },
            ),
        ),
        ty: raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2063:9: 2063:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:2063:9: 2064:74 (#0),
                },
            ),
        ),
        ty: B/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2064:19: 2064:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:2063:9: 2064:74 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2346 ~ hashbrown[7d72]::table::{impl#25}::fold::{closure#0}),
            [
                '{erased},
                T/#1,
                B/#2,
                F/#3,
                i16,
                Binder { value: extern "RustCall" fn((B/#2, raw::Bucket<T/#1>)) -> B/#2, bound_vars: [] },
                (&'{erased} mut F/#3,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2064:25: 2064:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2064:25: 2064:73 (#0),
            scope: scope[0],
        },
    },
]