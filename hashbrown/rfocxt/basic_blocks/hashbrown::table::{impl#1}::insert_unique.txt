[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut ((*_1).0: raw::RawTable<T, A>),
            StorageLive(_7),
            _7 = _2,
            StorageLive(_8),
            _8 = move _3,
            StorageLive(_9),
            _9 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:410:22: 410:58 (#0),
                    scope: scope[0],
                },
                kind: _5 = raw::RawTable::<T, A>::insert::<impl Fn(&T) -> u64>(move _6, move _7, move _8, move _9) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageLive(_10),
            _10 = _2,
            StorageLive(_11),
            _11 = move _5,
            StorageLive(_12),
            _12 = &mut (*_1),
            _0 = table::OccupiedEntry::<'_, T, A> { hash: move _10, bucket: move _11, table: move _12 },
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:416:5: 416:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:416:5: 416:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb3, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:416:6: 416:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:410:57: 410:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:410:57: 410:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:416:5: 416:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:416:5: 416:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:404:5: 416:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: table::OccupiedEntry<'{erased}, T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:409:10: 409:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:405:9: 405:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:406:15: 406:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:406:9: 406:13 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:406:9: 406:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:406:9: 406:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:407:16: 407:17 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:407:9: 407:14 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:407:9: 407:14 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:407:9: 407:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:408:17: 408:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:408:9: 408:15 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:408:9: 408:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:408:9: 408:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:410:22: 410:58 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:410:13: 410:19 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:410:13: 410:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:410:22: 410:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:410:38: 410:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:410:44: 410:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:410:51: 410:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:412:13: 412:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:413:13: 413:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:414:20: 414:24 (#0),
            scope: scope[0],
        },
    },
]