[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).1: raw::RawExtractIf<'_, T, A>),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: F),
            _3 = {closure@src/table.rs:2362:25: 2362:30} { self: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2362:9: 2362:45 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawExtractIf::<'_, T, A>::next::<{closure@src/table.rs:2362:25: 2362:30}>(move _2, move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2363:6: 2363:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:2361:5: 2363:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2361:27: 2361:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::ExtractIf<'{erased}, T/#1, F/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2361:13: 2361:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:2362:9: 2362:45 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawExtractIf<'{erased}, T/#1, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2362:9: 2362:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:2362:9: 2362:45 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:2469 ~ hashbrown[7d72]::table::{impl#47}::next::{closure#0}),
            [
                '{erased},
                T/#1,
                F/#2,
                A/#3,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut T/#1,)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut F/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2362:25: 2362:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:2362:25: 2362:44 (#0),
            scope: scope[0],
        },
    },
]