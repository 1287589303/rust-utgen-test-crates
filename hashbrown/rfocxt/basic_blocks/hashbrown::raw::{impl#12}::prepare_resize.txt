[
    BasicBlockData {
        statements: [
            StorageLive(_6),
            StorageLive(_7),
            _7 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#115),
                    scope: scope[0],
                },
                kind: switchInt(move _7) -> [0: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = ((*_1).3: usize),
            StorageLive(_11),
            _11 = _4,
            _9 = Le(move _10, move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2549:23: 2549:45 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = const (),
            StorageDead(_9),
            StorageDead(_8),
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#114),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#116),
                    scope: scope[0],
                },
                kind: _12 = core::panicking::panic(const "assertion failed: self.items <= capacity") -> bb16,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#114),
                    scope: scope[0],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_2),
            StorageLive(_17),
            _17 = _3,
            StorageLive(_18),
            _18 = _4,
            StorageLive(_19),
            _19 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:13: 2553:94 (#0),
                    scope: scope[0],
                },
                kind: _15 = raw::RawTableInner::fallible_with_capacity::<A>(move _16, move _17, move _18, move _19) -> [return: bb6, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:13: 2553:95 (#328),
                    scope: scope[0],
                },
                kind: _14 = <core::result::Result<raw::RawTableInner, TryReserveError> as core::ops::Try>::branch(move _15) -> [return: bb7, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            PlaceMention(_14),
            _20 = discriminant(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:13: 2553:95 (#328),
                    scope: scope[0],
                },
                kind: switchInt(move _20) -> [0: bb10, 1: bb9, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:13: 2553:95 (#328),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:94: 2553:95 (#329),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_24),
            _24 = move ((_14 as Continue).0: raw::RawTableInner),
            _13 = move _24,
            StorageDead(_24),
            FakeRead(ForLet(None), _13),
            StorageDead(_14),
            StorageLive(_25),
            StorageLive(_26),
            _26 = move _13,
            StorageLive(_27),
            _27 = {closure@src/raw/mod.rs:2561:29: 2561:41} { alloc: _2, table_layout: _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2561:12: 2569:11 (#0),
                    scope: scope[1],
                },
                kind: _25 = scopeguard::guard::<raw::RawTableInner, {closure@src/raw/mod.rs:2561:29: 2561:41}>(move _26, move _27) -> [return: bb13, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_21),
            _21 = move ((_14 as Break).0: core::result::Result<core::convert::Infallible, TryReserveError>),
            StorageLive(_23),
            _23 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2553:13: 2553:95 (#328),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<scopeguard::ScopeGuard<raw::RawTableInner, {closure@src/raw/mod.rs:2561:29: 2561:41}>, TryReserveError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, TryReserveError>>>::from_residual(move _23) -> [return: bb12, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2570:6: 2570:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            _0 = core::result::Result::<scopeguard::ScopeGuard<raw::RawTableInner, {closure@src/raw/mod.rs:2561:29: 2561:41}>, TryReserveError>::Ok(move _25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2569:11: 2569:12 (#0),
                    scope: scope[1],
                },
                kind: drop(_25) -> [return: bb14, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2570:6: 2570:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb15,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2570:6: 2570:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2539:5: 2570:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2545:10: 2545:98 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2540:9: 2540:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2541:16: 2541:21 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2541:9: 2541:14 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2541:9: 2541:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2541:9: 2541:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2542:23: 2542:34 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2542:9: 2542:21 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2542:9: 2542:21 (#0),
                    },
                ),
            ),
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2542:9: 2542:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2543:19: 2543:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2543:9: 2543:17 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2543:9: 2543:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2543:9: 2543:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2544:22: 2544:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2544:9: 2544:20 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2544:9: 2544:20 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2544:9: 2544:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#114),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#115),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2549:23: 2549:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2549:23: 2549:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2549:37: 2549:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#116),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#116),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2553:13: 2553:95 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2552:13: 2552:22 (#0),
                    },
                ),
            ),
        ),
        ty: raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2552:13: 2552:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, TryReserveError>, raw::RawTableInner>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:13: 2553:95 (#328),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<raw::RawTableInner, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:13: 2553:94 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:51: 2553:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:58: 2553:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:72: 2553:80 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:82: 2553:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:94: 2553:95 (#329),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/raw/mod.rs:2553:13: 2553:95 (#328),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2553:94: 2553:95 (#329),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:94: 2553:95 (#329),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:94: 2553:95 (#329),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:94: 2553:95 (#329),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _14,
                                ),
                                src/raw/mod.rs:2553:13: 2553:95 (#328),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2553:13: 2553:95 (#328),
                    },
                ),
            ),
        ),
        ty: raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2553:13: 2553:95 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: scopeguard::ScopeGuard<raw::RawTableInner, Closure(DefId(0:281 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{closure#0}), [A/#0, i16, Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (&'{erased} A/#0, raw::TableLayout)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2561:12: 2569:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2561:9: 2569:12 (#0),
                },
            ),
        ),
        ty: raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2561:18: 2561:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2561:9: 2569:12 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:281 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{closure#0}),
            [
                A/#0,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] },
                (&'{erased} A/#0, raw::TableLayout),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2561:29: 2569:10 (#0),
            scope: scope[0],
        },
    },
]