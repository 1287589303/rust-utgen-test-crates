[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*(_1.2: &mut table::HashTable<T, A>)).0: raw::RawTable<T, A>),
            StorageLive(_6),
            _6 = move (_1.1: raw::Bucket<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1620:36: 1620:70 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<T, A>::remove(move _5, move _6) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_2),
            _2 = move (_4.0: T),
            StorageLive(_3),
            _3 = move (_4.1: raw::InsertSlot),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1620:72: 1620:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_7),
            _7 = move _2,
            StorageLive(_8),
            StorageLive(_9),
            _9 = (_1.0: u64),
            StorageLive(_10),
            _10 = move _3,
            StorageLive(_11),
            _11 = &mut (*(_1.2: &mut table::HashTable<T, A>)),
            _8 = table::VacantEntry::<'_, T, A> { hash: move _9, insert_slot: move _10, table: move _11 },
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            _0 = (move _7, move _8),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1628:9: 1628:10 (#0),
                    scope: scope[1],
                },
                kind: drop(_7) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1629:5: 1629:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1629:6: 1629:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1629:5: 1629:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1619:5: 1629:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#1, table::VacantEntry<'{erased}, T/#1, A/#2>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1619:28: 1619:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1619:19: 1619:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/table.rs:1620:27: 1620:72 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1620:13: 1620:24 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1620:14: 1620:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/table.rs:1620:27: 1620:72 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1620:13: 1620:24 (#0),
                    },
                ),
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1620:19: 1620:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#1, raw::InsertSlot),
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1620:27: 1620:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1620:36: 1620:70 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1620:36: 1620:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1620:36: 1620:70 (#0),
                },
            ),
        ),
        ty: raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1620:58: 1620:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1621:9: 1628:10 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1622:13: 1622:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1621:9: 1628:10 (#0),
                },
            ),
        ),
        ty: table::VacantEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1623:13: 1627:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1624:23: 1624:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1625:30: 1625:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut table::HashTable<T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1626:24: 1626:34 (#0),
            scope: scope[0],
        },
    },
]