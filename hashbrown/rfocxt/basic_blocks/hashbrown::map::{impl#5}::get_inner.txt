[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).1: raw::RawTable<(K, V), A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1351:12: 1351:33 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTable::<(K, V), A>::is_empty(move _4) -> [return: bb1, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1351:12: 1351:33 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            _0 = core::option::Option::<&(K, V)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1351:9: 1356:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: S),
            _6 = &(*_7),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1354:24: 1354:64 (#0),
                    scope: scope[0],
                },
                kind: _5 = map::make_hash::<Q, S>(move _6, move _8) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            FakeRead(ForLet(None), _5),
            StorageDead(_7),
            StorageLive(_9),
            _9 = &((*_1).1: raw::RawTable<(K, V), A>),
            StorageLive(_10),
            _10 = _5,
            StorageLive(_11),
            StorageLive(_12),
            _12 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1355:34: 1355:51 (#0),
                    scope: scope[1],
                },
                kind: _11 = map::equivalent_key::<Q, K, V>(move _12) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1355:13: 1355:52 (#0),
                    scope: scope[1],
                },
                kind: _0 = raw::RawTable::<(K, V), A>::get::<impl for<'a> Fn(&'a (K, V)) -> bool + '_>(move _9, move _10, move _11) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1351:9: 1356:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1357:6: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1355:51: 1355:52 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1347:5: 1357:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} (K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1347:38: 1347:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1347:21: 1347:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1347:31: 1347:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1347:28: 1347:29 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1347:28: 1347:29 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} Q/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1347:28: 1347:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1351:9: 1356:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1351:12: 1351:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1351:9: 1356:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(K/#0, V/#1), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1351:12: 1351:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1354:24: 1354:64 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1354:17: 1354:21 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1354:17: 1354:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1354:42: 1354:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1354:42: 1354:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Q/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1354:62: 1354:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1355:13: 1355:52 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(K/#0, V/#1), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1355:13: 1355:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1355:13: 1355:52 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1355:28: 1355:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1355:13: 1355:52 (#0),
                },
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    Q/#4,
                    K/#0,
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:2782 ~ hashbrown[7d72]::map::equivalent_key::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1355:34: 1355:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1355:13: 1355:52 (#0),
                },
            ),
        ),
        ty: &'{erased} Q/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1355:49: 1355:50 (#0),
            scope: scope[0],
        },
    },
]