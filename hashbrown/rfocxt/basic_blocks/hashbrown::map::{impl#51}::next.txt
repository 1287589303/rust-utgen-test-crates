[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: raw::RawIter<(K, V)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3221:15: 3221:32 (#0),
                    scope: scope[0],
                },
                kind: _2 = <raw::RawIter<(K, V)> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            PlaceMention(_2),
            _4 = discriminant(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3221:9: 3221:32 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3221:15: 3221:32 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3222:13: 3222:20 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<(&K, &mut V)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3226:21: 3226:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_2 as Some).0: raw::Bucket<(K, V)>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3223:25: 3223:35 (#0),
                    scope: scope[1],
                },
                kind: _6 = raw::Bucket::<(K, V)>::as_mut::<'_>(move _7) -> [return: bb6, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_6).0: K),
            _9 = &(*_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut ((*_6).1: V),
            _11 = &mut (*_12),
            _8 = (move _9, move _11),
            StorageDead(_11),
            StorageDead(_9),
            _0 = core::option::Option::<(&K, &mut V)>::Some(move _8),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_12),
            StorageDead(_10),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3225:13: 3225:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3228:6: 3228:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3219:5: 3228:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#1, &'{erased} mut V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3219:27: 3219:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IterMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3219:13: 3219:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3221:9: 3227:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<raw::Bucket<(K/#1, V/#2)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3221:15: 3221:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3221:9: 3227:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawIter<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3221:15: 3221:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3222:13: 3222:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _2,
                                ),
                                src/map.rs:3221:15: 3221:32 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3222:13: 3222:20 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3222:18: 3222:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3223:25: 3223:35 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3223:21: 3223:22 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut (K/#1, V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3223:21: 3223:22 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3223:25: 3223:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (&'{erased} K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3224:22: 3224:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3224:17: 3224:39 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3224:23: 3224:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3224:17: 3224:39 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3224:23: 3224:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3224:17: 3224:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3224:29: 3224:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3224:17: 3224:39 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3224:29: 3224:37 (#0),
            scope: scope[0],
        },
    },
]