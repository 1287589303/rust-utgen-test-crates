[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            _7 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1214:24: 1214:62 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<T, A>::get_many_mut_pointers::<N, impl FnMut(usize, &T) -> bool>(move _5, move _6, move _7) -> [return: bb1, unwind: bb23],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_4,
            _12 = move _13 as &[core::option::Option<core::ptr::NonNull<T>>] (PointerCoercion(Unsize)),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:40 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::slice::<impl [core::option::Option<core::ptr::NonNull<T>>]>::iter(move _12) -> [return: bb2, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:52 (#0),
                    scope: scope[1],
                },
                kind: _10 = <core::slice::Iter<'_, core::option::Option<core::ptr::NonNull<T>>> as core::iter::Iterator>::enumerate(move _11) -> [return: bb3, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:52 (#245),
                    scope: scope[1],
                },
                kind: _9 = <core::iter::Enumerate<core::slice::Iter<'_, core::option::Option<core::ptr::NonNull<T>>>> as core::iter::IntoIterator>::into_iter(move _10) -> [return: bb4, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            StorageLive(_14),
            _14 = move _9,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:13: 1220:14 (#244),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:13: 1220:14 (#244),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb6, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut _14,
            _18 = &mut (*_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:52 (#245),
                    scope: scope[2],
                },
                kind: _17 = <core::iter::Enumerate<core::slice::Iter<'_, core::option::Option<core::ptr::NonNull<T>>>> as core::iter::Iterator>::next(move _18) -> [return: bb7, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            PlaceMention(_17),
            _20 = discriminant(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:52 (#245),
                    scope: scope[2],
                },
                kind: switchInt(move _20) -> [0: bb9, 1: bb10, otherwise: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:29: 1216:52 (#245),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:13: 1220:14 (#244),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb11, imaginary: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = (((_17 as Some).0: (usize, &core::option::Option<core::ptr::NonNull<T>>)).0: usize),
            StorageLive(_23),
            _23 = (((_17 as Some).0: (usize, &core::option::Option<core::ptr::NonNull<T>>)).1: &core::option::Option<core::ptr::NonNull<T>>),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1217:20: 1217:33 (#0),
                    scope: scope[3],
                },
                kind: _24 = core::option::Option::<core::ptr::NonNull<T>>::is_some(move _25) -> [return: bb12, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = const (),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            StorageDead(_14),
            StorageDead(_9),
            StorageDead(_8),
            StorageLive(_40),
            _40 = _4,
            StorageLive(_41),
            _41 = {closure@src/raw/mod.rs:1224:22: 1224:27},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1224:13: 1224:60 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::array::<impl [core::option::Option<core::ptr::NonNull<T>>; N]>::map::<{closure@src/raw/mod.rs:1224:22: 1224:27}, core::option::Option<&mut T>>(move _40, move _41) -> [return: bb21, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1217:20: 1217:33 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _24) -> [0: bb19, otherwise: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &_4,
            StorageLive(_30),
            StorageLive(_31),
            _31 = _22,
            _30 = core::ops::RangeTo::<usize> { end: move _31 },
            StorageDead(_31),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1217:41: 1217:46 (#0),
                    scope: scope[3],
                },
                kind: _28 = <[core::option::Option<core::ptr::NonNull<T>>; N] as core::ops::Index<core::ops::RangeTo<usize>>>::index(move _29, move _30) -> [return: bb14, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _27 = &(*_28),
            StorageDead(_30),
            StorageDead(_29),
            StorageLive(_32),
            _32 = &(*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1217:37: 1217:60 (#0),
                    scope: scope[3],
                },
                kind: _26 = core::slice::<impl [core::option::Option<core::ptr::NonNull<T>>]>::contains(move _27, move _32) -> [return: bb15, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1217:37: 1217:60 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _26) -> [0: bb18, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
            StorageLive(_35),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = [const "duplicate keys found"],
            _38 = &_39,
            _37 = &(*_38),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#77),
                    scope: scope[3],
                },
                kind: _36 = core::fmt::Arguments::<'_>::new_const::<1>(move _37) -> [return: bb17, unwind: bb24],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#76),
                    scope: scope[3],
                },
                kind: _35 = core::panicking::panic_fmt(move _36) -> bb24,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_28),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _16 = const (),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_23),
            StorageDead(_22),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_16),
            _15 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1216:13: 1220:14 (#244),
                    scope: scope[2],
                },
                kind: goto -> bb5,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_40),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1226:5: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb22, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1226:6: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1214:61: 1214:62 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb24, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1226:5: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb25, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1208:5: 1226:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [core::option::Option<&'{erased} mut T/#0>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1212:10: 1212:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1209:9: 1209:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1210:17: 1210:25 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1210:9: 1210:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1210:9: 1210:15 (#0),
                    },
                ),
            ),
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1210:9: 1210:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1211:13: 1211:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1211:9: 1211:11 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1211:9: 1211:11 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1211:9: 1211:11 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1214:24: 1214:62 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1214:17: 1214:21 (#0),
                    },
                ),
            ),
        ),
        ty: [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1214:17: 1214:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1214:24: 1214:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: [u64; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1214:51: 1214:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: impl FnMut(usize, &T) -> bool/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1214:59: 1214:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:13: 1220:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<core::ptr::NonNull<T/#0>>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/raw/mod.rs:1216:29: 1216:52 (#245),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1216:29: 1216:52 (#245),
                    },
                ),
            ),
        ),
        ty: core::iter::Enumerate<core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1208:5: 1226:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(usize, &'{erased} core::option::Option<core::ptr::NonNull<T/#0>>)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::iter::Enumerate<core::slice::Iter<'{erased}, core::option::Option<core::ptr::NonNull<T/#0>>>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:29: 1216:52 (#245),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:13: 1220:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:13: 1220:14 (#244),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/raw/mod.rs:1216:29: 1216:52 (#245),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1216:17: 1216:25 (#246),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:18: 1216:19 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _17,
                                ),
                                src/raw/mod.rs:1216:29: 1216:52 (#245),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1216:17: 1216:25 (#246),
                    },
                ),
            ),
        ),
        ty: &'{erased} core::option::Option<core::ptr::NonNull<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1216:21: 1216:24 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:20: 1217:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<core::ptr::NonNull<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:20: 1217:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:37: 1217:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<core::ptr::NonNull<T/#0>>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:37: 1217:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<core::ptr::NonNull<T/#0>>],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:41: 1217:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: &'{erased} [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:37: 1217:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: core::ops::RangeTo<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:42: 1217:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:44: 1217:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<core::ptr::NonNull<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:56: 1217:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:1217:17: 1219:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1217:61: 1219:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:105:21: 109:6 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:9: 108:73 (#76),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::fmt::Arguments<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic.rs:108:38: 108:72 (#77),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1218:28: 1218:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1218:28: 1218:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: [&'{erased} str; 1_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1218:28: 1218:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1224:13: 1224:60 (#0),
                },
            ),
        ),
        ty: [core::option::Option<core::ptr::NonNull<T/#0>>; N/#2],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1224:13: 1224:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1224:13: 1224:60 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:207 ~ hashbrown[7d72]::raw::{impl#8}::get_many_mut::{closure#0}),
            [
                T/#0,
                A/#1,
                N/#2,
                impl FnMut(usize, &T) -> bool/#3,
                i16,
                Binder { value: extern "RustCall" fn((core::option::Option<core::ptr::NonNull<T/#0>>,)) -> core::option::Option<&'{erased} mut T/#0>, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1224:22: 1224:59 (#0),
            scope: scope[0],
        },
    },
]