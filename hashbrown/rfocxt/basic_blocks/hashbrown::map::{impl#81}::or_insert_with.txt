[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            PlaceMention(_1),
            _5 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4200:9: 4200:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _5) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4200:15: 4200:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4201:13: 4201:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_9),
            _9 = move ((_1 as Vacant).0: map::VacantEntryRef<'_, '_, K, Q, V, S, A>),
            StorageLive(_10),
            StorageLive(_11),
            _11 = move _9,
            StorageLive(_12),
            StorageLive(_13),
            _13 = move _2,
            StorageLive(_14),
            _14 = (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4202:53: 4202:62 (#0),
                    scope: scope[2],
                },
                kind: _12 = <F as core::ops::FnOnce<()>>::call_once(move _13, move _14) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_6),
            _6 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4201:42: 4201:58 (#0),
                    scope: scope[1],
                },
                kind: _7 = map::OccupiedEntry::<'_, K, V, S, A>::into_mut(move _8) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_7),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4201:57: 4201:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4202:40: 4202:63 (#0),
                    scope: scope[2],
                },
                kind: _10 = map::VacantEntryRef::<'_, '_, K, Q, V, S, A>::insert(move _11, move _12) -> [return: bb7, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = &mut (*_10),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4202:62: 4202:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            _0 = &mut (*_3),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4204:5: 4204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4204:6: 4204:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4202:62: 4202:63 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4202:61: 4202:62 (#0),
                    scope: scope[2],
                },
                kind: drop(_13) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4204:5: 4204:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4195:5: 4204:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4195:66: 4195:75 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::EntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4195:45: 4195:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:4195:60: 4195:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4195:51: 4195:58 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4195:51: 4195:58 (#0),
                    },
                ),
            ),
        ),
        ty: F/#7,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4195:51: 4195:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4200:9: 4203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4200:9: 4203:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4201:13: 4201:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4200:15: 4200:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4201:13: 4201:38 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4201:32: 4201:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4201:42: 4201:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4201:42: 4201:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4200:15: 4200:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4202:13: 4202:36 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:30: 4202:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:40: 4202:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:40: 4202:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:53: 4202:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: F/#7,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:53: 4202:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4200:9: 4203:10 (#0),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4202:53: 4202:62 (#0),
            scope: scope[0],
        },
    },
]