[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (_1.0: map::Iter<'_, K, V>),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
            _6 = {closure@src/map.rs:3334:31: 3334:44} { f: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3334:9: 3334:55 (#0),
                    scope: scope[0],
                },
                kind: _0 = <map::Iter<'_, K, V> as core::iter::Iterator>::fold::<B, {closure@src/map.rs:3334:31: 3334:44}>(move _4, move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3335:5: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3335:5: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3335:6: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3334:54: 3334:55 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3335:5: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3335:5: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3329:5: 3335:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3329:47: 3329:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::Keys<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3329:19: 3329:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3329:31: 3329:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3329:25: 3329:29 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3329:25: 3329:29 (#0),
                    },
                ),
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3329:25: 3329:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3329:41: 3329:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3329:34: 3329:39 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3329:34: 3329:39 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3329:34: 3329:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3334:9: 3334:55 (#0),
                },
            ),
        ),
        ty: map::Iter<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3334:9: 3334:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3334:9: 3334:55 (#0),
                },
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3334:25: 3334:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3334:9: 3334:55 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1120 ~ hashbrown[7d72]::map::{impl#61}::fold::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                B/#3,
                F/#4,
                i16,
                Binder { value: extern "RustCall" fn((B/#3, (&'{erased} K/#1, &'{erased} V/#2))) -> B/#3, bound_vars: [] },
                (&'{erased} mut F/#4,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3334:31: 3334:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3334:31: 3334:54 (#0),
            scope: scope[0],
        },
    },
]