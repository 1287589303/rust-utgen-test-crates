[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = _1,
            StorageLive(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:320:50: 320:79 (#0),
                    scope: scope[0],
                },
                kind: _3 = <foldhash::fast::RandomState as core::default::Default>::default() -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:320:9: 320:80 (#0),
                    scope: scope[0],
                },
                kind: _0 = map::HashMap::<K, V>::with_capacity_and_hasher(move _2, move _3) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:321:6: 321:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:319:5: 321:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::HashMap<K/#0, V/#1, foldhash::fast::RandomState, allocator_api2::alloc::Global>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:319:46: 319:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:319:36: 319:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:319:26: 319:34 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:319:26: 319:34 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:319:26: 319:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:320:9: 320:80 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:320:40: 320:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:320:9: 320:80 (#0),
                },
            ),
        ),
        ty: foldhash::fast::RandomState,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:320:50: 320:79 (#0),
            scope: scope[0],
        },
    },
]