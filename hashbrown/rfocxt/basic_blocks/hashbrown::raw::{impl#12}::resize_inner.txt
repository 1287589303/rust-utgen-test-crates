[
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &(*_1),
            StorageLive(_11),
            _11 = &(*_2),
            StorageLive(_12),
            _12 = _6,
            StorageLive(_13),
            _13 = _3,
            StorageLive(_14),
            _14 = _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:29: 2751:86 (#0),
                    scope: scope[0],
                },
                kind: _9 = raw::RawTableInner::prepare_resize::<A>(move _10, move _11, move _12, move _13, move _14) -> [return: bb1, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:29: 2751:87 (#333),
                    scope: scope[0],
                },
                kind: _8 = <core::result::Result<scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_>, TryReserveError> as core::ops::Try>::branch(move _9) -> [return: bb2, unwind: bb36],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _15 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:29: 2751:87 (#333),
                    scope: scope[0],
                },
                kind: switchInt(move _15) -> [0: bb5, 1: bb4, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:29: 2751:87 (#333),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:86: 2751:87 (#334),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            _19 = move ((_8 as Continue).0: scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_>),
            _7 = move _19,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:86: 2751:87 (#0),
                    scope: scope[0],
                },
                kind: drop(_19) -> [return: bb8, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move ((_8 as Break).0: core::result::Result<core::convert::Infallible, TryReserveError>),
            StorageLive(_18),
            _18 = move _16,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:29: 2751:87 (#333),
                    scope: scope[3],
                },
                kind: _0 = <core::result::Result<(), TryReserveError> as core::ops::FromResidual<core::result::Result<core::convert::Infallible, TryReserveError>>>::from_residual(move _18) -> [return: bb7, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_18),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:87: 2751:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb32, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            FakeRead(ForLet(None), _7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:87: 2751:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:32: 2756:59 (#0),
                    scope: scope[1],
                },
                kind: _22 = raw::RawTableInner::full_buckets_indices(move _23) -> [return: bb10, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:32: 2756:59 (#336),
                    scope: scope[1],
                },
                kind: _21 = <raw::FullBucketsIndices as core::iter::IntoIterator>::into_iter(move _22) -> [return: bb11, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            StorageLive(_24),
            _24 = move _21,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:9: 2792:10 (#335),
                    scope: scope[6],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:9: 2792:10 (#335),
                    scope: scope[6],
                },
                kind: falseUnwind -> [real: bb13, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut _24,
            _28 = &mut (*_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:32: 2756:59 (#336),
                    scope: scope[6],
                },
                kind: _27 = <raw::FullBucketsIndices as core::iter::Iterator>::next(move _28) -> [return: bb14, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_28),
            PlaceMention(_27),
            _30 = discriminant(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:32: 2756:59 (#336),
                    scope: scope[6],
                },
                kind: switchInt(move _30) -> [0: bb16, 1: bb17, otherwise: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:32: 2756:59 (#336),
                    scope: scope[6],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:9: 2792:10 (#335),
                    scope: scope[6],
                },
                kind: falseEdge -> [real: bb18, imaginary: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_32),
            _32 = ((_27 as Some).0: usize),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_4),
            StorageLive(_35),
            StorageLive(_36),
            _36 = &mut (*_1),
            StorageLive(_37),
            _37 = _32,
            _35 = (move _36, move _37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2758:24: 2758:53 (#0),
                    scope: scope[7],
                },
                kind: _33 = <dyn for<'a> core::ops::Fn(&'a mut raw::RawTableInner, usize) -> u64 as core::ops::Fn<(&mut raw::RawTableInner, usize)>>::call(move _34, move _35) -> [return: bb19, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _20 = const (),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_24),
            StorageDead(_21),
            StorageDead(_20),
            StorageLive(_57),
            _57 = ((*_1).3: usize),
            StorageLive(_58),
            StorageLive(_59),
            _59 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2796:9: 2796:30 (#0),
                    scope: scope[1],
                },
                kind: _58 = <scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_> as core::ops::DerefMut>::deref_mut(move _59) -> [return: bb26, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_37),
            StorageDead(_36),
            StorageDead(_35),
            StorageDead(_34),
            FakeRead(ForLet(None), _33),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            StorageLive(_42),
            _42 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2771:34: 2771:69 (#0),
                    scope: scope[8],
                },
                kind: _41 = <scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_> as core::ops::DerefMut>::deref_mut(move _42) -> [return: bb20, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _40 = &mut (*_41),
            StorageDead(_42),
            StorageLive(_43),
            _43 = _33,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2771:34: 2771:69 (#0),
                    scope: scope[8],
                },
                kind: _39 = raw::RawTableInner::prepare_insert_slot(move _40, move _43) -> [return: bb21, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_43),
            StorageDead(_40),
            PlaceMention(_39),
            StorageLive(_38),
            _38 = (_39.0: usize),
            StorageDead(_41),
            StorageDead(_39),
            StorageLive(_44),
            StorageLive(_45),
            StorageLive(_46),
            StorageLive(_47),
            _47 = &(*_1),
            StorageLive(_48),
            _48 = _32,
            StorageLive(_49),
            _49 = (_6.0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2788:17: 2788:62 (#0),
                    scope: scope[9],
                },
                kind: _46 = raw::RawTableInner::bucket_ptr(move _47, move _48, move _49) -> [return: bb22, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _45 = move _46 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_49),
            StorageDead(_48),
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_50),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            _53 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2789:17: 2789:61 (#0),
                    scope: scope[9],
                },
                kind: _52 = <scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_> as core::ops::Deref>::deref(move _53) -> [return: bb23, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _51 = &(*_52),
            StorageDead(_53),
            StorageLive(_54),
            _54 = _38,
            StorageLive(_55),
            _55 = (_6.0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2789:17: 2789:61 (#0),
                    scope: scope[9],
                },
                kind: _50 = raw::RawTableInner::bucket_ptr(move _51, move _54, move _55) -> [return: bb24, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_55),
            StorageDead(_54),
            StorageDead(_51),
            StorageLive(_56),
            _56 = (_6.0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2787:13: 2791:14 (#0),
                    scope: scope[9],
                },
                kind: _44 = core::intrinsics::copy_nonoverlapping::<u8>(move _45, move _50, move _56) -> [return: bb25, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_50),
            StorageDead(_45),
            StorageDead(_52),
            StorageDead(_44),
            _26 = const (),
            StorageDead(_38),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_29),
            StorageDead(_27),
            StorageDead(_26),
            _25 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2756:9: 2792:10 (#335),
                    scope: scope[6],
                },
                kind: goto -> bb12,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_59),
            _60 = SubWithOverflow(((*_58).2: usize), _57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2796:9: 2796:44 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_60.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_58).2: usize), move _57) -> [success: bb27, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            ((*_58).2: usize) = move (_60.0: usize),
            StorageDead(_57),
            StorageDead(_58),
            StorageLive(_61),
            _61 = ((*_1).3: usize),
            StorageLive(_62),
            StorageLive(_63),
            _63 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2797:9: 2797:24 (#0),
                    scope: scope[1],
                },
                kind: _62 = <scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_> as core::ops::DerefMut>::deref_mut(move _63) -> [return: bb28, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_63),
            ((*_62).3: usize) = move _61,
            StorageDead(_61),
            StorageDead(_62),
            StorageLive(_64),
            StorageLive(_65),
            _65 = &mut (*_1),
            StorageLive(_66),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            _69 = &mut _7,
            _68 = &mut (*_69),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2805:25: 2805:39 (#0),
                    scope: scope[1],
                },
                kind: _67 = <scopeguard::ScopeGuard<raw::RawTableInner, impl for<'a> FnMut(&'a mut raw::RawTableInner) + '_> as core::ops::DerefMut>::deref_mut(move _68) -> [return: bb29, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _66 = &mut (*_67),
            StorageDead(_68),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2805:9: 2805:40 (#0),
                    scope: scope[1],
                },
                kind: _64 = core::mem::swap::<raw::RawTableInner>(move _65, move _66) -> [return: bb30, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_66),
            StorageDead(_65),
            StorageDead(_69),
            StorageDead(_67),
            StorageDead(_64),
            StorageLive(_70),
            _70 = (),
            _0 = core::result::Result::<(), TryReserveError>::Ok(move _70),
            StorageDead(_70),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2808:5: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb31, unwind: bb37],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2808:6: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2808:6: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb33,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2808:6: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2808:5: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:87: 2751:88 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2751:86: 2751:87 (#333),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb37, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2738:5: 2808:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2745:10: 2745:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2739:9: 2739:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2740:16: 2740:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2740:9: 2740:14 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2740:9: 2740:14 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2740:9: 2740:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2741:19: 2741:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2741:9: 2741:17 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2741:9: 2741:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2741:9: 2741:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2742:17: 2742:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2742:9: 2742:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2742:9: 2742:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2742:9: 2742:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2743:22: 2743:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2743:9: 2743:20 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2743:9: 2743:20 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2743:9: 2743:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2744:17: 2744:28 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2744:9: 2744:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2744:9: 2744:15 (#0),
                    },
                ),
            ),
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2744:9: 2744:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2751:29: 2751:87 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2751:13: 2751:26 (#0),
                    },
                ),
            ),
        ),
        ty: scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:13: 2751:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::ControlFlow<core::result::Result<core::convert::Infallible, TryReserveError>, scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:29: 2751:87 (#333),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:29: 2751:86 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:29: 2751:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} A/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:49: 2751:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::TableLayout,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:56: 2751:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:64: 2751:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:74: 2751:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:86: 2751:87 (#334),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/raw/mod.rs:2751:29: 2751:87 (#333),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2751:86: 2751:87 (#334),
                    },
                ),
            ),
        ),
        ty: core::result::Result<core::convert::Infallible, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:86: 2751:87 (#334),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:86: 2751:87 (#334),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<core::convert::Infallible, TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:86: 2751:87 (#334),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/raw/mod.rs:2751:29: 2751:87 (#333),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2751:29: 2751:87 (#333),
                    },
                ),
            ),
        ),
        ty: scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2751:29: 2751:87 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:9: 2792:10 (#335),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::FullBucketsIndices,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::FullBucketsIndices,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                src/raw/mod.rs:2756:32: 2756:59 (#336),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2756:32: 2756:59 (#336),
                    },
                ),
            ),
        ),
        ty: raw::FullBucketsIndices,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2738:5: 2808:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::FullBucketsIndices,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::FullBucketsIndices,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:32: 2756:59 (#336),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:9: 2792:10 (#335),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:9: 2792:10 (#335),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _27,
                                ),
                                src/raw/mod.rs:2756:32: 2756:59 (#336),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2756:13: 2756:28 (#337),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2756:13: 2756:28 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2758:24: 2758:53 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2758:17: 2758:21 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2758:17: 2758:21 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2758:24: 2758:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut raw::RawTableInner, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2758:24: 2758:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2758:31: 2758:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2758:37: 2758:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _39,
                                ),
                                src/raw/mod.rs:2771:34: 2771:69 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2771:17: 2771:31 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:18: 2771:27 (#0),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, control::tag::Tag),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:34: 2771:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:34: 2771:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:34: 2771:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:34: 2771:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2771:64: 2771:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2787:13: 2791:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2788:17: 2788:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2788:17: 2788:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2788:17: 2788:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2788:33: 2788:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2788:50: 2788:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:17: 2789:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:17: 2789:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:17: 2789:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:17: 2789:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:38: 2789:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2789:49: 2789:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2790:17: 2790:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2796:34: 2796:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2796:9: 2796:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2796:9: 2796:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2796:9: 2796:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2797:27: 2797:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2797:9: 2797:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2797:9: 2797:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:9: 2805:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:19: 2805:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:25: 2805:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:25: 2805:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:25: 2805:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<raw::RawTableInner, Alias(Opaque, AliasTy { args: [A/#0, '{erased}], def_id: DefId(0:2711 ~ hashbrown[7d72]::raw::{impl#12}::prepare_resize::{opaque#0}) })>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2805:25: 2805:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2807:12: 2807:14 (#0),
            scope: scope[0],
        },
    },
]