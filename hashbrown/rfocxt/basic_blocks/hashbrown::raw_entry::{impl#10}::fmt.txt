[
    BasicBlockData {
        statements: [
            PlaceMention((*_1)),
            _3 = discriminant((*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1457:9: 1457:20 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb3, 1: bb2, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), (*_1)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1457:15: 1457:20 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1458:13: 1458:39 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = &(((*_1) as Occupied).0: raw_entry::RawOccupiedEntryMut<'_, K, V, S, A>),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut (*_2),
            StorageLive(_20),
            StorageLive(_21),
            _21 = const "RawEntry",
            _20 = &(*_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1459:45: 1459:70 (#0),
                    scope: scope[2],
                },
                kind: _18 = core::fmt::Formatter::<'_>::debug_tuple(move _19, move _20) -> [return: bb8, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = &(((*_1) as Vacant).0: raw_entry::RawVacantEntryMut<'_, K, V, S, A>),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut (*_2),
            StorageLive(_10),
            StorageLive(_11),
            _11 = const "RawEntry",
            _10 = &(*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1458:43: 1458:68 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::fmt::Formatter::<'_>::debug_tuple(move _9, move _10) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut _8,
            StorageDead(_10),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_4),
            _12 = move _13 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1458:43: 1458:77 (#0),
                    scope: scope[1],
                },
                kind: _6 = core::fmt::DebugTuple::<'_, '_>::field(move _7, move _12) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut (*_6),
            StorageDead(_12),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1458:43: 1458:86 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugTuple::<'_, '_>::finish(move _5) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_11),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1458:85: 1458:86 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _17 = &mut _18,
            StorageDead(_20),
            StorageDead(_19),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &(*_14),
            _22 = move _23 as &dyn core::fmt::Debug (PointerCoercion(Unsize)),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1459:45: 1459:79 (#0),
                    scope: scope[2],
                },
                kind: _16 = core::fmt::DebugTuple::<'_, '_>::field(move _17, move _22) -> [return: bb9, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _15 = &mut (*_16),
            StorageDead(_22),
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1459:45: 1459:88 (#0),
                    scope: scope[2],
                },
                kind: _0 = core::fmt::DebugTuple::<'_, '_>::finish(move _15) -> [return: bb10, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_21),
            StorageDead(_18),
            StorageDead(_16),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1459:87: 1459:88 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb11,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1461:6: 1461:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:1456:5: 1461:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1456:50: 1456:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} raw_entry::RawEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1456:12: 1456:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:1456:22: 1456:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:1456:19: 1456:20 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1456:19: 1456:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1456:19: 1456:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:13: 1458:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                src/raw_entry.rs:1457:15: 1457:20 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1458:13: 1458:39 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:33: 1458:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:43: 1458:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:43: 1458:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:43: 1458:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:43: 1458:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:43: 1458:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:57: 1458:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:57: 1458:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:75: 1458:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1458:75: 1458:76 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    (*_1),
                                ),
                                src/raw_entry.rs:1457:15: 1457:20 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:1459:13: 1459:41 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:35: 1459:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:45: 1459:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:45: 1459:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:45: 1459:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugTuple<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:45: 1459:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:45: 1459:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:59: 1459:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} str,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:59: 1459:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::fmt::Debug), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:77: 1459:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:1457:9: 1460:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:1459:77: 1459:78 (#0),
            scope: scope[0],
        },
    },
]