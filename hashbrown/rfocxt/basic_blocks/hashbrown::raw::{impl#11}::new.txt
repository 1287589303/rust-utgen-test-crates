[
    BasicBlockData {
        statements: [
            StorageLive(_1),
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1407:40: 1407:61 (#0),
                    scope: scope[0],
                },
                kind: _7 = control::group::sse2::Group::static_empty() -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = &(*_7),
            _5 = move _6 as &[control::tag::Tag] (PointerCoercion(Unsize)),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1407:40: 1407:70 (#0),
                    scope: scope[0],
                },
                kind: _4 = core::slice::<impl [control::tag::Tag]>::as_ptr(move _5) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1407:40: 1407:81 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ptr::const_ptr::<impl *const control::tag::Tag>::cast_mut(move _4) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1407:40: 1407:88 (#0),
                    scope: scope[0],
                },
                kind: _2 = core::ptr::mut_ptr::<impl *mut control::tag::Tag>::cast::<u8>(move _3) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                    scope: scope[0],
                },
                kind: _1 = core::ptr::NonNull::<u8>::new_unchecked(move _2) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
            _0 = raw::RawTableInner { bucket_mask: const 0_usize, ctrl: move _1, growth_left: const 0_usize, items: const 0_usize },
            StorageDead(_1),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1413:6: 1413:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1403:5: 1413:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1403:23: 1403:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::ptr::NonNull<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1406:19: 1408:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: *mut control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:81 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: *const control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: &'{erased} [control::tag::Tag],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: &'{erased} [control::tag::Tag; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1407:17: 1407:89 (#0),
                },
            ),
        ),
        ty: &'{erased} [control::tag::Tag; 16_usize],
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1407:40: 1407:61 (#0),
            scope: scope[0],
        },
    },
]