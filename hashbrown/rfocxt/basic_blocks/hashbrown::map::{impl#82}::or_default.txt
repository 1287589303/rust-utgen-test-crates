[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            PlaceMention(_1),
            _4 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4326:9: 4326:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4326:15: 4326:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4327:13: 4327:38 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_1 as Vacant).0: map::VacantEntryRef<'_, '_, K, Q, V, S, A>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _8,
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4328:53: 4328:71 (#0),
                    scope: scope[2],
                },
                kind: _11 = <V as core::default::Default>::default() -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4327:42: 4327:58 (#0),
                    scope: scope[1],
                },
                kind: _6 = map::OccupiedEntry::<'_, K, V, S, A>::into_mut(move _7) -> [return: bb5, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_6),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4327:57: 4327:58 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4328:40: 4328:72 (#0),
                    scope: scope[2],
                },
                kind: _9 = map::VacantEntryRef::<'_, '_, K, Q, V, S, A>::insert(move _10, move _11) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_9),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4328:71: 4328:72 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            _0 = &mut (*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4330:6: 4330:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4328:71: 4328:72 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4321:5: 4330:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4321:32: 4321:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::EntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4321:23: 4321:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4326:9: 4329:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4326:9: 4329:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4327:13: 4327:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4326:15: 4326:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4327:13: 4327:38 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4327:32: 4327:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4327:42: 4327:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4327:42: 4327:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4326:15: 4326:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4328:13: 4328:36 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4328:30: 4328:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4328:40: 4328:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4328:40: 4328:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:4326:9: 4329:10 (#0),
                },
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4328:53: 4328:71 (#0),
            scope: scope[0],
        },
    },
]