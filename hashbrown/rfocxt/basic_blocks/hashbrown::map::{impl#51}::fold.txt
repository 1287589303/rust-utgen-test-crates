[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move (_1.0: raw::RawIter<(K, V)>),
            StorageLive(_5),
            _5 = move _2,
            StorageLive(_6),
            StorageLive(_7),
            _7 = &mut _3,
            _6 = {closure@src/map.rs:3239:31: 3239:39} { f: move _7 },
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3239:9: 3242:11 (#0),
                    scope: scope[0],
                },
                kind: _0 = <raw::RawIter<(K, V)> as core::iter::Iterator>::fold::<B, {closure@src/map.rs:3239:31: 3239:39}>(move _4, move _5, move _6) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3243:5: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3243:5: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3243:6: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3242:10: 3242:11 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3243:5: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3243:5: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3234:5: 3243:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3234:47: 3234:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::IterMut<'{erased}, K/#1, V/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3234:19: 3234:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3234:31: 3234:32 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3234:25: 3234:29 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3234:25: 3234:29 (#0),
                    },
                ),
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3234:25: 3234:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3234:41: 3234:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3234:34: 3234:39 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3234:34: 3234:39 (#0),
                    },
                ),
            ),
        ),
        ty: F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3234:34: 3234:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3239:9: 3242:11 (#0),
                },
            ),
        ),
        ty: raw::RawIter<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3239:9: 3239:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3239:9: 3242:11 (#0),
                },
            ),
        ),
        ty: B/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3239:25: 3239:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3239:9: 3242:11 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1065 ~ hashbrown[7d72]::map::{impl#51}::fold::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                B/#3,
                F/#4,
                i16,
                Binder { value: extern "RustCall" fn((B/#3, raw::Bucket<(K/#1, V/#2)>)) -> B/#3, bound_vars: [] },
                (&'{erased} mut F/#4,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3239:31: 3242:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3239:31: 3242:10 (#0),
            scope: scope[0],
        },
    },
]