[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1025:9: 1025:33 (#0),
                    scope: scope[0],
                },
                kind: _6 = set::HashSet::<T, S, A>::intersection(move _7, move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = &mut _6,
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1025:9: 1025:40 (#0),
                    scope: scope[0],
                },
                kind: _4 = <set::Intersection<'_, T, S, A> as core::iter::Iterator>::next(move _5) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &_4,
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1025:9: 1025:50 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<&T>::is_none(move _3) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_6),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1026:6: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1024:5: 1026:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1024:48: 1024:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1024:24: 1024:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1024:38: 1024:43 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1024:31: 1024:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1024:31: 1024:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1024:31: 1024:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: &'{erased} core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:9: 1025:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:9: 1025:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: &'{erased} mut set::Intersection<'{erased}, T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:9: 1025:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: set::Intersection<'{erased}, T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:9: 1025:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: &'{erased} set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:9: 1025:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1025:9: 1025:50 (#0),
                },
            ),
        ),
        ty: &'{erased} set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1025:27: 1025:32 (#0),
            scope: scope[0],
        },
    },
]