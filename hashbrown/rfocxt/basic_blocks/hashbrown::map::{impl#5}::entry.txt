[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: S),
            _4 = &(*_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1230:20: 1230:63 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::make_hash::<K, S>(move _4, move _6) -> [return: bb1, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_7),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).1: raw::RawTable<(K, V), A>),
            StorageLive(_10),
            _10 = _3,
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_2,
            _12 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:51: 1231:71 (#0),
                    scope: scope[2],
                },
                kind: _11 = map::equivalent_key::<K, K, V>(move _12) -> [return: bb2, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:29: 1231:72 (#0),
                    scope: scope[2],
                },
                kind: _8 = raw::RawTable::<(K, V), A>::find::<impl for<'a> Fn(&'a (K, V)) -> bool + '_>(move _9, move _10, move _11) -> [return: bb3, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            PlaceMention(_8),
            _14 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:16: 1231:26 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _14) -> [1: bb4, otherwise: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:16: 1231:26 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_15),
            _15 = move ((_8 as Some).0: raw::Bucket<(K, V)>),
            StorageLive(_16),
            StorageLive(_17),
            _17 = _3,
            StorageLive(_18),
            _18 = move _15,
            StorageLive(_19),
            _19 = &mut (*_1),
            _16 = map::OccupiedEntry::<'_, K, V, S, A> { hash: move _17, elem: move _18, table: move _19 },
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _0 = map::Entry::<'_, K, V, S, A>::Occupied(move _16),
            StorageDead(_16),
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:9: 1243:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            _21 = _3,
            StorageLive(_22),
            _22 = move _2,
            StorageLive(_23),
            _23 = &mut (*_1),
            _20 = map::VacantEntry::<'_, K, V, S, A> { hash: move _21, key: move _22, table: move _23 },
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1242:13: 1242:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_22) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            StorageDead(_21),
            _0 = map::Entry::<'_, K, V, S, A>::Vacant(move _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1242:14: 1242:15 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:9: 1243:10 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_13),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1244:5: 1244:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1244:6: 1244:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1242:14: 1242:15 (#0),
                    scope: scope[1],
                },
                kind: drop(_20) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1231:71: 1231:72 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1244:5: 1244:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:1229:5: 1244:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::Entry<'{erased}, K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1229:40: 1229:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1229:18: 1229:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:1229:34: 1229:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1229:29: 1229:32 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1229:29: 1229:32 (#0),
                    },
                ),
            ),
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1229:29: 1229:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:1230:20: 1230:63 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1230:13: 1230:17 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1230:13: 1230:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1230:38: 1230:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1230:38: 1230:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1230:58: 1230:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1230:58: 1230:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<raw::Bucket<(K/#0, V/#1)>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:29: 1231:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(K/#0, V/#1), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:29: 1231:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:45: 1231:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#0,
                    K/#0,
                    V/#1,
                    '{erased},
                ],
                def_id: DefId(0:2782 ~ hashbrown[7d72]::map::equivalent_key::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:51: 1231:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:66: 1231:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:1231:9: 1243:10 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:66: 1231:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:16: 1231:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/map.rs:1231:29: 1231:72 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:1231:16: 1231:26 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1231:21: 1231:25 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::OccupiedEntry<'{erased}, K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1232:29: 1236:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1233:17: 1233:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<(K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1234:17: 1234:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1235:24: 1235:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::VacantEntry<'{erased}, K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1238:27: 1242:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1239:17: 1239:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: K/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1240:17: 1240:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut map::HashMap<K/#0, V/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:1241:24: 1241:28 (#0),
            scope: scope[0],
        },
    },
]