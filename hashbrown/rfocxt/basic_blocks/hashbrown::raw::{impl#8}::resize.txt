[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = &mut ((*_1).0: raw::RawTableInner),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).1: A),
            _6 = &(*_7),
            StorageLive(_8),
            _8 = _2,
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_3,
            _12 = {closure@src/raw/mod.rs:1013:14: 1013:28} { hasher: move _13 },
            StorageDead(_13),
            _11 = &_12,
            _10 = &(*_11),
            _9 = move _10 as &dyn for<'a> core::ops::Fn(&'a mut raw::RawTableInner, usize) -> u64 (PointerCoercion(Unsize)),
            StorageDead(_10),
            StorageLive(_14),
            _14 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawTableInner::resize_inner::<A>(move _5, move _6, move _8, move _9, move _14, const raw::RawTable::<T, A>::TABLE_LAYOUT) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1017:5: 1017:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1017:6: 1017:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1017:5: 1017:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:998:5: 1017:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), TryReserveError>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1003:10: 1003:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:999:9: 999:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1000:19: 1000:24 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1000:9: 1000:17 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1000:9: 1000:17 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1000:9: 1000:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1001:17: 1001:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1001:9: 1001:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1001:9: 1001:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1001:9: 1001:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1002:22: 1002:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1002:9: 1002:20 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1002:9: 1002:20 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1002:9: 1002:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1010:9: 1010:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1011:13: 1011:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} A/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1011:13: 1011:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1012:13: 1012:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2722 ~ hashbrown[7d72]::raw::{impl#12}::resize_inner::'_#3), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1013:13: 1013:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:193 ~ hashbrown[7d72]::raw::{impl#8}::resize::{closure#0}), [T/#0, A/#1, impl Fn(&T) -> u64/#2, i8, Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] }, (&'{erased} impl Fn(&T) -> u64/#2,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1013:13: 1013:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:193 ~ hashbrown[7d72]::raw::{impl#8}::resize::{closure#0}), [T/#0, A/#1, impl Fn(&T) -> u64/#2, i8, Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] }, (&'{erased} impl Fn(&T) -> u64/#2,)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1013:13: 1013:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:193 ~ hashbrown[7d72]::raw::{impl#8}::resize::{closure#0}),
            [
                T/#0,
                A/#1,
                impl Fn(&T) -> u64/#2,
                i8,
                Binder { value: extern "RustCall" fn((&'^0 mut raw::RawTableInner, usize)) -> u64, bound_vars: [Region(BrAnon)] },
                (&'{erased} impl Fn(&T) -> u64/#2,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1013:14: 1013:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: &'{erased} impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1013:14: 1013:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1010:9: 1016:10 (#0),
                },
            ),
        ),
        ty: raw::Fallibility,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1014:13: 1014:24 (#0),
            scope: scope[0],
        },
    },
]