[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = core::option::Option::<K>::None,
            FakeRead(ForLet(None), _3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*(_1.2: &mut map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(_1.1: raw::Bucket<(K, V)>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3994:38: 3994:55 (#0),
                    scope: scope[1],
                },
                kind: _6 = <raw::Bucket<(K, V)> as core::clone::Clone>::clone(move _7) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &mut _3,
            _8 = {closure@src/map.rs:3994:57: 3994:71} { f: move _2, spare_key: move _9 },
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3992:13: 4001:19 (#0),
                    scope: scope[1],
                },
                kind: _4 = raw::RawTable::<(K, V), A>::replace_bucket_with::<{closure@src/map.rs:3994:57: 3994:71}>(move _5, move _6, move _8) -> [return: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _10 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4003:20: 4003:29 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _10) -> [1: bb3, otherwise: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4003:20: 4003:29 (#0),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_11),
            _11 = move ((_3 as Some).0: K),
            StorageLive(_12),
            StorageLive(_13),
            _13 = (_1.0: u64),
            StorageLive(_14),
            _14 = move _11,
            StorageLive(_15),
            _15 = &mut (*(_1.2: &mut map::HashMap<K, V, S, A>)),
            _12 = map::VacantEntry::<'_, K, V, S, A> { hash: move _13, key: move _14, table: move _15 },
            StorageDead(_15),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4008:17: 4008:18 (#0),
                    scope: scope[2],
                },
                kind: drop(_14) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            _0 = map::Entry::<'_, K, V, S, A>::Vacant(move _12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4008:18: 4008:19 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb6, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4009:13: 4009:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb8, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_16),
            _16 = move _1,
            _0 = map::Entry::<'_, K, V, S, A>::Occupied(move _16),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4003:13: 4011:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4003:13: 4011:14 (#0),
                    scope: scope[1],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4012:9: 4012:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4013:5: 4013:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4013:6: 4013:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4008:18: 4008:19 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4009:13: 4009:14 (#0),
                    scope: scope[1],
                },
                kind: drop(_11) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4001:18: 4001:19 (#0),
                    scope: scope[1],
                },
                kind: drop(_8) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4012:9: 4012:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4013:5: 4013:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3985:5: 4013:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::Entry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3985:49: 3985:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3985:34: 3985:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3985:43: 3985:44 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3985:40: 3985:41 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3985:40: 3985:41 (#0),
                    },
                ),
            ),
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3985:40: 3985:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3990:33: 3990:37 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3990:17: 3990:30 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<K/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3990:17: 3990:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3992:13: 4001:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3992:13: 3993:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3994:38: 3994:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3994:38: 3994:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1240 ~ hashbrown[7d72]::map::{impl#79}::replace_entry_with::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                A/#4,
                F/#5,
                i32,
                Binder { value: extern "RustCall" fn(((K/#1, V/#2),)) -> core::option::Option<(K/#1, V/#2)>, bound_vars: [] },
                (F/#5, &'{erased} mut core::option::Option<K/#1>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3994:57: 4001:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::option::Option<K/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3994:57: 4001:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4003:20: 4003:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/map.rs:4003:32: 4003:41 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4003:20: 4003:29 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4003:25: 4003:28 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4004:31: 4008:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4005:27: 4005:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4006:21: 4006:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut map::HashMap<K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4007:28: 4007:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4010:33: 4010:37 (#0),
            scope: scope[0],
        },
    },
]