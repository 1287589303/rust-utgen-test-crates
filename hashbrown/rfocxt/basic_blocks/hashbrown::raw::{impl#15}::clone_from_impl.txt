[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_2).0: raw::RawTableInner),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3263:9: 3265:21 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTableInner::ctrl(move _5, const 0_usize) -> [return: bb1, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &((*_1).0: raw::RawTableInner),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3266:37: 3266:55 (#0),
                    scope: scope[0],
                },
                kind: _6 = raw::RawTableInner::ctrl(move _7, const 0_usize) -> [return: bb2, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).0: raw::RawTableInner),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3266:57: 3266:84 (#0),
                    scope: scope[0],
                },
                kind: _8 = raw::RawTableInner::num_ctrl_bytes(move _9) -> [return: bb3, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3263:9: 3266:85 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ptr::mut_ptr::<impl *mut control::tag::Tag>::copy_to_nonoverlapping(move _4, move _6, move _8) -> [return: bb4, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &mut (*_1),
            _11 = (const 0_usize, move _12),
            StorageDead(_12),
            StorageLive(_13),
            _13 = {closure@src/raw/mod.rs:3271:48: 3271:64},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3271:25: 3279:11 (#0),
                    scope: scope[0],
                },
                kind: _10 = scopeguard::guard::<(usize, &mut raw::RawTable<T, A>), {closure@src/raw/mod.rs:3271:48: 3271:64}>(move _11, move _13) -> [return: bb5, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_11),
            FakeRead(ForLet(None), _10),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &(*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:21: 3281:34 (#0),
                    scope: scope[1],
                },
                kind: _16 = raw::RawTable::<T, A>::iter(move _17) -> [return: bb6, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:21: 3281:34 (#375),
                    scope: scope[1],
                },
                kind: _15 = <raw::RawIter<T> as core::iter::IntoIterator>::into_iter(move _16) -> [return: bb7, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            PlaceMention(_15),
            StorageLive(_18),
            _18 = move _15,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:9: 3288:10 (#374),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:9: 3288:10 (#374),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb9, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            StorageLive(_23),
            _23 = &mut _18,
            _22 = &mut (*_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:21: 3281:34 (#375),
                    scope: scope[2],
                },
                kind: _21 = <raw::RawIter<T> as core::iter::Iterator>::next(move _22) -> [return: bb10, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
            PlaceMention(_21),
            _24 = discriminant(_21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:21: 3281:34 (#375),
                    scope: scope[2],
                },
                kind: switchInt(move _24) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _21),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:21: 3281:34 (#375),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:9: 3288:10 (#374),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_26),
            _26 = move ((_21 as Some).0: raw::Bucket<T>),
            StorageLive(_27),
            StorageLive(_28),
            _28 = &(*_2),
            StorageLive(_29),
            StorageLive(_30),
            _30 = &_26,
            _29 = &(*_30),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3282:25: 3282:51 (#0),
                    scope: scope[3],
                },
                kind: _27 = raw::RawTable::<T, A>::bucket_index(move _28, move _29) -> [return: bb15, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = const (),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_18),
            StorageDead(_15),
            StorageDead(_14),
            StorageLive(_46),
            StorageLive(_47),
            _47 = move _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3291:9: 3291:27 (#0),
                    scope: scope[1],
                },
                kind: _46 = core::mem::forget::<scopeguard::ScopeGuard<(usize, &mut raw::RawTable<T, A>), {closure@src/raw/mod.rs:3271:48: 3271:64}>>(move _47) -> [return: bb23, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
            StorageDead(_28),
            FakeRead(ForLet(None), _27),
            StorageDead(_30),
            StorageLive(_31),
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &_10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3283:22: 3283:29 (#0),
                    scope: scope[4],
                },
                kind: _33 = <scopeguard::ScopeGuard<(usize, &mut raw::RawTable<T, A>), {closure@src/raw/mod.rs:3271:48: 3271:64}> as core::ops::Deref>::deref(move _34) -> [return: bb16, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            _32 = &(*((*_33).1: &mut raw::RawTable<T, A>)),
            StorageLive(_35),
            _35 = _27,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3283:22: 3283:43 (#0),
                    scope: scope[4],
                },
                kind: _31 = raw::RawTable::<T, A>::bucket(move _32, move _35) -> [return: bb17, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_32),
            FakeRead(ForLet(None), _31),
            StorageDead(_33),
            StorageLive(_36),
            StorageLive(_37),
            _37 = &_31,
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            StorageLive(_41),
            _41 = &_26,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3284:22: 3284:35 (#0),
                    scope: scope[5],
                },
                kind: _40 = raw::Bucket::<T>::as_ref::<'_>(move _41) -> [return: bb18, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _39 = &(*_40),
            StorageDead(_41),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3284:22: 3284:43 (#0),
                    scope: scope[5],
                },
                kind: _38 = <T as core::clone::Clone>::clone(move _39) -> [return: bb19, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_39),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3284:13: 3284:44 (#0),
                    scope: scope[5],
                },
                kind: _36 = raw::Bucket::<T>::write(move _37, move _38) -> [return: bb20, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_38),
            StorageDead(_37),
            StorageDead(_40),
            StorageDead(_36),
            StorageLive(_42),
            _42 = _27,
            _43 = AddWithOverflow(_42, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3287:23: 3287:32 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_43.1: bool), "attempt to compute `{} + {}`, which would overflow", move _42, const 1_usize) -> [success: bb21, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = &mut _10,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3287:13: 3287:20 (#0),
                    scope: scope[5],
                },
                kind: _44 = <scopeguard::ScopeGuard<(usize, &mut raw::RawTable<T, A>), {closure@src/raw/mod.rs:3271:48: 3271:64}> as core::ops::DerefMut>::deref_mut(move _45) -> [return: bb22, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_45),
            ((*_44).0: usize) = move (_43.0: usize),
            StorageDead(_42),
            StorageDead(_44),
            _20 = const (),
            StorageDead(_31),
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_23),
            StorageDead(_21),
            StorageDead(_20),
            _19 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3281:9: 3288:10 (#374),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_47),
            StorageDead(_46),
            StorageLive(_48),
            _48 = (((*_2).0: raw::RawTableInner).3: usize),
            (((*_1).0: raw::RawTableInner).3: usize) = move _48,
            StorageDead(_48),
            StorageLive(_49),
            _49 = (((*_2).0: raw::RawTableInner).2: usize),
            (((*_1).0: raw::RawTableInner).2: usize) = move _49,
            StorageDead(_49),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3295:5: 3295:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb24, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3295:6: 3295:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3291:26: 3291:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_47) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3284:43: 3284:44 (#0),
                    scope: scope[5],
                },
                kind: drop(_38) -> [return: bb27, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3295:5: 3295:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:3261:5: 3295:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3261:56: 3261:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3261:31: 3261:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:3261:50: 3261:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:3261:42: 3261:48 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3261:42: 3261:48 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3261:42: 3261:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3263:9: 3266:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3263:9: 3265:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3263:9: 3264:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3266:37: 3266:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3266:37: 3266:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3266:57: 3266:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3266:57: 3266:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:3271:25: 3279:11 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3271:13: 3271:22 (#0),
                    },
                ),
            ),
        ),
        ty: scopeguard::ScopeGuard<(usize, &'{erased} mut raw::RawTable<T/#0, A/#1>), Closure(DefId(0:310 ~ hashbrown[7d72]::raw::{impl#15}::clone_from_impl::{closure#0}), [T/#0, A/#1, i16, Binder { value: extern "RustCall" fn((&'^0 mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),)), bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3271:13: 3271:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3271:31: 3271:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3271:35: 3271:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:310 ~ hashbrown[7d72]::raw::{impl#15}::clone_from_impl::{closure#0}),
            [
                T/#0,
                A/#1,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),)), bound_vars: [Region(BrAnon)] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3271:48: 3279:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:9: 3288:10 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _15,
                                ),
                                src/raw/mod.rs:3281:21: 3281:34 (#375),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3281:21: 3281:34 (#375),
                    },
                ),
            ),
        ),
        ty: raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3261:5: 3295:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<raw::Bucket<T/#0>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:21: 3281:34 (#375),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:9: 3288:10 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:9: 3288:10 (#374),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _21,
                                ),
                                src/raw/mod.rs:3281:21: 3281:34 (#375),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3281:13: 3281:17 (#376),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3281:13: 3281:17 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:3282:25: 3282:51 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3282:17: 3282:22 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3282:17: 3282:22 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3282:25: 3282:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3282:45: 3282:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3282:45: 3282:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:3283:22: 3283:43 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:3283:17: 3283:19 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3283:17: 3283:19 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3283:22: 3283:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3283:22: 3283:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<(usize, &'{erased} mut raw::RawTable<T/#0, A/#1>), Closure(DefId(0:310 ~ hashbrown[7d72]::raw::{impl#15}::clone_from_impl::{closure#0}), [T/#0, A/#1, i16, Binder { value: extern "RustCall" fn((&'^0 mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),)), bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3283:22: 3283:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3283:37: 3283:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:13: 3284:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:13: 3284:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:22: 3284:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:22: 3284:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:22: 3284:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3284:22: 3284:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3287:23: 3287:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3287:23: 3287:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3287:13: 3287:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<(usize, &'{erased} mut raw::RawTable<T/#0, A/#1>), Closure(DefId(0:310 ~ hashbrown[7d72]::raw::{impl#15}::clone_from_impl::{closure#0}), [T/#0, A/#1, i16, Binder { value: extern "RustCall" fn((&'^0 mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),)), bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3287:13: 3287:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3291:9: 3291:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: scopeguard::ScopeGuard<(usize, &'{erased} mut raw::RawTable<T/#0, A/#1>), Closure(DefId(0:310 ~ hashbrown[7d72]::raw::{impl#15}::clone_from_impl::{closure#0}), [T/#0, A/#1, i16, Binder { value: extern "RustCall" fn((&'^0 mut (usize, &'{erased} mut raw::RawTable<T/#0, A/#1>),)), bound_vars: [Region(BrAnon)] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3291:21: 3291:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3293:28: 3293:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:3294:34: 3294:58 (#0),
            scope: scope[0],
        },
    },
]