[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _3 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4290:9: 4290:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4290:15: 4290:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4291:13: 4291:42 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_12),
            _12 = move ((_1 as Vacant).0: map::VacantEntryRef<'_, '_, K, Q, V, S, A>),
            StorageLive(_13),
            _13 = move _12,
            _0 = map::EntryRef::<'_, '_, K, Q, V, S, A>::Vacant(move _13),
            StorageDead(_13),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4295:62: 4295:63 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_4),
            _4 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>),
            StorageLive(_5),
            StorageLive(_6),
            _6 = move _2,
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4292:19: 4292:34 (#0),
                    scope: scope[1],
                },
                kind: _9 = map::OccupiedEntry::<'_, K, V, S, A>::get_mut(move _10) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _8 = &mut (*_9),
            StorageDead(_10),
            _7 = (move _8,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4292:17: 4292:35 (#0),
                    scope: scope[1],
                },
                kind: _5 = <F as core::ops::FnOnce<(&mut V,)>>::call_once(move _6, move _7) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_9),
            StorageDead(_5),
            StorageLive(_11),
            _11 = move _4,
            _0 = map::EntryRef::<'_, '_, K, Q, V, S, A>::Occupied(move _11),
            StorageDead(_11),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4294:13: 4294:14 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4297:5: 4297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb8, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4297:6: 4297:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4292:34: 4292:35 (#0),
                    scope: scope[1],
                },
                kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4297:5: 4297:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4286:5: 4297:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::EntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4286:41: 4286:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::EntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4286:26: 4286:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:4286:35: 4286:36 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4286:32: 4286:33 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4286:32: 4286:33 (#0),
                    },
                ),
            ),
        ),
        ty: F/#7,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4286:32: 4286:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4291:13: 4291:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4290:15: 4290:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4291:13: 4291:42 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4291:32: 4291:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:17: 4292:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: F/#7,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:17: 4292:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut V/#4,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:17: 4292:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:19: 4292:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:19: 4292:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4292:19: 4292:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4293:36: 4293:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:4290:15: 4290:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4295:13: 4295:36 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4295:30: 4295:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4295:57: 4295:62 (#0),
            scope: scope[0],
        },
    },
]