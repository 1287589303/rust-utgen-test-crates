[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &_2,
            _6 = &(*_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1088:21: 1088:47 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<T, A>::bucket_index(move _5, move _6) -> [return: bb1, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            FakeRead(ForLet(None), _4),
            StorageDead(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &((*_1).0: raw::RawTableInner),
            StorageLive(_11),
            _11 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1089:25: 1089:47 (#0),
                    scope: scope[1],
                },
                kind: _9 = raw::RawTableInner::ctrl(move _10, move _11) -> [return: bb2, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            _8 = (*_9),
            FakeRead(ForLet(None), _8),
            StorageDead(_9),
            StorageLive(_12),
            StorageLive(_13),
            _13 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#71),
                    scope: scope[2],
                },
                kind: switchInt(move _13) -> [0: bb7, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(*_1),
            StorageLive(_17),
            _17 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1090:23: 1090:49 (#0),
                    scope: scope[2],
                },
                kind: _15 = raw::RawTable::<T, A>::is_bucket_full(move _16, move _17) -> [return: bb4, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1090:23: 1090:49 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb6, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            _14 = const (),
            StorageDead(_15),
            StorageDead(_14),
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#70),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#72),
                    scope: scope[2],
                },
                kind: _18 = core::panicking::panic(const "assertion failed: self.is_bucket_full(index)") -> bb34,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _12 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#70),
                    scope: scope[2],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_13),
            StorageDead(_12),
            StorageLive(_19),
            _19 = (((*_1).0: raw::RawTableInner).2: usize),
            FakeRead(ForLet(None), _19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut (*_1),
            StorageLive(_23),
            _23 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1092:20: 1092:39 (#0),
                    scope: scope[3],
                },
                kind: _21 = raw::RawTable::<T, A>::remove(move _22, move _23) -> [return: bb9, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_22),
            _20 = move (_21.0: T),
            FakeRead(ForLet(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1092:41: 1092:42 (#0),
                    scope: scope[3],
                },
                kind: drop(_21) -> [return: bb10, unwind: bb33],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageLive(_24),
            StorageLive(_25),
            _25 = move _3,
            StorageLive(_26),
            StorageLive(_27),
            _27 = move _20,
            _26 = (move _27,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:33: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: _24 = <F as core::ops::FnOnce<(T,)>>::call_once(move _25, move _26) -> [return: bb11, unwind: bb30],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:39: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_27) -> [return: bb12, unwind: bb27],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_27),
            StorageDead(_26),
            StorageDead(_25),
            PlaceMention(_24),
            _28 = discriminant(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:16: 1093:30 (#0),
                    scope: scope[5],
                },
                kind: switchInt(move _28) -> [1: bb13, otherwise: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:16: 1093:30 (#0),
                    scope: scope[5],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_29),
            _29 = move ((_24 as Some).0: T),
            StorageLive(_30),
            _30 = _19,
            (((*_1).0: raw::RawTableInner).2: usize) = move _30,
            StorageDead(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &mut ((*_1).0: raw::RawTableInner),
            StorageLive(_33),
            _33 = _4,
            StorageLive(_34),
            _34 = _8,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1095:13: 1095:49 (#0),
                    scope: scope[5],
                },
                kind: _31 = raw::RawTableInner::set_ctrl(move _32, move _33, move _34) -> [return: bb15, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageDead(_33),
            StorageDead(_32),
            StorageDead(_31),
            _35 = AddWithOverflow((((*_1).0: raw::RawTableInner).3: usize), const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1096:13: 1096:34 (#0),
                    scope: scope[5],
                },
                kind: assert(!move (_35.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_1).0: raw::RawTableInner).3: usize), const 1_usize) -> [success: bb16, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            (((*_1).0: raw::RawTableInner).3: usize) = move (_35.0: usize),
            StorageLive(_36),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            _39 = &(*_1),
            StorageLive(_40),
            _40 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1097:13: 1097:31 (#0),
                    scope: scope[5],
                },
                kind: _38 = raw::RawTable::<T, A>::bucket(move _39, move _40) -> [return: bb17, unwind: bb26],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _37 = &_38,
            StorageDead(_40),
            StorageDead(_39),
            StorageLive(_41),
            _41 = move _29,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1097:13: 1097:47 (#0),
                    scope: scope[5],
                },
                kind: _36 = raw::Bucket::<T>::write(move _37, move _41) -> [return: bb18, unwind: bb25],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_41),
            StorageDead(_37),
            StorageDead(_38),
            StorageDead(_36),
            _0 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1099:9: 1099:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_29) -> [return: bb20, unwind: bb28],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_29),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb21,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb22, unwind: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_8),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb23, unwind: bb34],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb24, unwind: bb35],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:6: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1097:46: 1097:47 (#0),
                    scope: scope[5],
                },
                kind: drop(_41) -> [return: bb26, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1099:9: 1099:10 (#0),
                    scope: scope[4],
                },
                kind: drop(_29) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:39: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_25) -> [return: bb28, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb29, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_24) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:39: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_26) -> [return: bb31, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:39: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_27) -> [return: bb32, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1093:39: 1093:40 (#0),
                    scope: scope[5],
                },
                kind: drop(_25) -> [return: bb33, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[3],
                },
                kind: drop(_20) -> [return: bb34, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1102:5: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb35, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1084:5: 1102:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1084:81: 1084:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1084:42: 1084:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1084:61: 1084:70 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1084:53: 1084:59 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1084:53: 1084:59 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1084:53: 1084:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1084:75: 1084:76 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1084:72: 1084:73 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1084:72: 1084:73 (#0),
                    },
                ),
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1084:72: 1084:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1088:21: 1088:47 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1088:13: 1088:18 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1088:13: 1088:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1088:21: 1088:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1088:39: 1088:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1088:39: 1088:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1089:24: 1089:47 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1089:13: 1089:21 (#0),
                    },
                ),
            ),
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1089:13: 1089:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1089:25: 1089:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1089:25: 1089:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1089:41: 1089:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:9: 318:10 (#70),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:316:12: 316:42 (#71),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1090:23: 1090:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1090:23: 1090:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1090:43: 1090:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#72),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:317:13: 317:38 (#72),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1091:31: 1091:53 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1091:13: 1091:28 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1091:13: 1091:28 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1092:20: 1092:41 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1092:13: 1092:17 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1092:13: 1092:17 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#0, raw::InsertSlot),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1092:20: 1092:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1092:20: 1092:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1092:32: 1092:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:33: 1093:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                },
            ),
        ),
        ty: F/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:33: 1093:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                },
            ),
        ),
        ty: (T/#0,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:33: 1093:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1093:9: 1101:10 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:35: 1093:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:16: 1093:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _24,
                                ),
                                src/raw/mod.rs:1093:33: 1093:40 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1093:16: 1093:30 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1093:21: 1093:29 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1094:38: 1094:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1095:13: 1095:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1095:13: 1095:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1095:33: 1095:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1095:40: 1095:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1096:13: 1096:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:13: 1097:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:13: 1097:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:13: 1097:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:13: 1097:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:25: 1097:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1097:38: 1097:46 (#0),
            scope: scope[0],
        },
    },
]