[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &((*_1).0: core::iter::Chain<set::Difference<'_, T, S, A>, set::Difference<'_, T, S, A>>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:2100:9: 2100:30 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::iter::Chain<set::Difference<'_, T, S, A>, set::Difference<'_, T, S, A>> as core::iter::Iterator>::size_hint(move _2) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:2101:6: 2101:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:2099:5: 2101:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, core::option::Option<usize>),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:2099:28: 2099:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::SymmetricDifference<'{erased}, T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:2099:18: 2099:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:2100:9: 2100:30 (#0),
                },
            ),
        ),
        ty: &'{erased} core::iter::Chain<set::Difference<'{erased}, T/#1, S/#2, A/#3>, set::Difference<'{erased}, T/#1, S/#2, A/#3>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:2100:9: 2100:18 (#0),
            scope: scope[0],
        },
    },
]