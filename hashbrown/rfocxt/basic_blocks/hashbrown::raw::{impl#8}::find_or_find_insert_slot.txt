[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
            StorageLive(_7),
            _7 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1117:9: 1117:32 (#0),
                    scope: scope[0],
                },
                kind: _5 = raw::RawTable::<T, A>::reserve::<impl Fn(&T) -> u64>(move _6, const 1_usize, move _7) -> [return: bb1, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_8),
            StorageLive(_9),
            _9 = &((*_1).0: raw::RawTableInner),
            StorageLive(_10),
            _10 = _2,
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            _15 = &mut _3,
            StorageLive(_16),
            _16 = &(*_1),
            _14 = {closure@src/raw/mod.rs:1129:60: 1129:67} { eq: move _15, self: move _16 },
            StorageDead(_16),
            StorageDead(_15),
            _13 = &mut _14,
            _12 = &mut (*_13),
            _11 = move _12 as &mut dyn core::ops::FnMut(usize) -> bool (PointerCoercion(Unsize)),
            StorageDead(_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1127:19: 1129:100 (#0),
                    scope: scope[0],
                },
                kind: _8 = raw::RawTableInner::find_or_find_insert_slot_inner(move _9, move _10, move _11) -> [return: bb2, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
            PlaceMention(_8),
            _17 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1127:13: 1129:100 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _17) -> [0: bb4, 1: bb5, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1127:19: 1129:100 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1132:17: 1132:26 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb6, imaginary: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_22),
            _22 = move ((_8 as Err).0: raw::InsertSlot),
            StorageLive(_23),
            _23 = move _22,
            _0 = core::result::Result::<raw::Bucket<T>, raw::InsertSlot>::Err(move _23),
            StorageDead(_23),
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1133:38: 1133:39 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_18),
            _18 = ((_8 as Ok).0: usize),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &(*_1),
            StorageLive(_21),
            _21 = _18,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1132:33: 1132:51 (#0),
                    scope: scope[1],
                },
                kind: _19 = raw::RawTable::<T, A>::bucket(move _20, move _21) -> [return: bb7, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            _0 = core::result::Result::<raw::Bucket<T>, raw::InsertSlot>::Ok(move _19),
            StorageDead(_19),
            StorageDead(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1132:51: 1132:52 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb8,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1136:5: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb9, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1136:5: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1136:6: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1117:31: 1117:32 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1136:5: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_4) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1136:5: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1111:5: 1136:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<raw::Bucket<T/#0>, raw::InsertSlot>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1116:10: 1116:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1112:9: 1112:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1113:15: 1113:18 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1113:9: 1113:13 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1113:9: 1113:13 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1113:9: 1113:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1114:17: 1114:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1114:9: 1114:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1114:9: 1114:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1114:9: 1114:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:1115:17: 1115:35 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:1115:9: 1115:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1115:9: 1115:15 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1115:9: 1115:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1117:9: 1117:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1117:9: 1117:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: impl Fn(&T) -> u64/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1117:25: 1117:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<usize, raw::InsertSlot>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1127:19: 1129:100 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1127:19: 1128:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:49: 1129:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut dyn [Binder { value: Trait(core::ops::FnMut<(usize,)>), bound_vars: [] }, Binder { value: Projection(Output = bool), bound_vars: [] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:55: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Closure(DefId(0:199 ~ hashbrown[7d72]::raw::{impl#8}::find_or_find_insert_slot::{closure#0}), [T/#0, A/#1, impl FnMut(&T) -> bool/#2, impl Fn(&T) -> u64/#3, i16, Binder { value: extern "RustCall" fn((usize,)) -> bool, bound_vars: [] }, (&'{erased} mut impl FnMut(&T) -> bool/#2, &'{erased} raw::RawTable<T/#0, A/#1>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:55: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut Closure(DefId(0:199 ~ hashbrown[7d72]::raw::{impl#8}::find_or_find_insert_slot::{closure#0}), [T/#0, A/#1, impl FnMut(&T) -> bool/#2, impl Fn(&T) -> u64/#3, i16, Binder { value: extern "RustCall" fn((usize,)) -> bool, bound_vars: [] }, (&'{erased} mut impl FnMut(&T) -> bool/#2, &'{erased} raw::RawTable<T/#0, A/#1>)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:55: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:199 ~ hashbrown[7d72]::raw::{impl#8}::find_or_find_insert_slot::{closure#0}),
            [
                T/#0,
                A/#1,
                impl FnMut(&T) -> bool/#2,
                impl Fn(&T) -> u64/#3,
                i16,
                Binder { value: extern "RustCall" fn((usize,)) -> bool, bound_vars: [] },
                (&'{erased} mut impl FnMut(&T) -> bool/#2, &'{erased} raw::RawTable<T/#0, A/#1>),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:60: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut impl FnMut(&T) -> bool/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:60: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1129:60: 1129:99 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1132:17: 1132:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/raw/mod.rs:1127:19: 1129:100 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1132:17: 1132:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1132:20: 1132:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1132:33: 1132:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1132:33: 1132:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:1127:13: 1134:14 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1132:45: 1132:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/raw/mod.rs:1127:19: 1129:100 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:1133:17: 1133:26 (#0),
                    },
                ),
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1133:21: 1133:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1133:34: 1133:38 (#0),
            scope: scope[0],
        },
    },
]