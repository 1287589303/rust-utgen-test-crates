[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = const <T as raw::SizedTypeProperties>::IS_ZERO_SIZED,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:284:22: 284:38 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb4, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = _2,
            _7 = AddWithOverflow(_6, const 1_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:288:25: 288:34 (#0),
                    scope: scope[0],
                },
                kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_usize) -> [success: bb2, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _5 = move (_7.0: usize),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:288:13: 288:35 (#0),
                    scope: scope[0],
                },
                kind: _3 = util::invalid_mut::<T>(move _5) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:284:19: 291:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            _9 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:290:13: 290:26 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::ptr::NonNull::<T>::as_ptr(move _9) -> [return: bb5, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageLive(_10),
            _10 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:290:13: 290:37 (#0),
                    scope: scope[0],
                },
                kind: _3 = core::ptr::mut_ptr::<impl *mut T>::sub(move _8, move _10) -> [return: bb6, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:284:19: 291:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:293:18: 293:45 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::ptr::NonNull::<T>::new_unchecked(move _12) -> [return: bb8, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = raw::Bucket::<T> { ptr: move _11 },
            StorageDead(_11),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:295:6: 295:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:263:5: 295:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:263:66: 263:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:263:37: 263:47 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:263:31: 263:35 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:263:31: 263:35 (#0),
                    },
                ),
            ),
        ),
        ty: core::ptr::NonNull<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:263:31: 263:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:263:56: 263:61 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:263:49: 263:54 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:263:49: 263:54 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:263:49: 263:54 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:284:19: 291:10 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:284:13: 284:16 (#0),
                    },
                ),
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:284:13: 284:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:115 ~ hashbrown[7d72]::raw::SizedTypeProperties::IS_ZERO_SIZED),
            },
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:284:22: 284:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:288:13: 288:35 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:288:25: 288:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:288:13: 288:35 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:288:25: 288:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:288:25: 288:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:290:13: 290:37 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:290:13: 290:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:290:13: 290:37 (#0),
                },
            ),
        ),
        ty: core::ptr::NonNull<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:290:13: 290:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:290:13: 290:37 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:290:31: 290:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::ptr::NonNull<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:293:18: 293:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:292:9: 294:10 (#0),
                },
            ),
        ),
        ty: *mut T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:293:41: 293:44 (#0),
            scope: scope[0],
        },
    },
]