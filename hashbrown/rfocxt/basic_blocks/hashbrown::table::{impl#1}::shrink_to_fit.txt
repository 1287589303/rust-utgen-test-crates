[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            _3 = &mut ((*_1).0: raw::RawTable<T, A>),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:474:28: 474:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = table::HashTable::<T, A>::len(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:474:9: 474:47 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawTable::<T, A>::shrink_to::<impl Fn(&T) -> u64>(move _3, move _4, move _6) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:475:5: 475:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:475:6: 475:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:474:46: 474:47 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:475:5: 475:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:473:5: 475:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:473:64: 473:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:473:26: 473:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:473:45: 473:63 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:473:37: 473:43 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:473:37: 473:43 (#0),
                    },
                ),
            ),
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:473:37: 473:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/table.rs:474:9: 474:47 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:474:9: 474:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/table.rs:474:9: 474:47 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:474:28: 474:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/table.rs:474:9: 474:47 (#0),
                },
            ),
        ),
        ty: &'{erased} table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:474:28: 474:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/table.rs:474:9: 474:47 (#0),
                },
            ),
        ),
        ty: impl Fn(&T) -> u64/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:474:40: 474:46 (#0),
            scope: scope[0],
        },
    },
]