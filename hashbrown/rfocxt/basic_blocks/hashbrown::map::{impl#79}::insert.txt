[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3905:22: 3905:36 (#0),
                    scope: scope[0],
                },
                kind: _4 = map::OccupiedEntry::<'_, K, V, S, A>::get_mut(move _5) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_5),
            StorageLive(_6),
            _6 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3905:9: 3905:44 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::mem::replace::<V>(move _3, move _6) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_3),
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3906:5: 3906:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3906:6: 3906:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3905:43: 3905:44 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3906:5: 3906:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3904:5: 3906:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3904:43: 3904:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3904:19: 3904:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:3904:37: 3904:38 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:3904:30: 3904:35 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3904:30: 3904:35 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3904:30: 3904:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3905:9: 3905:44 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3905:22: 3905:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3905:9: 3905:44 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3905:22: 3905:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3905:9: 3905:44 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3905:22: 3905:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3905:9: 3905:44 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3905:38: 3905:43 (#0),
            scope: scope[0],
        },
    },
]