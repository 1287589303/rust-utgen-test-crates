[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut (*_1),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:21: 4568:37 (#0),
                    scope: scope[0],
                },
                kind: _6 = <T as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = {closure@src/map.rs:4568:42: 4568:58},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:21: 4568:72 (#0),
                    scope: scope[0],
                },
                kind: _5 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::map::<(K, V), {closure@src/map.rs:4568:42: 4568:58}>(move _6, move _8) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:9: 4568:73 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::HashMap<K, V, S, A> as core::iter::Extend<(K, V)>>::extend::<core::iter::Map<<T as core::iter::IntoIterator>::IntoIter, {closure@src/map.rs:4568:42: 4568:58}>>(move _4, move _5) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4569:5: 4569:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4569:6: 4569:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:72: 4568:73 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:71: 4568:72 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4568:36: 4568:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4569:5: 4569:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4567:5: 4569:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4567:74: 4567:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::HashMap<K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4567:55: 4567:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:4567:72: 4567:73 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4567:66: 4567:70 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4567:66: 4567:70 (#0),
                    },
                ),
            ),
        ),
        ty: T/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4567:66: 4567:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:9: 4568:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::HashMap<K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:9: 4568:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Projection, AliasTy { args: [T/#5], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:1312 ~ hashbrown[7d72]::map::{impl#86}::extend::{closure#0}), ['{erased}, K/#1, V/#2, S/#3, A/#4, T/#5, i16, Binder { value: extern "RustCall" fn(((&'{erased} K/#1, &'{erased} V/#2),)) -> (K/#1, V/#2), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:21: 4568:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    T/#5,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:21: 4568:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:21: 4568:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1312 ~ hashbrown[7d72]::map::{impl#86}::extend::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                A/#4,
                T/#5,
                i16,
                Binder { value: extern "RustCall" fn(((&'{erased} K/#1, &'{erased} V/#2),)) -> (K/#1, V/#2), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4568:42: 4568:71 (#0),
            scope: scope[0],
        },
    },
]