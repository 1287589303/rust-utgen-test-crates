[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = &mut ((*_1).0: map::IntoIter<K, V, A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2395:9: 2395:26 (#0),
                    scope: scope[0],
                },
                kind: _2 = <map::IntoIter<K, V, A> as core::iter::Iterator>::next(move _3) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageLive(_4),
            _4 = {closure@src/map.rs:2395:31: 2395:39},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2395:9: 2395:42 (#0),
                    scope: scope[0],
                },
                kind: _0 = core::option::Option::<(K, V)>::map::<V, {closure@src/map.rs:2395:31: 2395:39}>(move _2, move _4) -> [return: bb2, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2396:6: 2396:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2395:41: 2395:42 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2394:5: 2396:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<V/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2394:27: 2394:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::IntoValues<K/#0, V/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2394:13: 2394:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2395:9: 2395:42 (#0),
                },
            ),
        ),
        ty: core::option::Option<(K/#0, V/#1)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2395:9: 2395:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2395:9: 2395:42 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::IntoIter<K/#0, V/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2395:9: 2395:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2395:9: 2395:42 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:802 ~ hashbrown[7d72]::map::{impl#23}::next::{closure#0}),
            [
                K/#0,
                V/#1,
                A/#2,
                i32,
                Binder { value: extern "RustCall" fn(((K/#0, V/#1),)) -> V/#1, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2395:31: 2395:41 (#0),
            scope: scope[0],
        },
    },
]