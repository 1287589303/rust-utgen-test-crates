[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).0: map::IntoIter<K, (), A>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1873:28: 1873:44 (#0),
                    scope: scope[0],
                },
                kind: _4 = map::IntoIter::<K, (), A>::iter(move _5) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageLive(_6),
            _6 = {closure@src/set.rs:1873:49: 1873:57},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1873:28: 1873:60 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::Iter<'_, K, ()> as core::iter::Iterator>::map::<&K, {closure@src/set.rs:1873:49: 1873:57}>(move _4, move _6) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut (*_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1874:9: 1874:23 (#0),
                    scope: scope[1],
                },
                kind: _10 = core::fmt::Formatter::<'_>::debug_list(move _11) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _9 = &mut _10,
            StorageDead(_11),
            StorageLive(_12),
            _12 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1874:9: 1874:45 (#0),
                    scope: scope[1],
                },
                kind: _8 = core::fmt::DebugList::<'_, '_>::entries::<&K, core::iter::Map<map::Iter<'_, K, ()>, {closure@src/set.rs:1873:49: 1873:57}>>(move _9, move _12) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _7 = &mut (*_8),
            StorageDead(_12),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1874:9: 1874:54 (#0),
                    scope: scope[1],
                },
                kind: _0 = core::fmt::DebugList::<'_, '_>::finish(move _7) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_3),
            StorageDead(_10),
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1875:6: 1875:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1872:5: 1875:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::result::Result<(), core::fmt::Error>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1872:50: 1872:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} set::IntoIter<K/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1872:12: 1872:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1872:22: 1872:45 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1872:19: 1872:20 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1872:19: 1872:20 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1872:19: 1872:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1873:28: 1873:60 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1873:13: 1873:25 (#0),
                    },
                ),
            ),
        ),
        ty: core::iter::Map<map::Iter<'{erased}, K/#0, ()>, Closure(DefId(0:1904 ~ hashbrown[7d72]::set::{impl#36}::fmt::{closure#0}), [K/#0, A/#1, i16, Binder { value: extern "RustCall" fn(((&'{erased} K/#0, &'{erased} ()),)) -> &'{erased} K/#0, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1873:13: 1873:25 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::Iter<'{erased}, K/#0, ()>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1873:28: 1873:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} map::IntoIter<K/#0, (), A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1873:28: 1873:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1904 ~ hashbrown[7d72]::set::{impl#36}::fmt::{closure#0}),
            [
                K/#0,
                A/#1,
                i16,
                Binder { value: extern "RustCall" fn(((&'{erased} K/#0, &'{erased} ()),)) -> &'{erased} K/#0, bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1873:49: 1873:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:9: 1874:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:9: 1874:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:9: 1874:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: core::fmt::DebugList<'{erased}, '{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:9: 1874:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: &'{erased} mut core::fmt::Formatter<'{erased}>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:9: 1874:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1874:9: 1874:54 (#0),
                },
            ),
        ),
        ty: core::iter::Map<map::Iter<'{erased}, K/#0, ()>, Closure(DefId(0:1904 ~ hashbrown[7d72]::set::{impl#36}::fmt::{closure#0}), [K/#0, A/#1, i16, Binder { value: extern "RustCall" fn(((&'{erased} K/#0, &'{erased} ()),)) -> &'{erased} K/#0, bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1874:32: 1874:44 (#0),
            scope: scope[0],
        },
    },
]