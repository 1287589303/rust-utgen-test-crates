[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*(_1.2: &mut map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            StorageLive(_5),
            _5 = (_1.0: u64),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = &(*(_1.1: &Q)),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4407:14: 4407:29 (#0),
                    scope: scope[0],
                },
                kind: _7 = <&Q as core::convert::Into<K>>::into(move _8) -> [return: bb1, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageLive(_9),
            _9 = move _2,
            _6 = (move _7, move _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4407:36: 4407:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_9) -> [return: bb2, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4407:36: 4407:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb3, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = &((*(_1.2: &mut map::HashMap<K, V, S, A>)).0: S),
            _11 = &(*_12),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4408:13: 4408:61 (#0),
                    scope: scope[0],
                },
                kind: _10 = map::make_hasher::<K, V, S>(move _11) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4405:20: 4409:10 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTable::<(K, V), A>::insert::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _4, move _5, move _6, move _10) -> [return: bb5, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageDead(_12),
            StorageLive(_13),
            _13 = (_1.0: u64),
            StorageLive(_14),
            _14 = move _3,
            StorageLive(_15),
            _15 = &mut (*(_1.2: &mut map::HashMap<K, V, S, A>)),
            _0 = map::OccupiedEntry::<'_, K, V, S, A> { hash: move _13, elem: move _14, table: move _15 },
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4415:5: 4415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4415:6: 4415:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4409:9: 4409:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4407:36: 4407:37 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4409:9: 4409:10 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb10, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4415:5: 4415:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:4400:5: 4415:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::OccupiedEntry<'{erased}, K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4400:44: 4400:73 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::VacantEntryRef<'{erased}, '{erased}, K/#2, Q/#3, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4400:25: 4400:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:4400:38: 4400:39 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4400:31: 4400:36 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4400:31: 4400:36 (#0),
                    },
                ),
            ),
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4400:31: 4400:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:4405:20: 4409:10 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:4405:13: 4405:17 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(K/#2, V/#4)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4405:13: 4405:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(K/#2, V/#4), A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4405:20: 4405:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4406:13: 4406:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (K/#2, V/#4),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4407:13: 4407:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: K/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4407:14: 4407:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} Q/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4407:14: 4407:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: V/#4,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4407:31: 4407:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Opaque,
            AliasTy {
                args: [
                    K/#2,
                    V/#4,
                    S/#5,
                    '{erased},
                ],
                def_id: DefId(0:2778 ~ hashbrown[7d72]::map::make_hasher::{opaque#0}),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4408:13: 4408:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4408:36: 4408:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4408:36: 4408:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4411:19: 4411:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<(K/#2, V/#4)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4412:13: 4412:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut map::HashMap<K/#2, V/#4, S/#5, A/#6>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:4413:20: 4413:30 (#0),
            scope: scope[0],
        },
    },
]