[
    BasicBlockData {
        statements: [
            PlaceMention(_1),
            _4 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:760:9: 760:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:760:15: 760:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:761:13: 761:41 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_1 as Vacant).0: raw_entry::RawVacantEntryMut<'_, K, V, S, A>),
            StorageLive(_8),
            _8 = move _7,
            StorageLive(_9),
            _9 = move _2,
            StorageLive(_10),
            _10 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:762:43: 762:81 (#0),
                    scope: scope[2],
                },
                kind: _0 = raw_entry::RawVacantEntryMut::<'_, K, V, S, A>::insert(move _8, move _9, move _10) -> [return: bb6, unwind: bb10],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_1 as Occupied).0: raw_entry::RawOccupiedEntryMut<'_, K, V, S, A>),
            StorageLive(_6),
            _6 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:761:45: 761:67 (#0),
                    scope: scope[1],
                },
                kind: _0 = raw_entry::RawOccupiedEntryMut::<'_, K, V, S, A>::into_key_value(move _6) -> [return: bb5, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:761:66: 761:67 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:762:80: 762:81 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb7,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:764:5: 764:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb8, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:764:5: 764:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:764:6: 764:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:762:80: 762:81 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb11, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:762:80: 762:81 (#0),
                    scope: scope[2],
                },
                kind: drop(_9) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:764:5: 764:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:764:5: 764:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:755:5: 764:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut K/#1, &'{erased} mut V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:755:63: 755:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:755:22: 755:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:755:41: 755:42 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:755:28: 755:39 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:755:28: 755:39 (#0),
                    },
                ),
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:755:28: 755:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:755:57: 755:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:755:44: 755:55 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:755:44: 755:55 (#0),
                    },
                ),
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:755:44: 755:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:761:13: 761:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/raw_entry.rs:760:15: 760:19 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:761:13: 761:41 (#0),
                    },
                ),
            ),
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:761:35: 761:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:760:9: 763:10 (#0),
                },
            ),
        ),
        ty: raw_entry::RawOccupiedEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:761:45: 761:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/raw_entry.rs:760:15: 760:19 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:762:13: 762:39 (#0),
                    },
                ),
            ),
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:762:33: 762:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:760:9: 763:10 (#0),
                },
            ),
        ),
        ty: raw_entry::RawVacantEntryMut<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:762:43: 762:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:760:9: 763:10 (#0),
                },
            ),
        ),
        ty: K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:762:56: 762:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:760:9: 763:10 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:762:69: 762:80 (#0),
            scope: scope[0],
        },
    },
]