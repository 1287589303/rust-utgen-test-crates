[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            _6 = &mut (*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2845:9: 2845:39 (#0),
                    scope: scope[0],
                },
                kind: _5 = raw::RawTableInner::prepare_rehash_in_place(move _6) -> [return: bb1, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_6),
            StorageDead(_5),
            StorageLive(_7),
            StorageLive(_8),
            _8 = move _1,
            StorageLive(_9),
            FakeRead(ForLet(Some(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}))), _4),
            _9 = {closure@src/raw/mod.rs:2847:37: 2847:49} { drop: _4, size_of: _3 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2847:25: 2858:11 (#0),
                    scope: scope[0],
                },
                kind: _7 = scopeguard::guard::<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}>(move _8, move _9) -> [return: bb2, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            StorageDead(_8),
            FakeRead(ForLet(None), _7),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            StorageLive(_13),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:29: 2863:44 (#0),
                    scope: scope[1],
                },
                kind: _15 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _16) -> [return: bb3, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _14 = &(*(*_15)),
            StorageDead(_16),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:29: 2863:44 (#0),
                    scope: scope[1],
                },
                kind: _13 = raw::RawTableInner::buckets(move _14) -> [return: bb4, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            _12 = core::ops::Range::<usize> { start: const 0_usize, end: move _13 },
            StorageDead(_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:26: 2863:44 (#343),
                    scope: scope[1],
                },
                kind: _11 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _12) -> [return: bb5, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            PlaceMention(_11),
            StorageLive(_17),
            _17 = move _11,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:9: 2911:10 (#342),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:9: 2911:10 (#342),
                    scope: scope[2],
                },
                kind: falseUnwind -> [real: bb7, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_19),
            StorageLive(_20),
            StorageLive(_21),
            StorageLive(_22),
            _22 = &mut _17,
            _21 = &mut (*_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:26: 2863:44 (#343),
                    scope: scope[2],
                },
                kind: _20 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _21) -> [return: bb8, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            PlaceMention(_20),
            _23 = discriminant(_20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:26: 2863:44 (#343),
                    scope: scope[2],
                },
                kind: switchInt(move _23) -> [0: bb10, 1: bb11, otherwise: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _20),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:26: 2863:44 (#343),
                    scope: scope[2],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2863:9: 2911:10 (#342),
                    scope: scope[2],
                },
                kind: falseEdge -> [real: bb12, imaginary: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_25),
            _25 = ((_20 as Some).0: usize),
            StorageLive(_26),
            StorageLive(_27),
            StorageLive(_28),
            StorageLive(_29),
            StorageLive(_30),
            StorageLive(_31),
            StorageLive(_32),
            _32 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2864:17: 2864:30 (#0),
                    scope: scope[3],
                },
                kind: _31 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _32) -> [return: bb13, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _10 = const (),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
            StorageDead(_17),
            StorageDead(_15),
            StorageDead(_11),
            StorageDead(_10),
            StorageLive(_126),
            StorageLive(_127),
            StorageLive(_128),
            StorageLive(_129),
            _129 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2913:53: 2913:70 (#0),
                    scope: scope[1],
                },
                kind: _128 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _129) -> [return: bb52, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _30 = &(*(*_31)),
            StorageDead(_32),
            StorageLive(_33),
            _33 = _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2864:17: 2864:30 (#0),
                    scope: scope[3],
                },
                kind: _29 = raw::RawTableInner::ctrl(move _30, move _33) -> [return: bb14, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
            StorageDead(_30),
            _28 = &(*_29),
            StorageLive(_34),
            StorageLive(_35),
            _35 = const control::tag::Tag::DELETED,
            _34 = &_35,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2864:16: 2864:46 (#0),
                    scope: scope[3],
                },
                kind: _27 = <control::tag::Tag as core::cmp::PartialEq>::ne(move _28, move _34) -> [return: bb15, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2864:16: 2864:46 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _27) -> [0: bb17, otherwise: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            StorageDead(_27),
            StorageDead(_26),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_35),
            StorageDead(_34),
            StorageDead(_31),
            StorageDead(_29),
            StorageDead(_28),
            _26 = const (),
            StorageDead(_27),
            StorageDead(_26),
            StorageLive(_37),
            StorageLive(_38),
            StorageLive(_39),
            StorageLive(_40),
            _40 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2868:23: 2868:51 (#0),
                    scope: scope[3],
                },
                kind: _39 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _40) -> [return: bb18, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _38 = &(*(*_39)),
            StorageDead(_40),
            StorageLive(_41),
            _41 = _25,
            StorageLive(_42),
            _42 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2868:23: 2868:51 (#0),
                    scope: scope[3],
                },
                kind: _37 = raw::RawTableInner::bucket_ptr(move _38, move _41, move _42) -> [return: bb19, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_42),
            StorageDead(_41),
            StorageDead(_38),
            FakeRead(ForLet(None), _37),
            StorageDead(_39),
            StorageLive(_43),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2870:13: 2910:14 (#0),
                    scope: scope[4],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2870:13: 2910:14 (#0),
                    scope: scope[4],
                },
                kind: falseUnwind -> [real: bb21, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_44),
            StorageLive(_45),
            _45 = &(*_2),
            StorageLive(_46),
            StorageLive(_47),
            StorageLive(_48),
            StorageLive(_49),
            _49 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2872:35: 2872:41 (#0),
                    scope: scope[4],
                },
                kind: _48 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::DerefMut>::deref_mut(move _49) -> [return: bb22, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _47 = &mut (*(*_48)),
            StorageDead(_49),
            StorageLive(_50),
            _50 = _25,
            _46 = (move _47, move _50),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2872:28: 2872:45 (#0),
                    scope: scope[4],
                },
                kind: _44 = <dyn for<'a> core::ops::Fn(&'a mut raw::RawTableInner, usize) -> u64 as core::ops::Fn<(&mut raw::RawTableInner, usize)>>::call(move _45, move _46) -> [return: bb23, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_50),
            StorageDead(_47),
            StorageDead(_46),
            StorageDead(_45),
            FakeRead(ForLet(None), _44),
            StorageDead(_48),
            StorageLive(_51),
            StorageLive(_52),
            StorageLive(_53),
            StorageLive(_54),
            StorageLive(_55),
            _55 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2878:29: 2878:57 (#0),
                    scope: scope[5],
                },
                kind: _54 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _55) -> [return: bb24, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _53 = &(*(*_54)),
            StorageDead(_55),
            StorageLive(_56),
            _56 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2878:29: 2878:57 (#0),
                    scope: scope[5],
                },
                kind: _52 = raw::RawTableInner::find_insert_slot(move _53, move _56) -> [return: bb25, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_56),
            StorageDead(_53),
            _51 = (_52.0: usize),
            FakeRead(ForLet(None), _51),
            StorageDead(_54),
            StorageDead(_52),
            StorageLive(_57),
            StorageLive(_58),
            StorageLive(_59),
            StorageLive(_60),
            StorageLive(_61),
            StorageLive(_62),
            _62 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2885:27: 2885:65 (#0),
                    scope: scope[6],
                },
                kind: _61 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _62) -> [return: bb26, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _60 = &(*(*_61)),
            StorageDead(_62),
            StorageLive(_63),
            _63 = _25,
            StorageLive(_64),
            _64 = _51,
            StorageLive(_65),
            _65 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2885:27: 2885:65 (#0),
                    scope: scope[6],
                },
                kind: _59 = raw::RawTableInner::is_in_same_group(move _60, move _63, move _64, move _65) -> [return: bb27, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_65),
            StorageDead(_64),
            StorageDead(_63),
            StorageDead(_60),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2885:20: 2885:66 (#0),
                    scope: scope[6],
                },
                kind: _58 = core::convert::identity::<bool>(move _59) -> [return: bb28, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2885:20: 2885:66 (#0),
                    scope: scope[6],
                },
                kind: switchInt(move _58) -> [0: bb32, otherwise: bb29],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_59),
            StorageLive(_67),
            StorageLive(_68),
            StorageLive(_69),
            StorageLive(_70),
            _70 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2886:21: 2886:49 (#0),
                    scope: scope[6],
                },
                kind: _69 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::DerefMut>::deref_mut(move _70) -> [return: bb30, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _68 = &mut (*(*_69)),
            StorageDead(_70),
            StorageLive(_71),
            _71 = _25,
            StorageLive(_72),
            _72 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2886:21: 2886:49 (#0),
                    scope: scope[6],
                },
                kind: _67 = raw::RawTableInner::set_ctrl_hash(move _68, move _71, move _72) -> [return: bb31, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_72),
            StorageDead(_71),
            StorageDead(_68),
            StorageDead(_69),
            StorageDead(_67),
            StorageDead(_58),
            StorageDead(_57),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_61),
            StorageDead(_59),
            _57 = const (),
            StorageDead(_58),
            StorageDead(_57),
            StorageLive(_73),
            StorageLive(_74),
            StorageLive(_75),
            StorageLive(_76),
            _76 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2890:31: 2890:63 (#0),
                    scope: scope[6],
                },
                kind: _75 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _76) -> [return: bb33, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _74 = &(*(*_75)),
            StorageDead(_76),
            StorageLive(_77),
            _77 = _51,
            StorageLive(_78),
            _78 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2890:31: 2890:63 (#0),
                    scope: scope[6],
                },
                kind: _73 = raw::RawTableInner::bucket_ptr(move _74, move _77, move _78) -> [return: bb34, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_78),
            StorageDead(_77),
            StorageDead(_74),
            FakeRead(ForLet(None), _73),
            StorageDead(_75),
            StorageLive(_79),
            StorageLive(_80),
            StorageLive(_81),
            StorageLive(_82),
            _82 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2894:33: 2894:69 (#0),
                    scope: scope[7],
                },
                kind: _81 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::DerefMut>::deref_mut(move _82) -> [return: bb35, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _80 = &mut (*(*_81)),
            StorageDead(_82),
            StorageLive(_83),
            _83 = _51,
            StorageLive(_84),
            _84 = _44,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2894:33: 2894:69 (#0),
                    scope: scope[7],
                },
                kind: _79 = raw::RawTableInner::replace_ctrl_hash(move _80, move _83, move _84) -> [return: bb36, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_84),
            StorageDead(_83),
            StorageDead(_80),
            FakeRead(ForLet(None), _79),
            StorageDead(_81),
            StorageLive(_85),
            StorageLive(_86),
            _86 = &_79,
            StorageLive(_87),
            StorageLive(_88),
            _88 = const control::tag::Tag::EMPTY,
            _87 = &_88,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2895:20: 2895:43 (#0),
                    scope: scope[8],
                },
                kind: _85 = <control::tag::Tag as core::cmp::PartialEq>::eq(move _86, move _87) -> [return: bb37, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2895:20: 2895:43 (#0),
                    scope: scope[8],
                },
                kind: switchInt(move _85) -> [0: bb42, otherwise: bb38],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_90),
            StorageLive(_91),
            StorageLive(_92),
            StorageLive(_93),
            _93 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2896:21: 2896:50 (#0),
                    scope: scope[8],
                },
                kind: _92 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::DerefMut>::deref_mut(move _93) -> [return: bb39, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _91 = &mut (*(*_92)),
            StorageDead(_93),
            StorageLive(_94),
            _94 = _25,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2896:21: 2896:50 (#0),
                    scope: scope[8],
                },
                kind: _90 = raw::RawTableInner::set_ctrl(move _91, move _94, const control::tag::Tag::EMPTY) -> [return: bb40, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_94),
            StorageDead(_91),
            StorageDead(_92),
            StorageDead(_90),
            StorageLive(_95),
            StorageLive(_96),
            StorageLive(_97),
            _97 = _37,
            _96 = move _97 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_97),
            StorageLive(_98),
            _98 = _73,
            StorageLive(_99),
            _99 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2900:21: 2900:68 (#0),
                    scope: scope[8],
                },
                kind: _95 = core::intrinsics::copy_nonoverlapping::<u8>(move _96, move _98, move _99) -> [return: bb41, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_99),
            StorageDead(_98),
            StorageDead(_96),
            StorageDead(_95),
            StorageDead(_85),
            StorageDead(_79),
            StorageDead(_73),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[6],
                },
                kind: goto -> bb50,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_88),
            StorageDead(_87),
            StorageDead(_86),
            StorageLive(_101),
            StorageLive(_102),
            _102 = const true,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#119),
                    scope: scope[8],
                },
                kind: switchInt(move _102) -> [0: bb47, otherwise: bb43],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_103),
            StorageLive(_104),
            StorageLive(_105),
            _105 = &_79,
            StorageLive(_106),
            StorageLive(_107),
            _107 = const control::tag::Tag::DELETED,
            _106 = &_107,
            _104 = (move _105, move _106),
            StorageDead(_106),
            StorageDead(_105),
            PlaceMention(_104),
            StorageLive(_108),
            _108 = (_104.0: &control::tag::Tag),
            StorageLive(_109),
            _109 = (_104.1: &control::tag::Tag),
            StorageLive(_110),
            StorageLive(_111),
            _111 = &(*_108),
            StorageLive(_112),
            _112 = &(*_109),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#120),
                    scope: scope[9],
                },
                kind: _110 = <control::tag::Tag as core::cmp::PartialEq>::eq(move _111, move _112) -> [return: bb44, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#120),
                    scope: scope[9],
                },
                kind: switchInt(move _110) -> [0: bb46, otherwise: bb45],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_111),
            _103 = const (),
            StorageDead(_110),
            StorageDead(_109),
            StorageDead(_108),
            StorageDead(_107),
            StorageDead(_104),
            StorageDead(_103),
            _101 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#118),
                    scope: scope[8],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_112),
            StorageDead(_111),
            StorageLive(_114),
            _114 = core::panicking::AssertKind::Eq,
            FakeRead(ForLet(None), _114),
            StorageLive(_115),
            StorageLive(_116),
            _116 = move _114,
            StorageLive(_117),
            StorageLive(_118),
            _118 = &(*_108),
            _117 = &(*_118),
            StorageLive(_119),
            StorageLive(_120),
            _120 = &(*_109),
            _119 = &(*_120),
            StorageLive(_121),
            _121 = core::option::Option::<core::fmt::Arguments<'_>>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#120),
                    scope: scope[10],
                },
                kind: _115 = core::panicking::assert_failed::<control::tag::Tag, control::tag::Tag>(move _116, move _117, move _119, move _121) -> bb60,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _101 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#118),
                    scope: scope[8],
                },
                kind: goto -> bb48,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_102),
            StorageDead(_101),
            StorageLive(_122),
            StorageLive(_123),
            _123 = _37,
            StorageLive(_124),
            _124 = _73,
            StorageLive(_125),
            _125 = _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2907:21: 2907:68 (#0),
                    scope: scope[8],
                },
                kind: _122 = core::ptr::swap_nonoverlapping::<u8>(move _123, move _124, move _125) -> [return: bb49, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_125),
            StorageDead(_124),
            StorageDead(_123),
            StorageDead(_122),
            StorageDead(_85),
            StorageDead(_79),
            StorageDead(_73),
            StorageDead(_51),
            StorageDead(_44),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[4],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_51),
            StorageDead(_44),
            StorageDead(_43),
            StorageDead(_37),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[3],
                },
                kind: goto -> bb51,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_22),
            StorageDead(_20),
            StorageDead(_19),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[2],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_129),
            _127 = ((*(*_128)).0: usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2913:29: 2913:71 (#0),
                    scope: scope[1],
                },
                kind: _126 = raw::bucket_mask_to_capacity(move _127) -> [return: bb53, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_127),
            StorageLive(_130),
            StorageLive(_131),
            StorageLive(_132),
            _132 = &_7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2913:74: 2913:85 (#0),
                    scope: scope[1],
                },
                kind: _131 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::Deref>::deref(move _132) -> [return: bb54, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_132),
            _130 = ((*(*_131)).3: usize),
            _133 = SubWithOverflow(_126, _130),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2913:29: 2913:85 (#0),
                    scope: scope[1],
                },
                kind: assert(!move (_133.1: bool), "attempt to compute `{} - {}`, which would overflow", move _126, move _130) -> [success: bb55, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_134),
            StorageLive(_135),
            _135 = &mut _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2913:9: 2913:26 (#0),
                    scope: scope[1],
                },
                kind: _134 = <scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}> as core::ops::DerefMut>::deref_mut(move _135) -> [return: bb56, unwind: bb60],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_135),
            ((*(*_134)).2: usize) = move (_133.0: usize),
            StorageDead(_130),
            StorageDead(_126),
            StorageDead(_134),
            StorageDead(_131),
            StorageDead(_128),
            StorageLive(_136),
            StorageLive(_137),
            _137 = move _7,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2915:9: 2915:27 (#0),
                    scope: scope[1],
                },
                kind: _136 = core::mem::forget::<scopeguard::ScopeGuard<&mut raw::RawTableInner, {closure@src/raw/mod.rs:2847:37: 2847:49}>>(move _137) -> [return: bb57, unwind: bb59],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_137),
            StorageDead(_136),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2916:5: 2916:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb58, unwind: bb61],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2916:6: 2916:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2915:26: 2915:27 (#0),
                    scope: scope[1],
                },
                kind: drop(_137) -> [return: bb60, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2916:5: 2916:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb61, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2835:5: 2916:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2840:6: 2840:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2836:9: 2836:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2837:17: 2837:49 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2837:9: 2837:15 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2837:9: 2837:15 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2725 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::'_#2), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2725 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::'_#2), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2837:9: 2837:15 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2838:18: 2838:23 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2838:9: 2838:16 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2838:9: 2838:16 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2838:9: 2838:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2839:15: 2839:41 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2839:9: 2839:13 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2839:9: 2839:13 (#0),
                    },
                ),
            ),
        ),
        ty: core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2839:9: 2839:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2845:9: 2845:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2845:9: 2845:13 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2847:25: 2858:11 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2847:13: 2847:22 (#0),
                    },
                ),
            ),
        ),
        ty: scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2847:13: 2847:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2847:31: 2847:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}),
            [
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] },
                (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2847:37: 2858:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:9: 2911:10 (#342),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:29: 2863:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:29: 2863:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:29: 2863:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:29: 2863:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _11,
                                ),
                                src/raw/mod.rs:2863:26: 2863:44 (#343),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2863:26: 2863:44 (#343),
                    },
                ),
            ),
        ),
        ty: core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2835:5: 2916:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut core::ops::Range<usize>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:26: 2863:44 (#343),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:9: 2911:10 (#342),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:9: 2911:10 (#342),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _20,
                                ),
                                src/raw/mod.rs:2863:26: 2863:44 (#343),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2863:21: 2863:22 (#344),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2863:21: 2863:22 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:13: 2866:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:16: 2864:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:16: 2864:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: *mut control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:17: 2864:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:17: 2864:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:17: 2864:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:17: 2864:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:28: 2864:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:34: 2864:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:46 ~ hashbrown[7d72]::control::tag::{impl#0}::DELETED),
            },
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:34: 2864:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2864:47: 2866:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2868:23: 2868:51 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2868:17: 2868:20 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:17: 2868:20 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:23: 2868:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:23: 2868:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:23: 2868:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:40: 2868:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2868:43: 2868:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2870:13: 2910:14 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2870:13: 2910:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2872:28: 2872:45 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2872:21: 2872:25 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:21: 2872:25 (#0),
            scope: scope[4],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} dyn [Binder { value: Trait(core::ops::Fn<(&mut raw::RawTableInner, usize)>), bound_vars: [Region(BrNamed(DefId(0:2725 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::'_#2), '_))] }, Binder { value: Projection(Output = u64), bound_vars: [Region(BrNamed(DefId(0:2725 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::'_#2), '_))] }] + '{erased},
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:28: 2872:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} mut raw::RawTableInner, usize),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:28: 2872:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:35: 2872:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:35: 2872:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:36: 2872:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2872:43: 2872:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2878:29: 2878:63 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2878:21: 2878:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:21: 2878:26 (#0),
            scope: scope[5],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:29: 2878:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:29: 2878:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:29: 2878:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:29: 2878:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2878:52: 2878:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:17: 2888:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:20: 2885:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:27: 2885:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:27: 2885:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:27: 2885:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:27: 2885:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:50: 2885:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:53: 2885:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:60: 2885:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2885:67: 2888:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:21: 2886:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:21: 2886:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:21: 2886:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:21: 2886:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:41: 2886:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2886:44: 2886:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2890:31: 2890:63 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2890:21: 2890:28 (#0),
                    },
                ),
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:21: 2890:28 (#0),
            scope: scope[6],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:31: 2890:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:31: 2890:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:31: 2890:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:48: 2890:53 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2890:55: 2890:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2894:33: 2894:69 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2894:21: 2894:30 (#0),
                    },
                ),
            ),
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:21: 2894:30 (#0),
            scope: scope[7],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:33: 2894:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:33: 2894:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:33: 2894:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:57: 2894:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2894:64: 2894:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2895:17: 2909:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2895:20: 2895:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2895:17: 2909:18 (#0),
                },
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2895:20: 2895:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2895:17: 2909:18 (#0),
                },
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2895:33: 2895:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:45 ~ hashbrown[7d72]::control::tag::{impl#0}::EMPTY),
            },
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2895:33: 2895:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2895:17: 2909:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2895:44: 2902:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2896:21: 2896:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2896:21: 2896:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2896:21: 2896:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2896:21: 2896:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2896:36: 2896:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2900:21: 2900:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2900:46: 2900:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2900:46: 2900:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2900:51: 2900:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2900:60: 2900:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:2895:17: 2909:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2902:24: 2909:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:9: 348:10 (#118),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:346:12: 346:42 (#119),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:9: 48:10 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (&'{erased} control::tag::Tag, &'{erased} control::tag::Tag),
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:16: 38:22 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:24: 38:31 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            ConstRef {
                def_id: DefId(0:46 ~ hashbrown[7d72]::control::tag::{impl#0}::DELETED),
            },
        ),
        ty: control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2906:49: 2906:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#120),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#120),
                    },
                ),
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:14: 39:22 (#120),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _104,
                                ),
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:38:15: 38:32 (#120),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:13: 39:34 (#120),
                    },
                ),
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:39:24: 39:33 (#120),
            scope: scope[8],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#120),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:21: 40:46 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#120),
                },
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:22: 40:31 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#120),
                },
            ),
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:35: 40:45 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:17: 46:18 (#120),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:40:47: 46:18 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:32: 41:65 (#120),
                            ),
                        ),
                        pat_span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#120),
                    },
                ),
            ),
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:41:25: 41:29 (#120),
            scope: scope[9],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:21: 45:114 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::panicking::AssertKind,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:54: 45:58 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:60: 45:70 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} control::tag::Tag,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:72: 45:83 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<core::fmt::Arguments<'{erased}>>,
        user_ty: None,
        source_info: SourceInfo {
            span: /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs:45:85: 45:113 (#120),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2907:21: 2907:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2907:46: 2907:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2907:51: 2907:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2907:60: 2907:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:29: 2913:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:53: 2913:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:53: 2913:70 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:53: 2913:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:74: 2913:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:74: 2913:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:74: 2913:79 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (usize, bool),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:29: 2913:85 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:9: 2913:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2913:9: 2913:14 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2915:9: 2915:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: scopeguard::ScopeGuard<&'{erased} mut raw::RawTableInner, Closure(DefId(0:288 ~ hashbrown[7d72]::raw::{impl#12}::rehash_in_place::{closure#0}), [i16, Binder { value: extern "RustCall" fn((&'^0 mut &'{erased} mut raw::RawTableInner,)), bound_vars: [Region(BrAnon)] }, (core::option::Option<Binder { value: unsafe fn(*mut u8), bound_vars: [] }>, usize)])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2915:21: 2915:26 (#0),
            scope: scope[0],
        },
    },
]