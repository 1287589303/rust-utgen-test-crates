[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            _3 = move _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2123:9: 2123:24 (#0),
                    scope: scope[0],
                },
                kind: _2 = <[(K, V); N] as core::iter::IntoIterator>::into_iter(move _3) -> [return: bb1, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2123:9: 2123:34 (#0),
                    scope: scope[0],
                },
                kind: _0 = <core::array::IntoIter<(K, V), N> as core::iter::Iterator>::collect::<map::HashMap<K, V, foldhash::fast::RandomState, A>>(move _2) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2124:5: 2124:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb3, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2124:6: 2124:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2123:33: 2123:34 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2123:23: 2123:24 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb6, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2124:5: 2124:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb7, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2122:5: 2124:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: map::HashMap<K/#0, V/#1, foldhash::fast::RandomState, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2122:34: 2122:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/map.rs:2122:18: 2122:29 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/map.rs:2122:13: 2122:16 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:2122:13: 2122:16 (#0),
                    },
                ),
            ),
        ),
        ty: [(K/#0, V/#1); N/#3],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2122:13: 2122:16 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2123:9: 2123:34 (#0),
                },
            ),
        ),
        ty: core::array::IntoIter<(K/#0, V/#1), N/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2123:9: 2123:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2123:9: 2123:34 (#0),
                },
            ),
        ),
        ty: [(K/#0, V/#1); N/#3],
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2123:9: 2123:12 (#0),
            scope: scope[0],
        },
    },
]