[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &((*_1).0: raw::RawTable<T, A>),
            StorageLive(_5),
            _5 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:831:29: 831:53 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTable::<T, A>::iter_hash(move _4, move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageLive(_6),
            _6 = core::marker::PhantomData::<&mut T>,
            _0 = table::IterHashMut::<'_, T> { inner: move _3, marker: move _6 },
            StorageDead(_6),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:834:6: 834:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:829:5: 834:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: table::IterHashMut<'{erased}, T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:829:51: 829:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::HashTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:829:26: 829:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:829:43: 829:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:829:37: 829:41 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:829:37: 829:41 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:829:37: 829:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::RawIterHash<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:831:20: 831:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:831:29: 831:53 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<T/#0, A/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:831:29: 831:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:831:29: 831:53 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:831:48: 831:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: core::marker::PhantomData<&'{erased} mut T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:832:21: 832:32 (#0),
            scope: scope[0],
        },
    },
]