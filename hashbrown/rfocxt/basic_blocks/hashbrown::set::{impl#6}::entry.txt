[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::HashMap<T, (), S, A>),
            StorageLive(_5),
            _5 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1001:15: 1001:36 (#0),
                    scope: scope[0],
                },
                kind: _3 = map::HashMap::<T, (), S, A>::entry(move _4, move _5) -> [return: bb1, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            PlaceMention(_3),
            _6 = discriminant(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1001:9: 1001:36 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _6) -> [0: bb3, 1: bb4, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1001:15: 1001:36 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1002:13: 1002:40 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = move ((_3 as Vacant).0: map::VacantEntry<'_, T, (), S, A>),
            StorageLive(_11),
            StorageLive(_12),
            _12 = move _10,
            _11 = set::VacantEntry::<'_, T, S, A> { inner: move _12 },
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:83: 1003:84 (#0),
                    scope: scope[2],
                },
                kind: drop(_12) -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            _7 = move ((_3 as Occupied).0: map::OccupiedEntry<'_, T, (), S, A>),
            StorageLive(_8),
            StorageLive(_9),
            _9 = move _7,
            _8 = set::OccupiedEntry::<'_, T, S, A> { inner: move _9 },
            StorageDead(_9),
            _0 = set::Entry::<'_, T, S, A>::Occupied(move _8),
            StorageDead(_8),
            StorageDead(_7),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1002:90: 1002:91 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _0 = set::Entry::<'_, T, S, A>::Vacant(move _11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:84: 1003:85 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb7, unwind: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:84: 1003:85 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:84: 1003:85 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1005:5: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb10, unwind: bb16],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1005:5: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb11, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1005:6: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:84: 1003:85 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1003:84: 1003:85 (#0),
                    scope: scope[0],
                },
                kind: drop(_10) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1005:5: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1001:35: 1001:36 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb16, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1005:5: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb17, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1000:5: 1005:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: set::Entry<'{erased}, T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1000:42: 1000:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1000:18: 1000:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1000:36: 1000:37 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1000:29: 1000:34 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1000:29: 1000:34 (#0),
                    },
                ),
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1000:29: 1000:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1001:9: 1004:10 (#0),
                },
            ),
        ),
        ty: map::Entry<'{erased}, T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1001:15: 1001:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1001:9: 1004:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::HashMap<T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1001:15: 1001:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/set.rs:1001:9: 1004:10 (#0),
                },
            ),
        ),
        ty: T/#0,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1001:30: 1001:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1002:13: 1002:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/set.rs:1001:15: 1001:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1002:13: 1002:40 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1002:34: 1002:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: set::OccupiedEntry<'{erased}, T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1002:60: 1002:90 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::OccupiedEntry<'{erased}, T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1002:83: 1002:88 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/set.rs:1001:15: 1001:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1003:13: 1003:38 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntry<'{erased}, T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1003:32: 1003:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: set::VacantEntry<'{erased}, T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1003:56: 1003:84 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: map::VacantEntry<'{erased}, T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1003:77: 1003:82 (#0),
            scope: scope[0],
        },
    },
]