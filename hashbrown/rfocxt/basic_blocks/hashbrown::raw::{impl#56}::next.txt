[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &mut ((*_1).0: raw::RawIter<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:25: 4126:39 (#426),
                    scope: scope[0],
                },
                kind: _4 = <&mut raw::RawIter<T> as core::iter::IntoIterator>::into_iter(move _5) -> [return: bb1, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            PlaceMention(_4),
            StorageLive(_6),
            _6 = move _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            StorageLive(_11),
            _11 = &mut _6,
            _10 = &mut (*_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:25: 4126:39 (#426),
                    scope: scope[1],
                },
                kind: _9 = <&mut raw::RawIter<T> as core::iter::Iterator>::next(move _10) -> [return: bb4, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            PlaceMention(_9),
            _12 = discriminant(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:25: 4126:39 (#426),
                    scope: scope[1],
                },
                kind: switchInt(move _12) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:25: 4126:39 (#426),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            _14 = move ((_9 as Some).0: raw::Bucket<T>),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &mut _2,
            StorageLive(_17),
            StorageLive(_18),
            StorageLive(_19),
            StorageLive(_20),
            _20 = &_14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4127:22: 4127:35 (#0),
                    scope: scope[2],
                },
                kind: _19 = raw::Bucket::<T>::as_mut::<'_>(move _20) -> [return: bb9, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = const (),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
            _0 = core::option::Option::<T>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4133:5: 4133:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _18 = &mut (*_19),
            StorageDead(_20),
            _17 = (move _18,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4127:20: 4127:36 (#0),
                    scope: scope[2],
                },
                kind: _15 = <F as core::ops::FnMut<(&mut T,)>>::call_mut(move _16, move _17) -> [return: bb10, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4127:20: 4127:36 (#0),
                    scope: scope[2],
                },
                kind: switchInt(move _15) -> [0: bb14, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            StorageLive(_22),
            StorageLive(_23),
            StorageLive(_24),
            _24 = &mut (*((*_1).1: &mut raw::RawTable<T, A>)),
            StorageLive(_25),
            _25 = move _14,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4128:33: 4128:56 (#0),
                    scope: scope[2],
                },
                kind: _23 = raw::RawTable::<T, A>::remove(move _24, move _25) -> [return: bb12, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_25),
            StorageDead(_24),
            _22 = move (_23.0: T),
            _0 = core::option::Option::<T>::Some(move _22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4128:58: 4128:59 (#0),
                    scope: scope[2],
                },
                kind: drop(_22) -> [return: bb13, unwind: bb17],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_22),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4128:59: 4128:60 (#0),
                    scope: scope[2],
                },
                kind: drop(_23) -> [return: bb15, unwind: bb18],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            StorageDead(_16),
            _8 = const (),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            _7 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_23),
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_11),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_6),
            StorageDead(_4),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4133:5: 4133:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb16, unwind: bb19],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4133:6: 4133:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4128:59: 4128:60 (#0),
                    scope: scope[2],
                },
                kind: drop(_23) -> [return: bb18, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4133:5: 4133:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb19, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:4121:5: 4133:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4121:51: 4121:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawExtractIf<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4121:27: 4121:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:4121:45: 4121:46 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:4121:38: 4121:43 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:4121:38: 4121:43 (#0),
                    },
                ),
            ),
        ),
        ty: F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4121:38: 4121:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                },
            ),
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:13: 4130:14 (#425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4126:13: 4130:14 (#425),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw/mod.rs:4126:25: 4126:39 (#426),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:4126:25: 4126:39 (#426),
                    },
                ),
            ),
        ),
        ty: &'{erased} mut raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4121:5: 4133:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<raw::Bucket<T/#1>>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut &'{erased} mut raw::RawIter<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:25: 4126:39 (#426),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:13: 4130:14 (#425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:13: 4130:14 (#425),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _9,
                                ),
                                src/raw/mod.rs:4126:25: 4126:39 (#426),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:4126:17: 4126:21 (#427),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4126:17: 4126:21 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:20: 4127:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:20: 4127:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: (&'{erased} mut T/#1,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:20: 4127:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:22: 4127:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:22: 4127:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:22: 4127:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/raw/mod.rs:4127:17: 4129:18 (#0),
                },
            ),
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4127:37: 4129:18 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4128:33: 4128:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#1, raw::InsertSlot),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4128:33: 4128:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4128:33: 4128:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:4128:51: 4128:55 (#0),
            scope: scope[0],
        },
    },
]