[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = const false,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:75:12: 75:37 (#9),
                    scope: scope[0],
                },
                kind: switchInt(move _2) -> [0: bb10, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _5 = Eq(const 8_usize, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:75:41: 75:59 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const control::group::sse2::BITMASK_STRIDE) -> [success: bb2, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _4 = Rem(const control::group::sse2::BITMASK_STRIDE, const 8_usize),
            _3 = Eq(move _4, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:75:41: 75:64 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _3) -> [0: bb9, otherwise: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            _9 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:77:70: 77:83 (#0),
                    scope: scope[0],
                },
                kind: _8 = core::num::NonZero::<u16>::get(move _9) -> [return: bb4, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:77:70: 77:96 (#0),
                    scope: scope[0],
                },
                kind: _7 = core::num::<impl u16>::swap_bytes(move _8) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:77:36: 77:97 (#0),
                    scope: scope[0],
                },
                kind: _6 = core::num::NonZero::<u16>::new_unchecked(move _7) -> [return: bb6, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            FakeRead(ForLet(None), _6),
            StorageLive(_10),
            StorageLive(_11),
            StorageLive(_12),
            _12 = _6,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:78:13: 78:36 (#0),
                    scope: scope[1],
                },
                kind: _11 = core::num::NonZero::<u16>::leading_zeros(move _12) -> [return: bb7, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_12),
            _10 = move _11 as usize (IntToInt),
            StorageDead(_11),
            _13 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:78:13: 78:62 (#0),
                    scope: scope[1],
                },
                kind: assert(!move _13, "attempt to divide `{}` by zero", _10) -> [success: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = Div(move _10, const control::group::sse2::BITMASK_STRIDE),
            StorageDead(_10),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:75:9: 81:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: no-location (#0),
                    scope: scope[0],
                },
                kind: goto -> bb10,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = _1,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:80:13: 80:37 (#0),
                    scope: scope[0],
                },
                kind: _15 = core::num::NonZero::<u16>::trailing_zeros(move _16) -> [return: bb11, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_16),
            _14 = move _15 as usize (IntToInt),
            StorageDead(_15),
            _17 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:80:13: 80:63 (#0),
                    scope: scope[0],
                },
                kind: assert(!move _17, "attempt to divide `{}` by zero", _14) -> [success: bb12, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = Div(move _14, const control::group::sse2::BITMASK_STRIDE),
            StorageDead(_14),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:75:9: 81:10 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb13,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:82:6: 82:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/control/bitmask.rs:74:5: 82:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:74:63: 74:68 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/control/bitmask.rs:74:40: 74:58 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/control/bitmask.rs:74:31: 74:38 (#0),
                            ),
                        ),
                        pat_span: src/control/bitmask.rs:74:31: 74:38 (#0),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:74:31: 74:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:75:9: 81:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:75:12: 75:37 (#9),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:75:9: 81:10 (#0),
                },
            ),
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:75:41: 75:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:75:9: 81:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:75:41: 75:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:75:41: 75:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/control/bitmask.rs:77:27: 77:99 (#0),
                            ),
                        ),
                        pat_span: src/control/bitmask.rs:77:17: 77:24 (#0),
                    },
                ),
            ),
        ),
        ty: core::num::NonZero<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:77:17: 77:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:77:36: 77:97 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:77:70: 77:96 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:77:36: 77:97 (#0),
                },
            ),
        ),
        ty: u16,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:77:70: 77:83 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:77:36: 77:97 (#0),
                },
            ),
        ),
        ty: core::num::NonZero<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:77:70: 77:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:78:13: 78:62 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:78:13: 78:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:78:13: 78:62 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:78:13: 78:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:78:13: 78:62 (#0),
                },
            ),
        ),
        ty: core::num::NonZero<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:78:13: 78:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:78:13: 78:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:80:13: 80:63 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:80:13: 80:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:80:13: 80:63 (#0),
                },
            ),
        ),
        ty: u32,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:80:13: 80:37 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/control/bitmask.rs:80:13: 80:63 (#0),
                },
            ),
        ),
        ty: core::num::NonZero<u16>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:80:13: 80:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/control/bitmask.rs:80:13: 80:63 (#0),
            scope: scope[0],
        },
    },
]