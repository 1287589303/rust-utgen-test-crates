[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: map::HashMap<T, (), S, A>),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:25: 1308:41 (#0),
                    scope: scope[0],
                },
                kind: _6 = <I as core::iter::IntoIterator>::into_iter(move _7) -> [return: bb1, unwind: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageLive(_8),
            _8 = {closure@src/set.rs:1308:46: 1308:49},
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:25: 1308:58 (#0),
                    scope: scope[0],
                },
                kind: _5 = <<I as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::map::<(T, ()), {closure@src/set.rs:1308:46: 1308:49}>(move _6, move _8) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_6),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:9: 1308:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = <map::HashMap<T, (), S, A> as core::iter::Extend<(T, ())>>::extend::<core::iter::Map<<I as core::iter::IntoIterator>::IntoIter, {closure@src/set.rs:1308:46: 1308:49}>>(move _4, move _5) -> [return: bb3, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_5),
            StorageDead(_4),
            StorageDead(_3),
            _0 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1309:5: 1309:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb4, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1309:6: 1309:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:58: 1308:59 (#0),
                    scope: scope[0],
                },
                kind: drop(_5) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:57: 1308:58 (#0),
                    scope: scope[0],
                },
                kind: drop(_6) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1308:40: 1308:41 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb8, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1309:5: 1309:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1307:5: 1309:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1307:61: 1307:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#0, S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1307:42: 1307:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1307:59: 1307:60 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1307:53: 1307:57 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1307:53: 1307:57 (#0),
                    },
                ),
            ),
        ),
        ty: I/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1307:53: 1307:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:9: 1308:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut map::HashMap<T/#0, (), S/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:9: 1308:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::iter::Map<Alias(Projection, AliasTy { args: [I/#3], def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter) }), Closure(DefId(0:1736 ~ hashbrown[7d72]::set::{impl#13}::extend::{closure#0}), [T/#0, S/#1, A/#2, I/#3, i16, Binder { value: extern "RustCall" fn((T/#0,)) -> (T/#0, ()), bound_vars: [] }, ()])>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:25: 1308:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Alias(
            Projection,
            AliasTy {
                args: [
                    I/#3,
                ],
                def_id: DefId(1:8327 ~ core[a245]::iter::traits::collect::IntoIterator::IntoIter),
            },
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:25: 1308:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: I/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:25: 1308:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: Closure(
            DefId(0:1736 ~ hashbrown[7d72]::set::{impl#13}::extend::{closure#0}),
            [
                T/#0,
                S/#1,
                A/#2,
                I/#3,
                i16,
                Binder { value: extern "RustCall" fn((T/#0,)) -> (T/#0, ()), bound_vars: [] },
                (),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1308:46: 1308:57 (#0),
            scope: scope[0],
        },
    },
]