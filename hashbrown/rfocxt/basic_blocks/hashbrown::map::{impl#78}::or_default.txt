[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            PlaceMention(_1),
            _4 = discriminant(_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3745:9: 3745:19 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3745:15: 3745:19 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3746:13: 3746:35 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb4, imaginary: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_8),
            _8 = move ((_1 as Vacant).0: map::VacantEntry<'_, K, V, S, A>),
            StorageLive(_9),
            StorageLive(_10),
            _10 = move _8,
            StorageLive(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:50: 3747:68 (#0),
                    scope: scope[2],
                },
                kind: _11 = <V as core::default::Default>::default() -> [return: bb6, unwind: bb12],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_5),
            _5 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>),
            StorageLive(_6),
            StorageLive(_7),
            _7 = move _5,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3746:39: 3746:55 (#0),
                    scope: scope[1],
                },
                kind: _6 = map::OccupiedEntry::<'_, K, V, S, A>::into_mut(move _7) -> [return: bb5, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_6),
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3746:54: 3746:55 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:37: 3747:69 (#0),
                    scope: scope[2],
                },
                kind: _9 = map::VacantEntry::<'_, K, V, S, A>::insert(move _10, move _11) -> [return: bb7, unwind: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_9),
            StorageDead(_11),
            StorageDead(_10),
            StorageDead(_9),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:68: 3747:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb8, unwind: bb14],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:68: 3747:69 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb9,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _2 = &mut (*_3),
            _0 = &mut (*_2),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3749:5: 3749:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb10, unwind: bb15],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3749:6: 3749:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:68: 3747:69 (#0),
                    scope: scope[2],
                },
                kind: drop(_11) -> [return: bb12, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:68: 3747:69 (#0),
                    scope: scope[2],
                },
                kind: drop(_10) -> [return: bb13, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3747:68: 3747:69 (#0),
                    scope: scope[0],
                },
                kind: drop(_8) -> [return: bb14, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3749:5: 3749:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_1) -> [return: bb15, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:3740:5: 3749:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3740:32: 3740:41 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: map::Entry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3740:23: 3740:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3745:9: 3748:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3745:9: 3748:10 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3746:13: 3746:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:3745:15: 3745:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3746:13: 3746:35 (#0),
                    },
                ),
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3746:29: 3746:34 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3746:39: 3746:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: map::OccupiedEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3746:39: 3746:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _1,
                                ),
                                src/map.rs:3745:15: 3745:19 (#0),
                            ),
                        ),
                        pat_span: src/map.rs:3747:13: 3747:33 (#0),
                    },
                ),
            ),
        ),
        ty: map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3747:27: 3747:32 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: &'{erased} mut V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3747:37: 3747:69 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: map::VacantEntry<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3747:37: 3747:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:3745:9: 3748:10 (#0),
                },
            ),
        ),
        ty: V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:3747:50: 3747:68 (#0),
            scope: scope[0],
        },
    },
]