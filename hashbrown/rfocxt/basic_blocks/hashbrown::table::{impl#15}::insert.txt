[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*(_1.2: &mut table::HashTable<T, A>)).0: raw::RawTable<T, A>),
            StorageLive(_5),
            _5 = (_1.0: u64),
            StorageLive(_6),
            _6 = move (_1.1: raw::InsertSlot),
            StorageLive(_7),
            _7 = move _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1865:13: 1867:68 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTable::<T, A>::insert_in_slot(move _4, move _5, move _6, move _7) -> [return: bb1, unwind: bb3],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            StorageDead(_4),
            FakeRead(ForLet(None), _3),
            StorageLive(_8),
            _8 = (_1.0: u64),
            StorageLive(_9),
            _9 = move _3,
            StorageLive(_10),
            _10 = &mut (*(_1.2: &mut table::HashTable<T, A>)),
            _0 = table::OccupiedEntry::<'_, T, A> { hash: move _8, bucket: move _9, table: move _10 },
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_8),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1874:5: 1874:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb2, unwind: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1874:6: 1874:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1867:67: 1867:68 (#0),
                    scope: scope[0],
                },
                kind: drop(_7) -> [return: bb4, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1874:5: 1874:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_2) -> [return: bb5, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1863:5: 1874:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1863:38: 1863:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: table::VacantEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1863:19: 1863:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/table.rs:1863:32: 1863:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:1863:25: 1863:30 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1863:25: 1863:30 (#0),
                    },
                ),
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1863:25: 1863:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/table.rs:1864:22: 1868:10 (#0),
                            ),
                        ),
                        pat_span: src/table.rs:1864:13: 1864:19 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1864:13: 1864:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1865:13: 1867:68 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawTable<T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1865:13: 1866:21 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1865:13: 1867:68 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1867:33: 1867:42 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1865:13: 1867:68 (#0),
                },
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1867:44: 1867:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1865:13: 1867:68 (#0),
                },
            ),
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1867:62: 1867:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1870:19: 1870:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1871:13: 1871:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: &'{erased} mut table::HashTable<T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1872:20: 1872:30 (#0),
            scope: scope[0],
        },
    },
]