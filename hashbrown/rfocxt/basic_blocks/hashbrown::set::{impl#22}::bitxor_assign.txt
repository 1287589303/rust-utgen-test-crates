[
    BasicBlockData {
        statements: [
            StorageLive(_3),
            StorageLive(_4),
            _4 = _2,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:21: 1587:24 (#453),
                    scope: scope[0],
                },
                kind: _3 = <&set::HashSet<T, S, A> as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
            PlaceMention(_3),
            StorageLive(_5),
            _5 = move _3,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:9: 1599:10 (#452),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:9: 1599:10 (#452),
                    scope: scope[1],
                },
                kind: falseUnwind -> [real: bb3, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_7),
            StorageLive(_8),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &mut _5,
            _9 = &mut (*_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:21: 1587:24 (#453),
                    scope: scope[1],
                },
                kind: _8 = <set::Iter<'_, T> as core::iter::Iterator>::next(move _9) -> [return: bb4, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_9),
            PlaceMention(_8),
            _11 = discriminant(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:21: 1587:24 (#453),
                    scope: scope[1],
                },
                kind: switchInt(move _11) -> [0: bb6, 1: bb7, otherwise: bb5],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:21: 1587:24 (#453),
                    scope: scope[1],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:9: 1599:10 (#452),
                    scope: scope[1],
                },
                kind: falseEdge -> [real: bb8, imaginary: bb7],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_13),
            _13 = ((_8 as Some).0: &T),
            StorageLive(_14),
            StorageLive(_15),
            StorageLive(_16),
            _16 = &(((*_1).0: map::HashMap<T, (), S, A>).0: S),
            _15 = &(*_16),
            StorageLive(_17),
            _17 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1588:24: 1588:63 (#0),
                    scope: scope[2],
                },
                kind: _14 = map::make_hash::<T, S>(move _15, move _17) -> [return: bb9, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = const (),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            StorageDead(_5),
            StorageDead(_3),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1600:6: 1600:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_17),
            StorageDead(_15),
            FakeRead(ForLet(None), _14),
            StorageDead(_16),
            StorageLive(_18),
            StorageLive(_19),
            _19 = &mut ((*_1).0: map::HashMap<T, (), S, A>),
            StorageLive(_20),
            _20 = _14,
            StorageLive(_21),
            _21 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1589:19: 1589:64 (#0),
                    scope: scope[3],
                },
                kind: _18 = map::HashMap::<T, (), S, A>::find_or_find_insert_slot::<T>(move _19, move _20, move _21) -> [return: bb10, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_21),
            StorageDead(_20),
            StorageDead(_19),
            PlaceMention(_18),
            _22 = discriminant(_18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1589:13: 1589:64 (#0),
                    scope: scope[3],
                },
                kind: switchInt(move _22) -> [0: bb12, 1: bb13, otherwise: bb11],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _18),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1589:19: 1589:64 (#0),
                    scope: scope[3],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1590:17: 1590:27 (#0),
                    scope: scope[3],
                },
                kind: falseEdge -> [real: bb14, imaginary: bb13],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_27),
            _27 = move ((_18 as Err).0: raw::InsertSlot),
            StorageLive(_28),
            StorageLive(_29),
            _29 = &mut (((*_1).0: map::HashMap<T, (), S, A>).1: raw::RawTable<(T, ()), A>),
            StorageLive(_30),
            _30 = _14,
            StorageLive(_31),
            _31 = move _27,
            StorageLive(_32),
            StorageLive(_33),
            StorageLive(_34),
            _34 = &(*_13),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1596:54: 1596:66 (#0),
                    scope: scope[5],
                },
                kind: _33 = <T as core::clone::Clone>::clone(move _34) -> [return: bb17, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_23),
            _23 = move ((_18 as Ok).0: raw::Bucket<(T, ())>),
            StorageLive(_24),
            StorageLive(_25),
            _25 = &mut (((*_1).0: map::HashMap<T, (), S, A>).1: raw::RawTable<(T, ()), A>),
            StorageLive(_26),
            _26 = move _23,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1591:21: 1591:50 (#0),
                    scope: scope[4],
                },
                kind: _24 = raw::RawTable::<(T, ()), A>::remove(move _25, move _26) -> [return: bb15, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_26),
            StorageDead(_25),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1591:50: 1591:51 (#0),
                    scope: scope[4],
                },
                kind: drop(_24) -> [return: bb16, unwind: bb22],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_24),
            _7 = const (),
            StorageDead(_23),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1592:17: 1592:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_34),
            StorageLive(_35),
            _35 = (),
            _32 = (move _33, move _35),
            StorageDead(_35),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1596:70: 1596:71 (#0),
                    scope: scope[5],
                },
                kind: drop(_33) -> [return: bb18, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_33),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1594:21: 1596:72 (#0),
                    scope: scope[5],
                },
                kind: _28 = raw::RawTable::<(T, ()), A>::insert_in_slot(move _29, move _30, move _31, move _32) -> [return: bb19, unwind: bb21],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_32),
            StorageDead(_31),
            StorageDead(_30),
            StorageDead(_29),
            StorageDead(_28),
            _7 = const (),
            StorageDead(_27),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1597:17: 1597:18 (#0),
                    scope: scope[3],
                },
                kind: goto -> bb20,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_14),
            StorageDead(_18),
            StorageDead(_13),
            StorageDead(_10),
            StorageDead(_8),
            StorageDead(_7),
            _6 = const (),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1587:9: 1599:10 (#452),
                    scope: scope[1],
                },
                kind: goto -> bb2,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1596:71: 1596:72 (#0),
                    scope: scope[5],
                },
                kind: drop(_32) -> [return: bb22, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/set.rs:1586:5: 1600:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1586:56: 1586:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1586:22: 1586:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/set.rs:1586:38: 1586:55 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1586:33: 1586:36 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1586:33: 1586:36 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1586:33: 1586:36 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1587:9: 1599:10 (#452),
                },
            ),
        ),
        ty: set::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1587:9: 1599:10 (#452),
                },
            ),
        ),
        ty: &'{erased} set::HashSet<T/#1, S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _3,
                                ),
                                src/set.rs:1587:21: 1587:24 (#453),
                            ),
                        ),
                        pat_span: src/set.rs:1587:21: 1587:24 (#453),
                    },
                ),
            ),
        ),
        ty: set::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1586:5: 1600:6 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<&'{erased} T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut set::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut set::Iter<'{erased}, T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:21: 1587:24 (#453),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:9: 1599:10 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: !,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:9: 1599:10 (#452),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _8,
                                ),
                                src/set.rs:1587:21: 1587:24 (#453),
                            ),
                        ),
                        pat_span: src/set.rs:1587:13: 1587:17 (#454),
                    },
                ),
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1587:13: 1587:17 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/set.rs:1588:24: 1588:63 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1588:17: 1588:21 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1588:17: 1588:21 (#0),
            scope: scope[2],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1588:34: 1588:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} S/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1588:34: 1588:56 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1588:58: 1588:62 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1589:13: 1598:14 (#0),
                },
            ),
        ),
        ty: core::result::Result<raw::Bucket<(T/#1, ())>, raw::InsertSlot>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1589:19: 1589:64 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1589:13: 1598:14 (#0),
                },
            ),
        ),
        ty: &'{erased} mut map::HashMap<T/#1, (), S/#2, A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1589:19: 1589:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1589:13: 1598:14 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1589:53: 1589:57 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: true,
                    span: src/set.rs:1589:13: 1598:14 (#0),
                },
            ),
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1589:59: 1589:63 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1590:17: 1590:27 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/set.rs:1589:19: 1589:64 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1590:17: 1590:27 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<(T/#1, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1590:20: 1590:26 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: ((T/#1, ()), raw::InsertSlot),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1591:21: 1591:50 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(T/#1, ()), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1591:21: 1591:35 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<(T/#1, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1591:43: 1591:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _18,
                                ),
                                src/set.rs:1589:19: 1589:64 (#0),
                            ),
                        ),
                        pat_span: src/set.rs:1593:17: 1593:26 (#0),
                    },
                ),
            ),
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1593:21: 1593:25 (#0),
            scope: scope[3],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            Boring,
        ),
        ty: raw::Bucket<(T/#1, ())>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1594:21: 1596:72 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut raw::RawTable<(T/#1, ()), A/#3>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1594:21: 1595:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:41: 1596:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::InsertSlot,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:47: 1596:51 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (T/#1, ()),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:53: 1596:71 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:54: 1596:66 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:54: 1596:58 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: (),
        user_ty: None,
        source_info: SourceInfo {
            span: src/set.rs:1596:68: 1596:70 (#0),
            scope: scope[0],
        },
    },
]