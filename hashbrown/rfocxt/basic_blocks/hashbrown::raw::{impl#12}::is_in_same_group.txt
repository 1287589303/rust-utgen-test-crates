[
    BasicBlockData {
        statements: [
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            _7 = &(*_1),
            StorageLive(_8),
            _8 = _4,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2321:29: 2321:49 (#0),
                    scope: scope[0],
                },
                kind: _6 = raw::RawTableInner::probe_seq(move _7, move _8) -> [return: bb1, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_8),
            StorageDead(_7),
            _5 = (_6.0: usize),
            FakeRead(ForLet(None), _5),
            StorageDead(_6),
            StorageLive(_9),
            StorageLive(_10),
            _10 = &_5,
            StorageLive(_11),
            _11 = &(*_1),
            _9 = {closure@src/raw/mod.rs:2323:13: 2323:25} { probe_seq_pos: move _10, self: move _11 },
            StorageDead(_11),
            StorageDead(_10),
            FakeRead(ForLet(None), _9),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &_9,
            StorageLive(_14),
            StorageLive(_15),
            _15 = _2,
            _14 = (move _15,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2324:9: 2324:23 (#0),
                    scope: scope[2],
                },
                kind: _12 = <{closure@src/raw/mod.rs:2323:13: 2323:25} as core::ops::Fn<(usize,)>>::call(move _13, move _14) -> [return: bb2, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_15),
            StorageDead(_14),
            StorageDead(_13),
            StorageLive(_16),
            StorageLive(_17),
            _17 = &_9,
            StorageLive(_18),
            StorageLive(_19),
            _19 = _3,
            _18 = (move _19,),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2324:27: 2324:45 (#0),
                    scope: scope[2],
                },
                kind: _16 = <{closure@src/raw/mod.rs:2323:13: 2323:25} as core::ops::Fn<(usize,)>>::call(move _17, move _18) -> [return: bb3, unwind: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_19),
            StorageDead(_18),
            StorageDead(_17),
            _0 = Eq(move _12, move _16),
            StorageDead(_16),
            StorageDead(_12),
            StorageDead(_9),
            StorageDead(_5),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2325:6: 2325:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2320:5: 2325:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: bool,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2320:70: 2320:74 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2320:25: 2320:30 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2320:35: 2320:40 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2320:32: 2320:33 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2320:32: 2320:33 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2320:32: 2320:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2320:49: 2320:54 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2320:42: 2320:47 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2320:42: 2320:47 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2320:42: 2320:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw/mod.rs:2320:62: 2320:65 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2320:56: 2320:60 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2320:56: 2320:60 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2320:56: 2320:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2321:29: 2321:53 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2321:13: 2321:26 (#0),
                    },
                ),
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2321:13: 2321:26 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::ProbeSeq,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2321:29: 2321:49 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2321:29: 2321:33 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2321:44: 2321:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2323:13: 2323:93 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2322:13: 2322:24 (#0),
                    },
                ),
            ),
        ),
        ty: Closure(
            DefId(0:268 ~ hashbrown[7d72]::raw::{impl#12}::is_in_same_group::{closure#0}),
            [
                i8,
                Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] },
                (&'{erased} usize, &'{erased} raw::RawTableInner),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2322:13: 2322:24 (#0),
            scope: scope[1],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2323:13: 2323:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2323:13: 2323:93 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:9: 2324:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:268 ~ hashbrown[7d72]::raw::{impl#12}::is_in_same_group::{closure#0}), [i8, Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] }, (&'{erased} usize, &'{erased} raw::RawTableInner)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:9: 2324:20 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:9: 2324:23 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:21: 2324:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:27: 2324:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: &'{erased} Closure(DefId(0:268 ~ hashbrown[7d72]::raw::{impl#12}::is_in_same_group::{closure#0}), [i8, Binder { value: extern "RustCall" fn((usize,)) -> usize, bound_vars: [] }, (&'{erased} usize, &'{erased} raw::RawTableInner)]),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:27: 2324:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: (usize,),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:27: 2324:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2324:9: 2324:45 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2324:39: 2324:44 (#0),
            scope: scope[0],
        },
    },
]