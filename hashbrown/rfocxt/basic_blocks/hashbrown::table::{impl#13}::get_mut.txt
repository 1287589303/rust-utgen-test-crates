[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*_1).1: raw::Bucket<T>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1712:18: 1712:38 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::Bucket::<T>::as_mut::<'_>(move _5) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _3 = &mut (*_4),
            StorageDead(_5),
            _2 = &mut (*_3),
            _0 = &mut (*_2),
            StorageDead(_4),
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1713:6: 1713:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/table.rs:1711:5: 1713:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1711:34: 1711:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut table::OccupiedEntry<'{erased}, T/#1, A/#2>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1711:20: 1711:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1712:9: 1712:40 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1712:9: 1712:40 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1712:18: 1712:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1712:18: 1712:38 (#0),
                },
            ),
        ),
        ty: &'{erased} mut T/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1712:18: 1712:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/table.rs:1712:18: 1712:38 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::Bucket<T/#1>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/table.rs:1712:18: 1712:29 (#0),
            scope: scope[0],
        },
    },
]