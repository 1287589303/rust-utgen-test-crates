[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            _2 = &mut ((*_1).1: raw::RawExtractIf<'_, (K, V), A>),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &mut ((*_1).0: F),
            _3 = {closure@src/map.rs:2616:25: 2616:50} { self: move _4 },
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2616:9: 2616:66 (#0),
                    scope: scope[0],
                },
                kind: _0 = raw::RawExtractIf::<'_, (K, V), A>::next::<{closure@src/map.rs:2616:25: 2616:50}>(move _2, move _3) -> [return: bb1, unwind: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2617:6: 2617:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/map.rs:2615:5: 2617:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2615:27: 2615:45 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefMut,
                ),
            ),
        ),
        ty: &'{erased} mut map::ExtractIf<'{erased}, K/#1, V/#2, F/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2615:13: 2615:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2616:9: 2616:66 (#0),
                },
            ),
        ),
        ty: &'{erased} mut raw::RawExtractIf<'{erased}, (K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2616:9: 2616:19 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/map.rs:2616:9: 2616:66 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:875 ~ hashbrown[7d72]::map::{impl#32}::next::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                F/#3,
                A/#4,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 mut (K/#1, V/#2),)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut F/#3,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2616:25: 2616:65 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#3,
        user_ty: None,
        source_info: SourceInfo {
            span: src/map.rs:2616:25: 2616:65 (#0),
            scope: scope[0],
        },
    },
]