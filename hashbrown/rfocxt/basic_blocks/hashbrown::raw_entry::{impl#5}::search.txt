[
    BasicBlockData {
        statements: [
            StorageLive(_4),
            StorageLive(_5),
            _5 = &((*(_1.0: &map::HashMap<K, V, S, A>)).1: raw::RawTable<(K, V), A>),
            StorageLive(_6),
            _6 = _2,
            StorageLive(_7),
            StorageLive(_8),
            _8 = &mut _3,
            _7 = {closure@src/raw_entry.rs:674:40: 674:48} { is_match: move _8 },
            StorageDead(_8),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:674:15: 674:61 (#0),
                    scope: scope[0],
                },
                kind: _4 = raw::RawTable::<(K, V), A>::get::<{closure@src/raw_entry.rs:674:40: 674:48}>(move _5, move _6, move _7) -> [return: bb1, unwind: bb8],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_7),
            StorageDead(_6),
            StorageDead(_5),
            PlaceMention(_4),
            _9 = discriminant(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:674:9: 674:61 (#0),
                    scope: scope[0],
                },
                kind: switchInt(move _9) -> [0: bb4, 1: bb3, otherwise: bb2],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            FakeRead(ForMatchedPlace(None), _4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:674:15: 674:61 (#0),
                    scope: scope[0],
                },
                kind: unreachable,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:675:13: 675:31 (#0),
                    scope: scope[0],
                },
                kind: falseEdge -> [real: bb5, imaginary: bb4],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _0 = core::option::Option::<(&K, &V)>::None,
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:676:21: 676:25 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageLive(_10),
            _10 = &((*((_4 as Some).0: &(K, V))).0: K),
            StorageLive(_11),
            _11 = &((*((_4 as Some).0: &(K, V))).1: V),
            StorageLive(_12),
            StorageLive(_13),
            _13 = &(*_10),
            StorageLive(_14),
            _14 = &(*_11),
            _12 = (move _13, move _14),
            StorageDead(_14),
            StorageDead(_13),
            _0 = core::option::Option::<(&K, &V)>::Some(move _12),
            StorageDead(_12),
            StorageDead(_11),
            StorageDead(_10),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:675:52: 675:53 (#0),
                    scope: scope[0],
                },
                kind: goto -> bb6,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:678:5: 678:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb7, unwind: bb9],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:678:6: 678:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:678:5: 678:6 (#0),
                    scope: scope[0],
                },
                kind: drop(_3) -> [return: bb9, unwind terminate(cleanup)],
            },
        ),
        is_cleanup: true,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw_entry.rs:670:5: 678:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::option::Option<(&'{erased} K/#1, &'{erased} V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:670:55: 670:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    Imm,
                ),
            ),
        ),
        ty: raw_entry::RawEntryBuilder<'{erased}, K/#1, V/#2, S/#3, A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:670:18: 670:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:670:30: 670:33 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:670:24: 670:28 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:670:24: 670:28 (#0),
                    },
                ),
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:670:24: 670:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Mut,
                        ),
                        opt_ty_info: Some(
                            src/raw_entry.rs:670:49: 670:50 (#0),
                        ),
                        opt_match_place: Some(
                            (
                                None,
                                src/raw_entry.rs:670:35: 670:47 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:670:35: 670:47 (#0),
                    },
                ),
            ),
        ),
        ty: F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:670:35: 670:47 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: core::option::Option<&'{erased} (K/#1, V/#2)>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:674:15: 674:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTable<(K/#1, V/#2), A/#4>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:674:15: 674:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: u64,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:674:34: 674:38 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: Closure(
            DefId(0:1468 ~ hashbrown[7d72]::raw_entry::{impl#5}::search::{closure#0}),
            [
                '{erased},
                K/#1,
                V/#2,
                S/#3,
                A/#4,
                F/#5,
                i16,
                Binder { value: extern "RustCall" fn((&'^0 (K/#1, V/#2),)) -> bool, bound_vars: [Region(BrAnon)] },
                (&'{erased} mut F/#5,),
            ],
        ),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:674:40: 674:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} mut F/#5,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:674:40: 674:60 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: isize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:13: 675:31 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw_entry.rs:674:15: 674:61 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:675:13: 675:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:19: 675:22 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            Yes(
                                Not,
                            ),
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                Some(
                                    _4,
                                ),
                                src/raw_entry.rs:674:15: 674:61 (#0),
                            ),
                        ),
                        pat_span: src/raw_entry.rs:675:13: 675:31 (#0),
                    },
                ),
            ),
        ),
        ty: &'{erased} V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:24: 675:29 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: (&'{erased} K/#1, &'{erased} V/#2),
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:40: 675:52 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: &'{erased} K/#1,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:41: 675:44 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw_entry.rs:674:9: 677:10 (#0),
                },
            ),
        ),
        ty: &'{erased} V/#2,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw_entry.rs:675:46: 675:51 (#0),
            scope: scope[0],
        },
    },
]