[
    BasicBlockData {
        statements: [
            StorageLive(_2),
            StorageLive(_3),
            StorageLive(_4),
            _4 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2021:44: 2021:59 (#0),
                    scope: scope[0],
                },
                kind: _3 = raw::RawTableInner::data_end::<T>(move _4) -> [return: bb1, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_4),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2021:20: 2021:63 (#0),
                    scope: scope[0],
                },
                kind: _2 = raw::Bucket::<T>::from_base_index(move _3, const 0_usize) -> [return: bb2, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_3),
            FakeRead(ForLet(None), _2),
            StorageLive(_5),
            StorageLive(_6),
            StorageLive(_7),
            StorageLive(_8),
            _8 = ((*_1).1: core::ptr::NonNull<u8>),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2024:37: 2024:55 (#0),
                    scope: scope[1],
                },
                kind: _7 = core::ptr::NonNull::<u8>::as_ptr(move _8) -> [return: bb3, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            _6 = move _7 as *const u8 (PointerCoercion(MutToConstPointer)),
            StorageDead(_8),
            StorageDead(_7),
            StorageLive(_9),
            _9 = move _2,
            StorageLive(_10),
            StorageLive(_11),
            _11 = &(*_1),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2024:63: 2024:77 (#0),
                    scope: scope[1],
                },
                kind: _10 = raw::RawTableInner::buckets(move _11) -> [return: bb4, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_11),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2024:19: 2024:78 (#0),
                    scope: scope[1],
                },
                kind: _5 = raw::RawIterRange::<T>::new(move _6, move _9, move _10) -> [return: bb5, unwind: bb6],
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [
            StorageDead(_10),
            StorageDead(_9),
            StorageDead(_6),
            StorageLive(_12),
            _12 = ((*_1).3: usize),
            _0 = raw::RawIter::<T> { iter: move _5, items: move _12 },
            StorageDead(_12),
            StorageDead(_5),
            StorageDead(_2),
        ],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:2027:6: 2027:6 (#0),
                    scope: scope[0],
                },
                kind: return,
            },
        ),
        is_cleanup: false,
    },
    BasicBlockData {
        statements: [],
        terminator: Some(
            Terminator {
                source_info: SourceInfo {
                    span: src/raw/mod.rs:1993:5: 2027:6 (#0),
                    scope: scope[0],
                },
                kind: resume,
            },
        ),
        is_cleanup: true,
    },
]
[
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: raw::RawIter<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1993:33: 1993:43 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                ImplicitSelf(
                    RefImm,
                ),
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:1993:23: 1993:28 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Not,
        local_info: Set(
            User(
                Var(
                    VarBindingForm {
                        binding_mode: BindingMode(
                            No,
                            Not,
                        ),
                        opt_ty_info: None,
                        opt_match_place: Some(
                            (
                                None,
                                src/raw/mod.rs:2021:20: 2021:63 (#0),
                            ),
                        ),
                        pat_span: src/raw/mod.rs:2021:13: 2021:17 (#0),
                    },
                ),
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2021:13: 2021:17 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: core::ptr::NonNull<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2021:44: 2021:59 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            Boring,
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2021:44: 2021:48 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: raw::RawIterRange<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:19: 2024:78 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: *const u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:37: 2024:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: *mut u8,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:37: 2024:55 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: core::ptr::NonNull<u8>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:37: 2024:46 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: raw::Bucket<T/#0>,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:57: 2024:61 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:63: 2024:77 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            BlockTailTemp(
                BlockTailInfo {
                    tail_result_is_ignored: false,
                    span: src/raw/mod.rs:2022:9: 2026:10 (#0),
                },
            ),
        ),
        ty: &'{erased} raw::RawTableInner,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2024:63: 2024:67 (#0),
            scope: scope[0],
        },
    },
    LocalDecl {
        mutability: Mut,
        local_info: Set(
            AggregateTemp,
        ),
        ty: usize,
        user_ty: None,
        source_info: SourceInfo {
            span: src/raw/mod.rs:2025:20: 2025:30 (#0),
            scope: scope[0],
        },
    },
]