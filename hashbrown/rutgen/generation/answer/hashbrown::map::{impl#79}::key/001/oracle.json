[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 12);",
          "    let entry = map.entry(\"poneyland\").or_insert(12);",
          "    match entry {",
          "        &mut OccupiedEntry { elem, .. } => {",
          "            let result = elem.key();",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, &\"poneyland\");"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 12);",
          "    let entry = map.entry(\"poneyland\").or_insert(12);",
          "    match entry {",
          "        &mut OccupiedEntry { elem, .. } => {",
          "            let result = elem.key();",
          "        }",
          "    }",
          "    assert_eq!(result, &\"poneyland\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"nonexistent\");",
          "    match entry {",
          "        Entry::Vacant(_) => {",
          "            // No key retrieval since the entry is vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.key(), &\"nonexistent\");",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.entry(\"poneyland\").or_insert(12);",
          "    let entry = map.entry(\"poneyland\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
          "    }",
          "    let entry = map.entry(\"poneyland2\");",
          "    match entry {",
          "    Entry::Vacant(_) => assert_eq!(entry.key(), &\"poneyland2\"),",
          "    Entry::Occupied(_) => panic!(),",
          "    }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"nonexistent\");",
          "    match entry {",
          "        Entry::Vacant(_) => {",
          "            // No key retrieval since the entry is vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert_eq!(map.key(), &\"nonexistent\");",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.entry(\"poneyland\").or_insert(12);",
          "    let entry = map.entry(\"poneyland\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
          "    }",
          "    let entry = map.entry(\"poneyland2\");",
          "    match entry {",
          "    Entry::Vacant(_) => assert_eq!(entry.key(), &\"poneyland2\"),",
          "    Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"empty\");",
          "    match entry {",
          "        Entry::Vacant(_) => {",
          "            // No key retrieval since the entry is vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entry(\"poneyland\").or_insert(12), &12);",
          "    let entry = map.entry(\"poneyland\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
          "    }",
          "    assert_eq!(map.entry(\"another_key\").or_insert(42), &42);",
          "    let entry = map.entry(\"another_key\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"another_key\"),",
          "    }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"empty\");",
          "    match entry {",
          "        Entry::Vacant(_) => {",
          "            // No key retrieval since the entry is vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert_eq!(map.entry(\"poneyland\").or_insert(12), &12);",
          "    let entry = map.entry(\"poneyland\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
          "    }",
          "    assert_eq!(map.entry(\"another_key\").or_insert(42), &42);",
          "    let entry = map.entry(\"another_key\");",
          "    match entry {",
          "    Entry::Vacant(_) => panic!(),",
          "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"another_key\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]