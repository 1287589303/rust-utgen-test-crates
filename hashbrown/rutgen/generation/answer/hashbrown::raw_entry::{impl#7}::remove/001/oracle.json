[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"a\").unwrap();",
          "    entry.remove();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&\"a\"), None);",
          "    assert_eq!(entry.get_key_value().1, 100);",
          "    assert!(map.get(&\"b\").is_some());",
          "    assert_eq!(entry.remove_entry().1, 100);",
          "    assert_eq!(entry.remove(), 100);",
          "    assert!(matches!(map.raw_entry_mut().from_key(&\"a\"), RawEntryMut::Vacant(_)));",
          "    assert_eq!(entry.get_key_value_mut().1, 100);",
          "    assert!(map.raw_entry_mut().from_key(&\"a\").is_err());",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"a\").unwrap();",
          "    entry.remove();",
          "    assert_eq!(map.get(&\"a\"), None);",
          "    assert_eq!(entry.get_key_value().1, 100);",
          "    assert!(map.get(&\"b\").is_some());",
          "    assert_eq!(entry.remove_entry().1, 100);",
          "    assert_eq!(entry.remove(), 100);",
          "    assert!(matches!(map.raw_entry_mut().from_key(&\"a\"), RawEntryMut::Vacant(_)));",
          "    assert_eq!(entry.get_key_value_mut().1, 100);",
          "    assert!(map.raw_entry_mut().from_key(&\"a\").is_err());",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"b\").unwrap();",
          "    entry.remove();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.remove(), 200);",
          "    assert_eq!(map.get(&\"b\"), None);",
          "    assert_eq!(map.get(&\"a\"), Some(&100));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.raw_entry_mut().from_key(&\"b\").is_none());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"b\").unwrap();",
          "    entry.remove();",
          "    assert_eq!(entry.remove(), 200);",
          "    assert_eq!(map.get(&\"b\"), None);",
          "    assert_eq!(map.get(&\"a\"), Some(&100));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.raw_entry_mut().from_key(&\"b\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"a\").unwrap();",
          "    entry.remove();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.remove(), 100);",
          "    assert_eq!(map.get(&\"a\"), None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"a\").unwrap();",
          "    entry.remove();",
          "    assert_eq!(entry.remove(), 100);",
          "    assert_eq!(map.get(&\"a\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"b\");",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {}",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, RawEntryMut::Vacant(_));",
          "    assert_eq!(map.get(&\"b\"), None);",
          "    assert_eq!(map.get(&\"a\"), Some(&100));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100)].into();",
          "    let entry = map.raw_entry_mut().from_key(&\"b\");",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {}",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert_eq!(entry, RawEntryMut::Vacant(_));",
          "    assert_eq!(map.get(&\"b\"), None);",
          "    assert_eq!(map.get(&\"a\"), Some(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]