[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(1), MyValue(\"a\"));",
          "    let key = MyKey(1);",
          "    let result = map.get(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&MyValue(\"a\")));"
        ],
        "code": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(1), MyValue(\"a\"));",
          "    let key = MyKey(1);",
          "    let result = map.get(&key);",
          "    assert_eq!(result, Some(&MyValue(\"a\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(2), MyValue(\"b\"));",
          "    let key = MyKey(2);",
          "    let result = map.get(&key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(&MyValue(\"b\")));"
        ],
        "code": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(2), MyValue(\"b\"));",
          "    let key = MyKey(2);",
          "    let result = map.get(&key);",
          "    assert_eq!(result, Some(&MyValue(\"b\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(3), MyValue(\"c\"));",
          "    map.insert(MyKey(4), MyValue(\"d\"));",
          "    ",
          "    let key1 = MyKey(3);",
          "    let result1 = map.get(&key1);",
          "    ",
          "    let key2 = MyKey(4);",
          "    let result2 = map.get(&key2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result1, Some(&MyValue(\"c\")));",
          "    assert_eq!(result2, Some(&MyValue(\"d\")));"
        ],
        "code": [
          "{",
          "    struct MyKey(u32);",
          "    struct MyValue<'a>(&'a str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(MyKey(3), MyValue(\"c\"));",
          "    map.insert(MyKey(4), MyValue(\"d\"));",
          "    ",
          "    let key1 = MyKey(3);",
          "    let result1 = map.get(&key1);",
          "    ",
          "    let key2 = MyKey(4);",
          "    let result2 = map.get(&key2);",
          "    assert_eq!(result1, Some(&MyValue(\"c\")));",
          "    assert_eq!(result2, Some(&MyValue(\"d\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]