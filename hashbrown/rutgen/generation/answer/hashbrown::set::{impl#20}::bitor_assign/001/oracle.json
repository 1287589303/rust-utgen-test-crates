[
  {
    "uses": [
      "use hashbrown::HashSet;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "",
          "    a |= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(a.contains(&6));",
          "    assert_eq!(a.len(), 6);",
          "    assert!(!a.contains(&7));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "",
          "    a |= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(a.contains(&6));",
          "    assert_eq!(a.len(), 6);",
          "    assert!(!a.contains(&7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "",
          "    a |= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert_eq!(a.len(), 5);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "",
          "    a |= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert_eq!(a.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "",
          "    a |= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert_eq!(a.allocation_size(), 3);",
          "    assert!(a.is_superset(&b));",
          "    assert_eq!(a.len(), 3);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    ",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "",
          "    a |= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert_eq!(a.allocation_size(), 3);",
          "    assert!(a.is_superset(&b));",
          "    assert_eq!(a.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]