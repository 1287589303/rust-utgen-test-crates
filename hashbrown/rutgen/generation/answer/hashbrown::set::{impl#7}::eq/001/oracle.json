[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder::new(), table: RawTable::new() } };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.len(), 0);",
          "    assert_eq!(set_b.len(), 1);",
          "    assert_eq!(set_a.eq(&set_b), false);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder::new(), table: RawTable::new() } };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "    assert_eq!(set_a.len(), 0);",
          "    assert_eq!(set_b.len(), 1);",
          "    assert_eq!(set_a.eq(&set_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder::new(), table: RawTable::new() } };",
          "    set_a.eq(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.len(), 1);",
          "    assert_eq!(set_b.len(), 0);",
          "    assert!(!set_a.eq(&set_b));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder::new(), table: RawTable::new() } };",
          "    set_a.eq(&set_b);",
          "    assert_eq!(set_a.len(), 1);",
          "    assert_eq!(set_b.len(), 0);",
          "    assert!(!set_a.eq(&set_b));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ()), (3, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.eq(&set_b), false);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ()), (3, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "    assert_eq!(set_a.eq(&set_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ()), (3, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set_a.len(), 3);",
          "    assert_eq!(set_b.len(), 2);",
          "    assert_eq!(set_a.eq(&set_b), false);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ()), (3, ())].into_iter()),",
          "        },",
          "    };",
          "    let set_b: HashSet<i32> = HashSet {",
          "        map: HashMap {",
          "            hash_builder: DefaultHashBuilder::new(),",
          "            table: RawTable::from_iter(vec![(1, ()), (2, ())].into_iter()),",
          "        },",
          "    };",
          "    set_a.eq(&set_b);",
          "    assert_eq!(set_a.len(), 3);",
          "    assert_eq!(set_b.len(), 2);",
          "    assert_eq!(set_a.eq(&set_b), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]