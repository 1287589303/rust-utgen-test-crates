[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use hashbrown::hash_map::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"a\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(150);",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 150);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"a\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(150);",
          "        }",
          "    }",
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 150);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"b\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(0);",
          "        }",
          "    }",
          "",
          "    match map.raw_entry_mut().from_key(&\"b\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(u32::MAX);",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&\"b\"], u32::MAX);",
          "    let old_value = map.raw_entry_mut().from_key(&\"a\").expect(\"Expected occupied entry\").insert(50);",
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 50);",
          "    let old_value = map.raw_entry_mut().from_key(&\"a\").expect(\"Expected occupied entry\").insert(200);",
          "    assert_eq!(old_value, 50);",
          "    assert_eq!(map[&\"a\"], 200);",
          "    let old_value = map.raw_entry_mut().from_key(&\"b\").expect(\"Expected occupied entry\").insert(150);",
          "    assert_eq!(old_value, u32::MAX);",
          "    assert_eq!(map[&\"b\"], 150);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"b\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(0);",
          "        }",
          "    }",
          "",
          "    match map.raw_entry_mut().from_key(&\"b\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut o) => {",
          "            let old_value = o.insert(u32::MAX);",
          "        }",
          "    }",
          "    assert_eq!(map[&\"b\"], u32::MAX);",
          "    let old_value = map.raw_entry_mut().from_key(&\"a\").expect(\"Expected occupied entry\").insert(50);",
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 50);",
          "    let old_value = map.raw_entry_mut().from_key(&\"a\").expect(\"Expected occupied entry\").insert(200);",
          "    assert_eq!(old_value, 50);",
          "    assert_eq!(map[&\"a\"], 200);",
          "    let old_value = map.raw_entry_mut().from_key(&\"b\").expect(\"Expected occupied entry\").insert(150);",
          "    assert_eq!(old_value, u32::MAX);",
          "    assert_eq!(map[&\"b\"], 150);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"c\") {",
          "        RawEntryMut::Vacant(_) => {",
          "            // Simulate panic; trying to insert on a non-existing entry",
          "            panic!();",
          "        },",
          "        RawEntryMut::Occupied(_) => {}",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&\"c\"), None);",
          "    let old_value = o.insert(1000);",
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 1000);",
          "    map.insert(\"c\", 300);",
          "    assert_eq!(map.get(&\"c\"), Some(&300));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();",
          "",
          "    match map.raw_entry_mut().from_key(&\"c\") {",
          "        RawEntryMut::Vacant(_) => {",
          "            // Simulate panic; trying to insert on a non-existing entry",
          "            panic!();",
          "        },",
          "        RawEntryMut::Occupied(_) => {}",
          "    }",
          "    assert_eq!(map.get(&\"c\"), None);",
          "    let old_value = o.insert(1000);",
          "    assert_eq!(old_value, 100);",
          "    assert_eq!(map[&\"a\"], 1000);",
          "    map.insert(\"c\", 300);",
          "    assert_eq!(map.get(&\"c\"), Some(&300));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]