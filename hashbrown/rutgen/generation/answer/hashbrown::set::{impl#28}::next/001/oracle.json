[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    map.insert(1, ());",
          "    map.insert(2, ());",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _first = iter.next();",
          "    let _second = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_first, Some(&1));",
          "    assert_eq!(_second, Some(&2));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    map.insert(1, ());",
          "    map.insert(2, ());",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _first = iter.next();",
          "    let _second = iter.next();",
          "    assert_eq!(_first, Some(&1));",
          "    assert_eq!(_second, Some(&2));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _result = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, None);",
          "    assert!(iter.size_hint() == (0, Some(0)));",
          "    let _ = map.insert(1, ());",
          "    let _result = iter.next();",
          "    assert_eq!(_result, Some(&1));",
          "    assert!(iter.size_hint().0 == 0);",
          "    assert!(iter.size_hint().1.unwrap() == 1);",
          "    let _ = map.insert(2, ());",
          "    let _result = iter.next();",
          "    assert_eq!(_result, Some(&2));",
          "    assert!(iter.size_hint().0 == 1);",
          "    assert!(iter.size_hint().1.unwrap() == 1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _result = iter.next();",
          "    assert_eq!(_result, None);",
          "    assert!(iter.size_hint() == (0, Some(0)));",
          "    let _ = map.insert(1, ());",
          "    let _result = iter.next();",
          "    assert_eq!(_result, Some(&1));",
          "    assert!(iter.size_hint().0 == 0);",
          "    assert!(iter.size_hint().1.unwrap() == 1);",
          "    let _ = map.insert(2, ());",
          "    let _result = iter.next();",
          "    assert_eq!(_result, Some(&2));",
          "    assert!(iter.size_hint().0 == 1);",
          "    assert!(iter.size_hint().1.unwrap() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    map.insert(1, ());",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _first = iter.next();",
          "    let _result_after_first = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_first, Some(&1));",
          "    assert_eq!(_result_after_first, None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    map.insert(1, ());",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    let _first = iter.next();",
          "    let _result_after_first = iter.next();",
          "    assert_eq!(_first, Some(&1));",
          "    assert_eq!(_result_after_first, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    for i in 1..=10 {",
          "        map.insert(i, ());",
          "    }",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    for _ in 0..10 {",
          "        let _key = iter.next();",
          "    }",
          "    let _result_after_ten = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result_after_ten, None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    for i in 1..=10 {",
          "        map.insert(i, ());",
          "    }",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    for _ in 0..10 {",
          "        let _key = iter.next();",
          "    }",
          "    let _result_after_ten = iter.next();",
          "    assert_eq!(_result_after_ten, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    for i in 1..=100 {",
          "        map.insert(i, ());",
          "    }",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    for _ in 0..100 {",
          "        let _key = iter.next();",
          "    }",
          "    let _result_after_hundred = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 100);",
          "    assert!(iter.next().is_none());",
          "    for i in 1..=100 {",
          "    assert_eq!(iter.next(), Some(&i));",
          "    }",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, ()> = HashMap::new();",
          "    for i in 1..=100 {",
          "        map.insert(i, ());",
          "    }",
          "",
          "    let keys_iter = Keys { inner: Iter { iter: map.keys() } };",
          "    let mut iter = keys_iter.iter;",
          "",
          "    for _ in 0..100 {",
          "        let _key = iter.next();",
          "    }",
          "    let _result_after_hundred = iter.next();",
          "    assert_eq!(map.len(), 100);",
          "    assert!(iter.next().is_none());",
          "    for i in 1..=100 {",
          "    assert_eq!(iter.next(), Some(&i));",
          "    }",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]