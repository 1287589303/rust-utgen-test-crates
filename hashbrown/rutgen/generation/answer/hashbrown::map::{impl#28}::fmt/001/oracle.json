[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugKey {",
          "        value: i32,",
          "    }",
          "",
          "    impl Debug for DebugKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "            write!(f, \"DebugKey({})\", self.value)",
          "        }",
          "    }",
          "",
          "    let keys: Vec<(DebugKey, &str)> = vec![",
          "        (DebugKey { value: 1 }, \"value1\"),",
          "        (DebugKey { value: 2 }, \"value2\"),",
          "    ];",
          "",
          "    let raw_iter = RawIter::from_keys_values(keys);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let keys_struct = Keys { inner: iter };",
          "",
          "    let _ = fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()), Ok(()));",
          "    assert!(f.debug_list().entries(self.clone()).finish().is_ok());",
          "    assert!(!self.clone().is_empty());",
          "    assert_eq!(self.clone().len(), 2);",
          "    assert_eq!(self.clone().next(), Some((DebugKey { value: 1 }, \"value1\")));",
          "    assert_eq!(self.clone().next(), Some((DebugKey { value: 2 }, \"value2\")));",
          "    assert!(self.clone().last().is_some());",
          "    assert!(self.clone().count() == 2);"
        ],
        "code": [
          "{",
          "    struct DebugKey {",
          "        value: i32,",
          "    }",
          "",
          "    impl Debug for DebugKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "            write!(f, \"DebugKey({})\", self.value)",
          "        }",
          "    }",
          "",
          "    let keys: Vec<(DebugKey, &str)> = vec![",
          "        (DebugKey { value: 1 }, \"value1\"),",
          "        (DebugKey { value: 2 }, \"value2\"),",
          "    ];",
          "",
          "    let raw_iter = RawIter::from_keys_values(keys);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let keys_struct = Keys { inner: iter };",
          "",
          "    let _ = fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new());",
          "    assert_eq!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()), Ok(()));",
          "    assert!(f.debug_list().entries(self.clone()).finish().is_ok());",
          "    assert!(!self.clone().is_empty());",
          "    assert_eq!(self.clone().len(), 2);",
          "    assert_eq!(self.clone().next(), Some((DebugKey { value: 1 }, \"value1\")));",
          "    assert_eq!(self.clone().next(), Some((DebugKey { value: 2 }, \"value2\")));",
          "    assert!(self.clone().last().is_some());",
          "    assert!(self.clone().count() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugKey {",
          "        value: i32,",
          "    }",
          "",
          "    impl Debug for DebugKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "            write!(f, \"DebugKey({})\", self.value)",
          "        }",
          "    }",
          "",
          "    let keys: Vec<(DebugKey, &str)> = vec![];",
          "    let raw_iter = RawIter::from_keys_values(keys);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let keys_struct = Keys { inner: iter };",
          "",
          "    let _ = fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()).is_ok(), true);",
          "    assert!(format!(\"{:?}\", keys_struct).contains(\"DebugKey(\") == false);",
          "    assert!(format!(\"{:?}\", keys_struct).is_empty());",
          "    assert!(keys_struct.inner.inner.is_empty());",
          "    assert!(keys_struct.inner.marker == PhantomData);",
          "    assert_eq!(keys_struct.clone().inner.inner, keys_struct.inner.inner);",
          "    assert!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()).is_ok());"
        ],
        "code": [
          "{",
          "    struct DebugKey {",
          "        value: i32,",
          "    }",
          "",
          "    impl Debug for DebugKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
          "            write!(f, \"DebugKey({})\", self.value)",
          "        }",
          "    }",
          "",
          "    let keys: Vec<(DebugKey, &str)> = vec![];",
          "    let raw_iter = RawIter::from_keys_values(keys);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let keys_struct = Keys { inner: iter };",
          "",
          "    let _ = fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new());",
          "    assert_eq!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()).is_ok(), true);",
          "    assert!(format!(\"{:?}\", keys_struct).contains(\"DebugKey(\") == false);",
          "    assert!(format!(\"{:?}\", keys_struct).is_empty());",
          "    assert!(keys_struct.inner.inner.is_empty());",
          "    assert!(keys_struct.inner.marker == PhantomData);",
          "    assert_eq!(keys_struct.clone().inner.inner, keys_struct.inner.inner);",
          "    assert!(fmt::Debug::fmt(&keys_struct, &mut fmt::Formatter::new()).is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]