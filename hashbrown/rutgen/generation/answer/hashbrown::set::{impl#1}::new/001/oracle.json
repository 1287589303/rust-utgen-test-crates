[
  {
    "uses": [
      "use std::collections::hash_map::RandomState;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "}"
        ],
        "oracle": [
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());",
          "    assert_eq!(set.map.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());",
          "    assert!(set.map.table.is_empty());"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());",
          "    assert!(set.map.table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "}"
        ],
        "oracle": [
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.hash_builder.is_default());",
          "    assert_eq!(set.map.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.hash_builder.is_default());",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hasher = RandomState::new();",
          "    let set: hashbrown::HashSet<i32, RandomState> = hashbrown::HashSet::with_hasher(hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let hasher = RandomState::new();",
          "    let set: hashbrown::HashSet<i32, RandomState> = hashbrown::HashSet::with_hasher(hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]