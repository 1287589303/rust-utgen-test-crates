[
  {
    "uses": [
      "use std::hash::BuildHasher;",
      "use hashbrown::DefaultHashBuilder;",
      "use hashbrown::HashTable;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    table.insert_unique(hasher_fn(&\"key1\"), \"value1\", hasher_fn);",
          "    let entry = table.entry(hasher_fn(&\"key1\"), |&x| x == \"key1\", hasher_fn);",
          "",
          "    let occupied_entry = entry.insert(\"new_value\");",
          "",
          "    // Calling this function for side effects: testing the method.",
          "    let _result = occupied_entry.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.get(), &\"new_value\");",
          "    assert_ne!(occupied_entry.get(), &\"value1\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert!(table.contains_key(&\"key1\"));",
          "    assert_eq!(table.get(&\"key1\"), Some(&\"new_value\"));",
          "    assert!(table.get(&\"key2\").is_none());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    table.insert_unique(hasher_fn(&\"key1\"), \"value1\", hasher_fn);",
          "    let entry = table.entry(hasher_fn(&\"key1\"), |&x| x == \"key1\", hasher_fn);",
          "",
          "    let occupied_entry = entry.insert(\"new_value\");",
          "",
          "    // Calling this function for side effects: testing the method.",
          "    let _result = occupied_entry.get();",
          "    assert_eq!(occupied_entry.get(), &\"new_value\");",
          "    assert_ne!(occupied_entry.get(), &\"value1\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert!(table.contains_key(&\"key1\"));",
          "    assert_eq!(table.get(&\"key1\"), Some(&\"new_value\"));",
          "    assert!(table.get(&\"key2\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    table.insert_unique(hasher_fn(&\"key2\"), \"old_value\", hasher_fn);",
          "    let entry = table.entry(hasher_fn(&\"key2\"), |&x| x == \"key2\", hasher_fn);",
          "",
          "    let occupied_entry = entry.insert(\"updated_value\");",
          "",
          "    // Calling this function for side effects: testing the method.",
          "    let _result = occupied_entry.get();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.get(), &\"updated_value\");",
          "    assert_eq!(entry.get_mut(), &mut \"updated_value\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_ne!(occupied_entry.get(), &\"old_value\");",
          "    let prev_value = occupied_entry.get_mut();",
          "    *prev_value = \"new_value\";",
          "    assert_eq!(occupied_entry.get(), &\"new_value\");",
          "    assert_eq!(occupied_entry.into_table(), &mut table);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    table.insert_unique(hasher_fn(&\"key2\"), \"old_value\", hasher_fn);",
          "    let entry = table.entry(hasher_fn(&\"key2\"), |&x| x == \"key2\", hasher_fn);",
          "",
          "    let occupied_entry = entry.insert(\"updated_value\");",
          "",
          "    // Calling this function for side effects: testing the method.",
          "    let _result = occupied_entry.get();",
          "    assert_eq!(occupied_entry.get(), &\"updated_value\");",
          "    assert_eq!(entry.get_mut(), &mut \"updated_value\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    assert_ne!(occupied_entry.get(), &\"old_value\");",
          "    let prev_value = occupied_entry.get_mut();",
          "    *prev_value = \"new_value\";",
          "    assert_eq!(occupied_entry.get(), &\"new_value\");",
          "    assert_eq!(occupied_entry.into_table(), &mut table);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]