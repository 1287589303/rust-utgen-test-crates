[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 1;",
          "    let capacity = 0;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 1,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 1,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 1;",
          "    let capacity = 0;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 1,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 1,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 2;",
          "    let capacity = 1;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 3,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 3,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 2;",
          "    let capacity = 1;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 3,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 3,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 5;",
          "    let capacity = 4;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 7,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 7,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 5;",
          "    let capacity = 4;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 7,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 7,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 10;",
          "    let capacity = 9;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 15,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 15,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 10;",
          "    let capacity = 9;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 15,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 15,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 1000;",
          "    let capacity = 999;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 1023,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 1023,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, Err(TryReserveError::CapacityOverflow)));"
        ],
        "code": [
          "{",
          "    struct MockAllocator;",
          "    impl Allocator for MockAllocator {}",
          "",
          "    let alloc = MockAllocator;",
          "    let table_layout = TableLayout { size: 0, ctrl_align: 8 };",
          "    let items = 1000;",
          "    let capacity = 999;",
          "",
          "    let table_inner = RawTableInner {",
          "        items,",
          "        bucket_mask: 1023,",
          "        ctrl: NonNull::new(0 as *mut u8).unwrap(),",
          "        growth_left: 1023,",
          "    };",
          "",
          "    let result = table_inner.prepare_resize(&alloc, table_layout, capacity, Fallibility::Infallible);",
          "    assert!(matches!(result, Err(TryReserveError::CapacityOverflow)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]