[
  {
    "uses": [
      "use hashbrown::HashMap;",
      "use hashbrown::hash_map::RawEntryMut;",
      "use std::collections::hash_map::DefaultHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 10);",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
          "        table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key1\", 20);",
          "}"
        ],
        "oracle": [
          "    let result = entry.insert(\"key1\", 20);",
          "    assert_eq!(result.get_key_value(), (&\"key1\", &20));",
          "    ",
          "    let entry_after_insert = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
          "    table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
          "    hash_builder: &hash_builder,",
          "    });",
          "    assert_eq!(entry_after_insert.remove_entry(), (\"key1\", 20));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 10);",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
          "        table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key1\", 20);",
          "    let result = entry.insert(\"key1\", 20);",
          "    assert_eq!(result.get_key_value(), (&\"key1\", &20));",
          "    ",
          "    let entry_after_insert = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
          "    table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
          "    hash_builder: &hash_builder,",
          "    });",
          "    assert_eq!(entry_after_insert.remove_entry(), (\"key1\", 20));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key2\", 30);",
          "}"
        ],
        "oracle": [
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::default(),",
          "    table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
          "    hash_builder: &hash_builder,",
          "    });",
          "    assert_eq!(result, entry);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key2\", 30);",
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::default(),",
          "    table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
          "    hash_builder: &hash_builder,",
          "    });",
          "    assert_eq!(result, entry);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 40);",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: map.raw_entry_mut().from_key(&\"key3\").elem,",
          "        table: &mut map.raw_entry_mut().from_key(&\"key3\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key3\", 50);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.get_key_value(), (&\"key3\", &50));",
          "    assert_eq!(result.remove_entry(), (\"key3\", 50));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::collections::hash_map::DefaultHasher;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 40);",
          "    ",
          "    let hash_builder = DefaultHasher::new();",
          "    ",
          "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: map.raw_entry_mut().from_key(&\"key3\").elem,",
          "        table: &mut map.raw_entry_mut().from_key(&\"key3\").table,",
          "        hash_builder: &hash_builder,",
          "    });",
          "",
          "    let result = entry.insert(\"key3\", 50);",
          "    assert_eq!(result.get_key_value(), (&\"key3\", &50));",
          "    assert_eq!(result.remove_entry(), (\"key3\", 50));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]