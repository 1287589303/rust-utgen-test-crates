[
  {
    "uses": [
      "use std::hash::BuildHasherDefault;",
      "use hashbrown::HashMap;",
      "use hashbrown::hash_map::RawEntryMut;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key1\");",
          "    let occupied_entry = entry.insert(\"key1\", 100);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(occupied_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key1\", &100));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map.get(\"key1\"), Some(&100));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key1\");",
          "    let occupied_entry = entry.insert(\"key1\", 100);",
          "    assert!(matches!(occupied_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key1\", &100));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map.get(\"key1\"), Some(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
          "    let occupied_entry1 = entry1.insert(\"key2\", 200);",
          "",
          "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
          "    let occupied_entry2 = entry2.insert(\"key3\", 300);",
          "}"
        ],
        "oracle": [
          "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
          "    assert!(matches!(entry1, RawEntryMut::Vacant(_)));",
          "    assert_eq!(occupied_entry1.key(), &\"key2\");",
          "    assert_eq!(occupied_entry1.get(), &200);",
          "    ",
          "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
          "    assert!(matches!(entry2, RawEntryMut::Vacant(_)));",
          "    assert_eq!(occupied_entry2.key(), &\"key3\");",
          "    assert_eq!(occupied_entry2.get(), &300);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
          "    let occupied_entry1 = entry1.insert(\"key2\", 200);",
          "",
          "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
          "    let occupied_entry2 = entry2.insert(\"key3\", 300);",
          "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
          "    assert!(matches!(entry1, RawEntryMut::Vacant(_)));",
          "    assert_eq!(occupied_entry1.key(), &\"key2\");",
          "    assert_eq!(occupied_entry1.get(), &200);",
          "    ",
          "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
          "    assert!(matches!(entry2, RawEntryMut::Vacant(_)));",
          "    assert_eq!(occupied_entry2.key(), &\"key3\");",
          "    assert_eq!(occupied_entry2.get(), &300);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key4\");",
          "    let occupied_entry = entry.insert(\"key4\", 400);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key4\", &400));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key4\"));",
          "    assert_eq!(entry.remove_entry(), (\"key4\", 400));",
          "    assert!(map.get(\"key4\").is_none());",
          "    assert_eq!(occupied_entry.get(), &400);",
          "    assert_eq!(occupied_entry.key(), &\"key4\");",
          "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut \"key4\", &mut 400));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key4\");",
          "    let occupied_entry = entry.insert(\"key4\", 400);",
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key4\", &400));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"key4\"));",
          "    assert_eq!(entry.remove_entry(), (\"key4\", 400));",
          "    assert!(map.get(\"key4\").is_none());",
          "    assert_eq!(occupied_entry.get(), &400);",
          "    assert_eq!(occupied_entry.key(), &\"key4\");",
          "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut \"key4\", &mut 400));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key5\");",
          "    let occupied_entry = entry.insert(\"key5\", 500);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key5\", &500));",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    assert!(map.contains_key(\"key5\"));",
          "    assert_eq!(map[\"key5\"], 500);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "",
          "    struct SimpleHasher;",
          "    impl Default for SimpleHasher {",
          "        fn default() -> Self {",
          "            SimpleHasher",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"key5\");",
          "    let occupied_entry = entry.insert(\"key5\", 500);",
          "    assert_eq!(occupied_entry.get_key_value(), (&\"key5\", &500));",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    assert!(map.contains_key(\"key5\"));",
          "    assert_eq!(map[\"key5\"], 500);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]