[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use hashbrown::hash_map::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"a\", 100);",
          "    map.insert(\"b\", 200);",
          "",
          "    let raw_entry = match map.raw_entry_mut().from_key(&\"a\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => o.replace_entry_with(|_k, _v| None),",
          "    };",
          "",
          "    match raw_entry {",
          "        RawEntryMut::Vacant(_) => { },",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    };",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(raw_entry, RawEntryMut::Vacant(_)));",
          "    let expected_vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "    table: &mut map,",
          "    hash_builder: /* appropriate hasher reference */",
          "    });",
          "    assert_eq!(raw_entry, expected_vacant_entry);",
          "    assert!(map.get(&\"a\").is_none());"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"a\", 100);",
          "    map.insert(\"b\", 200);",
          "",
          "    let raw_entry = match map.raw_entry_mut().from_key(&\"a\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => o.replace_entry_with(|_k, _v| None),",
          "    };",
          "",
          "    match raw_entry {",
          "        RawEntryMut::Vacant(_) => { },",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    };",
          "    assert!(matches!(raw_entry, RawEntryMut::Vacant(_)));",
          "    let expected_vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "    table: &mut map,",
          "    hash_builder: /* appropriate hasher reference */",
          "    });",
          "    assert_eq!(raw_entry, expected_vacant_entry);",
          "    assert!(map.get(&\"a\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"x\", 300);",
          "    map.insert(\"y\", 400);",
          "",
          "    let raw_entry = match map.raw_entry_mut().from_key(&\"x\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => o.replace_entry_with(|_k, _v| None),",
          "    };",
          "",
          "    match raw_entry {",
          "        RawEntryMut::Vacant(_) => { },",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    };",
          "    assert_eq!(map.get(&\"x\"), None);",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(raw_entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.get(&\"x\"), None);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"x\", 300);",
          "    map.insert(\"y\", 400);",
          "",
          "    let raw_entry = match map.raw_entry_mut().from_key(&\"x\") {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => o.replace_entry_with(|_k, _v| None),",
          "    };",
          "",
          "    match raw_entry {",
          "        RawEntryMut::Vacant(_) => { },",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    };",
          "    assert_eq!(map.get(&\"x\"), None);",
          "    assert!(matches!(raw_entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.get(&\"x\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]