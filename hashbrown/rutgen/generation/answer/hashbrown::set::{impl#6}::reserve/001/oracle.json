[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [
      "#[should_panic]",
      "fn test_reserve_exceeds_capacity() {",
      "    let mut set: HashSet<i32> = HashSet::new();",
      "    set.reserve(isize::MAX as usize + 1);",
      "}"
    ],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(0);",
          "}"
        ],
        "oracle": [
          "    set.reserve(isize::MAX as usize + 1);  // Should panic due to exceeding capacity",
          "    ",
          "    set.reserve(0);  // Reservation of 0 should not change capacity, expect current capacity to remain unchanged"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(0);",
          "    set.reserve(isize::MAX as usize + 1);  // Should panic due to exceeding capacity",
          "    ",
          "    set.reserve(0);  // Reservation of 0 should not change capacity, expect current capacity to remain unchanged",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(5);",
          "}"
        ],
        "oracle": [
          "    assert!(set.capacity() >= 5);",
          "    assert_eq!(set.capacity(), 5);  // Check that capacity is at least 5 after reserve",
          "    assert!(std::panic::catch_unwind(|| {",
          "    set.reserve(isize::MAX as usize + 1);",
          "    }).is_err());  // Ensure that panic occurs when exceeding capacity"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(5);",
          "    assert!(set.capacity() >= 5);",
          "    assert_eq!(set.capacity(), 5);  // Check that capacity is at least 5 after reserve",
          "    assert!(std::panic::catch_unwind(|| {",
          "    set.reserve(isize::MAX as usize + 1);",
          "    }).is_err());  // Ensure that panic occurs when exceeding capacity",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize + 1);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize);",
          "    }).is_ok());",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize + 1);",
          "    }).is_err());",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(isize::MAX as usize);",
          "    }).is_ok());",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.reserve(10);",
          "    assert!(set.capacity() >= 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]