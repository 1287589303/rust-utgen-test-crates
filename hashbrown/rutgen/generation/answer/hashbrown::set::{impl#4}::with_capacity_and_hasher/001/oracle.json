[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(0, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);"
        ],
        "code": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(0, hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(1, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.capacity() >= 1);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());"
        ],
        "code": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(1, hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.capacity() >= 1);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(5, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.capacity() >= 5);",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.is_filled() == false);",
          "    assert!(set.map.table.is_reallocated() == false);"
        ],
        "code": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(5, hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert!(set.map.table.capacity() >= 5);",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.is_filled() == false);",
          "    assert!(set.map.table.is_reallocated() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(10, hasher);",
          "}"
        ],
        "oracle": [
          "    set.map.table.capacity() == 10",
          "    set.map.hash_builder == hasher",
          "    let empty_set = HashSet::<i32>::with_capacity_and_hasher(0, hasher);",
          "    empty_set.map.table.capacity() == 0",
          "    set.map.table.is_empty() == false",
          "    set.map.table.len() == 1"
        ],
        "code": [
          "{",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_capacity_and_hasher(10, hasher);",
          "    set.map.table.capacity() == 10",
          "    set.map.hash_builder == hasher",
          "    let empty_set = HashSet::<i32>::with_capacity_and_hasher(0, hasher);",
          "    empty_set.map.table.capacity() == 0",
          "    set.map.table.is_empty() == false",
          "    set.map.table.len() == 1",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomHasher;",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "    let hasher = CustomHasher;",
          "    let set = HashSet::with_capacity_and_hasher(10, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.capacity(), 10);",
          "    assert_eq!(set.map.hash_builder.build_hasher(), CustomHasher.build_hasher());",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.len() == 0);"
        ],
        "code": [
          "{",
          "    struct CustomHasher;",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "    let hasher = CustomHasher;",
          "    let set = HashSet::with_capacity_and_hasher(10, hasher);",
          "    assert_eq!(set.map.table.capacity(), 10);",
          "    assert_eq!(set.map.hash_builder.build_hasher(), CustomHasher.build_hasher());",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]