[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let b: HashSet<i32> = vec![6, 7, 8].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 5);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(!a.contains(&6));",
          "    assert!(!a.contains(&7));",
          "    assert!(!a.contains(&8));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let b: HashSet<i32> = vec![6, 7, 8].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "    assert_eq!(a.len(), 5);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(!a.contains(&6));",
          "    assert!(!a.contains(&7));",
          "    assert!(!a.contains(&8));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4].into_iter().collect();",
          "    let b: HashSet<i32> = vec![5, 6].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 4);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(!a.contains(&5));",
          "    assert!(!a.contains(&6));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4].into_iter().collect();",
          "    let b: HashSet<i32> = vec![5, 6].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "    assert_eq!(a.len(), 4);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(!a.contains(&5));",
          "    assert!(!a.contains(&6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![10, 20, 30, 40, 50, 60].into_iter().collect();",
          "    let b: HashSet<i32> = vec![70, 80].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 6);",
          "    assert!(a.contains(&10));",
          "    assert!(a.contains(&20));",
          "    assert!(a.contains(&30));",
          "    assert!(a.contains(&40));",
          "    assert!(a.contains(&50));",
          "    assert!(a.contains(&60));",
          "    assert!(!a.contains(&70));",
          "    assert!(!a.contains(&80));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![10, 20, 30, 40, 50, 60].into_iter().collect();",
          "    let b: HashSet<i32> = vec![70, 80].into_iter().collect();",
          "    ",
          "    a -= &b;",
          "    assert_eq!(a.len(), 6);",
          "    assert!(a.contains(&10));",
          "    assert!(a.contains(&20));",
          "    assert!(a.contains(&30));",
          "    assert!(a.contains(&40));",
          "    assert!(a.contains(&50));",
          "    assert!(a.contains(&60));",
          "    assert!(!a.contains(&70));",
          "    assert!(!a.contains(&80));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    ",
          "    a -= &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.len(), 5);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    ",
          "    a -= &b;",
          "    assert_eq!(a.len(), 5);",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]