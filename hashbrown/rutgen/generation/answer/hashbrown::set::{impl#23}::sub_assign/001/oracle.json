[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "    ",
          "    let mut i = 0;",
          "    let expected = [1, 2, 5];",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(self_set.len(), 3);",
          "    assert!(self_set.contains(&1));",
          "    assert!(self_set.contains(&2));",
          "    assert!(self_set.contains(&5));",
          "    assert!(!self_set.contains(&3));",
          "    assert!(!self_set.contains(&4));"
        ],
        "code": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "    ",
          "    let mut i = 0;",
          "    let expected = [1, 2, 5];",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "    assert_eq!(self_set.len(), 3);",
          "    assert!(self_set.contains(&1));",
          "    assert!(self_set.contains(&2));",
          "    assert!(self_set.contains(&5));",
          "    assert!(!self_set.contains(&3));",
          "    assert!(!self_set.contains(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "    ",
          "    let mut i = 0;",
          "    let expected = [1, 2, 5];",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "}"
        ],
        "oracle": [
          "    self_set.len() > rhs_set.len()",
          "    self_set.contains(&1)",
          "    self_set.contains(&2)",
          "    self_set.contains(&5)",
          "    !self_set.contains(&3)",
          "    !self_set.contains(&4)",
          "    self_set.is_empty() == false",
          "    self_set.len() == 3"
        ],
        "code": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "    ",
          "    let mut i = 0;",
          "    let expected = [1, 2, 5];",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "    self_set.len() > rhs_set.len()",
          "    self_set.contains(&1)",
          "    self_set.contains(&2)",
          "    self_set.contains(&5)",
          "    !self_set.contains(&3)",
          "    !self_set.contains(&4)",
          "    self_set.is_empty() == false",
          "    self_set.len() == 3",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "",
          "    let mut i = 0;",
          "    let expected = [1, 2, 3]; // No change should occur",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "}"
        ],
        "oracle": [
          "    assert!(rhs_set.len() < self_set.len());",
          "    assert!(self_set.contains(&1));",
          "    assert!(self_set.contains(&2));",
          "    assert!(!self_set.contains(&4));",
          "    assert!(!self_set.contains(&5));",
          "    assert_eq!(self_set.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut self_set: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let rhs_set: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    ",
          "    self_set -= &rhs_set;",
          "",
          "    let mut i = 0;",
          "    let expected = [1, 2, 3]; // No change should occur",
          "    for x in &self_set {",
          "        assert!(expected.contains(x));",
          "        i += 1;",
          "    }",
          "    assert_eq!(i, expected.len());",
          "    assert!(rhs_set.len() < self_set.len());",
          "    assert!(self_set.contains(&1));",
          "    assert!(self_set.contains(&2));",
          "    assert!(!self_set.contains(&4));",
          "    assert!(!self_set.contains(&5));",
          "    assert_eq!(self_set.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]