[
  {
    "uses": [
      "use hashbrown::HashMap;",
      "use std::hash::BuildHasher;",
      "use std::collections::hash_map::DefaultHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::BuildHasher;",
          "",
          "    struct HasherBuilder;",
          "",
          "    impl BuildHasher for HasherBuilder {",
          "        type Hasher = DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "    map.insert(\"existing_key\".to_string(), Some(10));",
          "",
          "    {",
          "        let entry_ref = map.entry_ref(\"existing_key\");",
          "        let value_ref = entry_ref.or_default();",
          "        // Here, value_ref should be a mutable reference to Some(10)",
          "        // We don’t assert, only calling the function as per request",
          "    }",
          "}"
        ],
        "oracle": [
          "    let entry_ref = map.entry_ref(\"existing_key\");",
          "    assert_eq!(*entry_ref.or_default(), Some(10));",
          "    let entry_ref = map.entry_ref(\"nonexistent_key\");",
          "    assert_eq!(entry_ref.or_default(), &mut None);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::BuildHasher;",
          "",
          "    struct HasherBuilder;",
          "",
          "    impl BuildHasher for HasherBuilder {",
          "        type Hasher = DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "    map.insert(\"existing_key\".to_string(), Some(10));",
          "",
          "    {",
          "        let entry_ref = map.entry_ref(\"existing_key\");",
          "        let value_ref = entry_ref.or_default();",
          "        // Here, value_ref should be a mutable reference to Some(10)",
          "        // We don’t assert, only calling the function as per request",
          "    }",
          "    let entry_ref = map.entry_ref(\"existing_key\");",
          "    assert_eq!(*entry_ref.or_default(), Some(10));",
          "    let entry_ref = map.entry_ref(\"nonexistent_key\");",
          "    assert_eq!(entry_ref.or_default(), &mut None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::BuildHasher;",
          "",
          "    struct HasherBuilder;",
          "",
          "    impl BuildHasher for HasherBuilder {",
          "        type Hasher = DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "",
          "    {",
          "        let entry_ref = map.entry_ref(\"new_key\");",
          "        let value_ref = entry_ref.or_default();",
          "        // Here, value_ref should be a mutable reference to None (after inserting)",
          "        // We don’t assert, only calling the function as per request",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"new_key\"], None);",
          "    assert!(map.entry_ref(\"new_key\").or_default().is_some());",
          "    let existing_entry = map.entry_ref(\"new_key\");",
          "    let mut existing_value = existing_entry.or_default();",
          "    *existing_value = Some(5);",
          "    assert_eq!(map[\"new_key\"], Some(5));",
          "    assert_eq!(existing_entry.or_default(), &mut Some(5));",
          "    assert!(matches!(existing_entry, EntryRef::Occupied(_)));",
          "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::BuildHasher;",
          "",
          "    struct HasherBuilder;",
          "",
          "    impl BuildHasher for HasherBuilder {",
          "        type Hasher = DefaultHasher;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "",
          "    {",
          "        let entry_ref = map.entry_ref(\"new_key\");",
          "        let value_ref = entry_ref.or_default();",
          "        // Here, value_ref should be a mutable reference to None (after inserting)",
          "        // We don’t assert, only calling the function as per request",
          "    }",
          "    assert_eq!(map[\"new_key\"], None);",
          "    assert!(map.entry_ref(\"new_key\").or_default().is_some());",
          "    let existing_entry = map.entry_ref(\"new_key\");",
          "    let mut existing_value = existing_entry.or_default();",
          "    *existing_value = Some(5);",
          "    assert_eq!(map[\"new_key\"], Some(5));",
          "    assert_eq!(existing_entry.or_default(), &mut Some(5));",
          "    assert!(matches!(existing_entry, EntryRef::Occupied(_)));",
          "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]