[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "    let key = \"vacant_key\";",
          "    let entry_ref = map.entry_ref(key);",
          "    let value = entry_ref.or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"vacant_key\"], None);",
          "    assert_eq!(value, &mut None);",
          "    assert!(map.contains_key(\"vacant_key\"));",
          "    assert_eq!(map.get(\"vacant_key\"), Some(&None));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
          "    let key = \"vacant_key\";",
          "    let entry_ref = map.entry_ref(key);",
          "    let value = entry_ref.or_default();",
          "    assert_eq!(map[\"vacant_key\"], None);",
          "    assert_eq!(value, &mut None);",
          "    assert!(map.contains_key(\"vacant_key\"));",
          "    assert_eq!(map.get(\"vacant_key\"), Some(&None));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    let key = 42;",
          "    let entry_ref = map.entry_ref(&key);",
          "    let value = entry_ref.or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &mut String::default());",
          "    assert_eq!(map.get(&key), Some(&String::default()));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.entry_ref(&key).or_default(), value);",
          "    assert_eq!(map[&key], String::default());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    let key = 42;",
          "    let entry_ref = map.entry_ref(&key);",
          "    let value = entry_ref.or_default();",
          "    assert_eq!(value, &mut String::default());",
          "    assert_eq!(map.get(&key), Some(&String::default()));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.entry_ref(&key).or_default(), value);",
          "    assert_eq!(map[&key], String::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, String> = HashMap::new();",
          "    let key = \"empty_string_key\".to_string();",
          "    let entry_ref = map.entry_ref(&key);",
          "    let value = entry_ref.or_default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, &mut String::new());",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.get(&key), Some(&String::new()));",
          "    assert_eq!(map.entry_ref(&key).or_default(), &mut String::new());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, String> = HashMap::new();",
          "    let key = \"empty_string_key\".to_string();",
          "    let entry_ref = map.entry_ref(&key);",
          "    let value = entry_ref.or_default();",
          "    assert_eq!(value, &mut String::new());",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.get(&key), Some(&String::new()));",
          "    assert_eq!(map.entry_ref(&key).or_default(), &mut String::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]