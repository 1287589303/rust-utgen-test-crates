[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<i32> = HashTable::new_in(Global);",
          "    let iter = table.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.inner.items == 0);",
          "    assert!(iter.marker.is::<PhantomData<&i32>>());",
          "    assert!(table.is_empty() == true);",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() == 0);"
        ],
        "code": [
          "{",
          "    let table: HashTable<i32> = HashTable::new_in(Global);",
          "    let iter = table.iter();",
          "    assert!(iter.inner.items == 0);",
          "    assert!(iter.marker.is::<PhantomData<&i32>>());",
          "    assert!(table.is_empty() == true);",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    let iter = table.iter();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.inner.items, 1);",
          "    assert!(!iter.is_empty());",
          "    assert_eq!(iter.marker, PhantomData::<&i32>);"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    let iter = table.iter();",
          "    assert_eq!(iter.inner.items, 1);",
          "    assert!(!iter.is_empty());",
          "    assert_eq!(iter.marker, PhantomData::<&i32>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "",
          "    for i in 0..10 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "",
          "    let iter = table.iter();",
          "}"
        ],
        "oracle": [
          "    let iter = table.iter();",
          "    assert!(iter.inner.items == 10);",
          "    assert!(iter.inner.iter.is_fused());",
          "    assert!(!table.is_empty());",
          "    assert_eq!(table.len(), 10);",
          "    assert_eq!(table.capacity() >= 10, true);"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "",
          "    for i in 0..10 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "",
          "    let iter = table.iter();",
          "    let iter = table.iter();",
          "    assert!(iter.inner.items == 10);",
          "    assert!(iter.inner.iter.is_fused());",
          "    assert!(!table.is_empty());",
          "    assert_eq!(table.len(), 10);",
          "    assert_eq!(table.capacity() >= 10, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "",
          "    for i in 0..100 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "",
          "    let iter = table.iter();",
          "}"
        ],
        "oracle": [
          "    assert!(iter.inner.items == 100);",
          "    assert!(iter.marker.is::<PhantomData<i32>>());",
          "    assert!(table.len() == 100);",
          "    assert!(!table.is_empty());"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "",
          "    for i in 0..100 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "",
          "    let iter = table.iter();",
          "    assert!(iter.inner.items == 100);",
          "    assert!(iter.marker.is::<PhantomData<i32>>());",
          "    assert!(table.len() == 100);",
          "    assert!(!table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]