[
  {
    "uses": [
      "use std::hash::BuildHasher;",
      "use std::collections::HashSet;",
      "use std::hash::Hasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(3);",
          "        h.insert(1);",
          "        h.insert(2);",
          "        h;",
          "    };",
          "    ",
          "    let set_b: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(2);",
          "        h.insert(2);",
          "        h.insert(3);",
          "        h;",
          "    };",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "}"
        ],
        "oracle": [
          "    let (lower, upper) = sym_diff.size_hint();",
          "    assert_eq!(lower, 2);",
          "    assert_eq!(upper, Some(2));",
          "    assert!(upper.is_some());",
          "    assert!(lower <= upper.unwrap());"
        ],
        "code": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(3);",
          "        h.insert(1);",
          "        h.insert(2);",
          "        h;",
          "    };",
          "    ",
          "    let set_b: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(2);",
          "        h.insert(2);",
          "        h.insert(3);",
          "        h;",
          "    };",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    assert_eq!(lower, 2);",
          "    assert_eq!(upper, Some(2));",
          "    assert!(upper.is_some());",
          "    assert!(lower <= upper.unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::new();",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::new();",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(sym_diff.size_hint(), (0, Some(0)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (3, Some(3)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3, 6]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (3, Some(5)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([2, 3, 7]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (5, Some(5)));"
        ],
        "code": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::new();",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::new();",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "    assert_eq!(sym_diff.size_hint(), (0, Some(0)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (3, Some(3)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3, 6]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 2, 3, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (3, Some(5)));",
          "    let set_a: HashSet<i32, DummyHasher> = HashSet::from([2, 3, 7]);",
          "    let set_b: HashSet<i32, DummyHasher> = HashSet::from([1, 4, 5]);",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "    assert_eq!(sym_diff.size_hint(), (5, Some(5)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(4);",
          "        h.insert(1);",
          "        h.insert(2);",
          "        h.insert(3);",
          "        h.insert(4);",
          "        h;",
          "    };",
          "    ",
          "    let set_b: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(1);",
          "        h.insert(4);",
          "        h;",
          "    };",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(upper.unwrap(), 4);",
          "    assert_eq!(lower, 4);",
          "    assert!(sym_diff.size_hint().1.is_some());",
          "    assert!(sym_diff.size_hint().0 >= 0);",
          "    assert_eq!(sym_diff.size_hint().0 + 1, sym_diff.size_hint().1.unwrap());"
        ],
        "code": [
          "{",
          "    use std::collections::HashSet;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct DummyHasher;",
          "    impl BuildHasher for DummyHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "",
          "    let set_a: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(4);",
          "        h.insert(1);",
          "        h.insert(2);",
          "        h.insert(3);",
          "        h.insert(4);",
          "        h;",
          "    };",
          "    ",
          "    let set_b: HashSet<i32, DummyHasher> = {",
          "        let mut h = HashSet::with_capacity(1);",
          "        h.insert(4);",
          "        h;",
          "    };",
          "",
          "    let diff = Difference { iter: set_a.iter(), other: &set_b };",
          "    let sym_diff = SymmetricDifference { iter: diff.chain(set_b.iter()) };",
          "",
          "    let (lower, upper) = sym_diff.size_hint();",
          "    println!(\"Size hint: {:?}, {:?}\", lower, upper);",
          "    assert_eq!(upper.unwrap(), 4);",
          "    assert_eq!(lower, 4);",
          "    assert!(sym_diff.size_hint().1.is_some());",
          "    assert!(sym_diff.size_hint().0 >= 0);",
          "    assert_eq!(sym_diff.size_hint().0 + 1, sym_diff.size_hint().1.unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]