[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&1, &3]);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([4, 5]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&4, &6]);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&1, &3]);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from([4, 5]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from([5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&4, &6]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![4, 5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(result.contains(&6));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2});",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 2);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&3));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 0);",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![4, 5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(result.contains(&6));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    ",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2});",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![2, 3]);",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result.len(), 2);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![4, 5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 6);",
          "    assert!(matches!(_result[0], &1));",
          "    assert!(matches!(_result[1], &2));",
          "    assert!(matches!(_result[2], &3));",
          "    assert!(matches!(_result[3], &4));",
          "    assert!(matches!(_result[4], &5));",
          "    assert!(matches!(_result[5], &6));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![4, 5, 6]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(_result.len(), 6);",
          "    assert!(matches!(_result[0], &1));",
          "    assert!(matches!(_result[1], &2));",
          "    assert!(matches!(_result[2], &3));",
          "    assert!(matches!(_result[3], &4));",
          "    assert!(matches!(_result[4], &5));",
          "    assert!(matches!(_result[5], &6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![2, 3, 4]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 2);",
          "    assert!(matches!(_result[0], 1 | 4));",
          "    assert!(matches!(_result[1], 1 | 4));",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&4));",
          "    assert!(!_result.contains(&2));",
          "    assert!(!_result.contains(&3));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![2, 3, 4]);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(_result.len(), 2);",
          "    assert!(matches!(_result[0], 1 | 4));",
          "    assert!(matches!(_result[1], 1 | 4));",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&4));",
          "    assert!(!_result.contains(&2));",
          "    assert!(!_result.contains(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&1, &2, &3]);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(vec![1, 2, 3]);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::new();",
          "    let symmetric_difference = SymmetricDifference {",
          "    iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(result, vec![&1, &2, &3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(1..1000);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(500..1500);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 1000);",
          "    assert!(_result.contains(&&1));",
          "    assert!(_result.contains(&&499));",
          "    assert!(_result.contains(&&1000));",
          "    assert!(_result.contains(&&1499));",
          "    assert!(!_result.contains(&&500));",
          "    assert!(!_result.contains(&&999));",
          "    assert!(set_a.iter().all(|x| _result.contains(x) || !set_b.contains(x)));",
          "    assert!(set_b.iter().all(|x| _result.contains(x) || !set_a.contains(x)));",
          "    assert!(set_a.iter().filter(|&&x| set_b.contains(&x)).count() == 0);",
          "    assert!(set_b.iter().filter(|&&x| set_a.contains(&x)).count() == 0);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(1..1000);",
          "    let set_b: HashSet<i32, DefaultHashBuilder> = HashSet::from_iter(500..1500);",
          "    let symmetric_difference = SymmetricDifference {",
          "        iter: set_a.difference(&set_b).chain(set_b.difference(&set_a)),",
          "    };",
          "    let _result: Vec<_> = symmetric_difference.collect();",
          "    assert_eq!(_result.len(), 1000);",
          "    assert!(_result.contains(&&1));",
          "    assert!(_result.contains(&&499));",
          "    assert!(_result.contains(&&1000));",
          "    assert!(_result.contains(&&1499));",
          "    assert!(!_result.contains(&&500));",
          "    assert!(!_result.contains(&&999));",
          "    assert!(set_a.iter().all(|x| _result.contains(x) || !set_b.contains(x)));",
          "    assert!(set_b.iter().all(|x| _result.contains(x) || !set_a.contains(x)));",
          "    assert!(set_a.iter().filter(|&&x| set_b.contains(&x)).count() == 0);",
          "    assert!(set_b.iter().filter(|&&x| set_a.contains(&x)).count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]