[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() == 0);",
          "    let table_with_non_zero_capacity: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert_eq!(table_with_non_zero_capacity.len(), 0);",
          "    assert!(table_with_non_zero_capacity.capacity() >= 10);",
          "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "    assert!(table_negative_capacity.capacity() > 0);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() == 0);",
          "    let table_with_non_zero_capacity: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert_eq!(table_with_non_zero_capacity.len(), 0);",
          "    assert!(table_with_non_zero_capacity.capacity() >= 10);",
          "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "    assert!(table_negative_capacity.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1);",
          "    let table_zero_capacity: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(table_zero_capacity.len(), 0);",
          "    assert_eq!(table_zero_capacity.capacity(), 0);",
          "    let table_ten_capacity: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert!(table_ten_capacity.capacity() >= 10);",
          "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "    assert!(table_negative_capacity.capacity() >= usize::MAX);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(1);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1);",
          "    let table_zero_capacity: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(table_zero_capacity.len(), 0);",
          "    assert_eq!(table_zero_capacity.capacity(), 0);",
          "    let table_ten_capacity: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert!(table_ten_capacity.capacity() >= 10);",
          "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "    assert!(table_negative_capacity.capacity() >= usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 10);",
          "    assert_eq!(table.raw.table.capacity(), 10);",
          "    assert_eq!(table.raw.marker, std::marker::PhantomData::<&str>);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 10);",
          "    assert_eq!(table.raw.table.capacity(), 10);",
          "    assert_eq!(table.raw.marker, std::marker::PhantomData::<&str>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 100);",
          "    let empty_table: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(empty_table.len(), 0);",
          "    assert_eq!(empty_table.capacity(), 0);",
          "    let small_table: HashTable<&str> = HashTable::with_capacity(1);",
          "    assert_eq!(small_table.len(), 0);",
          "    assert!(small_table.capacity() >= 1);",
          "    let mid_table: HashTable<&str> = HashTable::with_capacity(50);",
          "    assert_eq!(mid_table.len(), 0);",
          "    assert!(mid_table.capacity() >= 50);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(100);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 100);",
          "    let empty_table: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(empty_table.len(), 0);",
          "    assert_eq!(empty_table.capacity(), 0);",
          "    let small_table: HashTable<&str> = HashTable::with_capacity(1);",
          "    assert_eq!(small_table.len(), 0);",
          "    assert!(small_table.capacity() >= 1);",
          "    let mid_table: HashTable<&str> = HashTable::with_capacity(50);",
          "    assert_eq!(mid_table.len(), 0);",
          "    assert!(mid_table.capacity() >= 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= usize::MAX);",
          "    let table_zero: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(table_zero.len(), 0);",
          "    assert_eq!(table_zero.capacity(), 0);",
          "    let table_ten: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert_eq!(table_ten.len(), 0);",
          "    assert!(table_ten.capacity() >= 10);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= usize::MAX);",
          "    let table_zero: HashTable<&str> = HashTable::with_capacity(0);",
          "    assert_eq!(table_zero.len(), 0);",
          "    assert_eq!(table_zero.capacity(), 0);",
          "    let table_ten: HashTable<&str> = HashTable::with_capacity(10);",
          "    assert_eq!(table_ten.len(), 0);",
          "    assert!(table_ten.capacity() >= 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]