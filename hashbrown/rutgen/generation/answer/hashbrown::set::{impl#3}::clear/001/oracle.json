[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.clear();",
          "    set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    set.insert(1);",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.clear();",
          "    set.is_empty();",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    set.insert(1);",
          "    set.clear();",
          "    assert_eq!(set.len(), 0);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(5);",
          "    set.clear();",
          "    set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.iter().next().is_none());",
          "    assert_eq!(set.capacity(), initial_capacity);",
          "    assert_eq!(set.drain().count(), 0);"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(5);",
          "    set.clear();",
          "    set.is_empty();",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.iter().next().is_none());",
          "    assert_eq!(set.capacity(), initial_capacity);",
          "    assert_eq!(set.drain().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.clear();",
          "    set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.iter().next().is_none());",
          "    let mut set2: HashSet<i32> = HashSet::new();",
          "    set2.clear();",
          "    assert!(set2.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    set.clear();",
          "    set.is_empty();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.iter().next().is_none());",
          "    let mut set2: HashSet<i32> = HashSet::new();",
          "    set2.clear();",
          "    assert!(set2.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<String> = HashSet::new();",
          "    set.insert(\"Hello\".to_string());",
          "    set.insert(\"World\".to_string());",
          "    set.clear();",
          "    set.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.iter().count() == 0);",
          "    assert!(set.capacity() > 0);",
          "    assert!(set.drain().count() == 0);",
          "    set.clear();",
          "    assert!(set.is_empty());"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<String> = HashSet::new();",
          "    set.insert(\"Hello\".to_string());",
          "    set.insert(\"World\".to_string());",
          "    set.clear();",
          "    set.is_empty();",
          "    assert!(set.is_empty());",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.iter().count() == 0);",
          "    assert!(set.capacity() > 0);",
          "    assert!(set.drain().count() == 0);",
          "    set.clear();",
          "    assert!(set.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]