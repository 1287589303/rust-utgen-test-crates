[
  {
    "uses": [
      "use bumpalo::Bump;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(0, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(0, &bump);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(1, &bump);",
          "}"
        ],
        "oracle": [
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() >= 1);",
          "    ",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(0, &bump);",
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() == 0);",
          "    ",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(5, &bump);",
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() >= 5);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(1, &bump);",
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() >= 1);",
          "    ",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(0, &bump);",
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() == 0);",
          "    ",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(5, &bump);",
          "    assert!(map.len() == 0);",
          "    assert!(map.capacity() >= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(10, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.capacity() >= 10);",
          "    let empty_map_capacity = map.capacity();",
          "    map.insert(\"One\", 1);",
          "    map.insert(\"Two\", 2);",
          "    map.insert(\"Three\", 3);",
          "    map.insert(\"Four\", 4);",
          "    map.insert(\"Five\", 5);",
          "    assert_eq!(map.len(), 5);",
          "    assert_eq!(map.capacity(), empty_map_capacity);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(10, &bump);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.capacity() >= 10);",
          "    let empty_map_capacity = map.capacity();",
          "    map.insert(\"One\", 1);",
          "    map.insert(\"Two\", 2);",
          "    map.insert(\"Three\", 3);",
          "    map.insert(\"Four\", 4);",
          "    map.insert(\"Five\", 5);",
          "    assert_eq!(map.len(), 5);",
          "    assert_eq!(map.capacity(), empty_map_capacity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(1000, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.capacity() >= 1000);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let map = HashMap::with_capacity_in(1000, &bump);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.capacity() >= 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]