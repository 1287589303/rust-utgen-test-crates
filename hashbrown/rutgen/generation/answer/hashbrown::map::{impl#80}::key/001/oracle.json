[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 0,",
          "        key: \"test_key\",",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.key(), &\"test_key\");"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 0,",
          "        key: \"test_key\",",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "    assert_eq!(vacant_entry.key(), &\"test_key\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<u32, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 1,",
          "        key: 42,",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.key(), &42);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<u32, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 1,",
          "        key: 42,",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "    assert_eq!(vacant_entry.key(), &42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomKey(i32);",
          "    let mut map: HashMap<CustomKey, u32> = HashMap::new();",
          "    let key = CustomKey(7);",
          "    let vacant_entry = VacantEntry {",
          "        hash: 2,",
          "        key,",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.key(), &CustomKey(7));"
        ],
        "code": [
          "{",
          "    struct CustomKey(i32);",
          "    let mut map: HashMap<CustomKey, u32> = HashMap::new();",
          "    let key = CustomKey(7);",
          "    let vacant_entry = VacantEntry {",
          "        hash: 2,",
          "        key,",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "    assert_eq!(vacant_entry.key(), &CustomKey(7));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 3,",
          "        key: \"empty_map_key\",",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.key(), &\"empty_map_key\");"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let vacant_entry = VacantEntry {",
          "        hash: 3,",
          "        key: \"empty_map_key\",",
          "        table: &mut map,",
          "    };",
          "    vacant_entry.key();",
          "    assert_eq!(vacant_entry.key(), &\"empty_map_key\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]