[
  {
    "uses": [
      "use hashbrown::hash_map::HashMap;",
      "use hashbrown::hash_map::EntryRef;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    map.insert(\"poneyland\".to_owned(), 3);",
          "",
          "    let entry_ref = EntryRef::Occupied(OccupiedEntry {",
          "        hash: 0,",
          "        elem: Bucket::new((String::from(\"poneyland\"), 3)),",
          "        table: &mut map,",
          "    });",
          "",
          "    let key = entry_ref.key();",
          "    let key_borrowed: &str = key.borrow();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_borrowed, \"poneyland\");",
          "    assert_eq!(entry_ref.key(), \"poneyland\");"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    map.insert(\"poneyland\".to_owned(), 3);",
          "",
          "    let entry_ref = EntryRef::Occupied(OccupiedEntry {",
          "        hash: 0,",
          "        elem: Bucket::new((String::from(\"poneyland\"), 3)),",
          "        table: &mut map,",
          "    });",
          "",
          "    let key = entry_ref.key();",
          "    let key_borrowed: &str = key.borrow();",
          "    assert_eq!(key_borrowed, \"poneyland\");",
          "    assert_eq!(entry_ref.key(), \"poneyland\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "",
          "    let entry_ref = EntryRef::Vacant(VacantEntryRef {",
          "        hash: 0,",
          "        key: &\"horseland\",",
          "        table: &mut map,",
          "    });",
          "",
          "    let key = entry_ref.key();",
          "    let key_borrowed: &str = key.borrow();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key_borrowed, \"horseland\");",
          "    assert_eq!(map.entry_ref(\"horseland\").key(), \"horseland\");",
          "    let entry_ref_occupied = EntryRef::Occupied(OccupiedEntry {",
          "    hash: 1,",
          "    elem: Bucket::new((\"poneyland\", 3)),",
          "    table: &mut map",
          "    });",
          "    let key_occupied = entry_ref_occupied.key();",
          "    let key_borrowed_occupied: &str = key_occupied.borrow();",
          "    assert_eq!(key_borrowed_occupied, \"poneyland\");",
          "    map.insert(\"poneyland\".to_owned(), 3);",
          "    assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "",
          "    let entry_ref = EntryRef::Vacant(VacantEntryRef {",
          "        hash: 0,",
          "        key: &\"horseland\",",
          "        table: &mut map,",
          "    });",
          "",
          "    let key = entry_ref.key();",
          "    let key_borrowed: &str = key.borrow();",
          "    assert_eq!(key_borrowed, \"horseland\");",
          "    assert_eq!(map.entry_ref(\"horseland\").key(), \"horseland\");",
          "    let entry_ref_occupied = EntryRef::Occupied(OccupiedEntry {",
          "    hash: 1,",
          "    elem: Bucket::new((\"poneyland\", 3)),",
          "    table: &mut map",
          "    });",
          "    let key_occupied = entry_ref_occupied.key();",
          "    let key_borrowed_occupied: &str = key_occupied.borrow();",
          "    assert_eq!(key_borrowed_occupied, \"poneyland\");",
          "    map.insert(\"poneyland\".to_owned(), 3);",
          "    assert_eq!(map.entry_ref(\"poneyland\").key(), \"poneyland\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]