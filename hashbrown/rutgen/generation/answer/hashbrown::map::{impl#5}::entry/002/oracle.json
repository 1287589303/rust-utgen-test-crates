[
  {
    "uses": [
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<char, i32> = HashMap::new();",
          "    map.insert('a', 1);",
          "    map.insert('b', 2);",
          "    map.insert('c', 3);",
          "",
          "    let key = 'a';",
          "    let entry = map.entry(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { hash: make_hash(&map.hash_builder, &key), elem: map.table.find(make_hash(&map.hash_builder, &key), equivalent_key(&key)).unwrap(), table: &mut map }));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<char, i32> = HashMap::new();",
          "    map.insert('a', 1);",
          "    map.insert('b', 2);",
          "    map.insert('c', 3);",
          "",
          "    let key = 'a';",
          "    let entry = map.entry(key);",
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { hash: make_hash(&map.hash_builder, &key), elem: map.table.find(make_hash(&map.hash_builder, &key), equivalent_key(&key)).unwrap(), table: &mut map }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.insert(\"apple\", 1);",
          "    map.insert(\"banana\", 2);",
          "    map.insert(\"cherry\", 3);",
          "",
          "    let key = \"banana\";",
          "    let entry = map.entry(key);",
          "}"
        ],
        "oracle": [
          "    let hash = make_hash::<&str, DefaultHashBuilder>(&map.hash_builder, &key);",
          "    let elem = map.table.find(hash, equivalent_key(&key));",
          "    assert!(elem.is_some());",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    if let Entry::Occupied(occupied_entry) = entry {",
          "    assert_eq!(occupied_entry.hash, hash);",
          "    assert_eq!(occupied_entry.table.get_key_value(&key), Some((&key, &2)));",
          "    }"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.insert(\"apple\", 1);",
          "    map.insert(\"banana\", 2);",
          "    map.insert(\"cherry\", 3);",
          "",
          "    let key = \"banana\";",
          "    let entry = map.entry(key);",
          "    let hash = make_hash::<&str, DefaultHashBuilder>(&map.hash_builder, &key);",
          "    let elem = map.table.find(hash, equivalent_key(&key));",
          "    assert!(elem.is_some());",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    if let Entry::Occupied(occupied_entry) = entry {",
          "    assert_eq!(occupied_entry.hash, hash);",
          "    assert_eq!(occupied_entry.table.get_key_value(&key), Some((&key, &2)));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "",
          "    let key = 2;",
          "    let entry = map.entry(key);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { hash: make_hash(&map.hash_builder, &key), elem: map.table.find(make_hash(&map.hash_builder, &key), equivalent_key(&key)).unwrap(), table: &mut map }));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "",
          "    let key = 2;",
          "    let entry = map.entry(key);",
          "    assert_eq!(entry, Entry::Occupied(OccupiedEntry { hash: make_hash(&map.hash_builder, &key), elem: map.table.find(make_hash(&map.hash_builder, &key), equivalent_key(&key)).unwrap(), table: &mut map }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]