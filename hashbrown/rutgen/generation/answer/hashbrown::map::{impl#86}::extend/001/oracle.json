[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let empty_iter: Vec<(&i32, &i32)> = vec![];",
          "    map.extend(empty_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.get(&1), None);",
          "    assert_eq!(map.get(&2), None);",
          "    assert_eq!(map.get(&3), None);",
          "    assert_eq!(map.get(&4), None);",
          "    assert_eq!(map.get(&5), None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let empty_iter: Vec<(&i32, &i32)> = vec![];",
          "    map.extend(empty_iter.iter());",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.get(&1), None);",
          "    assert_eq!(map.get(&2), None);",
          "    assert_eq!(map.get(&3), None);",
          "    assert_eq!(map.get(&4), None);",
          "    assert_eq!(map.get(&5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let single_iter = vec![(&1, &1)];",
          "    map.extend(single_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), None);",
          "    map.extend(vec![(&2, &2)].iter());",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&1), Some(&1));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let single_iter = vec![(&1, &1)];",
          "    map.extend(single_iter.iter());",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), None);",
          "    map.extend(vec![(&2, &2)].iter());",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&1), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let non_duplicate_iter = vec![(&2, &2), (&3, &3)];",
          "    map.extend(non_duplicate_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&3));",
          "    assert!(map.get(&4).is_none());",
          "    assert_eq!(map.table.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let non_duplicate_iter = vec![(&2, &2), (&3, &3)];",
          "    map.extend(non_duplicate_iter.iter());",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&3));",
          "    assert!(map.get(&4).is_none());",
          "    assert_eq!(map.table.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let duplicate_key_iter = vec![(&1, &1), (&2, &2)];",
          "    map.extend(duplicate_key_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let duplicate_key_iter = vec![(&1, &1), (&2, &2)];",
          "    map.extend(duplicate_key_iter.iter());",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let multiple_elements_iter = vec![",
          "        (&1, &10), ",
          "        (&2, &20), ",
          "        (&3, &30),",
          "        (&4, &40)",
          "    ];",
          "    map.extend(multiple_elements_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));",
          "    assert_eq!(map.get(&4), Some(&40));",
          "    assert_eq!(map.len(), 4);",
          "    assert_eq!(map.capacity(), 8);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    map.insert(1, 100);",
          "    let multiple_elements_iter = vec![",
          "        (&1, &10), ",
          "        (&2, &20), ",
          "        (&3, &30),",
          "        (&4, &40)",
          "    ];",
          "    map.extend(multiple_elements_iter.iter());",
          "    assert_eq!(map.get(&1), Some(&10));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));",
          "    assert_eq!(map.get(&4), Some(&40));",
          "    assert_eq!(map.len(), 4);",
          "    assert_eq!(map.capacity(), 8);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let keys_in_range_iter = (0..10).map(|k| (&k, &(k * 2)));",
          "    map.extend(keys_in_range_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&6), Some(&12));",
          "    assert_eq!(map.get(&7), Some(&14));",
          "    assert_eq!(map.get(&8), Some(&16));",
          "    assert_eq!(map.get(&9), Some(&18));",
          "    assert_eq!(map.get(&10), None);",
          "    assert_eq!(map.get(&-1), None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let keys_in_range_iter = (0..10).map(|k| (&k, &(k * 2)));",
          "    map.extend(keys_in_range_iter);",
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&6), Some(&12));",
          "    assert_eq!(map.get(&7), Some(&14));",
          "    assert_eq!(map.get(&8), Some(&16));",
          "    assert_eq!(map.get(&9), Some(&18));",
          "    assert_eq!(map.get(&10), None);",
          "    assert_eq!(map.get(&-1), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let negative_keys_iter = vec![(&-1, &1), (&-2, &2)];",
          "    map.extend(negative_keys_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&-1), Some(&1));",
          "    assert_eq!(map.get(&-2), Some(&2));",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let negative_keys_iter = vec![(&-1, &1), (&-2, &2)];",
          "    map.extend(negative_keys_iter.iter());",
          "    assert_eq!(map.get(&-1), Some(&1));",
          "    assert_eq!(map.get(&-2), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<u64, u32> = HashMap::new();",
          "    let u64_iter = (0..10).map(|k| (&k, &(k as u32 * 2)));",
          "    map.extend(u64_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&6), Some(&12));",
          "    assert_eq!(map.get(&7), Some(&14));",
          "    assert_eq!(map.get(&8), Some(&16));",
          "    assert_eq!(map.get(&9), Some(&18));",
          "    assert!(map.get(&10).is_none());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<u64, u32> = HashMap::new();",
          "    let u64_iter = (0..10).map(|k| (&k, &(k as u32 * 2)));",
          "    map.extend(u64_iter);",
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&6), Some(&12));",
          "    assert_eq!(map.get(&7), Some(&14));",
          "    assert_eq!(map.get(&8), Some(&16));",
          "    assert_eq!(map.get(&9), Some(&18));",
          "    assert!(map.get(&10).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i64, i32> = HashMap::new();",
          "    let large_range_iter = (0..10).map(|k| (&(k as i64), &(k as i32)));",
          "    map.extend(large_range_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&(0 as i64)), Some(&(0 as i32)));",
          "    assert_eq!(map.get(&(1 as i64)), Some(&(1 as i32)));",
          "    assert_eq!(map.get(&(2 as i64)), Some(&(2 as i32)));",
          "    assert_eq!(map.get(&(3 as i64)), Some(&(3 as i32)));",
          "    assert_eq!(map.get(&(4 as i64)), Some(&(4 as i32)));",
          "    assert_eq!(map.get(&(5 as i64)), Some(&(5 as i32)));",
          "    assert_eq!(map.get(&(6 as i64)), Some(&(6 as i32)));",
          "    assert_eq!(map.get(&(7 as i64)), Some(&(7 as i32)));",
          "    assert_eq!(map.get(&(8 as i64)), Some(&(8 as i32)));",
          "    assert_eq!(map.get(&(9 as i64)), Some(&(9 as i32)));",
          "    assert_eq!(map.len(), 10);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i64, i32> = HashMap::new();",
          "    let large_range_iter = (0..10).map(|k| (&(k as i64), &(k as i32)));",
          "    map.extend(large_range_iter);",
          "    assert_eq!(map.get(&(0 as i64)), Some(&(0 as i32)));",
          "    assert_eq!(map.get(&(1 as i64)), Some(&(1 as i32)));",
          "    assert_eq!(map.get(&(2 as i64)), Some(&(2 as i32)));",
          "    assert_eq!(map.get(&(3 as i64)), Some(&(3 as i32)));",
          "    assert_eq!(map.get(&(4 as i64)), Some(&(4 as i32)));",
          "    assert_eq!(map.get(&(5 as i64)), Some(&(5 as i32)));",
          "    assert_eq!(map.get(&(6 as i64)), Some(&(6 as i32)));",
          "    assert_eq!(map.get(&(7 as i64)), Some(&(7 as i32)));",
          "    assert_eq!(map.get(&(8 as i64)), Some(&(8 as i32)));",
          "    assert_eq!(map.get(&(9 as i64)), Some(&(9 as i32)));",
          "    assert_eq!(map.len(), 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<usize, usize> = HashMap::new();",
          "    let compatible_iter = vec![(&0, &1), (&1, &2)];",
          "    map.extend(compatible_iter.iter());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&0));",
          "    assert!(map.contains_key(&1));",
          "    assert!(!map.contains_key(&2));",
          "    map.extend(vec![(&2, &3)].iter());",
          "    assert_eq!(map.get(&2), Some(&3));",
          "    assert_eq!(map.len(), 3);",
          "    map.extend(vec![(&0, &4), (&1, &5)].iter());",
          "    assert_eq!(map.get(&0), Some(&4));",
          "    assert_eq!(map.get(&1), Some(&5));",
          "    assert_eq!(map.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<usize, usize> = HashMap::new();",
          "    let compatible_iter = vec![(&0, &1), (&1, &2)];",
          "    map.extend(compatible_iter.iter());",
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&0));",
          "    assert!(map.contains_key(&1));",
          "    assert!(!map.contains_key(&2));",
          "    map.extend(vec![(&2, &3)].iter());",
          "    assert_eq!(map.get(&2), Some(&3));",
          "    assert_eq!(map.len(), 3);",
          "    map.extend(vec![(&0, &4), (&1, &5)].iter());",
          "    assert_eq!(map.get(&0), Some(&4));",
          "    assert_eq!(map.get(&1), Some(&5));",
          "    assert_eq!(map.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]