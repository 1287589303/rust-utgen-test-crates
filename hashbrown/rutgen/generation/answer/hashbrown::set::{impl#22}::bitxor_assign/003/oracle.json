[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    a ^= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    a ^= &b;",
          "    let expected = [1, 2, 4, 5, 6];",
          "    let result: Vec<_> = a.iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for &x in &result { assert!(expected.contains(&x)); }"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    a ^= &b;",
          "    let mut a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    a ^= &b;",
          "    let expected = [1, 2, 4, 5, 6];",
          "    let result: Vec<_> = a.iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for &x in &result { assert!(expected.contains(&x)); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<String> = vec![\"apple\".to_string(), \"banana\".to_string()].into_iter().collect();",
          "    let b: HashSet<String> = vec![\"cherry\".to_string(), \"date\".to_string()].into_iter().collect();",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(a.contains(&\"apple\".to_string()), true);",
          "    assert_eq!(a.contains(&\"banana\".to_string()), true);",
          "    assert_eq!(a.contains(&\"cherry\".to_string()), true);",
          "    assert_eq!(a.contains(&\"date\".to_string()), true);",
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(a.is_empty(), false);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<String> = vec![\"apple\".to_string(), \"banana\".to_string()].into_iter().collect();",
          "    let b: HashSet<String> = vec![\"cherry\".to_string(), \"date\".to_string()].into_iter().collect();",
          "    a ^= &b;",
          "    assert_eq!(a.contains(&\"apple\".to_string()), true);",
          "    assert_eq!(a.contains(&\"banana\".to_string()), true);",
          "    assert_eq!(a.contains(&\"cherry\".to_string()), true);",
          "    assert_eq!(a.contains(&\"date\".to_string()), true);",
          "    assert_eq!(a.len(), 4);",
          "    assert_eq!(a.is_empty(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]