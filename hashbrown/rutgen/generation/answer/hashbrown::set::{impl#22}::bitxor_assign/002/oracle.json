[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&4));",
          "    assert!(a.contains(&5));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2].into_iter().collect();",
          "    let b: HashSet<_> = vec![3, 4].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(1));",
          "    assert!(a.contains(2));",
          "    assert!(a.contains(3));",
          "    assert!(a.contains(4));",
          "    assert!(!a.contains(5));",
          "    assert_eq!(a.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2].into_iter().collect();",
          "    let b: HashSet<_> = vec![3, 4].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "    assert!(a.contains(1));",
          "    assert!(a.contains(2));",
          "    assert!(a.contains(3));",
          "    assert!(a.contains(4));",
          "    assert!(!a.contains(5));",
          "    assert_eq!(a.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![3].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![3].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(!a.contains(&3));",
          "    assert_eq!(a.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = HashSet::new(); // empty set",
          "    ",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert_eq!(a.len(), 3);",
          "    assert!(b.is_empty());",
          "    assert!(a.symmetric_difference(&b).count() == a.len());",
          "    assert!(a.symmetric_difference(&b).all(|x| *x == 1 || *x == 2 || *x == 3);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = HashSet::new(); // empty set",
          "    ",
          "    a ^= &b;",
          "    assert!(a.contains(&1));",
          "    assert!(a.contains(&2));",
          "    assert!(a.contains(&3));",
          "    assert_eq!(a.len(), 3);",
          "    assert!(b.is_empty());",
          "    assert!(a.symmetric_difference(&b).count() == a.len());",
          "    assert!(a.symmetric_difference(&b).all(|x| *x == 1 || *x == 2 || *x == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "}"
        ],
        "oracle": [
          "    assert!(a.is_empty());",
          "    assert_eq!(a.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<_> = vec![1, 2, 3].into_iter().collect();",
          "    ",
          "    a ^= &b;",
          "    assert!(a.is_empty());",
          "    assert_eq!(a.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]