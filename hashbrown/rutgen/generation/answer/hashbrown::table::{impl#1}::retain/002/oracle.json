[
  {
    "uses": [
      "use hashbrown::HashTable;",
      "use hashbrown::DefaultHashBuilder;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    ",
          "    let len = table.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert!(table.find(hasher_fn(&1), |&v| v == 1).is_none());",
          "    assert!(table.find(hasher_fn(&3), |&v| v == 3).is_none());",
          "    assert!(table.find(hasher_fn(&5), |&v| v == 5).is_none());",
          "    assert!(table.find(hasher_fn(&2), |&v| v == 2).is_some());",
          "    assert!(table.find(hasher_fn(&4), |&v| v == 4).is_some());",
          "    assert!(table.find(hasher_fn(&6), |&v| v == 6).is_some());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    ",
          "    let len = table.len();",
          "    assert_eq!(len, 3);",
          "    assert!(table.find(hasher_fn(&1), |&v| v == 1).is_none());",
          "    assert!(table.find(hasher_fn(&3), |&v| v == 3).is_none());",
          "    assert!(table.find(hasher_fn(&5), |&v| v == 5).is_none());",
          "    assert!(table.find(hasher_fn(&2), |&v| v == 2).is_some());",
          "    assert!(table.find(hasher_fn(&4), |&v| v == 4).is_some());",
          "    assert!(table.find(hasher_fn(&6), |&v| v == 6).is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    ",
          "    let len = table.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 3);",
          "    assert!(table.find(hasher_fn(&1), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&3), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&5), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&2), hasher_fn).is_some());",
          "    assert!(table.find(hasher_fn(&4), hasher_fn).is_some());",
          "    assert!(table.find(hasher_fn(&6), hasher_fn).is_none());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    ",
          "    let len = table.len();",
          "    assert_eq!(len, 3);",
          "    assert!(table.find(hasher_fn(&1), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&3), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&5), hasher_fn).is_none());",
          "    assert!(table.find(hasher_fn(&2), hasher_fn).is_some());",
          "    assert!(table.find(hasher_fn(&4), hasher_fn).is_some());",
          "    assert!(table.find(hasher_fn(&6), hasher_fn).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]