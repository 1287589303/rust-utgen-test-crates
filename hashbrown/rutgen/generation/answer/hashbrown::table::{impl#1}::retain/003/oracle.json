[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x % 2 == 1); // Predicate returns false for all elements",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 5);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 5);",
          "    assert!(table.iter().count() == 0);",
          "    assert!(table.iter_mut().count() == 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x % 2 == 1); // Predicate returns false for all elements",
          "    assert_eq!(table.len(), 5);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 5);",
          "    assert!(table.iter().count() == 0);",
          "    assert!(table.iter_mut().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x > 4); // Predicate will return false for 1, 2, 3, 4",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 1);",
          "    assert_eq!(table.find(hasher(&5), hasher), Some(&5));",
          "    assert_eq!(table.find(hasher(&4), hasher), None);",
          "    assert_eq!(table.find(hasher(&3), hasher), None);",
          "    assert_eq!(table.find(hasher(&2), hasher), None);",
          "    assert_eq!(table.find(hasher(&1), hasher), None);",
          "    assert!(table.is_empty() == false);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 1..=5 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x > 4); // Predicate will return false for 1, 2, 3, 4",
          "    assert_eq!(table.len(), 1);",
          "    assert_eq!(table.find(hasher(&5), hasher), Some(&5));",
          "    assert_eq!(table.find(hasher(&4), hasher), None);",
          "    assert_eq!(table.find(hasher(&3), hasher), None);",
          "    assert_eq!(table.find(hasher(&2), hasher), None);",
          "    assert_eq!(table.find(hasher(&1), hasher), None);",
          "    assert!(table.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "",
          "    table.retain(|&mut x| false); // Predicate returns false for all elements",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);  // Ensure the table is empty after retain",
          "    assert!(table.is_empty());  // Validate that table reports as empty",
          "    assert_eq!(table.capacity(), 1);  // Check that the capacity remains the same"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "",
          "    table.retain(|&mut x| false); // Predicate returns false for all elements",
          "    assert_eq!(table.len(), 0);  // Ensure the table is empty after retain",
          "    assert!(table.is_empty());  // Validate that table reports as empty",
          "    assert_eq!(table.capacity(), 1);  // Check that the capacity remains the same",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 10..=15 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x < 10); // Predicate returns false for all elements",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 6);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 6);",
          "    assert_eq!(table.iter().count(), 0);",
          "    assert!(table.raw.iter().count() == 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| val;",
          "",
          "    for x in 10..=15 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "",
          "    table.retain(|&mut x| x < 10); // Predicate returns false for all elements",
          "    assert_eq!(table.len(), 6);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 6);",
          "    assert_eq!(table.iter().count(), 0);",
          "    assert!(table.raw.iter().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]