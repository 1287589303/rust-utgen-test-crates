[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 3);",
          "    assert_eq!(table.find(0, |&x| x == 2), Some(&2));",
          "    assert_eq!(table.find(0, |&x| x == 4), Some(&4));",
          "    assert_eq!(table.find(0, |&x| x == 6), Some(&6));",
          "    assert_eq!(table.find(0, |&x| x == 1), None);",
          "    assert_eq!(table.find(0, |&x| x == 3), None);",
          "    assert_eq!(table.find(0, |&x| x == 5), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    assert_eq!(table.len(), 3);",
          "    assert_eq!(table.find(0, |&x| x == 2), Some(&2));",
          "    assert_eq!(table.find(0, |&x| x == 4), Some(&4));",
          "    assert_eq!(table.find(0, |&x| x == 6), Some(&6));",
          "    assert_eq!(table.find(0, |&x| x == 1), None);",
          "    assert_eq!(table.find(0, |&x| x == 3), None);",
          "    assert_eq!(table.find(0, |&x| x == 5), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x > 6); // All items will be removed",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 6);",
          "    table.retain(|&mut x| x > 6);",
          "    assert_eq!(table.len(), 0);",
          "    table.retain(|&mut x| x < 0);",
          "    assert_eq!(table.len(), 0);",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    assert_eq!(table.len(), 0);",
          "    for x in 1..=6 {",
          "    table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    assert_eq!(table.len(), 3);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x > 6); // All items will be removed",
          "    assert_eq!(table.len(), 6);",
          "    table.retain(|&mut x| x > 6);",
          "    assert_eq!(table.len(), 0);",
          "    table.retain(|&mut x| x < 0);",
          "    assert_eq!(table.len(), 0);",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    assert_eq!(table.len(), 0);",
          "    for x in 1..=6 {",
          "    table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x % 2 == 0);",
          "    assert_eq!(table.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x == 4); // Only item 4 should remain",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 1);",
          "    assert!(table.find(hasher(&1), hasher).is_none());",
          "    assert!(table.find(hasher(&2), hasher).is_none());",
          "    assert!(table.find(hasher(&3), hasher).is_none());",
          "    assert_eq!(table.find(hasher(&4), hasher), Some(&4));",
          "    assert!(table.find(hasher(&5), hasher).is_none());",
          "    assert!(table.find(hasher(&6), hasher).is_none());"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {}",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
          "    for x in 1..=6 {",
          "        table.insert_unique(hasher(&x), x, hasher);",
          "    }",
          "    table.retain(|&mut x| x == 4); // Only item 4 should remain",
          "    assert_eq!(table.len(), 1);",
          "    assert!(table.find(hasher(&1), hasher).is_none());",
          "    assert!(table.find(hasher(&2), hasher).is_none());",
          "    assert!(table.find(hasher(&3), hasher).is_none());",
          "    assert_eq!(table.find(hasher(&4), hasher), Some(&4));",
          "    assert!(table.find(hasher(&5), hasher).is_none());",
          "    assert!(table.find(hasher(&6), hasher).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]