[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 1; // (2^1) - 1",
          "    let hash = 0; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 1; // (2^1) - 1",
          "    let hash = 0; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 3; // (2^2) - 1",
          "    let hash = 1; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 3; // (2^2) - 1",
          "    let hash = 1; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 15; // (2^4) - 1",
          "    let hash = 5; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 15; // (2^4) - 1",
          "    let hash = 5; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 63; // (2^6) - 1",
          "    let hash = 32; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 63; // (2^6) - 1",
          "    let hash = 32; // Any non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 31; // (2^5) - 1",
          "    let hash = 63; // Testing the upper range of the non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    let bucket_mask = 31; // (2^5) - 1",
          "    let hash = 63; // Testing the upper range of the non-negative 64-bit integer",
          "    let raw_table_inner = RawTableInner {",
          "        bucket_mask,",
          "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
          "        growth_left: 0,",
          "        items: 0,",
          "    };",
          "    ",
          "    let result = raw_table_inner.probe_seq(hash);",
          "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
          "    assert_eq!(result.stride, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]