[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::new(),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.size_hint(), (0, Some(0)));",
          "    assert_eq!(values.size_hint().0, 0);",
          "    assert!(values.size_hint().1.is_some());",
          "    assert_eq!(values.size_hint().1.unwrap(), 0);"
        ],
        "code": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::new(),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "    assert_eq!(values.size_hint(), (0, Some(0)));",
          "    assert_eq!(values.size_hint().0, 0);",
          "    assert!(values.size_hint().1.is_some());",
          "    assert_eq!(values.size_hint().1.unwrap(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from(vec![(1, ())].into_iter()),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.size_hint(), (1, Some(1)));"
        ],
        "code": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from(vec![(1, ())].into_iter()),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "    assert_eq!(values.size_hint(), (1, Some(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from(vec![(1, ()), (2, ())].into_iter()),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.size_hint(), (2, Some(2)));",
          "    assert_eq!(values.size_hint().0, 2);",
          "    assert_eq!(values.size_hint().1, Some(2));",
          "    assert!(values.size_hint().1.is_some());",
          "    assert!(values.size_hint().0 > 0);",
          "    values.next();",
          "    assert_eq!(values.size_hint(), (1, Some(1)));",
          "    assert_eq!(values.size_hint().0, 1);",
          "    assert_eq!(values.size_hint().1, Some(1));",
          "    values.next();",
          "    assert_eq!(values.size_hint(), (0, Some(0)));",
          "    assert_eq!(values.size_hint().0, 0);",
          "    assert_eq!(values.size_hint().1, Some(0));",
          "    assert!(values.size_hint().1.is_some());"
        ],
        "code": [
          "{",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from(vec![(1, ()), (2, ())].into_iter()),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "    assert_eq!(values.size_hint(), (2, Some(2)));",
          "    assert_eq!(values.size_hint().0, 2);",
          "    assert_eq!(values.size_hint().1, Some(2));",
          "    assert!(values.size_hint().1.is_some());",
          "    assert!(values.size_hint().0 > 0);",
          "    values.next();",
          "    assert_eq!(values.size_hint(), (1, Some(1)));",
          "    assert_eq!(values.size_hint().0, 1);",
          "    assert_eq!(values.size_hint().1, Some(1));",
          "    values.next();",
          "    assert_eq!(values.size_hint(), (0, Some(0)));",
          "    assert_eq!(values.size_hint().0, 0);",
          "    assert_eq!(values.size_hint().1, Some(0));",
          "    assert!(values.size_hint().1.is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_size = std::usize::MAX;",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from((0..max_size).map(|i| (i, ()))),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    values.size_hint() == (max_size, Some(max_size))"
        ],
        "code": [
          "{",
          "    let max_size = std::usize::MAX;",
          "    let inner = IntoIter::<i32, (), Global> {",
          "        iter: map::IntoIter::from((0..max_size).map(|i| (i, ()))),",
          "    };",
          "    let values = IntoValues { inner };",
          "    values.size_hint();",
          "    values.size_hint() == (max_size, Some(max_size))",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]