[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    let map2: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len() != map2.len(), true);",
          "    assert_eq!(map1.eq(&map2), false);"
        ],
        "code": [
          "{",
          "    let map1: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    let map2: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert_eq!(map1.len() != map2.len(), true);",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    let map2: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), 1);",
          "    assert_eq!(map2.len(), 0);",
          "    assert!(map1.len() != map2.len());",
          "    assert_eq!(map1.eq(&map2), false);"
        ],
        "code": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    let map2: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert_eq!(map1.len(), 1);",
          "    assert_eq!(map2.len(), 0);",
          "    assert!(map1.len() != map2.len());",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    map1.insert(2, 200);",
          "    ",
          "    let mut map2 = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map2.insert(1, 100);",
          "    ",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len() != map2.len(), true);",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert!(map1.eq(&map2) == false);",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)) == false);"
        ],
        "code": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    map1.insert(2, 200);",
          "    ",
          "    let mut map2 = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map2.insert(1, 100);",
          "    ",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert_eq!(map1.len() != map2.len(), true);",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert!(map1.eq(&map2) == false);",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)) == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    ",
          "    let mut map2 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map2.insert(1, 100);",
          "    map2.insert(2, 200);",
          "    ",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), 1);",
          "    assert_eq!(map2.len(), 2);",
          "    assert_ne!(map1.len(), map2.len());",
          "    assert_eq!(map1.eq(&map2), false);"
        ],
        "code": [
          "{",
          "    let mut map1 = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map1.insert(1, 100);",
          "    ",
          "    let mut map2 = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map2.insert(1, 100);",
          "    map2.insert(2, 200);",
          "    ",
          "    assert_eq!(map1.eq(&map2), false);",
          "    assert_eq!(map1.len(), 1);",
          "    assert_eq!(map2.len(), 2);",
          "    assert_ne!(map1.len(), map2.len());",
          "    assert_eq!(map1.eq(&map2), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]