[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.eq(&map2));",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).is_some()));",
          "    assert!(map2.iter().all(|(key, value)| map1.get(key).is_some()));"
        ],
        "code": [
          "{",
          "    let map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map1.eq(&map2);",
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.eq(&map2));",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).is_some()));",
          "    assert!(map2.iter().all(|(key, value)| map1.get(key).is_some()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    let mut map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    ",
          "    map1.insert(1, \"one\");",
          "    map1.insert(2, \"two\");",
          "    ",
          "    map2.insert(1, \"one\");",
          "    map2.insert(2, \"two\");",
          "    ",
          "    map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    let result = map1.eq(&map2);",
          "    assert!(result);"
        ],
        "code": [
          "{",
          "    let mut map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    let mut map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    ",
          "    map1.insert(1, \"one\");",
          "    map1.insert(2, \"two\");",
          "    ",
          "    map2.insert(1, \"one\");",
          "    map2.insert(2, \"two\");",
          "    ",
          "    map1.eq(&map2);",
          "    assert_eq!(map1.len(), map2.len());",
          "    let result = map1.eq(&map2);",
          "    assert!(result);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    let mut map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    ",
          "    map1.insert(1, \"one\");",
          "    map1.insert(2, \"two\");",
          "    ",
          "    map2.insert(1, \"one\");",
          "    map2.insert(3, \"three\");",
          "    ",
          "    map1.eq(&map2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));",
          "    assert!(map1.eq(&map2));"
        ],
        "code": [
          "{",
          "    let mut map1: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    let mut map2: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    ",
          "    map1.insert(1, \"one\");",
          "    map1.insert(2, \"two\");",
          "    ",
          "    map2.insert(1, \"one\");",
          "    map2.insert(3, \"three\");",
          "    ",
          "    map1.eq(&map2);",
          "    assert_eq!(map1.len(), map2.len());",
          "    assert!(map1.iter().all(|(key, value)| map2.get(key).map_or(false, |v| *value == *v)));",
          "    assert!(map1.eq(&map2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]