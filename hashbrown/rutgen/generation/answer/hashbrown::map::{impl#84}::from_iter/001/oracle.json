[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Vec<(String, i32)> = vec![];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "}"
        ],
        "oracle": [
          "    map.is_empty() == true",
          "    map.len() == 0",
          "    map.capacity() == 0"
        ],
        "code": [
          "{",
          "    let input: Vec<(String, i32)> = vec![];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "    map.is_empty() == true",
          "    map.len() == 0",
          "    map.capacity() == 0",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![(\"key1\".to_string(), 42)];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "}"
        ],
        "oracle": [
          "    let expected_map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global::default());",
          "    expected_map.insert(\"key1\".to_string(), 42);",
          "    assert_eq!(map.len(), expected_map.len());",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), expected_map.keys().collect::<Vec<_>>());",
          "    assert_eq!(map.values().collect::<Vec<_>>(), expected_map.values().collect::<Vec<_>>());",
          "    assert!(map.contains_key(&\"key1\".to_string()));",
          "    assert_eq!(map.get(&\"key1\".to_string()), Some(&42));"
        ],
        "code": [
          "{",
          "    let input = vec![(\"key1\".to_string(), 42)];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "    let expected_map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global::default());",
          "    expected_map.insert(\"key1\".to_string(), 42);",
          "    assert_eq!(map.len(), expected_map.len());",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), expected_map.keys().collect::<Vec<_>>());",
          "    assert_eq!(map.values().collect::<Vec<_>>(), expected_map.values().collect::<Vec<_>>());",
          "    assert!(map.contains_key(&\"key1\".to_string()));",
          "    assert_eq!(map.get(&\"key1\".to_string()), Some(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![",
          "        (\"key1\".to_string(), 10),",
          "        (\"key2\".to_string(), 20),",
          "        (\"key3\".to_string(), 30),",
          "    ];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.contains_key(&\"key1\".to_string()));",
          "    assert_eq!(map.get(&\"key1\".to_string()), Some(&10));",
          "    assert!(map.contains_key(&\"key2\".to_string()));",
          "    assert_eq!(map.get(&\"key2\".to_string()), Some(&20));",
          "    assert!(map.contains_key(&\"key3\".to_string()));",
          "    assert_eq!(map.get(&\"key3\".to_string()), Some(&30));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() > 0);"
        ],
        "code": [
          "{",
          "    let input = vec![",
          "        (\"key1\".to_string(), 10),",
          "        (\"key2\".to_string(), 20),",
          "        (\"key3\".to_string(), 30),",
          "    ];",
          "    let map: HashMap<String, i32> = HashMap::from_iter(input);",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.contains_key(&\"key1\".to_string()));",
          "    assert_eq!(map.get(&\"key1\".to_string()), Some(&10));",
          "    assert!(map.contains_key(&\"key2\".to_string()));",
          "    assert_eq!(map.get(&\"key2\".to_string()), Some(&20));",
          "    assert!(map.contains_key(&\"key3\".to_string()));",
          "    assert_eq!(map.get(&\"key3\".to_string()), Some(&30));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input: Vec<(u32, String)> = (0..10_000).map(|i| (i, format!(\"value{}\", i))).collect();",
          "    let map: HashMap<u32, String> = HashMap::from_iter(input);",
          "}"
        ],
        "oracle": [
          "    map.len() == 10_000",
          "    map.keys().count() == 10_000",
          "    map.values().count() == 10_000",
          "    assert_eq!(map.get(&0), Some(&\"value0\".to_string()));",
          "    assert_eq!(map.get(&(9999)), Some(&\"value9999\".to_string()));",
          "    assert!(map.is_empty() == false);",
          "    for i in 0..10_000 { assert!(map.contains_key(&(i))); }",
          "    for (k, v) in map.iter() { assert_eq!(*v, format!(\"value{}\", k)); }"
        ],
        "code": [
          "{",
          "    let input: Vec<(u32, String)> = (0..10_000).map(|i| (i, format!(\"value{}\", i))).collect();",
          "    let map: HashMap<u32, String> = HashMap::from_iter(input);",
          "    map.len() == 10_000",
          "    map.keys().count() == 10_000",
          "    map.values().count() == 10_000",
          "    assert_eq!(map.get(&0), Some(&\"value0\".to_string()));",
          "    assert_eq!(map.get(&(9999)), Some(&\"value9999\".to_string()));",
          "    assert!(map.is_empty() == false);",
          "    for i in 0..10_000 { assert!(map.contains_key(&(i))); }",
          "    for (k, v) in map.iter() { assert_eq!(*v, format!(\"value{}\", k)); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let input = vec![",
          "        (1, \"one\"),",
          "        (2, \"two\"),",
          "        (3, \"three\"),",
          "    ];",
          "    let map: HashMap<i32, &str> = HashMap::from_iter(input);",
          "}"
        ],
        "oracle": [
          "    let input = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
          "    let map: HashMap<i32, &str> = HashMap::from_iter(input);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&\"one\"));",
          "    assert_eq!(map.get(&2), Some(&\"two\"));",
          "    assert_eq!(map.get(&3), Some(&\"three\"));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.hasher().as_mut().is_some());",
          "    assert_eq!(map.capacity(), 3);"
        ],
        "code": [
          "{",
          "    let input = vec![",
          "        (1, \"one\"),",
          "        (2, \"two\"),",
          "        (3, \"three\"),",
          "    ];",
          "    let map: HashMap<i32, &str> = HashMap::from_iter(input);",
          "    let input = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
          "    let map: HashMap<i32, &str> = HashMap::from_iter(input);",
          "    assert_eq!(map.len(), 3);",
          "    assert_eq!(map.get(&1), Some(&\"one\"));",
          "    assert_eq!(map.get(&2), Some(&\"two\"));",
          "    assert_eq!(map.get(&3), Some(&\"three\"));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.hasher().as_mut().is_some());",
          "    assert_eq!(map.capacity(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]