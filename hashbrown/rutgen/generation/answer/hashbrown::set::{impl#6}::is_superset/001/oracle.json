[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty: HashSet<i32> = HashSet::new();",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    assert!(empty.is_superset(&sub) == false);",
          "}"
        ],
        "oracle": [
          "    assert!(empty.is_superset(&sub) == false);",
          "    ",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(0);",
          "    assert!(set.is_superset(&sub) == false);",
          "    ",
          "    set.insert(1);",
          "    assert!(set.is_superset(&sub) == false);",
          "    ",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    ",
          "    let another_set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_set) == true);",
          "    ",
          "    let yet_another_set: HashSet<i32> = [3].iter().cloned().collect();",
          "    assert!(set.is_superset(&yet_another_set) == true);",
          "    ",
          "    let disjoint_set: HashSet<i32> = [4, 5].iter().cloned().collect();",
          "    assert!(set.is_superset(&disjoint_set) == false);",
          "    ",
          "    let identical_set = set.clone();",
          "    assert!(set.is_superset(&identical_set) == true);"
        ],
        "code": [
          "{",
          "    let empty: HashSet<i32> = HashSet::new();",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    assert!(empty.is_superset(&sub) == false);",
          "    assert!(empty.is_superset(&sub) == false);",
          "    ",
          "    let mut set: HashSet<i32> = HashSet::new();",
          "    set.insert(0);",
          "    assert!(set.is_superset(&sub) == false);",
          "    ",
          "    set.insert(1);",
          "    assert!(set.is_superset(&sub) == false);",
          "    ",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    ",
          "    let another_set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_set) == true);",
          "    ",
          "    let yet_another_set: HashSet<i32> = [3].iter().cloned().collect();",
          "    assert!(set.is_superset(&yet_another_set) == true);",
          "    ",
          "    let disjoint_set: HashSet<i32> = [4, 5].iter().cloned().collect();",
          "    assert!(set.is_superset(&disjoint_set) == false);",
          "    ",
          "    let identical_set = set.clone();",
          "    assert!(set.is_superset(&identical_set) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(0);",
          "    set.insert(1);",
          "    assert!(set.is_superset(&sub) == false);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    set.remove(&1);",
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    let another_sub: HashSet<i32> = [2].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_sub) == true);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert!(set.is_superset(&empty_set) == true);",
          "    let non_superset: HashSet<i32> = [3, 4].iter().cloned().collect();",
          "    assert!(set.is_superset(&non_superset) == false);",
          "    set.clear();",
          "    let single_element_set: HashSet<i32> = [1].iter().cloned().collect();",
          "    set.insert(1);",
          "    assert!(set.is_superset(&single_element_set) == true);"
        ],
        "code": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(0);",
          "    set.insert(1);",
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    set.remove(&1);",
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(2);",
          "    set.insert(3);",
          "    let another_sub: HashSet<i32> = [2].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_sub) == true);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert!(set.is_superset(&empty_set) == true);",
          "    let non_superset: HashSet<i32> = [3, 4].iter().cloned().collect();",
          "    assert!(set.is_superset(&non_superset) == false);",
          "    set.clear();",
          "    let single_element_set: HashSet<i32> = [1].iter().cloned().collect();",
          "    set.insert(1);",
          "    assert!(set.is_superset(&single_element_set) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_superset(&sub), true);",
          "    set.insert(0);",
          "    assert_eq!(set.is_superset(&sub), false);",
          "    set.remove(&0);",
          "    assert_eq!(set.is_superset(&sub), true);",
          "    let another: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert_eq!(set.is_superset(&another), false);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(set.is_superset(&empty_set), true);",
          "    let singleton: HashSet<i32> = [1].iter().cloned().collect();",
          "    assert_eq!(set.is_superset(&singleton), true);"
        ],
        "code": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    assert_eq!(set.is_superset(&sub), true);",
          "    set.insert(0);",
          "    assert_eq!(set.is_superset(&sub), false);",
          "    set.remove(&0);",
          "    assert_eq!(set.is_superset(&sub), true);",
          "    let another: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert_eq!(set.is_superset(&another), false);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(set.is_superset(&empty_set), true);",
          "    let singleton: HashSet<i32> = [1].iter().cloned().collect();",
          "    assert_eq!(set.is_superset(&singleton), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(0);",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == true);"
        ],
        "code": [
          "{",
          "    let sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(0);",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == true);",
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let sub: HashSet<i32> = [3, 4].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == false);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(3);",
          "    assert!(set.is_superset(&sub) == true);",
          "    set.remove(&3);",
          "    assert!(set.is_superset(&sub) == false);",
          "    let another_sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_sub) == true);"
        ],
        "code": [
          "{",
          "    let sub: HashSet<i32> = [3, 4].iter().cloned().collect();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&sub) == false);",
          "    assert!(set.is_superset(&sub) == false);",
          "    set.insert(3);",
          "    assert!(set.is_superset(&sub) == true);",
          "    set.remove(&3);",
          "    assert!(set.is_superset(&sub) == false);",
          "    let another_sub: HashSet<i32> = [1, 2].iter().cloned().collect();",
          "    assert!(set.is_superset(&another_sub) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty: HashSet<i32> = HashSet::new();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&empty) == true);",
          "}"
        ],
        "oracle": [
          "    assert!(set.is_superset(&set) == true);",
          "    let mut other: HashSet<i32> = HashSet::new();",
          "    other.insert(2);",
          "    assert!(set.is_superset(&other) == true);",
          "    other.insert(3);",
          "    assert!(set.is_superset(&other) == false);",
          "    let mut larger: HashSet<i32> = HashSet::new();",
          "    larger.insert(1);",
          "    larger.insert(2);",
          "    larger.insert(3);",
          "    assert!(set.is_superset(&larger) == false);",
          "    let mut disjoint: HashSet<i32> = HashSet::new();",
          "    disjoint.insert(4);",
          "    assert!(set.is_superset(&disjoint) == true);"
        ],
        "code": [
          "{",
          "    let empty: HashSet<i32> = HashSet::new();",
          "    let mut set = HashSet::new();",
          "    set.insert(1);",
          "    set.insert(2);",
          "    assert!(set.is_superset(&empty) == true);",
          "    assert!(set.is_superset(&set) == true);",
          "    let mut other: HashSet<i32> = HashSet::new();",
          "    other.insert(2);",
          "    assert!(set.is_superset(&other) == true);",
          "    other.insert(3);",
          "    assert!(set.is_superset(&other) == false);",
          "    let mut larger: HashSet<i32> = HashSet::new();",
          "    larger.insert(1);",
          "    larger.insert(2);",
          "    larger.insert(3);",
          "    assert!(set.is_superset(&larger) == false);",
          "    let mut disjoint: HashSet<i32> = HashSet::new();",
          "    disjoint.insert(4);",
          "    assert!(set.is_superset(&disjoint) == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]