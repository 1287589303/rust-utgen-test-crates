[
  {
    "uses": [
      "use hashbrown::hash_map::HashMap;",
      "use hashbrown::hash_map::Entry;",
      "use std::collections::hash_map::RandomState;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let mut map: HashMap<&str, Option<u32>> = HashMap::new();",
          "    map.insert(\"occupied_key\", Some(42));",
          "",
          "    let entry = map.entry(\"occupied_key\");",
          "    let value = entry.or_default();",
          "    let result = *value;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(42));",
          "    assert_eq!(map[\"occupied_key\"], Some(42));",
          "    assert_eq!(map.entry(\"occupied_key\").or_default(), &mut Some(42));",
          "    assert_eq!(map.get(\"occupied_key\"), Some(&Some(42)));",
          "    assert!(map.contains_key(\"occupied_key\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let mut map: HashMap<&str, Option<u32>> = HashMap::new();",
          "    map.insert(\"occupied_key\", Some(42));",
          "",
          "    let entry = map.entry(\"occupied_key\");",
          "    let value = entry.or_default();",
          "    let result = *value;",
          "    assert_eq!(result, Some(42));",
          "    assert_eq!(map[\"occupied_key\"], Some(42));",
          "    assert_eq!(map.entry(\"occupied_key\").or_default(), &mut Some(42));",
          "    assert_eq!(map.get(\"occupied_key\"), Some(&Some(42)));",
          "    assert!(map.contains_key(\"occupied_key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let mut map: HashMap<u32, String, RandomState> = HashMap::new();",
          "    map.insert(1, String::from(\"value\"));",
          "",
          "    let entry = map.entry(1);",
          "    let value = entry.or_default();",
          "    let result = value.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, String::from(\"value\"));",
          "    assert_eq!(value, &mut String::from(\"value\"));",
          "    assert!(map.get(&1).is_some());",
          "    assert_eq!(map.entry(1).or_default(), &mut String::from(\"value\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let mut map: HashMap<u32, String, RandomState> = HashMap::new();",
          "    map.insert(1, String::from(\"value\"));",
          "",
          "    let entry = map.entry(1);",
          "    let value = entry.or_default();",
          "    let result = value.clone();",
          "    assert_eq!(result, String::from(\"value\"));",
          "    assert_eq!(value, &mut String::from(\"value\"));",
          "    assert!(map.get(&1).is_some());",
          "    assert_eq!(map.entry(1).or_default(), &mut String::from(\"value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]