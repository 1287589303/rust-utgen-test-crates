[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"c\", 3);",
          "    ",
          "    let values_iterator = map.into_values();",
          "}"
        ],
        "oracle": [
          "    values_iterator.inner.is_empty();",
          "    values_iterator.inner.len() == 3;",
          "    let values: Vec<i32> = values_iterator.collect();",
          "    values.sort_unstable();",
          "    assert_eq!(values, [1, 2, 3]);",
          "    map.is_empty();",
          "    map.len() == 0;"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"c\", 3);",
          "    ",
          "    let values_iterator = map.into_values();",
          "    values_iterator.inner.is_empty();",
          "    values_iterator.inner.len() == 3;",
          "    let values: Vec<i32> = values_iterator.collect();",
          "    values.sort_unstable();",
          "    assert_eq!(values, [1, 2, 3]);",
          "    map.is_empty();",
          "    map.len() == 0;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"single\", 42);",
          "    ",
          "    let values_iterator = map.into_values();",
          "}"
        ],
        "oracle": [
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    let values_iterator: IntoValues<&str, i32, Global> = map.into_values();",
          "    assert!(values_iterator.inner.len() == 1);",
          "    assert!(values_iterator.inner.next().is_some());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"single\", 42);",
          "    ",
          "    let values_iterator = map.into_values();",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    let values_iterator: IntoValues<&str, i32, Global> = map.into_values();",
          "    assert!(values_iterator.inner.len() == 1);",
          "    assert!(values_iterator.inner.next().is_some());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"first\", 10);",
          "    map.insert(\"second\", 20);",
          "    ",
          "    let values_iterator = map.into_values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values_iterator.inner.len(), 2);",
          "    assert!(values_iterator.inner.next().is_some());",
          "    assert!(values_iterator.inner.next().is_some());",
          "    assert!(values_iterator.inner.next().is_none());",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"first\", 10);",
          "    map.insert(\"second\", 20);",
          "    ",
          "    let values_iterator = map.into_values();",
          "    assert_eq!(values_iterator.inner.len(), 2);",
          "    assert!(values_iterator.inner.next().is_some());",
          "    assert!(values_iterator.inner.next().is_some());",
          "    assert!(values_iterator.inner.next().is_none());",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::default(), Global);",
          "    ",
          "    let values_iterator = map.into_values();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::any::TypeId::of::<IntoValues<&str, i32, Global>>(), std::any::TypeId::of_val(&values_iterator));",
          "    assert!(std::panic::catch_unwind(|| { let _ = values_iterator.collect::<Vec<_>>(); }).is_err());",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(values_iterator.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::default(), Global);",
          "    ",
          "    let values_iterator = map.into_values();",
          "    assert_eq!(std::any::TypeId::of::<IntoValues<&str, i32, Global>>(), std::any::TypeId::of_val(&values_iterator));",
          "    assert!(std::panic::catch_unwind(|| { let _ = values_iterator.collect::<Vec<_>>(); }).is_err());",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(values_iterator.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]