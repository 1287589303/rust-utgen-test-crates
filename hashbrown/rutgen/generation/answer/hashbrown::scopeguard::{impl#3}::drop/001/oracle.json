[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = 42;",
          "    let mut drop_fn = |v: &mut i32| {",
          "        *v += 1;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, 42);",
          "    assert_eq!(self.value, 43);"
        ],
        "code": [
          "{",
          "    let mut value = 42;",
          "    let mut drop_fn = |v: &mut i32| {",
          "        *v += 1;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "    assert_eq!(value, 42);",
          "    assert_eq!(self.value, 43);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = String::from(\"Hello\");",
          "    let mut drop_fn = |v: &mut String| {",
          "        v.push_str(\", World\");",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    let _guard = ScopeGuard { dropfn: drop_fn, value: String::from(\"Hello\") };",
          "    // The drop function modifies the value",
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    assert!(_guard.value == String::from(\"Hello\"));"
        ],
        "code": [
          "{",
          "    let mut value = String::from(\"Hello\");",
          "    let mut drop_fn = |v: &mut String| {",
          "        v.push_str(\", World\");",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    let _guard = ScopeGuard { dropfn: drop_fn, value: String::from(\"Hello\") };",
          "    // The drop function modifies the value",
          "    assert_eq!(value, String::from(\"Hello\"));",
          "    assert!(_guard.value == String::from(\"Hello\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = 3.14;",
          "    let mut drop_fn = |v: &mut f64| {",
          "        *v *= 2.0;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value, 3.14);",
          "    assert_eq!(value, 6.28);"
        ],
        "code": [
          "{",
          "    let mut value = 3.14;",
          "    let mut drop_fn = |v: &mut f64| {",
          "        *v *= 2.0;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "    assert_eq!(value, 3.14);",
          "    assert_eq!(value, 6.28);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut value = [1, 2, 3];",
          "    let mut drop_fn = |v: &mut [i32; 3]| {",
          "        v[0] += 1;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value[0], 1);",
          "    assert_eq!(value[1], 2);",
          "    assert_eq!(value[2], 3);",
          "    assert_eq!(value[0], 2);"
        ],
        "code": [
          "{",
          "    let mut value = [1, 2, 3];",
          "    let mut drop_fn = |v: &mut [i32; 3]| {",
          "        v[0] += 1;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "    assert_eq!(value[0], 1);",
          "    assert_eq!(value[1], 2);",
          "    assert_eq!(value[2], 3);",
          "    assert_eq!(value[0], 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: i32,",
          "    }",
          "    let mut value = TestStruct { data: 10 };",
          "    let mut drop_fn = |v: &mut TestStruct| {",
          "        v.data += 5;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(value.data, 10);",
          "    assert_eq!(value.data, 15);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: i32,",
          "    }",
          "    let mut value = TestStruct { data: 10 };",
          "    let mut drop_fn = |v: &mut TestStruct| {",
          "        v.data += 5;",
          "    };",
          "    {",
          "        let _guard = ScopeGuard { dropfn: drop_fn, value };",
          "    }",
          "    assert_eq!(value.data, 10);",
          "    assert_eq!(value.data, 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]