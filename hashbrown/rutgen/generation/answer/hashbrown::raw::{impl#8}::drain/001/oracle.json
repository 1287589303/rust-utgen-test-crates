[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<u32> = RawTable::with_capacity_in(0, Global);",
          "    let drain = unsafe { table.drain() };",
          "}"
        ],
        "oracle": [
          "    let table: RawTable<u32> = RawTable::with_capacity_in(0, Global);",
          "    assert_eq!(table.len(), 0);",
          "    let drain = unsafe { table.drain() };",
          "    assert!(drain.iter.len() == 0);",
          "    assert!(table.is_empty());"
        ],
        "code": [
          "{",
          "    let table: RawTable<u32> = RawTable::with_capacity_in(0, Global);",
          "    let drain = unsafe { table.drain() };",
          "    let table: RawTable<u32> = RawTable::with_capacity_in(0, Global);",
          "    assert_eq!(table.len(), 0);",
          "    let drain = unsafe { table.drain() };",
          "    assert!(drain.iter.len() == 0);",
          "    assert!(table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(drain.len(), 1);",
          "    assert!(table.is_empty());",
          "    assert_eq!(drain.iter.next(), Some(42));",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 1);",
          "    assert!(unsafe { table.iter().len() == 0 });"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "    assert_eq!(drain.len(), 1);",
          "    assert!(table.is_empty());",
          "    assert_eq!(drain.iter.next(), Some(42));",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 1);",
          "    assert!(unsafe { table.iter().len() == 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "}"
        ],
        "oracle": [
          "    assert!(drain.iter.len() == 3);",
          "    assert_eq!(drain.table.items, 3);",
          "    assert!(table.len() == 0);",
          "    assert!(drain.orig_table.as_ptr() != table.table.ctrl.as_ptr());",
          "    assert!(drain.iter.items == 3);"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "    assert!(drain.iter.len() == 3);",
          "    assert_eq!(drain.table.items, 3);",
          "    assert!(table.len() == 0);",
          "    assert!(drain.orig_table.as_ptr() != table.table.ctrl.as_ptr());",
          "    assert!(drain.iter.items == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(2, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.reserve(2, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(drain.len(), 2);",
          "    assert!(drain.is_empty() == false);",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(unsafe { table.iter().len() } == 0);",
          "    assert!(unsafe { table.is_empty() == true });"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(2, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.reserve(2, |x| *x);",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "    assert_eq!(drain.len(), 2);",
          "    assert!(drain.is_empty() == false);",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(unsafe { table.iter().len() } == 0);",
          "    assert!(unsafe { table.is_empty() == true });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(3, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.clear();",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "}"
        ],
        "oracle": [
          "    assert!(drain.iter.len() == 0);",
          "    assert_eq!(drain.table.items, 0);",
          "    assert_eq!(drain.table.growth_left, 0);",
          "    assert!(drain.orig_table != NonNull::dangling());",
          "    assert!(table.is_empty());",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= 3);",
          "    assert!(unsafe { table.iter().len() == 0 });"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(3, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.clear();",
          "    }",
          "    let drain = unsafe { table.drain() };",
          "    assert!(drain.iter.len() == 0);",
          "    assert_eq!(drain.table.items, 0);",
          "    assert_eq!(drain.table.growth_left, 0);",
          "    assert!(drain.orig_table != NonNull::dangling());",
          "    assert!(table.is_empty());",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= 3);",
          "    assert!(unsafe { table.iter().len() == 0 });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]