[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashMapBuilder;",
          "",
          "    impl BuildHasher for HashMapBuilder {",
          "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            core::hash::BuildHasherDefault::default()",
          "        }",
          "    }",
          "",
          "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
          "    let key = \"vacant_key\";",
          "    let default_value = 42;",
          "    let entry = map.entry(key);",
          "",
          "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
          "        let value_ref = vacant_entry.or_insert(default_value);",
          "",
          "        // Use the inserted value reference to ensure it works correctly",
          "        *value_ref += 10;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, hashbrown::hash_map::Entry::Vacant(_)));",
          "    assert_eq!(map[key], 52);",
          "    assert_eq!(map.get(key).unwrap(), &52);"
        ],
        "code": [
          "{",
          "    struct HashMapBuilder;",
          "",
          "    impl BuildHasher for HashMapBuilder {",
          "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            core::hash::BuildHasherDefault::default()",
          "        }",
          "    }",
          "",
          "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
          "    let key = \"vacant_key\";",
          "    let default_value = 42;",
          "    let entry = map.entry(key);",
          "",
          "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
          "        let value_ref = vacant_entry.or_insert(default_value);",
          "",
          "        // Use the inserted value reference to ensure it works correctly",
          "        *value_ref += 10;",
          "    }",
          "    assert!(matches!(entry, hashbrown::hash_map::Entry::Vacant(_)));",
          "    assert_eq!(map[key], 52);",
          "    assert_eq!(map.get(key).unwrap(), &52);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct HashMapBuilder;",
          "",
          "    impl BuildHasher for HashMapBuilder {",
          "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            core::hash::BuildHasherDefault::default()",
          "        }",
          "    }",
          "",
          "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
          "    map.insert(\"existing_key\", 1);",
          "    let key = \"vacant_key\"; // Ensure this key is not in the map",
          "    let default_value = 23;",
          "    let entry = map.entry(key);",
          "",
          "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
          "        let value_ref = vacant_entry.or_insert(default_value);",
          "        ",
          "        // Ensure the value is inserted correctly",
          "        *value_ref *= 2;",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"vacant_key\"], 46);",
          "    assert!(map.contains_key(\"vacant_key\"));",
          "    assert_eq!(map[\"existing_key\"], 1);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(vacant_entry.key(), &key);",
          "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
          "    assert_eq!(default_value, 23);",
          "    assert!(map.get(\"vacant_key\").is_some());",
          "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);"
        ],
        "code": [
          "{",
          "    struct HashMapBuilder;",
          "",
          "    impl BuildHasher for HashMapBuilder {",
          "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
          "",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            core::hash::BuildHasherDefault::default()",
          "        }",
          "    }",
          "",
          "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
          "    map.insert(\"existing_key\", 1);",
          "    let key = \"vacant_key\"; // Ensure this key is not in the map",
          "    let default_value = 23;",
          "    let entry = map.entry(key);",
          "",
          "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
          "        let value_ref = vacant_entry.or_insert(default_value);",
          "        ",
          "        // Ensure the value is inserted correctly",
          "        *value_ref *= 2;",
          "    }",
          "    assert_eq!(map[\"vacant_key\"], 46);",
          "    assert!(map.contains_key(\"vacant_key\"));",
          "    assert_eq!(map[\"existing_key\"], 1);",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(vacant_entry.key(), &key);",
          "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
          "    assert_eq!(default_value, 23);",
          "    assert!(map.get(\"vacant_key\").is_some());",
          "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]