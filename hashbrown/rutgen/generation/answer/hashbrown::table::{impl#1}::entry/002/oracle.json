[
  {
    "uses": [
      "use hashbrown::hash_table::OccupiedEntry;",
      "use hashbrown::HashTable;",
      "use hashbrown::hash_table::Entry;",
      "use hashbrown::DefaultHashBuilder;",
      "use hashbrown::hash_table::VacantEntry;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_table::{Entry, OccupiedEntry};",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "",
          "    // Insert an element to ensure the entry will be occupied",
          "    table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));",
          "    ",
          "    // Generate hash and equality function for the existing element",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "",
          "    // Call the entry function to test for an occupied entry",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "}"
        ],
        "oracle": [
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_table::{Entry, OccupiedEntry};",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "",
          "    // Insert an element to ensure the entry will be occupied",
          "    table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));",
          "    ",
          "    // Generate hash and equality function for the existing element",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "",
          "    // Call the entry function to test for an occupied entry",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_table::{Entry, VacantEntry};",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "",
          "    // Ensure there are no elements in table to get a vacant entry",
          "    let hash = hasher(&2);",
          "    let eq = |val: &(usize, &str)| val.0 == 2;",
          "",
          "    // Call the entry function expecting a vacant entry",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "    table.insert_unique(hash, (1, \"a\"), |val| hasher(&val.0));",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected occupied entry\"); };",
          "    assert_eq!(occupied_entry.hash, hash);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_table::{Entry, VacantEntry};",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "",
          "    // Ensure there are no elements in table to get a vacant entry",
          "    let hash = hasher(&2);",
          "    let eq = |val: &(usize, &str)| val.0 == 2;",
          "",
          "    // Call the entry function expecting a vacant entry",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    let hash = hasher(&1);",
          "    let eq = |val: &(usize, &str)| val.0 == 1;",
          "    table.insert_unique(hash, (1, \"a\"), |val| hasher(&val.0));",
          "    let entry = table.entry(hash, eq, |val| hasher(&val.0));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected occupied entry\"); };",
          "    assert_eq!(occupied_entry.hash, hash);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]