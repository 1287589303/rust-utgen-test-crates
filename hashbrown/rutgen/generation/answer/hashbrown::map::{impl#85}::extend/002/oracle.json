[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(2, 200), (3, 300)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(2, 200), (3, 300)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "}"
        ],
        "oracle": [
          "    map.insert(1, 100);",
          "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "    map.insert(1, 100);",
          "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_arr = [(2, 200), (3, 300), (4, 400), (5, 500)];",
          "    map.extend(some_arr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.get(&5), Some(&500));",
          "    assert_eq!(map.len(), 5);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_arr = [(2, 200), (3, 300), (4, 400), (5, 500)];",
          "    map.extend(some_arr);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.get(&5), Some(&500));",
          "    assert_eq!(map.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(1, 150), (2, 200)].into_iter();",
          "    map.extend(some_iter);",
          "    map.insert(3, 300);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&150));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(1, 150), (2, 200)].into_iter();",
          "    map.extend(some_iter);",
          "    map.insert(3, 300);",
          "    assert_eq!(map.get(&1), Some(&150));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    map.insert(2, 200);",
          "    let some_vec: Vec<_> = vec![(3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    map.insert(2, 200);",
          "    let some_vec: Vec<_> = vec![(3, 300), (4, 400)];",
          "    map.extend(some_vec);",
          "    assert_eq!(map.get(&1), Some(&100));",
          "    assert_eq!(map.get(&2), Some(&200));",
          "    assert_eq!(map.get(&3), Some(&300));",
          "    assert_eq!(map.get(&4), Some(&400));",
          "    assert_eq!(map.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]