[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (2, 2)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(!map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (2, 2)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(!map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(1, 1)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.get(&100), None);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, 100);",
          "    let some_iter = [(1, 1)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(map.capacity(), 2);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.get(&100), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (2, 2), (3, 3)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&3));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (2, 2), (3, 3)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&1));",
          "    assert_eq!(map.get(&2), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&3));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.contains_key(&1));",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (1, 2)].into_iter();",
          "    map.extend(some_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.into_keys().collect::<Vec<_>>(), vec![1]);",
          "    assert_eq!(map.into_values().collect::<Vec<_>>(), vec![2]);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_iter = [(1, 1), (1, 2)].into_iter();",
          "    map.extend(some_iter);",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.into_keys().collect::<Vec<_>>(), vec![1]);",
          "    assert_eq!(map.into_values().collect::<Vec<_>>(), vec![2]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_vec: Vec<_> = vec![(4, 4), (5, 5)];",
          "    map.extend(some_vec);",
          "    ",
          "    let some_arr = [(6, 6), (7, 7)];",
          "    map.extend(some_arr);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&4), Some(&4));",
          "    assert_eq!(map.get(&5), Some(&5));",
          "    assert_eq!(map.get(&6), Some(&6));",
          "    assert_eq!(map.get(&7), Some(&7));",
          "    assert_eq!(map.len(), 4);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.capacity(), 4);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let some_vec: Vec<_> = vec![(4, 4), (5, 5)];",
          "    map.extend(some_vec);",
          "    ",
          "    let some_arr = [(6, 6), (7, 7)];",
          "    map.extend(some_arr);",
          "    assert_eq!(map.get(&4), Some(&4));",
          "    assert_eq!(map.get(&5), Some(&5));",
          "    assert_eq!(map.get(&6), Some(&6));",
          "    assert_eq!(map.get(&7), Some(&7));",
          "    assert_eq!(map.len(), 4);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.capacity(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]