[
  {
    "uses": [
      "use hashbrown::hash_map::HashMap;",
      "use std::hash::Hash;",
      "use hashbrown::hash_map::Entry;",
      "use hashbrown::hash_map::DefaultHashBuilder;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<&str, i32, DefaultHashBuilder> = HashMap::new();",
          "    let entry: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let occupied_entry = entry.insert();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.get(), &\"key1\");",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map[\"key1\"], 0);",
          "    let new_entry: Entry<&str, i32> = map.entry(\"key2\");",
          "    assert!(matches!(new_entry, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<&str, i32, DefaultHashBuilder> = HashMap::new();",
          "    let entry: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let occupied_entry = entry.insert();",
          "    assert_eq!(occupied_entry.get(), &\"key1\");",
          "    assert!(map.contains_key(\"key1\"));",
          "    assert_eq!(map[\"key1\"], 0);",
          "    let new_entry: Entry<&str, i32> = map.entry(\"key2\");",
          "    assert!(matches!(new_entry, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<&str, i32, DefaultHashBuilder> = HashMap::new();",
          "    let entry: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let _ = entry.insert(); // insert first time",
          "    let entry_duplicate: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let occupied_entry_duplicate = entry_duplicate.insert();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(\"key1\"), Some(&0));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
          "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));",
          "    assert_eq!(occupied_entry_duplicate.get(), &0);",
          "    assert!(matches!(entry_duplicate, Entry::Occupied(_)));",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<&str, i32, DefaultHashBuilder> = HashMap::new();",
          "    let entry: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let _ = entry.insert(); // insert first time",
          "    let entry_duplicate: Entry<&str, i32> = map.entry(\"key1\").or_insert(0);",
          "    let occupied_entry_duplicate = entry_duplicate.insert();",
          "    assert_eq!(map.get(\"key1\"), Some(&0));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
          "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));",
          "    assert_eq!(occupied_entry_duplicate.get(), &0);",
          "    assert!(matches!(entry_duplicate, Entry::Occupied(_)));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder> = HashMap::new();",
          "    for i in 0..1000 {",
          "        let entry: Entry<i32, i32> = map.entry(i);",
          "        let occupied_entry = entry.insert();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1000);",
          "    for i in 0..1000 {",
          "    assert!(map.contains_key(&i));",
          "    }",
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&500), Some(&500));",
          "    assert_eq!(map.get(&999), Some(&999));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap, DefaultHashBuilder};",
          "    use std::hash::Hash;",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder> = HashMap::new();",
          "    for i in 0..1000 {",
          "        let entry: Entry<i32, i32> = map.entry(i);",
          "        let occupied_entry = entry.insert();",
          "    }",
          "    assert_eq!(map.len(), 1000);",
          "    for i in 0..1000 {",
          "    assert!(map.contains_key(&i));",
          "    }",
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&500), Some(&500));",
          "    assert_eq!(map.get(&999), Some(&999));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]