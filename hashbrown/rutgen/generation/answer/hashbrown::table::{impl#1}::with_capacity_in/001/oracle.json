[
  {
    "uses": [
      "use bumpalo::Bump;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(0, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    ",
          "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "    assert_eq!(table_with_capacity.len(), 0);",
          "    assert!(table_with_capacity.capacity() >= 5);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(0, &bump);",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    ",
          "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "    assert_eq!(table_with_capacity.len(), 0);",
          "    assert!(table_with_capacity.capacity() >= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1);",
          "    ",
          "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "    assert_eq!(table_with_capacity.len(), 0);",
          "    assert!(table_with_capacity.capacity() >= 5);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1, &bump);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1);",
          "    ",
          "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "    assert_eq!(table_with_capacity.len(), 0);",
          "    assert!(table_with_capacity.capacity() >= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 5);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1000, &bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1000);",
          "    assert_eq!(table.allocator(), &bump);",
          "    assert!(table.is_empty());",
          "    assert!(table.capacity() >= 1000);",
          "    assert_eq!(table.allocation_size(), 0);",
          "    assert_eq!(table.raw.table.buckets(), 0);"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "    let bump = Bump::new();",
          "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1000, &bump);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.capacity() >= 1000);",
          "    assert_eq!(table.allocator(), &bump);",
          "    assert!(table.is_empty());",
          "    assert!(table.capacity() >= 1000);",
          "    assert_eq!(table.allocation_size(), 0);",
          "    assert_eq!(table.raw.table.buckets(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]