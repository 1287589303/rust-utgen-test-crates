[
  {
    "uses": [
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"key1\");",
          "    let _occupied_entry = entry.insert(42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_occupied_entry.key(), &\"key1\");",
          "    assert_eq!(map.get(\"key1\"), Some(&42));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
          "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.entry(\"key1\");",
          "    let _occupied_entry = entry.insert(42);",
          "    assert_eq!(_occupied_entry.key(), &\"key1\");",
          "    assert_eq!(map.get(\"key1\"), Some(&42));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
          "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    let entry = map.entry(1);",
          "    let _occupied_entry = entry.insert(\"value1\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), &1);",
          "    assert_eq!(_occupied_entry.get(), &\"value1\");",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(&1));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    let entry = map.entry(1);",
          "    let _occupied_entry = entry.insert(\"value1\".to_string());",
          "    assert_eq!(entry.key(), &1);",
          "    assert_eq!(_occupied_entry.get(), &\"value1\");",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    #[derive(Hash, Eq, PartialEq, Clone)]",
          "    struct ComplexKey {",
          "        id: i32,",
          "        name: String,",
          "    }",
          "",
          "    let mut map: HashMap<ComplexKey, Vec<i32>> = HashMap::new();",
          "    let entry = map.entry(ComplexKey { id: 1, name: \"test\".to_string() });",
          "    let _occupied_entry = entry.insert(vec![1, 2, 3]);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_occupied_entry.key(), &ComplexKey { id: 1, name: \"test\".to_string() });",
          "    assert_eq!(_occupied_entry.get(), &vec![1, 2, 3]);",
          "    assert!(map.contains_key(&ComplexKey { id: 1, name: \"test\".to_string() }));",
          "    assert_eq!(map[&ComplexKey { id: 1, name: \"test\".to_string() }], vec![1, 2, 3]);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    #[derive(Hash, Eq, PartialEq, Clone)]",
          "    struct ComplexKey {",
          "        id: i32,",
          "        name: String,",
          "    }",
          "",
          "    let mut map: HashMap<ComplexKey, Vec<i32>> = HashMap::new();",
          "    let entry = map.entry(ComplexKey { id: 1, name: \"test\".to_string() });",
          "    let _occupied_entry = entry.insert(vec![1, 2, 3]);",
          "    assert_eq!(_occupied_entry.key(), &ComplexKey { id: 1, name: \"test\".to_string() });",
          "    assert_eq!(_occupied_entry.get(), &vec![1, 2, 3]);",
          "    assert!(map.contains_key(&ComplexKey { id: 1, name: \"test\".to_string() }));",
          "    assert_eq!(map[&ComplexKey { id: 1, name: \"test\".to_string() }], vec![1, 2, 3]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    ",
          "    for i in 0..5 {",
          "        let key = format!(\"key{}\", i);",
          "        let entry = map.entry(&key);",
          "        let _occupied_entry = entry.insert((i * 10) as u32);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 5);",
          "    assert_eq!(map.get(\"key0\"), Some(&0));",
          "    assert_eq!(map.get(\"key1\"), Some(&10));",
          "    assert_eq!(map.get(\"key2\"), Some(&20));",
          "    assert_eq!(map.get(\"key3\"), Some(&30));",
          "    assert_eq!(map.get(\"key4\"), Some(&40));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    ",
          "    for i in 0..5 {",
          "        let key = format!(\"key{}\", i);",
          "        let entry = map.entry(&key);",
          "        let _occupied_entry = entry.insert((i * 10) as u32);",
          "    }",
          "    assert_eq!(map.len(), 5);",
          "    assert_eq!(map.get(\"key0\"), Some(&0));",
          "    assert_eq!(map.get(\"key1\"), Some(&10));",
          "    assert_eq!(map.get(\"key2\"), Some(&20));",
          "    assert_eq!(map.get(\"key3\"), Some(&30));",
          "    assert_eq!(map.get(\"key4\"), Some(&40));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    for i in 0..1000 {",
          "        let entry = map.entry(i);",
          "        let _occupied_entry = entry.insert(i * 2);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&999), Some(&1998));",
          "    assert_eq!(map.len(), 1000);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    for i in 0..1000 {",
          "        let entry = map.entry(i);",
          "        let _occupied_entry = entry.insert(i * 2);",
          "    }",
          "    assert_eq!(map.get(&0), Some(&0));",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&4));",
          "    assert_eq!(map.get(&3), Some(&6));",
          "    assert_eq!(map.get(&4), Some(&8));",
          "    assert_eq!(map.get(&5), Some(&10));",
          "    assert_eq!(map.get(&999), Some(&1998));",
          "    assert_eq!(map.len(), 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]