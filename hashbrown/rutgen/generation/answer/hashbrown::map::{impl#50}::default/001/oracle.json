[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: IterMut<i32, i32> = Default::default();",
          "    let _ = iter; // Ensure the variable is used to avoid unused variable warning",
          "}"
        ],
        "oracle": [
          "    let iter: IterMut<i32, i32> = Default::default();",
          "    assert!(iter.inner == Default::default());",
          "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&i32, &mut i32)>>());",
          "    assert!(iter.inner.items == 0);"
        ],
        "code": [
          "{",
          "    let iter: IterMut<i32, i32> = Default::default();",
          "    let _ = iter; // Ensure the variable is used to avoid unused variable warning",
          "    let iter: IterMut<i32, i32> = Default::default();",
          "    assert!(iter.inner == Default::default());",
          "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&i32, &mut i32)>>());",
          "    assert!(iter.inner.items == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: IterMut<&str, &str> = Default::default();",
          "    let _ = iter; // Ensure the variable is used to avoid unused variable warning",
          "}"
        ],
        "oracle": [
          "    let iter: IterMut<&str, &str> = Default::default();",
          "    assert!(iter.inner == Default::default());",
          "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&&str, &mut &&str)>>());",
          "    assert!(iter.inner.items == 0);"
        ],
        "code": [
          "{",
          "    let iter: IterMut<&str, &str> = Default::default();",
          "    let _ = iter; // Ensure the variable is used to avoid unused variable warning",
          "    let iter: IterMut<&str, &str> = Default::default();",
          "    assert!(iter.inner == Default::default());",
          "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&&str, &mut &&str)>>());",
          "    assert!(iter.inner.items == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]