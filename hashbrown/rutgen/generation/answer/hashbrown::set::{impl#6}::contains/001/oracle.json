[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let _ = set.contains(&1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), false);",
          "    assert_eq!(set.contains(&0), false);",
          "    assert_eq!(set.contains(&5), false);"
        ],
        "code": [
          "{",
          "    let set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let _ = set.contains(&1);",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), false);",
          "    assert_eq!(set.contains(&0), false);",
          "    assert_eq!(set.contains(&5), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let _ = set.contains(&4);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), false);"
        ],
        "code": [
          "{",
          "    let set: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let _ = set.contains(&4);",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: HashSet<i32> = HashSet::new();",
          "    let _ = set.contains(&1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&1), false);",
          "    let set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&4), false);"
        ],
        "code": [
          "{",
          "    let set: HashSet<i32> = HashSet::new();",
          "    let _ = set.contains(&1);",
          "    assert_eq!(set.contains(&1), false);",
          "    let set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&4), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: HashSet<i32> = [5].iter().cloned().collect();",
          "    let _ = set.contains(&5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.contains(&10), false);"
        ],
        "code": [
          "{",
          "    let set: HashSet<i32> = [5].iter().cloned().collect();",
          "    let _ = set.contains(&5);",
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.contains(&10), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: HashSet<i32> = [5].iter().cloned().collect();",
          "    let _ = set.contains(&6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.contains(&6), false);",
          "    assert_eq!(set.contains(&4), false);",
          "    assert_eq!(set.contains(&5), true);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(empty_set.contains(&1), false);",
          "    assert_eq!(empty_set.contains(&0), false);"
        ],
        "code": [
          "{",
          "    let set: HashSet<i32> = [5].iter().cloned().collect();",
          "    let _ = set.contains(&6);",
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.contains(&6), false);",
          "    assert_eq!(set.contains(&4), false);",
          "    assert_eq!(set.contains(&5), true);",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(empty_set.contains(&1), false);",
          "    assert_eq!(empty_set.contains(&0), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]