[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    let _ = raw_table.capacity();",
          "}"
        ],
        "oracle": [
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 3;",
          "    assert_eq!(raw_table.capacity(), 8);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    let _ = raw_table.capacity();",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 3;",
          "    assert_eq!(raw_table.capacity(), 8);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    ",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    let _ = raw_table.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(raw_table.capacity(), 0 + usize::MAX);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 10;",
          "    assert_eq!(raw_table.capacity(), 5 + 10);",
          "    raw_table.table.items = 3;",
          "    raw_table.table.growth_left = 7;",
          "    assert_eq!(raw_table.capacity(), 3 + 7);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0 + 0);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 10 + 0);"
        ],
        "code": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    let _ = raw_table.capacity();",
          "    assert_eq!(raw_table.capacity(), 0 + usize::MAX);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 10;",
          "    assert_eq!(raw_table.capacity(), 5 + 10);",
          "    raw_table.table.items = 3;",
          "    raw_table.table.growth_left = 7;",
          "    assert_eq!(raw_table.capacity(), 3 + 7);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0 + 0);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 10 + 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = 0;",
          "    let _ = raw_table.capacity();",
          "}"
        ],
        "oracle": [
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 10;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 5;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX * 2);"
        ],
        "code": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = 0;",
          "    let _ = raw_table.capacity();",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 10;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    raw_table.table.items = 5;",
          "    raw_table.table.growth_left = 5;",
          "    assert_eq!(raw_table.capacity(), 10);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX * 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX - 1; // must not exceed usize::MAX",
          "    let _ = raw_table.capacity();",
          "}"
        ],
        "oracle": [
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX - 1;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 5;",
          "    assert_eq!(raw_table.capacity(), 15);",
          "    raw_table.table.items = 1;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);"
        ],
        "code": [
          "{",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX - 1; // must not exceed usize::MAX",
          "    let _ = raw_table.capacity();",
          "    let raw_table = RawTable::<u8>::new_in(Global);",
          "    raw_table.table.items = usize::MAX;",
          "    raw_table.table.growth_left = usize::MAX - 1;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "    raw_table.table.items = 0;",
          "    raw_table.table.growth_left = 0;",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    raw_table.table.items = 10;",
          "    raw_table.table.growth_left = 5;",
          "    assert_eq!(raw_table.capacity(), 15);",
          "    raw_table.table.items = 1;",
          "    raw_table.table.growth_left = usize::MAX;",
          "    assert_eq!(raw_table.capacity(), usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for items in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        let raw_table = RawTable::<u8>::new_in(Global);",
          "        raw_table.table.items = *items;",
          "        raw_table.table.growth_left = 0;",
          "        let _ = raw_table.capacity();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(raw_table.capacity(), *items + 0);",
          "    assert_eq!(raw_table.capacity(), *items);",
          "    assert_eq!(raw_table.capacity(), raw_table.table.items + raw_table.table.growth_left);"
        ],
        "code": [
          "{",
          "    for items in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        let raw_table = RawTable::<u8>::new_in(Global);",
          "        raw_table.table.items = *items;",
          "        raw_table.table.growth_left = 0;",
          "        let _ = raw_table.capacity();",
          "    }",
          "    assert_eq!(raw_table.capacity(), *items + 0);",
          "    assert_eq!(raw_table.capacity(), *items);",
          "    assert_eq!(raw_table.capacity(), raw_table.table.items + raw_table.table.growth_left);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for growth_left in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        let raw_table = RawTable::<u8>::new_in(Global);",
          "        raw_table.table.items = 0;",
          "        raw_table.table.growth_left = *growth_left;",
          "        let _ = raw_table.capacity();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(raw_table.capacity(), raw_table.table.items + *growth_left);"
        ],
        "code": [
          "{",
          "    for growth_left in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        let raw_table = RawTable::<u8>::new_in(Global);",
          "        raw_table.table.items = 0;",
          "        raw_table.table.growth_left = *growth_left;",
          "        let _ = raw_table.capacity();",
          "    }",
          "    assert_eq!(raw_table.capacity(), raw_table.table.items + *growth_left);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    for items in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        for growth_left in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "            if items + growth_left <= &usize::MAX {",
          "                let raw_table = RawTable::<u8>::new_in(Global);",
          "                raw_table.table.items = *items;",
          "                raw_table.table.growth_left = *growth_left;",
          "                let _ = raw_table.capacity();",
          "            }",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    let items = 0; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 1; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 0; let growth_left = 1; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 2; let growth_left = 3; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 4; let growth_left = 5; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 5; let growth_left = 10; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 10; let growth_left = 100; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 100; let growth_left = 1000; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 1000; let growth_left = 10_000; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 10_000; let growth_left = usize::MAX - 1; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = usize::MAX - 1; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);"
        ],
        "code": [
          "{",
          "    for items in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "        for growth_left in [0, 1, 2, 3, 4, 5, 10, 100, 1000, 10_000, usize::MAX - 1].iter() {",
          "            if items + growth_left <= &usize::MAX {",
          "                let raw_table = RawTable::<u8>::new_in(Global);",
          "                raw_table.table.items = *items;",
          "                raw_table.table.growth_left = *growth_left;",
          "                let _ = raw_table.capacity();",
          "            }",
          "        }",
          "    }",
          "    let items = 0; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 1; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 0; let growth_left = 1; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 2; let growth_left = 3; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 4; let growth_left = 5; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 5; let growth_left = 10; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 10; let growth_left = 100; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 100; let growth_left = 1000; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 1000; let growth_left = 10_000; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = 10_000; let growth_left = usize::MAX - 1; assert_eq!(raw_table.capacity(), items + growth_left);",
          "    let items = usize::MAX - 1; let growth_left = 0; assert_eq!(raw_table.capacity(), items + growth_left);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]