[
  {
    "uses": [
      "use std::hash::BuildHasher;",
      "use hashbrown::HashTable;",
      "use hashbrown::DefaultHashBuilder;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    let entry = table.entry(hasher(&\"example\"), |&x| x == \"example\", hasher);",
          "    entry.or_insert(\"example\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 1);",
          "    assert!(table.find(hasher(&\"example\"), |&x| x == \"example\").is_some());",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    let entry = table.entry(hasher(&\"example\"), |&x| x == \"example\", hasher);",
          "    entry.or_insert(\"example\");",
          "    assert_eq!(table.len(), 1);",
          "    assert!(table.find(hasher(&\"example\"), |&x| x == \"example\").is_some());",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    table.insert(hasher(&\"existing\"), \"existing\");",
          "",
          "    let entry = table.entry(hasher(&\"example\"), |&x| x == \"example\", hasher);",
          "    entry.or_insert(\"example\");",
          "}"
        ],
        "oracle": [
          "    assert!(table.find(hasher(&\"example\"), |&x| x == \"example\").is_some());",
          "    assert_eq!(table.len(), 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    table.insert(hasher(&\"existing\"), \"existing\");",
          "",
          "    let entry = table.entry(hasher(&\"example\"), |&x| x == \"example\", hasher);",
          "    entry.or_insert(\"example\");",
          "    assert!(table.find(hasher(&\"example\"), |&x| x == \"example\").is_some());",
          "    assert_eq!(table.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    table.insert(hasher(&\"another\"), \"another\");",
          "",
          "    let entry = table.entry(hasher(&\"unique\"), |&x| x == \"unique\", hasher);",
          "    entry.or_insert(\"unique\");",
          "}"
        ],
        "oracle": [
          "    assert!(table.find(hasher(&\"another\"), |&x| x == \"another\").is_some());",
          "    assert!(table.find(hasher(&\"unique\"), |&x| x == \"unique\").is_some());",
          "    assert_eq!(table.len(), 2);",
          "    assert_eq!(table.entry(hasher(&\"unique\"), |&x| x == \"unique\", hasher).or_insert(\"new_value\").hash, hasher(&\"unique\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    table.insert(hasher(&\"another\"), \"another\");",
          "",
          "    let entry = table.entry(hasher(&\"unique\"), |&x| x == \"unique\", hasher);",
          "    entry.or_insert(\"unique\");",
          "    assert!(table.find(hasher(&\"another\"), |&x| x == \"another\").is_some());",
          "    assert!(table.find(hasher(&\"unique\"), |&x| x == \"unique\").is_some());",
          "    assert_eq!(table.len(), 2);",
          "    assert_eq!(table.entry(hasher(&\"unique\"), |&x| x == \"unique\", hasher).or_insert(\"new_value\").hash, hasher(&\"unique\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    let entry1 = table.entry(hasher(&\"first\"), |&x| x == \"first\", hasher);",
          "    entry1.or_insert(\"first\");",
          "",
          "    let entry2 = table.entry(hasher(&\"second\"), |&x| x == \"second\", hasher);",
          "    entry2.or_insert(\"second\");",
          "}"
        ],
        "oracle": [
          "    assert!(table.find(hasher(&\"first\"), |&x| x == \"first\").is_some());",
          "    assert!(table.find(hasher(&\"second\"), |&x| x == \"second\").is_some());",
          "    assert_eq!(table.len(), 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher = |val: &_| hasher.hash_one(val);",
          "    ",
          "    let entry1 = table.entry(hasher(&\"first\"), |&x| x == \"first\", hasher);",
          "    entry1.or_insert(\"first\");",
          "",
          "    let entry2 = table.entry(hasher(&\"second\"), |&x| x == \"second\", hasher);",
          "    entry2.or_insert(\"second\");",
          "    assert!(table.find(hasher(&\"first\"), |&x| x == \"first\").is_some());",
          "    assert!(table.find(hasher(&\"second\"), |&x| x == \"second\").is_some());",
          "    assert_eq!(table.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]