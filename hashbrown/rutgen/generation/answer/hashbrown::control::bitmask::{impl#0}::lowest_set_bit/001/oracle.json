[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bitmask = BitMask(1); // 0b0001",
          "    let _ = bitmask.lowest_set_bit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(2); // 0b0010",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    let bitmask = BitMask(u32::MAX); // 0b1111...1111",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));"
        ],
        "code": [
          "{",
          "    let bitmask = BitMask(1); // 0b0001",
          "    let _ = bitmask.lowest_set_bit();",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(2); // 0b0010",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    let bitmask = BitMask(u32::MAX); // 0b1111...1111",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bitmask = BitMask(2); // 0b0010",
          "    let _ = bitmask.lowest_set_bit();",
          "}"
        ],
        "oracle": [
          "    assert!(bitmask.lowest_set_bit() == Some(1));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert!(bitmask.lowest_set_bit() == None);",
          "    let bitmask = BitMask(1); // 0b0001",
          "    assert!(bitmask.lowest_set_bit() == Some(0));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert!(bitmask.lowest_set_bit() == Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert!(bitmask.lowest_set_bit() == Some(3));"
        ],
        "code": [
          "{",
          "    let bitmask = BitMask(2); // 0b0010",
          "    let _ = bitmask.lowest_set_bit();",
          "    assert!(bitmask.lowest_set_bit() == Some(1));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert!(bitmask.lowest_set_bit() == None);",
          "    let bitmask = BitMask(1); // 0b0001",
          "    assert!(bitmask.lowest_set_bit() == Some(0));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert!(bitmask.lowest_set_bit() == Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert!(bitmask.lowest_set_bit() == Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bitmask = BitMask(3); // 0b0011",
          "    let _ = bitmask.lowest_set_bit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    let bitmask = BitMask(1); // 0b0001",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(2); // 0b0010",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));"
        ],
        "code": [
          "{",
          "    let bitmask = BitMask(3); // 0b0011",
          "    let _ = bitmask.lowest_set_bit();",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(0); // 0b0000",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    let bitmask = BitMask(1); // 0b0001",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    let bitmask = BitMask(2); // 0b0010",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    let bitmask = BitMask(4); // 0b0100",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(2));",
          "    let bitmask = BitMask(8); // 0b1000",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bitmask = BitMask(15); // 0b1111",
          "    let _ = bitmask.lowest_set_bit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    bitmask = BitMask(0);",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    bitmask = BitMask(1);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    bitmask = BitMask(2);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    bitmask = BitMask(8);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));",
          "    bitmask = BitMask(16);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(4));"
        ],
        "code": [
          "{",
          "    let bitmask = BitMask(15); // 0b1111",
          "    let _ = bitmask.lowest_set_bit();",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    bitmask = BitMask(0);",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    bitmask = BitMask(1);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(0));",
          "    bitmask = BitMask(2);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(1));",
          "    bitmask = BitMask(8);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(3));",
          "    bitmask = BitMask(16);",
          "    assert_eq!(bitmask.lowest_set_bit(), Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let bitmask = BitMask(0xFFFFFFFF); // All bits set",
          "    let _ = bitmask.lowest_set_bit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    assert_eq!(BitMask(0xFFFFFFFF).lowest_set_bit(), Some(0));",
          "    assert_eq!(BitMask(0x00000000).lowest_set_bit(), None);",
          "    assert_eq!(BitMask(0x00000003).lowest_set_bit(), Some(0));",
          "    assert_eq!(BitMask(0x00000004).lowest_set_bit(), Some(2));",
          "    assert_eq!(BitMask(0x00000010).lowest_set_bit(), Some(4));"
        ],
        "code": [
          "{",
          "    let bitmask = BitMask(0xFFFFFFFF); // All bits set",
          "    let _ = bitmask.lowest_set_bit();",
          "    assert_eq!(bitmask.lowest_set_bit(), None);",
          "    assert_eq!(BitMask(0xFFFFFFFF).lowest_set_bit(), Some(0));",
          "    assert_eq!(BitMask(0x00000000).lowest_set_bit(), None);",
          "    assert_eq!(BitMask(0x00000003).lowest_set_bit(), Some(0));",
          "    assert_eq!(BitMask(0x00000004).lowest_set_bit(), Some(2));",
          "    assert_eq!(BitMask(0x00000010).lowest_set_bit(), Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]