[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZeroSizedType {",
          "        _marker: PhantomData<u8>,",
          "    }",
          "    ",
          "    impl ZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut ZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "}"
        ],
        "oracle": [
          "    invalid_mut(mem::align_of::<ZeroSizedType>()) == result",
          "    result.is_null()",
          "    result.align_offset(mem::align_of::<ZeroSizedType>()) == 0",
          "    result as usize % mem::align_of::<ZeroSizedType>() == 0",
          "    assert!(result == invalid_mut(mem::align_of::<ZeroSizedType>()));"
        ],
        "code": [
          "{",
          "    struct ZeroSizedType {",
          "        _marker: PhantomData<u8>,",
          "    }",
          "    ",
          "    impl ZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut ZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "    invalid_mut(mem::align_of::<ZeroSizedType>()) == result",
          "    result.is_null()",
          "    result.align_offset(mem::align_of::<ZeroSizedType>()) == 0",
          "    result as usize % mem::align_of::<ZeroSizedType>() == 0",
          "    assert!(result == invalid_mut(mem::align_of::<ZeroSizedType>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AnotherZeroSizedType {",
          "        _marker: PhantomData<u64>,",
          "    }",
          "    ",
          "    impl AnotherZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut AnotherZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, invalid_mut(mem::align_of::<AnotherZeroSizedType>()));"
        ],
        "code": [
          "{",
          "    struct AnotherZeroSizedType {",
          "        _marker: PhantomData<u64>,",
          "    }",
          "    ",
          "    impl AnotherZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut AnotherZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "    assert_eq!(result, invalid_mut(mem::align_of::<AnotherZeroSizedType>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomZeroSizedType {",
          "        _marker: PhantomData<()>,",
          "    }",
          "    ",
          "    impl CustomZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut CustomZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, invalid_mut(mem::align_of::<CustomZeroSizedType>()));"
        ],
        "code": [
          "{",
          "    struct CustomZeroSizedType {",
          "        _marker: PhantomData<()>,",
          "    }",
          "    ",
          "    impl CustomZeroSizedType {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let non_null_ptr = NonNull::new(0usize as *mut CustomZeroSizedType).unwrap();",
          "    let bucket = Bucket { ptr: non_null_ptr };",
          "    ",
          "    let result = bucket.as_ptr();",
          "    assert_eq!(result, invalid_mut(mem::align_of::<CustomZeroSizedType>()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]