[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let mut iter = map.iter_mut();",
          "    drop(iter); // Ensure it compiles with no entries.",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let mut iter = map.iter_mut();",
          "    assert_eq!(iter.inner.len(), 0);",
          "    drop(iter);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let mut iter = map.iter_mut();",
          "    drop(iter); // Ensure it compiles with no entries.",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    let mut iter = map.iter_mut();",
          "    assert_eq!(iter.inner.len(), 0);",
          "    drop(iter);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map.insert(\"key1\", 10);",
          "    let mut iter = map.iter_mut();",
          "    if let Some((key, value)) = iter.next() {",
          "        *value *= 2; // Mutate value.",
          "        assert_eq!(*value, 20);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.capacity() >= 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&\"key1\"]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&10]);",
          "    let mut iter = map.iter_mut();",
          "    assert!(iter.next().is_some());",
          "    assert!(iter.next().is_none());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map.insert(\"key1\", 10);",
          "    let mut iter = map.iter_mut();",
          "    if let Some((key, value)) = iter.next() {",
          "        *value *= 2; // Mutate value.",
          "        assert_eq!(*value, 20);",
          "    }",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.capacity() >= 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&\"key1\"]);",
          "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&10]);",
          "    let mut iter = map.iter_mut();",
          "    assert!(iter.next().is_some());",
          "    assert!(iter.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::new(), Global);",
          "    map.insert(\"key1\", 5);",
          "    map.insert(\"key2\", 10);",
          "    map.insert(\"key3\", 15);",
          "    ",
          "    let mut iter = map.iter_mut();",
          "    while let Some((_, value)) = iter.next() {",
          "        *value *= 2; // Mutate values",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(\"key1\"), Some(&10));",
          "    assert_eq!(map.get(\"key2\"), Some(&20));",
          "    assert_eq!(map.get(\"key3\"), Some(&30));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(!map.is_empty());",
          "    assert!(map.capacity() >= map.len());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::new(), Global);",
          "    map.insert(\"key1\", 5);",
          "    map.insert(\"key2\", 10);",
          "    map.insert(\"key3\", 15);",
          "    ",
          "    let mut iter = map.iter_mut();",
          "    while let Some((_, value)) = iter.next() {",
          "        *value *= 2; // Mutate values",
          "    }",
          "    assert_eq!(map.get(\"key1\"), Some(&10));",
          "    assert_eq!(map.get(\"key2\"), Some(&20));",
          "    assert_eq!(map.get(\"key3\"), Some(&30));",
          "    assert_eq!(map.len(), 3);",
          "    assert!(!map.is_empty());",
          "    assert!(map.capacity() >= map.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    ",
          "    let mut iter = map.iter_mut();",
          "    while let Some((_, value)) = iter.next() {",
          "        *value += 1; // Increment value by 1.",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&3));",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 1);",
          "    map.insert(2, 2);",
          "    ",
          "    let mut iter = map.iter_mut();",
          "    while let Some((_, value)) = iter.next() {",
          "        *value += 1; // Increment value by 1.",
          "    }",
          "    assert_eq!(map.len(), 2);",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&2), Some(&3));",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]