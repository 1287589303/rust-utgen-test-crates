[
  {
    "uses": [
      "use hashbrown::TryReserveError;",
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.try_reserve(10).expect(\"failed to reserve capacity for 10 elements\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.try_reserve(10).is_ok());",
          "    assert!(map.capacity() >= 10);",
          "    let max_size = usize::MAX;",
          "    match map.try_reserve(max_size) {",
          "    Err(TryReserveError::CapacityOverflow) => {},",
          "    Err(_) => panic!(\"Unexpected error during try_reserve\"),",
          "    Ok(_) => panic!(\"Expected error but succeeded\"),",
          "    }"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.try_reserve(10).expect(\"failed to reserve capacity for 10 elements\");",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.try_reserve(10).is_ok());",
          "    assert!(map.capacity() >= 10);",
          "    let max_size = usize::MAX;",
          "    match map.try_reserve(max_size) {",
          "    Err(TryReserveError::CapacityOverflow) => {},",
          "    Err(_) => panic!(\"Unexpected error during try_reserve\"),",
          "    Ok(_) => panic!(\"Expected error but succeeded\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.try_reserve(0).expect(\"failed to reserve capacity for 0 elements\");",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    map.try_reserve(10).expect(\"failed to reserve capacity for 10 elements\");",
          "    assert!(map.capacity() >= 10);",
          "    let result = map.try_reserve(usize::MAX);",
          "    match result {",
          "    Err(error) => match error {",
          "    TryReserveError::CapacityOverflow => {}",
          "    _ => panic!(\"unexpected error type received\"),",
          "    },",
          "    _ => panic!(\"expected an error but got Ok()\"),",
          "    }"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    ",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.try_reserve(0).expect(\"failed to reserve capacity for 0 elements\");",
          "    assert_eq!(map.capacity(), 0);",
          "    map.try_reserve(10).expect(\"failed to reserve capacity for 10 elements\");",
          "    assert!(map.capacity() >= 10);",
          "    let result = map.try_reserve(usize::MAX);",
          "    match result {",
          "    Err(error) => match error {",
          "    TryReserveError::CapacityOverflow => {}",
          "    _ => panic!(\"unexpected error type received\"),",
          "    },",
          "    _ => panic!(\"expected an error but got Ok()\"),",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::TryReserveError;",
          "    ",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "",
          "    match map.try_reserve(usize::MAX) {",
          "        Err(error) => {",
          "            match error {",
          "                TryReserveError::CapacityOverflow => {}",
          "                _ => panic!(\"expected TryReserveError::CapacityOverflow, got different error\"),",
          "            }",
          "        }",
          "        _ => panic!(\"expected an error due to overflow\"),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.try_reserve(10).is_ok(), true);",
          "    assert!(map.capacity() >= 10);",
          "    assert_eq!(map.try_reserve(usize::MAX).is_err(), true);",
          "    assert_eq!(map.try_reserve(usize::MAX).unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::TryReserveError;",
          "    ",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "",
          "    match map.try_reserve(usize::MAX) {",
          "        Err(error) => {",
          "            match error {",
          "                TryReserveError::CapacityOverflow => {}",
          "                _ => panic!(\"expected TryReserveError::CapacityOverflow, got different error\"),",
          "            }",
          "        }",
          "        _ => panic!(\"expected an error due to overflow\"),",
          "    }",
          "    assert_eq!(map.try_reserve(10).is_ok(), true);",
          "    assert!(map.capacity() >= 10);",
          "    assert_eq!(map.try_reserve(usize::MAX).is_err(), true);",
          "    assert_eq!(map.try_reserve(usize::MAX).unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]