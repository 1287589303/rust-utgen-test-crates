[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter_hash_mut: IterHashMut<u32> = IterHashMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert!(std::mem::size_of_val(&iter_hash_mut.marker) == std::mem::size_of::<PhantomData<&mut u32>>());"
        ],
        "code": [
          "{",
          "    let iter_hash_mut: IterHashMut<u32> = IterHashMut::default();",
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert!(std::mem::size_of_val(&iter_hash_mut.marker) == std::mem::size_of::<PhantomData<&mut u32>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter_hash_mut: IterHashMut<String> = IterHashMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert_eq!(iter_hash_mut.marker, PhantomData::<&mut String>);"
        ],
        "code": [
          "{",
          "    let iter_hash_mut: IterHashMut<String> = IterHashMut::default();",
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert_eq!(iter_hash_mut.marker, PhantomData::<&mut String>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter_hash_mut: IterHashMut<bool> = IterHashMut::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert!(iter_hash_mut.marker.is_null());"
        ],
        "code": [
          "{",
          "    let iter_hash_mut: IterHashMut<bool> = IterHashMut::default();",
          "    assert_eq!(iter_hash_mut.inner, Default::default());",
          "    assert!(iter_hash_mut.marker.is_null());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]