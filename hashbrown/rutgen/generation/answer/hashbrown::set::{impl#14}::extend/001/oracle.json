[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![1, 2, 3, 4];",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), true);",
          "    assert_eq!(set.len(), 4);",
          "    assert_eq!(set.is_empty(), false);",
          "    assert_eq!(set.contains(&5), false);",
          "    set.extend(&[]);",
          "    assert_eq!(set.len(), 4);",
          "    set.extend(&[1, 2]);",
          "    assert_eq!(set.len(), 4);",
          "    set.extend(&[5]);",
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.len(), 5);"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![1, 2, 3, 4];",
          "    set.extend(&values);",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), true);",
          "    assert_eq!(set.len(), 4);",
          "    assert_eq!(set.is_empty(), false);",
          "    assert_eq!(set.contains(&5), false);",
          "    set.extend(&[]);",
          "    assert_eq!(set.len(), 4);",
          "    set.extend(&[1, 2]);",
          "    assert_eq!(set.len(), 4);",
          "    set.extend(&[5]);",
          "    assert_eq!(set.contains(&5), true);",
          "    assert_eq!(set.len(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values: Vec<i32> = vec![];",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.extend(&vec![1, 2, 3]);",
          "    assert_eq!(set.len(), 3);",
          "    assert!(!set.is_empty());",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    set.extend(&vec![1, 2]);",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    set.extend(&vec![]);",
          "    assert_eq!(set.len(), 3);"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values: Vec<i32> = vec![];",
          "    set.extend(&values);",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    set.extend(&vec![1, 2, 3]);",
          "    assert_eq!(set.len(), 3);",
          "    assert!(!set.is_empty());",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    set.extend(&vec![1, 2]);",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    set.extend(&vec![]);",
          "    assert_eq!(set.len(), 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let max_size = usize::MAX; ",
          "    let values: Vec<i32> = (0..max_size).map(|x| x as i32).collect();",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    set.extend(&values); // Validate if the size of the HashSet is correctly increased to match the number of added elements",
          "    assert_eq!(set.len(), max_size); // Ensure the size of the HashSet equals usize::MAX",
          "    assert!(set.contains(&0)); // Confirm that an added element exists in the HashSet",
          "    assert!(set.contains(&(max_size as i32 - 1))); // Ensure the last added element is also present",
          "    assert!(!set.contains(&max_size as i32)); // Confirm that an out-of-bounds element is not found in the HashSet"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let max_size = usize::MAX; ",
          "    let values: Vec<i32> = (0..max_size).map(|x| x as i32).collect();",
          "    set.extend(&values);",
          "    set.extend(&values); // Validate if the size of the HashSet is correctly increased to match the number of added elements",
          "    assert_eq!(set.len(), max_size); // Ensure the size of the HashSet equals usize::MAX",
          "    assert!(set.contains(&0)); // Confirm that an added element exists in the HashSet",
          "    assert!(set.contains(&(max_size as i32 - 1))); // Ensure the last added element is also present",
          "    assert!(!set.contains(&max_size as i32)); // Confirm that an out-of-bounds element is not found in the HashSet",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![42];",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 1);",
          "    assert!(set.contains(&42));",
          "    assert!(!set.contains(&43));",
          "    assert_eq!(set.map.table.capacity(), expected_capacity);",
          "    set.extend(&[]);",
          "    assert_eq!(set.len(), 1);",
          "    set.extend(&vec![42, 43]);",
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(&43));",
          "    set.extend(&vec![42]);",
          "    assert_eq!(set.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![42];",
          "    set.extend(&values);",
          "    assert_eq!(set.len(), 1);",
          "    assert!(set.contains(&42));",
          "    assert!(!set.contains(&43));",
          "    assert_eq!(set.map.table.capacity(), expected_capacity);",
          "    set.extend(&[]);",
          "    assert_eq!(set.len(), 1);",
          "    set.extend(&vec![42, 43]);",
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(&43));",
          "    set.extend(&vec![42]);",
          "    assert_eq!(set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values: Vec<i32> = (0..1000).map(|x| x as i32).collect();",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 1000);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&999));",
          "    assert!(!set.contains(&1000));",
          "    assert!(set.contains(&(500 as i32)));",
          "    assert!(set.is_empty() == false);",
          "    assert!(set.iter().count() == 1000);"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values: Vec<i32> = (0..1000).map(|x| x as i32).collect();",
          "    set.extend(&values);",
          "    assert_eq!(set.len(), 1000);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&999));",
          "    assert!(!set.contains(&1000));",
          "    assert!(set.contains(&(500 as i32)));",
          "    assert!(set.is_empty() == false);",
          "    assert!(set.iter().count() == 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![1, 2, 2, 3, 3, 3, 4];",
          "    set.extend(&values);",
          "}"
        ],
        "oracle": [
          "    set.len() == 4",
          "    set.contains(&1) == true",
          "    set.contains(&2) == true",
          "    set.contains(&3) == true",
          "    set.contains(&4) == true",
          "    set.contains(&5) == false"
        ],
        "code": [
          "{",
          "    let mut set: crate::HashSet<i32> = crate::HashSet::default();",
          "    let values = vec![1, 2, 2, 3, 3, 3, 4];",
          "    set.extend(&values);",
          "    set.len() == 4",
          "    set.contains(&1) == true",
          "    set.contains(&2) == true",
          "    set.contains(&3) == true",
          "    set.contains(&4) == true",
          "    set.contains(&5) == false",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]