[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let empty_iter: Vec<&i32> = vec![];",
          "    set.extend(empty_iter);",
          "}"
        ],
        "oracle": [
          "    assert!(set.map.table.is_empty());",
          "    set.extend(vec![&1]);",
          "    assert!(set.map.table.len() == 1);",
          "    assert!(set.map.table.contains_key(&1));",
          "    set.extend(vec![&1]);",
          "    assert!(set.map.table.len() == 1);",
          "    set.extend(vec![&2, &3]);",
          "    assert!(set.map.table.len() == 3);",
          "    assert!(set.map.table.contains_key(&2));",
          "    assert!(set.map.table.contains_key(&3));"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let empty_iter: Vec<&i32> = vec![];",
          "    set.extend(empty_iter);",
          "    assert!(set.map.table.is_empty());",
          "    set.extend(vec![&1]);",
          "    assert!(set.map.table.len() == 1);",
          "    assert!(set.map.table.contains_key(&1));",
          "    set.extend(vec![&1]);",
          "    assert!(set.map.table.len() == 1);",
          "    set.extend(vec![&2, &3]);",
          "    assert!(set.map.table.len() == 3);",
          "    assert!(set.map.table.contains_key(&2));",
          "    assert!(set.map.table.contains_key(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let single_iter: Vec<&i32> = vec![&1];",
          "    set.extend(single_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 1);",
          "    assert!(set.map.table.contains(&(1, ())))",
          "    assert!(!set.map.table.contains(&(2, ())));",
          "    let multiple_iter: Vec<&i32> = vec![&2, &3, &4];",
          "    set.extend(multiple_iter);",
          "    assert_eq!(set.map.table.len(), 4);",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(set.map.table.contains(&(4, ())));",
          "    set.extend(Vec::<&i32>::new());",
          "    assert_eq!(set.map.table.len(), 4);",
          "    set.extend(vec![&1, &2, &3]);",
          "    assert_eq!(set.map.table.len(), 4);",
          "    set.extend(vec![&5]);",
          "    assert_eq!(set.map.table.len(), 5);",
          "    assert!(set.map.table.contains(&(5, ())));"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let single_iter: Vec<&i32> = vec![&1];",
          "    set.extend(single_iter);",
          "    assert_eq!(set.map.table.len(), 1);",
          "    assert!(set.map.table.contains(&(1, ())))",
          "    assert!(!set.map.table.contains(&(2, ())));",
          "    let multiple_iter: Vec<&i32> = vec![&2, &3, &4];",
          "    set.extend(multiple_iter);",
          "    assert_eq!(set.map.table.len(), 4);",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(set.map.table.contains(&(4, ())));",
          "    set.extend(Vec::<&i32>::new());",
          "    assert_eq!(set.map.table.len(), 4);",
          "    set.extend(vec![&1, &2, &3]);",
          "    assert_eq!(set.map.table.len(), 4);",
          "    set.extend(vec![&5]);",
          "    assert_eq!(set.map.table.len(), 5);",
          "    assert!(set.map.table.contains(&(5, ())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let multiple_iter: Vec<&i32> = vec![&1, &2, &3, &4, &5];",
          "    set.extend(multiple_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 5);",
          "    assert!(set.map.table.contains(&(1, ())));",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(set.map.table.contains(&(4, ())));",
          "    assert!(set.map.table.contains(&(5, ())));"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let multiple_iter: Vec<&i32> = vec![&1, &2, &3, &4, &5];",
          "    set.extend(multiple_iter);",
          "    assert_eq!(set.map.table.len(), 5);",
          "    assert!(set.map.table.contains(&(1, ())));",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(set.map.table.contains(&(4, ())));",
          "    assert!(set.map.table.contains(&(5, ())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let duplicate_iter: Vec<&i32> = vec![&1, &2, &2, &3, &3];",
          "    set.extend(duplicate_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 3);",
          "    assert!(set.map.table.contains(&(1, ())));",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(!set.map.table.contains(&(2, ())));",
          "    assert!(!set.map.table.contains(&(3, ())));"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let duplicate_iter: Vec<&i32> = vec![&1, &2, &2, &3, &3];",
          "    set.extend(duplicate_iter);",
          "    assert_eq!(set.map.table.len(), 3);",
          "    assert!(set.map.table.contains(&(1, ())));",
          "    assert!(set.map.table.contains(&(2, ())));",
          "    assert!(set.map.table.contains(&(3, ())));",
          "    assert!(!set.map.table.contains(&(2, ())));",
          "    assert!(!set.map.table.contains(&(3, ())));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let large_iter: Vec<&i32> = (0..1000).map(|x| &x).collect();",
          "    set.extend(large_iter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 1000);",
          "    assert!(set.map.table.contains(&(0, ()));",
          "    assert!(set.map.table.contains(&(999, ()));",
          "    assert!(!set.map.table.contains(&(1000, ()));",
          "    assert!(set.map.table.contains(&(500, ()));",
          "    assert!(set.map.table.contains(&(0, ()));"
        ],
        "code": [
          "{",
          "    let mut set: HashSet<i32> = HashSet { map: HashMap { hash_builder: DefaultHashBuilder, table: RawTable::new() } };",
          "    let large_iter: Vec<&i32> = (0..1000).map(|x| &x).collect();",
          "    set.extend(large_iter);",
          "    assert_eq!(set.map.table.len(), 1000);",
          "    assert!(set.map.table.contains(&(0, ()));",
          "    assert!(set.map.table.contains(&(999, ()));",
          "    assert!(!set.map.table.contains(&(1000, ()));",
          "    assert!(set.map.table.contains(&(500, ()));",
          "    assert!(set.map.table.contains(&(0, ()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]