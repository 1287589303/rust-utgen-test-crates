[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"test_key\";",
          "    let value = 42;",
          "    let hash = 12345;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.insert_hashed_nocheck(hash, key, value), (&mut \"test_key\", &mut 42));",
          "    assert!(std::mem::size_of::<RawVacantEntryMut<&str, u32, SimpleHasher>>() > 0);",
          "    assert!(table.len() == 1);",
          "    assert!(table.contains_key(&\"test_key\"));",
          "    assert_eq!(table.get(&\"test_key\"), Some(&42));",
          "    assert_eq!(vacant_entry.table.get_entry(hash, &key), Some((&mut \"test_key\", &mut 42)));",
          "    assert_eq!(vacant_entry.table.get_entry(99999, &key), None);"
        ],
        "code": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"test_key\";",
          "    let value = 42;",
          "    let hash = 12345;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "    assert_eq!(vacant_entry.insert_hashed_nocheck(hash, key, value), (&mut \"test_key\", &mut 42));",
          "    assert!(std::mem::size_of::<RawVacantEntryMut<&str, u32, SimpleHasher>>() > 0);",
          "    assert!(table.len() == 1);",
          "    assert!(table.contains_key(&\"test_key\"));",
          "    assert_eq!(table.get(&\"test_key\"), Some(&42));",
          "    assert_eq!(vacant_entry.table.get_entry(hash, &key), Some((&mut \"test_key\", &mut 42)));",
          "    assert_eq!(vacant_entry.table.get_entry(99999, &key), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"boundary_key\";",
          "    let value = 0;",
          "    let hash = 0;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value),",
          "    (&mut \"boundary_key\", &mut 0)",
          "    );"
        ],
        "code": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"boundary_key\";",
          "    let value = 0;",
          "    let hash = 0;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "    assert_eq!(",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value),",
          "    (&mut \"boundary_key\", &mut 0)",
          "    );",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"large_hash_key\";",
          "    let value = 100;",
          "    let hash = u64::MAX;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vacant_entry.insert_hashed_nocheck(hash, \"large_hash_key\", 100), (&mut \"large_hash_key\", &mut 100));",
          "    assert!(vacant_entry.table.contains_key(&\"large_hash_key\"));",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), Some(&100));",
          "    assert!(vacant_entry.insert_hashed_nocheck(hash, \"large_hash_key\", 200).1 == &mut 200);",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), Some(&200));",
          "    assert_eq!(vacant_entry.table.len(), 1);",
          "    assert_eq!(vacant_entry.table.is_empty(), false);",
          "    assert!(vacant_entry.table.remove(&\"large_hash_key\").is_some());",
          "    assert_eq!(vacant_entry.table.len(), 0);",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), None);"
        ],
        "code": [
          "{",
          "    struct SimpleHasher;",
          "    impl BuildHasher for SimpleHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let hasher = SimpleHasher;",
          "    let mut table = RawTable::new();",
          "    let key = \"large_hash_key\";",
          "    let value = 100;",
          "    let hash = u64::MAX;",
          "",
          "    let mut vacant_entry = RawVacantEntryMut {",
          "        table: &mut table,",
          "        hash_builder: &hasher,",
          "    };",
          "",
          "    vacant_entry.insert_hashed_nocheck(hash, key, value);",
          "    assert_eq!(vacant_entry.insert_hashed_nocheck(hash, \"large_hash_key\", 100), (&mut \"large_hash_key\", &mut 100));",
          "    assert!(vacant_entry.table.contains_key(&\"large_hash_key\"));",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), Some(&100));",
          "    assert!(vacant_entry.insert_hashed_nocheck(hash, \"large_hash_key\", 200).1 == &mut 200);",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), Some(&200));",
          "    assert_eq!(vacant_entry.table.len(), 1);",
          "    assert_eq!(vacant_entry.table.is_empty(), false);",
          "    assert!(vacant_entry.table.remove(&\"large_hash_key\").is_some());",
          "    assert_eq!(vacant_entry.table.len(), 0);",
          "    assert_eq!(vacant_entry.table.get(&\"large_hash_key\"), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]