[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(0, |item: &TestType| item.value as u64, Fallibility::Infallible);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(unsafe { table.iter().next().is_none() });",
          "    assert!(unsafe { table.is_bucket_full(0) }.is_err());"
        ],
        "code": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(0, |item: &TestType| item.value as u64, Fallibility::Infallible);",
          "    }",
          "    assert!(result.is_ok());",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(unsafe { table.iter().next().is_none() });",
          "    assert!(unsafe { table.is_bucket_full(0) }.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(5, |item: &TestType| item.value as u64, Fallibility::Fallible);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(()));",
          "    assert!(table.table.items > 0);",
          "    assert!(table.capacity() >= 5);",
          "    assert!(table.is_empty() == false);",
          "    assert!(table.len() > 0);",
          "    assert!(table.buckets() > 0);",
          "    assert!(table.table.ctrl.is_non_null());",
          "    assert!(table.table.growth_left > 0);",
          "    assert!(table.table.bucket_mask > 0);",
          "    assert!(table.allocation_size() > 0);",
          "    assert!(table.data_end().as_ptr() != ptr::null_mut());"
        ],
        "code": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(5, |item: &TestType| item.value as u64, Fallibility::Fallible);",
          "    }",
          "    assert_eq!(result, Ok(()));",
          "    assert!(table.table.items > 0);",
          "    assert!(table.capacity() >= 5);",
          "    assert!(table.is_empty() == false);",
          "    assert!(table.len() > 0);",
          "    assert!(table.buckets() > 0);",
          "    assert!(table.table.ctrl.is_non_null());",
          "    assert!(table.table.growth_left > 0);",
          "    assert!(table.table.bucket_mask > 0);",
          "    assert!(table.allocation_size() > 0);",
          "    assert!(table.data_end().as_ptr() != ptr::null_mut());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(usize::MAX, |item: &TestType| item.value as u64, Fallibility::Infallible);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    struct Alloc;",
          "    unsafe impl Allocator for Alloc {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "    ",
          "    struct TestType {",
          "        value: i32,",
          "    }",
          "    impl TestType {",
          "        const NEEDS_DROP: bool = true;",
          "    }",
          "    ",
          "    let mut table: RawTable<TestType, Alloc> = RawTable::new_in(Alloc);",
          "    ",
          "    unsafe {",
          "        let result = table.reserve_rehash(usize::MAX, |item: &TestType| item.value as u64, Fallibility::Infallible);",
          "    }",
          "    assert_eq!(result, Err(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]