[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<_> = [1, 2, 3, 4].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), true);",
          "    assert_eq!(set.len(), 4);",
          "    assert_eq!(set.is_empty(), false);",
          "    assert_eq!(set.contains(&5), false);",
          "    assert_eq!(set.remove(&1), true);",
          "    assert_eq!(set.contains(&1), false);",
          "    assert_eq!(set.len(), 3);",
          "    assert_eq!(set.remove(&5), false);",
          "    assert_eq!(set.len(), 3);",
          "    let set_empty: hashbrown::HashSet<_> = [].into();",
          "    assert_eq!(set_empty.len(), 0);",
          "    assert_eq!(set_empty.is_empty(), true);",
          "    assert_eq!(set_empty.contains(&1), false);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<_> = [1, 2, 3, 4].into();",
          "    assert_eq!(set.contains(&1), true);",
          "    assert_eq!(set.contains(&2), true);",
          "    assert_eq!(set.contains(&3), true);",
          "    assert_eq!(set.contains(&4), true);",
          "    assert_eq!(set.len(), 4);",
          "    assert_eq!(set.is_empty(), false);",
          "    assert_eq!(set.contains(&5), false);",
          "    assert_eq!(set.remove(&1), true);",
          "    assert_eq!(set.contains(&1), false);",
          "    assert_eq!(set.len(), 3);",
          "    assert_eq!(set.remove(&5), false);",
          "    assert_eq!(set.len(), 3);",
          "    let set_empty: hashbrown::HashSet<_> = [].into();",
          "    assert_eq!(set_empty.len(), 0);",
          "    assert_eq!(set_empty.is_empty(), true);",
          "    assert_eq!(set_empty.contains(&1), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<_> = [1, 1, 2, 3].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    assert!(!set.contains(&4));"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<_> = [1, 1, 2, 3].into();",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&2));",
          "    assert!(set.contains(&3));",
          "    assert!(!set.contains(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = [].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashbrown::HashSet::<i32>::from([]), hashbrown::HashSet::<i32>::new());"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = [].into();",
          "    assert_eq!(hashbrown::HashSet::<i32>::from([]), hashbrown::HashSet::<i32>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<&str> = [\"hello\", \"world\", \"rust\"].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(\"hello\"));",
          "    assert!(set.contains(\"world\"));",
          "    assert!(set.contains(\"rust\"));",
          "    assert!(!set.contains(\"not_in_set\"));",
          "    let set_empty: hashbrown::HashSet<&str> = [].into();",
          "    assert_eq!(set_empty.len(), 0);",
          "    let set_single: hashbrown::HashSet<&str> = [\"single\"].into();",
          "    assert_eq!(set_single.len(), 1);",
          "    assert!(set_single.contains(\"single\"));",
          "    assert!(!set_single.contains(\"other\"));"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<&str> = [\"hello\", \"world\", \"rust\"].into();",
          "    assert_eq!(set.len(), 3);",
          "    assert!(set.contains(\"hello\"));",
          "    assert!(set.contains(\"world\"));",
          "    assert!(set.contains(\"rust\"));",
          "    assert!(!set.contains(\"not_in_set\"));",
          "    let set_empty: hashbrown::HashSet<&str> = [].into();",
          "    assert_eq!(set_empty.len(), 0);",
          "    let set_single: hashbrown::HashSet<&str> = [\"single\"].into();",
          "    assert_eq!(set_single.len(), 1);",
          "    assert!(set_single.contains(\"single\"));",
          "    assert!(!set_single.contains(\"other\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<&str> = [\"hello\", \"hello\", \"rust\"].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(\"hello\"));",
          "    assert!(set.contains(\"rust\"));",
          "    assert!(!set.contains(\"world\"));"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<&str> = [\"hello\", \"hello\", \"rust\"].into();",
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(\"hello\"));",
          "    assert!(set.contains(\"rust\"));",
          "    assert!(!set.contains(\"world\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Eq, Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "    ",
          "    let set: hashbrown::HashSet<_> = [",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 2 },",
          "    ].into();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(&CustomStruct { id: 1 }));",
          "    assert!(set.contains(&CustomStruct { id: 2 }));",
          "    assert!(!set.contains(&CustomStruct { id: 3 }));",
          "    assert_eq!(set.len(), 2);"
        ],
        "code": [
          "{",
          "    #[derive(Eq, Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "    ",
          "    let set: hashbrown::HashSet<_> = [",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 2 },",
          "    ].into();",
          "    assert!(set.contains(&CustomStruct { id: 1 }));",
          "    assert!(set.contains(&CustomStruct { id: 2 }));",
          "    assert!(!set.contains(&CustomStruct { id: 3 }));",
          "    assert_eq!(set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Eq, Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "    ",
          "    let set: hashbrown::HashSet<_> = [",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 2 },",
          "    ].into();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(&CustomStruct { id: 1 }));",
          "    assert!(set.contains(&CustomStruct { id: 2 }));",
          "    assert!(!set.contains(&CustomStruct { id: 3 }));",
          "    assert!(set.is_empty() == false);"
        ],
        "code": [
          "{",
          "    #[derive(Eq, Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "    ",
          "    let set: hashbrown::HashSet<_> = [",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 1 },",
          "        CustomStruct { id: 2 },",
          "    ].into();",
          "    assert_eq!(set.len(), 2);",
          "    assert!(set.contains(&CustomStruct { id: 1 }));",
          "    assert!(set.contains(&CustomStruct { id: 2 }));",
          "    assert!(!set.contains(&CustomStruct { id: 3 }));",
          "    assert!(set.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]