[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<u8> = RawTable::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
          "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
          "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
          "    assert!(table.alloc.is::<Global>());",
          "    assert!(table.marker == PhantomData::<u8>);"
        ],
        "code": [
          "{",
          "    let table: RawTable<u8> = RawTable::new();",
          "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
          "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
          "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
          "    assert!(table.alloc.is::<Global>());",
          "    assert!(table.marker == PhantomData::<u8>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<f64> = RawTable::new();",
          "}"
        ],
        "oracle": [
          "    let table: RawTable<f64> = RawTable::new();",
          "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
          "    assert_eq!(table.table.ctrl, RawTableInner::NEW.ctrl);",
          "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
          "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
          "    assert_eq!(table.alloc, Global);",
          "    assert!(std::mem::size_of_val(&table.marker) == 0);"
        ],
        "code": [
          "{",
          "    let table: RawTable<f64> = RawTable::new();",
          "    let table: RawTable<f64> = RawTable::new();",
          "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
          "    assert_eq!(table.table.ctrl, RawTableInner::NEW.ctrl);",
          "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
          "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
          "    assert_eq!(table.alloc, Global);",
          "    assert!(std::mem::size_of_val(&table.marker) == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]