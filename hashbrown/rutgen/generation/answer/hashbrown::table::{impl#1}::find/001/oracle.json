[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&2), |&val| val == 2);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), Some(&2));",
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);",
          "    assert_eq!(table.find(hasher(&0), |&_| false), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&2), |&val| val == 2);",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), Some(&2));",
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);",
          "    assert_eq!(table.find(hasher(&0), |&_| false), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&3), |&val| val == 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), Some(&2));",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&3), |&val| val == 3);",
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), Some(&2));",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let table: HashTable<u64, TestAllocator> = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.find(hasher(&1), |&val| val == 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), None);",
          "    assert_eq!(table.find(hasher(&0), |&val| val == 0), None);",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let table: HashTable<u64, TestAllocator> = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.find(hasher(&1), |&val| val == 1);",
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 2), None);",
          "    assert_eq!(table.find(hasher(&0), |&val| val == 0), None);",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&4), |&val| val == 4), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&1), |&val| val % 2 == 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 1), None);",
          "    assert_eq!(table.find(hasher(&1), |&val| val % 2 == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&1), |&val| val % 2 == 0), None);",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&2), |&val| val % 2 == 0), Some(&2));"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "",
          "    table.find(hasher(&1), |&val| val % 2 == 1);",
          "    assert_eq!(table.find(hasher(&1), |&val| val == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&2), |&val| val == 1), None);",
          "    assert_eq!(table.find(hasher(&1), |&val| val % 2 == 1), Some(&1));",
          "    assert_eq!(table.find(hasher(&1), |&val| val % 2 == 0), None);",
          "    assert_eq!(table.find(hasher(&3), |&val| val == 3), None);",
          "    assert_eq!(table.find(hasher(&2), |&val| val % 2 == 0), Some(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(0, 0, hasher);",
          "    ",
          "    table.find(0, |&val| val == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(0, |&val| val == 0), Some(&0));",
          "    assert_eq!(table.find(1, |&val| val == 1), None);",
          "    assert_eq!(table.find(0, |&val| val == 1), None);",
          "    table.insert_unique(1, 1, hasher);",
          "    assert_eq!(table.find(1, |&val| val == 1), Some(&1));"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(0, 0, hasher);",
          "    ",
          "    table.find(0, |&val| val == 0);",
          "    assert_eq!(table.find(0, |&val| val == 0), Some(&0));",
          "    assert_eq!(table.find(1, |&val| val == 1), None);",
          "    assert_eq!(table.find(0, |&val| val == 1), None);",
          "    table.insert_unique(1, 1, hasher);",
          "    assert_eq!(table.find(1, |&val| val == 1), Some(&1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(u64::MAX, 42, hasher);",
          "    ",
          "    table.find(u64::MAX, |&val| val == 42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(u64::MAX, |&val| val == 42), Some(&42));",
          "    assert_eq!(table.find(0, |&val| val == 42), None);",
          "    assert_eq!(table.find(u64::MAX - 1, |&val| val == 42), None);",
          "    assert_eq!(table.find(u64::MAX, |&val| val == 41), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    let mut table = HashTable::new_in(TestAllocator);",
          "    let hasher = |val: &u64| *val;",
          "",
          "    table.insert_unique(u64::MAX, 42, hasher);",
          "    ",
          "    table.find(u64::MAX, |&val| val == 42);",
          "    assert_eq!(table.find(u64::MAX, |&val| val == 42), Some(&42));",
          "    assert_eq!(table.find(0, |&val| val == 42), None);",
          "    assert_eq!(table.find(u64::MAX - 1, |&val| val == 42), None);",
          "    assert_eq!(table.find(u64::MAX, |&val| val == 41), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]