[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<u32> = RawTable::new_in(Global);",
          "    let hash = 42;",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let table: RawTable<u32> = RawTable::new_in(Global);",
          "    let hash = 42;",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 10, |x| *x);",
          "        table.insert(2, 20, |x| *x);",
          "    }",
          "    let hash = 99;",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 10, |x| *x);",
          "        table.insert(2, 20, |x| *x);",
          "    }",
          "    let hash = 99;",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(8, Global);",
          "    unsafe {",
          "        table.insert(3, 30, |x| *x);",
          "        table.insert(4, 40, |x| *x);",
          "    }",
          "    let hash = 50;",
          "    let eq = |value: &u32| *value == 10; // This will always return false",
          "    let result = table.find(hash, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(8, Global);",
          "    unsafe {",
          "        table.insert(3, 30, |x| *x);",
          "        table.insert(4, 40, |x| *x);",
          "    }",
          "    let hash = 50;",
          "    let eq = |value: &u32| *value == 10; // This will always return false",
          "    let result = table.find(hash, eq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(2, Global);",
          "    unsafe {",
          "        table.insert(5, 50, |x| *x);",
          "    }",
          "    let hash = 100; // A hash not corresponding to any elements",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(2, Global);",
          "    unsafe {",
          "        table.insert(5, 50, |x| *x);",
          "    }",
          "    let hash = 100; // A hash not corresponding to any elements",
          "    let eq = |_: &u32| false;",
          "    let result = table.find(hash, eq);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]