[
  {
    "uses": [
      "use std::collections::hash_map::RandomState;",
      "use hashbrown::HashSet;",
      "use hashbrown::DefaultHashBuilder;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher(hasher);",
          "}"
        ],
        "oracle": [
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_hasher(hasher);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert_eq!(set.map.table.len(), 0);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher(hasher);",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set = HashSet::with_hasher(hasher);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert_eq!(set.map.table.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let hasher = RandomState::new();",
          "    let set: HashSet<i32, RandomState> = HashSet::with_hasher(hasher);",
          "}"
        ],
        "oracle": [
          "    assert!(set.map.hash_builder == hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.capacity() == 0);",
          "    assert!(set.map.table.hash_builder.is::<RandomState>());",
          "    assert!(set.map.table.is::<(i32, ())>());",
          "    assert!(set.map.table.iter().count() == 0);",
          "    assert!(set.map.table.is_fused());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let hasher = RandomState::new();",
          "    let set: HashSet<i32, RandomState> = HashSet::with_hasher(hasher);",
          "    assert!(set.map.hash_builder == hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.table.is_empty());",
          "    assert!(set.map.table.capacity() == 0);",
          "    assert!(set.map.table.hash_builder.is::<RandomState>());",
          "    assert!(set.map.table.is::<(i32, ())>());",
          "    assert!(set.map.table.iter().count() == 0);",
          "    assert!(set.map.table.is_fused());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher(hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert!(set.map.hash_builder is a BuildHasher trait implementation);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher(hasher);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert!(set.map.table.is_empty());",
          "    assert_eq!(set.map.table.capacity(), 0);",
          "    assert!(set.map.hash_builder is a BuildHasher trait implementation);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher(1000, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.capacity(), 1000);",
          "    assert!(set.map.table.is_empty());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashSet, DefaultHashBuilder};",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher(1000, hasher);",
          "    assert_eq!(set.map.hash_builder, hasher);",
          "    assert_eq!(set.map.table.capacity(), 1000);",
          "    assert!(set.map.table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]