[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, Default::default(), Global);",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.count(), 0);",
          "    let map_with_entries: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(3, Default::default(), Global);",
          "    map_with_entries.insert(1, \"a\");",
          "    map_with_entries.insert(2, \"b\");",
          "    map_with_entries.insert(3, \"c\");",
          "    let iter_non_empty = map_with_entries.into_iter();",
          "    assert_eq!(iter_non_empty.count(), 3);",
          "    let mut collected: Vec<_> = iter_non_empty.collect();",
          "    assert_eq!(collected.len(), 3);",
          "    for entry in collected.iter() { assert!(entry.0 == &1 || entry.0 == &2 || entry.0 == &3); }",
          "    let map_empty: HashMap<i32, &str> = HashMap::new();",
          "    let iter_empty = map_empty.into_iter();",
          "    assert!(iter_empty.next().is_none());"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, Default::default(), Global);",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "    assert_eq!(iter.count(), 0);",
          "    let map_with_entries: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(3, Default::default(), Global);",
          "    map_with_entries.insert(1, \"a\");",
          "    map_with_entries.insert(2, \"b\");",
          "    map_with_entries.insert(3, \"c\");",
          "    let iter_non_empty = map_with_entries.into_iter();",
          "    assert_eq!(iter_non_empty.count(), 3);",
          "    let mut collected: Vec<_> = iter_non_empty.collect();",
          "    assert_eq!(collected.len(), 3);",
          "    for entry in collected.iter() { assert!(entry.0 == &1 || entry.0 == &2 || entry.0 == &3); }",
          "    let map_empty: HashMap<i32, &str> = HashMap::new();",
          "    let iter_empty = map_empty.into_iter();",
          "    assert!(iter_empty.next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, Default::default(), Global);",
          "    map.insert(1, \"a\");",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(iter.count(), 1);",
          "    assert_eq!(iter.next(), Some((&1, &\"a\")));",
          "    assert!(iter.next().is_none());",
          "    assert_eq!(map.drain().count(), 1);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.raw_capacity(), 1);",
          "    assert!(map.len() == 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.values_mut().count() == 0);",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.iter_mut().count() == 0);",
          "    assert!(map.into_keys().count() == 0);",
          "    assert!(map.into_values().count() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, Default::default(), Global);",
          "    map.insert(1, \"a\");",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.is_empty() == false);",
          "    assert_eq!(iter.count(), 1);",
          "    assert_eq!(iter.next(), Some((&1, &\"a\")));",
          "    assert!(iter.next().is_none());",
          "    assert_eq!(map.drain().count(), 1);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.raw_capacity(), 1);",
          "    assert!(map.len() == 0);",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.values_mut().count() == 0);",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.iter_mut().count() == 0);",
          "    assert!(map.into_keys().count() == 0);",
          "    assert!(map.into_values().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(3, Default::default(), Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 3);",
          "    assert!(iter.eq(vec![(&1, &\"a\"), (&2, &\"b\"), (&3, &\"c\")].into_iter()));",
          "    assert!(iter.count() == 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() >= 3);",
          "    assert!(map.keys().len() == 3);",
          "    assert!(map.values().len() == 3);",
          "    assert!(map.drain().count() == 3);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(3, Default::default(), Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "    assert_eq!(map.len(), 3);",
          "    assert!(iter.eq(vec![(&1, &\"a\"), (&2, &\"b\"), (&3, &\"c\")].into_iter()));",
          "    assert!(iter.count() == 3);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() >= 3);",
          "    assert!(map.keys().len() == 3);",
          "    assert!(map.values().len() == 3);",
          "    assert!(map.drain().count() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(5, Default::default(), Global);",
          "    for i in 0..5 {",
          "        map.insert(i, \"test\");",
          "    }",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 5)",
          "    assert!(map.is_empty() == false)",
          "    assert_eq!(iter.count(), 5)",
          "    assert_eq!(iter.inner.next(), Some((&0, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&1, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&2, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&3, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&4, &\"test\")))",
          "    assert_eq!(iter.inner.next(), None)"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(5, Default::default(), Global);",
          "    for i in 0..5 {",
          "        map.insert(i, \"test\");",
          "    }",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "    assert_eq!(map.len(), 5)",
          "    assert!(map.is_empty() == false)",
          "    assert_eq!(iter.count(), 5)",
          "    assert_eq!(iter.inner.next(), Some((&0, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&1, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&2, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&3, &\"test\")))",
          "    assert_eq!(iter.inner.next(), Some((&4, &\"test\")))",
          "    assert_eq!(iter.inner.next(), None)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, Default::default(), Global);",
          "    for i in 0..10 {",
          "        map.insert(i, \"test\");",
          "    }",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.count(), 10);",
          "    assert!(iter.size_hint().0 == 0);",
          "    assert!(iter.size_hint().1.is_none());",
          "    for (key, value) in iter {",
          "    assert!(key >= 0 && key < 10);",
          "    assert_eq!(value, \"test\");",
          "    }",
          "    assert!(map.len() == 10);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.keys().count() == 10);",
          "    assert!(map.values().count() == 10);",
          "    assert!(map.iter().count() == 10);",
          "    assert!(map.drain().count() == 10);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, Default::default(), Global);",
          "    for i in 0..10 {",
          "        map.insert(i, \"test\");",
          "    }",
          "    let iter = map.into_iter();",
          "    let _count: usize = iter.count(); // Consumed to validate iterator behavior",
          "    assert_eq!(iter.count(), 10);",
          "    assert!(iter.size_hint().0 == 0);",
          "    assert!(iter.size_hint().1.is_none());",
          "    for (key, value) in iter {",
          "    assert!(key >= 0 && key < 10);",
          "    assert_eq!(value, \"test\");",
          "    }",
          "    assert!(map.len() == 10);",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.keys().count() == 10);",
          "    assert!(map.values().count() == 10);",
          "    assert!(map.iter().count() == 10);",
          "    assert!(map.drain().count() == 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]