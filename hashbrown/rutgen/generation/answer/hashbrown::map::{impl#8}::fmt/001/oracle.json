[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::default(), Global);",
          "    let _ = format!(\"{:?}\", map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugMap\"));",
          "    assert!(format!(\"{:?}\", map).contains(\"entries\"));",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::default(), Global);",
          "    let _ = format!(\"{:?}\", map);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugMap\"));",
          "    assert!(format!(\"{:?}\", map).contains(\"entries\"));",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let mut map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::default(), Global);",
          "    map.insert(DebugKey, DebugValue);",
          "    let _ = format!(\"{:?}\", map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugKey\"));",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugValue\"));",
          "    assert_eq!(map.allocator() as *const _, Global as *const _);"
        ],
        "code": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let mut map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::default(), Global);",
          "    map.insert(DebugKey, DebugValue);",
          "    let _ = format!(\"{:?}\", map);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.is_empty());",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugKey\"));",
          "    assert!(format!(\"{:?}\", map).contains(\"DebugValue\"));",
          "    assert_eq!(map.allocator() as *const _, Global as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let mut map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::default(), Global);",
          "    for _ in 0..5 {",
          "        map.insert(DebugKey, DebugValue);",
          "    }",
          "    let _ = format!(\"{:?}\", map);",
          "}"
        ],
        "oracle": [
          "    f.debug_map().entries(self.iter()).finish() == Ok(());",
          "    let map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::default(), Global);",
          "    map.len() == 5;",
          "    map.is_empty() == false;",
          "    map.capacity() >= 5;",
          "    map.keys().len() == 5;",
          "    map.values().len() == 5;"
        ],
        "code": [
          "{",
          "    struct DebugKey;",
          "    struct DebugValue;",
          "    let mut map: HashMap<DebugKey, DebugValue> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::default(), Global);",
          "    for _ in 0..5 {",
          "        map.insert(DebugKey, DebugValue);",
          "    }",
          "    let _ = format!(\"{:?}\", map);",
          "    f.debug_map().entries(self.iter()).finish() == Ok(());",
          "    let map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::default(), Global);",
          "    map.len() == 5;",
          "    map.is_empty() == false;",
          "    map.capacity() >= 5;",
          "    map.keys().len() == 5;",
          "    map.values().len() == 5;",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]