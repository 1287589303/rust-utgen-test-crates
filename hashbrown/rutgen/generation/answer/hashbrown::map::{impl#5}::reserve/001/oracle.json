[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 10);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(0);",
          "    assert_eq!(map.capacity(), 0);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 1);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 11);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(1);",
          "    assert_eq!(map.capacity(), 1);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 11);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(1000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 10);",
          "    map.reserve(1000);",
          "    assert!(map.capacity() >= 1000);",
          "    assert!(map.capacity() <= isize::MAX as usize);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(1000);",
          "    assert_eq!(map.capacity(), 0);",
          "    map.reserve(10);",
          "    assert!(map.capacity() >= 10);",
          "    map.reserve(1000);",
          "    assert!(map.capacity() >= 1000);",
          "    assert!(map.capacity() <= isize::MAX as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(isize::MAX as usize);",
          "}"
        ],
        "oracle": [
          "    assert_panics!(|| map.reserve(isize::MAX as usize));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    map.reserve(isize::MAX as usize);",
          "    assert_panics!(|| map.reserve(isize::MAX as usize));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]