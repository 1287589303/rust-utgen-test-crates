[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 0, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 0, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());",
          "    assert!(result.is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 3, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 3, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 5, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 5, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 6, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err(), \"Expected error when buckets is not a power of two\");",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 6, Fallibility::Fallible);",
          "    assert!(result.is_err(), \"Expected error when buckets is not a power of two\");",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 7, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 7, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 9, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 9, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 10, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 10, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 15, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 15, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 18, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 18, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 20, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 20, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 30, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 30, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 31, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 31, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 32, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result.err().unwrap(), TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 32, Fallibility::Fallible);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result.err().unwrap(), TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 33, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 33, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 63, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 63, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 64, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 64, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err(), Some(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 65, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 65, Fallibility::Fallible);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 127, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_matches!(result, Err(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 127, Fallibility::Fallible);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_matches!(result, Err(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 128, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(TryReserveError::CapacityOverflow)));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 128, Fallibility::Fallible);",
          "    assert_eq!(result.is_err(), true);",
          "    assert!(matches!(result, Err(TryReserveError::CapacityOverflow)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 129, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 129, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 255, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 255, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 256, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Err(TryReserveError::CapacityOverflow));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 256, Fallibility::Fallible);",
          "    assert_eq!(result, Err(TryReserveError::CapacityOverflow));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 257, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 257, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 511, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 511, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 512, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 512, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 513, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 513, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1023, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1023, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1024, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1024, Fallibility::Fallible);",
          "    assert_eq!(result.is_err(), true);",
          "    assert_eq!(result.err().unwrap(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1025, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error, TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 1025, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    let error = result.err().unwrap();",
          "    assert_eq!(error, TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2047, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2047, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2048, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err(), \"Expected error due to buckets not being a power of two.\");",
          "    assert_eq!(result.unwrap_err().kind(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2048, Fallibility::Fallible);",
          "    assert!(result.is_err(), \"Expected error due to buckets not being a power of two.\");",
          "    assert_eq!(result.unwrap_err().kind(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2049, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2049, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2049, Fallibility::Fallible);",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 2049, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4095, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4095, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4096, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4096, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4097, Fallibility::Fallible);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let layout = TableLayout::new::<u8>();",
          "    let result = RawTableInner::new_uninitialized(&alloc, layout, 4097, Fallibility::Fallible);",
          "    assert!(result.is_err());",
          "    assert_eq!(result.unwrap_err(), TryReserveError::CapacityOverflow);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]