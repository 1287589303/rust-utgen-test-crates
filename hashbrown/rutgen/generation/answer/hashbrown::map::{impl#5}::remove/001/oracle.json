[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(1), Value(\"a\"));",
          "    ",
          "    let result = map.remove(&Key(1)); // Q is Key",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Value(\"a\")));"
        ],
        "code": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(1), Value(\"a\"));",
          "    ",
          "    let result = map.remove(&Key(1)); // Q is Key",
          "    assert_eq!(result, Some(Value(\"a\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(1), Value(\"a\"));",
          "    map.insert(Key(2), Value(\"b\"));",
          "    ",
          "    let result = map.remove(&Key(1)); // Q is Key",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Value(\"a\")));",
          "    assert!(map.contains_key(&Key(1)) == false);",
          "    assert_eq!(map.get(&Key(2)), Some(&Value(\"b\")));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() > 0);",
          "    result = map.remove(&Key(1));",
          "    assert_eq!(result, None);",
          "    assert!(map.is_empty() == false);"
        ],
        "code": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(1), Value(\"a\"));",
          "    map.insert(Key(2), Value(\"b\"));",
          "    ",
          "    let result = map.remove(&Key(1)); // Q is Key",
          "    assert_eq!(result, Some(Value(\"a\")));",
          "    assert!(map.contains_key(&Key(1)) == false);",
          "    assert_eq!(map.get(&Key(2)), Some(&Value(\"b\")));",
          "    assert!(map.is_empty() == false);",
          "    assert!(map.capacity() > 0);",
          "    result = map.remove(&Key(1));",
          "    assert_eq!(result, None);",
          "    assert!(map.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(3), Value(\"c\"));",
          "    ",
          "    let result = map.remove(&Key(3)); // Q is Key",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Value(\"c\")));",
          "    assert!(map.contains_key(&Key(3)) == false);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(3), Value(\"c\"));",
          "    ",
          "    let result = map.remove(&Key(3)); // Q is Key",
          "    assert_eq!(result, Some(Value(\"c\")));",
          "    assert!(map.contains_key(&Key(3)) == false);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(4), Value(\"d\"));",
          "    map.insert(Key(5), Value(\"e\"));",
          "    ",
          "    let result = map.remove(&Key(4)); // Q is Key",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some(Value(\"d\")));"
        ],
        "code": [
          "{",
          "    struct Key(i32);",
          "    struct Value(&'static str);",
          "    ",
          "    let mut map = HashMap::new();",
          "    map.insert(Key(4), Value(\"d\"));",
          "    map.insert(Key(5), Value(\"e\"));",
          "    ",
          "    let result = map.remove(&Key(4)); // Q is Key",
          "    assert_eq!(result, Some(Value(\"d\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]