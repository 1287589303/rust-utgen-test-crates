[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut tags: [Tag; 1] = [Tag(0)];",
          "    let new_tag = Tag(100);",
          "    tags.fill_tag(new_tag);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tags[0], Tag(100));",
          "    assert_eq!(tags.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut tags: [Tag; 1] = [Tag(0)];",
          "    let new_tag = Tag(100);",
          "    tags.fill_tag(new_tag);",
          "    assert_eq!(tags[0], Tag(100));",
          "    assert_eq!(tags.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut tags: [Tag; 10] = [Tag(0); 10];",
          "    let new_tag = Tag(150);",
          "    tags.fill_tag(new_tag);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tags[0], Tag(150));",
          "    assert_eq!(tags[1], Tag(150));",
          "    assert_eq!(tags[2], Tag(150));",
          "    assert_eq!(tags[3], Tag(150));",
          "    assert_eq!(tags[4], Tag(150));",
          "    assert_eq!(tags[5], Tag(150));",
          "    assert_eq!(tags[6], Tag(150));",
          "    assert_eq!(tags[7], Tag(150));",
          "    assert_eq!(tags[8], Tag(150));",
          "    assert_eq!(tags[9], Tag(150));"
        ],
        "code": [
          "{",
          "    let mut tags: [Tag; 10] = [Tag(0); 10];",
          "    let new_tag = Tag(150);",
          "    tags.fill_tag(new_tag);",
          "    assert_eq!(tags[0], Tag(150));",
          "    assert_eq!(tags[1], Tag(150));",
          "    assert_eq!(tags[2], Tag(150));",
          "    assert_eq!(tags[3], Tag(150));",
          "    assert_eq!(tags[4], Tag(150));",
          "    assert_eq!(tags[5], Tag(150));",
          "    assert_eq!(tags[6], Tag(150));",
          "    assert_eq!(tags[7], Tag(150));",
          "    assert_eq!(tags[8], Tag(150));",
          "    assert_eq!(tags[9], Tag(150));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut tags: [Tag; 5] = [Tag(0); 5];",
          "    tags.fill_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tags, [Tag(0); 5]);",
          "    assert_eq!(tags[0].0, 0);",
          "    assert_eq!(tags[1].0, 0);",
          "    assert_eq!(tags[2].0, 0);",
          "    assert_eq!(tags[3].0, 0);",
          "    assert_eq!(tags[4].0, 0);"
        ],
        "code": [
          "{",
          "    let mut tags: [Tag; 5] = [Tag(0); 5];",
          "    tags.fill_empty();",
          "    assert_eq!(tags, [Tag(0); 5]);",
          "    assert_eq!(tags[0].0, 0);",
          "    assert_eq!(tags[1].0, 0);",
          "    assert_eq!(tags[2].0, 0);",
          "    assert_eq!(tags[3].0, 0);",
          "    assert_eq!(tags[4].0, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut tags: [Tag; 1] = [Tag(0)];",
          "    let new_tag = Tag(0);",
          "    tags.fill_tag(new_tag);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tags[0], Tag(0));",
          "    assert_eq!(tags.len(), 1);",
          "    assert!(tags.as_slice() == &[Tag(0)]);"
        ],
        "code": [
          "{",
          "    let mut tags: [Tag; 1] = [Tag(0)];",
          "    let new_tag = Tag(0);",
          "    tags.fill_tag(new_tag);",
          "    assert_eq!(tags[0], Tag(0));",
          "    assert_eq!(tags.len(), 1);",
          "    assert!(tags.as_slice() == &[Tag(0)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut tags: [Tag; 100] = [Tag(0); 100];",
          "    let new_tag = Tag(255);",
          "    tags.fill_tag(new_tag);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tags[0], Tag(255));",
          "    assert_eq!(tags[1], Tag(255));",
          "    assert_eq!(tags[99], Tag(255));",
          "    assert_eq!(tags.len(), 100);",
          "    assert_ne!(tags[50], Tag(0));"
        ],
        "code": [
          "{",
          "    let mut tags: [Tag; 100] = [Tag(0); 100];",
          "    let new_tag = Tag(255);",
          "    tags.fill_tag(new_tag);",
          "    assert_eq!(tags[0], Tag(255));",
          "    assert_eq!(tags[1], Tag(255));",
          "    assert_eq!(tags[99], Tag(255));",
          "    assert_eq!(tags.len(), 100);",
          "    assert_ne!(tags[50], Tag(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]