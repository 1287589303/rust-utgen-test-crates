[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(map.is_empty() == true);",
          "    let map_with_element: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map_with_element.insert(1, \"a\");",
          "    assert!(map_with_element.is_empty() == false);",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty() == true);",
          "    let non_empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    non_empty_map.insert(1, \"a\");",
          "    non_empty_map.insert(2, \"b\");",
          "    assert!(non_empty_map.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "    assert!(map.is_empty() == true);",
          "    let map_with_element: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    map_with_element.insert(1, \"a\");",
          "    assert!(map_with_element.is_empty() == false);",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty() == true);",
          "    let non_empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(2, DefaultHashBuilder::new(), Global);",
          "    non_empty_map.insert(1, \"a\");",
          "    non_empty_map.insert(2, \"b\");",
          "    assert!(non_empty_map.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, \"a\");",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(!map.is_empty());",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty());",
          "    let non_empty_map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    assert!(non_empty_map.is_empty());",
          "    non_empty_map.insert(2, \"b\");",
          "    assert!(!non_empty_map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, \"a\");",
          "    map.is_empty();",
          "    assert!(!map.is_empty());",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty());",
          "    let non_empty_map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    assert!(non_empty_map.is_empty());",
          "    non_empty_map.insert(2, \"b\");",
          "    assert!(!non_empty_map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, \"a\");",
          "    map.clear();",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(map.len() == 0);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, \"a\");",
          "    map.clear();",
          "    map.is_empty();",
          "    assert!(map.len() == 0);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert!(map.is_empty());",
          "    map.insert(1, \"a\");",
          "    assert!(!map.is_empty());",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty());",
          "    let non_empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    non_empty_map.insert(1, \"b\");",
          "    assert!(!non_empty_map.is_empty());"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "    assert!(map.is_empty());",
          "    map.insert(1, \"a\");",
          "    assert!(!map.is_empty());",
          "    let empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    assert!(empty_map.is_empty());",
          "    let non_empty_map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
          "    non_empty_map.insert(1, \"b\");",
          "    assert!(!non_empty_map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(1, \"a\");",
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    assert_eq!(map.is_empty(), false);",
          "    map.drain();",
          "    assert_eq!(map.is_empty(), true);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.is_empty();",
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(1, \"a\");",
          "    assert_eq!(map.is_empty(), false);",
          "    map.clear();",
          "    assert_eq!(map.is_empty(), true);",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    assert_eq!(map.is_empty(), false);",
          "    map.drain();",
          "    assert_eq!(map.is_empty(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]