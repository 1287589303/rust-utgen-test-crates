[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let iter: IntoIter<i32, TestAllocator> = Default::default();",
          "}"
        ],
        "oracle": [
          "    let iter: IntoIter<i32, TestAllocator> = Default::default();",
          "    assert_eq!(iter.inner, Default::default());",
          "    assert!(iter.allocation.is_none());",
          "    assert!(std::mem::size_of::<IntoIter<i32, TestAllocator>>() > 0);",
          "    assert!(std::mem::align_of::<IntoIter<i32, TestAllocator>>() > 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let iter: IntoIter<i32, TestAllocator> = Default::default();",
          "    let iter: IntoIter<i32, TestAllocator> = Default::default();",
          "    assert_eq!(iter.inner, Default::default());",
          "    assert!(iter.allocation.is_none());",
          "    assert!(std::mem::size_of::<IntoIter<i32, TestAllocator>>() > 0);",
          "    assert!(std::mem::align_of::<IntoIter<i32, TestAllocator>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: IntoIter<()> = Default::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.inner, Default::default());",
          "    assert!(matches!(iter.inner, RawIntoIter { .. }));",
          "    assert!(iter.allocation.is_none());",
          "    assert!(iter.marker == PhantomData::<()>);"
        ],
        "code": [
          "{",
          "    let iter: IntoIter<()> = Default::default();",
          "    assert_eq!(iter.inner, Default::default());",
          "    assert!(matches!(iter.inner, RawIntoIter { .. }));",
          "    assert!(iter.allocation.is_none());",
          "    assert!(iter.marker == PhantomData::<()>);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]