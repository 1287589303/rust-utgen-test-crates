[
  {
    "uses": [
      "use hashbrown::DefaultHashBuilder;",
      "use hashbrown::HashTable;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", entry), \"Entry(Entry::Vacant(...))\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(!matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "    assert_eq!(format!(\"{:?}\", entry), \"Entry(Entry::Vacant(...))\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(!matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"another_key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"Entry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"Vacant\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"another_key\"), true);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"another_key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"Entry\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"Vacant\"), true);",
          "    assert_eq!(format!(\"{:?}\", entry).contains(\"another_key\"), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"empty_key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(format!(\"{:?}\", entry), \"Entry(Vacant(...))\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(!matches!(entry, Entry::Occupied(_)));",
          "    assert!(format!(\"{:?}\", entry).contains(\"Vacant\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"Entry\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    ",
          "    let mut table: HashTable<&str, i32> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    let entry_key = hasher.hash_one(&\"empty_key\");",
          "    let vacant_entry = table.vacant_entry(entry_key);",
          "    ",
          "    let entry = Entry::Vacant(vacant_entry);",
          "    ",
          "    let _ = format!(\"{:?}\", entry);",
          "    assert_eq!(format!(\"{:?}\", entry), \"Entry(Vacant(...))\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert!(!matches!(entry, Entry::Occupied(_)));",
          "    assert!(format!(\"{:?}\", entry).contains(\"Vacant\"));",
          "    assert!(format!(\"{:?}\", entry).contains(\"Entry\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]