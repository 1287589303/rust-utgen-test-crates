[
  {
    "uses": [
      "use hashbrown::HashTable;",
      "use hashbrown::DefaultHashBuilder;",
      "use std::hash::BuildHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str, &str, DefaultHashBuilder> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    table.insert(\"key1\", \"value1\");",
          "    ",
          "    let occupied_entry = match table.entry(\"key1\", |&x| x == \"key1\", hasher) {",
          "        Entry::Occupied(o) => o,",
          "        _ => panic!(\"Expected occupied entry\"),",
          "    };",
          "",
          "    let _ = occupied_entry.fmt(&mut core::fmt::Formatter::new());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(occupied_entry.hash, hasher(\"key1\"));",
          "    assert_eq!(occupied_entry.elem.key(), &(\"key1\", \"value1\"));",
          "    assert_eq!(occupied_entry.table, &mut table);",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Entry\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Occupied\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<&str, &str, DefaultHashBuilder> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    ",
          "    table.insert(\"key1\", \"value1\");",
          "    ",
          "    let occupied_entry = match table.entry(\"key1\", |&x| x == \"key1\", hasher) {",
          "        Entry::Occupied(o) => o,",
          "        _ => panic!(\"Expected occupied entry\"),",
          "    };",
          "",
          "    let _ = occupied_entry.fmt(&mut core::fmt::Formatter::new());",
          "    assert_eq!(occupied_entry.hash, hasher(\"key1\"));",
          "    assert_eq!(occupied_entry.elem.key(), &(\"key1\", \"value1\"));",
          "    assert_eq!(occupied_entry.table, &mut table);",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Entry\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Occupied\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]