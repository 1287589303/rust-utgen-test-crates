[
  {
    "uses": [
      "use hashbrown::DefaultHashBuilder;",
      "use std::hash::BuildHasher;",
      "use hashbrown::HashTable;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 0..=3 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    let drained: Vec<_> = table.drain().collect();",
          "    ",
          "    assert!(!table.is_empty());",
          "    assert_eq!(drained.len(), 4);",
          "    assert!(table.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert!(!table.is_empty());",
          "    assert_eq!(drained.len(), 4);",
          "    assert!(table.is_empty());",
          "    let drained_inner = table.raw.drain();",
          "    assert_eq!(drained_inner.inner, self.raw.drain());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    for x in 0..=3 {",
          "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
          "    }",
          "    ",
          "    let drained: Vec<_> = table.drain().collect();",
          "    ",
          "    assert!(!table.is_empty());",
          "    assert_eq!(drained.len(), 4);",
          "    assert!(table.is_empty());",
          "    assert!(!table.is_empty());",
          "    assert_eq!(drained.len(), 4);",
          "    assert!(table.is_empty());",
          "    let drained_inner = table.raw.drain();",
          "    assert_eq!(drained_inner.inner, self.raw.drain());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashTable;",
          "",
          "    let mut table: HashTable<i32> = HashTable::new();",
          "    let drained: Vec<_> = table.drain().collect();",
          "    ",
          "    assert_eq!(drained.len(), 0);",
          "    assert!(table.is_empty());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(drained.len(), 0);",
          "    assert!(table.is_empty());",
          "    let drained: Vec<_> = table.drain().collect();",
          "    let drain_result = table.drain();",
          "    assert!(drain_result.inner.is_empty());"
        ],
        "code": [
          "{",
          "    use hashbrown::HashTable;",
          "",
          "    let mut table: HashTable<i32> = HashTable::new();",
          "    let drained: Vec<_> = table.drain().collect();",
          "    ",
          "    assert_eq!(drained.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(drained.len(), 0);",
          "    assert!(table.is_empty());",
          "    let drained: Vec<_> = table.drain().collect();",
          "    let drain_result = table.drain();",
          "    assert!(drain_result.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]