[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: hashbrown::HashMap<String, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 3);",
          "    ",
          "    // Create an EntryRef::Occupied variant",
          "    let entry_ref = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entry",
          "    let value_mut_ref = entry_ref.or_insert(10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*value_mut_ref, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(value_mut_ref, &mut map[\"poneyland\"]);",
          "    assert_eq!(*value_mut_ref, 3);"
        ],
        "code": [
          "{",
          "    let mut map: hashbrown::HashMap<String, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 3);",
          "    ",
          "    // Create an EntryRef::Occupied variant",
          "    let entry_ref = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entry",
          "    let value_mut_ref = entry_ref.or_insert(10);",
          "    assert_eq!(*value_mut_ref, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    assert_eq!(map.len(), 1);",
          "    assert_eq!(value_mut_ref, &mut map[\"poneyland\"]);",
          "    assert_eq!(*value_mut_ref, 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: hashbrown::HashMap<String, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 5);",
          "    map.insert(\"rainbowland\".to_string(), 7);",
          "    ",
          "    // Create EntryRef::Occupied variants",
          "    let entry_ref_poneyland = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "    let entry_ref_rainbowland = {",
          "        let key: &str = \"rainbowland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entries",
          "    let value_mut_ref_poneyland = entry_ref_poneyland.or_insert(10);",
          "    let value_mut_ref_rainbowland = entry_ref_rainbowland.or_insert(12);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*value_mut_ref_poneyland, 5);",
          "    assert_eq!(*value_mut_ref_rainbowland, 7);",
          "    assert_eq!(map[\"poneyland\"], 5);",
          "    assert_eq!(map[\"rainbowland\"], 7);",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: hashbrown::HashMap<String, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 5);",
          "    map.insert(\"rainbowland\".to_string(), 7);",
          "    ",
          "    // Create EntryRef::Occupied variants",
          "    let entry_ref_poneyland = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "    let entry_ref_rainbowland = {",
          "        let key: &str = \"rainbowland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entries",
          "    let value_mut_ref_poneyland = entry_ref_poneyland.or_insert(10);",
          "    let value_mut_ref_rainbowland = entry_ref_rainbowland.or_insert(12);",
          "    assert_eq!(*value_mut_ref_poneyland, 5);",
          "    assert_eq!(*value_mut_ref_rainbowland, 7);",
          "    assert_eq!(map[\"poneyland\"], 5);",
          "    assert_eq!(map[\"rainbowland\"], 7);",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: hashbrown::HashMap<String, i32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 3);",
          "    ",
          "    // Create EntryRef::Occupied variant",
          "    let entry_ref = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entry with a different value",
          "    let value_mut_ref = entry_ref.or_insert(6);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*value_mut_ref, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    let value_mut_ref2 = entry_ref.or_insert(10);",
          "    assert_eq!(*value_mut_ref2, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    *value_mut_ref2 *= 2;",
          "    assert_eq!(map[\"poneyland\"], 6);",
          "    let value_mut_ref3 = entry_ref.or_insert(6);",
          "    assert_eq!(*value_mut_ref3, 6);",
          "    assert_eq!(map[\"poneyland\"], 6);"
        ],
        "code": [
          "{",
          "    let mut map: hashbrown::HashMap<String, i32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\".to_string(), 3);",
          "    ",
          "    // Create EntryRef::Occupied variant",
          "    let entry_ref = {",
          "        let key: &str = \"poneyland\";",
          "        map.entry_ref(key)",
          "    };",
          "",
          "    // Call or_insert on the occupied entry with a different value",
          "    let value_mut_ref = entry_ref.or_insert(6);",
          "    assert_eq!(*value_mut_ref, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    let value_mut_ref2 = entry_ref.or_insert(10);",
          "    assert_eq!(*value_mut_ref2, 3);",
          "    assert_eq!(map[\"poneyland\"], 3);",
          "    *value_mut_ref2 *= 2;",
          "    assert_eq!(map[\"poneyland\"], 6);",
          "    let value_mut_ref3 = entry_ref.or_insert(6);",
          "    assert_eq!(*value_mut_ref3, 6);",
          "    assert_eq!(map[\"poneyland\"], 6);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]