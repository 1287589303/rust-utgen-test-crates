[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 0);",
          "    assert!(cap >= 0);",
          "    assert!(cap < usize::MAX);"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "    assert_eq!(cap, 0);",
          "    assert!(cap >= 0);",
          "    assert!(cap < usize::MAX);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 1);",
          "    assert!(cap >= 1);",
          "    let map_large: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(100, DefaultHashBuilder, Global);",
          "    let large_cap = map_large.capacity();",
          "    assert!(large_cap >= 100);",
          "    let map_empty: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    let empty_cap = map_empty.capacity();",
          "    assert_eq!(empty_cap, 0);",
          "    let map_zero: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder, Global);",
          "    map_zero.clear();",
          "    let zero_cap = map_zero.capacity();",
          "    assert_eq!(zero_cap, 1);"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "    assert_eq!(cap, 1);",
          "    assert!(cap >= 1);",
          "    let map_large: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(100, DefaultHashBuilder, Global);",
          "    let large_cap = map_large.capacity();",
          "    assert!(large_cap >= 100);",
          "    let map_empty: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    let empty_cap = map_empty.capacity();",
          "    assert_eq!(empty_cap, 0);",
          "    let map_zero: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder, Global);",
          "    map_zero.clear();",
          "    let zero_cap = map_zero.capacity();",
          "    assert_eq!(zero_cap, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(cap, 10);",
          "    assert!(cap >= 10);",
          "    assert!(cap > 0);",
          "    let map_empty: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    assert_eq!(map_empty.capacity(), 0);",
          "    let map_large: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1000, DefaultHashBuilder, Global);",
          "    assert!(map_large.capacity() >= 1000);"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "    assert_eq!(cap, 10);",
          "    assert!(cap >= 10);",
          "    assert!(cap > 0);",
          "    let map_empty: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder, Global);",
          "    assert_eq!(map_empty.capacity(), 0);",
          "    let map_large: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(1000, DefaultHashBuilder, Global);",
          "    assert!(map_large.capacity() >= 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(usize::MAX, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert!(cap >= usize::MAX);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.values_mut().count() == 0);",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.iter_mut().count() == 0);"
        ],
        "code": [
          "{",
          "    let map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(usize::MAX, DefaultHashBuilder, Global);",
          "    let cap = map.capacity();",
          "    assert!(cap >= usize::MAX);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert!(map.keys().count() == 0);",
          "    assert!(map.values().count() == 0);",
          "    assert!(map.values_mut().count() == 0);",
          "    assert!(map.iter().count() == 0);",
          "    assert!(map.iter_mut().count() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]