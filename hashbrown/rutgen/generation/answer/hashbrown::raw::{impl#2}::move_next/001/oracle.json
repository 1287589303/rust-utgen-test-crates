[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 10 };",
          "    let bucket_mask = 10; // self.stride == bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 20);",
          "    assert!((0..=bucket_mask).contains(&probe_seq.pos));",
          "    assert!(probe_seq.stride > 10);"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 10 };",
          "    let bucket_mask = 10; // self.stride == bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 20);",
          "    assert!((0..=bucket_mask).contains(&probe_seq.pos));",
          "    assert!(probe_seq.stride > 10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 0 };",
          "    let bucket_mask = 0; // self.stride <= bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    debug_assert!(probe_seq.stride <= bucket_mask, \"Stride should be equal to bucket_mask\");",
          "    debug_assert_eq!(probe_seq.stride, Group::WIDTH);",
          "    debug_assert_eq!(probe_seq.pos, Group::WIDTH);",
          "    debug_assert_eq!(probe_seq.pos & bucket_mask, 0);"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 0 };",
          "    let bucket_mask = 0; // self.stride <= bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "    debug_assert!(probe_seq.stride <= bucket_mask, \"Stride should be equal to bucket_mask\");",
          "    debug_assert_eq!(probe_seq.stride, Group::WIDTH);",
          "    debug_assert_eq!(probe_seq.pos, Group::WIDTH);",
          "    debug_assert_eq!(probe_seq.pos & bucket_mask, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 5, stride: 5 };",
          "    let bucket_mask = 5; // self.stride == bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 10);",
          "    assert!(probe_seq.stride > bucket_mask);",
          "    assert!(probe_seq.pos <= bucket_mask);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 0);"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 5, stride: 5 };",
          "    let bucket_mask = 5; // self.stride == bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 10);",
          "    assert!(probe_seq.stride > bucket_mask);",
          "    assert!(probe_seq.pos <= bucket_mask);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 2, stride: 2 };",
          "    let bucket_mask = 10; // self.stride < bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(probe_seq.stride, 12);",
          "    assert_eq!(probe_seq.pos, 4);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 4);",
          "    assert!(probe_seq.stride <= bucket_mask + Group::WIDTH);"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 2, stride: 2 };",
          "    let bucket_mask = 10; // self.stride < bucket_mask",
          "    probe_seq.move_next(bucket_mask);",
          "    assert_eq!(probe_seq.stride, 12);",
          "    assert_eq!(probe_seq.pos, 4);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 4);",
          "    assert!(probe_seq.stride <= bucket_mask + Group::WIDTH);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]