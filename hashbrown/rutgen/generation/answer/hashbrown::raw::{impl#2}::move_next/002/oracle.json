[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 10 }; // striding greater than bucket_mask",
          "    let bucket_mask = 5; // bucket_mask is less than stride",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    debug_assert!(probe_seq.stride > bucket_mask, \"Stride should be greater than bucket_mask to trigger panic\");",
          "    assert!(std::panic::catch_unwind(|| probe_seq.move_next(bucket_mask)).is_err(), \"Expected panic when stride is greater than bucket_mask\");"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 10 }; // striding greater than bucket_mask",
          "    let bucket_mask = 5; // bucket_mask is less than stride",
          "    probe_seq.move_next(bucket_mask);",
          "    debug_assert!(probe_seq.stride > bucket_mask, \"Stride should be greater than bucket_mask to trigger panic\");",
          "    assert!(std::panic::catch_unwind(|| probe_seq.move_next(bucket_mask)).is_err(), \"Expected panic when stride is greater than bucket_mask\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 5 }; // striding equal to bucket_mask",
          "    let bucket_mask = 5; // bucket_mask is equal to stride",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    debug_assert!(probe_seq.stride <= bucket_mask, \"Went past end of probe sequence\");",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 5 + Group::WIDTH);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 0);",
          "    assert!(std::panic::catch_unwind(|| { probe_seq.move_next(bucket_mask); }).is_err());"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 5 }; // striding equal to bucket_mask",
          "    let bucket_mask = 5; // bucket_mask is equal to stride",
          "    probe_seq.move_next(bucket_mask);",
          "    debug_assert!(probe_seq.stride <= bucket_mask, \"Went past end of probe sequence\");",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 5 + Group::WIDTH);",
          "    assert_eq!(probe_seq.pos & bucket_mask, 0);",
          "    assert!(std::panic::catch_unwind(|| { probe_seq.move_next(bucket_mask); }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 100 }; // striding much greater than bucket_mask",
          "    let bucket_mask = 50; // bucket_mask is less than stride",
          "    probe_seq.move_next(bucket_mask);",
          "}"
        ],
        "oracle": [
          "    debug_assert!(probe_seq.stride > bucket_mask);",
          "    assert!(std::panic::catch_unwind(|| probe_seq.move_next(bucket_mask)).is_err());",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 100);"
        ],
        "code": [
          "{",
          "    let mut probe_seq = ProbeSeq { pos: 0, stride: 100 }; // striding much greater than bucket_mask",
          "    let bucket_mask = 50; // bucket_mask is less than stride",
          "    probe_seq.move_next(bucket_mask);",
          "    debug_assert!(probe_seq.stride > bucket_mask);",
          "    assert!(std::panic::catch_unwind(|| probe_seq.move_next(bucket_mask)).is_err());",
          "    assert_eq!(probe_seq.pos, 0);",
          "    assert_eq!(probe_seq.stride, 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]