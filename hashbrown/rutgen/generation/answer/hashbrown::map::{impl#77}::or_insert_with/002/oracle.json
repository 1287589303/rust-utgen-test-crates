[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: hashbrown::HashMap<&str, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\", 3);",
          "",
          "    let entry = map.entry(\"poneyland\");",
          "    entry.or_insert_with(|| 10);",
          "",
          "    let value = entry.into_mut();",
          "    *value *= 2;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"poneyland\"], 6);",
          "    let entry = map.entry(\"poneyland\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let value = entry.or_insert_with(|| 10);",
          "    assert_eq!(*value, 6);",
          "    let entry = map.entry(\"not_exist\");",
          "    let value = entry.or_insert_with(|| 3);",
          "    assert_eq!(*value, 3);",
          "    assert!(matches!(entry, Entry::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map: hashbrown::HashMap<&str, u32> = hashbrown::HashMap::new();",
          "    map.insert(\"poneyland\", 3);",
          "",
          "    let entry = map.entry(\"poneyland\");",
          "    entry.or_insert_with(|| 10);",
          "",
          "    let value = entry.into_mut();",
          "    *value *= 2;",
          "    assert_eq!(map[\"poneyland\"], 6);",
          "    let entry = map.entry(\"poneyland\");",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let value = entry.or_insert_with(|| 10);",
          "    assert_eq!(*value, 6);",
          "    let entry = map.entry(\"not_exist\");",
          "    let value = entry.or_insert_with(|| 3);",
          "    assert_eq!(*value, 3);",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: hashbrown::HashMap<i32, String> = hashbrown::HashMap::new();",
          "    map.insert(1, \"hello\".to_string());",
          "",
          "    let entry = map.entry(1);",
          "    entry.or_insert_with(|| \"world\".to_string());",
          "",
          "    let value = entry.into_mut();",
          "    value.push_str(\", Rust!\");",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(map.entry(1), Entry::Occupied(_)));",
          "    assert_eq!(map[&1], \"hello, Rust!\");",
          "    assert_eq!(entry.get(), &\"hello, Rust!\");",
          "    assert_eq!(entry.key(), &1);"
        ],
        "code": [
          "{",
          "    let mut map: hashbrown::HashMap<i32, String> = hashbrown::HashMap::new();",
          "    map.insert(1, \"hello\".to_string());",
          "",
          "    let entry = map.entry(1);",
          "    entry.or_insert_with(|| \"world\".to_string());",
          "",
          "    let value = entry.into_mut();",
          "    value.push_str(\", Rust!\");",
          "    assert!(matches!(map.entry(1), Entry::Occupied(_)));",
          "    assert_eq!(map[&1], \"hello, Rust!\");",
          "    assert_eq!(entry.get(), &\"hello, Rust!\");",
          "    assert_eq!(entry.key(), &1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]