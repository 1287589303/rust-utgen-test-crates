[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"missing_key\");",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"missing_key\");",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"missing_key\");",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"missing_key\");",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(&42);",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(&42);",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(&\"non_existent_key\".to_string());",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(&\"non_existent_key\".to_string());",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, f64> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"absent_key\");",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, f64> = HashMap::new();",
          "    let entry = map.raw_entry_mut().from_key(\"absent_key\");",
          "    let result = entry.and_modify(|_k, _v| { /* no-op */ });",
          "    assert!(matches!(result, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]