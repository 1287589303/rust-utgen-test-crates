[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use std::hash::BuildHasherDefault;",
      "use hashbrown::HashMap;",
      "use std::collections::hash_map::DefaultHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::DefaultHasher;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 41);",
          "",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: Bucket::new(&(map[\"poneyland\"], 41)),",
          "        table: &mut map.raw_table,",
          "        hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "",
          "    entry.and_modify(|_k, v| {",
          "        *v += 1;",
          "    });",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 41);",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 41)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let modified_entry = entry.and_modify(|_k, v| {",
          "    *v += 1;",
          "    });",
          "    assert!(matches!(modified_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(map[\"poneyland\"], 42);",
          "    entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 42)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let modified_entry = entry.and_modify(|_k, v| {",
          "    *v += 1;",
          "    });",
          "    assert!(matches!(modified_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(map[\"poneyland\"], 43);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::DefaultHasher;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 41);",
          "",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: Bucket::new(&(map[\"poneyland\"], 41)),",
          "        table: &mut map.raw_table,",
          "        hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "",
          "    entry.and_modify(|_k, v| {",
          "        *v += 1;",
          "    });",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 41);",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 41)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let modified_entry = entry.and_modify(|_k, v| {",
          "    *v += 1;",
          "    });",
          "    assert!(matches!(modified_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(map[\"poneyland\"], 42);",
          "    entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 42)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let modified_entry = entry.and_modify(|_k, v| {",
          "    *v += 1;",
          "    });",
          "    assert!(matches!(modified_entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(map[\"poneyland\"], 43);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::DefaultHasher;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 10);",
          "    ",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: Bucket::new(&(map[\"poneyland\"], 10)),",
          "        table: &mut map.raw_table,",
          "        hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "",
          "    entry.and_modify(|_k, v| {",
          "        *v += 5;",
          "    });",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 10);",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 10)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let expected_value = 15;",
          "    entry.and_modify(|_k, v| { *v += 5; });",
          "    assert_eq!(map[\"poneyland\"], expected_value);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::DefaultHasher;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 10);",
          "    ",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "        elem: Bucket::new(&(map[\"poneyland\"], 10)),",
          "        table: &mut map.raw_table,",
          "        hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "",
          "    entry.and_modify(|_k, v| {",
          "        *v += 5;",
          "    });",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 10);",
          "    let mut entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
          "    elem: Bucket::new(&(map[\"poneyland\"], 10)),",
          "    table: &mut map.raw_table,",
          "    hash_builder: &BuildHasherDefault::<DefaultHasher>::default(),",
          "    });",
          "    let expected_value = 15;",
          "    entry.and_modify(|_k, v| { *v += 5; });",
          "    assert_eq!(map[\"poneyland\"], expected_value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]