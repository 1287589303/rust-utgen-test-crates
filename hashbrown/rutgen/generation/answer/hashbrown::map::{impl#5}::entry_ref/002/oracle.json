[
  {
    "uses": [
      "use std::hash::Hasher;",
      "use hashbrown::HashMap;",
      "use std::collections::hash_map::DefaultHasher;",
      "use std::hash::Hash;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "    use hashbrown::HashMap;",
          "",
          "    struct Key(String);",
          "",
          "    impl Hash for Key {",
          "        fn hash<H: Hasher>(&self, state: &mut H) {",
          "            self.0.hash(state);",
          "        }",
          "    }",
          "",
          "    impl PartialEq for Key {",
          "        fn eq(&self, other: &Self) -> bool {",
          "            self.0 == other.0",
          "        }",
          "    }",
          "",
          "    impl Eq for Key {}",
          "",
          "    impl Equivalent<Key> for Key {",
          "        fn equivalent(&self, other: &Key) -> bool {",
          "            self.eq(other)",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<Key, usize, DefaultHasher> = HashMap::new();",
          "    ",
          "    let key = Key(\"test_key\".to_string());",
          "    map.insert(key.clone(), 42);",
          "",
          "    let entry_ref = map.entry_ref(&key);",
          "    // Calling the function to test it without asserting.",
          "    // The function will return EntryRef::Occupied since the map already contains the key.",
          "    let _ = entry_ref;",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry_ref, EntryRef::Occupied(_)));",
          "    assert_eq!(entry_ref.hash, make_hash::<Key, _>(&map.hash_builder, &key));",
          "    assert!(entry_ref.table.contains_key(&key));",
          "    assert_eq!(entry_ref.elem.ptr.as_ref(), &(key, 42));"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "    use hashbrown::HashMap;",
          "",
          "    struct Key(String);",
          "",
          "    impl Hash for Key {",
          "        fn hash<H: Hasher>(&self, state: &mut H) {",
          "            self.0.hash(state);",
          "        }",
          "    }",
          "",
          "    impl PartialEq for Key {",
          "        fn eq(&self, other: &Self) -> bool {",
          "            self.0 == other.0",
          "        }",
          "    }",
          "",
          "    impl Eq for Key {}",
          "",
          "    impl Equivalent<Key> for Key {",
          "        fn equivalent(&self, other: &Key) -> bool {",
          "            self.eq(other)",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<Key, usize, DefaultHasher> = HashMap::new();",
          "    ",
          "    let key = Key(\"test_key\".to_string());",
          "    map.insert(key.clone(), 42);",
          "",
          "    let entry_ref = map.entry_ref(&key);",
          "    // Calling the function to test it without asserting.",
          "    // The function will return EntryRef::Occupied since the map already contains the key.",
          "    let _ = entry_ref;",
          "    assert!(matches!(entry_ref, EntryRef::Occupied(_)));",
          "    assert_eq!(entry_ref.hash, make_hash::<Key, _>(&map.hash_builder, &key));",
          "    assert!(entry_ref.table.contains_key(&key));",
          "    assert_eq!(entry_ref.elem.ptr.as_ref(), &(key, 42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]