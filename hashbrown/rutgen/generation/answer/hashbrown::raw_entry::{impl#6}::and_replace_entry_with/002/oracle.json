[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 42);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"poneyland\")",
          "        .and_replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"poneyland\");",
          "            assert_eq!(v, 42);",
          "            Some(v + 1)",
          "        });",
          "",
          "    match entry {",
          "        RawEntryMut::Occupied(e) => {",
          "            assert_eq!(e.key(), &\"poneyland\");",
          "            assert_eq!(e.get(), &43);",
          "        },",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"poneyland\"], 43);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"poneyland\"));",
          "    assert_eq!(map[\"poneyland\"], 43);",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"poneyland\"); assert_eq!(v, 43); Some(v + 1) });",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 42);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"poneyland\")",
          "        .and_replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"poneyland\");",
          "            assert_eq!(v, 42);",
          "            Some(v + 1)",
          "        });",
          "",
          "    match entry {",
          "        RawEntryMut::Occupied(e) => {",
          "            assert_eq!(e.key(), &\"poneyland\");",
          "            assert_eq!(e.get(), &43);",
          "        },",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"poneyland\"], 43);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.contains_key(\"poneyland\"));",
          "    assert_eq!(map[\"poneyland\"], 43);",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"poneyland\"); assert_eq!(v, 43); Some(v + 1) });",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 42);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"poneyland\")",
          "        .and_replace_entry_with(|_k, _v| None);",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert!(!map.contains_key(\"poneyland\"));",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_vacant());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"poneyland\"), None);",
          "    assert!(!map.contains_key(\"poneyland\"));",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\");",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    let new_entry = entry.and_replace_entry_with(|_k, _v| Some(100));",
          "    assert!(matches!(new_entry, RawEntryMut::Occupied(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 42);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"poneyland\")",
          "        .and_replace_entry_with(|_k, _v| None);",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert!(!map.contains_key(\"poneyland\"));",
          "    assert!(entry.is_vacant());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.get(\"poneyland\"), None);",
          "    assert!(!map.contains_key(\"poneyland\"));",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\");",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    let new_entry = entry.and_replace_entry_with(|_k, _v| Some(100));",
          "    assert!(matches!(new_entry, RawEntryMut::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"non_existent\")",
          "        .and_replace_entry_with(|_k, _v| panic!());",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.raw_entry_mut().from_key(\"poneyland\").is_vacant());",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|k, v| Some(v + 1));",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(entry.key(), &\"poneyland\");",
          "    assert_eq!(entry.get(), &43);",
          "    assert!(map.contains_key(\"poneyland\"));",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|_k, _v| None);",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::RawEntryMut;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"non_existent\")",
          "        .and_replace_entry_with(|_k, _v| panic!());",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert!(map.raw_entry_mut().from_key(\"poneyland\").is_vacant());",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|k, v| Some(v + 1));",
          "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
          "    assert_eq!(entry.key(), &\"poneyland\");",
          "    assert_eq!(entry.get(), &43);",
          "    assert!(map.contains_key(\"poneyland\"));",
          "    let entry = map.raw_entry_mut().from_key(\"poneyland\").and_replace_entry_with(|_k, _v| None);",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]