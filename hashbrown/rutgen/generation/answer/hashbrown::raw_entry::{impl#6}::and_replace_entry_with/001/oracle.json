[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"not_here\")",
          "        .and_replace_entry_with(|_k, _v| Some(42)); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(!map.contains_key(\"not_here\"));",
          "    assert_eq!(entry.and_replace_entry_with(|k, v| Some(42)), entry);"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"not_here\")",
          "        .and_replace_entry_with(|_k, _v| Some(42)); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(!map.contains_key(\"not_here\"));",
          "    assert_eq!(entry.and_replace_entry_with(|k, v| Some(42)), entry);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    map.insert(\"existing_key\", 100);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"non_existing_key\")",
          "        .and_replace_entry_with(|_k, _v| None); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(entry.is_vacant());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.contains_key(\"non_existing_key\"));",
          "    assert_eq!(map.get(\"existing_key\"), Some(&100));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    map.insert(\"existing_key\", 100);",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"non_existing_key\")",
          "        .and_replace_entry_with(|_k, _v| None); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert!(entry.is_vacant());",
          "    assert_eq!(map.len(), 1);",
          "    assert!(!map.contains_key(\"non_existing_key\"));",
          "    assert_eq!(map.get(\"existing_key\"), Some(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"missing_key\")",
          "        .and_replace_entry_with(|_k, _v| Some(999)); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.raw_entry_mut().from_key(\"missing_key\"), RawEntryMut::Vacant(_));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(!map.contains_key(\"missing_key\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "",
          "    let entry = map",
          "        .raw_entry_mut()",
          "        .from_key(\"missing_key\")",
          "        .and_replace_entry_with(|_k, _v| Some(999)); // should remain vacant",
          "",
          "    match entry {",
          "        RawEntryMut::Vacant(_) => {},",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "    assert_eq!(map.raw_entry_mut().from_key(\"missing_key\"), RawEntryMut::Vacant(_));",
          "    assert_eq!(map.len(), 0);",
          "    assert!(!map.contains_key(\"missing_key\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]