[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    #[derive(Debug)]",
          "    struct TestKey;",
          "    ",
          "    #[derive(Debug)]",
          "    struct TestValue;",
          "",
          "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "    ",
          "    test_table.insert(key, value);",
          "    let occupied_entry = OccupiedEntry {",
          "        hash: 0,",
          "        elem: Bucket::new((TestKey, TestValue)),",
          "        table: &mut test_table,",
          "    };",
          "    ",
          "    let occupied_error = OccupiedError {",
          "        entry: occupied_entry,",
          "        value: TestValue,",
          "    };",
          "",
          "    let _ = format!(\"{:?}\", occupied_error);",
          "}"
        ],
        "oracle": [
          "    let test_allocator = TestAllocator{};",
          "    let key = TestKey{};",
          "    let value = TestValue{};",
          "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
          "    test_table.insert(key, value);",
          "    let occupied_entry = OccupiedEntry {",
          "    hash: 0,",
          "    elem: Bucket::new((TestKey, TestValue)),",
          "    table: &mut test_table,",
          "    };",
          "    let occupied_error = OccupiedError {",
          "    entry: occupied_entry,",
          "    value: TestValue,",
          "    };",
          "    let debug_output = format!(\"{:?}\", occupied_error);",
          "    assert!(debug_output.contains(\"OccupiedError\"));",
          "    assert!(debug_output.contains(\"key: TestKey\"));",
          "    assert!(debug_output.contains(\"old_value: TestValue\"));",
          "    assert!(debug_output.contains(\"new_value: TestValue\"));"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    #[derive(Debug)]",
          "    struct TestKey;",
          "    ",
          "    #[derive(Debug)]",
          "    struct TestValue;",
          "",
          "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
          "    let key = TestKey;",
          "    let value = TestValue;",
          "    ",
          "    test_table.insert(key, value);",
          "    let occupied_entry = OccupiedEntry {",
          "        hash: 0,",
          "        elem: Bucket::new((TestKey, TestValue)),",
          "        table: &mut test_table,",
          "    };",
          "    ",
          "    let occupied_error = OccupiedError {",
          "        entry: occupied_entry,",
          "        value: TestValue,",
          "    };",
          "",
          "    let _ = format!(\"{:?}\", occupied_error);",
          "    let test_allocator = TestAllocator{};",
          "    let key = TestKey{};",
          "    let value = TestValue{};",
          "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
          "    test_table.insert(key, value);",
          "    let occupied_entry = OccupiedEntry {",
          "    hash: 0,",
          "    elem: Bucket::new((TestKey, TestValue)),",
          "    table: &mut test_table,",
          "    };",
          "    let occupied_error = OccupiedError {",
          "    entry: occupied_entry,",
          "    value: TestValue,",
          "    };",
          "    let debug_output = format!(\"{:?}\", occupied_error);",
          "    assert!(debug_output.contains(\"OccupiedError\"));",
          "    assert!(debug_output.contains(\"key: TestKey\"));",
          "    assert!(debug_output.contains(\"old_value: TestValue\"));",
          "    assert!(debug_output.contains(\"new_value: TestValue\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]