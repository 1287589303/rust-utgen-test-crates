[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DefaultKey;",
          "    struct DefaultValue;",
          "    ",
          "    impl Default for DefaultKey {",
          "        fn default() -> Self { DefaultKey }",
          "    }",
          "",
          "    impl Default for DefaultValue {",
          "        fn default() -> Self { DefaultValue }",
          "    }",
          "",
          "    let _: IntoKeys<DefaultKey, DefaultValue> = IntoKeys::default();",
          "}"
        ],
        "oracle": [
          "    let _: IntoKeys<DefaultKey, DefaultValue> = IntoKeys::default();",
          "    let inner_default: RawIntoIter<(DefaultKey, DefaultValue), Global> = Default::default();",
          "    assert_eq!(IntoKeys::default().inner, inner_default);",
          "    assert!(std::mem::size_of::<IntoKeys<DefaultKey, DefaultValue>>() > 0);",
          "    assert!(IntoKeys::default().inner.is_empty());"
        ],
        "code": [
          "{",
          "    struct DefaultKey;",
          "    struct DefaultValue;",
          "    ",
          "    impl Default for DefaultKey {",
          "        fn default() -> Self { DefaultKey }",
          "    }",
          "",
          "    impl Default for DefaultValue {",
          "        fn default() -> Self { DefaultValue }",
          "    }",
          "",
          "    let _: IntoKeys<DefaultKey, DefaultValue> = IntoKeys::default();",
          "    let _: IntoKeys<DefaultKey, DefaultValue> = IntoKeys::default();",
          "    let inner_default: RawIntoIter<(DefaultKey, DefaultValue), Global> = Default::default();",
          "    assert_eq!(IntoKeys::default().inner, inner_default);",
          "    assert!(std::mem::size_of::<IntoKeys<DefaultKey, DefaultValue>>() > 0);",
          "    assert!(IntoKeys::default().inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct EmptyKey;",
          "    struct EmptyValue;",
          "    ",
          "    impl Default for EmptyKey {",
          "        fn default() -> Self { EmptyKey }",
          "    }",
          "",
          "    impl Default for EmptyValue {",
          "        fn default() -> Self { EmptyValue }",
          "    }",
          " ",
          "    let _: IntoKeys<EmptyKey, EmptyValue> = IntoKeys::default();",
          "}"
        ],
        "oracle": [
          "    let result: IntoKeys<EmptyKey, EmptyValue> = IntoKeys::default();",
          "    assert_eq!(result.inner, Default::default());",
          "    assert!(result.inner.is_empty());",
          "    assert!(result.inner.len() == 0);",
          "    assert!(result.inner.capacity() > 0);"
        ],
        "code": [
          "{",
          "    struct EmptyKey;",
          "    struct EmptyValue;",
          "    ",
          "    impl Default for EmptyKey {",
          "        fn default() -> Self { EmptyKey }",
          "    }",
          "",
          "    impl Default for EmptyValue {",
          "        fn default() -> Self { EmptyValue }",
          "    }",
          " ",
          "    let _: IntoKeys<EmptyKey, EmptyValue> = IntoKeys::default();",
          "    let result: IntoKeys<EmptyKey, EmptyValue> = IntoKeys::default();",
          "    assert_eq!(result.inner, Default::default());",
          "    assert!(result.inner.is_empty());",
          "    assert!(result.inner.len() == 0);",
          "    assert!(result.inner.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomAllocator;",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Default for CustomAllocator {",
          "        fn default() -> Self { CustomAllocator }",
          "    }",
          "",
          "    impl Default for CustomKey {",
          "        fn default() -> Self { CustomKey }",
          "    }",
          "",
          "    impl Default for CustomValue {",
          "        fn default() -> Self { CustomValue }",
          "    }",
          "",
          "    let _: IntoKeys<CustomKey, CustomValue, CustomAllocator> = IntoKeys::default();",
          "}"
        ],
        "oracle": [
          "    let result: IntoKeys<CustomKey, CustomValue, CustomAllocator> = IntoKeys::default();",
          "    assert!(std::mem::size_of_val(&result.inner) > 0);",
          "    assert_eq!(result.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct CustomAllocator;",
          "    struct CustomKey;",
          "    struct CustomValue;",
          "",
          "    impl Default for CustomAllocator {",
          "        fn default() -> Self { CustomAllocator }",
          "    }",
          "",
          "    impl Default for CustomKey {",
          "        fn default() -> Self { CustomKey }",
          "    }",
          "",
          "    impl Default for CustomValue {",
          "        fn default() -> Self { CustomValue }",
          "    }",
          "",
          "    let _: IntoKeys<CustomKey, CustomValue, CustomAllocator> = IntoKeys::default();",
          "    let result: IntoKeys<CustomKey, CustomValue, CustomAllocator> = IntoKeys::default();",
          "    assert!(std::mem::size_of_val(&result.inner) > 0);",
          "    assert_eq!(result.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct AllocatorOne;",
          "    struct AllocatorTwo;",
          "    struct KeyType;",
          "    struct ValueType;",
          "",
          "    impl Default for AllocatorOne {",
          "        fn default() -> Self { AllocatorOne }",
          "    }",
          "",
          "    impl Default for AllocatorTwo {",
          "        fn default() -> Self { AllocatorTwo }",
          "    }",
          "",
          "    impl Default for KeyType {",
          "        fn default() -> Self { KeyType }",
          "    }",
          "",
          "    impl Default for ValueType {",
          "        fn default() -> Self { ValueType }",
          "    }",
          "",
          "    let _: IntoKeys<KeyType, ValueType, AllocatorOne> = IntoKeys::default();",
          "    let _: IntoKeys<KeyType, ValueType, AllocatorTwo> = IntoKeys::default();",
          "}"
        ],
        "oracle": [
          "    let default_allocator_one = AllocatorOne::default();",
          "    let default_allocator_two = AllocatorTwo::default();",
          "    let default_key_type = KeyType::default();",
          "    let default_value_type = ValueType::default();",
          "    let default_into_keys_one: IntoKeys<KeyType, ValueType, AllocatorOne> = IntoKeys::default();",
          "    let default_into_keys_two: IntoKeys<KeyType, ValueType, AllocatorTwo> = IntoKeys::default();",
          "    assert_eq!(default_into_keys_one.inner, Default::default());",
          "    assert_eq!(default_into_keys_two.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct AllocatorOne;",
          "    struct AllocatorTwo;",
          "    struct KeyType;",
          "    struct ValueType;",
          "",
          "    impl Default for AllocatorOne {",
          "        fn default() -> Self { AllocatorOne }",
          "    }",
          "",
          "    impl Default for AllocatorTwo {",
          "        fn default() -> Self { AllocatorTwo }",
          "    }",
          "",
          "    impl Default for KeyType {",
          "        fn default() -> Self { KeyType }",
          "    }",
          "",
          "    impl Default for ValueType {",
          "        fn default() -> Self { ValueType }",
          "    }",
          "",
          "    let _: IntoKeys<KeyType, ValueType, AllocatorOne> = IntoKeys::default();",
          "    let _: IntoKeys<KeyType, ValueType, AllocatorTwo> = IntoKeys::default();",
          "    let default_allocator_one = AllocatorOne::default();",
          "    let default_allocator_two = AllocatorTwo::default();",
          "    let default_key_type = KeyType::default();",
          "    let default_value_type = ValueType::default();",
          "    let default_into_keys_one: IntoKeys<KeyType, ValueType, AllocatorOne> = IntoKeys::default();",
          "    let default_into_keys_two: IntoKeys<KeyType, ValueType, AllocatorTwo> = IntoKeys::default();",
          "    assert_eq!(default_into_keys_one.inner, Default::default());",
          "    assert_eq!(default_into_keys_two.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]