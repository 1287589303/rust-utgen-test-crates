[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::with_capacity_in(10, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    table.shrink_to_fit(hasher);",
          "}"
        ],
        "oracle": [
          "    assert!(table.capacity() >= 10);",
          "    assert!(table.len() == 0);",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "    assert!(table.capacity() >= 10);",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(table.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::with_capacity_in(10, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 10);",
          "    assert!(table.len() == 0);",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "    assert!(table.capacity() >= 10);",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(table.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::with_capacity_in(10, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.shrink_to_fit(hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 10);",
          "    assert!(table.len() == 1);",
          "    assert!(table.is_empty() == false);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "    assert!(table.capacity() >= 2);",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(table.len() == 2);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::with_capacity_in(10, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    table.insert_unique(hasher(&1), 1, hasher);",
          "    table.shrink_to_fit(hasher);",
          "    assert_eq!(table.capacity(), 10);",
          "    assert!(table.len() == 1);",
          "    assert!(table.is_empty() == false);",
          "    table.insert_unique(hasher(&2), 2, hasher);",
          "    assert!(table.capacity() >= 2);",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 2);",
          "    assert!(table.len() == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::with_capacity_in(20, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=5 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 5);",
          "    assert!(table.capacity() >= 5);",
          "    assert!(table.capacity() <= 20);",
          "    assert!(table.is_empty() == false);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::with_capacity_in(20, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=5 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "    assert_eq!(table.len(), 5);",
          "    assert!(table.capacity() >= 5);",
          "    assert!(table.capacity() <= 20);",
          "    assert!(table.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=50 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "}"
        ],
        "oracle": [
          "    assert!(table.capacity() >= 100);",
          "    assert!(table.len() == 50);",
          "    assert!(table.capacity() >= 50);",
          "    for i in 1..=50 {",
          "    assert!(table.find(hasher(&i), |v| *v == i).is_some());",
          "    }"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=50 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "    assert!(table.capacity() >= 100);",
          "    assert!(table.len() == 50);",
          "    assert!(table.capacity() >= 50);",
          "    for i in 1..=50 {",
          "    assert!(table.find(hasher(&i), |v| *v == i).is_some());",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=80 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 80);",
          "    assert!(table.capacity() >= 80);",
          "    assert!(table.capacity() < 100);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &_| val as u64;",
          "    for i in 1..=80 {",
          "        table.insert_unique(hasher(&i), i, hasher);",
          "    }",
          "    table.shrink_to_fit(hasher);",
          "    assert_eq!(table.len(), 80);",
          "    assert!(table.capacity() >= 80);",
          "    assert!(table.capacity() < 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]