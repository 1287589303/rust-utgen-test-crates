[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(0);",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    assert!(map.capacity() >= 2);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 2);",
          "    map.remove(&1);",
          "    map.remove(&3);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() == 0);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(0);",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.capacity(), 0);",
          "    map.insert(1, 2);",
          "    map.insert(3, 4);",
          "    assert!(map.capacity() >= 2);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 2);",
          "    map.remove(&1);",
          "    map.remove(&3);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(1);",
          "    map.insert(1, 2);",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert!(map.capacity() >= 1);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 2);",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&4));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(1);",
          "    map.insert(1, 2);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 1);",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(3, 4);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 2);",
          "    assert_eq!(map.get(&1), Some(&2));",
          "    assert_eq!(map.get(&3), Some(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert!(map.capacity() >= 10);",
          "    assert_eq!(map.len(), 10);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 10 && map.capacity() < 20);",
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&9), Some(&10));",
          "    assert!(map.get(&10).is_none());",
          "    assert!(map.contains_key(&5));",
          "    assert!(!map.contains_key(&11));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(10);",
          "    for i in 0..10 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 10);",
          "    assert_eq!(map.len(), 10);",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() >= 10 && map.capacity() < 20);",
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&9), Some(&10));",
          "    assert!(map.get(&10).is_none());",
          "    assert!(map.contains_key(&5));",
          "    assert!(!map.contains_key(&11));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
          "    for i in 0..50 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity() >= 100, true);",
          "    assert_eq!(map.len(), 50);",
          "    assert_eq!(map.capacity() >= 2, true);",
          "    assert!(map.get(&0).is_some());",
          "    assert!(map.get(&49).is_some());",
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&49), Some(&50));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
          "    for i in 0..50 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "    assert_eq!(map.capacity() >= 100, true);",
          "    assert_eq!(map.len(), 50);",
          "    assert_eq!(map.capacity() >= 2, true);",
          "    assert!(map.get(&0).is_some());",
          "    assert!(map.get(&49).is_some());",
          "    assert_eq!(map.get(&0), Some(&1));",
          "    assert_eq!(map.get(&49), Some(&50));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(1000);",
          "    for i in 0..500 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "}"
        ],
        "oracle": [
          "    assert!(map.capacity() <= 1000);",
          "    assert!(map.len() == 500);",
          "    assert!(map.capacity() >= 500);",
          "    for i in 0..500 {",
          "    assert_eq!(map.get(&i), Some(&(i + 1)));",
          "    }",
          "    assert!(map.contains_key(&250));",
          "    assert!(!map.contains_key(&501));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(1000);",
          "    for i in 0..500 {",
          "        map.insert(i, i + 1);",
          "    }",
          "    map.shrink_to_fit();",
          "    assert!(map.capacity() <= 1000);",
          "    assert!(map.len() == 500);",
          "    assert!(map.capacity() >= 500);",
          "    for i in 0..500 {",
          "    assert_eq!(map.get(&i), Some(&(i + 1)));",
          "    }",
          "    assert!(map.contains_key(&250));",
          "    assert!(!map.contains_key(&501));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]