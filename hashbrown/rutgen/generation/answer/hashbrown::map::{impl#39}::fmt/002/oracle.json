[
  {
    "uses": [
      "use hashbrown::hash_map::EntryRef;",
      "use hashbrown::hash_map::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_owned(), 42);",
          "",
          "    let occupied_entry = map.entry_ref(\"key1\");",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    let occupied_entry = map.entry_ref(\"key1\");",
          "    assert!(matches!(occupied_entry, EntryRef::Occupied(_)));",
          "    let formatted_output = fmt::Debug::fmt(&occupied_entry.unwrap(), &mut fmt::Formatter::new());",
          "    assert!(formatted_output.is_ok());"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.insert(\"key1\".to_owned(), 42);",
          "",
          "    let occupied_entry = map.entry_ref(\"key1\");",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "    let occupied_entry = map.entry_ref(\"key1\");",
          "    assert!(matches!(occupied_entry, EntryRef::Occupied(_)));",
          "    let formatted_output = fmt::Debug::fmt(&occupied_entry.unwrap(), &mut fmt::Formatter::new());",
          "    assert!(formatted_output.is_ok());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    map.insert(1, \"value1\".to_owned());",
          "",
          "    let occupied_entry = map.entry_ref(&1);",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(occupied_entry, EntryRef::Occupied(_)));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"EntryRef\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Occupied\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"value1\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<i32, String> = HashMap::new();",
          "    map.insert(1, \"value1\".to_owned());",
          "",
          "    let occupied_entry = map.entry_ref(&1);",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "    assert!(matches!(occupied_entry, EntryRef::Occupied(_)));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"EntryRef\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"Occupied\"));",
          "    assert!(format!(\"{:?}\", occupied_entry).contains(\"value1\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"a\", 100);",
          "    map.insert(\"b\", 200);",
          "",
          "    let occupied_entry = map.entry_ref(\"a\");",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "}"
        ],
        "oracle": [
          "    f.debug_tuple(\"EntryRef\").field(&occupied).finish() == fmt::Result::Ok(())",
          "    occupied_entry.is_some()",
          "    EntryRef::Occupied(ref occupied).is_match()",
          "    assert_eq!(occupied_entry, EntryRef::Occupied(OccupiedEntry { hash: _, elem: _, table: _ } ))",
          "    occupied.hash == 100"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{EntryRef, HashMap};",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"a\", 100);",
          "    map.insert(\"b\", 200);",
          "",
          "    let occupied_entry = map.entry_ref(\"a\");",
          "    ",
          "    if let EntryRef::Occupied(ref occupied) = occupied_entry {",
          "        let _ = fmt::Debug::fmt(&occupied, &mut fmt::Formatter::new());",
          "    }",
          "    f.debug_tuple(\"EntryRef\").field(&occupied).finish() == fmt::Result::Ok(())",
          "    occupied_entry.is_some()",
          "    EntryRef::Occupied(ref occupied).is_match()",
          "    assert_eq!(occupied_entry, EntryRef::Occupied(OccupiedEntry { hash: _, elem: _, table: _ } ))",
          "    occupied.hash == 100",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]