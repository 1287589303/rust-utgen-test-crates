[
  {
    "uses": [
      "use hashbrown::hash_map::RawEntryMut;",
      "use hashbrown::Global;",
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, i32, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"vacant_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"vacant_key\", 42));",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"vacant_key\"], 42);",
          "    let entry = map.raw_entry_mut().from_key(\"vacant_key\");",
          "    match entry {",
          "    RawEntryMut::Occupied(_) => panic!(\"Expected vacant entry, but found occupied.\"),",
          "    RawEntryMut::Vacant(_) => ()",
          "    }",
          "    let entry_key = entry.get_key_value_mut();",
          "    assert_eq!(entry_key.0, \"vacant_key\");",
          "    assert_eq!(entry_key.1, &42);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, i32, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"vacant_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"vacant_key\", 42));",
          "        }",
          "    }",
          "    assert_eq!(map[\"vacant_key\"], 42);",
          "    let entry = map.raw_entry_mut().from_key(\"vacant_key\");",
          "    match entry {",
          "    RawEntryMut::Occupied(_) => panic!(\"Expected vacant entry, but found occupied.\"),",
          "    RawEntryMut::Vacant(_) => ()",
          "    }",
          "    let entry_key = entry.get_key_value_mut();",
          "    assert_eq!(entry_key.0, \"vacant_key\");",
          "    assert_eq!(entry_key.1, &42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, String, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"another_vacant_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"another_vacant_key\", \"value\".to_string()));",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(\"another_vacant_key\"));",
          "    assert_eq!(map[\"another_vacant_key\"], \"value\".to_string());",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, String, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"another_vacant_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"another_vacant_key\", \"value\".to_string()));",
          "        }",
          "    }",
          "    assert!(map.contains_key(\"another_vacant_key\"));",
          "    assert_eq!(map[\"another_vacant_key\"], \"value\".to_string());",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, f64, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"float_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"float_key\", 3.14));",
          "        }",
          "    }",
          "    ",
          "    match map.raw_entry_mut().from_key(\"float_key2\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"float_key2\", 2.71));",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"float_key\"], 3.14);",
          "    assert_eq!(map[\"float_key2\"], 2.71);"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
          "",
          "    let mut map: HashMap<&str, f64, Global> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(\"float_key\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"float_key\", 3.14));",
          "        }",
          "    }",
          "    ",
          "    match map.raw_entry_mut().from_key(\"float_key2\") {",
          "        RawEntryMut::Occupied(_) => unreachable!(),",
          "        RawEntryMut::Vacant(entry) => {",
          "            entry.or_insert_with(|| (\"float_key2\", 2.71));",
          "        }",
          "    }",
          "    assert_eq!(map[\"float_key\"], 3.14);",
          "    assert_eq!(map[\"float_key2\"], 2.71);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]