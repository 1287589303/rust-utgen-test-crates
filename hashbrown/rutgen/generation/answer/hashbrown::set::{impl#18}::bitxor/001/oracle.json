[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 4);",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&2));",
          "    assert!(_result.contains(&4));",
          "    assert!(_result.contains(&5));",
          "    assert!(!_result.contains(&3));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "    assert_eq!(_result.len(), 4);",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&2));",
          "    assert!(_result.contains(&4));",
          "    assert!(_result.contains(&5));",
          "    assert!(!_result.contains(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = HashSet::default();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32> = HashSet::default();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let result = &set_a ^ &set_b;",
          "    assert!(result.is_empty());",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![1, 2, 4, 5].into_iter().collect();",
          "    assert_eq!(result, expected);",
          "    let set_a: HashSet<i32> = vec![-1, 0, 1].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![0, 1, 2].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![-1, 2].into_iter().collect();",
          "    assert_eq!(result, expected);",
          "    let set_a: HashSet<i32> = vec![];",
          "    let set_b: HashSet<i32> = vec![];",
          "    let result = &set_a ^ &set_b;",
          "    assert!(result.is_empty());"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = HashSet::default();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let _result = &set_a ^ &set_b;",
          "    let set_a: HashSet<i32> = HashSet::default();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let result = &set_a ^ &set_b;",
          "    assert!(result.is_empty());",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![1, 2, 4, 5].into_iter().collect();",
          "    assert_eq!(result, expected);",
          "    let set_a: HashSet<i32> = vec![-1, 0, 1].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![0, 1, 2].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![-1, 2].into_iter().collect();",
          "    assert_eq!(result, expected);",
          "    let set_a: HashSet<i32> = vec![];",
          "    let set_b: HashSet<i32> = vec![];",
          "    let result = &set_a ^ &set_b;",
          "    assert!(result.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let result = &set_a ^ &set_b;",
          "    let expected = [1, 2, 3];",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }",
          "    assert_eq!(result.len(), expected.len());"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let _result = &set_a ^ &set_b;",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = HashSet::default();",
          "    let result = &set_a ^ &set_b;",
          "    let expected = [1, 2, 3];",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }",
          "    assert_eq!(result.len(), expected.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    let set_a: HashSet<i32> = vec![1, 2].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![1, 2, 3, 4].into_iter().collect();",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "    let set_a: HashSet<i32> = vec![1, 2].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4].into_iter().collect();",
          "    let result = &set_a ^ &set_b;",
          "    let expected: HashSet<i32> = vec![1, 2, 3, 4].into_iter().collect();",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 0);",
          "    assert!(set_a.is_subset(&_result));",
          "    assert!(set_b.is_subset(&_result));",
          "    let set_c: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    let result_with_c = &set_a ^ &set_c;",
          "    let expected_with_c: HashSet<i32> = vec![1, 2, 4, 5].into_iter().collect();",
          "    assert_eq!(_result, expected_with_c);",
          "    let set_d: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result_with_d = &set_a ^ &set_d;",
          "    let expected_with_d: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    assert_eq!(_result, expected_with_d);"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "    assert_eq!(_result.len(), 0);",
          "    assert!(set_a.is_subset(&_result));",
          "    assert!(set_b.is_subset(&_result));",
          "    let set_c: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    let result_with_c = &set_a ^ &set_c;",
          "    let expected_with_c: HashSet<i32> = vec![1, 2, 4, 5].into_iter().collect();",
          "    assert_eq!(_result, expected_with_c);",
          "    let set_d: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result_with_d = &set_a ^ &set_d;",
          "    let expected_with_d: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    assert_eq!(_result, expected_with_d);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3, 6].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result.len(), 4);",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&2));",
          "    assert!(_result.contains(&4));",
          "    assert!(_result.contains(&5));",
          "    assert!(!_result.contains(&3));",
          "    assert!(!_result.contains(&6));"
        ],
        "code": [
          "{",
          "    let set_a: HashSet<i32> = vec![1, 2, 3, 6].into_iter().collect();",
          "    let set_b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let _result = &set_a ^ &set_b;",
          "    assert_eq!(_result.len(), 4);",
          "    assert!(_result.contains(&1));",
          "    assert!(_result.contains(&2));",
          "    assert!(_result.contains(&4));",
          "    assert!(_result.contains(&5));",
          "    assert!(!_result.contains(&3));",
          "    assert!(!_result.contains(&6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]