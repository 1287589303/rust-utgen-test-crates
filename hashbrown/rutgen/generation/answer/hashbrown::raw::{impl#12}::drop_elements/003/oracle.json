[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyType {",
          "        value: i32,",
          "    }",
          "",
          "    unsafe {",
          "        let mut table_inner = RawTableInner {",
          "            bucket_mask: 0,",
          "            ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "            growth_left: 0,",
          "            items: 0,",
          "        };",
          "        table_inner.drop_elements::<DummyType>();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table_inner.items, 0);",
          "    assert!(table_inner.ctrl.as_ptr().is_null());",
          "    assert!(table_inner.growth_left == 0);"
        ],
        "code": [
          "{",
          "    struct DummyType {",
          "        value: i32,",
          "    }",
          "",
          "    unsafe {",
          "        let mut table_inner = RawTableInner {",
          "            bucket_mask: 0,",
          "            ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "            growth_left: 0,",
          "            items: 0,",
          "        };",
          "        table_inner.drop_elements::<DummyType>();",
          "    }",
          "    assert_eq!(table_inner.items, 0);",
          "    assert!(table_inner.ctrl.as_ptr().is_null());",
          "    assert!(table_inner.growth_left == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct PanicType {",
          "        value: i32,",
          "    }",
          "",
          "    unsafe {",
          "        let mut table_inner = RawTableInner {",
          "            bucket_mask: 0,",
          "            ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "            growth_left: 0,",
          "            items: 1,",
          "        };",
          "        table_inner.drop_elements::<PanicType>();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut table_inner = RawTableInner {",
          "    bucket_mask: 0,",
          "    ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "    growth_left: 0,",
          "    items: 0,",
          "    };",
          "    unsafe { table_inner.drop_elements::<PanicType>() };",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    struct PanicType {",
          "        value: i32,",
          "    }",
          "",
          "    unsafe {",
          "        let mut table_inner = RawTableInner {",
          "            bucket_mask: 0,",
          "            ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "            growth_left: 0,",
          "            items: 1,",
          "        };",
          "        table_inner.drop_elements::<PanicType>();",
          "    }",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let mut table_inner = RawTableInner {",
          "    bucket_mask: 0,",
          "    ctrl: NonNull::new_unchecked(Box::into_raw(Box::new([0u8; 8][..])) as *mut u8),",
          "    growth_left: 0,",
          "    items: 0,",
          "    };",
          "    unsafe { table_inner.drop_elements::<PanicType>() };",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]