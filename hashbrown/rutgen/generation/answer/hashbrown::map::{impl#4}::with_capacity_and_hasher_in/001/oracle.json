[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    ",
          "    let capacity = 10;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    ",
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.hash_builder(), &hash_builder);"
        ],
        "code": [
          "{",
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    ",
          "    let capacity = 10;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    ",
          "    let capacity = 0;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.hash_builder(), &hash_builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 1;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    let capacity = 1;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert_eq!(map.hash_builder, hash_builder);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let capacity = 1;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    let capacity = 1;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert_eq!(map.hash_builder, hash_builder);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 10;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher(), &hash_builder);"
        ],
        "code": [
          "{",
          "    let capacity = 10;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(!map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 0;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    let capacity = 0;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    let capacity = 0;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    let capacity = 0;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 1;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    let capacity: usize = 1;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher().build_hasher().finish(), hash_builder.build_hasher().finish());"
        ],
        "code": [
          "{",
          "    let capacity = 1;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    let capacity: usize = 1;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), capacity);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher().build_hasher().finish(), hash_builder.build_hasher().finish());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let capacity = 10;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher(), &hash_builder);"
        ],
        "code": [
          "{",
          "    let capacity = 10;",
          "    let hash_builder = std::collections::hash_map::RandomState::new();",
          "    let alloc = Global;",
          "    let map: HashMap<usize, usize> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.allocator(), &alloc);",
          "    assert_eq!(map.hasher(), &hash_builder);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomAllocator;",
          "",
          "    unsafe impl Allocator for CustomAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let capacity = 5;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = CustomAllocator;",
          "    let map: HashMap<usize, usize, DefaultHashBuilder, CustomAllocator> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 5);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.hash_builder, hash_builder);",
          "    assert_eq!(map.allocator() as *const _, &alloc as *const _);",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    struct CustomAllocator;",
          "",
          "    unsafe impl Allocator for CustomAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let capacity = 5;",
          "    let hash_builder = DefaultHashBuilder::default();",
          "    let alloc = CustomAllocator;",
          "    let map: HashMap<usize, usize, DefaultHashBuilder, CustomAllocator> = HashMap::with_capacity_and_hasher_in(capacity, hash_builder, alloc);",
          "    assert_eq!(map.capacity(), 5);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.hash_builder, hash_builder);",
          "    assert_eq!(map.allocator() as *const _, &alloc as *const _);",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]