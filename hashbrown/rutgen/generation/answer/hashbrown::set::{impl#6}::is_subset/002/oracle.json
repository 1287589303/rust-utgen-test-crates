[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let larger_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    let mut smaller_set = HashSet::new();",
          "    smaller_set.insert(4);",
          "    smaller_set.insert(5);",
          "    smaller_set.insert(6);",
          "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(smaller_set.len() <= larger_set.len(), false);",
          "    assert_eq!(smaller_set.iter().all(|v| larger_set.contains(v)), false);",
          "    assert_eq!(smaller_set.is_subset(&larger_set), false);"
        ],
        "code": [
          "{",
          "    let larger_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    let mut smaller_set = HashSet::new();",
          "    smaller_set.insert(4);",
          "    smaller_set.insert(5);",
          "    smaller_set.insert(6);",
          "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
          "    assert_eq!(smaller_set.len() <= larger_set.len(), false);",
          "    assert_eq!(smaller_set.iter().all(|v| larger_set.contains(v)), false);",
          "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let other_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(empty_set.is_subset(&other_set), true);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(empty_set.len() <= other_set.len(), true);",
          "    assert_eq!(other_set.is_subset(&empty_set), false);",
          "    let mut set_with_elements: HashSet<i32> = HashSet::new();",
          "    set_with_elements.insert(4);",
          "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
          "    set_with_elements.insert(2);",
          "    assert_eq!(set_with_elements.is_subset(&other_set), false);"
        ],
        "code": [
          "{",
          "    let other_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
          "    let empty_set: HashSet<i32> = HashSet::new();",
          "    assert_eq!(empty_set.is_subset(&other_set), true);",
          "    assert_eq!(empty_set.len() <= other_set.len(), true);",
          "    assert_eq!(other_set.is_subset(&empty_set), false);",
          "    let mut set_with_elements: HashSet<i32> = HashSet::new();",
          "    set_with_elements.insert(4);",
          "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
          "    set_with_elements.insert(2);",
          "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let other_set: HashSet<i32> = HashSet::new();",
          "    let mut non_empty_set = HashSet::new();",
          "    non_empty_set.insert(1);",
          "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
          "    assert!(non_empty_set.len() > other_set.len());",
          "    assert!(non_empty_set.iter().any(|v| !other_set.contains(v));"
        ],
        "code": [
          "{",
          "    let other_set: HashSet<i32> = HashSet::new();",
          "    let mut non_empty_set = HashSet::new();",
          "    non_empty_set.insert(1);",
          "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
          "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
          "    assert!(non_empty_set.len() > other_set.len());",
          "    assert!(non_empty_set.iter().any(|v| !other_set.contains(v));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]