[
  {
    "uses": [
      "use hashbrown::HashSet;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = HashSet::new();",
          "",
          "    set.is_subset(&sup);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_subset(&sup), true);",
          "    set.insert(2);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    set.insert(4);",
          "    assert_eq!(set.is_subset(&sup), false);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = HashSet::new();",
          "",
          "    set.is_subset(&sup);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    set.insert(2);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    set.insert(4);",
          "    assert_eq!(set.is_subset(&sup), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_subset(&sup), true);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_subset(&sup), true);",
          "    assert_eq!(set.len(), 2);",
          "    assert_eq!(sup.len(), 3);",
          "    assert!(set.iter().all(|v| sup.contains(v)));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    assert_eq!(set.len(), 2);",
          "    assert_eq!(sup.len(), 3);",
          "    assert!(set.iter().all(|v| sup.contains(v)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [2, 1].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), false);",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "    assert_eq!(set.is_subset(&set), true);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [2, 1].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), false);",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "    assert_eq!(set.is_subset(&set), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3, 4].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), false);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "",
          "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
          "",
          "    set.is_subset(&sup);",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [2, 3].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), true);",
          "    let set: HashSet<_> = [1, 2, 3, 4].into_iter().collect();",
          "    assert_eq!(set.is_subset(&sup), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]