[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let extractor = table.extract_if(|_v| false);",
          "}"
        ],
        "oracle": [
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let extractor = table.extract_if(|_v| false);",
          "    assert!(extractor.inner.iter.items == 0);",
          "    assert!(extractor.inner.table == &mut table.raw);",
          "    assert_eq!(extractor.f as usize, (&|_v| false) as usize);"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let extractor = table.extract_if(|_v| false);",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let extractor = table.extract_if(|_v| false);",
          "    assert!(extractor.inner.iter.items == 0);",
          "    assert!(extractor.inner.table == &mut table.raw);",
          "    assert_eq!(extractor.f as usize, (&|_v| false) as usize);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 10, |v| v.to_owned());",
          "    table.insert_unique(2, 20, |v| v.to_owned());",
          "    let extractor = table.extract_if(|_v| false);",
          "}"
        ],
        "oracle": [
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 10, |v| v.to_owned());",
          "    table.insert_unique(2, 20, |v| v.to_owned());",
          "    let extractor = table.extract_if(|_v| false);",
          "    assert!(extractor.inner.iter.items == 0);",
          "    assert!(extractor.inner.table.len() == 2);",
          "    let extractor_non_exhausted = table.extract_if(|v| v % 2 == 0);",
          "    assert!(extractor_non_exhausted.inner.iter.items > 0);",
          "    assert!(extractor_non_exhausted.inner.table.len() < 2);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 10, |v| v.to_owned());",
          "    table.insert_unique(2, 20, |v| v.to_owned());",
          "    let extractor = table.extract_if(|_v| false);",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 10, |v| v.to_owned());",
          "    table.insert_unique(2, 20, |v| v.to_owned());",
          "    let extractor = table.extract_if(|_v| false);",
          "    assert!(extractor.inner.iter.items == 0);",
          "    assert!(extractor.inner.table.len() == 2);",
          "    let extractor_non_exhausted = table.extract_if(|v| v % 2 == 0);",
          "    assert!(extractor_non_exhausted.inner.iter.items > 0);",
          "    assert!(extractor_non_exhausted.inner.table.len() < 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "        table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "    table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "    assert!(extractor.f)(&mut 0);",
          "    assert!(extractor.f)(&mut 2);",
          "    assert!(extractor.f)(&mut 4);",
          "    assert!(extractor.f)(&mut 6);",
          "    assert!(!extractor.f)(&mut 1);",
          "    assert!(!extractor.f)(&mut 3);",
          "    assert!(!extractor.f)(&mut 5);",
          "    assert!(!extractor.f)(&mut 7);",
          "    assert_eq!(extractor.inner.table, &mut table.raw);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "        table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "    table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "    assert!(extractor.f)(&mut 0);",
          "    assert!(extractor.f)(&mut 2);",
          "    assert!(extractor.f)(&mut 4);",
          "    assert!(extractor.f)(&mut 6);",
          "    assert!(!extractor.f)(&mut 1);",
          "    assert!(!extractor.f)(&mut 3);",
          "    assert!(!extractor.f)(&mut 5);",
          "    assert!(!extractor.f)(&mut 7);",
          "    assert_eq!(extractor.inner.table, &mut table.raw);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "        table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert!(extractor.is_some());",
          "    assert_eq!(extractor.inner.iter.items, 0);",
          "    assert_eq!(extractor.f(0), true);",
          "    assert_eq!(extractor.f(1), false);",
          "    assert_eq!(extractor.inner.table.data_end().as_ptr(), table.raw.data_end().as_ptr());",
          "    assert_eq!(extractor.inner.table.capacity(), table.raw.capacity());",
          "    assert_eq!(extractor.inner.iter.items, table.len());"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    for x in 0..8 {",
          "        table.insert_unique(x, x, |v| v.to_owned());",
          "    }",
          "    let extractor = table.extract_if(|v| *v % 2 == 0);",
          "    assert!(extractor.is_some());",
          "    assert_eq!(extractor.inner.iter.items, 0);",
          "    assert_eq!(extractor.f(0), true);",
          "    assert_eq!(extractor.f(1), false);",
          "    assert_eq!(extractor.inner.table.data_end().as_ptr(), table.raw.data_end().as_ptr());",
          "    assert_eq!(extractor.inner.table.capacity(), table.raw.capacity());",
          "    assert_eq!(extractor.inner.iter.items, table.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 5, |v| v.to_owned());",
          "    let extractor = table.extract_if(|v| *v > 2);",
          "}"
        ],
        "oracle": [
          "    let mut table = HashTable::new_in(Global);",
          "    assert_eq!(table.len(), 1);",
          "    let extractor = table.extract_if(|v| *v > 2);",
          "    assert!(extractor.inner.iter.items >= 0);",
          "    assert_eq!(extractor.f, |v| *v > 2);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 5, |v| v.to_owned());",
          "    let extractor = table.extract_if(|v| *v > 2);",
          "    let mut table = HashTable::new_in(Global);",
          "    assert_eq!(table.len(), 1);",
          "    let extractor = table.extract_if(|v| *v > 2);",
          "    assert!(extractor.inner.iter.items >= 0);",
          "    assert_eq!(extractor.f, |v| *v > 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 3, |v| v.to_owned());",
          "    table.insert_unique(2, 6, |v| v.to_owned());",
          "    let extractor = table.extract_if(|v| *v > 5);",
          "}"
        ],
        "oracle": [
          "    let extractor = table.extract_if(|v| *v > 5);",
          "    assert!(extractor.is_some());",
          "    assert_eq!(extractor.inner.table, &mut table.raw);",
          "    assert_eq!(extractor.f(6), true);",
          "    assert_eq!(extractor.f(3), false);"
        ],
        "code": [
          "{",
          "    let mut table = HashTable::new_in(Global);",
          "    table.insert_unique(1, 3, |v| v.to_owned());",
          "    table.insert_unique(2, 6, |v| v.to_owned());",
          "    let extractor = table.extract_if(|v| *v > 5);",
          "    let extractor = table.extract_if(|v| *v > 5);",
          "    assert!(extractor.is_some());",
          "    assert_eq!(extractor.inner.table, &mut table.raw);",
          "    assert_eq!(extractor.f(6), true);",
          "    assert_eq!(extractor.f(3), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]