[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestEmptyKey;",
          "    struct TestEmptyValue;",
          "    ",
          "    let empty_iter = Iter {",
          "        inner: RawIter::new(),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: empty_iter };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    struct TestEmptyKey;",
          "    struct TestEmptyValue;",
          "    ",
          "    let empty_iter = Iter {",
          "        inner: RawIter::new(),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: empty_iter };",
          "    values.size_hint();",
          "    assert_eq!(values.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let single_element_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue)]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: single_element_iter };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.size_hint(), (1, Some(1)));",
          "    assert_eq!(values.inner.size_hint(), (1, Some(1)));",
          "    ",
          "    let empty_iter = Iter {",
          "    inner: RawIter::from([]),",
          "    marker: PhantomData,",
          "    };",
          "    let empty_values = Values { inner: empty_iter };",
          "    assert_eq!(empty_values.size_hint(), (0, Some(0)));"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let single_element_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue)]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: single_element_iter };",
          "    values.size_hint();",
          "    assert_eq!(values.size_hint(), (1, Some(1)));",
          "    assert_eq!(values.inner.size_hint(), (1, Some(1)));",
          "    ",
          "    let empty_iter = Iter {",
          "    inner: RawIter::from([]),",
          "    marker: PhantomData,",
          "    };",
          "    let empty_values = Values { inner: empty_iter };",
          "    assert_eq!(empty_values.size_hint(), (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let multiple_elements_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue), (TestKey, TestValue)]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: multiple_elements_iter };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    let multiple_elements_iter = Iter { inner: RawIter::from([(TestKey, TestValue), (TestKey, TestValue)]), marker: PhantomData };",
          "    let values = Values { inner: multiple_elements_iter };",
          "    assert_eq!(values.size_hint(), (2, Some(2)));"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let multiple_elements_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue), (TestKey, TestValue)]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: multiple_elements_iter };",
          "    values.size_hint();",
          "    let multiple_elements_iter = Iter { inner: RawIter::from([(TestKey, TestValue), (TestKey, TestValue)]), marker: PhantomData };",
          "    let values = Values { inner: multiple_elements_iter };",
          "    assert_eq!(values.size_hint(), (2, Some(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let max_capacity_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue); (2u32.pow(32) - 1) as usize]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: max_capacity_iter };",
          "    values.size_hint();",
          "}"
        ],
        "oracle": [
          "    let max_capacity_iter = Iter { inner: RawIter::from([(TestKey, TestValue); (2u32.pow(32) - 1) as usize]), marker: PhantomData };",
          "    let values = Values { inner: max_capacity_iter };",
          "    assert_eq!(values.size_hint(), (2u32.pow(32) - 1, Some(2u32.pow(32) - 1)));"
        ],
        "code": [
          "{",
          "    struct TestKey;",
          "    struct TestValue;",
          "",
          "    let max_capacity_iter = Iter {",
          "        inner: RawIter::from([(TestKey, TestValue); (2u32.pow(32) - 1) as usize]),",
          "        marker: PhantomData,",
          "    };",
          "    ",
          "    let values = Values { inner: max_capacity_iter };",
          "    values.size_hint();",
          "    let max_capacity_iter = Iter { inner: RawIter::from([(TestKey, TestValue); (2u32.pow(32) - 1) as usize]), marker: PhantomData };",
          "    let values = Values { inner: max_capacity_iter };",
          "    assert_eq!(values.size_hint(), (2u32.pow(32) - 1, Some(2u32.pow(32) - 1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]