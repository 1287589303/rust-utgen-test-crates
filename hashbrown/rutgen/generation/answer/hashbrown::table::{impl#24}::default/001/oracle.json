[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter_mut: IterMut<i32> = Default::default();",
          "    let _ = iter_mut; // Ensuring that we can create an instance of IterMut",
          "}"
        ],
        "oracle": [
          "    let iter_mut: IterMut<i32> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);",
          "    let iter_mut: IterMut<f64> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);",
          "    let iter_mut: IterMut<String> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);"
        ],
        "code": [
          "{",
          "    let iter_mut: IterMut<i32> = Default::default();",
          "    let _ = iter_mut; // Ensuring that we can create an instance of IterMut",
          "    let iter_mut: IterMut<i32> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);",
          "    let iter_mut: IterMut<f64> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);",
          "    let iter_mut: IterMut<String> = Default::default();",
          "    assert_eq!(iter_mut.inner.iter, Default::default().iter);",
          "    assert_eq!(iter_mut.marker, PhantomData);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter_mut: IterMut<String> = Default::default();",
          "    let _ = iter_mut; // Ensuring that we can create an instance of IterMut with a different type",
          "}"
        ],
        "oracle": [
          "    let iter_mut_default: IterMut<String> = Default::default();",
          "    let inner_default: RawIter<String> = Default::default();",
          "    let marker_phantomdata: PhantomData<&mut String> = PhantomData;",
          "    assert_eq!(iter_mut_default.inner, inner_default);",
          "    assert_eq!(iter_mut_default.marker, marker_phantomdata);"
        ],
        "code": [
          "{",
          "    let iter_mut: IterMut<String> = Default::default();",
          "    let _ = iter_mut; // Ensuring that we can create an instance of IterMut with a different type",
          "    let iter_mut_default: IterMut<String> = Default::default();",
          "    let inner_default: RawIter<String> = Default::default();",
          "    let marker_phantomdata: PhantomData<&mut String> = PhantomData;",
          "    assert_eq!(iter_mut_default.inner, inner_default);",
          "    assert_eq!(iter_mut_default.marker, marker_phantomdata);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]