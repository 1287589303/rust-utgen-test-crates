[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(8, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    for i in 0..8 {",
          "        map.insert(i, i);",
          "    }",
          "",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|k, _v| k % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_extracted.f.is_some(), true);",
          "    assert_eq!(map.table.len(), 8);",
          "    assert_eq!(map.len(), 8);",
          "    let keys: Vec<i32> = map.keys().cloned().collect();",
          "    assert!(keys.contains(&0));",
          "    assert!(keys.contains(&2));",
          "    assert!(keys.contains(&4));",
          "    assert!(keys.contains(&6));",
          "    assert_eq!(map.len(), 8);",
          "    let key_count = map.keys().count();",
          "    assert_eq!(key_count, 8);",
          "    assert!(map.is_empty() == false);"
        ],
        "code": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(8, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    for i in 0..8 {",
          "        map.insert(i, i);",
          "    }",
          "",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|k, _v| k % 2 == 0);",
          "    assert_eq!(_extracted.f.is_some(), true);",
          "    assert_eq!(map.table.len(), 8);",
          "    assert_eq!(map.len(), 8);",
          "    let keys: Vec<i32> = map.keys().cloned().collect();",
          "    assert!(keys.contains(&0));",
          "    assert!(keys.contains(&2));",
          "    assert!(keys.contains(&4));",
          "    assert!(keys.contains(&6));",
          "    assert_eq!(map.len(), 8);",
          "    let key_count = map.keys().count();",
          "    assert_eq!(key_count, 8);",
          "    assert!(map.is_empty() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|_k, _v| false);",
          "}"
        ],
        "oracle": [
          "    let extracted = map.extract_if(|_k, _v| false);",
          "    assert!(matches!(extracted, ExtractIf { f: _, inner: RawExtractIf { iter: _, table: _ } }));"
        ],
        "code": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|_k, _v| false);",
          "    let extracted = map.extract_if(|_k, _v| false);",
          "    assert!(matches!(extracted, ExtractIf { f: _, inner: RawExtractIf { iter: _, table: _ } }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    map.insert(0, 0);",
          "    ",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|k, _v| *k == 0);",
          "}"
        ],
        "oracle": [
          "    let extracted = map.extract_if(|k, _v| *k == 0);",
          "    assert!(extracted.f as *const _ != std::ptr::null());",
          "    assert_eq!(extracted.inner.table as *const _ as usize, &mut map.table as *mut _ as usize);",
          "    let iter = unsafe { extracted.inner.iter };",
          "    assert!(iter.items == 1);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.extract_if(|k, _v| *k == 1).inner.table as *const _ as usize == &mut map.table as *mut _ as usize);",
          "    let empty_extracted = map.extract_if(|k, _v| *k == 2);",
          "    assert!(empty_extracted.inner.table as *const _ as usize == &mut map.table as *mut _ as usize);",
          "    assert_eq!(map.len(), 1);",
          "    map.clear();",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    struct DummyAllocator;",
          "",
          "    impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::dangling())",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = ",
          "        HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), DummyAllocator);",
          "",
          "    map.insert(0, 0);",
          "    ",
          "    let _extracted: ExtractIf<i32, i32, _> = map.extract_if(|k, _v| *k == 0);",
          "    let extracted = map.extract_if(|k, _v| *k == 0);",
          "    assert!(extracted.f as *const _ != std::ptr::null());",
          "    assert_eq!(extracted.inner.table as *const _ as usize, &mut map.table as *mut _ as usize);",
          "    let iter = unsafe { extracted.inner.iter };",
          "    assert!(iter.items == 1);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.extract_if(|k, _v| *k == 1).inner.table as *const _ as usize == &mut map.table as *mut _ as usize);",
          "    let empty_extracted = map.extract_if(|k, _v| *k == 2);",
          "    assert!(empty_extracted.inner.table as *const _ as usize == &mut map.table as *mut _ as usize);",
          "    assert_eq!(map.len(), 1);",
          "    map.clear();",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]