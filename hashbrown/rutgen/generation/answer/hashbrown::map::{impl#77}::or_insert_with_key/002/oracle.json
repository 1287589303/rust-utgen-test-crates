[
  {
    "uses": [
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, usize> = HashMap::new();",
          "    map.insert(\"hello\", 5);",
          "",
          "    match map.entry(\"hello\") {",
          "        Entry::Occupied(mut entry) => {",
          "            let value = entry.or_insert_with_key(|key| {",
          "                assert_eq!(key, &\"hello\");",
          "                10",
          "            });",
          "            // This should mutate the existing value",
          "            *value *= 2; // Existing value of 5, should become 10",
          "        }",
          "        _ => unreachable!(),",
          "    }",
          "",
          "    // Validate that value has been updated correctly",
          "    assert_eq!(map[\"hello\"], 10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"hello\"], 5); // Initial check for existing key",
          "    let value = entry.or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"hello\"); // Validate key passed to closure",
          "    10",
          "    });",
          "    assert_eq!(*value, 10); // Check value after mutation",
          "    assert_eq!(map[\"hello\"], 10); // Confirm map reflects the updated value"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, usize> = HashMap::new();",
          "    map.insert(\"hello\", 5);",
          "",
          "    match map.entry(\"hello\") {",
          "        Entry::Occupied(mut entry) => {",
          "            let value = entry.or_insert_with_key(|key| {",
          "                assert_eq!(key, &\"hello\");",
          "                10",
          "            });",
          "            // This should mutate the existing value",
          "            *value *= 2; // Existing value of 5, should become 10",
          "        }",
          "        _ => unreachable!(),",
          "    }",
          "",
          "    // Validate that value has been updated correctly",
          "    assert_eq!(map[\"hello\"], 10);",
          "    assert_eq!(map[\"hello\"], 5); // Initial check for existing key",
          "    let value = entry.or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"hello\"); // Validate key passed to closure",
          "    10",
          "    });",
          "    assert_eq!(*value, 10); // Check value after mutation",
          "    assert_eq!(map[\"hello\"], 10); // Confirm map reflects the updated value",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, usize> = HashMap::new();",
          "    map.insert(\"world\", 3);",
          "",
          "    match map.entry(\"world\") {",
          "        Entry::Occupied(mut entry) => {",
          "            let value = entry.or_insert_with_key(|key| {",
          "                assert_eq!(key, &\"world\");",
          "                7",
          "            });",
          "            // Mutate the existing value",
          "            *value += 2; // Existing value of 3, should become 5",
          "        }",
          "        _ => unreachable!(),",
          "    }",
          "",
          "    // Validate that value has been updated correctly",
          "    assert_eq!(map[\"world\"], 5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| key.chars().count()), &5);",
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"world\");",
          "    100",
          "    }), &5);",
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"world\");",
          "    10",
          "    }), &5);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<&str, usize> = HashMap::new();",
          "    map.insert(\"world\", 3);",
          "",
          "    match map.entry(\"world\") {",
          "        Entry::Occupied(mut entry) => {",
          "            let value = entry.or_insert_with_key(|key| {",
          "                assert_eq!(key, &\"world\");",
          "                7",
          "            });",
          "            // Mutate the existing value",
          "            *value += 2; // Existing value of 3, should become 5",
          "        }",
          "        _ => unreachable!(),",
          "    }",
          "",
          "    // Validate that value has been updated correctly",
          "    assert_eq!(map[\"world\"], 5);",
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| key.chars().count()), &5);",
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"world\");",
          "    100",
          "    }), &5);",
          "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
          "    assert_eq!(key, &\"world\");",
          "    10",
          "    }), &5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]