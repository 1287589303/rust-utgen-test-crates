[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(0, hasher).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 0);",
          "    assert!(table.is_empty());",
          "    let result = table.try_reserve(10, hasher);",
          "    assert!(result.is_ok());",
          "    assert!(table.len() >= 0);",
          "    assert!(table.capacity() > 0);"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(0, hasher).unwrap();",
          "    assert_eq!(table.capacity(), 0);",
          "    assert!(table.is_empty());",
          "    let result = table.try_reserve(10, hasher);",
          "    assert!(result.is_ok());",
          "    assert!(table.len() >= 0);",
          "    assert!(table.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(5, hasher).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(table.try_reserve(5, hasher).is_ok());",
          "    assert_eq!(table.capacity(), 5);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(5, hasher).unwrap();",
          "    assert!(table.try_reserve(5, hasher).is_ok());",
          "    assert_eq!(table.capacity(), 5);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(isize::MAX as usize, hasher).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(table.try_reserve(isize::MAX as usize, hasher), Err(TryReserveError::CapacityOverflow)));"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(isize::MAX as usize, hasher).unwrap();",
          "    assert!(matches!(table.try_reserve(isize::MAX as usize, hasher), Err(TryReserveError::CapacityOverflow)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(1000, hasher).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 1000);",
          "    assert!(table.try_reserve(10, hasher).is_ok());",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.try_reserve(usize::MAX, hasher).is_err());",
          "    assert!(matches!(table.try_reserve(1000, hasher), Err(TryReserveError::CapacityOverflow)));",
          "    assert!(matches!(table.try_reserve(0, hasher), Ok(())));",
          "    assert!(matches!(table.try_reserve(100, hasher), Ok(())));",
          "    assert!(table.is_empty());"
        ],
        "code": [
          "{",
          "    let mut table: HashTable<i32> = HashTable::with_capacity_in(100, Global);",
          "    let hasher = |val: &i32| *val as u64;",
          "    table.try_reserve(1000, hasher).unwrap();",
          "    assert_eq!(table.capacity(), 1000);",
          "    assert!(table.try_reserve(10, hasher).is_ok());",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.try_reserve(usize::MAX, hasher).is_err());",
          "    assert!(matches!(table.try_reserve(1000, hasher), Err(TryReserveError::CapacityOverflow)));",
          "    assert!(matches!(table.try_reserve(0, hasher), Ok(())));",
          "    assert!(matches!(table.try_reserve(100, hasher), Ok(())));",
          "    assert!(table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]