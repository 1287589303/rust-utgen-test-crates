[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKeys<'a> {",
          "        inner: Iter<'a, i32, i32>,",
          "    }",
          "",
          "    struct TestValues<'a> {",
          "        inner: Values<'a, i32, i32>,",
          "    }",
          "",
          "    let key_value_pair: (i32, i32) = (1, 100);",
          "    let raw_iter = RawIter::new(vec![key_value_pair]);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let mut values = TestValues { inner: Values { inner: iter } };",
          "",
          "    values.inner.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(values.inner.next(), Some(&100));"
        ],
        "code": [
          "{",
          "    struct TestKeys<'a> {",
          "        inner: Iter<'a, i32, i32>,",
          "    }",
          "",
          "    struct TestValues<'a> {",
          "        inner: Values<'a, i32, i32>,",
          "    }",
          "",
          "    let key_value_pair: (i32, i32) = (1, 100);",
          "    let raw_iter = RawIter::new(vec![key_value_pair]);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let mut values = TestValues { inner: Values { inner: iter } };",
          "",
          "    values.inner.next();",
          "    assert_eq!(values.inner.next(), Some(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKeys<'a> {",
          "        inner: Iter<'a, i32, i32>,",
          "    }",
          "",
          "    struct TestValues<'a> {",
          "        inner: Values<'a, i32, i32>,",
          "    }",
          "",
          "    let key_value_pairs = vec![(1, 100), (2, 200), (3, 300)];",
          "    let raw_iter = RawIter::new(key_value_pairs);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let mut values = TestValues { inner: Values { inner: iter } };",
          "",
          "    values.inner.next();",
          "    values.inner.next();",
          "    values.inner.next();",
          "}"
        ],
        "oracle": [
          "    values.inner.next();",
          "    assert_eq!(values.inner.next(), Some(&100));",
          "    assert_eq!(values.inner.next(), Some(&200));",
          "    assert_eq!(values.inner.next(), Some(&300));"
        ],
        "code": [
          "{",
          "    struct TestKeys<'a> {",
          "        inner: Iter<'a, i32, i32>,",
          "    }",
          "",
          "    struct TestValues<'a> {",
          "        inner: Values<'a, i32, i32>,",
          "    }",
          "",
          "    let key_value_pairs = vec![(1, 100), (2, 200), (3, 300)];",
          "    let raw_iter = RawIter::new(key_value_pairs);",
          "    let iter = Iter { inner: raw_iter, marker: PhantomData };",
          "    let mut values = TestValues { inner: Values { inner: iter } };",
          "",
          "    values.inner.next();",
          "    values.inner.next();",
          "    values.inner.next();",
          "    values.inner.next();",
          "    assert_eq!(values.inner.next(), Some(&100));",
          "    assert_eq!(values.inner.next(), Some(&200));",
          "    assert_eq!(values.inner.next(), Some(&300));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]