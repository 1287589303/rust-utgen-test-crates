[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert!(table.buckets() > 0);"
        ],
        "code": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(0);",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert!(table.buckets() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 1);",
          "    assert!(table.is_empty());",
          "    assert!(table.buckets() > 0);"
        ],
        "code": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(1);",
          "    assert_eq!(table.capacity(), 1);",
          "    assert!(table.is_empty());",
          "    assert!(table.buckets() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= usize::MAX);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);"
        ],
        "code": [
          "{",
          "    let table: RawTable<i32> = RawTable::with_capacity(usize::MAX);",
          "    assert!(table.len() == 0);",
          "    assert!(table.capacity() >= usize::MAX);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]