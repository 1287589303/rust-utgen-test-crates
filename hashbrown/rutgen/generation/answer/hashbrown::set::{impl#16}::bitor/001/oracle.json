[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(result.contains(&6));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![4, 5, 6].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(result.contains(&6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 5);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(!result.contains(&0));",
          "    assert!(!result.contains(&6));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![3, 4, 5].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 5);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(result.contains(&4));",
          "    assert!(result.contains(&5));",
          "    assert!(!result.contains(&0));",
          "    assert!(!result.contains(&6));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_empty());",
          "    let expected: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }",
          "    ",
          "    let c: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    let result = &b | &c;",
          "    let expected: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert!(result.is_empty());",
          "    let expected: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }",
          "    ",
          "    let c: HashSet<i32> = vec![4, 5].into_iter().collect();",
          "    let result = &b | &c;",
          "    let expected: HashSet<i32> = vec![1, 2, 3, 4, 5].into_iter().collect();",
          "    assert_eq!(result.len(), expected.len());",
          "    for x in &result {",
          "    assert!(expected.contains(x));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(!result.contains(&1));",
          "    assert!(!result.contains(&2));",
          "    assert!(!result.contains(&3));",
          "    assert_eq!(result, HashSet::<i32>::new());"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 0);",
          "    assert!(result.is_empty());",
          "    assert!(!result.contains(&1));",
          "    assert!(!result.contains(&2));",
          "    assert!(!result.contains(&3));",
          "    assert_eq!(result, HashSet::<i32>::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(!result.contains(&4));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "    assert!(!result.contains(&4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = (0..10000).collect();",
          "    let b: HashSet<i32> = (5000..15000).collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 15000);",
          "    assert!(result.contains(&0));",
          "    assert!(result.contains(&9999));",
          "    assert!(result.contains(&5000));",
          "    assert!(result.contains(&14999));",
          "    for x in 0..5000 {",
          "    assert!(result.contains(&x));",
          "    }",
          "    for x in 5000..15000 {",
          "    assert!(result.contains(&x));",
          "    }",
          "    for x in 10000..15000 {",
          "    assert!(result.contains(&x));",
          "    }"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = (0..10000).collect();",
          "    let b: HashSet<i32> = (5000..15000).collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 15000);",
          "    assert!(result.contains(&0));",
          "    assert!(result.contains(&9999));",
          "    assert!(result.contains(&5000));",
          "    assert!(result.contains(&14999));",
          "    for x in 0..5000 {",
          "    assert!(result.contains(&x));",
          "    }",
          "    for x in 5000..15000 {",
          "    assert!(result.contains(&x));",
          "    }",
          "    for x in 10000..15000 {",
          "    assert!(result.contains(&x));",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = vec![1].into_iter().collect();",
          "    let result_zero_one = &a | &b;",
          "",
          "    let c: HashSet<i32> = vec![1].into_iter().collect();",
          "    let d: HashSet<i32> = vec![2].into_iter().collect();",
          "    let result_one_one = &c | &d;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result_zero_one.len(), 1);",
          "    assert!(result_zero_one.contains(&1));",
          "    ",
          "    assert_eq!(result_one_one.len(), 2);",
          "    assert!(result_one_one.contains(&1));",
          "    assert!(result_one_one.contains(&2));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = vec![1].into_iter().collect();",
          "    let result_zero_one = &a | &b;",
          "",
          "    let c: HashSet<i32> = vec![1].into_iter().collect();",
          "    let d: HashSet<i32> = vec![2].into_iter().collect();",
          "    let result_one_one = &c | &d;",
          "    assert_eq!(result_zero_one.len(), 1);",
          "    assert!(result_zero_one.contains(&1));",
          "    ",
          "    assert_eq!(result_one_one.len(), 2);",
          "    assert!(result_one_one.contains(&1));",
          "    assert!(result_one_one.contains(&2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    #[derive(Eq, Hash, Clone)]",
          "    struct CustomType {",
          "        id: i32,",
          "    }",
          "",
          "    let a: HashSet<CustomType> = vec![CustomType { id: 1 }, CustomType { id: 2 }].into_iter().collect();",
          "    let b: HashSet<CustomType> = vec![CustomType { id: 2 }, CustomType { id: 3 }].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&CustomType { id: 1 }));",
          "    assert!(result.contains(&CustomType { id: 2 }));",
          "    assert!(result.contains(&CustomType { id: 3 }));"
        ],
        "code": [
          "{",
          "    #[derive(Eq, Hash, Clone)]",
          "    struct CustomType {",
          "        id: i32,",
          "    }",
          "",
          "    let a: HashSet<CustomType> = vec![CustomType { id: 1 }, CustomType { id: 2 }].into_iter().collect();",
          "    let b: HashSet<CustomType> = vec![CustomType { id: 2 }, CustomType { id: 3 }].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 3);",
          "    assert!(result.contains(&CustomType { id: 1 }));",
          "    assert!(result.contains(&CustomType { id: 2 }));",
          "    assert!(result.contains(&CustomType { id: 3 }));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = vec![-1, -2, -3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&-1));",
          "    assert!(result.contains(&-2));",
          "    assert!(result.contains(&-3));",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = vec![-1, -2, -3].into_iter().collect();",
          "    let b: HashSet<i32> = vec![1, 2, 3].into_iter().collect();",
          "    let result = &a | &b;",
          "    assert_eq!(result.len(), 6);",
          "    assert!(result.contains(&-1));",
          "    assert!(result.contains(&-2));",
          "    assert!(result.contains(&-3));",
          "    assert!(result.contains(&1));",
          "    assert!(result.contains(&2));",
          "    assert!(result.contains(&3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]