[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag::EMPTY;",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "}"
        ],
        "oracle": [
          "    let tag = Tag::EMPTY;",
          "    assert!(tag.is_special());",
          "    assert!(tag.special_is_empty());",
          "    assert_eq!(fmt_buffer.to_string(), \"EMPTY\");"
        ],
        "code": [
          "{",
          "    let tag = Tag::EMPTY;",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "    let tag = Tag::EMPTY;",
          "    assert!(tag.is_special());",
          "    assert!(tag.special_is_empty());",
          "    assert_eq!(fmt_buffer.to_string(), \"EMPTY\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag::DELETED;",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "}"
        ],
        "oracle": [
          "    assert!(tag.is_special());",
          "    assert!(tag.special_is_empty());",
          "    assert_eq!(fmt_buffer.to_string(), \"DELETED\");",
          "    assert_eq!(tag.0, 0b1000_0000);",
          "    assert!(tag.is_full() == false);"
        ],
        "code": [
          "{",
          "    let tag = Tag::DELETED;",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "    assert!(tag.is_special());",
          "    assert!(tag.special_is_empty());",
          "    assert_eq!(fmt_buffer.to_string(), \"DELETED\");",
          "    assert_eq!(tag.0, 0b1000_0000);",
          "    assert!(tag.is_full() == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(255);",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "}"
        ],
        "oracle": [
          "    let tag_empty = Tag::EMPTY;",
          "    let tag_deleted = Tag::DELETED;",
          "    let tag_special_empty = Tag(0b1000_0001);",
          "    let tag_special_deleted = Tag(0b1000_0000);",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    assert_eq!(format!(\"{:?}\", tag_special_empty), \"EMPTY\");",
          "    assert_eq!(format!(\"{:?}\", tag_special_deleted), \"DELETED\");"
        ],
        "code": [
          "{",
          "    let tag = Tag(255);",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    let _ = tag.fmt(&mut fmt_buffer);",
          "    let tag_empty = Tag::EMPTY;",
          "    let tag_deleted = Tag::DELETED;",
          "    let tag_special_empty = Tag(0b1000_0001);",
          "    let tag_special_deleted = Tag(0b1000_0000);",
          "    let mut fmt_buffer = core::fmt::Formatter::new();",
          "    assert_eq!(format!(\"{:?}\", tag_special_empty), \"EMPTY\");",
          "    assert_eq!(format!(\"{:?}\", tag_special_deleted), \"DELETED\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]