[
  {
    "uses": [
      "use hashbrown::DefaultHashBuilder;",
      "use hashbrown::HashSet;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    _result.hasher() == &hasher",
          "    _result.is::<DefaultHashBuilder>()",
          "    assert_eq!(_result, &hasher)",
          "    assert!(!_result.is_null())",
          "    assert!(std::ptr::eq(_result, &hasher))",
          "    assert_eq!(set.map.hasher(), _result)"
        ],
        "code": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    _result.hasher() == &hasher",
          "    _result.is::<DefaultHashBuilder>()",
          "    assert_eq!(_result, &hasher)",
          "    assert!(!_result.is_null())",
          "    assert!(std::ptr::eq(_result, &hasher))",
          "    assert_eq!(set.map.hasher(), _result)",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<String, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::any::type_name::<&DefaultHashBuilder>(), std::any::type_name::<&set.hasher>());",
          "    assert!(!set.hasher().is_null());",
          "    assert!(std::ptr::eq(set.hasher() as *const _, hasher as *const _));",
          "    assert!(set.hasher() == &DefaultHashBuilder::default());",
          "    assert!(set.hasher() as *const _ == set.map.hasher() as *const _);",
          "    assert_eq!(set.map.hasher(), set.hasher());"
        ],
        "code": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<String, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    assert_eq!(std::any::type_name::<&DefaultHashBuilder>(), std::any::type_name::<&set.hasher>());",
          "    assert!(!set.hasher().is_null());",
          "    assert!(std::ptr::eq(set.hasher() as *const _, hasher as *const _));",
          "    assert!(set.hasher() == &DefaultHashBuilder::default());",
          "    assert!(set.hasher() as *const _ == set.map.hasher() as *const _);",
          "    assert_eq!(set.map.hasher(), set.hasher());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{DefaultHashBuilder, HashSet};",
          "",
          "    #[derive(Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<CustomStruct, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(std::ptr::eq(result, &hasher), true);",
          "    assert!(result.is::<DefaultHashBuilder>());",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let hasher: &DefaultHashBuilder = set.hasher();",
          "    assert!(std::ptr::eq(hasher, &DefaultHashBuilder::default()));"
        ],
        "code": [
          "{",
          "    use hashbrown::{DefaultHashBuilder, HashSet};",
          "",
          "    #[derive(Hash)]",
          "    struct CustomStruct {",
          "        id: i32,",
          "    }",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<CustomStruct, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    assert_eq!(std::ptr::eq(result, &hasher), true);",
          "    assert!(result.is::<DefaultHashBuilder>());",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_hasher_in(hasher, Global);",
          "    let hasher: &DefaultHashBuilder = set.hasher();",
          "    assert!(std::ptr::eq(hasher, &DefaultHashBuilder::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_result, &hasher);",
          "    assert!(std::any::TypeId::of::<&DefaultHashBuilder>() == std::any::TypeId::of_val(_result));",
          "    assert!(!std::ptr::eq(_result, &DefaultHashBuilder::default()));",
          "    assert!(std::ptr::eq(set.hasher(), &hasher));",
          "    assert!(set.hasher() as *const _ == _result as *const _);"
        ],
        "code": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32> = HashSet::with_hasher_in(hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    assert_eq!(_result, &hasher);",
          "    assert!(std::any::TypeId::of::<&DefaultHashBuilder>() == std::any::TypeId::of_val(_result));",
          "    assert!(!std::ptr::eq(_result, &DefaultHashBuilder::default()));",
          "    assert!(std::ptr::eq(set.hasher(), &hasher));",
          "    assert!(set.hasher() as *const _ == _result as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(10, hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(10, hasher.clone(), Global);",
          "    let result: &DefaultHashBuilder = set.hasher();",
          "    assert_eq!(result, &hasher);",
          "    let set_with_custom_hasher: HashSet<i32, CustomHashBuilder> = HashSet::with_capacity_and_hasher_in(10, CustomHashBuilder::new(), Global);",
          "    let result_custom: &CustomHashBuilder = set_with_custom_hasher.hasher();",
          "    assert_eq!(result_custom, &CustomHashBuilder::new());"
        ],
        "code": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(10, hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(10, hasher.clone(), Global);",
          "    let result: &DefaultHashBuilder = set.hasher();",
          "    assert_eq!(result, &hasher);",
          "    let set_with_custom_hasher: HashSet<i32, CustomHashBuilder> = HashSet::with_capacity_and_hasher_in(10, CustomHashBuilder::new(), Global);",
          "    let result_custom: &CustomHashBuilder = set_with_custom_hasher.hasher();",
          "    assert_eq!(result_custom, &CustomHashBuilder::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(0, hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "}"
        ],
        "oracle": [
          "    assert!(_result as *const _ == set.map.hasher() as *const _);",
          "    assert_eq!(std::mem::size_of_val(_result), std::mem::size_of::<DefaultHashBuilder>());",
          "    assert!(std::ptr::eq(_result, &set.map.hash_builder));"
        ],
        "code": [
          "{",
          "    use hashbrown::DefaultHashBuilder;",
          "    use hashbrown::HashSet;",
          "",
          "    let hasher = DefaultHashBuilder::default();",
          "    let set: HashSet<i32, DefaultHashBuilder> = HashSet::with_capacity_and_hasher_in(0, hasher, Global);",
          "    let _result: &DefaultHashBuilder = set.hasher();",
          "    assert!(_result as *const _ == set.map.hasher() as *const _);",
          "    assert_eq!(std::mem::size_of_val(_result), std::mem::size_of::<DefaultHashBuilder>());",
          "    assert!(std::ptr::eq(_result, &set.map.hash_builder));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]