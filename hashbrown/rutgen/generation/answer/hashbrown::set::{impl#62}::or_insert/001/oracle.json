[
  {
    "uses": [
      "use core::hash::BuildHasherDefault;",
      "use std::hash::Hash;",
      "use hashbrown::HashSet;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use core::hash::BuildHasherDefault;",
          "    use std::hash::Hash;",
          "",
          "    struct CustomHasher;",
          "    ",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<&str, BuildHasherDefault<CustomHasher>> = HashSet::new();",
          "    let entry = set.entry(\"new_entry\"); // Entry::Vacant expected here",
          "    entry.or_insert();",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(\"new_entry\"));",
          "    assert_eq!(set.len(), 1);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use core::hash::BuildHasherDefault;",
          "    use std::hash::Hash;",
          "",
          "    struct CustomHasher;",
          "    ",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<&str, BuildHasherDefault<CustomHasher>> = HashSet::new();",
          "    let entry = set.entry(\"new_entry\"); // Entry::Vacant expected here",
          "    entry.or_insert();",
          "    assert!(set.contains(\"new_entry\"));",
          "    assert_eq!(set.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use core::hash::BuildHasherDefault;",
          "    use std::hash::Hash;",
          "",
          "    struct CustomHasher;",
          "",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<&str, BuildHasherDefault<CustomHasher>> = HashSet::new();",
          "    set.insert(\"existing_entry\");",
          "    let entry = set.entry(\"existing_entry\"); // Entry::Occupied expected here",
          "    entry.or_insert(); // Should not panic or change set state",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(\"existing_entry\"));",
          "    assert_eq!(set.len(), 1);",
          "    let entry = set.entry(\"nonexistent_entry\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    entry.or_insert();",
          "    assert!(set.contains(\"nonexistent_entry\"));",
          "    assert_eq!(set.len(), 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use core::hash::BuildHasherDefault;",
          "    use std::hash::Hash;",
          "",
          "    struct CustomHasher;",
          "",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<&str, BuildHasherDefault<CustomHasher>> = HashSet::new();",
          "    set.insert(\"existing_entry\");",
          "    let entry = set.entry(\"existing_entry\"); // Entry::Occupied expected here",
          "    entry.or_insert(); // Should not panic or change set state",
          "    assert!(set.contains(\"existing_entry\"));",
          "    assert_eq!(set.len(), 1);",
          "    let entry = set.entry(\"nonexistent_entry\");",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    entry.or_insert();",
          "    assert!(set.contains(\"nonexistent_entry\"));",
          "    assert_eq!(set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]