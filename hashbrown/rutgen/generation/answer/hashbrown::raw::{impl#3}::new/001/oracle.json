[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<f64>();",
          "    let expected_size = std::mem::size_of::<f64>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(layout.size, std::mem::size_of::<f64>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "    assert_eq!(layout.ctrl_align, std::mem::align_of::<f64>());"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<f64>();",
          "    let expected_size = std::mem::size_of::<f64>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "    assert_eq!(layout.size, std::mem::size_of::<f64>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "    assert_eq!(layout.ctrl_align, std::mem::align_of::<f64>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<*const f64>();",
          "    let expected_size = std::mem::size_of::<*const f64>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "}"
        ],
        "oracle": [
          "    let layout = TableLayout::new::<*const f64>();",
          "    assert_eq!(layout.size, std::mem::size_of::<*const f64>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<*const f64>();",
          "    let expected_size = std::mem::size_of::<*const f64>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "    let layout = TableLayout::new::<*const f64>();",
          "    assert_eq!(layout.size, std::mem::size_of::<*const f64>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<[f64; 100]>();",
          "    let expected_size = std::mem::size_of::<[f64; 100]>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(layout.size, std::mem::size_of::<[f64; 100]>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);"
        ],
        "code": [
          "{",
          "    struct TestStruct;",
          "",
          "    let layout = TableLayout::new::<[f64; 100]>();",
          "    let expected_size = std::mem::size_of::<[f64; 100]>();",
          "    assert_eq!(layout.size, expected_size);",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "    assert_eq!(layout.size, std::mem::size_of::<[f64; 100]>());",
          "    assert!(layout.ctrl_align > Group::WIDTH);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]