[
  {
    "uses": [
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, usize> = HashMap::new();",
          "    ",
          "    map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // This is to ensure that after inserting using the or_insert_with_key,",
          "    // the value should be 9 as \"poneyland\" has 9 characters.",
          "    let value: &mut usize = map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*value, 9);",
          "    assert_eq!(map[\"poneyland\"], 9);",
          "    let value_existing: &mut usize = map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10);",
          "    assert_eq!(*value_existing, 9);",
          "    *value_existing *= 2;",
          "    assert_eq!(map[\"poneyland\"], 18);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, usize> = HashMap::new();",
          "    ",
          "    map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // This is to ensure that after inserting using the or_insert_with_key,",
          "    // the value should be 9 as \"poneyland\" has 9 characters.",
          "    let value: &mut usize = map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count());",
          "    assert_eq!(*value, 9);",
          "    assert_eq!(map[\"poneyland\"], 9);",
          "    let value_existing: &mut usize = map.entry_ref(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10);",
          "    assert_eq!(*value_existing, 9);",
          "    *value_existing *= 2;",
          "    assert_eq!(map[\"poneyland\"], 18);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, usize> = HashMap::new();",
          "    ",
          "    // Inserting a value which is not present in the HashMap",
          "    map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // Checking a second nonexistent key",
          "    map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // Ensure both inserted values are as expected",
          "    let value1: &mut usize = map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count());",
          "    let value2: &mut usize = map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(*map.get(\"unicorn\").unwrap(), 7);",
          "    assert_eq!(*map.get(\"dragon\").unwrap(), 6);",
          "    assert_eq!(map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count()), value1);",
          "    assert_eq!(map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count()), value2);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, usize> = HashMap::new();",
          "    ",
          "    // Inserting a value which is not present in the HashMap",
          "    map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // Checking a second nonexistent key",
          "    map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count());",
          "",
          "    // Ensure both inserted values are as expected",
          "    let value1: &mut usize = map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count());",
          "    let value2: &mut usize = map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count());",
          "    assert_eq!(*map.get(\"unicorn\").unwrap(), 7);",
          "    assert_eq!(*map.get(\"dragon\").unwrap(), 6);",
          "    assert_eq!(map.entry_ref(\"unicorn\").or_insert_with_key(|key| key.chars().count()), value1);",
          "    assert_eq!(map.entry_ref(\"dragon\").or_insert_with_key(|key| key.chars().count()), value2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, f64> = HashMap::new();",
          "",
          "    // Key with a value that matches the default function's expected return type",
          "    map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    ",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"floaty\"], 9.0);",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    assert_eq!(*value, 9.0);",
          "    *value += 10.0;",
          "    assert_eq!(map[\"floaty\"], 19.0);",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    assert_eq!(*value, 19.0);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "",
          "    let mut map: HashMap<String, f64> = HashMap::new();",
          "",
          "    // Key with a value that matches the default function's expected return type",
          "    map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    ",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    assert_eq!(map[\"floaty\"], 9.0);",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    assert_eq!(*value, 9.0);",
          "    *value += 10.0;",
          "    assert_eq!(map[\"floaty\"], 19.0);",
          "    let value: &mut f64 = map.entry_ref(\"floaty\").or_insert_with_key(|key| key.chars().count() as f64 * 1.5);",
          "    assert_eq!(*value, 19.0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]