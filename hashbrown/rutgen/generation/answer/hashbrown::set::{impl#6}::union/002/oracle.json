[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(4);",
          "    ",
          "    let union = a.union(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(union.iter.count() == 4);",
          "    assert!(union.contains(&1));",
          "    assert!(union.contains(&2));",
          "    assert!(union.contains(&3));",
          "    assert!(union.contains(&4));",
          "    assert!(!union.contains(&5));",
          "    assert_eq!(union.len(), 4);"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(4);",
          "    ",
          "    let union = a.union(&b);",
          "    assert!(union.iter.count() == 4);",
          "    assert!(union.contains(&1));",
          "    assert!(union.contains(&2));",
          "    assert!(union.contains(&3));",
          "    assert!(union.contains(&4));",
          "    assert!(!union.contains(&5));",
          "    assert_eq!(union.len(), 4);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(2);",
          "    b.insert(4);",
          "    ",
          "    let union = a.union(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(union.iter.len(), 4);",
          "    assert!(union.iter.contains(&1));",
          "    assert!(union.iter.contains(&2));",
          "    assert!(union.iter.contains(&3));",
          "    assert!(union.iter.contains(&4));",
          "    assert!(!union.iter.contains(&5));",
          "    assert!(b.len() < a.len());",
          "    assert!(union.iter.len() > a.len());"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(2);",
          "    b.insert(4);",
          "    ",
          "    let union = a.union(&b);",
          "    assert_eq!(union.iter.len(), 4);",
          "    assert!(union.iter.contains(&1));",
          "    assert!(union.iter.contains(&2));",
          "    assert!(union.iter.contains(&3));",
          "    assert!(union.iter.contains(&4));",
          "    assert!(!union.iter.contains(&5));",
          "    assert!(b.len() < a.len());",
          "    assert!(union.iter.len() > a.len());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(1);",
          "    b.insert(2);",
          "    b.insert(3);",
          "    ",
          "    let union = a.union(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(union.iter.larger.len() > union.iter.smaller.len());",
          "    assert_eq!(union.iter.chain(0).count(), 3);",
          "    assert!(union.iter.larger.contains(&1));",
          "    assert!(union.iter.larger.contains(&2));",
          "    assert!(union.iter.larger.contains(&3));",
          "    assert_eq!(union.iter.smaller.iter().count(), 0);",
          "    assert!(union.iter.larger.is_disjoint(&union.iter.smaller));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    a.insert(2);",
          "    a.insert(3);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(1);",
          "    b.insert(2);",
          "    b.insert(3);",
          "    ",
          "    let union = a.union(&b);",
          "    assert!(union.iter.larger.len() > union.iter.smaller.len());",
          "    assert_eq!(union.iter.chain(0).count(), 3);",
          "    assert!(union.iter.larger.contains(&1));",
          "    assert!(union.iter.larger.contains(&2));",
          "    assert!(union.iter.larger.contains(&3));",
          "    assert_eq!(union.iter.smaller.iter().count(), 0);",
          "    assert!(union.iter.larger.is_disjoint(&union.iter.smaller));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(10);",
          "    a.insert(20);",
          "    a.insert(30);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(15);",
          "    b.insert(25);",
          "    ",
          "    let union = a.union(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(union.iter.len() == 5);",
          "    assert!(union.iter.contains(&10));",
          "    assert!(union.iter.contains(&20));",
          "    assert!(union.iter.contains(&30));",
          "    assert!(union.iter.contains(&15));",
          "    assert!(union.iter.contains(&25));",
          "    assert!(!union.iter.contains(&5));",
          "    assert!(!union.iter.contains(&100));"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(10);",
          "    a.insert(20);",
          "    a.insert(30);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    b.insert(15);",
          "    b.insert(25);",
          "    ",
          "    let union = a.union(&b);",
          "    assert!(union.iter.len() == 5);",
          "    assert!(union.iter.contains(&10));",
          "    assert!(union.iter.contains(&20));",
          "    assert!(union.iter.contains(&30));",
          "    assert!(union.iter.contains(&15));",
          "    assert!(union.iter.contains(&25));",
          "    assert!(!union.iter.contains(&5));",
          "    assert!(!union.iter.contains(&100));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    ",
          "    let union = a.union(&b);",
          "}"
        ],
        "oracle": [
          "    assert!(union.iter.size_hint().0 == 1);",
          "    assert!(union.iter.count() == 1);",
          "    assert!(union.iter.next() == Some(&1));",
          "    assert!(union.iter.clone().count() == 1);",
          "    assert_eq!(union.iter.len(), 1);",
          "    assert!(union.iter.is_empty() == false);",
          "    assert!(union.iter.is_disjoint(&b) == true);",
          "    assert!(union.iter.iter().collect::<HashSet<_>>() == [1].iter().collect());"
        ],
        "code": [
          "{",
          "    let mut a: HashSet<_> = HashSet::new();",
          "    a.insert(1);",
          "    ",
          "    let mut b: HashSet<_> = HashSet::new();",
          "    ",
          "    let union = a.union(&b);",
          "    assert!(union.iter.size_hint().0 == 1);",
          "    assert!(union.iter.count() == 1);",
          "    assert!(union.iter.next() == Some(&1));",
          "    assert!(union.iter.clone().count() == 1);",
          "    assert_eq!(union.iter.len(), 1);",
          "    assert!(union.iter.is_empty() == false);",
          "    assert!(union.iter.is_disjoint(&b) == true);",
          "    assert!(union.iter.iter().collect::<HashSet<_>>() == [1].iter().collect());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]