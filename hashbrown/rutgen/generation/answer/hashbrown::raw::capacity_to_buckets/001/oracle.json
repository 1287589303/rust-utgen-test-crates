[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 1;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 1;",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 3;",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 7;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 15;",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 16;",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 100;",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 0;",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(capacity_to_buckets(cap), expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 1;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 1;",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 3;",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 7;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 15;",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 16;",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 100;",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "    ",
          "    let cap: usize = 0;",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(capacity_to_buckets(cap), expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 7;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 0;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 7;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 0;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 6;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 6;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 6;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 6;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 7;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 1;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 15;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 16;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 100;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 7;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 1;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 3;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(4);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 4;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 5;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(8);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 15;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 16;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = 100;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);",
          "    ",
          "    let cap: usize = usize::MAX;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = None;",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 8;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(16);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 16;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(32);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 0; let result = capacity_to_buckets(cap); let expected: Option<usize> = None; assert_eq!(result, expected);",
          "    let cap: usize = 1; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(4); assert_eq!(result, expected);",
          "    let cap: usize = 4; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(8); assert_eq!(result, expected);",
          "    let cap: usize = 7; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(8); assert_eq!(result, expected);",
          "    let cap: usize = 8; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(16); assert_eq!(result, expected);",
          "    let cap: usize = 15; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(32); assert_eq!(result, expected);",
          "    let cap: usize = 16; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(32); assert_eq!(result, expected);",
          "    let cap: usize = 100; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(128); assert_eq!(result, expected);",
          "    let cap: usize = usize::MAX; let result = capacity_to_buckets(cap); let expected: Option<usize> = None; assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 16;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(32);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 0; let result = capacity_to_buckets(cap); let expected: Option<usize> = None; assert_eq!(result, expected);",
          "    let cap: usize = 1; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(4); assert_eq!(result, expected);",
          "    let cap: usize = 4; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(8); assert_eq!(result, expected);",
          "    let cap: usize = 7; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(8); assert_eq!(result, expected);",
          "    let cap: usize = 8; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(16); assert_eq!(result, expected);",
          "    let cap: usize = 15; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(32); assert_eq!(result, expected);",
          "    let cap: usize = 16; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(32); assert_eq!(result, expected);",
          "    let cap: usize = 100; let result = capacity_to_buckets(cap); let expected: Option<usize> = Some(128); assert_eq!(result, expected);",
          "    let cap: usize = usize::MAX; let result = capacity_to_buckets(cap); let expected: Option<usize> = None; assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 32;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(64);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(capacity_to_buckets(0), None);",
          "    assert_eq!(capacity_to_buckets(1), Some(4));",
          "    assert_eq!(capacity_to_buckets(3), Some(4));",
          "    assert_eq!(capacity_to_buckets(4), Some(8));",
          "    assert_eq!(capacity_to_buckets(7), Some(8));",
          "    assert_eq!(capacity_to_buckets(8), Some(16));",
          "    assert_eq!(capacity_to_buckets(15), Some(16));",
          "    assert_eq!(capacity_to_buckets(16), Some(32));",
          "    assert_eq!(capacity_to_buckets(31), Some(32));",
          "    assert_eq!(capacity_to_buckets(32), Some(64));",
          "    assert_eq!(capacity_to_buckets(63), Some(64));",
          "    assert_eq!(capacity_to_buckets(64), Some(128));",
          "    assert_eq!(capacity_to_buckets(127), Some(128));",
          "    assert_eq!(capacity_to_buckets(128), Some(256));",
          "    assert_eq!(capacity_to_buckets(255), Some(256));",
          "    assert_eq!(capacity_to_buckets(256), Some(512));",
          "    assert_eq!(capacity_to_buckets(511), Some(512));",
          "    assert!(capacity_to_buckets(usize::MAX).is_none());"
        ],
        "code": [
          "{",
          "    let cap: usize = 32;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(64);",
          "    assert_eq!(result, expected);",
          "    assert_eq!(capacity_to_buckets(0), None);",
          "    assert_eq!(capacity_to_buckets(1), Some(4));",
          "    assert_eq!(capacity_to_buckets(3), Some(4));",
          "    assert_eq!(capacity_to_buckets(4), Some(8));",
          "    assert_eq!(capacity_to_buckets(7), Some(8));",
          "    assert_eq!(capacity_to_buckets(8), Some(16));",
          "    assert_eq!(capacity_to_buckets(15), Some(16));",
          "    assert_eq!(capacity_to_buckets(16), Some(32));",
          "    assert_eq!(capacity_to_buckets(31), Some(32));",
          "    assert_eq!(capacity_to_buckets(32), Some(64));",
          "    assert_eq!(capacity_to_buckets(63), Some(64));",
          "    assert_eq!(capacity_to_buckets(64), Some(128));",
          "    assert_eq!(capacity_to_buckets(127), Some(128));",
          "    assert_eq!(capacity_to_buckets(128), Some(256));",
          "    assert_eq!(capacity_to_buckets(255), Some(256));",
          "    assert_eq!(capacity_to_buckets(256), Some(512));",
          "    assert_eq!(capacity_to_buckets(511), Some(512));",
          "    assert!(capacity_to_buckets(usize::MAX).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let cap: usize = 64;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "oracle": [
          "    let cap: usize = 64;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);"
        ],
        "code": [
          "{",
          "    let cap: usize = 64;",
          "    let result = capacity_to_buckets(cap);",
          "",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);",
          "    let cap: usize = 64;",
          "    let result = capacity_to_buckets(cap);",
          "    let expected: Option<usize> = Some(128);",
          "    assert_eq!(result, expected);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]