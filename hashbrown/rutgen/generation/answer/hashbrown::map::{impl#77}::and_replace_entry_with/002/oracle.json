[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 100);",
          "    ",
          "    let entry = map",
          "        .entry(\"key1\")",
          "        .and_replace_entry_with(|_k, v| Some(v + 1));",
          "    ",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            let new_value = e.get();",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key1\"], 101);",
          "    assert!(map.contains_key(\"key1\"));",
          "    let entry = map.entry(\"key1\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"key1\"); Some(v + 1) });",
          "    match entry { Entry::Occupied(e) => assert_eq!(e.get(), &102), Entry::Vacant(_) => panic!() }",
          "    assert_eq!(map[\"key1\"], 102);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 100);",
          "    ",
          "    let entry = map",
          "        .entry(\"key1\")",
          "        .and_replace_entry_with(|_k, v| Some(v + 1));",
          "    ",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            let new_value = e.get();",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"key1\"], 101);",
          "    assert!(map.contains_key(\"key1\"));",
          "    let entry = map.entry(\"key1\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"key1\"); Some(v + 1) });",
          "    match entry { Entry::Occupied(e) => assert_eq!(e.get(), &102), Entry::Vacant(_) => panic!() }",
          "    assert_eq!(map[\"key1\"], 102);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key2\", 200);",
          "    ",
          "    let entry = map",
          "        .entry(\"key2\")",
          "        .and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            let key = e.key();",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(\"key2\"));",
          "    assert_eq!(map[\"key2\"], 200);",
          "    map.insert(\"key2\", 200);",
          "    let entry = map.entry(\"key2\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"key2\"); assert_eq!(v, 200); None });",
          "    match entry { Entry::Vacant(e) => assert_eq!(e.key(), &\"key2\"), Entry::Occupied(_) => panic!(), }",
          "    assert!(!map.contains_key(\"key2\"));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key2\", 200);",
          "    ",
          "    let entry = map",
          "        .entry(\"key2\")",
          "        .and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            let key = e.key();",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert!(map.contains_key(\"key2\"));",
          "    assert_eq!(map[\"key2\"], 200);",
          "    map.insert(\"key2\", 200);",
          "    let entry = map.entry(\"key2\").and_replace_entry_with(|k, v| { assert_eq!(k, &\"key2\"); assert_eq!(v, 200); None });",
          "    match entry { Entry::Vacant(e) => assert_eq!(e.key(), &\"key2\"), Entry::Occupied(_) => panic!(), }",
          "    assert!(!map.contains_key(\"key2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 0);",
          "    ",
          "    let entry = map",
          "        .entry(\"key3\")",
          "        .and_replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"key3\");",
          "            Some(v + 1) // incrementing 0 to 1",
          "        });",
          "    ",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            let updated_value = e.get();",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key3\"], 1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 0);",
          "    ",
          "    let entry = map",
          "        .entry(\"key3\")",
          "        .and_replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"key3\");",
          "            Some(v + 1) // incrementing 0 to 1",
          "        });",
          "    ",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            let updated_value = e.get();",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"key3\"], 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]