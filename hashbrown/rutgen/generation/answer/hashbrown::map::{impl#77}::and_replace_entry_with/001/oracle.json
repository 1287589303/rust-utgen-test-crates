[
  {
    "uses": [
      "use hashbrown::hash_map::Entry;",
      "use hashbrown::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(\"test_vacant\".to_string()).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &\"test_vacant\".to_string());",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(\"test_vacant\".to_string()).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &\"test_vacant\".to_string());",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(\"vacant_key\").and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry, Entry::Vacant(e));",
          "    assert_eq!(e.key(), &\"vacant_key\");",
          "    assert_eq!(map.contains_key(\"vacant_key\"), false);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(\"vacant_key\").and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry, Entry::Vacant(e));",
          "    assert_eq!(e.key(), &\"vacant_key\");",
          "    assert_eq!(map.contains_key(\"vacant_key\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(10).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &10);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry(10).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &10);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<(i32, i32), i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry((1, 2)).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry, Entry::Vacant(e));",
          "    assert_eq!(e.key(), &(1, 2));",
          "    assert!(!map.contains_key(&(1, 2)));",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<(i32, i32), i32> = HashMap::new();",
          "    ",
          "    let entry = map.entry((1, 2)).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert_eq!(entry, Entry::Vacant(e));",
          "    assert_eq!(e.key(), &(1, 2));",
          "    assert!(!map.contains_key(&(1, 2)));",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<f64, f64> = HashMap::new();",
          "    ",
          "    let entry = map.entry(3.14).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &3.14);",
          "    assert!(!map.contains_key(&3.14));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<f64, f64> = HashMap::new();",
          "    ",
          "    let entry = map.entry(3.14).and_replace_entry_with(|_k, _v| None);",
          "    ",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            // e is expected to be vacant",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "    assert!(matches!(entry, Entry::Vacant(_)));",
          "    assert_eq!(entry.key(), &3.14);",
          "    assert!(!map.contains_key(&3.14));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]