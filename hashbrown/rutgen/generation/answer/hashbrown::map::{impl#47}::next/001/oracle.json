[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(&'static str);",
          "    struct TestValue(i32);",
          "",
          "    impl Borrow<str> for TestKey {",
          "        fn borrow(&self) -> &str {",
          "            self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let key_value_pair = (TestKey(\"key1\"), TestValue(42));",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&[key_value_pair], 1),",
          "        items: 1,",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Some((&key_value_pair.0, &key_value_pair.1)));"
        ],
        "code": [
          "{",
          "    struct TestKey(&'static str);",
          "    struct TestValue(i32);",
          "",
          "    impl Borrow<str> for TestKey {",
          "        fn borrow(&self) -> &str {",
          "            self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let key_value_pair = (TestKey(\"key1\"), TestValue(42));",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&[key_value_pair], 1),",
          "        items: 1,",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "    assert_eq!(result, Some((&key_value_pair.0, &key_value_pair.1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(&'static str);",
          "    struct TestValue(i32);",
          "",
          "    impl Borrow<str> for TestKey {",
          "        fn borrow(&self) -> &str {",
          "            self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let pairs = [",
          "        (TestKey(\"key1\"), TestValue(42)),",
          "        (TestKey(\"key2\"), TestValue(84)),",
          "    ];",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&pairs, pairs.len()),",
          "        items: pairs.len(),",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "    let result2 = iter_wrapper.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some((&TestKey(\"key1\"), &TestValue(42))));",
          "    assert!(result2.is_some());",
          "    assert_eq!(result2, Some((&TestKey(\"key2\"), &TestValue(84))));"
        ],
        "code": [
          "{",
          "    struct TestKey(&'static str);",
          "    struct TestValue(i32);",
          "",
          "    impl Borrow<str> for TestKey {",
          "        fn borrow(&self) -> &str {",
          "            self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let pairs = [",
          "        (TestKey(\"key1\"), TestValue(42)),",
          "        (TestKey(\"key2\"), TestValue(84)),",
          "    ];",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&pairs, pairs.len()),",
          "        items: pairs.len(),",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "    let result2 = iter_wrapper.next();",
          "    assert!(result.is_some());",
          "    assert_eq!(result, Some((&TestKey(\"key1\"), &TestValue(42))));",
          "    assert!(result2.is_some());",
          "    assert_eq!(result2, Some((&TestKey(\"key2\"), &TestValue(84))));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestKey(u32);",
          "    struct TestValue(bool);",
          "",
          "    impl Borrow<u32> for TestKey {",
          "        fn borrow(&self) -> &u32 {",
          "            &self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let key_value_pair = (TestKey(1), TestValue(true));",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&[key_value_pair], 1),",
          "        items: 1,",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(key.borrow(), &1);",
          "    assert_eq!(*value, true);"
        ],
        "code": [
          "{",
          "    struct TestKey(u32);",
          "    struct TestValue(bool);",
          "",
          "    impl Borrow<u32> for TestKey {",
          "        fn borrow(&self) -> &u32 {",
          "            &self.0",
          "        }",
          "    }",
          "",
          "    impl Debug for TestKey {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestKey({})\", self.0)",
          "        }",
          "    }",
          "",
          "    impl Debug for TestValue {",
          "        fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
          "            write!(f, \"TestValue({})\", self.0)",
          "        }",
          "    }",
          "",
          "    let key_value_pair = (TestKey(1), TestValue(true));",
          "    let mut iter = RawIter {",
          "        iter: RawIterRange::new(&[key_value_pair], 1),",
          "        items: 1,",
          "    };",
          "",
          "    let mut iter_wrapper = Iter {",
          "        inner: iter,",
          "        marker: PhantomData,",
          "    };",
          "",
          "    let result = iter_wrapper.next();",
          "    assert!(result.is_some());",
          "    let (key, value) = result.unwrap();",
          "    assert_eq!(key.borrow(), &1);",
          "    assert_eq!(*value, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]