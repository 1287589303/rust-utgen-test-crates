[
  {
    "uses": [
      "use hashbrown::HashTable;",
      "use hashbrown::DefaultHashBuilder;",
      "use std::hash::BuildHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"poneyland\"), \"poneyland\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry by accessing it",
          "    let entry = table.entry(hasher_fn(\"poneyland\"), |x| x == \"poneyland\", hasher_fn);",
          "",
          "    // Call or_insert_with on the occupied entry",
          "    entry.or_insert_with(|| \"default_value\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected occupied entry\"); };",
          "    assert_eq!(occupied_entry.get(), \"poneyland\");"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"poneyland\"), \"poneyland\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry by accessing it",
          "    let entry = table.entry(hasher_fn(\"poneyland\"), |x| x == \"poneyland\", hasher_fn);",
          "",
          "    // Call or_insert_with on the occupied entry",
          "    entry.or_insert_with(|| \"default_value\".to_string());",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected occupied entry\"); };",
          "    assert_eq!(occupied_entry.get(), \"poneyland\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"otherland\"), \"otherland\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry with the \"otherland\" key",
          "    let entry = table.entry(hasher_fn(\"otherland\"), |x| x == \"otherland\", hasher_fn);",
          "    ",
          "    // Call or_insert_with to ensure it does not change the existing value",
          "    entry.or_insert_with(|| \"default_value\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.find(hasher_fn(\"otherland\"), |x| x == \"otherland\"), Some(&\"otherland\".to_string()));",
          "    assert_eq!(table.find(hasher_fn(\"otherland\"), |x| x == \"default_value\"), None);",
          "    assert!(entry.is::<Entry::Occupied>());",
          "    assert!(entry.get().is_eq(\"otherland\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"otherland\"), \"otherland\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry with the \"otherland\" key",
          "    let entry = table.entry(hasher_fn(\"otherland\"), |x| x == \"otherland\", hasher_fn);",
          "    ",
          "    // Call or_insert_with to ensure it does not change the existing value",
          "    entry.or_insert_with(|| \"default_value\".to_string());",
          "    assert_eq!(table.find(hasher_fn(\"otherland\"), |x| x == \"otherland\"), Some(&\"otherland\".to_string()));",
          "    assert_eq!(table.find(hasher_fn(\"otherland\"), |x| x == \"default_value\"), None);",
          "    assert!(entry.is::<Entry::Occupied>());",
          "    assert!(entry.get().is_eq(\"otherland\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"same_value\"), \"same_value\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry with the \"same_value\" key",
          "    let entry = table.entry(hasher_fn(\"same_value\"), |x| x == \"same_value\", hasher_fn);",
          "    ",
          "    // Call or_insert_with to ensure it does not change the existing value",
          "    entry.or_insert_with(|| \"new_value\".to_string());",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.get(), \"same_value\");",
          "    assert!(table.find(hasher_fn(\"same_value\"), |x| x == \"same_value\").is_some());",
          "    assert_eq!(table.entry(hasher_fn(\"same_value\"), |x| x == \"same_value\", hasher_fn).or_insert_with(|| \"new_value\".to_string()).get(), \"same_value\");",
          "    assert!(table.find(hasher_fn(\"same_value\"), |x| x == \"same_value\").is_some());",
          "    assert!(table.find(hasher_fn(\"new_value\"), |x| x == \"new_value\").is_none());"
        ],
        "code": [
          "{",
          "    use hashbrown::{HashTable, DefaultHashBuilder};",
          "    use std::hash::BuildHasher;",
          "",
          "    let mut table: HashTable<String> = HashTable::new();",
          "    let hasher = DefaultHashBuilder::default();",
          "    let hasher_fn = |val: &_| hasher.hash_one(val);",
          "    ",
          "    // Insert an initial value to occupy the entry",
          "    table.insert_unique(hasher_fn(\"same_value\"), \"same_value\".to_string(), hasher_fn);",
          "",
          "    // Create an occupied entry with the \"same_value\" key",
          "    let entry = table.entry(hasher_fn(\"same_value\"), |x| x == \"same_value\", hasher_fn);",
          "    ",
          "    // Call or_insert_with to ensure it does not change the existing value",
          "    entry.or_insert_with(|| \"new_value\".to_string());",
          "    assert_eq!(entry.get(), \"same_value\");",
          "    assert!(table.find(hasher_fn(\"same_value\"), |x| x == \"same_value\").is_some());",
          "    assert_eq!(table.entry(hasher_fn(\"same_value\"), |x| x == \"same_value\", hasher_fn).or_insert_with(|| \"new_value\".to_string()).get(), \"same_value\");",
          "    assert!(table.find(hasher_fn(\"same_value\"), |x| x == \"same_value\").is_some());",
          "    assert!(table.find(hasher_fn(\"new_value\"), |x| x == \"new_value\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]