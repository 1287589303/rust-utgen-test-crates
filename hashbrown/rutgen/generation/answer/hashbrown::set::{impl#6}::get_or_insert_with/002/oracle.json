[
  {
    "uses": [
      "use hashbrown::HashSet;",
      "use std::collections::hash_map::DefaultHasher;",
      "use std::hash::Hasher;",
      "use std::hash::Hash;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    struct MyHashBuilder;",
          "",
          "    impl BuildHasher for MyHashBuilder {",
          "        fn build_hasher(&self) -> DefaultHasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct MyValue {",
          "        id: i32,",
          "    }",
          "",
          "    impl Equivalent<MyValue> for MyValue {",
          "        fn equivalent(&self, other: &MyValue) -> bool {",
          "            self.id == other.id",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<MyValue, MyHashBuilder> = HashSet::new();",
          "    set.insert(MyValue { id: 1 });",
          "",
          "    let value = MyValue { id: 2 };",
          "    let f = |val: &MyValue| MyValue { id: 3 }; // Creates a new value that doesn't match",
          "",
          "    let _result = set.get_or_insert_with(&value, f);",
          "}"
        ],
        "oracle": [
          "    assert!(set.map.find_or_find_insert_slot(make_hash(&set.map.hash_builder, &value), &value).is_err());",
          "    assert!(!value.equivalent(&f(&value)));",
          "    assert_eq!(set.len(), 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    struct MyHashBuilder;",
          "",
          "    impl BuildHasher for MyHashBuilder {",
          "        fn build_hasher(&self) -> DefaultHasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct MyValue {",
          "        id: i32,",
          "    }",
          "",
          "    impl Equivalent<MyValue> for MyValue {",
          "        fn equivalent(&self, other: &MyValue) -> bool {",
          "            self.id == other.id",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<MyValue, MyHashBuilder> = HashSet::new();",
          "    set.insert(MyValue { id: 1 });",
          "",
          "    let value = MyValue { id: 2 };",
          "    let f = |val: &MyValue| MyValue { id: 3 }; // Creates a new value that doesn't match",
          "",
          "    let _result = set.get_or_insert_with(&value, f);",
          "    assert!(set.map.find_or_find_insert_slot(make_hash(&set.map.hash_builder, &value), &value).is_err());",
          "    assert!(!value.equivalent(&f(&value)));",
          "    assert_eq!(set.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    struct MyHashBuilder;",
          "",
          "    impl BuildHasher for MyHashBuilder {",
          "        fn build_hasher(&self) -> DefaultHasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct MyValue {",
          "        id: i32,",
          "    }",
          "",
          "    impl Equivalent<MyValue> for MyValue {",
          "        fn equivalent(&self, other: &MyValue) -> bool {",
          "            self.id == other.id",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<MyValue, MyHashBuilder> = HashSet::new();",
          "    set.insert(MyValue { id: 1 });",
          "",
          "    let value = MyValue { id: 1 }; // Existing value",
          "    let f = |val: &MyValue| MyValue { id: 2 }; // New value that doesn't match the existing one",
          "",
          "    let _result = set.get_or_insert_with(&value, f); // This should panic",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.find_or_find_insert_slot(hash, value), Err(slot));",
          "    assert!(!value.equivalent(&new));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{Hash, Hasher};",
          "",
          "    struct MyHashBuilder;",
          "",
          "    impl BuildHasher for MyHashBuilder {",
          "        fn build_hasher(&self) -> DefaultHasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    #[derive(Hash, Eq, PartialEq)]",
          "    struct MyValue {",
          "        id: i32,",
          "    }",
          "",
          "    impl Equivalent<MyValue> for MyValue {",
          "        fn equivalent(&self, other: &MyValue) -> bool {",
          "            self.id == other.id",
          "        }",
          "    }",
          "",
          "    let mut set: HashSet<MyValue, MyHashBuilder> = HashSet::new();",
          "    set.insert(MyValue { id: 1 });",
          "",
          "    let value = MyValue { id: 1 }; // Existing value",
          "    let f = |val: &MyValue| MyValue { id: 2 }; // New value that doesn't match the existing one",
          "",
          "    let _result = set.get_or_insert_with(&value, f); // This should panic",
          "    assert_eq!(set.map.find_or_find_insert_slot(hash, value), Err(slot));",
          "    assert!(!value.equivalent(&new));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]