[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<(), (), MyAllocator> = IntoValues::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_value.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<(), (), MyAllocator> = IntoValues::default();",
          "    assert_eq!(_value.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<i32, String, MyAllocator> = IntoValues::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_value.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<i32, String, MyAllocator> = IntoValues::default();",
          "    assert_eq!(_value.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<isize, f32, MyAllocator> = IntoValues::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_value.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct MyAllocator;",
          "",
          "    unsafe impl Allocator for MyAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Ok(core::ptr::NonNull::dangling())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let _value: IntoValues<isize, f32, MyAllocator> = IntoValues::default();",
          "    assert_eq!(_value.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]