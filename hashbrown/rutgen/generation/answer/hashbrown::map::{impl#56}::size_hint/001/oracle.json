[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let iter: IntoIter<i32, i32> = IntoIter { inner: RawIntoIter { iter: RawIter::empty(), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (0, Some(0)));"
        ],
        "code": [
          "{",
          "    let iter: IntoIter<i32, i32> = IntoIter { inner: RawIntoIter { iter: RawIter::empty(), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "    assert_eq!(hint, (0, Some(0)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(1, 2), (3, 4)], 2), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 2);",
          "    assert_eq!(hint.1, Some(2));"
        ],
        "code": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(1, 2), (3, 4)], 2), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "    assert_eq!(hint.0, 2);",
          "    assert_eq!(hint.1, Some(2));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(5, 6), (7, 8), (9, 10)], 3), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 3);",
          "    assert_eq!(hint.1, Some(3));",
          "    assert!(hint.0 <= hint.1.unwrap());"
        ],
        "code": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(5, 6), (7, 8), (9, 10)], 3), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "    assert_eq!(hint.0, 3);",
          "    assert_eq!(hint.1, Some(3));",
          "    assert!(hint.0 <= hint.1.unwrap());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(11, 12)], 1), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 1);",
          "    assert_eq!(hint.1, Some(1));"
        ],
        "code": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(11, 12)], 1), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "    assert_eq!(hint.0, 1);",
          "    assert_eq!(hint.1, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(None, None)], 1), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (1, Some(1));"
        ],
        "code": [
          "{",
          "    let mut iter = IntoIter { inner: RawIntoIter { iter: RawIter::new(vec![(None, None)], 1), allocation: None, marker: PhantomData } };",
          "    let hint = iter.size_hint();",
          "    assert_eq!(hint, (1, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]