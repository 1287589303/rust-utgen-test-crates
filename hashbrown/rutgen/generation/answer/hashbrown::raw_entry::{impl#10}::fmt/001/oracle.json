[
  {
    "uses": [
      "use core::fmt::Formatter;",
      "use hashbrown::HashMap;",
      "use hashbrown::hash_map::RawEntryMut;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.buffer().len(), 0);",
          "    assert!(formatter.buffer().contains(\"RawEntry\"));",
          "    assert!(formatter.buffer().contains(\"Vacant\"));",
          "    assert!(!formatter.buffer().contains(\"Occupied\"));",
          "    assert!(formatter.buffer().starts_with(\"RawEntry\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<&str, i32> = HashMap::new();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "    assert_eq!(formatter.buffer().len(), 0);",
          "    assert!(formatter.buffer().contains(\"RawEntry\"));",
          "    assert!(formatter.buffer().contains(\"Vacant\"));",
          "    assert!(!formatter.buffer().contains(\"Occupied\"));",
          "    assert!(formatter.buffer().starts_with(\"RawEntry\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<&str, i32> = [(\"a\", 100)].iter().cloned().collect();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert!(formatter.to_string().contains(\"RawEntry\"));",
          "    assert!(formatter.to_string().contains(\"Vacant\"));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<&str, i32> = [(\"a\", 100)].iter().cloned().collect();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "    assert!(formatter.to_string().contains(\"RawEntry\"));",
          "    assert!(formatter.to_string().contains(\"Vacant\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<i32, f64> = HashMap::new();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(formatter.to_string(), \"RawEntry(Vacant(RawVacantEntryMut { table: ..., hash_builder: ... }))\");",
          "    assert!(formatter.debug_tuple(\"RawEntry\").field(v).finish().is_ok());",
          "    assert!(entry.fmt(&mut formatter).is_ok());",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));"
        ],
        "code": [
          "{",
          "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
          "    use core::fmt::Formatter;",
          "",
          "    let mut map: HashMap<i32, f64> = HashMap::new();",
          "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
          "        table: &mut map.raw_table,",
          "        hash_builder: &map.hasher,",
          "    });",
          "    ",
          "    let mut formatter = Formatter::new();",
          "    let _ = entry.fmt(&mut formatter);",
          "    assert_eq!(formatter.to_string(), \"RawEntry(Vacant(RawVacantEntryMut { table: ..., hash_builder: ... }))\");",
          "    assert!(formatter.debug_tuple(\"RawEntry\").field(v).finish().is_ok());",
          "    assert!(entry.fmt(&mut formatter).is_ok());",
          "    assert!(matches!(entry, RawEntryMut::Vacant(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]