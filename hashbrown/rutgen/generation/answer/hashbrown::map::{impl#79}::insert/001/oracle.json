[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 10);",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key1\") {",
          "        let old_value = elem.insert(20);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key1\"], 20);",
          "    assert_eq!(elem.get(), &20);",
          "    assert_eq!(old_value, 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(\"missing_key\").is_none());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key1\", 10);",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key1\") {",
          "        let old_value = elem.insert(20);",
          "    }",
          "    assert_eq!(map[\"key1\"], 20);",
          "    assert_eq!(elem.get(), &20);",
          "    assert_eq!(old_value, 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.get(\"missing_key\").is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key2\") {",
          "        let old_value = elem.insert(30);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key2\"], 30);",
          "    let old_value = map.entry(\"key2\").or_insert(40);",
          "    assert_eq!(old_value, 30);",
          "    map.entry(\"key2\").and_modify(|v| *v = 50);",
          "    assert_eq!(map[\"key2\"], 50);",
          "    let old_value = map.entry(\"key2\").or_insert(60);",
          "    assert_eq!(old_value, 50);",
          "    assert!(map.contains_key(\"key2\"));",
          "    map.insert(\"key2\", 70);",
          "    assert_eq!(map[\"key2\"], 70);",
          "    let old_value = map.entry(\"key2\").or_insert(80);",
          "    assert_eq!(old_value, 70);",
          "    map.remove(\"key2\");",
          "    assert!(!map.contains_key(\"key2\"));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key2\") {",
          "        let old_value = elem.insert(30);",
          "    }",
          "    assert_eq!(map[\"key2\"], 30);",
          "    let old_value = map.entry(\"key2\").or_insert(40);",
          "    assert_eq!(old_value, 30);",
          "    map.entry(\"key2\").and_modify(|v| *v = 50);",
          "    assert_eq!(map[\"key2\"], 50);",
          "    let old_value = map.entry(\"key2\").or_insert(60);",
          "    assert_eq!(old_value, 50);",
          "    assert!(map.contains_key(\"key2\"));",
          "    map.insert(\"key2\", 70);",
          "    assert_eq!(map[\"key2\"], 70);",
          "    let old_value = map.entry(\"key2\").or_insert(80);",
          "    assert_eq!(old_value, 70);",
          "    map.remove(\"key2\");",
          "    assert!(!map.contains_key(\"key2\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 5);",
          "    map.insert(\"key4\", 15);",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key3\") {",
          "        let old_value = elem.insert(25);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key4\") {",
          "        let old_value = elem.insert(35);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[\"key3\"], 25);",
          "    assert_eq!(map[\"key4\"], 35);",
          "    assert_eq!(map.entry(\"key3\").or_insert(0), &25);",
          "    assert_eq!(map.entry(\"key4\").or_insert(0), &35);",
          "    assert_eq!(elem.get(), &25);",
          "    assert_eq!(elem.get_mut(), &mut 25);",
          "    assert_eq!(elem.insert(30), 25);",
          "    assert_eq!(map[\"key3\"], 30);",
          "    assert_eq!(elem.insert(40), 30);",
          "    assert_eq!(map[\"key4\"], 40);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"key3\", 5);",
          "    map.insert(\"key4\", 15);",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key3\") {",
          "        let old_value = elem.insert(25);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(\"key4\") {",
          "        let old_value = elem.insert(35);",
          "    }",
          "    assert_eq!(map[\"key3\"], 25);",
          "    assert_eq!(map[\"key4\"], 35);",
          "    assert_eq!(map.entry(\"key3\").or_insert(0), &25);",
          "    assert_eq!(map.entry(\"key4\").or_insert(0), &35);",
          "    assert_eq!(elem.get(), &25);",
          "    assert_eq!(elem.get_mut(), &mut 25);",
          "    assert_eq!(elem.insert(30), 25);",
          "    assert_eq!(map[\"key3\"], 30);",
          "    assert_eq!(elem.insert(40), 30);",
          "    assert_eq!(map[\"key4\"], 40);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    for i in 1..=100 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(50) {",
          "        let old_value = elem.insert(1000);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(101) {",
          "        let old_value = elem.insert(2000);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&50], 1000);",
          "    assert_eq!(map[&1], 10);",
          "    assert_eq!(map[&100], 1000);",
          "    assert!(map.get(&101).is_none());",
          "    assert_eq!(old_value, 500);",
          "    assert_eq!(map[&101], 2000);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::new();",
          "    ",
          "    for i in 1..=100 {",
          "        map.insert(i, i * 10);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(50) {",
          "        let old_value = elem.insert(1000);",
          "    }",
          "    ",
          "    if let OccupiedEntry { elem, .. } = map.entry(101) {",
          "        let old_value = elem.insert(2000);",
          "    }",
          "    assert_eq!(map[&50], 1000);",
          "    assert_eq!(map[&1], 10);",
          "    assert_eq!(map[&100], 1000);",
          "    assert!(map.get(&101).is_none());",
          "    assert_eq!(old_value, 500);",
          "    assert_eq!(map[&101], 2000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]