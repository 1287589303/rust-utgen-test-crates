[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: RawTable<u32> = RawTable::new_in(Global);",
          "    unsafe {",
          "        table.clear_no_drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(!unsafe { table.is_bucket_full(0) });"
        ],
        "code": [
          "{",
          "    let table: RawTable<u32> = RawTable::new_in(Global);",
          "    unsafe {",
          "        table.clear_no_drop();",
          "    }",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.buckets(), 0);",
          "    assert!(!unsafe { table.is_bucket_full(0) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x); // Simulating an insertion",
          "        table.clear_no_drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 1);",
          "    assert_eq!(table.buckets(), 1);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x); // Simulating an insertion",
          "        table.clear_no_drop();",
          "    }",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 1);",
          "    assert_eq!(table.buckets(), 1);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 4);",
          "    assert!(unsafe { table.iter().next().is_none() });",
          "    assert!(unsafe { table.data_end() == NonNull::dangling() });",
          "    assert!(unsafe { table.data_start().is_null() });",
          "    assert_eq!(table.allocation_size(), 0);",
          "    assert!(unsafe { (0..4).all(|i| table.is_bucket_full(i) == false) });",
          "    assert_eq!(unsafe { table.allocation_info(TableLayout::new::<u32>().size) }, (NonNull::dangling(), Layout::from_size_align(0, 1).unwrap()));"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 4);",
          "    assert!(unsafe { table.iter().next().is_none() });",
          "    assert!(unsafe { table.data_end() == NonNull::dangling() });",
          "    assert!(unsafe { table.data_start().is_null() });",
          "    assert_eq!(table.allocation_size(), 0);",
          "    assert!(unsafe { (0..4).all(|i| table.is_bucket_full(i) == false) });",
          "    assert_eq!(unsafe { table.allocation_info(TableLayout::new::<u32>().size) }, (NonNull::dangling(), Layout::from_size_align(0, 1).unwrap()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(8, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "        table.insert(4, 45, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 8);",
          "    assert_eq!(table.buckets(), 8);",
          "    for index in 0..table.buckets() {",
          "    assert!(unsafe { table.is_bucket_full(index) } == false);",
          "    }"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(8, Global);",
          "    unsafe {",
          "        table.insert(1, 42, |x| *x);",
          "        table.insert(2, 43, |x| *x);",
          "        table.insert(3, 44, |x| *x);",
          "        table.insert(4, 45, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.capacity(), 8);",
          "    assert_eq!(table.buckets(), 8);",
          "    for index in 0..table.buckets() {",
          "    assert!(unsafe { table.is_bucket_full(index) } == false);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(16, Global);",
          "    unsafe {",
          "        table.insert(1, 10, |x| *x);",
          "        table.insert(2, 20, |x| *x);",
          "        table.insert(3, 30, |x| *x);",
          "        table.insert(4, 40, |x| *x);",
          "        table.insert(5, 50, |x| *x);",
          "        table.insert(6, 60, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.growth_left, bucket_mask_to_capacity(table.table.bucket_mask));",
          "    assert!(unsafe { (table.table.ctrl_slice().iter().all(|&ctrl| ctrl.is_empty())) });"
        ],
        "code": [
          "{",
          "    let mut table: RawTable<u32> = RawTable::with_capacity_in(16, Global);",
          "    unsafe {",
          "        table.insert(1, 10, |x| *x);",
          "        table.insert(2, 20, |x| *x);",
          "        table.insert(3, 30, |x| *x);",
          "        table.insert(4, 40, |x| *x);",
          "        table.insert(5, 50, |x| *x);",
          "        table.insert(6, 60, |x| *x);",
          "        table.clear_no_drop();",
          "    }",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.growth_left, bucket_mask_to_capacity(table.table.bucket_mask));",
          "    assert!(unsafe { (table.table.ctrl_slice().iter().all(|&ctrl| ctrl.is_empty())) });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]