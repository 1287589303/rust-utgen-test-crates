[
  {
    "uses": [
      "use hashbrown::HashMap;",
      "use hashbrown::hash_map::Entry;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"test_key\", 42);",
          "",
          "    let entry = match map.entry(\"test_key\") {",
          "        Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"test_key\");",
          "            assert_eq!(v, 42);",
          "            None",
          "        }),",
          "        Entry::Vacant(_) => panic!(),",
          "    };",
          "",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            assert_eq!(e.key(), &\"test_key\");",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert!(!map.contains_key(\"test_key\"));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.entry(\"test_key\").unwrap(), Entry::Occupied(_));",
          "    assert_eq!(entry, Entry::Vacant(_));",
          "    assert_eq!(e.key(), &\"test_key\");"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"test_key\", 42);",
          "",
          "    let entry = match map.entry(\"test_key\") {",
          "        Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"test_key\");",
          "            assert_eq!(v, 42);",
          "            None",
          "        }),",
          "        Entry::Vacant(_) => panic!(),",
          "    };",
          "",
          "    match entry {",
          "        Entry::Vacant(e) => {",
          "            assert_eq!(e.key(), &\"test_key\");",
          "        }",
          "        Entry::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert!(!map.contains_key(\"test_key\"));",
          "    assert_eq!(map.entry(\"test_key\").unwrap(), Entry::Occupied(_));",
          "    assert_eq!(entry, Entry::Vacant(_));",
          "    assert_eq!(e.key(), &\"test_key\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"another_key\", 100);",
          "",
          "    let entry = match map.entry(\"another_key\") {",
          "        Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"another_key\");",
          "            assert_eq!(v, 100);",
          "            Some(v + 1)",
          "        }),",
          "        Entry::Vacant(_) => panic!(),",
          "    };",
          "",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            assert_eq!(e.key(), &\"another_key\");",
          "            assert_eq!(e.get(), &101);",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "",
          "    assert_eq!(map[\"another_key\"], 101);",
          "}"
        ],
        "oracle": [
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"another_key\", 100);",
          "    let entry = match map.entry(\"another_key\") {",
          "    Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "    assert_eq!(k, &\"another_key\");",
          "    assert_eq!(v, 100);",
          "    Some(v + 1)",
          "    }),",
          "    Entry::Vacant(_) => panic!(),",
          "    };",
          "    match entry {",
          "    Entry::Occupied(e) => {",
          "    assert_eq!(e.key(), &\"another_key\");",
          "    assert_eq!(e.get(), &101);",
          "    }",
          "    Entry::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"another_key\"], 101);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use hashbrown::hash_map::Entry;",
          "",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"another_key\", 100);",
          "",
          "    let entry = match map.entry(\"another_key\") {",
          "        Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "            assert_eq!(k, &\"another_key\");",
          "            assert_eq!(v, 100);",
          "            Some(v + 1)",
          "        }),",
          "        Entry::Vacant(_) => panic!(),",
          "    };",
          "",
          "    match entry {",
          "        Entry::Occupied(e) => {",
          "            assert_eq!(e.key(), &\"another_key\");",
          "            assert_eq!(e.get(), &101);",
          "        }",
          "        Entry::Vacant(_) => panic!(),",
          "    }",
          "",
          "    assert_eq!(map[\"another_key\"], 101);",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"another_key\", 100);",
          "    let entry = match map.entry(\"another_key\") {",
          "    Entry::Occupied(e) => e.replace_entry_with(|k, v| {",
          "    assert_eq!(k, &\"another_key\");",
          "    assert_eq!(v, 100);",
          "    Some(v + 1)",
          "    }),",
          "    Entry::Vacant(_) => panic!(),",
          "    };",
          "    match entry {",
          "    Entry::Occupied(e) => {",
          "    assert_eq!(e.key(), &\"another_key\");",
          "    assert_eq!(e.get(), &101);",
          "    }",
          "    Entry::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[\"another_key\"], 101);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]