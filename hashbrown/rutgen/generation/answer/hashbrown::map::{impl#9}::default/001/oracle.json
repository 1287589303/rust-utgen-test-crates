[
  {
    "uses": [
      "use std::collections::hash_map::RandomState;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<u32, String> = Default::default();",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    let map_with_hasher: HashMap<u32, String, RandomState> = HashMap::default();",
          "    assert_eq!(map_with_hasher.capacity(), 0);",
          "    let empty_map: HashMap<u32, String> = HashMap::default();",
          "    assert!(empty_map.is_empty());",
          "    assert_eq!(empty_map.len(), 0);"
        ],
        "code": [
          "{",
          "    let map: HashMap<u32, String> = Default::default();",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "    let map_with_hasher: HashMap<u32, String, RandomState> = HashMap::default();",
          "    assert_eq!(map_with_hasher.capacity(), 0);",
          "    let empty_map: HashMap<u32, String> = HashMap::default();",
          "    assert!(empty_map.is_empty());",
          "    assert_eq!(empty_map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let map: HashMap<u32, String, RandomState> = HashMap::default();",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let map: HashMap<u32, String, RandomState> = HashMap::default();",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<String, u32> = Default::default();",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    let map: HashMap<u32, String, RandomState> = HashMap::default();",
          "    assert_eq!(map.capacity(), 0);",
          "    let empty_map: HashMap<String, u32> = Default::default();",
          "    assert!(empty_map.is_empty());",
          "    assert_eq!(empty_map.len(), 0);",
          "    assert_eq!(empty_map.allocator(), &Default::default());"
        ],
        "code": [
          "{",
          "    let map: HashMap<String, u32> = Default::default();",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "    let map: HashMap<u32, String, RandomState> = HashMap::default();",
          "    assert_eq!(map.capacity(), 0);",
          "    let empty_map: HashMap<String, u32> = Default::default();",
          "    assert!(empty_map.is_empty());",
          "    assert_eq!(empty_map.len(), 0);",
          "    assert_eq!(empty_map.allocator(), &Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let map: HashMap<String, u32, RandomState> = HashMap::default();",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    use std::collections::hash_map::RandomState;",
          "    let map: HashMap<String, u32, RandomState> = HashMap::default();",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomAllocator;",
          "    unsafe impl Allocator for CustomAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let map: HashMap<u32, String, DefaultHashBuilder, CustomAllocator> = HashMap::default();",
          "    let _ = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    let map: HashMap<u32, String, RandomState, CustomAllocator> = HashMap::default();",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());"
        ],
        "code": [
          "{",
          "    struct CustomAllocator;",
          "    unsafe impl Allocator for CustomAllocator {",
          "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {}",
          "    }",
          "",
          "    let map: HashMap<u32, String, DefaultHashBuilder, CustomAllocator> = HashMap::default();",
          "    let _ = map.capacity();",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "    let map: HashMap<u32, String, RandomState, CustomAllocator> = HashMap::default();",
          "    assert_eq!(map.capacity(), 0);",
          "    assert!(map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]