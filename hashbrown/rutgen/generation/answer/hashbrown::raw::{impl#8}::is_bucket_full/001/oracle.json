[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = 0;",
          "    let result = table.is_bucket_full(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);",
          "    assert!(index < table.buckets());",
          "    assert!(unsafe { table.is_bucket_full(index) } == false);",
          "    assert!(table.is_empty());",
          "    let index_full = table.buckets();",
          "    let result_full = unsafe { table.is_bucket_full(index_full) };",
          "    assert_eq!(result_full, false);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = 0;",
          "    let result = table.is_bucket_full(index);",
          "    assert_eq!(result, false);",
          "    assert!(index < table.buckets());",
          "    assert!(unsafe { table.is_bucket_full(index) } == false);",
          "    assert!(table.is_empty());",
          "    let index_full = table.buckets();",
          "    let result_full = unsafe { table.is_bucket_full(index_full) };",
          "    assert_eq!(result_full, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() / 2;",
          "    let result = table.is_bucket_full(index);",
          "}"
        ],
        "oracle": [
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() / 2;",
          "    assert_eq!(table.is_bucket_full(index), // expected_value);",
          "    let index_out_of_bounds = table.buckets();",
          "    assert!(!table.is_bucket_full(index_out_of_bounds));"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() / 2;",
          "    let result = table.is_bucket_full(index);",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() / 2;",
          "    assert_eq!(table.is_bucket_full(index), // expected_value);",
          "    let index_out_of_bounds = table.buckets();",
          "    assert!(!table.is_bucket_full(index_out_of_bounds));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() - 1;",
          "    let result = table.is_bucket_full(index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, false);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets() - 1;",
          "    let result = table.is_bucket_full(index);",
          "    assert_eq!(result, false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets(); // This index is out of bounds",
          "    let result = table.is_bucket_full(index);",
          "}"
        ],
        "oracle": [
          "    assert!(std::panic::catch_unwind(|| {",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets(); // This index is out of bounds",
          "    table.is_bucket_full(index);",
          "    }).is_err());"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets(); // This index is out of bounds",
          "    let result = table.is_bucket_full(index);",
          "    assert!(std::panic::catch_unwind(|| {",
          "    let alloc = Global;",
          "    let table = RawTable::<u32, _>::new_in(alloc);",
          "    let index = table.buckets(); // This index is out of bounds",
          "    table.is_bucket_full(index);",
          "    }).is_err());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]