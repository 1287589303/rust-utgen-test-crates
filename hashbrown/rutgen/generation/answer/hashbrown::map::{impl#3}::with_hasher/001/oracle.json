[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = DefaultHashBuilder::default();",
          "    let map: HashMap<i32, i32, DefaultHashBuilder> = HashMap::with_hasher(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table, RawTable::new());"
        ],
        "code": [
          "{",
          "    let s = DefaultHashBuilder::default();",
          "    let map: HashMap<i32, i32, DefaultHashBuilder> = HashMap::with_hasher(s);",
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table, RawTable::new());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct CustomHasher;",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "    let s = CustomHasher;",
          "    let map: HashMap<String, String, CustomHasher> = HashMap::with_hasher(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table.len(), 0);",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    struct CustomHasher;",
          "    impl BuildHasher for CustomHasher {",
          "        type Hasher = std::collections::hash_map::RandomState;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::RandomState::new()",
          "        }",
          "    }",
          "    let s = CustomHasher;",
          "    let map: HashMap<String, String, CustomHasher> = HashMap::with_hasher(s);",
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let s = DefaultHashBuilder::default();",
          "    let map: HashMap<u32, u32> = HashMap::with_hasher(s);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table, RawTable::new());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let s = DefaultHashBuilder::default();",
          "    let map: HashMap<u32, u32> = HashMap::with_hasher(s);",
          "    assert_eq!(map.hash_builder, s);",
          "    assert_eq!(map.table, RawTable::new());",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]