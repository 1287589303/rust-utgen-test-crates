[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 0) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "}"
        ],
        "oracle": [
          "    unsafe { assert_eq!(result, ((bucket_ptr as usize) - 1)) }",
          "    unsafe { assert_eq!(result, base_ptr as usize - 1) }",
          "    unsafe { assert_eq!(result, -1) }",
          "    unsafe { assert_eq!(result, (base_ptr as usize) - (bucket_ptr as usize)) }",
          "    unsafe { assert!(result == base_ptr as usize - 1) }"
        ],
        "code": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 0) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "    unsafe { assert_eq!(result, ((bucket_ptr as usize) - 1)) }",
          "    unsafe { assert_eq!(result, base_ptr as usize - 1) }",
          "    unsafe { assert_eq!(result, -1) }",
          "    unsafe { assert_eq!(result, (base_ptr as usize) - (bucket_ptr as usize)) }",
          "    unsafe { assert!(result == base_ptr as usize - 1) }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = unsafe { base_ptr.add(1) };",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 1) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (bucket.ptr.as_ptr() as usize - 1));"
        ],
        "code": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = unsafe { base_ptr.add(1) };",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 1) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "    assert_eq!(result, (bucket.ptr.as_ptr() as usize - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = unsafe { base_ptr.add(5) };",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 5) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, (bucket.ptr.as_ptr() as usize - 1));"
        ],
        "code": [
          "{",
          "    struct ZST;",
          "",
          "    impl ZST {",
          "        const IS_ZERO_SIZED: bool = true;",
          "    }",
          "",
          "    let base_ptr: *mut ZST = &mut ZST as *mut ZST;",
          "    let base_non_null = NonNull::new(base_ptr).unwrap();",
          "",
          "    let bucket_ptr: *mut ZST = unsafe { base_ptr.add(5) };",
          "    let bucket = unsafe { Bucket::from_base_index(NonNull::new_unchecked(bucket_ptr), 5) };",
          "",
          "    let result = unsafe { bucket.to_base_index(base_non_null) };",
          "    assert_eq!(result, (bucket.ptr.as_ptr() as usize - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]