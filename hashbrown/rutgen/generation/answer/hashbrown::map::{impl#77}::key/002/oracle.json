[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    map.insert(\"test_key\".to_string(), 10);",
          "    let entry = map.entry(\"test_key\".to_string());",
          "    let key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, &\"test_key\".to_string());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, u32> = HashMap::new();",
          "    map.insert(\"test_key\".to_string(), 10);",
          "    let entry = map.entry(\"test_key\".to_string());",
          "    let key = entry.key();",
          "    assert_eq!(key, &\"test_key\".to_string());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<u32, String> = HashMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    let entry = map.entry(1);",
          "    let key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, &1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<u32, String> = HashMap::new();",
          "    map.insert(1, \"one\".to_string());",
          "    let entry = map.entry(1);",
          "    let key = entry.key();",
          "    assert_eq!(key, &1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<(i32, i32), String> = HashMap::new();",
          "    map.insert((1, 2), \"point\".to_string());",
          "    let entry = map.entry((1, 2));",
          "    let key = entry.key();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(key, &(1, 2));",
          "    assert_eq!(map.entry((1, 2)).key(), &(1, 2));",
          "    assert!(matches!(entry, Entry::Occupied(_)));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<(i32, i32), String> = HashMap::new();",
          "    map.insert((1, 2), \"point\".to_string());",
          "    let entry = map.entry((1, 2));",
          "    let key = entry.key();",
          "    assert_eq!(key, &(1, 2));",
          "    assert_eq!(map.entry((1, 2)).key(), &(1, 2));",
          "    assert!(matches!(entry, Entry::Occupied(_)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]