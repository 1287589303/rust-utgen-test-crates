[
  {
    "uses": [
      "use hashbrown::hash_map::Entry;",
      "use hashbrown::hash_map::HashMap;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let key = \"horseland\";",
          "    let entry = map.entry(key);",
          "    let _ = entry.key(); // Calling key on a Vacant entry",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), &key);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    let key = \"horseland\";",
          "    let entry = map.entry(key);",
          "    let _ = entry.key(); // Calling key on a Vacant entry",
          "    assert_eq!(entry.key(), &key);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 3);",
          "    let entry = map.entry(\"poneyland\");",
          "    let _ = entry.key(); // Calling key on an Occupied entry",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), &\"poneyland\");",
          "    let entry_nonexistent = map.entry(\"horseland\");",
          "    assert_eq!(entry_nonexistent.key(), &\"horseland\");"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{Entry, HashMap};",
          "    ",
          "    let mut map: HashMap<&str, u32> = HashMap::new();",
          "    map.insert(\"poneyland\", 3);",
          "    let entry = map.entry(\"poneyland\");",
          "    let _ = entry.key(); // Calling key on an Occupied entry",
          "    assert_eq!(entry.key(), &\"poneyland\");",
          "    let entry_nonexistent = map.entry(\"horseland\");",
          "    assert_eq!(entry_nonexistent.key(), &\"horseland\");",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]