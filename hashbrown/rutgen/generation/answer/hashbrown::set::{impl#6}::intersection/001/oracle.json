[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert!(result.other.is_empty());",
          "    assert_eq!(result.iter, a.iter());",
          "    assert_eq!(result.other, &b);"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    let result = a.intersection(&b);",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = HashSet::new();",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert!(result.other.is_empty());",
          "    assert_eq!(result.iter, a.iter());",
          "    assert_eq!(result.other, &b);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert_eq!(result.other.len(), 3);",
          "    assert_eq!(result.other.iter().collect::<HashSet<i32>>(), b);"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "    let a: HashSet<i32> = HashSet::new();",
          "    let b: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    assert_eq!(result.iter.len(), 0);",
          "    assert_eq!(result.other.len(), 3);",
          "    assert_eq!(result.other.iter().collect::<HashSet<i32>>(), b);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let b: HashSet<i32> = [2, 3, 4].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.len(), 2);",
          "    assert!(result.other.contains(&2));",
          "    assert!(result.other.contains(&3));",
          "    assert!(!result.other.contains(&4));",
          "    assert!(result.iter().any(|&x| x == 2);",
          "    assert!(result.iter().any(|&x| x == 3);",
          "    assert!(!result.iter().any(|&x| x == 1);"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = [1, 2, 3].iter().cloned().collect();",
          "    let b: HashSet<i32> = [2, 3, 4].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "    assert_eq!(result.iter.len(), 2);",
          "    assert!(result.other.contains(&2));",
          "    assert!(result.other.contains(&3));",
          "    assert!(!result.other.contains(&4));",
          "    assert!(result.iter().any(|&x| x == 2);",
          "    assert!(result.iter().any(|&x| x == 3);",
          "    assert!(!result.iter().any(|&x| x == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = (0..100).collect();",
          "    let b: HashSet<i32> = (50..150).collect();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    let a: HashSet<i32> = (0..100).collect();",
          "    let b: HashSet<i32> = (50..150).collect();",
          "    let result = a.intersection(&b);",
          "    assert!(result.iter.count() == 50);",
          "    assert!(result.other.len() == 100);",
          "    assert!(result.iter.all(|x| *x >= 50 && *x < 100));",
          "    assert!(result.other.contains(&50) && result.other.contains(&99));",
          "    assert_eq!(result.iter.collect::<HashSet<_>>(), (50..100).collect::<HashSet<_>>());"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = (0..100).collect();",
          "    let b: HashSet<i32> = (50..150).collect();",
          "    let result = a.intersection(&b);",
          "    let a: HashSet<i32> = (0..100).collect();",
          "    let b: HashSet<i32> = (50..150).collect();",
          "    let result = a.intersection(&b);",
          "    assert!(result.iter.count() == 50);",
          "    assert!(result.other.len() == 100);",
          "    assert!(result.iter.all(|x| *x >= 50 && *x < 100));",
          "    assert!(result.other.contains(&50) && result.other.contains(&99));",
          "    assert_eq!(result.iter.collect::<HashSet<_>>(), (50..100).collect::<HashSet<_>>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = [5].iter().cloned().collect();",
          "    let b: HashSet<i32> = [5].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.len(), 1);",
          "    assert!(result.other.contains(&5));",
          "    assert_eq!(result.other.len(), 1);",
          "    assert_eq!(result.iter.collect::<HashSet<_>>(), b);",
          "    assert!(result.iter().eq(b.iter()));",
          "    assert!(result.iter().next() == Some(&5));"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = [5].iter().cloned().collect();",
          "    let b: HashSet<i32> = [5].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "    assert_eq!(result.iter.len(), 1);",
          "    assert!(result.other.contains(&5));",
          "    assert_eq!(result.other.len(), 1);",
          "    assert_eq!(result.iter.collect::<HashSet<_>>(), b);",
          "    assert!(result.iter().eq(b.iter()));",
          "    assert!(result.iter().next() == Some(&5));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let a: HashSet<i32> = [1, 2, 3, 4].iter().cloned().collect();",
          "    let b: HashSet<i32> = [2, 3, 4, 5].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.iter.count(), 3);",
          "    assert!(result.other.contains(&2));",
          "    assert!(result.other.contains(&3));",
          "    assert!(result.other.contains(&4));",
          "    assert!(!result.other.contains(&1));",
          "    assert!(!result.other.contains(&5));",
          "    assert_eq!(result.iter.next(), Some(&2));",
          "    assert_eq!(result.iter.next(), Some(&3));",
          "    assert_eq!(result.iter.next(), Some(&4));",
          "    assert_eq!(result.iter.next(), None);"
        ],
        "code": [
          "{",
          "    let a: HashSet<i32> = [1, 2, 3, 4].iter().cloned().collect();",
          "    let b: HashSet<i32> = [2, 3, 4, 5].iter().cloned().collect();",
          "    let result = a.intersection(&b);",
          "    assert_eq!(result.iter.count(), 3);",
          "    assert!(result.other.contains(&2));",
          "    assert!(result.other.contains(&3));",
          "    assert!(result.other.contains(&4));",
          "    assert!(!result.other.contains(&1));",
          "    assert!(!result.other.contains(&5));",
          "    assert_eq!(result.iter.next(), Some(&2));",
          "    assert_eq!(result.iter.next(), Some(&3));",
          "    assert_eq!(result.iter.next(), Some(&4));",
          "    assert_eq!(result.iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]