[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let _iter: IntoIter<u32, String, TestAllocator> = Default::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.inner, Default::default());"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let _iter: IntoIter<u32, String, TestAllocator> = Default::default();",
          "    assert_eq!(_iter.inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _iter: IntoIter<u32, String> = Default::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(_iter.inner, Default::default());",
          "    assert!(_iter.inner.iter.is_empty());",
          "    assert!(_iter.allocation.is_none());",
          "    assert_eq!(std::mem::size_of::<IntoIter<u32, String>>(), std::mem::size_of::<RawIntoIter<(u32, String), Global>>());",
          "    assert!(std::ptr::eq(&_iter.inner, &Default::default()));"
        ],
        "code": [
          "{",
          "    let _iter: IntoIter<u32, String> = Default::default();",
          "    assert_eq!(_iter.inner, Default::default());",
          "    assert!(_iter.inner.iter.is_empty());",
          "    assert!(_iter.allocation.is_none());",
          "    assert_eq!(std::mem::size_of::<IntoIter<u32, String>>(), std::mem::size_of::<RawIntoIter<(u32, String), Global>>());",
          "    assert!(std::ptr::eq(&_iter.inner, &Default::default()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]