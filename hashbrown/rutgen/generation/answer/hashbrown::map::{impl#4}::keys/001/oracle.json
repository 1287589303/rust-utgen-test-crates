[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::default(), Global);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys.inner.len(), 0);",
          "    assert!(keys.inner.is_empty());",
          "    assert_eq!(keys.inner.iter().count(), 0);",
          "    let keys: Vec<&str> = keys.collect();",
          "    assert_eq!(keys, []);",
          "    keys.inner.next().is_none();"
        ],
        "code": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::default(), Global);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "    assert_eq!(keys.inner.len(), 0);",
          "    assert!(keys.inner.is_empty());",
          "    assert_eq!(keys.inner.iter().count(), 0);",
          "    let keys: Vec<&str> = keys.collect();",
          "    assert_eq!(keys, []);",
          "    keys.inner.next().is_none();",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys.inner.iter().len(), 1);",
          "    assert_eq!(keys.inner.iter().next(), Some(&\"a\"));",
          "    assert!(keys.inner.iter().all(|&key| key == \"a\"));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(keys.inner.iter().count() == 1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "    assert_eq!(keys.inner.iter().len(), 1);",
          "    assert_eq!(keys.inner.iter().next(), Some(&\"a\"));",
          "    assert!(keys.inner.iter().all(|&key| key == \"a\"));",
          "    assert_eq!(map.len(), 1);",
          "    assert!(keys.inner.iter().count() == 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"c\", 3);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(keys.inner.inner.table.len(), 3);",
          "    assert!(keys.inner.inner.table.contains_key(&\"a\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"b\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"c\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"d\") == false);",
          "    for key in keys { assert!(key == &\"a\" || key == &\"b\" || key == &\"c\"); }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"c\", 3);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<&str> = keys.collect();",
          "    assert_eq!(keys.inner.inner.table.len(), 3);",
          "    assert!(keys.inner.inner.table.contains_key(&\"a\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"b\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"c\"));",
          "    assert!(keys.inner.inner.table.contains_key(&\"d\") == false);",
          "    for key in keys { assert!(key == &\"a\" || key == &\"b\" || key == &\"c\"); }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"c\", 3);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let mut vec: Vec<&str> = keys.collect();",
          "    vec.sort_unstable();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(vec, [\"a\", \"b\", \"c\"]);",
          "    assert_eq!(map.len(), 3);",
          "    let expected_keys: Vec<&str> = vec![\"a\", \"b\", \"c\"];",
          "    assert!(expected_keys.iter().all(|key| map.contains_key(*key)));",
          "    assert!(map.keys().collect::<Vec<_>>().len() == map.len());",
          "    assert!(map.keys().count() == 3);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<&str, i32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder::default(), Global);",
          "    map.insert(\"b\", 2);",
          "    map.insert(\"a\", 1);",
          "    map.insert(\"c\", 3);",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let mut vec: Vec<&str> = keys.collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, [\"a\", \"b\", \"c\"]);",
          "    assert_eq!(map.len(), 3);",
          "    let expected_keys: Vec<&str> = vec![\"a\", \"b\", \"c\"];",
          "    assert!(expected_keys.iter().all(|key| map.contains_key(*key)));",
          "    assert!(map.keys().collect::<Vec<_>>().len() == map.len());",
          "    assert!(map.keys().count() == 3);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let max_capacity = 1000;",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(max_capacity, DefaultHashBuilder::default(), Global);",
          "    for i in 0..max_capacity {",
          "        map.insert(i, i);",
          "    }",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<i32> = keys.collect();",
          "}"
        ],
        "oracle": [
          "    let max_capacity = 1000;",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(max_capacity, DefaultHashBuilder::default(), Global);",
          "    for i in 0..max_capacity {",
          "    map.insert(i, i);",
          "    }",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let inner_iter = keys.inner;",
          "    assert_eq!(inner_iter.len(), max_capacity);",
          "    assert!(inner_iter.all(|key| key >= 0 && key < max_capacity));",
          "    let mut vec: Vec<i32> = keys.collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, (0..max_capacity).collect::<Vec<i32>>());",
          "    assert_eq!(map.len(), max_capacity);"
        ],
        "code": [
          "{",
          "    let max_capacity = 1000;",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(max_capacity, DefaultHashBuilder::default(), Global);",
          "    for i in 0..max_capacity {",
          "        map.insert(i, i);",
          "    }",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let vec: Vec<i32> = keys.collect();",
          "    let max_capacity = 1000;",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(max_capacity, DefaultHashBuilder::default(), Global);",
          "    for i in 0..max_capacity {",
          "    map.insert(i, i);",
          "    }",
          "    let keys: Keys<_, _, _> = map.keys();",
          "    let inner_iter = keys.inner;",
          "    assert_eq!(inner_iter.len(), max_capacity);",
          "    assert!(inner_iter.all(|key| key >= 0 && key < max_capacity));",
          "    let mut vec: Vec<i32> = keys.collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, (0..max_capacity).collect::<Vec<i32>>());",
          "    assert_eq!(map.len(), max_capacity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]