[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: std::alloc::Layout) -> Result<std::ptr::NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: std::ptr::NonNull<u8>, _layout: std::alloc::Layout) {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let mut hashmap: HashMap<i32, i32, TestHasher, TestAllocator> = HashMap {",
          "        hash_builder: TestHasher,",
          "        table: RawTable {",
          "            table: RawTableInner,",
          "            alloc: TestAllocator,",
          "            marker: PhantomData,",
          "        },",
          "    };",
          "",
          "    let hashes: [u64; 0] = hashmap.build_hashes_inner(&[]);",
          "}"
        ],
        "oracle": [
          "    let hashes: [u64; 0] = hashmap.build_hashes_inner(&[]);",
          "    assert_eq!(hashes, []);",
          "    let hashes: [u64; 1] = hashmap.build_hashes_inner(&[&1]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    let hashes: [u64; 2] = hashmap.build_hashes_inner(&[&1, &2]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    assert_eq!(hashes[1], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &2));",
          "    let hashes: [u64; 3] = hashmap.build_hashes_inner(&[&1, &2, &3]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    assert_eq!(hashes[1], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &2));",
          "    assert_eq!(hashes[2], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &3));"
        ],
        "code": [
          "{",
          "    struct TestHasher;",
          "    impl BuildHasher for TestHasher {",
          "        type Hasher = std::collections::hash_map::DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            std::collections::hash_map::DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: std::alloc::Layout) -> Result<std::ptr::NonNull<u8>, ()> {",
          "            unimplemented!()",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: std::ptr::NonNull<u8>, _layout: std::alloc::Layout) {",
          "            unimplemented!()",
          "        }",
          "    }",
          "",
          "    let mut hashmap: HashMap<i32, i32, TestHasher, TestAllocator> = HashMap {",
          "        hash_builder: TestHasher,",
          "        table: RawTable {",
          "            table: RawTableInner,",
          "            alloc: TestAllocator,",
          "            marker: PhantomData,",
          "        },",
          "    };",
          "",
          "    let hashes: [u64; 0] = hashmap.build_hashes_inner(&[]);",
          "    let hashes: [u64; 0] = hashmap.build_hashes_inner(&[]);",
          "    assert_eq!(hashes, []);",
          "    let hashes: [u64; 1] = hashmap.build_hashes_inner(&[&1]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    let hashes: [u64; 2] = hashmap.build_hashes_inner(&[&1, &2]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    assert_eq!(hashes[1], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &2));",
          "    let hashes: [u64; 3] = hashmap.build_hashes_inner(&[&1, &2, &3]);",
          "    assert_eq!(hashes[0], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &1));",
          "    assert_eq!(hashes[1], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &2));",
          "    assert_eq!(hashes[2], make_hash::<&i32, TestHasher>(&hashmap.hash_builder, &3));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]