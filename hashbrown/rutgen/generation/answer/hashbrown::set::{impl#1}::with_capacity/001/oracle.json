[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder {});",
          "    assert!(set.capacity() == 0);",
          "    let set_non_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "    assert!(set_non_zero.capacity() >= 10);",
          "    assert!(set_non_zero.map.table.len() == 0);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set.map.table.len(), 0);",
          "    assert_eq!(set.map.hash_builder, DefaultHashBuilder {});",
          "    assert!(set.capacity() == 0);",
          "    let set_non_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "    assert!(set_non_zero.capacity() >= 10);",
          "    assert!(set_non_zero.map.table.len() == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1);",
          "}"
        ],
        "oracle": [
          "    assert!(set.map.table.capacity() >= 1);",
          "    let set_zero_capacity: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set_zero_capacity.map.table.capacity(), 0);",
          "    let set_large_capacity: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(100);",
          "    assert!(set_large_capacity.map.table.capacity() >= 100);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1);",
          "    assert!(set.map.table.capacity() >= 1);",
          "    let set_zero_capacity: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set_zero_capacity.map.table.capacity(), 0);",
          "    let set_large_capacity: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(100);",
          "    assert!(set_large_capacity.map.table.capacity() >= 100);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "}"
        ],
        "oracle": [
          "    assert!(set.capacity() >= 10);",
          "    let set_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert!(set_zero.capacity() == 0);",
          "    let set_large: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1000);",
          "    assert!(set_large.capacity() >= 1000);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(10);",
          "    assert!(set.capacity() >= 10);",
          "    let set_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert!(set_zero.capacity() == 0);",
          "    let set_large: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1000);",
          "    assert!(set_large.capacity() >= 1000);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1000);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.map.table.capacity(), 1000);",
          "    assert!(set.map.table.len() == 0);",
          "    let empty_set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(empty_set.map.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(1000);",
          "    assert_eq!(set.map.table.capacity(), 1000);",
          "    assert!(set.map.table.len() == 0);",
          "    let empty_set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(empty_set.map.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(usize::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.capacity(), usize::MAX);",
          "    assert!(set.is_empty());",
          "    let set_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set_zero.capacity(), 0);",
          "    assert!(set_zero.is_empty());",
          "    let set_large: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(100);",
          "    assert!(set_large.capacity() >= 100);",
          "    assert!(set_large.is_empty());"
        ],
        "code": [
          "{",
          "    let set: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(usize::MAX);",
          "    assert_eq!(set.capacity(), usize::MAX);",
          "    assert!(set.is_empty());",
          "    let set_zero: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(0);",
          "    assert_eq!(set_zero.capacity(), 0);",
          "    assert!(set_zero.is_empty());",
          "    let set_large: hashbrown::HashSet<i32> = hashbrown::HashSet::with_capacity(100);",
          "    assert!(set_large.capacity() >= 100);",
          "    assert!(set_large.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]