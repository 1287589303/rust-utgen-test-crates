[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 2, ctrl_align: 2 };",
          "    let buckets = 4; // 2^2",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert!(!result.is_some());",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).unwrap().checked_add(ctrl_align - 1).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_some());",
          "    assert!(len > isize::MAX as usize - (ctrl_align - 1));"
        ],
        "code": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 2, ctrl_align: 2 };",
          "    let buckets = 4; // 2^2",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert!(!result.is_some());",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).unwrap().checked_add(ctrl_align - 1).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_some());",
          "    assert!(len > isize::MAX as usize - (ctrl_align - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 3, ctrl_align: 4 };",
          "    let buckets = 8; // 2^3",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(table_layout.size.checked_mul(buckets).is_some());",
          "    assert!(table_layout.size.checked_mul(buckets).unwrap().checked_add(table_layout.ctrl_align - 1).is_some());",
          "    assert!(table_layout.ctrl_align > 1);",
          "    assert!(table_layout.ctrl_align.checked_add(1).is_some());",
          "    assert!(table_layout.size.checked_mul(buckets).unwrap().checked_add(table_layout.ctrl_align - 1).unwrap().checked_add(buckets + Group::WIDTH).is_some());",
          "    assert!(table_layout.size > 0);",
          "    assert!(table_layout.ctrl_align > 0);",
          "    assert!(len > isize::MAX as usize - (table_layout.ctrl_align - 1));"
        ],
        "code": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 3, ctrl_align: 4 };",
          "    let buckets = 8; // 2^3",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "    assert_eq!(result, None);",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(table_layout.size.checked_mul(buckets).is_some());",
          "    assert!(table_layout.size.checked_mul(buckets).unwrap().checked_add(table_layout.ctrl_align - 1).is_some());",
          "    assert!(table_layout.ctrl_align > 1);",
          "    assert!(table_layout.ctrl_align.checked_add(1).is_some());",
          "    assert!(table_layout.size.checked_mul(buckets).unwrap().checked_add(table_layout.ctrl_align - 1).unwrap().checked_add(buckets + Group::WIDTH).is_some());",
          "    assert!(table_layout.size > 0);",
          "    assert!(table_layout.ctrl_align > 0);",
          "    assert!(len > isize::MAX as usize - (table_layout.ctrl_align - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 10, ctrl_align: 8 };",
          "    let buckets = 16; // 2^4",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: 10, ctrl_align: 8 };",
          "    let buckets = 16; // 2^4",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: usize::MAX / 4, ctrl_align: 4 };",
          "    let buckets = 64; // 2^6",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, None);"
        ],
        "code": [
          "{",
          "    struct TestTableLayout {",
          "        size: usize,",
          "        ctrl_align: usize,",
          "    }",
          "    ",
          "    let table_layout = TestTableLayout { size: usize::MAX / 4, ctrl_align: 4 };",
          "    let buckets = 64; // 2^6",
          "    let result = table_layout.calculate_layout_for(buckets);",
          "    assert_eq!(result, None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]