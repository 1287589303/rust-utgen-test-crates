[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size; // Max buckets that keeps `len` within bound",
          "    let result = layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|v| v.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(layout.calculate_layout_for(buckets).is_none());"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size; // Max buckets that keeps `len` within bound",
          "    let result = layout.calculate_layout_for(buckets);",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|v| v.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(layout.calculate_layout_for(buckets).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = 1; // Smallest power of two",
          "    let result = layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().1, (size.checked_mul(buckets).unwrap() + ctrl_align - 1) & !(ctrl_align - 1));",
          "    assert!(result.unwrap().0.size() <= isize::MAX as usize - (ctrl_align - 1));"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = 1; // Smallest power of two",
          "    let result = layout.calculate_layout_for(buckets);",
          "    assert!(result.is_some());",
          "    assert_eq!(result.unwrap().1, (size.checked_mul(buckets).unwrap() + ctrl_align - 1) & !(ctrl_align - 1));",
          "    assert!(result.unwrap().0.size() <= isize::MAX as usize - (ctrl_align - 1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = 16; // Random power of two",
          "    let result = layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert_eq!(result, Some((Layout::from_size_align_unchecked(size, ctrl_align), ctrl_offset)));",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|val| val.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_none());"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "    ",
          "    let buckets = 16; // Random power of two",
          "    let result = layout.calculate_layout_for(buckets);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert_eq!(result, Some((Layout::from_size_align_unchecked(size, ctrl_align), ctrl_offset)));",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|val| val.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size; // Large power of two, stays within bounds",
          "    let result = layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size; // Large power of two, stays within bounds",
          "    let result = layout.calculate_layout_for(buckets);",
          "    assert!(result.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size + 1; // Exceeds the boundary case",
          "    let result = layout.calculate_layout_for(buckets);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|v| v.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_none());"
        ],
        "code": [
          "{",
          "    struct Dummy;",
          "    let layout = TableLayout::new::<Dummy>();",
          "    let size = layout.size;",
          "    let ctrl_align = layout.ctrl_align;",
          "",
          "    let buckets = (isize::MAX as usize - ctrl_align + 1) / size + 1; // Exceeds the boundary case",
          "    let result = layout.calculate_layout_for(buckets);",
          "    assert!(result.is_none());",
          "    assert_eq!(result, None);",
          "    assert!(buckets.is_power_of_two());",
          "    assert!(size.checked_mul(buckets).is_some());",
          "    assert!(size.checked_mul(buckets).and_then(|v| v.checked_add(ctrl_align - 1)).is_some());",
          "    assert!(ctrl_offset.checked_add(buckets + Group::WIDTH).is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]