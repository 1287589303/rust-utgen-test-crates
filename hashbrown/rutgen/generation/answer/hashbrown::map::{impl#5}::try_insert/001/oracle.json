[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = 1;",
          "    let value = \"value1\";",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), &\"value1\");",
          "    assert_eq!(map.get(&key), Some(&\"value1\"));",
          "    assert_eq!(map.contains_key(&key), true);",
          "    assert_eq!(map.allocation_size() > 0, true);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = 1;",
          "    let value = \"value1\";",
          "    let result = map.try_insert(key, value);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), &\"value1\");",
          "    assert_eq!(map.get(&key), Some(&\"value1\"));",
          "    assert_eq!(map.contains_key(&key), true);",
          "    assert_eq!(map.allocation_size() > 0, true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key1\";",
          "    let value = \"value1\";",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(&mut value));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.get(&key), Some(&value));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key1\";",
          "    let value = \"value1\";",
          "    let result = map.try_insert(key, value);",
          "    assert_eq!(result, Ok(&mut value));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.get(&key), Some(&value));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = i32::MAX;",
          "    let value = \"max_value\";",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), &\"max_value\");",
          "    assert_eq!(map.get(&key), Some(&\"max_value\"));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = i32::MAX;",
          "    let value = \"max_value\";",
          "    let result = map.try_insert(key, value);",
          "    assert_eq!(result.is_ok(), true);",
          "    assert_eq!(result.unwrap(), &\"max_value\");",
          "    assert_eq!(map.get(&key), Some(&\"max_value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = i32::MIN;",
          "    let value = \"min_value\";",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, Ok(&mut \"min_value\"));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = i32::MIN;",
          "    let value = \"min_value\";",
          "    let result = map.try_insert(key, value);",
          "    assert_eq!(result, Ok(&mut \"min_value\"));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key2\";",
          "    let value: Option<&str> = None;",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &value);",
          "    assert_eq!(map.get(&key), Some(&value));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.allocation_size(), expected_size);",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key2\";",
          "    let value: Option<&str> = None;",
          "    let result = map.try_insert(key, value);",
          "    assert!(result.is_ok());",
          "    assert_eq!(result.unwrap(), &value);",
          "    assert_eq!(map.get(&key), Some(&value));",
          "    assert!(map.contains_key(&key));",
          "    assert_eq!(map.allocation_size(), expected_size);",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key3\";",
          "    let value = \"\";",
          "    let result = map.try_insert(key, value);",
          "}"
        ],
        "oracle": [
          "    let mut map = HashMap::new();",
          "    let key = \"key3\";",
          "    let value = \"\";",
          "    let result = map.try_insert(key, value);",
          "    assert!(result.is_ok());",
          "    let inserted_value = result.unwrap();",
          "    assert_eq!(inserted_value, &value);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    let key = \"key3\";",
          "    let value = \"\";",
          "    let result = map.try_insert(key, value);",
          "    let mut map = HashMap::new();",
          "    let key = \"key3\";",
          "    let value = \"\";",
          "    let result = map.try_insert(key, value);",
          "    assert!(result.is_ok());",
          "    let inserted_value = result.unwrap();",
          "    assert_eq!(inserted_value, &value);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]