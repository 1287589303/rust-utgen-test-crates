[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::new();",
          "    map.try_insert(1, \"first\").unwrap();",
          "    match map.try_insert(1, \"second\") {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.try_insert(1, \"first\").unwrap(), &\"first\");",
          "    let result = map.try_insert(1, \"second\");",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &1);",
          "    assert_eq!(entry.get(), &\"first\");",
          "    assert_eq!(value, \"second\");",
          "    } else {",
          "    panic!();",
          "    }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, &str> = HashMap::new();",
          "    map.try_insert(1, \"first\").unwrap();",
          "    match map.try_insert(1, \"second\") {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "    assert_eq!(map.try_insert(1, \"first\").unwrap(), &\"first\");",
          "    let result = map.try_insert(1, \"second\");",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &1);",
          "    assert_eq!(entry.get(), &\"first\");",
          "    assert_eq!(value, \"second\");",
          "    } else {",
          "    panic!();",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.try_insert(\"key\".to_string(), 10).unwrap();",
          "    match map.try_insert(\"key\".to_string(), 20) {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.contains_key(&\"key\".to_string()));",
          "    let result = map.try_insert(\"key\".to_string(), 20);",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &\"key\".to_string());",
          "    assert_eq!(entry.get(), &10);",
          "    assert_eq!(value, 20);",
          "    } else {",
          "    panic!();",
          "    }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    map.try_insert(\"key\".to_string(), 10).unwrap();",
          "    match map.try_insert(\"key\".to_string(), 20) {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "    assert!(map.contains_key(&\"key\".to_string()));",
          "    let result = map.try_insert(\"key\".to_string(), 20);",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &\"key\".to_string());",
          "    assert_eq!(entry.get(), &10);",
          "    assert_eq!(value, 20);",
          "    } else {",
          "    panic!();",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<u64, f64> = HashMap::new();",
          "    map.try_insert(42, 3.14).unwrap();",
          "    match map.try_insert(42, 2.71) {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.try_insert(42, 3.14).unwrap(), &3.14);",
          "    let result = map.try_insert(42, 2.71);",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &42);",
          "    assert_eq!(entry.get(), &3.14);",
          "    assert_eq!(value, 2.71);",
          "    } else {",
          "    panic!();",
          "    }"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<u64, f64> = HashMap::new();",
          "    map.try_insert(42, 3.14).unwrap();",
          "    match map.try_insert(42, 2.71) {",
          "        Err(OccupiedError { entry, value }) => {",
          "            let _ = entry.key();",
          "            let _ = entry.get();",
          "            let _ = value;",
          "        }",
          "        _ => panic!(),",
          "    }",
          "    assert_eq!(map.try_insert(42, 3.14).unwrap(), &3.14);",
          "    let result = map.try_insert(42, 2.71);",
          "    assert!(result.is_err());",
          "    if let Err(OccupiedError { entry, value }) = result {",
          "    assert_eq!(entry.key(), &42);",
          "    assert_eq!(entry.get(), &3.14);",
          "    assert_eq!(value, 2.71);",
          "    } else {",
          "    panic!();",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]