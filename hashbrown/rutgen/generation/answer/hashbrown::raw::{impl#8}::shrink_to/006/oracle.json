[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(8, alloc); // Assume 8 buckets are created initially",
          "    ",
          "    // set the items to 0 to meet the precondition",
          "    table.table.items = 0;",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.buckets(), 8); // Precondition: min_size == 0 should not change the bucket count",
          "    assert_eq!(table.len(), 0); // After shrinking, length should still be 0",
          "    assert!(table.is_empty()); // Table should be empty after operation",
          "    assert!(table.table.ctrl.is_null()); // Ensure control pointer is reset/re-initialized as expected"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(8, alloc); // Assume 8 buckets are created initially",
          "    ",
          "    // set the items to 0 to meet the precondition",
          "    table.table.items = 0;",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "    assert_eq!(table.buckets(), 8); // Precondition: min_size == 0 should not change the bucket count",
          "    assert_eq!(table.len(), 0); // After shrinking, length should still be 0",
          "    assert!(table.is_empty()); // Table should be empty after operation",
          "    assert!(table.table.ctrl.is_null()); // Ensure control pointer is reset/re-initialized as expected",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(8, alloc); // Assume 8 buckets are created initially",
          "",
          "    // Set the items to a non-zero count to meet the non-empty condition",
          "    table.table.items = 1;",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.table.items, 1);",
          "    assert_eq!(table.buckets(), 8);",
          "    assert!(table.table.ctrl.as_ptr() != std::ptr::null_mut());",
          "    assert!(table.table.growth_left > 0);",
          "    assert!(table.table.bucket_mask > 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(8, alloc); // Assume 8 buckets are created initially",
          "",
          "    // Set the items to a non-zero count to meet the non-empty condition",
          "    table.table.items = 1;",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "    assert_eq!(table.table.items, 1);",
          "    assert_eq!(table.buckets(), 8);",
          "    assert!(table.table.ctrl.as_ptr() != std::ptr::null_mut());",
          "    assert!(table.table.growth_left > 0);",
          "    assert!(table.table.bucket_mask > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(0, alloc); // No buckets to begin with",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 1);",
          "    assert!(table.table.items == 0);",
          "    assert!(table.table.ctrl_slice().iter().all(|tag| tag.is_empty()));",
          "    assert!(matches!(table.table.ctrl_slice().first(), None));",
          "    assert!(table.allocation_size() == 0);",
          "    assert!(table.table.ctrl == NonNull::new_unchecked(std::ptr::null_mut()));"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::non_null(0 as *mut u8)))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table = RawTable::with_capacity_in(0, alloc); // No buckets to begin with",
          "",
          "    // Call the method under test",
          "    unsafe {",
          "        table.shrink_to(0, |x| 0);",
          "    }",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert_eq!(table.buckets(), 1);",
          "    assert!(table.table.items == 0);",
          "    assert!(table.table.ctrl_slice().iter().all(|tag| tag.is_empty()));",
          "    assert!(matches!(table.table.ctrl_slice().first(), None));",
          "    assert!(table.allocation_size() == 0);",
          "    assert!(table.table.ctrl == NonNull::new_unchecked(std::ptr::null_mut()));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]