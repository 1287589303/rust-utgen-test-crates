[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut raw_table = RawTable::with_capacity_in(16, Global);",
          "    let hash_function = |item: &u32| *item;",
          "    ",
          "    // Populate the table with items to ensure self.table.items is greater than 0",
          "    for i in 1..=10 {",
          "        let _ = raw_table.insert(i as u64, i, hash_function);",
          "    }",
          "",
          "    // Ensure that self.buckets() > 0 and self.table.items > 0",
          "    assert!(raw_table.buckets() > 0);",
          "    assert!(raw_table.len() > 0);",
          "",
          "    // Now call shrink_to with min_size = 0 which meets the precondition at line 836.",
          "    raw_table.shrink_to(0, hash_function);",
          "}"
        ],
        "oracle": [
          "    assert!(raw_table.len() == 0);",
          "    assert_eq!(raw_table.buckets(), 1);",
          "    let old_table = mem::replace(&mut raw_table.table, RawTableInner::NEW);",
          "    unsafe { old_table.drop_inner_table::<u32, _>(&raw_table.alloc, RawTable::TABLE_LAYOUT); }",
          "    assert!(raw_table.len() == 0);",
          "    assert!(raw_table.buckets() > 0);",
          "    raw_table.shrink_to(10, hash_function);",
          "    assert!(raw_table.len() <= 10);",
          "    assert!(raw_table.buckets() > 1);",
          "    raw_table.shrink_to(5, hash_function);",
          "    assert!(raw_table.len() <= 5);",
          "    assert!(raw_table.buckets() < 16);"
        ],
        "code": [
          "{",
          "    let mut raw_table = RawTable::with_capacity_in(16, Global);",
          "    let hash_function = |item: &u32| *item;",
          "    ",
          "    // Populate the table with items to ensure self.table.items is greater than 0",
          "    for i in 1..=10 {",
          "        let _ = raw_table.insert(i as u64, i, hash_function);",
          "    }",
          "",
          "    // Ensure that self.buckets() > 0 and self.table.items > 0",
          "    assert!(raw_table.buckets() > 0);",
          "    assert!(raw_table.len() > 0);",
          "",
          "    // Now call shrink_to with min_size = 0 which meets the precondition at line 836.",
          "    raw_table.shrink_to(0, hash_function);",
          "    assert!(raw_table.len() == 0);",
          "    assert_eq!(raw_table.buckets(), 1);",
          "    let old_table = mem::replace(&mut raw_table.table, RawTableInner::NEW);",
          "    unsafe { old_table.drop_inner_table::<u32, _>(&raw_table.alloc, RawTable::TABLE_LAYOUT); }",
          "    assert!(raw_table.len() == 0);",
          "    assert!(raw_table.buckets() > 0);",
          "    raw_table.shrink_to(10, hash_function);",
          "    assert!(raw_table.len() <= 10);",
          "    assert!(raw_table.buckets() > 1);",
          "    raw_table.shrink_to(5, hash_function);",
          "    assert!(raw_table.len() <= 5);",
          "    assert!(raw_table.buckets() < 16);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut raw_table = RawTable::with_capacity_in(16, Global);",
          "    let hash_function = |item: &u32| *item;",
          "    ",
          "    // Populate the table with items to ensure self.table.items is greater than 0",
          "    for i in 1..=10 {",
          "        let _ = raw_table.insert(i as u64, i, hash_function);",
          "    }",
          "",
          "    // Ensure that self.buckets() > 0 and self.table.items > 0",
          "    assert!(raw_table.buckets() > 0);",
          "    assert!(raw_table.len() > 0);",
          "",
          "    // Call shrink_to with a min_size that is less than the current number of items",
          "    raw_table.shrink_to(5, hash_function);",
          "    assert!(raw_table.buckets() < 16);  // ensure the table has shrunk",
          "}"
        ],
        "oracle": [
          "    assert_eq!(raw_table.len(), 10);  // Ensure the number of items is as expected.",
          "    assert!(raw_table.buckets() > 10);  // Ensure there are more buckets than items before shrinking.",
          "    assert!(capacity_to_buckets(5).is_some());  // Check that capacity_to_buckets(5) returns Some.",
          "    raw_table.shrink_to(0, hash_function);  // Test with min_size == 0.",
          "    assert!(raw_table.buckets() == 1);  // Ensure it shrinks to 1 bucket.",
          "    assert!(raw_table.len() == 0);  // Ensure the table is empty after shrinking to 0."
        ],
        "code": [
          "{",
          "    let mut raw_table = RawTable::with_capacity_in(16, Global);",
          "    let hash_function = |item: &u32| *item;",
          "    ",
          "    // Populate the table with items to ensure self.table.items is greater than 0",
          "    for i in 1..=10 {",
          "        let _ = raw_table.insert(i as u64, i, hash_function);",
          "    }",
          "",
          "    // Ensure that self.buckets() > 0 and self.table.items > 0",
          "    assert!(raw_table.buckets() > 0);",
          "    assert!(raw_table.len() > 0);",
          "",
          "    // Call shrink_to with a min_size that is less than the current number of items",
          "    raw_table.shrink_to(5, hash_function);",
          "    assert!(raw_table.buckets() < 16);  // ensure the table has shrunk",
          "    assert_eq!(raw_table.len(), 10);  // Ensure the number of items is as expected.",
          "    assert!(raw_table.buckets() > 10);  // Ensure there are more buckets than items before shrinking.",
          "    assert!(capacity_to_buckets(5).is_some());  // Check that capacity_to_buckets(5) returns Some.",
          "    raw_table.shrink_to(0, hash_function);  // Test with min_size == 0.",
          "    assert!(raw_table.buckets() == 1);  // Ensure it shrinks to 1 bucket.",
          "    assert!(raw_table.len() == 0);  // Ensure the table is empty after shrinking to 0.",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]