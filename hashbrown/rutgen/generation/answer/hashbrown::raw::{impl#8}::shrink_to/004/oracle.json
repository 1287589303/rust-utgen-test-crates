[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table: RawTable<i32, TestAllocator> = RawTable::new_in(alloc);",
          "",
          "    // Precondition setup: simulate initial state",
          "    table.table.items = 0; // self.table.items == 0",
          "    // Setting buckets to be more than min_buckets",
          "    let initial_capacity = 2; // assuming initial buckets are more than min_buckets (they must be a power of two)",
          "    table.table.bucket_mask = initial_capacity - 1; // 1 bucket",
          "    ",
          "    // Test with min_size = 0",
          "    let min_size = 0;",
          "",
          "    // Define a simple hasher function",
          "    let hasher = |_: &i32| 0;",
          "",
          "    // Call the function under test",
          "    table.shrink_to(min_size, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.table.items, 0);",
          "    assert!(table.buckets() > 1);",
          "    assert_eq!(table.table.bucket_mask, 1);",
          "    assert!(capacity_to_buckets(min_size).is_some());",
          "    assert!(capacity_to_buckets(min_size).unwrap() > table.buckets());",
          "    assert!(table.table.items == 0);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
          "    }",
          "",
          "    let alloc = TestAllocator;",
          "    let mut table: RawTable<i32, TestAllocator> = RawTable::new_in(alloc);",
          "",
          "    // Precondition setup: simulate initial state",
          "    table.table.items = 0; // self.table.items == 0",
          "    // Setting buckets to be more than min_buckets",
          "    let initial_capacity = 2; // assuming initial buckets are more than min_buckets (they must be a power of two)",
          "    table.table.bucket_mask = initial_capacity - 1; // 1 bucket",
          "    ",
          "    // Test with min_size = 0",
          "    let min_size = 0;",
          "",
          "    // Define a simple hasher function",
          "    let hasher = |_: &i32| 0;",
          "",
          "    // Call the function under test",
          "    table.shrink_to(min_size, hasher);",
          "    assert_eq!(table.table.items, 0);",
          "    assert!(table.buckets() > 1);",
          "    assert_eq!(table.table.bucket_mask, 1);",
          "    assert!(capacity_to_buckets(min_size).is_some());",
          "    assert!(capacity_to_buckets(min_size).unwrap() > table.buckets());",
          "    assert!(table.table.items == 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]