[
  {
    "uses": [
      "use hashbrown::hash_map::HashMap;",
      "use hashbrown::hash_map::RawEntryMut;",
      "use std::rc::Rc;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"a\");",
          "    let key_two = Rc::new(\"a\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&key_two], 10);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"a\");",
          "    let key_two = Rc::new(\"a\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "    assert_eq!(map[&key_two], 10);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"b\");",
          "    let key_two = Rc::new(\"c\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 20);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);",
          "    assert_eq!(map[&key_two], 20);",
          "    assert!(map.contains_key(&key_one));",
          "    assert!(map.contains_key(&key_two));"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"b\");",
          "    let key_two = Rc::new(\"c\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 20);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);",
          "    assert_eq!(map[&key_two], 20);",
          "    assert!(map.contains_key(&key_one));",
          "    assert!(map.contains_key(&key_two));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"d\");",
          "    let key_two = Rc::new(\"d\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 30);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "}"
        ],
        "oracle": [
          "    let key_one = Rc::new(\"d\");",
          "    let key_two = Rc::new(\"d\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 30);",
          "    let inside_key: &mut Rc<&str>;",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    RawEntryMut::Occupied(o) => {",
          "    let temp_key = o.into_key();",
          "    assert!(temp_key as *const _ != key_one as *const _);",
          "    inside_key = temp_key;",
          "    }",
          "    }",
          "    *inside_key = key_two.clone();",
          "    assert_eq!(map[&key_one], 30);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"d\");",
          "    let key_two = Rc::new(\"d\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 30);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "    let key_one = Rc::new(\"d\");",
          "    let key_two = Rc::new(\"d\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 30);",
          "    let inside_key: &mut Rc<&str>;",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    RawEntryMut::Occupied(o) => {",
          "    let temp_key = o.into_key();",
          "    assert!(temp_key as *const _ != key_one as *const _);",
          "    inside_key = temp_key;",
          "    }",
          "    }",
          "    *inside_key = key_two.clone();",
          "    assert_eq!(map[&key_one], 30);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"e\");",
          "    let key_two = Rc::new(\"f\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 40);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&key_one], 40);",
          "    assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);",
          "    let inside_key: &mut Rc<&str>;",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    assert!(!inside_key.is_null());",
          "    assert_eq!(unsafe { &mut self.elem.as_mut().0 }, &key_one);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"e\");",
          "    let key_two = Rc::new(\"f\");",
          "",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 40);",
          "",
          "    let inside_key: &mut Rc<&str>;",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    *inside_key = key_two.clone();",
          "    assert_eq!(map[&key_one], 40);",
          "    assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);",
          "    let inside_key: &mut Rc<&str>;",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    RawEntryMut::Occupied(o) => inside_key = o.into_key(),",
          "    }",
          "    assert!(!inside_key.is_null());",
          "    assert_eq!(unsafe { &mut self.elem.as_mut().0 }, &key_one);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]