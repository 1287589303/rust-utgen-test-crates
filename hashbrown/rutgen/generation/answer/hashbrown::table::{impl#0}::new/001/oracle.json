[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::new();",
          "    let length = table.raw.table.len(); // Length should be 0",
          "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.raw.table.len(), 0);",
          "    assert_eq!(table.raw.table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::new();",
          "    let length = table.raw.table.len(); // Length should be 0",
          "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
          "    assert_eq!(table.raw.table.len(), 0);",
          "    assert_eq!(table.raw.table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(0);",
          "    let length = table.raw.table.len(); // Length should be 0",
          "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.raw.table, RawTableInner::NEW);",
          "    assert!(table.raw.alloc == Global);",
          "    assert!(std::mem::size_of::<HashTable<&str>>() > 0);"
        ],
        "code": [
          "{",
          "    let table: HashTable<&str> = HashTable::with_capacity(0);",
          "    let length = table.raw.table.len(); // Length should be 0",
          "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    assert_eq!(table.raw.table, RawTableInner::NEW);",
          "    assert!(table.raw.alloc == Global);",
          "    assert!(std::mem::size_of::<HashTable<&str>>() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]