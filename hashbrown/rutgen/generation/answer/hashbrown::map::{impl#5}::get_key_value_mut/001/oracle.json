[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"a\");",
          "    let (k, v) = map.get_key_value_mut(&1).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(k, &1);",
          "    assert_eq!(v, &mut \"a\");",
          "    *v = \"b\";",
          "    assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));",
          "    assert_eq!(map.get_key_value_mut(&2), None);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(1, \"a\");",
          "    let (k, v) = map.get_key_value_mut(&1).unwrap();",
          "    assert_eq!(k, &1);",
          "    assert_eq!(v, &mut \"a\");",
          "    *v = \"b\";",
          "    assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));",
          "    assert_eq!(map.get_key_value_mut(&2), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(String::from(\"key\"), \"value\");",
          "    let (k, v) = map.get_key_value_mut(&\"key\".to_string()).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(k, &String::from(\"key\"));",
          "    assert_eq!(v, &mut \"value\");",
          "    assert_eq!(map.get_key_value_mut(&\"non_existing_key\".to_string()), None);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(String::from(\"key\"), \"value\");",
          "    let (k, v) = map.get_key_value_mut(&\"key\".to_string()).unwrap();",
          "    assert_eq!(k, &String::from(\"key\"));",
          "    assert_eq!(v, &mut \"value\");",
          "    assert_eq!(map.get_key_value_mut(&\"non_existing_key\".to_string()), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(3.14, \"pi\");",
          "    let (k, v) = map.get_key_value_mut(&3.14).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"pi\")));",
          "    *v = \"tau\";",
          "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"tau\")));",
          "    assert_eq!(map.get_key_value_mut(&2.71), None);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(3.14, \"pi\");",
          "    let (k, v) = map.get_key_value_mut(&3.14).unwrap();",
          "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"pi\")));",
          "    *v = \"tau\";",
          "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"tau\")));",
          "    assert_eq!(map.get_key_value_mut(&2.71), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert((1, 2), \"tuple\");",
          "    let (k, v) = map.get_key_value_mut(&(1, 2)).unwrap();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(k, &(1, 2));",
          "    assert_eq!(v, &mut \"tuple\");",
          "    *v = \"changed\";",
          "    assert_eq!(map.get_key_value_mut(&(1, 2)), Some(&(1, &mut \"changed\")));",
          "    assert_eq!(map.get_key_value_mut(&(2, 3)), None);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert((1, 2), \"tuple\");",
          "    let (k, v) = map.get_key_value_mut(&(1, 2)).unwrap();",
          "    assert_eq!(k, &(1, 2));",
          "    assert_eq!(v, &mut \"tuple\");",
          "    *v = \"changed\";",
          "    assert_eq!(map.get_key_value_mut(&(1, 2)), Some(&(1, &mut \"changed\")));",
          "    assert_eq!(map.get_key_value_mut(&(2, 3)), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]