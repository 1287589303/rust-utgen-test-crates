[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_map: HashMap<i32, (), DefaultHashBuilder, Global> = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    let hashset = HashSet::from(empty_map);",
          "}"
        ],
        "oracle": [
          "    assert!(hashset.map.hash_builder == DefaultHashBuilder::default());",
          "    assert!(hashset.map.table.is_empty());",
          "    assert_eq!(hashset.map.table.len(), 0);"
        ],
        "code": [
          "{",
          "    let empty_map: HashMap<i32, (), DefaultHashBuilder, Global> = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    let hashset = HashSet::from(empty_map);",
          "    assert!(hashset.map.hash_builder == DefaultHashBuilder::default());",
          "    assert!(hashset.map.table.is_empty());",
          "    assert_eq!(hashset.map.table.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    map.table.insert((1, ())); // Inserting one entry",
          "    let hashset = HashSet::from(map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashset.map.table.len(), 1);",
          "    assert!(hashset.map.table.contains_key(&1));",
          "    assert_eq!(hashset.map.hash_builder, DefaultHashBuilder::default());",
          "    assert!(hashset.map.table.is_empty() == false);",
          "    assert!(hashset.map.table.contains_key(&(1)));"
        ],
        "code": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    map.table.insert((1, ())); // Inserting one entry",
          "    let hashset = HashSet::from(map);",
          "    assert_eq!(hashset.map.table.len(), 1);",
          "    assert!(hashset.map.table.contains_key(&1));",
          "    assert_eq!(hashset.map.hash_builder, DefaultHashBuilder::default());",
          "    assert!(hashset.map.table.is_empty() == false);",
          "    assert!(hashset.map.table.contains_key(&(1)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    map.table.insert((1, ()));",
          "    map.table.insert((2, ())); // Inserting two entries",
          "    let hashset = HashSet::from(map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashset.map.table.len(), 2);",
          "    assert!(hashset.map.table.contains_key(&1));",
          "    assert!(hashset.map.table.contains_key(&2));",
          "    assert!(!hashset.map.table.contains_key(&3));",
          "    assert_eq!(hashset.map.hash_builder, DefaultHashBuilder::default());",
          "    assert_eq!(hashset.map.table.capacity(), expected_capacity);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    map.table.insert((1, ()));",
          "    map.table.insert((2, ())); // Inserting two entries",
          "    let hashset = HashSet::from(map);",
          "    assert_eq!(hashset.map.table.len(), 2);",
          "    assert!(hashset.map.table.contains_key(&1));",
          "    assert!(hashset.map.table.contains_key(&2));",
          "    assert!(!hashset.map.table.contains_key(&3));",
          "    assert_eq!(hashset.map.hash_builder, DefaultHashBuilder::default());",
          "    assert_eq!(hashset.map.table.capacity(), expected_capacity);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    for i in 0..10_000 { // Inserting up to max size with 10,000 entries",
          "        map.table.insert((i, ()));",
          "    }",
          "    let hashset = HashSet::from(map);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hashset.map.table.len(), 10_000);",
          "    assert!(hashset.map.table.contains(&(0, ())).is_some());",
          "    assert!(hashset.map.table.contains(&(9999, ())).is_some());",
          "    assert!(hashset.map.table.get(&(5, ())).is_some());",
          "    assert!(hashset.map.table.get(&(10000, ())).is_none());",
          "    assert!(hashset.map.table.is_empty() == false);",
          "    assert!(hashset.map.hash_builder == DefaultHashBuilder::default());"
        ],
        "code": [
          "{",
          "    let mut map = HashMap {",
          "        hash_builder: DefaultHashBuilder::default(),",
          "        table: RawTable::new(),",
          "    };",
          "    for i in 0..10_000 { // Inserting up to max size with 10,000 entries",
          "        map.table.insert((i, ()));",
          "    }",
          "    let hashset = HashSet::from(map);",
          "    assert_eq!(hashset.map.table.len(), 10_000);",
          "    assert!(hashset.map.table.contains(&(0, ())).is_some());",
          "    assert!(hashset.map.table.contains(&(9999, ())).is_some());",
          "    assert!(hashset.map.table.get(&(5, ())).is_some());",
          "    assert!(hashset.map.table.get(&(10000, ())).is_none());",
          "    assert!(hashset.map.table.is_empty() == false);",
          "    assert!(hashset.map.hash_builder == DefaultHashBuilder::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]