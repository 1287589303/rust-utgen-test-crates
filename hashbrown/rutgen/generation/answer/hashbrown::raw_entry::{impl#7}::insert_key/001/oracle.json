[
  {
    "uses": [
      "use hashbrown::hash_map::HashMap;",
      "use std::rc::Rc;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key = Rc::new(\"a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(&key) {",
          "        RawEntryMut::Vacant(mut vacant) => {",
          "            vacant.insert_key(key.clone());",
          "        }",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.raw_entry_mut().from_key(&key).is_vacant());",
          "    assert_eq!(Rc::strong_count(&key), 1);",
          "    assert!(map.get_key_value().0.is_none());",
          "    assert!(map.get_key_value().1.is_none());"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key = Rc::new(\"a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(&key) {",
          "        RawEntryMut::Vacant(mut vacant) => {",
          "            vacant.insert_key(key.clone());",
          "        }",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "    assert!(map.raw_entry_mut().from_key(&key).is_vacant());",
          "    assert_eq!(Rc::strong_count(&key), 1);",
          "    assert!(map.get_key_value().0.is_none());",
          "    assert!(map.get_key_value().1.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"a\");",
          "    let key_two = Rc::new(\"a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            // The old key should still refer to the same memory.",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&key_one], 10);",
          "    assert!(Rc::strong_count(&key_one) == 2);",
          "    assert!(Rc::strong_count(&key_two) == 1);",
          "    assert_eq!(map[&key_two], 10);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"a\");",
          "    let key_two = Rc::new(\"a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            // The old key should still refer to the same memory.",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "    }",
          "    assert_eq!(map[&key_one], 10);",
          "    assert!(Rc::strong_count(&key_one) == 2);",
          "    assert!(Rc::strong_count(&key_two) == 1);",
          "    assert_eq!(map[&key_two], 10);",
          "    assert!(Rc::strong_count(&key_one) == 1);",
          "    assert!(Rc::strong_count(&key_two) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key = Rc::new(\"test\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(&key) {",
          "        RawEntryMut::Vacant(mut vacant) => {",
          "            vacant.insert_key(key.clone());",
          "        }",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert_eq!(map.get(&key), Some(&10));",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.get(&key), None);",
          "    let old_key = vacant.insert_key(key.clone());",
          "    assert!(Rc::ptr_eq(&old_key, &key));",
          "    map.insert(key.clone(), 10);",
          "    assert_eq!(map.get(&key), Some(&10));",
          "    assert!(Rc::strong_count(&key) == 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key = Rc::new(\"test\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "",
          "    match map.raw_entry_mut().from_key(&key) {",
          "        RawEntryMut::Vacant(mut vacant) => {",
          "            vacant.insert_key(key.clone());",
          "        }",
          "        RawEntryMut::Occupied(_) => panic!(),",
          "    }",
          "",
          "    assert_eq!(map.get(&key), Some(&10));",
          "    assert_eq!(map.get(&key), None);",
          "    let old_key = vacant.insert_key(key.clone());",
          "    assert!(Rc::ptr_eq(&old_key, &key));",
          "    map.insert(key.clone(), 10);",
          "    assert_eq!(map.get(&key), Some(&10));",
          "    assert!(Rc::strong_count(&key) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"full_key\");",
          "    let key_two = Rc::new(\"full_key\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(map.raw_entry_mut().from_key(&key_one).is_occupied());",
          "    assert_eq!(map[&key_one], 10);",
          "    assert_eq!(Rc::strong_count(&key_one), 2);",
          "    assert_eq!(Rc::strong_count(&key_two), 1);",
          "    let occupied_entry = map.raw_entry_mut().from_key(&key_one).unwrap_occupied();",
          "    assert_eq!(occupied_entry.key(), &*key_one);",
          "    let old_key = occupied_entry.insert_key(key_two.clone());",
          "    assert!(Rc::ptr_eq(&old_key, &key_one));",
          "    assert_eq!(map[&key_two], 10);",
          "    assert_eq!(Rc::strong_count(&key_one), 1);",
          "    assert_eq!(Rc::strong_count(&key_two), 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"full_key\");",
          "    let key_two = Rc::new(\"full_key\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 10);",
          "",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert!(map.raw_entry_mut().from_key(&key_one).is_occupied());",
          "    assert_eq!(map[&key_one], 10);",
          "    assert_eq!(Rc::strong_count(&key_one), 2);",
          "    assert_eq!(Rc::strong_count(&key_two), 1);",
          "    let occupied_entry = map.raw_entry_mut().from_key(&key_one).unwrap_occupied();",
          "    assert_eq!(occupied_entry.key(), &*key_one);",
          "    let old_key = occupied_entry.insert_key(key_two.clone());",
          "    assert!(Rc::ptr_eq(&old_key, &key_one));",
          "    assert_eq!(map[&key_two], 10);",
          "    assert_eq!(Rc::strong_count(&key_one), 1);",
          "    assert_eq!(Rc::strong_count(&key_two), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"shared_a\");",
          "    let key_two = Rc::new(\"shared_a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 20);",
          "    ",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map[&key_two], 20);",
          "    assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);",
          "    let key_three = Rc::new(\"new_key\");",
          "    let old_key_three = map.raw_entry_mut().from_key(&key_three);",
          "    assert!(matches!(old_key_three, RawEntryMut::Vacant(_)));",
          "    let key_four = Rc::new(\"shared_b\");",
          "    map.insert(key_four.clone(), 30);",
          "    match map.raw_entry_mut().from_key(&key_four) {",
          "    RawEntryMut::Occupied(mut occupied) => {",
          "    let old_key_four = occupied.insert_key(key_three.clone());",
          "    assert!(Rc::ptr_eq(&old_key_four, &key_four));",
          "    }",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[&key_three], 30);",
          "    assert!(Rc::strong_count(&key_four) == 1 && Rc::strong_count(&key_three) == 2);"
        ],
        "code": [
          "{",
          "    use hashbrown::hash_map::HashMap;",
          "    use std::rc::Rc;",
          "",
          "    let key_one = Rc::new(\"shared_a\");",
          "    let key_two = Rc::new(\"shared_a\");",
          "    let mut map: HashMap<Rc<&str>, u32> = HashMap::new();",
          "    map.insert(key_one.clone(), 20);",
          "    ",
          "    match map.raw_entry_mut().from_key(&key_one) {",
          "        RawEntryMut::Occupied(mut occupied) => {",
          "            let old_key = occupied.insert_key(key_two.clone());",
          "            assert!(Rc::ptr_eq(&old_key, &key_one));",
          "        }",
          "        RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[&key_two], 20);",
          "    assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);",
          "    let key_three = Rc::new(\"new_key\");",
          "    let old_key_three = map.raw_entry_mut().from_key(&key_three);",
          "    assert!(matches!(old_key_three, RawEntryMut::Vacant(_)));",
          "    let key_four = Rc::new(\"shared_b\");",
          "    map.insert(key_four.clone(), 30);",
          "    match map.raw_entry_mut().from_key(&key_four) {",
          "    RawEntryMut::Occupied(mut occupied) => {",
          "    let old_key_four = occupied.insert_key(key_three.clone());",
          "    assert!(Rc::ptr_eq(&old_key_four, &key_four));",
          "    }",
          "    RawEntryMut::Vacant(_) => panic!(),",
          "    }",
          "    assert_eq!(map[&key_three], 30);",
          "    assert!(Rc::strong_count(&key_four) == 1 && Rc::strong_count(&key_three) == 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]