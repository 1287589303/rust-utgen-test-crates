[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(10);",
          "    table.insert((1, ()));",
          "    table.insert((2, ()));",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k % 2 == 0,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.inner.iter.size_hint(), (0, Some(0)));",
          "    iter.inner.iter.push((4, ()));",
          "    assert_eq!(iter.next(), Some(4));",
          "    iter.inner.iter.push((5, ()));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(10);",
          "    table.insert((1, ()));",
          "    table.insert((2, ()));",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k % 2 == 0,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.inner.iter.size_hint(), (0, Some(0)));",
          "    iter.inner.iter.push((4, ()));",
          "    assert_eq!(iter.next(), Some(4));",
          "    iter.inner.iter.push((5, ()));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(0);",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&_| true,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), None);",
          "    table.insert((1, ()));",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), None);",
          "    table.insert((2, ()));",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(2));",
          "    table.clear();",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(0);",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&_| true,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), None);",
          "    table.insert((1, ()));",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), None);",
          "    table.insert((2, ()));",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(2));",
          "    table.clear();",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(5);",
          "    table.insert((3, ()));",
          "    table.insert((4, ()));",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k == 4,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(4));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "    assert!(iter.inner.iter.is_exhausted());",
          "    assert!(iter.inner.table.is_empty());"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "    ",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u32, ()), TestAllocator> = RawTable::with_capacity(5);",
          "    table.insert((3, ()));",
          "    table.insert((4, ()));",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k == 4,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(4));",
          "    assert_eq!(iter.next(), None);",
          "    assert_eq!(iter.size_hint(), (0, Some(0)));",
          "    assert!(iter.inner.iter.is_exhausted());",
          "    assert!(iter.inner.table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u64, ()), TestAllocator> = RawTable::with_capacity(10);",
          "    for i in 0..10 {",
          "        table.insert((i, ()));",
          "    }",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k < 10,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(iter.next(), Some(0));",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.next(), Some(3));",
          "    assert_eq!(iter.next(), Some(4));",
          "    assert_eq!(iter.next(), Some(5));",
          "    assert_eq!(iter.next(), Some(6));",
          "    assert_eq!(iter.next(), Some(7));",
          "    assert_eq!(iter.next(), Some(8));",
          "    assert_eq!(iter.next(), Some(9));",
          "    assert_eq!(iter.next(), None);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Err(())",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let mut table: RawTable<(u64, ()), TestAllocator> = RawTable::with_capacity(10);",
          "    for i in 0..10 {",
          "        table.insert((i, ()));",
          "    }",
          "",
          "    let extractor = ExtractIf {",
          "        f: |&k| k < 10,",
          "        inner: RawExtractIf {",
          "            iter: RawIter::new(),",
          "            table: &mut table,",
          "        },",
          "    };",
          "",
          "    let mut iter = extractor;",
          "    let _ = iter.next();",
          "    assert_eq!(iter.next(), Some(0));",
          "    assert_eq!(iter.next(), Some(1));",
          "    assert_eq!(iter.next(), Some(2));",
          "    assert_eq!(iter.next(), Some(3));",
          "    assert_eq!(iter.next(), Some(4));",
          "    assert_eq!(iter.next(), Some(5));",
          "    assert_eq!(iter.next(), Some(6));",
          "    assert_eq!(iter.next(), Some(7));",
          "    assert_eq!(iter.next(), Some(8));",
          "    assert_eq!(iter.next(), Some(9));",
          "    assert_eq!(iter.next(), None);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]