[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    let hint = empty_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    assert_eq!(hint, (0, Some(0)));",
          "    let single_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1].into_iter()) };",
          "    let hint = single_iter.size_hint();",
          "    assert_eq!(hint, (1, Some(1)));",
          "    let multi_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multi_iter.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "    let iter_with_none: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2].into_iter().take(1)) };",
          "    let hint = iter_with_none.size_hint();",
          "    assert_eq!(hint, (1, Some(2)));"
        ],
        "code": [
          "{",
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    let hint = empty_iter.size_hint();",
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    assert_eq!(hint, (0, Some(0)));",
          "    let single_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1].into_iter()) };",
          "    let hint = single_iter.size_hint();",
          "    assert_eq!(hint, (1, Some(1)));",
          "    let multi_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multi_iter.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "    let iter_with_none: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2].into_iter().take(1)) };",
          "    let hint = iter_with_none.size_hint();",
          "    assert_eq!(hint, (1, Some(2)));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let single_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1].into_iter()) };",
          "    let hint = single_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint, (1, Some(1));"
        ],
        "code": [
          "{",
          "    let single_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1].into_iter()) };",
          "    let hint = single_iter.size_hint();",
          "    assert_eq!(hint, (1, Some(1));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let multiple_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multiple_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    let multiple_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multiple_iter.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "    assert!(hint.0 == 3);",
          "    assert!(hint.1.is_some());",
          "    assert!(hint.1 == Some(3));",
          "    ",
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    let empty_hint = empty_iter.size_hint();",
          "    assert_eq!(empty_hint, (0, Some(0)));",
          "    assert!(empty_hint.0 == 0);",
          "    assert!(empty_hint.1.is_some());",
          "    assert!(empty_hint.1 == Some(0));"
        ],
        "code": [
          "{",
          "    let multiple_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multiple_iter.size_hint();",
          "    let multiple_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3].into_iter()) };",
          "    let hint = multiple_iter.size_hint();",
          "    assert_eq!(hint, (3, Some(3)));",
          "    assert!(hint.0 == 3);",
          "    assert!(hint.1.is_some());",
          "    assert!(hint.1 == Some(3));",
          "    ",
          "    let empty_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![].into_iter()) };",
          "    let empty_hint = empty_iter.size_hint();",
          "    assert_eq!(empty_hint, (0, Some(0)));",
          "    assert!(empty_hint.0 == 0);",
          "    assert!(empty_hint.1.is_some());",
          "    assert!(empty_hint.1 == Some(0));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let infinite_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new((0..).into_iter()) };",
          "    let hint = infinite_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 0);",
          "    assert!(hint.1.is_none());"
        ],
        "code": [
          "{",
          "    let infinite_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new((0..).into_iter()) };",
          "    let hint = infinite_iter.size_hint();",
          "    assert_eq!(hint.0, 0);",
          "    assert!(hint.1.is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let collection_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3, 4].into_iter()) };",
          "    let hint = collection_iter.size_hint();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(hint.0, 4);",
          "    assert_eq!(hint.1, Some(4));"
        ],
        "code": [
          "{",
          "    let collection_iter: IntoIter<i32> = IntoIter { inner: RawIntoIter::new(vec![1, 2, 3, 4].into_iter()) };",
          "    let hint = collection_iter.size_hint();",
          "    assert_eq!(hint.0, 4);",
          "    assert_eq!(hint.1, Some(4));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]