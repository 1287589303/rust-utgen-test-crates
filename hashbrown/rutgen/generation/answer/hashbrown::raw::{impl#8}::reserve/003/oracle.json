[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(0, alloc);",
          "    let additional = 0;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "}"
        ],
        "oracle": [
          "    assert!(table.capacity() >= additional);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert_eq!(table.table.growth_left, 0);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(0, alloc);",
          "    let additional = 0;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "    assert!(table.capacity() >= additional);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());",
          "    assert_eq!(table.buckets(), 0);",
          "    assert_eq!(table.table.growth_left, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(10, alloc);",
          "    table.table.growth_left = 10;",
          "    let additional = table.table.growth_left;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.table.growth_left, 10);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert!(table.capacity() >= additional);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(10, alloc);",
          "    table.table.growth_left = 10;",
          "    let additional = table.table.growth_left;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "    assert_eq!(table.table.growth_left, 10);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(table.is_empty());",
          "    assert!(table.capacity() >= additional);",
          "    assert!(unsafe { table.is_bucket_full(0) } == false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(10, alloc);",
          "    table.table.growth_left = 10;",
          "    let additional = 5;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.table.growth_left, 10);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());",
          "    assert!(table.capacity() >= 15);"
        ],
        "code": [
          "{",
          "    let alloc = Global;",
          "    let mut table: RawTable<i32, Global> = RawTable::with_capacity_in(10, alloc);",
          "    table.table.growth_left = 10;",
          "    let additional = 5;",
          "    let hasher = |value: &i32| *value as u64;",
          "    table.reserve(additional, hasher);",
          "    assert_eq!(table.table.growth_left, 10);",
          "    assert_eq!(table.len(), 0);",
          "    assert!(!table.is_empty());",
          "    assert!(table.capacity() >= 15);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]