[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b0000_0000);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0001);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1110);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0111);",
          "    assert_eq!(tag.is_full(), false);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b0000_0000);",
          "    tag.is_full();",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0001);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1110);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0111);",
          "    assert_eq!(tag.is_full(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b0011_1111);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tag.is_full(), true);",
          "    tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b0011_1111);",
          "    tag.is_full();",
          "    assert_eq!(tag.is_full(), true);",
          "    tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b0100_0000);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert!(tag.is_full() == true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert!(tag.is_full() == false);",
          "    let tag = Tag(0b1111_1111);",
          "    assert!(tag.is_full() == false);",
          "    let tag = Tag(0b0000_0000);",
          "    assert!(tag.is_full() == true);",
          "    let tag = Tag(0b0111_1111);",
          "    assert!(tag.is_full() == true);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b0100_0000);",
          "    tag.is_full();",
          "    assert!(tag.is_full() == true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert!(tag.is_full() == false);",
          "    let tag = Tag(0b1111_1111);",
          "    assert!(tag.is_full() == false);",
          "    let tag = Tag(0b0000_0000);",
          "    assert!(tag.is_full() == true);",
          "    let tag = Tag(0b0111_1111);",
          "    assert!(tag.is_full() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b0111_1111);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert!(tag.is_full() == true);",
          "    let tag_empty = Tag::EMPTY;",
          "    assert!(tag_empty.is_full() == true);",
          "    let tag_deleted = Tag::DELETED;",
          "    assert!(tag_deleted.is_full() == false);",
          "    let tag_full = Tag(0b0000_0000);",
          "    assert!(tag_full.is_full() == true);",
          "    let tag_half_full = Tag(0b0111_1111);",
          "    assert!(tag_half_full.is_full() == true);",
          "    let tag_with_top_bit_set = Tag(0b1000_0001);",
          "    assert!(tag_with_top_bit_set.is_full() == false);",
          "    let tag_with_top_bit_clear = Tag(0b0111_1110);",
          "    assert!(tag_with_top_bit_clear.is_full() == true);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b0111_1111);",
          "    tag.is_full();",
          "    assert!(tag.is_full() == true);",
          "    let tag_empty = Tag::EMPTY;",
          "    assert!(tag_empty.is_full() == true);",
          "    let tag_deleted = Tag::DELETED;",
          "    assert!(tag_deleted.is_full() == false);",
          "    let tag_full = Tag(0b0000_0000);",
          "    assert!(tag_full.is_full() == true);",
          "    let tag_half_full = Tag(0b0111_1111);",
          "    assert!(tag_half_full.is_full() == true);",
          "    let tag_with_top_bit_set = Tag(0b1000_0001);",
          "    assert!(tag_with_top_bit_set.is_full() == false);",
          "    let tag_with_top_bit_clear = Tag(0b0111_1110);",
          "    assert!(tag_with_top_bit_clear.is_full() == true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b1000_0000);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b1000_0000);",
          "    tag.is_full();",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b1011_1111);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b1011_1111);",
          "    tag.is_full();",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true);",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b1111_1111);",
          "    assert_eq!(tag.is_full(), false);",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let tag = Tag(0b1111_1111);",
          "    tag.is_full();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(tag.is_full(), false); // Test with EMPTY tag",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true); // Test with a full tag",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false); // Test with a DELETED tag",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true); // Test with the full tag condition",
          "    let tag = Tag(0b0111_1110);",
          "    assert_eq!(tag.is_full(), true); // Test with another valid full tag",
          "    let tag = Tag(0b1111_1110);",
          "    assert_eq!(tag.is_full(), false); // Test with a special tag condition"
        ],
        "code": [
          "{",
          "    let tag = Tag(0b1111_1111);",
          "    tag.is_full();",
          "    assert_eq!(tag.is_full(), false); // Test with EMPTY tag",
          "    let tag = Tag(0b0111_1111);",
          "    assert_eq!(tag.is_full(), true); // Test with a full tag",
          "    let tag = Tag(0b1000_0000);",
          "    assert_eq!(tag.is_full(), false); // Test with a DELETED tag",
          "    let tag = Tag(0b0000_0000);",
          "    assert_eq!(tag.is_full(), true); // Test with the full tag condition",
          "    let tag = Tag(0b0111_1110);",
          "    assert_eq!(tag.is_full(), true); // Test with another valid full tag",
          "    let tag = Tag(0b1111_1110);",
          "    assert_eq!(tag.is_full(), false); // Test with a special tag condition",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]