[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAllocator;",
          "    unsafe impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let alloc = DummyAllocator;",
          "    let map: HashMap<&str, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
          "    let len = map.len();",
          "    let capacity = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    assert_eq!(capacity, 0);"
        ],
        "code": [
          "{",
          "    struct DummyAllocator;",
          "    unsafe impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let alloc = DummyAllocator;",
          "    let map: HashMap<&str, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
          "    let len = map.len();",
          "    let capacity = map.capacity();",
          "    assert_eq!(len, 0);",
          "    assert_eq!(capacity, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct DummyAllocator;",
          "    unsafe impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let alloc = DummyAllocator;",
          "    let map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
          "    let len = map.len();",
          "    let capacity = map.capacity();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    assert_eq!(capacity, 0);",
          "    map.insert(1, 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.capacity() > 0);"
        ],
        "code": [
          "{",
          "    struct DummyAllocator;",
          "    unsafe impl Allocator for DummyAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
          "        }",
          "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
          "    }",
          "",
          "    let alloc = DummyAllocator;",
          "    let map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
          "    let len = map.len();",
          "    let capacity = map.capacity();",
          "    assert_eq!(len, 0);",
          "    assert_eq!(capacity, 0);",
          "    map.insert(1, 10);",
          "    assert_eq!(map.len(), 1);",
          "    assert!(map.capacity() > 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]