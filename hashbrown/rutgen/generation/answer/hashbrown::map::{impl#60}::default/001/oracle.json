[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, i32, i32> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Keys::default(), Keys { inner: Default::default() });"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, i32, i32> = Keys::default();",
          "    assert_eq!(Keys::default(), Keys { inner: Default::default() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, String, String> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    let keys: Keys<String, String> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    assert!(std::mem::size_of_val(&keys) > 0);",
          "    assert!(keys.inner.is_empty());",
          "    assert_eq!(keys.inner.len(), 0);"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, String, String> = Keys::default();",
          "    let keys: Keys<String, String> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    assert!(std::mem::size_of_val(&keys) > 0);",
          "    assert!(keys.inner.is_empty());",
          "    assert_eq!(keys.inner.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, String, i32> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    let keys: Keys<'_, String, i32> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    assert!(keys.inner.is_empty());",
          "    assert!(keys.inner.len() == 0);",
          "    assert!(keys.inner.iter().next().is_none());"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, String, i32> = Keys::default();",
          "    let keys: Keys<'_, String, i32> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    assert!(keys.inner.is_empty());",
          "    assert!(keys.inner.len() == 0);",
          "    assert!(keys.inner.iter().next().is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, i32, ()> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    let keys: Keys<'_, i32, ()> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    let keys_empty: Keys<'_, i32, ()> = Keys::default();",
          "    assert!(keys_empty.inner.is_empty());",
          "    let keys_different_type: Keys<'_, String, ()> = Keys::default();",
          "    assert_eq!(keys_different_type.inner, Default::default());",
          "    let keys_default: Keys<'_, i32, ()> = Keys::default();",
          "    assert!(keys_default.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, i32, ()> = Keys::default();",
          "    let keys: Keys<'_, i32, ()> = Keys::default();",
          "    assert_eq!(keys.inner, Default::default());",
          "    let keys_empty: Keys<'_, i32, ()> = Keys::default();",
          "    assert!(keys_empty.inner.is_empty());",
          "    let keys_different_type: Keys<'_, String, ()> = Keys::default();",
          "    assert_eq!(keys_different_type.inner, Default::default());",
          "    let keys_default: Keys<'_, i32, ()> = Keys::default();",
          "    assert!(keys_default.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, (), ()> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Keys::default(), Keys { inner: Default::default() });",
          "    assert!(std::mem::size_of::<Keys<'_, (), ()>>() > 0);",
          "    let keys: Keys<'_, (), ()> = Keys::default();",
          "    assert!(keys.inner == Default::default());",
          "    assert!(keys.inner.is_empty());"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, (), ()> = Keys::default();",
          "    assert_eq!(Keys::default(), Keys { inner: Default::default() });",
          "    assert!(std::mem::size_of::<Keys<'_, (), ()>>() > 0);",
          "    let keys: Keys<'_, (), ()> = Keys::default();",
          "    assert!(keys.inner == Default::default());",
          "    assert!(keys.inner.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let _: Keys<'_, bool, bool> = Keys::default();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(Keys::default().inner, Default::default());"
        ],
        "code": [
          "{",
          "    let _: Keys<'_, bool, bool> = Keys::default();",
          "    assert_eq!(Keys::default().inner, Default::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]