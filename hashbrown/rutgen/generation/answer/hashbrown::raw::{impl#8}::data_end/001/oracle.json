[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::new_in(Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    assert!(unsafe { _end_ptr.as_ptr().is_null() });",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    assert_eq!(raw_table.len(), 0);",
          "    assert_eq!(raw_table.buckets(), 0);",
          "    assert!(raw_table.is_empty());"
        ],
        "code": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::new_in(Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(unsafe { _end_ptr.as_ptr().is_null() });",
          "    assert_eq!(raw_table.capacity(), 0);",
          "    assert_eq!(raw_table.len(), 0);",
          "    assert_eq!(raw_table.buckets(), 0);",
          "    assert!(raw_table.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(2, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(2, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(!_end_ptr.is_null());",
          "    assert_eq!(_end_ptr.cast::<u8>().as_ptr(), raw_table.table.ctrl.cast::<u8>().as_ptr().add(2));",
          "    assert_eq!(raw_table.buckets(), 2);",
          "    assert_eq!(raw_table.allocation_size(), raw_table.capacity() * mem::size_of::<u8>());"
        ],
        "code": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(2, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(2, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(!_end_ptr.is_null());",
          "    assert_eq!(_end_ptr.cast::<u8>().as_ptr(), raw_table.table.ctrl.cast::<u8>().as_ptr().add(2));",
          "    assert_eq!(raw_table.buckets(), 2);",
          "    assert_eq!(raw_table.allocation_size(), raw_table.capacity() * mem::size_of::<u8>());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    assert!(raw_table.capacity() >= 4);",
          "    assert!(raw_table.len() == 0);",
          "    assert_eq!(raw_table.buckets(), 4);",
          "    assert!(unsafe { raw_table.is_bucket_full(0) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(1) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(2) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(3) } == false);",
          "    assert!(raw_table.data_end() != ptr::null_mut());",
          "    assert!(raw_table.data_end().as_ptr() == raw_table.table.ctrl.as_ptr());",
          "    assert_eq!(raw_table.data_end().as_ptr() as usize % 4, 0);"
        ],
        "code": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(raw_table.capacity() >= 4);",
          "    assert!(raw_table.len() == 0);",
          "    assert_eq!(raw_table.buckets(), 4);",
          "    assert!(unsafe { raw_table.is_bucket_full(0) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(1) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(2) } == false);",
          "    assert!(unsafe { raw_table.is_bucket_full(3) } == false);",
          "    assert!(raw_table.data_end() != ptr::null_mut());",
          "    assert!(raw_table.data_end().as_ptr() == raw_table.table.ctrl.as_ptr());",
          "    assert_eq!(raw_table.data_end().as_ptr() as usize % 4, 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(8, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(8, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(_end_ptr.as_ptr() as usize > raw_table.data_start().as_ptr() as usize);",
          "    assert_eq!(raw_table.capacity(), 8);",
          "    assert!(raw_table.is_empty());",
          "    assert_eq!(raw_table.len(), 0);"
        ],
        "code": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(8, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(8, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(_end_ptr.as_ptr() as usize > raw_table.data_start().as_ptr() as usize);",
          "    assert_eq!(raw_table.capacity(), 8);",
          "    assert!(raw_table.is_empty());",
          "    assert_eq!(raw_table.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(16, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    assert!(unsafe { raw_table.data_end().as_ptr() != ptr::null() });",
          "    assert_eq!(raw_table.data_end().as_ptr() as usize % 2 == 0, true);",
          "    assert!(unsafe { raw_table.data_end() >= raw_table.data_start() });"
        ],
        "code": [
          "{",
          "    let raw_table: RawTable<u8> = RawTable::with_capacity_in(16, Global);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(unsafe { raw_table.data_end().as_ptr() != ptr::null() });",
          "    assert_eq!(raw_table.data_end().as_ptr() as usize % 2 == 0, true);",
          "    assert!(unsafe { raw_table.data_end() >= raw_table.data_start() });",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        raw_table.insert(1, 42, |x| x.hash() as u64);",
          "        raw_table.insert(2, 43, |x| x.hash() as u64);",
          "    }",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    assert_eq!(raw_table.buckets(), 4);",
          "    unsafe {",
          "    raw_table.insert(1, 42, |x| x.hash() as u64);",
          "    assert!(raw_table.len() == 1);",
          "    raw_table.insert(2, 43, |x| x.hash() as u64);",
          "    assert!(raw_table.len() == 2);",
          "    }",
          "    let end_ptr = raw_table.data_end();",
          "    assert!(end_ptr.as_ptr() != ptr::null_mut());",
          "    assert!(end_ptr.as_ptr() >= raw_table.data_start().as_ptr());"
        ],
        "code": [
          "{",
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    unsafe {",
          "        raw_table.insert(1, 42, |x| x.hash() as u64);",
          "        raw_table.insert(2, 43, |x| x.hash() as u64);",
          "    }",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    assert_eq!(raw_table.buckets(), 4);",
          "    unsafe {",
          "    raw_table.insert(1, 42, |x| x.hash() as u64);",
          "    assert!(raw_table.len() == 1);",
          "    raw_table.insert(2, 43, |x| x.hash() as u64);",
          "    assert!(raw_table.len() == 2);",
          "    }",
          "    let end_ptr = raw_table.data_end();",
          "    assert!(end_ptr.as_ptr() != ptr::null_mut());",
          "    assert!(end_ptr.as_ptr() >= raw_table.data_start().as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    raw_table.reserve(2, |x| x.hash() as u64);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "}"
        ],
        "oracle": [
          "    assert!(raw_table.capacity() >= 4);",
          "    assert_eq!(raw_table.len(), 0);",
          "    assert!(!raw_table.is_empty());",
          "    assert!(raw_table.buckets() > 0);",
          "    let end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(end_ptr.as_ptr() != std::ptr::null_mut());",
          "    assert!(end_ptr.as_ptr() > raw_table.data_start().as_ptr());"
        ],
        "code": [
          "{",
          "    let mut raw_table: RawTable<u8> = RawTable::with_capacity_in(4, Global);",
          "    raw_table.reserve(2, |x| x.hash() as u64);",
          "    let _end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(raw_table.capacity() >= 4);",
          "    assert_eq!(raw_table.len(), 0);",
          "    assert!(!raw_table.is_empty());",
          "    assert!(raw_table.buckets() > 0);",
          "    let end_ptr: NonNull<u8> = raw_table.data_end();",
          "    assert!(end_ptr.as_ptr() != std::ptr::null_mut());",
          "    assert!(end_ptr.as_ptr() > raw_table.data_start().as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]