[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [Some(&mut 1)]);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "    assert_eq!(result, [Some(&mut 1)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [Some(&mut 1), Some(&mut 2)]);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "    assert_eq!(result, [Some(&mut 1), Some(&mut 2)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [Some(&mut 1), None]);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "    assert_eq!(result, [Some(&mut 1), None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "}"
        ],
        "oracle": [
          "    assert!(result.len() == 1);",
          "    assert!(result[0].is_none());",
          "    ",
          "    map.insert(\"key1\".to_string(), 1);",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "    assert!(result.len() == 1);",
          "    assert!(result[0].is_some());",
          "    assert_eq!(*result[0].unwrap(), 1);",
          "    ",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "    assert!(result.len() == 2);",
          "    assert!(result[0].is_some());",
          "    assert!(result[1].is_some());",
          "    assert_eq!(*result[0].unwrap(), 1);",
          "    assert_eq!(*result[1].unwrap(), 2);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"non_existent_key\"]) };",
          "    assert!(result.len() == 2);",
          "    assert!(result[0].is_some());",
          "    assert!(result[1].is_none());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, i32> = HashMap::new();",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "    assert!(result.len() == 1);",
          "    assert!(result[0].is_none());",
          "    ",
          "    map.insert(\"key1\".to_string(), 1);",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\"]) };",
          "    assert!(result.len() == 1);",
          "    assert!(result[0].is_some());",
          "    assert_eq!(*result[0].unwrap(), 1);",
          "    ",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key2\"]) };",
          "    assert!(result.len() == 2);",
          "    assert!(result[0].is_some());",
          "    assert!(result[1].is_some());",
          "    assert_eq!(*result[0].unwrap(), 1);",
          "    assert_eq!(*result[1].unwrap(), 2);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key1\", \"non_existent_key\"]) };",
          "    assert!(result.len() == 2);",
          "    assert!(result[0].is_some());",
          "    assert!(result[1].is_none());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [
          "#[should_panic]"
        ],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    ",
          "    let _result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key1\"]) };",
          "}"
        ],
        "oracle": [
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let _result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key1\"]) };"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    ",
          "    let _result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key1\"]) };",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    map.insert(\"key2\".to_string(), 2);",
          "    let _result = unsafe { map.get_many_unchecked_mut([\"key1\", \"key1\"]) };",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key2\", \"key3\"]) };",
          "}"
        ],
        "oracle": [
          "    assert_eq!(result, [None, None]);"
        ],
        "code": [
          "{",
          "    let mut map = HashMap::new();",
          "    map.insert(\"key1\".to_string(), 1);",
          "    ",
          "    let result = unsafe { map.get_many_unchecked_mut([\"key2\", \"key3\"]) };",
          "    assert_eq!(result, [None, None]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]