[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::new();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::new();",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);"
        ],
        "code": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity(0);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity(5);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 5);",
          "    assert_eq!(map.hash_builder, DefaultHashBuilder::default());"
        ],
        "code": [
          "{",
          "    let map: HashMap<&str, i32> = HashMap::with_capacity(5);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 5);",
          "    assert_eq!(map.hash_builder, DefaultHashBuilder::default());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]