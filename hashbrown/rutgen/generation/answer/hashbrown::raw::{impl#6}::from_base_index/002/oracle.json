[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    ",
          "    let index: usize = 0; // Minimum valid index",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "}"
        ],
        "oracle": [
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    let index: usize = 0;",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr().sub(index));",
          "    assert!(bucket.ptr.as_ptr().is_non_null());",
          "    assert_eq!(bucket.ptr.as_ref().data, 42);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    ",
          "    let index: usize = 0; // Minimum valid index",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    let index: usize = 0;",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr().sub(index));",
          "    assert!(bucket.ptr.as_ptr().is_non_null());",
          "    assert_eq!(bucket.ptr.as_ref().data, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    ",
          "    let index: usize = 1; // Maximum valid index assuming bucket_mask is at least 1",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(bucket.ptr.as_ptr(), &base_value as *const _ as *mut _);",
          "    assert!(bucket.ptr != NonNull::dangling());",
          "    assert!(bucket.ptr.is_alive());",
          "    assert_eq!(unsafe { bucket.as_ref() }.data, 42);"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    ",
          "    let index: usize = 1; // Maximum valid index assuming bucket_mask is at least 1",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    assert_eq!(bucket.ptr.as_ptr(), &base_value as *const _ as *mut _);",
          "    assert!(bucket.ptr != NonNull::dangling());",
          "    assert!(bucket.ptr.is_alive());",
          "    assert_eq!(unsafe { bucket.as_ref() }.data, 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "",
          "    let index: usize = 0; // Minimum valid index",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "}"
        ],
        "oracle": [
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    let index: usize = 0;",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr());"
        ],
        "code": [
          "{",
          "    struct TestStruct {",
          "        data: u32,",
          "    }",
          "",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "",
          "    let index: usize = 0; // Minimum valid index",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    let base_value = TestStruct { data: 42 };",
          "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
          "    let index: usize = 0;",
          "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
          "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]