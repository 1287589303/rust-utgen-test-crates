[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(Box::into_raw(Box::new(0u8)) as *mut u8))",
          "        }",
          "        unsafe fn deallocate(&self, ptr: NonNull<u8>, _layout: Layout) {",
          "            drop(Box::from_raw(ptr.as_ptr() as *mut u8));",
          "        }",
          "    }",
          "",
          "    let allocator = TestAllocator;",
          "    let table: RawTable<u8, TestAllocator> = RawTable::new_in(allocator);",
          "",
          "    let cloned_table = table.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(cloned_table.is_empty_singleton());",
          "    assert_eq!(cloned_table.len(), 0);",
          "    assert_eq!(cloned_table.buckets(), table.buckets());",
          "    assert!(cloned_table.allocator() as *const _ == table.allocator() as *const _);",
          "    assert!(cloned_table.alloc as *const _ == table.alloc as *const _);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(Box::into_raw(Box::new(0u8)) as *mut u8))",
          "        }",
          "        unsafe fn deallocate(&self, ptr: NonNull<u8>, _layout: Layout) {",
          "            drop(Box::from_raw(ptr.as_ptr() as *mut u8));",
          "        }",
          "    }",
          "",
          "    let allocator = TestAllocator;",
          "    let table: RawTable<u8, TestAllocator> = RawTable::new_in(allocator);",
          "",
          "    let cloned_table = table.clone();",
          "    assert!(cloned_table.is_empty_singleton());",
          "    assert_eq!(cloned_table.len(), 0);",
          "    assert_eq!(cloned_table.buckets(), table.buckets());",
          "    assert!(cloned_table.allocator() as *const _ == table.allocator() as *const _);",
          "    assert!(cloned_table.alloc as *const _ == table.alloc as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(Box::into_raw(Box::new(0u8)) as *mut u8))",
          "        }",
          "        unsafe fn deallocate(&self, ptr: NonNull<u8>, _layout: Layout) {",
          "            drop(Box::from_raw(ptr.as_ptr() as *mut u8));",
          "        }",
          "    }",
          "",
          "    let allocator = TestAllocator;",
          "    let table: RawTable<u8, TestAllocator> = RawTable::with_capacity_in(0, allocator);",
          "",
          "    let cloned_table = table.clone();",
          "}"
        ],
        "oracle": [
          "    assert!(cloned_table.is_empty_singleton());",
          "    assert_eq!(cloned_table.len(), 0);",
          "    assert_eq!(cloned_table.buckets(), table.buckets());",
          "    assert_eq!(cloned_table.allocator(), table.allocator());",
          "    assert_ne!(cloned_table.alloc as *const _, table.alloc as *const _);"
        ],
        "code": [
          "{",
          "    struct TestAllocator;",
          "",
          "    unsafe impl Allocator for TestAllocator {",
          "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
          "            Ok(NonNull::new_unchecked(Box::into_raw(Box::new(0u8)) as *mut u8))",
          "        }",
          "        unsafe fn deallocate(&self, ptr: NonNull<u8>, _layout: Layout) {",
          "            drop(Box::from_raw(ptr.as_ptr() as *mut u8));",
          "        }",
          "    }",
          "",
          "    let allocator = TestAllocator;",
          "    let table: RawTable<u8, TestAllocator> = RawTable::with_capacity_in(0, allocator);",
          "",
          "    let cloned_table = table.clone();",
          "    assert!(cloned_table.is_empty_singleton());",
          "    assert_eq!(cloned_table.len(), 0);",
          "    assert_eq!(cloned_table.buckets(), table.buckets());",
          "    assert_eq!(cloned_table.allocator(), table.allocator());",
          "    assert_ne!(cloned_table.alloc as *const _, table.alloc as *const _);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]