[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.insert(4, 40);",
          "",
          "    map.retain(|_key, _value| false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    assert!(vec.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.insert(4, 40);",
          "",
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "    assert_eq!(map.capacity(), 10);",
          "    assert!(map.is_empty());",
          "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    assert!(vec.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<String, String> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder, Global);",
          "    map.insert(\"a\".to_string(), \"apple\".to_string());",
          "    map.insert(\"b\".to_string(), \"banana\".to_string());",
          "    ",
          "    map.retain(|_key, _value| false);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 5);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<String, String> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder, Global);",
          "    map.insert(\"a\".to_string(), \"apple\".to_string());",
          "    map.insert(\"b\".to_string(), \"banana\".to_string());",
          "    ",
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 5);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
          "    map.insert(10, 100);",
          "    ",
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "oracle": [
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
          "    map.insert(10, 100);",
          "    assert_eq!(map.len(), 1);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
          "    map.insert(10, 100);",
          "    ",
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "    map.retain(|_key, _value| false);",
          "    assert_eq!(map.len(), 0);",
          "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
          "    map.insert(10, 100);",
          "    assert_eq!(map.len(), 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]