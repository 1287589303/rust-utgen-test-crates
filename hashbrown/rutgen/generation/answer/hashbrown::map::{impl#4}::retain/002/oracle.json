[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.retain(|&k, _| k % 2 == 0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.keys().len(), 0);",
          "    assert_eq!(map.values().len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
          "    map.retain(|&k, _| k % 2 == 0);",
          "    assert_eq!(map.len(), 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 0);",
          "    assert_eq!(map.keys().len(), 0);",
          "    assert_eq!(map.values().len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k % 2 == 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    let mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, [(1, 10), (3, 30)]);",
          "    assert!(map.keys().all(|&k| k % 2 == 1));",
          "    assert_eq!(map.capacity(), 5);",
          "    assert!(!map.is_empty());"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k % 2 == 1);",
          "    assert_eq!(map.len(), 2);",
          "    let mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, [(1, 10), (3, 30)]);",
          "    assert!(map.keys().all(|&k| k % 2 == 1));",
          "    assert_eq!(map.capacity(), 5);",
          "    assert!(!map.is_empty());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k > 1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, [(2, 20), (3, 30)]);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k > 1);",
          "    assert_eq!(map.len(), 2);",
          "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
          "    vec.sort_unstable();",
          "    assert_eq!(vec, [(2, 20), (3, 30)]);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k > 10);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&1));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k > 10);",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&1));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k == 2 || k == 3);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&1));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.retain(|&k, _| k == 2 || k == 3);",
          "    assert_eq!(map.len(), 2);",
          "    assert!(map.contains_key(&2));",
          "    assert!(map.contains_key(&3));",
          "    assert!(!map.contains_key(&1));",
          "    assert_eq!(map.get(&2), Some(&20));",
          "    assert_eq!(map.get(&3), Some(&30));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]