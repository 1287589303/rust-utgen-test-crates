[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|_, _| true);",
          "    ",
          "    let len = map.len(); // Expect length to be 3",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2, 3]",
          "}"
        ],
        "oracle": [
          "    len == 3",
          "    keys == [1, 2, 3]"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|_, _| true);",
          "    ",
          "    let len = map.len(); // Expect length to be 3",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2, 3]",
          "    len == 3",
          "    keys == [1, 2, 3]",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|_, _| false);",
          "    ",
          "    let len = map.len(); // Expect length to be 0",
          "}"
        ],
        "oracle": [
          "    assert_eq!(len, 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.keys().count(), 0);",
          "    assert_eq!(map.values().count(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|_, _| false);",
          "    ",
          "    let len = map.len(); // Expect length to be 0",
          "    assert_eq!(len, 0);",
          "    assert!(map.is_empty());",
          "    assert_eq!(map.capacity(), 10);",
          "    assert_eq!(map.keys().count(), 0);",
          "    assert_eq!(map.values().count(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|&k, _| k % 2 == 0);",
          "    ",
          "    let len = map.len(); // Expect length to be 1",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [2]",
          "}"
        ],
        "oracle": [
          "    len == 1",
          "    keys == vec![2]",
          "    map.is_empty() == false",
          "    map.capacity() >= 10",
          "    map.values().collect::<Vec<_>>() == vec![20]"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    ",
          "    map.retain(|&k, _| k % 2 == 0);",
          "    ",
          "    let len = map.len(); // Expect length to be 1",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [2]",
          "    len == 1",
          "    keys == vec![2]",
          "    map.is_empty() == false",
          "    map.capacity() >= 10",
          "    map.values().collect::<Vec<_>>() == vec![20]",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.insert(4, 40);",
          "    ",
          "    map.retain(|&k, _| k < 3);",
          "    ",
          "    let len = map.len(); // Expect length to be 2",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2]",
          "}"
        ],
        "oracle": [
          "    len == 2",
          "    keys == [1, 2]"
        ],
        "code": [
          "{",
          "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
          "    map.insert(1, 10);",
          "    map.insert(2, 20);",
          "    map.insert(3, 30);",
          "    map.insert(4, 40);",
          "    ",
          "    map.retain(|&k, _| k < 3);",
          "    ",
          "    let len = map.len(); // Expect length to be 2",
          "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2]",
          "    len == 2",
          "    keys == [1, 2]",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]