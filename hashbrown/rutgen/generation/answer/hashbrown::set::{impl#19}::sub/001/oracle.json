[
  {
    "uses": [
      "use std::hash::BuildHasherDefault;",
      "use std::collections::hash_map::RandomState;",
      "use hashbrown::HashSet;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (25..75).collect();",
          "    let set = &a - &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 25);",
          "    assert!(!set.contains(&26));",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&24));",
          "    assert_eq!(set.iter().count(), 25);",
          "    assert!(set.iter().all(|x| *x < 25));",
          "    assert_eq!(set.difference(&b).len(), 25);",
          "    assert!(set.is_disjoint(&b));",
          "    assert!(set.is_subset(&a));",
          "    assert!(!set.is_subset(&b));",
          "    assert!(set.is_superset(&set));",
          "    assert!(set.insert(50));",
          "    assert!(!set.insert(0));",
          "    assert_eq!(set.take(&0), Some(0));",
          "    assert_eq!(set.take(&50), Some(50));",
          "    assert_eq!(set.len(), 24);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (25..75).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 25);",
          "    assert!(!set.contains(&26));",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&24));",
          "    assert_eq!(set.iter().count(), 25);",
          "    assert!(set.iter().all(|x| *x < 25));",
          "    assert_eq!(set.difference(&b).len(), 25);",
          "    assert!(set.is_disjoint(&b));",
          "    assert!(set.is_subset(&a));",
          "    assert!(!set.is_subset(&b));",
          "    assert!(set.is_superset(&set));",
          "    assert!(set.insert(50));",
          "    assert!(!set.insert(0));",
          "    assert_eq!(set.take(&0), Some(0));",
          "    assert_eq!(set.take(&50), Some(50));",
          "    assert_eq!(set.len(), 24);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (51..100).collect();",
          "    let set = &a - &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 50);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&25));",
          "    assert!(set.contains(&49));",
          "    assert!(!set.contains(&51));",
          "    assert!(!set.contains(&100));",
          "    assert_eq!(set.iter().count(), 50);",
          "    let empty_set: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let difference_with_empty = &a - &empty_set;",
          "    assert_eq!(difference_with_empty.len(), 50);",
          "    let difference_same = &a - &a;",
          "    assert!(difference_same.is_empty());",
          "    let c: HashSet<i32, BuildHasherDefault<RandomState>> = (0..75).collect();",
          "    let difference_c = &c - &b;",
          "    assert_eq!(difference_c.len(), 25);",
          "    for x in difference_c.iter() {",
          "    assert!(x < 50);",
          "    }"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (51..100).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 50);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&25));",
          "    assert!(set.contains(&49));",
          "    assert!(!set.contains(&51));",
          "    assert!(!set.contains(&100));",
          "    assert_eq!(set.iter().count(), 50);",
          "    let empty_set: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let difference_with_empty = &a - &empty_set;",
          "    assert_eq!(difference_with_empty.len(), 50);",
          "    let difference_same = &a - &a;",
          "    assert!(difference_same.is_empty());",
          "    let c: HashSet<i32, BuildHasherDefault<RandomState>> = (0..75).collect();",
          "    let difference_c = &c - &b;",
          "    assert_eq!(difference_c.len(), 25);",
          "    for x in difference_c.iter() {",
          "    assert!(x < 50);",
          "    }",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (25..26).collect();",
          "    let set = &a - &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 49);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&24));",
          "    assert!(!set.contains(&25));",
          "    assert!(set.contains(&26));",
          "    assert!(set.contains(&49));",
          "    assert_eq!(set.iter().count(), 49);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (25..26).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 49);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&1));",
          "    assert!(set.contains(&24));",
          "    assert!(!set.contains(&25));",
          "    assert!(set.contains(&26));",
          "    assert!(set.contains(&49));",
          "    assert_eq!(set.iter().count(), 49);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let set = &a - &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (0..25).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 25);",
          "    let expected: HashSet<i32> = (25..50).collect();",
          "    for x in &set {",
          "    assert!(expected.contains(x));",
          "    }",
          "    let c: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let set = &a - &c;",
          "    assert_eq!(set.len(), 50);",
          "    let set = &c - &a;",
          "    assert_eq!(set.len(), 0);",
          "    let d: HashSet<i32, BuildHasherDefault<RandomState>> = (50..100).collect();",
          "    let set = &a - &d;",
          "    assert_eq!(set.len(), 50);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 0);",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = (0..25).collect();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 25);",
          "    let expected: HashSet<i32> = (25..50).collect();",
          "    for x in &set {",
          "    assert!(expected.contains(x));",
          "    }",
          "    let c: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let set = &a - &c;",
          "    assert_eq!(set.len(), 50);",
          "    let set = &c - &a;",
          "    assert_eq!(set.len(), 0);",
          "    let d: HashSet<i32, BuildHasherDefault<RandomState>> = (50..100).collect();",
          "    let set = &a - &d;",
          "    assert_eq!(set.len(), 50);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let set = &a - &b;",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 50);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&25));",
          "    assert!(set.contains(&49));",
          "    assert!(!set.contains(&51));",
          "    assert!(set.is_subset(&a));",
          "    assert!(set.is_superset(&b));",
          "    assert!(set.is_disjoint(&b));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashSet;",
          "    use std::hash::BuildHasherDefault;",
          "    use std::collections::hash_map::RandomState;",
          "",
          "    let a: HashSet<i32, BuildHasherDefault<RandomState>> = (0..50).collect();",
          "    let b: HashSet<i32, BuildHasherDefault<RandomState>> = HashSet::new();",
          "    let set = &a - &b;",
          "    assert_eq!(set.len(), 50);",
          "    assert!(set.contains(&0));",
          "    assert!(set.contains(&25));",
          "    assert!(set.contains(&49));",
          "    assert!(!set.contains(&51));",
          "    assert!(set.is_subset(&a));",
          "    assert!(set.is_superset(&b));",
          "    assert!(set.is_disjoint(&b));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]