[
  {
    "uses": [
      "use bumpalo::Bump;",
      "use std::alloc::Global;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let table: HashTable<i32, _> = HashTable::new_in(&bump);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    assert!(std::ptr::eq(table.allocator(), &bump));"
        ],
        "code": [
          "{",
          "    use bumpalo::Bump;",
          "",
          "    let bump = Bump::new();",
          "    let table: HashTable<i32, _> = HashTable::new_in(&bump);",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "    assert!(std::ptr::eq(table.allocator(), &bump));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use std::alloc::Global;",
          "",
          "    let global_allocator = Global;",
          "    let table: HashTable<i32, _> = HashTable::new_in(global_allocator);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);"
        ],
        "code": [
          "{",
          "    use std::alloc::Global;",
          "",
          "    let global_allocator = Global;",
          "    let table: HashTable<i32, _> = HashTable::new_in(global_allocator);",
          "    assert_eq!(table.len(), 0);",
          "    assert_eq!(table.capacity(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]