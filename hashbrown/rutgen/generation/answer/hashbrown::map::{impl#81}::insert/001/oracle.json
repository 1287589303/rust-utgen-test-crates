[
  {
    "uses": [
      "use hashbrown::HashMap;",
      "use std::collections::hash_map::DefaultHasher;",
      "use std::hash::Hasher;",
      "use std::hash::BuildHasher;"
    ],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"new_key\");",
          "    let entry = entry_ref.insert(42);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), \"new_key\");",
          "    assert_eq!(*entry.get_mut(), 42);",
          "    assert!(map.contains_key(\"new_key\"));",
          "    assert_eq!(map[\"new_key\"], 42);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"new_key\");",
          "    let entry = entry_ref.insert(42);",
          "    assert_eq!(entry.key(), \"new_key\");",
          "    assert_eq!(*entry.get_mut(), 42);",
          "    assert!(map.contains_key(\"new_key\"));",
          "    assert_eq!(map[\"new_key\"], 42);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"another_key\");",
          "    let entry = entry_ref.insert(100);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), \"another_key\");",
          "    assert_eq!(entry.get(), &100);",
          "    assert!(map.contains_key(\"another_key\"));",
          "    let previous_value = entry.insert(200);",
          "    assert_eq!(previous_value, 100);",
          "    assert_eq!(entry.get(), &200);",
          "    assert_eq!(map.get(\"another_key\"), Some(&200));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"another_key\");",
          "    let entry = entry_ref.insert(100);",
          "    assert_eq!(entry.key(), \"another_key\");",
          "    assert_eq!(entry.get(), &100);",
          "    assert!(map.contains_key(\"another_key\"));",
          "    let previous_value = entry.insert(200);",
          "    assert_eq!(previous_value, 100);",
          "    assert_eq!(entry.get(), &200);",
          "    assert_eq!(map.get(\"another_key\"), Some(&200));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"key_with_special_char_#1\");",
          "    let entry = entry_ref.insert(1);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), \"key_with_special_char_#1\");",
          "    assert_eq!(entry.get(), &1);"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"key_with_special_char_#1\");",
          "    let entry = entry_ref.insert(1);",
          "    assert_eq!(entry.key(), \"key_with_special_char_#1\");",
          "    assert_eq!(entry.get(), &1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"\");",
          "    let entry = entry_ref.insert(0);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), \"\");",
          "    assert_eq!(*entry.get_mut(), 0);",
          "    assert_eq!(entry.get(), &0);",
          "    assert!(matches!(map.entry_ref(\"\").key(), &\"\" ));",
          "    assert!(matches!(map.entry_ref(\"\").get(), &0));",
          "    assert!(matches!(map.entry_ref(\"\").get_mut(), &mut 0));",
          "    assert!(matches!(map.entry_ref(\"\").key(), &\"\" ));"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"\");",
          "    let entry = entry_ref.insert(0);",
          "    assert_eq!(entry.key(), \"\");",
          "    assert_eq!(*entry.get_mut(), 0);",
          "    assert_eq!(entry.get(), &0);",
          "    assert!(matches!(map.entry_ref(\"\").key(), &\"\" ));",
          "    assert!(matches!(map.entry_ref(\"\").get(), &0));",
          "    assert!(matches!(map.entry_ref(\"\").get_mut(), &mut 0));",
          "    assert!(matches!(map.entry_ref(\"\").key(), &\"\" ));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"large_value_key\");",
          "    let entry = entry_ref.insert(u32::MAX);",
          "}"
        ],
        "oracle": [
          "    assert_eq!(entry.key(), \"large_value_key\");",
          "    assert_eq!(*entry.get(), u32::MAX);",
          "    let entry_ref_vacant = map.entry_ref(\"large_value_key\");",
          "    let entry_vacant = entry_ref_vacant.insert(u32::MIN);",
          "    assert_eq!(entry_vacant.key(), \"large_value_key\");",
          "    assert_eq!(*entry_vacant.get(), u32::MIN);",
          "    assert_ne!(entry.get(), entry_vacant.get());"
        ],
        "code": [
          "{",
          "    use hashbrown::HashMap;",
          "    use std::collections::hash_map::DefaultHasher;",
          "    use std::hash::{BuildHasher, Hasher};",
          "",
          "    struct MyBuildHasher;",
          "",
          "    impl BuildHasher for MyBuildHasher {",
          "        type Hasher = DefaultHasher;",
          "        fn build_hasher(&self) -> Self::Hasher {",
          "            DefaultHasher::new()",
          "        }",
          "    }",
          "",
          "    let mut map: HashMap<String, u32, MyBuildHasher> = HashMap::new();",
          "    let entry_ref = map.entry_ref(\"large_value_key\");",
          "    let entry = entry_ref.insert(u32::MAX);",
          "    assert_eq!(entry.key(), \"large_value_key\");",
          "    assert_eq!(*entry.get(), u32::MAX);",
          "    let entry_ref_vacant = map.entry_ref(\"large_value_key\");",
          "    let entry_vacant = entry_ref_vacant.insert(u32::MIN);",
          "    assert_eq!(entry_vacant.key(), \"large_value_key\");",
          "    assert_eq!(*entry_vacant.get(), u32::MIN);",
          "    assert_ne!(entry.get(), entry_vacant.get());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]