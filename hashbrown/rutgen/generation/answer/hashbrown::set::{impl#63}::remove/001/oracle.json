[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: hashbrown::HashSet<String> = hashbrown::HashSet::new();",
          "    set.insert(\"test\".to_string());",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(\"test\") {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert_eq!(set.contains(\"test\"), false);"
        ],
        "code": [
          "{",
          "    let mut set: hashbrown::HashSet<String> = hashbrown::HashSet::new();",
          "    set.insert(\"test\".to_string());",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(\"test\") {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert_eq!(set.contains(\"test\"), false);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    set.insert(42);",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&42) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert!(!set.contains(&42));"
        ],
        "code": [
          "{",
          "    let mut set: hashbrown::HashSet<i32> = hashbrown::HashSet::new();",
          "    set.insert(42);",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&42) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert!(!set.contains(&42));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: hashbrown::HashSet<f32> = hashbrown::HashSet::new();",
          "    set.insert(3.14);",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&3.14) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert!(set.contains(&3.14) == false);",
          "    assert!(set.len() == 0);",
          "    assert!(set.capacity() > 0);",
          "    assert!(set.len() == 0 && set.capacity() == set.capacity());"
        ],
        "code": [
          "{",
          "    let mut set: hashbrown::HashSet<f32> = hashbrown::HashSet::new();",
          "    set.insert(3.14);",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&3.14) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "    assert!(set.contains(&3.14) == false);",
          "    assert!(set.len() == 0);",
          "    assert!(set.capacity() > 0);",
          "    assert!(set.len() == 0 && set.capacity() == set.capacity());",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut set: hashbrown::HashSet<(i32, &str)> = hashbrown::HashSet::new();",
          "    set.insert((1, \"one\"));",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&(1, \"one\")) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "}"
        ],
        "oracle": [
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert!(!set.contains(&(1, \"one\")));"
        ],
        "code": [
          "{",
          "    let mut set: hashbrown::HashSet<(i32, &str)> = hashbrown::HashSet::new();",
          "    set.insert((1, \"one\"));",
          "    if let hashbrown::hash_set::Entry::Occupied(o) = set.entry(&(1, \"one\")) {",
          "        let value = o.remove();",
          "        drop(value);",
          "    }",
          "    assert_eq!(set.len(), 0);",
          "    assert!(set.is_empty());",
          "    assert!(set.capacity() > 0);",
          "    assert!(!set.contains(&(1, \"one\")));",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]