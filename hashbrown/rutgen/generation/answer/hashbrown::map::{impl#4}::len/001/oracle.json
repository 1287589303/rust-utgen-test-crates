[
  {
    "uses": [],
    "has_test_mod": false,
    "common": [],
    "chain_tests": [
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    let length = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 0);",
          "    map.insert(1, \"a\");",
          "    let new_length = map.len();",
          "    assert_eq!(new_length, 1);",
          "    map.insert(2, \"b\");",
          "    let length_after_second_insert = map.len();",
          "    assert_eq!(length_after_second_insert, 2);",
          "    map.clear();",
          "    let length_after_clear = map.len();",
          "    assert_eq!(length_after_clear, 0);",
          "    map.insert(3, \"c\");",
          "    let length_after_single_insert = map.len();",
          "    assert_eq!(length_after_single_insert, 1);"
        ],
        "code": [
          "{",
          "    let map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    let length = map.len();",
          "    assert_eq!(length, 0);",
          "    map.insert(1, \"a\");",
          "    let new_length = map.len();",
          "    assert_eq!(new_length, 1);",
          "    map.insert(2, \"b\");",
          "    let length_after_second_insert = map.len();",
          "    assert_eq!(length_after_second_insert, 2);",
          "    map.clear();",
          "    let length_after_clear = map.len();",
          "    assert_eq!(length_after_clear, 0);",
          "    map.insert(3, \"c\");",
          "    let length_after_single_insert = map.len();",
          "    assert_eq!(length_after_single_insert, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    let length = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 1);"
        ],
        "code": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    let length = map.len();",
          "    assert_eq!(length, 1);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let length = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(4, \"d\");",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(5, \"e\");",
          "    map.insert(6, \"f\");",
          "    assert_eq!(map.len(), 3);",
          "    map.drain();",
          "    assert_eq!(map.len(), 0);"
        ],
        "code": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(10, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let length = map.len();",
          "    assert_eq!(length, 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(4, \"d\");",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(5, \"e\");",
          "    map.insert(6, \"f\");",
          "    assert_eq!(map.len(), 3);",
          "    map.drain();",
          "    assert_eq!(map.len(), 0);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      },
      {
        "attrs": [],
        "prefix": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(3, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let length = map.len();",
          "}"
        ],
        "oracle": [
          "    assert_eq!(length, 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(4, \"d\");",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(5, \"e\");",
          "    map.insert(6, \"f\");",
          "    assert_eq!(map.len(), 3);",
          "    map.drain();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(7, \"g\");",
          "    map.insert(8, \"h\");",
          "    assert_eq!(map.len(), 2);"
        ],
        "code": [
          "{",
          "    let mut map: super::HashMap<i32, &str> = super::HashMap::with_capacity_and_hasher_in(3, super::DefaultHashBuilder::new(), super::Global);",
          "    map.insert(1, \"a\");",
          "    map.insert(2, \"b\");",
          "    map.insert(3, \"c\");",
          "    let length = map.len();",
          "    assert_eq!(length, 3);",
          "    map.clear();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(4, \"d\");",
          "    assert_eq!(map.len(), 1);",
          "    map.insert(5, \"e\");",
          "    map.insert(6, \"f\");",
          "    assert_eq!(map.len(), 3);",
          "    map.drain();",
          "    assert_eq!(map.len(), 0);",
          "    map.insert(7, \"g\");",
          "    map.insert(8, \"h\");",
          "    assert_eq!(map.len(), 2);",
          "}"
        ],
        "can_compile": false,
        "repaired": false
      }
    ]
  }
]