{
  "name": "hashbrown::map::{impl#1}::new",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:289:5:291:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: K must be any type that implements the Hash and Eq traits, V can be any type, S must be DefaultHashBuilder or a type implementing BuildHasher, A must be an Allocator type (Global or custom), with optional capacities varying from 0 or greater.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::new();",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::with_capacity(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::with_capacity(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert_eq!(map.hash_builder, DefaultHashBuilder::default());"
              ],
              "code": [
                "{",
                "    let map: HashMap<&str, i32> = HashMap::with_capacity(5);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert_eq!(map.hash_builder, DefaultHashBuilder::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}