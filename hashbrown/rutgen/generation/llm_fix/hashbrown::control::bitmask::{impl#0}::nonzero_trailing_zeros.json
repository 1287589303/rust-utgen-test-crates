{
  "name": "hashbrown::control::bitmask::{impl#0}::nonzero_trailing_zeros",
  "mod_info": {
    "name": "control::bitmask",
    "loc": "src/control/mod.rs:1:1:1:13"
  },
  "visible": false,
  "loc": "src/control/bitmask.rs:74:5:82:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: nonzero.trailing_zeros() as usize / BITMASK_STRIDE\n"
      ],
      "input_infer": "Test input conditions or ranges: NonZeroBitMaskWord values ranging from 1 to maximum representable value, specifically avoiding zero; BITMASK_STRIDE values that are factors of 8, with edge cases including the smallest and largest valid NonZeroBitMaskWord values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 1);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 2);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 3);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 4);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(32);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 5);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(64);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 6);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(128);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 7);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(256);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 8);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(512);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 9);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1024);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 10);"
              ],
              "code": [
                "{",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 0);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 1);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 2);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 3);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 4);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(32);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 5);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(64);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 6);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(128);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 7);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(256);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 8);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(512);",
                "  let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "  assert_eq!(result, 9);",
                "  let nonzero = NonZeroBitMaskWord::new_unchecked(1024);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(1)), 0);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(2)), 1);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(4)), 2);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(8)), 3);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(16)), 4);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(32)), 5);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(64)), 6);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(128)), 7);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(256)), 8);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(512)), 9);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(1024)), 10);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(2048)), 11);"
              ],
              "code": [
                "{",
                "   let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "   let result = BitMask::nonzero_trailing_zeros(nonzero);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(1)), 0);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(2)), 1);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(4)), 2);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(8)), 3);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(16)), 4);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(32)), 5);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(64)), 6);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(128)), 7);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(256)), 8);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(512)), 9);",
                "   assert_eq!(BitMask::nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(1024)), 10);",
                "    assert_eq!(BitMask(0).nonzero_trailing_zeros(NonZeroBitMaskWord::new_unchecked(2048)), 11);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    assert!(result > 0);",
                "    assert!(result % BITMASK_STRIDE == 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "    let expected_result = 1;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "    let expected_result = 0;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let expected_result = 3;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(3);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(5);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(6);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(7);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);"
              ],
              "code": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(4);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    assert!(result > 0);",
                "    assert!(result % BITMASK_STRIDE == 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "    let expected_result = 1;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "    let expected_result = 0;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let expected_result = 3;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(2);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(3);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(5);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(6);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(7);",
                "    let expected_result = 2;",
                "    assert_eq!(result, expected_result);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 2);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(255);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b10000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 7);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b01000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 6);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b00000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert!(result != 0);  // Even though 0 is not allowable, this is an assertion to ensure it doesn't return 0"
              ],
              "code": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(8);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 1);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(16);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 2);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(255);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 0);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b10000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 7);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b01000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert_eq!(result, 6);",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0b00000000);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    assert!(result != 0);  // Even though 0 is not allowable, this is an assertion to ensure it doesn't return 0",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(u64::MAX);",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (u64::MAX.trailing_zeros() as usize) / BITMASK_STRIDE);"
              ],
              "code": [
                "{",
                "   let nonzero = NonZeroBitMaskWord::new_unchecked(u64::MAX.try_into().unwrap());",
                "   let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "   assert_eq!(result, (u64::MAX.trailing_zeros() as usize) / BITMASK_STRIDE);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0); ",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "}"
              ],
              "oracle": [
                "    let nonzero_zero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let result_zero = BitMask(0).nonzero_trailing_zeros(nonzero_zero);",
                "    assert_eq!(result_zero, 0);",
                "    ",
                "    let nonzero_max = NonZeroBitMaskWord::new_unchecked(u32::MAX);",
                "    let result_max = BitMask(0).nonzero_trailing_zeros(nonzero_max);",
                "    assert_eq!(result_max, (32 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_even = NonZeroBitMaskWord::new_unchecked(0b10);",
                "    let result_even = BitMask(0).nonzero_trailing_zeros(nonzero_even);",
                "    assert_eq!(result_even, (1 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_odd = NonZeroBitMaskWord::new_unchecked(0b01);",
                "    let result_odd = BitMask(0).nonzero_trailing_zeros(nonzero_odd);",
                "    assert_eq!(result_odd, (0 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_large = NonZeroBitMaskWord::new_unchecked(0b10000000);",
                "    let result_large = BitMask(0).nonzero_trailing_zeros(nonzero_large);",
                "    assert_eq!(result_large, (7 / BITMASK_STRIDE));"
              ],
              "code": [
                "{",
                "    let nonzero = NonZeroBitMaskWord::new_unchecked(0); ",
                "    let result = BitMask(0).nonzero_trailing_zeros(nonzero);",
                "    let nonzero_zero = NonZeroBitMaskWord::new_unchecked(1);",
                "    let result_zero = BitMask(0).nonzero_trailing_zeros(nonzero_zero);",
                "    assert_eq!(result_zero, 0);",
                "    ",
                "    let nonzero_max = NonZeroBitMaskWord::new_unchecked(u32::MAX);",
                "    let result_max = BitMask(0).nonzero_trailing_zeros(nonzero_max);",
                "    assert_eq!(result_max, (32 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_even = NonZeroBitMaskWord::new_unchecked(0b10);",
                "    let result_even = BitMask(0).nonzero_trailing_zeros(nonzero_even);",
                "    assert_eq!(result_even, (1 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_odd = NonZeroBitMaskWord::new_unchecked(0b01);",
                "    let result_odd = BitMask(0).nonzero_trailing_zeros(nonzero_odd);",
                "    assert_eq!(result_odd, (0 / BITMASK_STRIDE));",
                "    ",
                "    let nonzero_large = NonZeroBitMaskWord::new_unchecked(0b10000000);",
                "    let result_large = BitMask(0).nonzero_trailing_zeros(nonzero_large);",
                "    assert_eq!(result_large, (7 / BITMASK_STRIDE));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}