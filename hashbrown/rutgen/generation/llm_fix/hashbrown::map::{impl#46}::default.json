{
  "name": "hashbrown::map::{impl#46}::default",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3160:5:3165:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            inner: Default::default(),\n            marker: PhantomData,\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required, invoke default() method directly for test cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<i32, i32> = Iter::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.inner.items, 0);",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert!(mem::size_of_val(&iter.marker) > 0);",
                "    assert!(iter.marker.is_phantom());"
              ],
              "code": [
                "{",
                "    let iter: Iter<i32, i32> = Iter::default();",
                "    assert_eq!(iter.inner.items, 0);",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert!(mem::size_of_val(&iter.marker) > 0);",
                "    assert!(iter.marker.is_phantom());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<String, String> = Iter::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.inner.items, 0);",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert_eq!(mem::size_of::<Iter<String, String>>(), mem::size_of::<Iter<_, _>>());",
                "    assert!(iter.marker.type_id() == PhantomData::<(&String, &String)>::type_id());"
              ],
              "code": [
                "{",
                "    let iter: Iter<String, String> = Iter::default();",
                "    assert_eq!(iter.inner.items, 0);",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert_eq!(mem::size_of::<Iter<String, String>>(), mem::size_of::<Iter<_, _>>());",
                "    assert!(iter.marker.type_id() == PhantomData::<(&String, &String)>::type_id());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<f32, f32> = Iter::default();",
                "}"
              ],
              "oracle": [
                "    assert!(iter.inner == Default::default());",
                "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&f32, &f32)>>());",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert!(iter.inner.items == 0);"
              ],
              "code": [
                "{",
                "    let iter: Iter<f32, f32> = Iter::default();",
                "    assert!(iter.inner == Default::default());",
                "    assert!(mem::size_of_val(&iter.marker) == mem::size_of::<PhantomData<(&f32, &f32)>>());",
                "    assert!(iter.inner.iter.is_empty());",
                "    assert!(iter.inner.items == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}