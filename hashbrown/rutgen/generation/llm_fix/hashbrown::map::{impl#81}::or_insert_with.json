{
  "name": "hashbrown::map::{impl#81}::or_insert_with",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4195:5:4204:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches EntryRef::Vacant(entry) at line 4200 is true\n",
        "expected return value/type: match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(default()),\n        }\n"
      ],
      "input_infer": "self must be an EntryRef::Vacant variant with a valid key of type Q that can be borrowed as K, and the default function must return a value of type V that is insertable into the HashMap.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue(u32);",
                "    ",
                "    impl Hash for TestKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    ",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let hash = 0u64;",
                "",
                "    let entry_ref: EntryRef<TestKey, TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "        EntryRef::Vacant(VacantEntryRef { hash, key: &key, table: &mut map });",
                "",
                "    let value_ref = entry_ref.or_insert_with(|| TestValue(5));",
                "}"
              ],
              "oracle": [
                "    entry_ref.or_insert_with(|| TestValue(5));",
                "    assert_eq!(entry_ref.key(), &key);",
                "    let inserted_value = entry_ref.or_insert_with(|| TestValue(10));",
                "    assert_eq!(*inserted_value, TestValue(5));",
                "    *inserted_value = TestValue(12);",
                "    assert_eq!(entry_ref.key(), &key);",
                "    assert_eq!(*entry_ref.or_insert_with(|| TestValue(0)), TestValue(12));"
              ],
              "code": [
                "{",
                "  #[derive(PartialEq)]  ",
                "  struct TestKey;  ",
                "  #[derive(PartialEq)]  ",
                "",
                "    impl Hash for TestKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    ",
                "   struct TestAllocator;",
                "",
                "   unsafe impl Allocator for TestAllocator {",
                "       fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let hash = 0u64;",
                "",
                "    let entry_ref: EntryRef<TestKey, TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "        EntryRef::Vacant(VacantEntryRef { hash, key: &key, table: &mut map });",
                "",
                "    let value_ref = entry_ref.or_insert_with(|| TestValue(5));",
                "    entry_ref.or_insert_with(|| TestValue(5));",
                "    assert_eq!(entry_ref.key(), &key);",
                "    let inserted_value = entry_ref.or_insert_with(|| TestValue(10));",
                "    assert_eq!(*inserted_value, TestValue(5));",
                "    *inserted_value = TestValue(12);",
                "    assert_eq!(entry_ref.key(), &key);",
                "    assert_eq!(*entry_ref.or_insert_with(|| TestValue(0)), TestValue(12));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue(u32);",
                "    ",
                "    impl Hash for TestKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let hash = 0u64;",
                "",
                "    let entry_ref: EntryRef<TestKey, TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "        EntryRef::Vacant(VacantEntryRef { hash, key: &key, table: &mut map });",
                "",
                "    let first_value_ref = entry_ref.or_insert_with(|| TestValue(10));",
                "    let second_value_ref = entry_ref.or_insert_with(|| TestValue(20));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(first_value_ref.0, 10);",
                "    assert_eq!(second_value_ref.0, 10);",
                "    assert_eq!(map.key(), &key);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));",
                "    assert_eq!(entry_ref.get(), &TestValue(10));",
                "    assert_eq!(map[&key].0, 10);"
              ],
              "code": [
                "{",
                "   struct TestKey;",
                "   struct TestValue(u32);",
                "   ",
                "   impl Hash for TestKey {",
                "       fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "   }",
                "",
                " struct TestAllocator;  ",
                "  use core::alloc::Layout;  ",
                "+   use core::ptr::NonNull;  ",
                " ",
                " unsafe impl Allocator for TestAllocator {  ",
                "     fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {  ",
                "          Ok(NonNull::dangling())  ",
                "      }  ",
                "   }",
                "",
                "   let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "   let key = TestKey;",
                "   let hash = 0u64;",
                "",
                "   let entry_ref: OccupiedEntry<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "       map.entry(key).or_insert_with(|| TestValue(10));",
                "   ",
                "   let first_value_ref = entry_ref.get();",
                "   let second_value_ref = entry_ref.get(); // same reference when occupied",
                "   assert_eq!(first_value_ref.0, 10);",
                "   assert_eq!(second_value_ref.0, 10);",
                "   assert_eq!(map.key(), &key);",
                "   assert_eq!(map.len(), 1);",
                "   assert!(true); // Entry is occupied",
                "   assert_eq!(entry_ref.get(), &TestValue(10));",
                "   assert_eq!(map[&key].0, 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue(u32);",
                "",
                "    impl Hash for TestKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let hash = 0u64;",
                "",
                "    let entry_ref: EntryRef<TestKey, TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "        EntryRef::Vacant(VacantEntryRef { hash, key: &key, table: &mut map });",
                "",
                "    let value_ref = entry_ref.or_insert_with(|| TestValue(0));",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));",
                "    let mut test_value = TestValue(0);",
                "    let value_ref = entry_ref.or_insert_with(|| TestValue(0));",
                "    assert_eq!(value_ref, &mut TestValue(0));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.entry_ref(&key).get(), &TestValue(0));",
                "    let value_ref2 = entry_ref.or_insert_with(|| TestValue(10));",
                "    assert_eq!(value_ref2, &mut TestValue(0));",
                "    assert_eq!(map.entry_ref(&key).get(), &TestValue(0));",
                "    *value_ref2 = TestValue(6);",
                "    assert_eq!(map.entry_ref(&key).get(), &TestValue(6));"
              ],
              "code": [
                "{",
                "   struct TestKey;",
                "   struct TestValue(u32);",
                "   ",
                "   impl Hash for TestKey {",
                "       fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "   }",
                "   ",
                "   struct TestAllocator;",
                "   ",
                "  impl Allocator for TestAllocator {",
                "      fn allocate(&self, _layout: Layout) -> Result<std::ptr::NonNull<u8>, ()> {",
                "           Ok(NonNull::dangling())",
                "       }",
                "       unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "   }",
                "   ",
                "   let mut map: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "   let key = TestKey;",
                "   let hash = 0u64;",
                "   ",
                "   let entry_ref: EntryRef<TestKey, TestKey, TestValue, DefaultHashBuilder, TestAllocator> = ",
                "       EntryRef::Vacant(VacantEntryRef { hash, key: &key, table: &mut map });",
                "   ",
                "   let value_ref = map.entry_ref(key).or_insert_with(|| TestValue(0));",
                "   assert!(matches!(entry_ref, EntryRef::Vacant(_)));",
                "   let mut test_value = TestValue(0);",
                "   let value_ref = map.entry_ref(key).or_insert_with(|| TestValue(0));",
                "   assert_eq!(value_ref, &mut TestValue(0));",
                "   assert_eq!(map.len(), 1);",
                "   assert_eq!(map.entry_ref(&key).get(), &TestValue(0));",
                "   let value_ref2 = map.entry_ref(key).or_insert_with(|| TestValue(10));",
                "    assert_eq!(value_ref2, &mut TestValue(0));",
                "    assert_eq!(map.entry_ref(&key).get(), &TestValue(0));",
                "    *value_ref2 = TestValue(6);",
                "    assert_eq!(map.entry_ref(&key).get(), &TestValue(6));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches EntryRef::Occupied(entry) at line 4200 is true\n",
        "precondition: self matches EntryRef::Occupied(entry) at line 4200 is true\n",
        "expected return value/type: match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(default()),\n        }\n"
      ],
      "input_infer": "self must be of type EntryRef::Occupied, where K is a type implementing Hash and From<&'b Q>, and Q is a type that can be borrowed and is compatible with K, V is the value type, and default is a callable function returning V that must not panic under any circumstance.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<String, u32> = HashMap::new();",
                "    map.insert(\"poneyland\".to_owned(), 3);",
                "",
                "    let entry_ref = {",
                "        // Simulating EntryRef::Occupied",
                "        let key = \"poneyland\";",
                "        let occupied_entry = map.entry_ref(key);",
                "        occupied_entry",
                "    };",
                "",
                "    let _result: &mut u32 = entry_ref.or_insert_with(|| 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*_result, 3);",
                "    assert_eq!(map[\"poneyland\"], 3);"
              ],
              "code": [
                "{",
                "   use hashbrown::HashMap;  ",
                "   use std::string::String;  ",
                "   let mut map: HashMap<String, u32> = HashMap::new();  ",
                "   map.insert(\"poneyland\".to_owned(), 3);  ",
                " ",
                "    let entry_ref = {",
                "        // Simulating EntryRef::Occupied",
                "        let key = \"poneyland\";",
                "        let occupied_entry = map.entry_ref(key);",
                "        occupied_entry",
                "    };",
                "",
                "    let _result: &mut u32 = entry_ref.or_insert_with(|| 10);",
                "    assert_eq!(*_result, 3);",
                "    assert_eq!(map[\"poneyland\"], 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<String, u32> = HashMap::new();",
                "    map.insert(\"unicorn\".to_owned(), 5);",
                "",
                "    let entry_ref = {",
                "        // Simulating EntryRef::Occupied",
                "        let key = \"unicorn\";",
                "        let occupied_entry = map.entry_ref(key);",
                "        occupied_entry",
                "    };",
                "",
                "    let _result: &mut u32 = entry_ref.or_insert_with(|| 20);",
                "}"
              ],
              "oracle": [
                "    let entry_ref = map.entry_ref(\"unicorn\"); assert_matches!(entry_ref, EntryRef::Occupied(_));",
                "    let result: &mut u32 = entry_ref.or_insert_with(|| 20); assert_eq!(*result, 5);",
                "    *result *= 2; assert_eq!(map[\"unicorn\"], 10);",
                "    let entry_ref_vacant = map.entry_ref(\"poneyland\"); assert_matches!(entry_ref_vacant, EntryRef::Vacant(_));",
                "    let result_vacant: &mut u32 = entry_ref_vacant.or_insert_with(|| 3); assert_eq!(*result_vacant, 3);",
                "    assert_eq!(map[\"poneyland\"], 3);",
                "    *result_vacant += 5; assert_eq!(map[\"poneyland\"], 8);"
              ],
              "code": [
                "{",
                "  use std::collections::HashMap;",
                "   use std::borrow::ToOwned;  ",
                " ",
                "   let mut map: HashMap<String, u32> = HashMap::new();  ",
                "   map.insert(\"unicorn\".to_owned(), 5);  ",
                "",
                "    let entry_ref = {",
                "        // Simulating EntryRef::Occupied",
                "        let key = \"unicorn\";",
                "        let occupied_entry = map.entry_ref(key);",
                "        occupied_entry",
                "    };",
                "",
                "    let _result: &mut u32 = entry_ref.or_insert_with(|| 20);",
                "    let entry_ref = map.entry_ref(\"unicorn\"); assert_matches!(entry_ref, EntryRef::Occupied(_));",
                "    let result: &mut u32 = entry_ref.or_insert_with(|| 20); assert_eq!(*result, 5);",
                "    *result *= 2; assert_eq!(map[\"unicorn\"], 10);",
                "    let entry_ref_vacant = map.entry_ref(\"poneyland\"); assert_matches!(entry_ref_vacant, EntryRef::Vacant(_));",
                "    let result_vacant: &mut u32 = entry_ref_vacant.or_insert_with(|| 3); assert_eq!(*result_vacant, 3);",
                "    assert_eq!(map[\"poneyland\"], 3);",
                "    *result_vacant += 5; assert_eq!(map[\"poneyland\"], 8);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<String, u32> = HashMap::new();",
                "    map.insert(\"dragon\".to_owned(), 7);",
                "",
                "    let entry_ref = {",
                "        // Simulating EntryRef::Occupied",
                "        let key = \"dragon\";",
                "        let occupied_entry = map.entry_ref(key);",
                "        occupied_entry",
                "    };",
                "",
                "    let _result: &mut u32 = entry_ref.or_insert_with(|| 13);",
                "    let _result_again: &mut u32 = entry_ref.or_insert_with(|| 25);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*_result, 7);",
                "    assert_eq!(*_result_again, 7);",
                "    * _result_again *= 2;",
                "    assert_eq!(*_result_again, 14);",
                "    assert_eq!(map[\"dragon\"], 14);"
              ],
              "code": [
                "{",
                "   use std::collections::HashMap;  ",
                " ",
                "   let mut map: HashMap<String, u32> = HashMap::new();  ",
                "   map.insert(\"dragon\".to_owned(), 7);  ",
                " ",
                "   let entry_ref = {  ",
                "       // Simulating EntryRef::Occupied  ",
                "       let key = \"dragon\";  ",
                "       let occupied_entry = map.entry(key).or_insert(0);  ",
                "       occupied_entry  ",
                "   };  ",
                " ",
                "   let _result: &mut u32 = entry_ref.or_insert_with(|| 13);  ",
                "   let _result_again: &mut u32 = entry_ref.or_insert_with(|| 25);  ",
                "    assert_eq!(*_result, 7);",
                "    assert_eq!(*_result_again, 7);",
                "    * _result_again *= 2;",
                "    assert_eq!(*_result_again, 14);",
                "    assert_eq!(map[\"dragon\"], 14);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}