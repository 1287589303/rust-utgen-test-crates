{
  "name": "hashbrown::set::{impl#6}::shrink_to",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:717:5:719:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "min_capacity: 0 to a maximum value (e.g., the current capacity of the set) that can be equal to or less than the existing capacity but is less than or equal to the number of elements currently in the set.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(0);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 5);",
                "    assert!(set.capacity() >= 0);",
                "    set.insert(3);",
                "    set.shrink_to(2);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "    panic::set_hook(Box::new(|info| {",
                "    assert_eq!(info.payload().downcast_ref::<&str>(), Some(&\"capacity too small\"));",
                "    }));"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 5);",
                "    assert!(set.capacity() >= 0);",
                "    set.insert(3);",
                "    set.shrink_to(2);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "    panic::set_hook(Box::new(|info| {",
                "    assert_eq!(info.payload().downcast_ref::<&str>(), Some(&\"capacity too small\"));",
                "    }));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.shrink_to(0);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    assert!(set.capacity() >= 5);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    assert!(set.capacity() >= 5);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(10);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(2);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(3);",
                "    assert!(set.capacity() >= 3);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(10);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(2);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(3);",
                "    assert!(set.capacity() >= 3);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(10);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(1);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "    let current_capacity = set.capacity();",
                "    set.shrink_to(current_capacity);",
                "    assert_eq!(set.capacity(), current_capacity);",
                "    set.shrink_to(3);",
                "    assert!(set.capacity() >= 3);",
                "    set.insert(3);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 0);"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(10);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.shrink_to(5);",
                "    assert!(set.capacity() >= 5);",
                "    let current_capacity = set.capacity();",
                "    set.shrink_to(current_capacity);",
                "    assert_eq!(set.capacity(), current_capacity);",
                "    set.shrink_to(3);",
                "    assert!(set.capacity() >= 3);",
                "    set.insert(3);",
                "    set.shrink_to(1);",
                "    assert!(set.capacity() >= 1);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(100);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(50);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 50);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(100);",
                "    assert!(set.capacity() >= 100);",
                "    let panic_result = std::panic::catch_unwind(|| set.shrink_to(101));",
                "    assert!(panic_result.is_err());"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(100);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(50);",
                "    assert!(set.capacity() >= 50);",
                "    set.shrink_to(0);",
                "    assert!(set.capacity() >= 2);",
                "    set.shrink_to(100);",
                "    assert!(set.capacity() >= 100);",
                "   let panic_result = std::panic::catch_unwind(std::panic::AssertUnwindSafe(|| set.shrink_to(101)));",
                "   assert!(panic_result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(10);",
                "}"
              ],
              "oracle": [
                "    assert!(set.capacity() >= 10);",
                "    assert!(set.capacity() >= 5);",
                "    assert!(set.capacity() >= 2);"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::with_capacity(5);",
                "    set.insert(1);",
                "    set.insert(2);",
                "    set.shrink_to(10);",
                "    assert!(set.capacity() >= 10);",
                "    assert!(set.capacity() >= 5);",
                "    assert!(set.capacity() >= 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}