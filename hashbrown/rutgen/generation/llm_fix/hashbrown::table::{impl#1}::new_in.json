{
  "name": "hashbrown::table::{impl#1}::new_in",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:135:5:139:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            raw: RawTable::new_in(alloc),\n        }\n"
      ],
      "input_infer": "Allocator type: A that implements Allocator trait, Allocator instance cannot be null or invalid.\n",
      "answers": [
        {
          "uses": [
            "use bumpalo::Bump;",
            "use std::alloc::Global;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use bumpalo::Bump;",
                "",
                "    let bump = Bump::new();",
                "    let table: HashTable<i32, _> = HashTable::new_in(&bump);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "    assert!(std::ptr::eq(table.allocator(), &bump));"
              ],
              "code": [
                "{",
                "    use bumpalo::Bump;",
                "",
                "    let bump = Bump::new();",
                "    let table: HashTable<i32, _> = HashTable::new_in(&bump);",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "    assert!(std::ptr::eq(table.allocator(), &bump));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::alloc::Global;",
                "",
                "    let global_allocator = Global;",
                "    let table: HashTable<i32, _> = HashTable::new_in(global_allocator);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);"
              ],
              "code": [
                "{",
                "   use allocator_api2::alloc::Global;",
                "   ",
                "   let global_allocator = Global;",
                "   let table: HashTable<i32, Global> = HashTable::new_in(global_allocator);",
                "   assert_eq!(table.len(), 0);",
                "   assert_eq!(table.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}