{
  "name": "hashbrown::table::{impl#0}::with_capacity",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:87:5:91:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            raw: RawTable::with_capacity(capacity),\n        }\n"
      ],
      "input_infer": "capacity: 0, 1, 10, 100, maximum possible usize value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() == 0);",
                "    let table_with_non_zero_capacity: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert_eq!(table_with_non_zero_capacity.len(), 0);",
                "    assert!(table_with_non_zero_capacity.capacity() >= 10);",
                "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "    assert!(table_negative_capacity.capacity() > 0);"
              ],
              "code": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() == 0);",
                "    let table_with_non_zero_capacity: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert_eq!(table_with_non_zero_capacity.len(), 0);",
                "    assert!(table_with_non_zero_capacity.capacity() >= 10);",
                "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "    assert!(table_negative_capacity.capacity() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1);",
                "    let table_zero_capacity: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(table_zero_capacity.len(), 0);",
                "    assert_eq!(table_zero_capacity.capacity(), 0);",
                "    let table_ten_capacity: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert!(table_ten_capacity.capacity() >= 10);",
                "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "    assert!(table_negative_capacity.capacity() >= usize::MAX);"
              ],
              "code": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(1);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1);",
                "    let table_zero_capacity: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(table_zero_capacity.len(), 0);",
                "    assert_eq!(table_zero_capacity.capacity(), 0);",
                "    let table_ten_capacity: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert!(table_ten_capacity.capacity() >= 10);",
                "    let table_negative_capacity: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "    assert!(table_negative_capacity.capacity() >= usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 10);",
                "    assert_eq!(table.raw.table.capacity(), 10);",
                "    assert_eq!(table.raw.marker, std::marker::PhantomData::<&str>);"
              ],
              "code": [
                "{",
                "  let table: HashTable<&str> = HashTable::with_capacity(10);  ",
                "  assert_eq!(table.len(), 0);  ",
                "  assert!(table.capacity() >= 10);  ",
                "  assert_eq!(table.capacity(), 10);  ",
                "  assert!(std::any::TypeId::of::<&str>() == std::any::TypeId::of::<PhantomData<&str>>());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 100);",
                "    let empty_table: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(empty_table.len(), 0);",
                "    assert_eq!(empty_table.capacity(), 0);",
                "    let small_table: HashTable<&str> = HashTable::with_capacity(1);",
                "    assert_eq!(small_table.len(), 0);",
                "    assert!(small_table.capacity() >= 1);",
                "    let mid_table: HashTable<&str> = HashTable::with_capacity(50);",
                "    assert_eq!(mid_table.len(), 0);",
                "    assert!(mid_table.capacity() >= 50);"
              ],
              "code": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(100);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 100);",
                "    let empty_table: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(empty_table.len(), 0);",
                "    assert_eq!(empty_table.capacity(), 0);",
                "    let small_table: HashTable<&str> = HashTable::with_capacity(1);",
                "    assert_eq!(small_table.len(), 0);",
                "    assert!(small_table.capacity() >= 1);",
                "    let mid_table: HashTable<&str> = HashTable::with_capacity(50);",
                "    assert_eq!(mid_table.len(), 0);",
                "    assert!(mid_table.capacity() >= 50);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= usize::MAX);",
                "    let table_zero: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(table_zero.len(), 0);",
                "    assert_eq!(table_zero.capacity(), 0);",
                "    let table_ten: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert_eq!(table_ten.len(), 0);",
                "    assert!(table_ten.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(usize::MAX);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= usize::MAX);",
                "    let table_zero: HashTable<&str> = HashTable::with_capacity(0);",
                "    assert_eq!(table_zero.len(), 0);",
                "    assert_eq!(table_zero.capacity(), 0);",
                "    let table_ten: HashTable<&str> = HashTable::with_capacity(10);",
                "    assert_eq!(table_ten.len(), 0);",
                "    assert!(table_ten.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}