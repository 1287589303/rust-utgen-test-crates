{
  "name": "hashbrown::map::{impl#55}::default",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3265:5:3269:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            inner: Default::default(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required; test should validate default initialization of IntoIter<K, V, A>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let _iter: IntoIter<u32, String, TestAllocator> = Default::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.inner, Default::default());"
              ],
              "code": [
                "{",
                "   struct TestAllocator;  ",
                " ",
                "   use std::alloc::Layout;  ",
                " ",
                "   impl Allocator for TestAllocator {  ",
                "       fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {  ",
                "           Ok(NonNull::new_unchecked(std::ptr::null_mut()))  ",
                "       }  ",
                "    }",
                "",
                "    let _iter: IntoIter<u32, String, TestAllocator> = Default::default();",
                "    assert_eq!(_iter.inner, Default::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _iter: IntoIter<u32, String> = Default::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.inner, Default::default());",
                "    assert!(_iter.inner.iter.is_empty());",
                "    assert!(_iter.allocation.is_none());",
                "    assert_eq!(std::mem::size_of::<IntoIter<u32, String>>(), std::mem::size_of::<RawIntoIter<(u32, String), Global>>());",
                "    assert!(std::ptr::eq(&_iter.inner, &Default::default()));"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}