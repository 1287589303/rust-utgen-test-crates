{
  "name": "hashbrown::map::{impl#4}::retain",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:917:5:930:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: item in self.table.iter() at line 923 is true\n",
        "precondition: f(key, value) at line 925 is true\n",
        "precondition: item in self.table.iter() at line 923 is false\n"
      ],
      "input_infer": "Test input conditions or ranges: K and V types can be any valid types that implement the required traits (e.g., Hash and Eq), the function `f` must accept references to K and mutable references to V, ensure the HashMap contains at least 1 item (len() > 0), for full coverage include scenarios where f(key, value) returns true or false for all combinations of items in the HashMap while ensuring varied keys and values to test boundary behavior.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|_, _| true);",
                "    ",
                "    let len = map.len(); // Expect length to be 3",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2, 3]",
                "}"
              ],
              "oracle": [
                "    len == 3",
                "    keys == [1, 2, 3]"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|_, _| true);",
                "    ",
                "    let len = map.len(); // Expect length to be 3",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2, 3]",
                "    len == 3",
                "    keys == [1, 2, 3]",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|_, _| false);",
                "    ",
                "    let len = map.len(); // Expect length to be 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 10);",
                "    assert_eq!(map.keys().count(), 0);",
                "    assert_eq!(map.values().count(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|_, _| false);",
                "    ",
                "    let len = map.len(); // Expect length to be 0",
                "    assert_eq!(len, 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 10);",
                "    assert_eq!(map.keys().count(), 0);",
                "    assert_eq!(map.values().count(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|&k, _| k % 2 == 0);",
                "    ",
                "    let len = map.len(); // Expect length to be 1",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [2]",
                "}"
              ],
              "oracle": [
                "    len == 1",
                "    keys == vec![2]",
                "    map.is_empty() == false",
                "    map.capacity() >= 10",
                "    map.values().collect::<Vec<_>>() == vec![20]"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    map.retain(|&k, _| k % 2 == 0);",
                "    ",
                "    let len = map.len(); // Expect length to be 1",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [2]",
                "    len == 1",
                "    keys == vec![2]",
                "    map.is_empty() == false",
                "    map.capacity() >= 10",
                "    map.values().collect::<Vec<_>>() == vec![20]",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.insert(4, 40);",
                "    ",
                "    map.retain(|&k, _| k < 3);",
                "    ",
                "    let len = map.len(); // Expect length to be 2",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2]",
                "}"
              ],
              "oracle": [
                "    len == 2",
                "    keys == [1, 2]"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.insert(4, 40);",
                "    ",
                "    map.retain(|&k, _| k < 3);",
                "    ",
                "    let len = map.len(); // Expect length to be 2",
                "    let keys: Vec<_> = map.keys().collect(); // Expect keys to be [1, 2]",
                "    len == 2",
                "    keys == [1, 2]",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: item in self.table.iter() at line 923 is true\n",
        "precondition: f(key, value) at line 925 is false\n",
        "precondition: item in self.table.iter() at line 923 is false\n"
      ],
      "input_infer": "K: any type that implements Hash and Eq; V: any type; F: function taking (&K, &mut V) and returning bool; capacity: 0 to N; item count: 0 to N; f predicate should return true for at least one item and false for at least one item.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    map.retain(|&k, _| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.keys().len(), 0);",
                "    assert_eq!(map.values().len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    map.retain(|&k, _| k % 2 == 0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.keys().len(), 0);",
                "    assert_eq!(map.values().len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k % 2 == 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    let mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    vec.sort_unstable();",
                "    assert_eq!(vec, [(1, 10), (3, 30)]);",
                "    assert!(map.keys().all(|&k| k % 2 == 1));",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(!map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k % 2 == 1);",
                "    assert_eq!(map.len(), 2);",
                "    let mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    vec.sort_unstable();",
                "    assert_eq!(vec, [(1, 10), (3, 30)]);",
                "    assert!(map.keys().all(|&k| k % 2 == 1));",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(!map.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k > 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    vec.sort_unstable();",
                "    assert_eq!(vec, [(2, 20), (3, 30)]);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k > 1);",
                "    assert_eq!(map.len(), 2);",
                "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    vec.sort_unstable();",
                "    assert_eq!(vec, [(2, 20), (3, 30)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k > 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&1));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert_eq!(map.get(&3), Some(&30));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k > 10);",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&1));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert_eq!(map.get(&3), Some(&30));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k == 2 || k == 3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&1));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert_eq!(map.get(&3), Some(&30));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.retain(|&k, _| k == 2 || k == 3);",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&1));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert_eq!(map.get(&3), Some(&30));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: item in self.table.iter() at line 923 is false\n"
      ],
      "input_infer": "Valid Rust `HashMap` instances with at least 1 element, where the predicate function must return `false` for every key-value pair.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.insert(4, 40);",
                "",
                "    map.retain(|_key, _value| false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 10);",
                "    assert!(map.is_empty());",
                "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    assert!(vec.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder, Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.insert(4, 40);",
                "",
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 10);",
                "    assert!(map.is_empty());",
                "    let vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();",
                "    assert!(vec.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<String, String> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder, Global);",
                "    map.insert(\"a\".to_string(), \"apple\".to_string());",
                "    map.insert(\"b\".to_string(), \"banana\".to_string());",
                "    ",
                "    map.retain(|_key, _value| false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<String, String> = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder, Global);",
                "    map.insert(\"a\".to_string(), \"apple\".to_string());",
                "    map.insert(\"b\".to_string(), \"banana\".to_string());",
                "    ",
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
                "    map.insert(10, 100);",
                "    ",
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "oracle": [
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
                "    map.insert(10, 100);",
                "    assert_eq!(map.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
                "    map.insert(10, 100);",
                "    ",
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "    map.retain(|_key, _value| false);",
                "    assert_eq!(map.len(), 0);",
                "    let mut map: HashMap<u32, u32> = HashMap::with_capacity_and_hasher_in(3, DefaultHashBuilder, Global);",
                "    map.insert(10, 100);",
                "    assert_eq!(map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}