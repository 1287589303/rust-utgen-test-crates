{
  "name": "hashbrown::control::tag::{impl#0}::is_special",
  "mod_info": {
    "name": "control::tag",
    "loc": "src/control/mod.rs:3:1:3:9"
  },
  "visible": true,
  "loc": "src/control/tag.rs:22:5:24:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.0 & 0x80 != 0\n"
      ],
      "input_infer": "Test input conditions or ranges: Tag values from 0x00 to 0xFF, specifically including edge cases of 0x80 (special) and 0x7F (not special).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0x00);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Tag(0x00).is_special(), false);",
                "    assert_eq!(Tag(0x80).is_special(), true);",
                "    assert_eq!(Tag(0xFF).is_special(), true);",
                "    assert_eq!(Tag(0x7F).is_special(), false);",
                "    assert_eq!(Tag(0x01).is_special(), false);",
                "    assert_eq!(Tag(0x80 | 0x01).is_special(), true);"
              ],
              "code": [
                "{",
                "    let tag = Tag(0x00);",
                "    tag.is_special();",
                "    assert_eq!(Tag(0x00).is_special(), false);",
                "    assert_eq!(Tag(0x80).is_special(), true);",
                "    assert_eq!(Tag(0xFF).is_special(), true);",
                "    assert_eq!(Tag(0x7F).is_special(), false);",
                "    assert_eq!(Tag(0x01).is_special(), false);",
                "    assert_eq!(Tag(0x80 | 0x01).is_special(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0x80);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag.is_special(), true); // Test with tag value representing a special case (0x80)",
                "    ",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value not representing a special case (0x7F)",
                "    ",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value equal to EMPTY (0x00)",
                "    ",
                "    let tag = Tag(0xFF);",
                "    assert_eq!(tag.is_special(), true); // Test with tag value having all bits set (0xFF)",
                "    ",
                "    let tag = Tag(0x40);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value having only the second highest bit set (0x40)"
              ],
              "code": [
                "{",
                "    let tag = Tag(0x80);",
                "    tag.is_special();",
                "    assert_eq!(tag.is_special(), true); // Test with tag value representing a special case (0x80)",
                "    ",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value not representing a special case (0x7F)",
                "    ",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value equal to EMPTY (0x00)",
                "    ",
                "    let tag = Tag(0xFF);",
                "    assert_eq!(tag.is_special(), true); // Test with tag value having all bits set (0xFF)",
                "    ",
                "    let tag = Tag(0x40);",
                "    assert_eq!(tag.is_special(), false); // Test with tag value having only the second highest bit set (0x40)",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0x7F);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Tag(0x7F).is_special(), false);",
                "    assert_eq!(Tag(0x80).is_special(), true);",
                "    assert_eq!(Tag(0xFF).is_special(), true);",
                "    assert_eq!(Tag(0x00).is_special(), false);",
                "    assert_eq!(Tag(0x40).is_special(), false);",
                "    assert_eq!(Tag(0x81).is_special(), true);"
              ],
              "code": [
                "{",
                "    let tag = Tag(0x7F);",
                "    tag.is_special();",
                "    assert_eq!(Tag(0x7F).is_special(), false);",
                "    assert_eq!(Tag(0x80).is_special(), true);",
                "    assert_eq!(Tag(0xFF).is_special(), true);",
                "    assert_eq!(Tag(0x00).is_special(), false);",
                "    assert_eq!(Tag(0x40).is_special(), false);",
                "    assert_eq!(Tag(0x81).is_special(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0xFF);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x81);",
                "    assert_eq!(tag.is_special(), true);"
              ],
              "code": [
                "{",
                "    let tag = Tag(0xFF);",
                "    tag.is_special();",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x81);",
                "    assert_eq!(tag.is_special(), true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0x81);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag.is_special(), true);",
                "    ",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false);",
                "    ",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    ",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);"
              ],
              "code": [
                "{",
                "    let tag = Tag(0x81);",
                "    tag.is_special();",
                "    assert_eq!(tag.is_special(), true);",
                "    ",
                "    let tag = Tag(0x7F);",
                "    assert_eq!(tag.is_special(), false);",
                "    ",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    ",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag(0x7E);",
                "    tag.is_special();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0xFF);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);"
              ],
              "code": [
                "{",
                "    let tag = Tag(0x7E);",
                "    tag.is_special();",
                "    assert_eq!(tag.is_special(), false);",
                "    let tag = Tag(0x80);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0xFF);",
                "    assert_eq!(tag.is_special(), true);",
                "    let tag = Tag(0x00);",
                "    assert_eq!(tag.is_special(), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}