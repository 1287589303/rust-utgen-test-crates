{
  "name": "hashbrown::map::{impl#79}::key",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3769:5:3771:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &self.elem.as_ref().0\n"
      ],
      "input_infer": "K must be a reference type compatible with the HashMap key, and the HashMap must have at least one occupied entry with a defined key; test with existing key, non-existing key, and empty HashMap edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"poneyland\", 12);",
                "    let entry = map.entry(\"poneyland\").or_insert(12);",
                "    match entry {",
                "        &mut OccupiedEntry { elem, .. } => {",
                "            let result = elem.key();",
                "        }",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &\"poneyland\");"
              ],
              "code": [
                "{",
                "  let mut map: HashMap<&str, u32> = HashMap::new();  ",
                "  map.insert(\"poneyland\", 12);  ",
                "  let entry = map.entry(\"poneyland\").or_insert(12);  ",
                "  match entry {  ",
                "      Entry::Occupied(ref occupied_entry) => {  ",
                "          let result = occupied_entry.key();  ",
                "          assert_eq!(result, &\"poneyland\");  ",
                "      }  ",
                "  }  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"nonexistent\");",
                "    match entry {",
                "        Entry::Vacant(_) => {",
                "            // No key retrieval since the entry is vacant",
                "        }",
                "        Entry::Occupied(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.key(), &\"nonexistent\");",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.entry(\"poneyland\").or_insert(12);",
                "    let entry = map.entry(\"poneyland\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
                "    }",
                "    let entry = map.entry(\"poneyland2\");",
                "    match entry {",
                "    Entry::Vacant(_) => assert_eq!(entry.key(), &\"poneyland2\"),",
                "    Entry::Occupied(_) => panic!(),",
                "    }"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"nonexistent\");",
                "    match entry {",
                "        Entry::Vacant(_) => {",
                "            // No key retrieval since the entry is vacant",
                "        }",
                "        Entry::Occupied(_) => panic!(),",
                "   }",
                "   assert_eq!(entry.key(), &\"nonexistent\");",
                "   let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.entry(\"poneyland\").or_insert(12);",
                "    let entry = map.entry(\"poneyland\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
                "    }",
                "    let entry = map.entry(\"poneyland2\");",
                "    match entry {",
                "   Entry::Vacant(_) => panic!(),",
                "   Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland2\"),",
                "   }",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"empty\");",
                "    match entry {",
                "        Entry::Vacant(_) => {",
                "            // No key retrieval since the entry is vacant",
                "        }",
                "        Entry::Occupied(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entry(\"poneyland\").or_insert(12), &12);",
                "    let entry = map.entry(\"poneyland\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
                "    }",
                "    assert_eq!(map.entry(\"another_key\").or_insert(42), &42);",
                "    let entry = map.entry(\"another_key\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"another_key\"),",
                "    }"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"empty\");",
                "    match entry {",
                "        Entry::Vacant(_) => {",
                "            // No key retrieval since the entry is vacant",
                "        }",
                "        Entry::Occupied(_) => panic!(),",
                "    }",
                "    assert_eq!(map.entry(\"poneyland\").or_insert(12), &12);",
                "    let entry = map.entry(\"poneyland\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"poneyland\"),",
                "    }",
                "    assert_eq!(map.entry(\"another_key\").or_insert(42), &42);",
                "    let entry = map.entry(\"another_key\");",
                "    match entry {",
                "    Entry::Vacant(_) => panic!(),",
                "    Entry::Occupied(entry) => assert_eq!(entry.key(), &\"another_key\"),",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}