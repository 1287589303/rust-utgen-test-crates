{
  "name": "hashbrown::table::{impl#4}::into_iter",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1157:5:1159:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "HashTable with at least one entry and check for mutable iterator, valid allocator type, and type T should implement necessary traits for mutation and iteration.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(1, \"value\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 1);",
                "    assert!(iter.next().is_some());",
                "    assert_eq!(first, Some(&mut \"value\"));",
                "    iter.next(); // consume the first element",
                "    assert!(iter.next().is_none());"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(1, \"value\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "    assert_eq!(table.len(), 1);",
                "    assert!(iter.next().is_some());",
                "    assert_eq!(first, Some(&mut \"value\"));",
                "    iter.next(); // consume the first element",
                "    assert!(iter.next().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::with_capacity_in(10, TestAllocator);",
                "    table.insert_unique(2, \"another_value\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(first, Some(&mut \"another_value\"));",
                "    assert!(iter.next().is_none());",
                "    assert_eq!(table.len(), 1);",
                "    assert!(!table.is_empty());",
                "    assert_eq!(table.capacity(), 10);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::with_capacity_in(10, TestAllocator);",
                "    table.insert_unique(2, \"another_value\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "    assert_eq!(first, Some(&mut \"another_value\"));",
                "    assert!(iter.next().is_none());",
                "    assert_eq!(table.len(), 1);",
                "    assert!(!table.is_empty());",
                "    assert_eq!(table.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(3, \"entry_one\", |s: &str| s.len() as u64);",
                "    table.insert_unique(4, \"entry_two\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "    let second = iter.next();",
                "}"
              ],
              "oracle": [
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    assert_eq!(table.len(), 2);",
                "    assert!(!table.is_empty());",
                "    assert_eq!(table.capacity(), expected_capacity);",
                "    let first = iter.next();",
                "    assert_eq!(first, Some(&mut \"entry_one\"));",
                "    let second = iter.next();",
                "    assert_eq!(second, Some(&mut \"entry_two\"));",
                "    assert_eq!(iter.next(), None);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(3, \"entry_one\", |s: &str| s.len() as u64);",
                "    table.insert_unique(4, \"entry_two\", |s: &str| s.len() as u64);",
                "    let mut iter = table.iter_mut();",
                "    let first = iter.next();",
                "    let second = iter.next();",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    assert_eq!(table.len(), 2);",
                "    assert!(!table.is_empty());",
                "    assert_eq!(table.capacity(), expected_capacity);",
                "    let first = iter.next();",
                "    assert_eq!(first, Some(&mut \"entry_one\"));",
                "    let second = iter.next();",
                "    assert_eq!(second, Some(&mut \"entry_two\"));",
                "    assert_eq!(iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(5, \"sample\", |s: &str| s.len() as u64);",
                "    table.clear();",
                "    let mut iter = table.iter_mut();",
                "    let first_after_clear = iter.next();",
                "}"
              ],
              "oracle": [
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    assert_eq!(table.len(), 0);",
                "    table.insert_unique(5, \"sample\", |s: &str| s.len() as u64);",
                "    assert_eq!(table.len(), 1);",
                "    table.clear();",
                "    assert!(table.is_empty());",
                "    let mut iter = table.iter_mut();",
                "    let first_after_clear = iter.next();",
                "    assert_eq!(first_after_clear, None);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    table.insert_unique(5, \"sample\", |s: &str| s.len() as u64);",
                "    table.clear();",
                "    let mut iter = table.iter_mut();",
                "    let first_after_clear = iter.next();",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    assert_eq!(table.len(), 0);",
                "    table.insert_unique(5, \"sample\", |s: &str| s.len() as u64);",
                "    assert_eq!(table.len(), 1);",
                "    table.clear();",
                "    assert!(table.is_empty());",
                "    let mut iter = table.iter_mut();",
                "    let first_after_clear = iter.next();",
                "    assert_eq!(first_after_clear, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}