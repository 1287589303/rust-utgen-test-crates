{
  "name": "hashbrown::raw::{impl#7}::new",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:584:5:590:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            table: RawTableInner::NEW,\n            alloc: Global,\n            marker: PhantomData,\n        }\n"
      ],
      "input_infer": "Test input conditions/ranges: N/A (function does not accept input parameters and is expected to return a new instance of RawTable with default internal states)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<u8> = RawTable::new();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
                "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
                "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
                "    assert!(table.alloc.is::<Global>());",
                "    assert!(table.marker == PhantomData::<u8>);"
              ],
              "code": [
                "{",
                "    let table: RawTable<u8> = RawTable::new();",
                "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
                "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
                "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
                "    assert!(table.alloc.is::<Global>());",
                "    assert!(table.marker == PhantomData::<u8>);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<f64> = RawTable::new();",
                "}"
              ],
              "oracle": [
                "    let table: RawTable<f64> = RawTable::new();",
                "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
                "    assert_eq!(table.table.ctrl, RawTableInner::NEW.ctrl);",
                "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
                "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
                "    assert_eq!(table.alloc, Global);",
                "    assert!(std::mem::size_of_val(&table.marker) == 0);"
              ],
              "code": [
                "{",
                "    let table: RawTable<f64> = RawTable::new();",
                "    let table: RawTable<f64> = RawTable::new();",
                "    assert_eq!(table.table.bucket_mask, RawTableInner::NEW.bucket_mask);",
                "    assert_eq!(table.table.ctrl, RawTableInner::NEW.ctrl);",
                "    assert_eq!(table.table.growth_left, RawTableInner::NEW.growth_left);",
                "    assert_eq!(table.table.items, RawTableInner::NEW.items);",
                "    assert_eq!(table.alloc, Global);",
                "    assert!(std::mem::size_of_val(&table.marker) == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}