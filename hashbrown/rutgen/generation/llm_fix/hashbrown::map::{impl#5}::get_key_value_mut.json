{
  "name": "hashbrown::map::{impl#5}::get_key_value_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1383:5:1392:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.get_inner_mut(k) matches Some(&mut (ref key, ref mut value)) at line 1388 is true\n",
        "precondition: self.get_inner_mut(k) matches Some(&mut (ref key, ref mut value)) at line 1388 is true\n",
        "expected return value/type: Some((key, value))\n"
      ],
      "input_infer": "K: any valid key type that satisfies Hash + Eq; Q: any borrowed form of K; v: mutable reference to corresponding value; k: key exists in map; map is not empty\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"a\");",
                "    let (k, v) = map.get_key_value_mut(&1).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(k, &1);",
                "    assert_eq!(v, &mut \"a\");",
                "    *v = \"b\";",
                "    assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));",
                "    assert_eq!(map.get_key_value_mut(&2), None);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"a\");",
                "    let (k, v) = map.get_key_value_mut(&1).unwrap();",
                "    assert_eq!(k, &1);",
                "    assert_eq!(v, &mut \"a\");",
                "    *v = \"b\";",
                "    assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));",
                "    assert_eq!(map.get_key_value_mut(&2), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(String::from(\"key\"), \"value\");",
                "    let (k, v) = map.get_key_value_mut(&\"key\".to_string()).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(k, &String::from(\"key\"));",
                "    assert_eq!(v, &mut \"value\");",
                "    assert_eq!(map.get_key_value_mut(&\"non_existing_key\".to_string()), None);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(String::from(\"key\"), \"value\");",
                "    let (k, v) = map.get_key_value_mut(&\"key\".to_string()).unwrap();",
                "    assert_eq!(k, &String::from(\"key\"));",
                "    assert_eq!(v, &mut \"value\");",
                "    assert_eq!(map.get_key_value_mut(&\"non_existing_key\".to_string()), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(3.14, \"pi\");",
                "    let (k, v) = map.get_key_value_mut(&3.14).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"pi\")));",
                "    *v = \"tau\";",
                "    assert_eq!(map.get_key_value_mut(&3.14), Some((&3.14, &mut \"tau\")));",
                "    assert_eq!(map.get_key_value_mut(&2.71), None);"
              ],
              "code": [
                "{",
                "   let mut map: HashMap<f64, &str> = HashMap::new();",
                "   map.insert(3.14, \"pi\");",
                "   let (k, v) = map.get_key_value_mut(&3.14).unwrap();",
                "   assert_eq!(map.get_key_value_mut(&3.14), Some((k, v)));",
                "   *v = \"tau\";",
                "   assert_eq!(map.get_key_value_mut(&3.14), Some((k, v)));",
                "   assert_eq!(map.get_key_value_mut(&2.71), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert((1, 2), \"tuple\");",
                "    let (k, v) = map.get_key_value_mut(&(1, 2)).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(k, &(1, 2));",
                "    assert_eq!(v, &mut \"tuple\");",
                "    *v = \"changed\";",
                "    assert_eq!(map.get_key_value_mut(&(1, 2)), Some(&(1, &mut \"changed\")));",
                "    assert_eq!(map.get_key_value_mut(&(2, 3)), None);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert((1, 2), \"tuple\");",
                "    let (k, v) = map.get_key_value_mut(&(1, 2)).unwrap();",
                "    assert_eq!(k, &(1, 2));",
                "    assert_eq!(v, &mut \"tuple\");",
                "    *v = \"changed\";",
                "    assert_eq!(map.get_key_value_mut(&(1, 2)), Some(&(1, &mut \"changed\")));",
                "    assert_eq!(map.get_key_value_mut(&(2, 3)), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.get_inner_mut(k) matches None at line 1388 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.get_inner_mut(k) returns None when supplied with a key of type K that does not exist in the HashMap, where K is any type that implements Hash and Eq.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&42);",
                "}"
              ],
              "oracle": [
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&42);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&42);",
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&42);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<String, &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&\"nonexistent\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "   use std::string::ToString;  // Importing ToString trait",
                "   let result = map.get_key_value_mut(&\"nonexistent\".to_string());",
                "   assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<(i32, i32), &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&(1, 2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<(i32, i32), &str> = HashMap::new();",
                "    let result = map.get_key_value_mut(&(1, 2));",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}