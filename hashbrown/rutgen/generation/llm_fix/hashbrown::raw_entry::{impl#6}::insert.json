{
  "name": "hashbrown::raw_entry::{impl#6}::insert",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:724:5:736:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches RawEntryMut::Vacant(entry) at line 729 is true\n"
      ],
      "input_infer": "self is of type RawEntryMut::Vacant, key is a valid Key type K that implements Hash, value is a valid Value type V, valid allocator A is provided, and the HashMap is empty or does not contain key.\n",
      "answers": [
        {
          "uses": [
            "use std::hash::BuildHasherDefault;",
            "use hashbrown::HashMap;",
            "use hashbrown::hash_map::RawEntryMut;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key1\");",
                "    let occupied_entry = entry.insert(\"key1\", 100);",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(occupied_entry, RawEntryMut::Occupied(_)));",
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key1\", &100));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key1\"));",
                "    assert_eq!(map.get(\"key1\"), Some(&100));"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key1\");",
                "    let occupied_entry = entry.insert(\"key1\", 100);",
                "    assert!(matches!(occupied_entry, RawEntryMut::Occupied(_)));",
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key1\", &100));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key1\"));",
                "    assert_eq!(map.get(\"key1\"), Some(&100));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
                "    let occupied_entry1 = entry1.insert(\"key2\", 200);",
                "",
                "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
                "    let occupied_entry2 = entry2.insert(\"key3\", 300);",
                "}"
              ],
              "oracle": [
                "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
                "    assert!(matches!(entry1, RawEntryMut::Vacant(_)));",
                "    assert_eq!(occupied_entry1.key(), &\"key2\");",
                "    assert_eq!(occupied_entry1.get(), &200);",
                "    ",
                "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
                "    assert!(matches!(entry2, RawEntryMut::Vacant(_)));",
                "    assert_eq!(occupied_entry2.key(), &\"key3\");",
                "    assert_eq!(occupied_entry2.get(), &300);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
                "    let occupied_entry1 = entry1.insert(\"key2\", 200);",
                "",
                "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
                "    let occupied_entry2 = entry2.insert(\"key3\", 300);",
                "    let entry1 = map.raw_entry_mut().from_key(\"key2\");",
                "    assert!(matches!(entry1, RawEntryMut::Vacant(_)));",
                "    assert_eq!(occupied_entry1.key(), &\"key2\");",
                "    assert_eq!(occupied_entry1.get(), &200);",
                "    ",
                "    let entry2 = map.raw_entry_mut().from_key(\"key3\");",
                "    assert!(matches!(entry2, RawEntryMut::Vacant(_)));",
                "    assert_eq!(occupied_entry2.key(), &\"key3\");",
                "    assert_eq!(occupied_entry2.get(), &300);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key4\");",
                "    let occupied_entry = entry.insert(\"key4\", 400);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key4\", &400));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key4\"));",
                "    assert_eq!(entry.remove_entry(), (\"key4\", 400));",
                "    assert!(map.get(\"key4\").is_none());",
                "    assert_eq!(occupied_entry.get(), &400);",
                "    assert_eq!(occupied_entry.key(), &\"key4\");",
                "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut \"key4\", &mut 400));"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key4\");",
                "    let occupied_entry = entry.insert(\"key4\", 400);",
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key4\", &400));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(\"key4\"));",
                "    assert_eq!(entry.remove_entry(), (\"key4\", 400));",
                "    assert!(map.get(\"key4\").is_none());",
                "    assert_eq!(occupied_entry.get(), &400);",
                "    assert_eq!(occupied_entry.key(), &\"key4\");",
                "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut \"key4\", &mut 400));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key5\");",
                "    let occupied_entry = entry.insert(\"key5\", 500);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key5\", &500));",
                "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
                "    assert!(map.contains_key(\"key5\"));",
                "    assert_eq!(map[\"key5\"], 500);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::hash::BuildHasherDefault;",
                "",
                "    struct SimpleHasher;",
                "    impl Default for SimpleHasher {",
                "        fn default() -> Self {",
                "            SimpleHasher",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32, BuildHasherDefault<SimpleHasher>> = HashMap::new();",
                "    let entry = map.raw_entry_mut().from_key(\"key5\");",
                "    let occupied_entry = entry.insert(\"key5\", 500);",
                "    assert_eq!(occupied_entry.get_key_value(), (&\"key5\", &500));",
                "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
                "    assert!(map.contains_key(\"key5\"));",
                "    assert_eq!(map[\"key5\"], 500);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches RawEntryMut::Occupied(mut entry) at line 729 is true\n",
        "precondition: self matches RawEntryMut::Occupied(mut entry) at line 729 is true\n",
        "expected return value/type: entry\n"
      ],
      "input_infer": "K: any type supporting Hash, V: any type, RawEntryMut must be initialized as Occupied with valid key-value pair.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;",
            "use hashbrown::hash_map::RawEntryMut;",
            "use std::collections::hash_map::DefaultHasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"key1\", 10);",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "        elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
                "        table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key1\", 20);",
                "}"
              ],
              "oracle": [
                "    let result = entry.insert(\"key1\", 20);",
                "    assert_eq!(result.get_key_value(), (&\"key1\", &20));",
                "    ",
                "    let entry_after_insert = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "    elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
                "    table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
                "    hash_builder: &hash_builder,",
                "    });",
                "    assert_eq!(entry_after_insert.remove_entry(), (\"key1\", 20));"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"key1\", 10);",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "        elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
                "        table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key1\", 20);",
                "    let result = entry.insert(\"key1\", 20);",
                "    assert_eq!(result.get_key_value(), (&\"key1\", &20));",
                "    ",
                "    let entry_after_insert = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "    elem: map.raw_entry_mut().from_key(&\"key1\").elem,",
                "    table: &mut map.raw_entry_mut().from_key(&\"key1\").table,",
                "    hash_builder: &hash_builder,",
                "    });",
                "    assert_eq!(entry_after_insert.remove_entry(), (\"key1\", 20));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key2\", 30);",
                "}"
              ],
              "oracle": [
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "    elem: Bucket::default(),",
                "    table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
                "    hash_builder: &hash_builder,",
                "    });",
                "    assert_eq!(result, entry);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key2\", 30);",
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "    elem: Bucket::default(),",
                "    table: &mut map.raw_entry_mut().from_key(&\"key2\").table,",
                "    hash_builder: &hash_builder,",
                "    });",
                "    assert_eq!(result, entry);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"key3\", 40);",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "        elem: map.raw_entry_mut().from_key(&\"key3\").elem,",
                "        table: &mut map.raw_entry_mut().from_key(&\"key3\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key3\", 50);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.get_key_value(), (&\"key3\", &50));",
                "    assert_eq!(result.remove_entry(), (\"key3\", 50));"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap};",
                "    use std::collections::hash_map::DefaultHasher;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"key3\", 40);",
                "    ",
                "    let hash_builder = DefaultHasher::new();",
                "    ",
                "    let entry = RawEntryMut::Occupied(RawOccupiedEntryMut {",
                "        elem: map.raw_entry_mut().from_key(&\"key3\").elem,",
                "        table: &mut map.raw_entry_mut().from_key(&\"key3\").table,",
                "        hash_builder: &hash_builder,",
                "    });",
                "",
                "    let result = entry.insert(\"key3\", 50);",
                "    assert_eq!(result.get_key_value(), (&\"key3\", &50));",
                "    assert_eq!(result.remove_entry(), (\"key3\", 50));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}