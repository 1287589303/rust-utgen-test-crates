{
  "name": "hashbrown::map::{impl#2}::new_in",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:366:5:368:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Allocator instance of type A; capacity as usize in range [0, MAX]; default hash builder should be used.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "    unsafe impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let map: HashMap<&str, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
                "    let len = map.len();",
                "    let capacity = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);"
              ],
              "code": [
                "{",
                "     struct DummyAllocator;  ",
                "     use std::alloc::Layout;  ",
                "+    use std::ptr::NonNull;  ",
                "     unsafe impl Allocator for DummyAllocator {  ",
                "         fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {  ",
                "             Ok(NonNull::new_unchecked(std::ptr::null_mut()))  ",
                "         }  ",
                "         unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}  ",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let map: HashMap<&str, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
                "    let len = map.len();",
                "    let capacity = map.capacity();",
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "    unsafe impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);",
                "    let len = map.len();",
                "    let capacity = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 0);",
                "    assert_eq!(capacity, 0);",
                "    map.insert(1, 10);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.capacity() > 0);"
              ],
              "code": [
                "{",
                "    struct DummyAllocator;  ",
                "    use std::alloc::Layout;  ",
                "    use std::ptr::{NonNull, null_mut};  ",
                "    unsafe impl Allocator for DummyAllocator {  ",
                "       fn allocate(&self, _layout: Layout) -> Result<NonNull<[u8]>, allocator_api2::alloc::AllocError> {  ",
                "           Err(allocator_api2::alloc::AllocError)  ",
                "       }  ",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}  ",
                "     }  ",
                "",
                "   let alloc = DummyAllocator;  ",
                "   let mut map: HashMap<i32, i32, DefaultHashBuilder, DummyAllocator> = HashMap::new_in(alloc);  ",
                "   let len = map.len();  ",
                "   let capacity = map.capacity();  ",
                "   assert_eq!(len, 0);  ",
                "   assert_eq!(capacity, 0);  ",
                "   map.insert(1, 10);  ",
                "   assert_eq!(map.len(), 1);  ",
                "   assert!(map.capacity() > 0);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}