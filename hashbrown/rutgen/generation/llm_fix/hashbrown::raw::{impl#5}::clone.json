{
  "name": "hashbrown::raw::{impl#5}::clone",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:210:5:212:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self { ptr: self.ptr }\n"
      ],
      "input_infer": "NonNull<T> ptr must be valid and non-null, T can be any valid type, test with valid and invalid NonNull pointers including null and dangling pointers as edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    let value = TestStruct;",
                "    let layout = std::alloc::Layout::new::<TestStruct>();",
                "    let ptr = unsafe { NonNull::new(std::alloc::alloc(layout)).unwrap() };",
                "    unsafe {",
                "        ptr.as_ptr().write(value);",
                "    }",
                "    let bucket = Bucket { ptr };",
                "    let _cloned_bucket = bucket.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_cloned_bucket.ptr, bucket.ptr);"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    let value = TestStruct;",
                "    let layout = std::alloc::Layout::new::<TestStruct>();",
                "    let ptr = unsafe { NonNull::new(std::alloc::alloc(layout)).unwrap() };",
                "    unsafe {",
                "        ptr.as_ptr().write(value);",
                "    }",
                "    let bucket = Bucket { ptr };",
                "    let _cloned_bucket = bucket.clone();",
                "    assert_eq!(_cloned_bucket.ptr, bucket.ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    let _bucket = Bucket { ptr: NonNull::new(1 as *mut TestStruct).unwrap() };",
                "    let _cloned_bucket = _bucket.clone();",
                "}"
              ],
              "oracle": [
                "    _assert_eq!(_cloned_bucket.ptr.as_ptr(), _bucket.ptr.as_ptr());"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    let _bucket = Bucket { ptr: NonNull::new(1 as *mut TestStruct).unwrap() };",
                "    let _cloned_bucket = _bucket.clone();",
                "    _assert_eq!(_cloned_bucket.ptr.as_ptr(), _bucket.ptr.as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    let _bucket = Bucket { ptr: NonNull::dangling() };",
                "    let _cloned_bucket = _bucket.clone();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_cloned_bucket.ptr, _bucket.ptr);"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    let _bucket = Bucket { ptr: NonNull::dangling() };",
                "    let _cloned_bucket = _bucket.clone();",
                "    assert_eq!(_cloned_bucket.ptr, _bucket.ptr);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestStruct;",
                "    let ptr = NonNull::new(unsafe { std::mem::transmute::<*mut TestStruct, *mut usize>(0xDEADBEEF as *mut TestStruct) }).unwrap();",
                "    let _bucket = Bucket { ptr };",
                "    let _cloned_bucket = _bucket.clone();",
                "}"
              ],
              "oracle": [
                "    let ptr = NonNull::new(unsafe { std::mem::transmute::<*mut TestStruct, *mut usize>(0xDEADBEEF as *mut TestStruct) }).unwrap();",
                "    let _bucket = Bucket { ptr };",
                "    let _cloned_bucket = _bucket.clone();",
                "    assert_eq!(_cloned_bucket.ptr, _bucket.ptr);",
                "    assert!(!ptr.as_ptr().is_null());",
                "    assert_eq!(std::mem::size_of::<Bucket<TestStruct>>(), std::mem::size_of::<NonNull<TestStruct>>());"
              ],
              "code": [
                "{",
                "    struct TestStruct;",
                "    let ptr = NonNull::new(unsafe { std::mem::transmute::<*mut TestStruct, *mut usize>(0xDEADBEEF as *mut TestStruct) }).unwrap();",
                "    let _bucket = Bucket { ptr };",
                "    let _cloned_bucket = _bucket.clone();",
                "    let ptr = NonNull::new(unsafe { std::mem::transmute::<*mut TestStruct, *mut usize>(0xDEADBEEF as *mut TestStruct) }).unwrap();",
                "    let _bucket = Bucket { ptr };",
                "    let _cloned_bucket = _bucket.clone();",
                "    assert_eq!(_cloned_bucket.ptr, _bucket.ptr);",
                "    assert!(!ptr.as_ptr().is_null());",
                "    assert_eq!(std::mem::size_of::<Bucket<TestStruct>>(), std::mem::size_of::<NonNull<TestStruct>>());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}