{
  "name": "hashbrown::raw::{impl#12}::probe_seq",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2303:5:2310:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: ProbeSeq {\n            // This is the same as `hash as usize % self.buckets()` because the number\n            // of buckets is a power of two, and `self.bucket_mask = self.buckets() - 1`.\n            pos: h1(hash) & self.bucket_mask,\n            stride: 0,\n        }\n"
      ],
      "input_infer": "hash: any non-negative 64-bit integer; self.bucket_mask: a value that is one less than a power of two (e.g., 1, 3, 7, 15, 31, 63, etc.)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 1; // (2^1) - 1",
                "    let hash = 0; // Any non-negative 64-bit integer",
                "    let raw_table_inner = RawTableInner {",
                "        bucket_mask,",
                "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 1; // (2^1) - 1",
                "    let hash = 0; // Any non-negative 64-bit integer",
                "       let raw_table_inner = RawTableInner {",
                "           bucket_mask,",
                "           ctrl: NonNull::new(ptr::null_mut()).unwrap(), // Using unwrap on safe Option",
                "           growth_left: 0,",
                "           items: 0,",
                "       };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 3; // (2^2) - 1",
                "    let hash = 1; // Any non-negative 64-bit integer",
                "    let raw_table_inner = RawTableInner {",
                "        bucket_mask,",
                "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 3; // (2^2) - 1",
                "    let hash = 1; // Any non-negative 64-bit integer",
                "   let raw_table_inner = RawTableInner {  ",
                "       bucket_mask,  ",
                "       ctrl: NonNull::new(ptr::null_mut()).expect(\"Expected a non-null pointer\"),  ",
                "       growth_left: 0,  ",
                "       items: 0,  ",
                "   };  ",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 15; // (2^4) - 1",
                "    let hash = 5; // Any non-negative 64-bit integer",
                "    let raw_table_inner = RawTableInner {",
                "        bucket_mask,",
                "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 15; // (2^4) - 1",
                "    let hash = 5; // Any non-negative 64-bit integer",
                "   let raw_table_inner = RawTableInner {",
                "       bucket_mask,",
                "       ctrl: NonNull::new(ptr::null_mut()).expect(\"Null pointer not allowed\"),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 63; // (2^6) - 1",
                "    let hash = 32; // Any non-negative 64-bit integer",
                "    let raw_table_inner = RawTableInner {",
                "        bucket_mask,",
                "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 63; // (2^6) - 1",
                "    let hash = 32; // Any non-negative 64-bit integer",
                "   let raw_table_inner = RawTableInner {",
                "       bucket_mask,",
                "       ctrl: NonNull::new(ptr::null_mut()).expect(\"Null pointer should not be created.\"),",
                "       growth_left: 0,",
                "       items: 0,",
                "   };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 31; // (2^5) - 1",
                "    let hash = 63; // Testing the upper range of the non-negative 64-bit integer",
                "    let raw_table_inner = RawTableInner {",
                "        bucket_mask,",
                "        ctrl: NonNull::new_unchecked(ptr::null_mut()),",
                "        growth_left: 0,",
                "        items: 0,",
                "    };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "    ",
                "    let bucket_mask = 31; // (2^5) - 1",
                "    let hash = 63; // Testing the upper range of the non-negative 64-bit integer",
                "   let raw_table_inner = RawTableInner {",
                "       bucket_mask,",
                "       ctrl: NonNull::new(ptr::null_mut()).expect(\"ptr::null_mut() should not be used\"),",
                "       growth_left: 0,",
                "       items: 0,",
                "   };",
                "    ",
                "    let result = raw_table_inner.probe_seq(hash);",
                "    assert_eq!(result.pos, h1(hash) & bucket_mask);",
                "    assert_eq!(result.stride, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}