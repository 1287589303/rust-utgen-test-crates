{
  "name": "hashbrown::table::{impl#1}::shrink_to",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:511:5:513:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "min_capacity: 0 to current capacity; current capacity: > 0; hasher: must return consistent hash values for existing entries; valid data type T must be in the table\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table = HashTable::with_capacity_in(100, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(0, hasher);",
                "}"
              ],
              "oracle": [
                "    assert!(table.capacity() >= 2);",
                "    table.shrink_to(10, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.len() == 2);",
                "    assert!(table.is_empty() == false);",
                "    table.clear();",
                "    assert!(table.is_empty() == true);"
              ],
              "code": [
                "{",
                "    let mut table = HashTable::with_capacity_in(100, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.capacity() >= 2);",
                "    table.shrink_to(10, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.len() == 2);",
                "    assert!(table.is_empty() == false);",
                "    table.clear();",
                "    assert!(table.is_empty() == true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table = HashTable::with_capacity_in(100, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(1, hasher);",
                "}"
              ],
              "oracle": [
                "    assert!(table.capacity() >= 1);",
                "    assert!(table.len() == 2);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.capacity() >= 2);",
                "    assert!(table.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut table = HashTable::with_capacity_in(100, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(1, hasher);",
                "    assert!(table.capacity() >= 1);",
                "    assert!(table.len() == 2);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.capacity() >= 2);",
                "    assert!(table.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut table = HashTable::with_capacity_in(5, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(10, hasher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 5);",
                "    assert_eq!(table.len(), 2);",
                "    assert!(table.is_empty() == false);",
                "    assert!(std::panic::catch_unwind(|| { table.shrink_to(10, hasher); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { table.shrink_to(6, hasher); }).is_err());"
              ],
              "code": [
                "{",
                "    let mut table = HashTable::with_capacity_in(5, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(10, hasher);",
                "    assert_eq!(table.capacity(), 5);",
                "    assert_eq!(table.len(), 2);",
                "    assert!(table.is_empty() == false);",
                "    assert!(std::panic::catch_unwind(|| { table.shrink_to(10, hasher); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { table.shrink_to(6, hasher); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table = HashTable::with_capacity_in(50, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(50, hasher);",
                "}"
              ],
              "oracle": [
                "    assert!(table.capacity() >= 50);",
                "    assert_eq!(table.len(), 2);",
                "    table.shrink_to(10, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    assert_eq!(table.len(), 2);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.capacity() >= 2);",
                "    assert_eq!(table.len(), 2);",
                "    let result = std::panic::catch_unwind(|| { table.shrink_to(100, hasher); });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut table = HashTable::with_capacity_in(50, Global);",
                "    let hasher = |val: &_| val.to_owned(); // Simple identity hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.insert_unique(hasher(&2), 2, hasher);",
                "    table.shrink_to(50, hasher);",
                "    assert!(table.capacity() >= 50);",
                "    assert_eq!(table.len(), 2);",
                "    table.shrink_to(10, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    assert_eq!(table.len(), 2);",
                "    table.shrink_to(0, hasher);",
                "    assert!(table.capacity() >= 2);",
                "    assert_eq!(table.len(), 2);",
                "    let result = std::panic::catch_unwind(|| { table.shrink_to(100, hasher); });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}