{
  "name": "hashbrown::raw_entry::{impl#4}::from_hash",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:591:5:596:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test input conditions should include: hash value as any valid u64 (0 to 2^64-1), a matching function is_match that accepts a reference to a key type K, and a HashMap<K, V, S, A> with at least one occupied entry for successful retrieval (key present) and a HashMap<K, V, S, A> potentially empty or with keys that do not match for testing the vacant case.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::hash_map::HashMap;",
            "use hashbrown::hash_map::RawEntryMut;",
            "use core::hash::BuildHasher;",
            "use core::hash::Hash;",
            "use core::hash::Hasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    let key = \"a\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"a\"], 100);",
                "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
                "    let key_not_exist = \"b\";",
                "    let hash_not_exist = compute_hash(map.hasher(), &key_not_exist);",
                "    let entry_not_exist: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_not_exist, |k| k == &key_not_exist);",
                "    assert!(matches!(entry_not_exist, RawEntryMut::Vacant(_)));",
                "    map.insert(key_not_exist, 200);",
                "    let updated_entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(compute_hash(map.hasher(), &key_not_exist), |k| k == &key_not_exist);",
                "    assert_eq!(map[key_not_exist], 200);",
                "    assert!(matches!(updated_entry, RawEntryMut::Occupied(_)));"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    let key = \"a\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 100);",
                "    assert_eq!(map[\"a\"], 100);",
                "    assert!(matches!(entry, RawEntryMut::Occupied(_)));",
                "    let key_not_exist = \"b\";",
                "    let hash_not_exist = compute_hash(map.hasher(), &key_not_exist);",
                "    let entry_not_exist: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_not_exist, |k| k == &key_not_exist);",
                "    assert!(matches!(entry_not_exist, RawEntryMut::Vacant(_)));",
                "    map.insert(key_not_exist, 200);",
                "    let updated_entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(compute_hash(map.hasher(), &key_not_exist), |k| k == &key_not_exist);",
                "    assert_eq!(map[key_not_exist], 200);",
                "    assert!(matches!(updated_entry, RawEntryMut::Occupied(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let key = \"b\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 200);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[&\"b\"], 200);"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let key = \"b\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 200);",
                "    assert_eq!(map[&\"b\"], 200);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let key = \"c\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 300);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[&\"c\"], 300);",
                "    let key_non_existent = \"d\";",
                "    let hash_non_existent = compute_hash(map.hasher(), &key_non_existent);",
                "    let entry_non_existent: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_non_existent, |k| k == &key_non_existent);",
                "    match entry_non_existent {",
                "    RawEntryMut::Occupied(_) => unreachable!(),",
                "    RawEntryMut::Vacant(_) => {}",
                "    }",
                "    let key_existing = \"c\";",
                "    let hash_existing = compute_hash(map.hasher(), &key_existing);",
                "    let entry_existing: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_existing, |k| k == &key_existing);",
                "    assert!(matches!(entry_existing, RawEntryMut::Occupied(_)));"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::hash_map::{HashMap, RawEntryMut};",
                "",
                "    fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {",
                "        use core::hash::Hasher;",
                "        let mut state = hash_builder.build_hasher();",
                "        key.hash(&mut state);",
                "        state.finish()",
                "    }",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let key = \"c\";",
                "    let hash = compute_hash(map.hasher(), &key);",
                "    let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash, |k| k == &key);",
                "    entry.insert(key, 300);",
                "    assert_eq!(map[&\"c\"], 300);",
                "    let key_non_existent = \"d\";",
                "    let hash_non_existent = compute_hash(map.hasher(), &key_non_existent);",
                "    let entry_non_existent: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_non_existent, |k| k == &key_non_existent);",
                "    match entry_non_existent {",
                "    RawEntryMut::Occupied(_) => unreachable!(),",
                "    RawEntryMut::Vacant(_) => {}",
                "    }",
                "    let key_existing = \"c\";",
                "    let hash_existing = compute_hash(map.hasher(), &key_existing);",
                "    let entry_existing: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_hash(hash_existing, |k| k == &key_existing);",
                "    assert!(matches!(entry_existing, RawEntryMut::Occupied(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}