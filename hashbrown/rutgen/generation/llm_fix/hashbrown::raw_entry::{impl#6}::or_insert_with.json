{
  "name": "hashbrown::raw_entry::{impl#6}::or_insert_with",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:783:5:796:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches RawEntryMut::Vacant(entry) at line 789 is true\n"
      ],
      "input_infer": "self is of type RawEntryMut::Vacant with K and V types as valid entries, F is a function returning a tuple (K, V), and ensure that key and value are unique and valid for insertion in the underlying HashMap.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::hash_map::RawEntryMut;",
            "use hashbrown::Global;",
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, i32, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"vacant_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"vacant_key\", 42));",
                "        }",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"vacant_key\"], 42);",
                "    let entry = map.raw_entry_mut().from_key(\"vacant_key\");",
                "    match entry {",
                "    RawEntryMut::Occupied(_) => panic!(\"Expected vacant entry, but found occupied.\"),",
                "    RawEntryMut::Vacant(_) => ()",
                "    }",
                "    let entry_key = entry.get_key_value_mut();",
                "    assert_eq!(entry_key.0, \"vacant_key\");",
                "    assert_eq!(entry_key.1, &42);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, i32, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"vacant_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"vacant_key\", 42));",
                "        }",
                "    }",
                "    assert_eq!(map[\"vacant_key\"], 42);",
                "    let entry = map.raw_entry_mut().from_key(\"vacant_key\");",
                "    match entry {",
                "    RawEntryMut::Occupied(_) => panic!(\"Expected vacant entry, but found occupied.\"),",
                "    RawEntryMut::Vacant(_) => ()",
                "    }",
                "    let entry_key = entry.get_key_value_mut();",
                "    assert_eq!(entry_key.0, \"vacant_key\");",
                "    assert_eq!(entry_key.1, &42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, String, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"another_vacant_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"another_vacant_key\", \"value\".to_string()));",
                "        }",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(map.contains_key(\"another_vacant_key\"));",
                "    assert_eq!(map[\"another_vacant_key\"], \"value\".to_string());",
                "    assert_eq!(map.len(), 1);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, String, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"another_vacant_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"another_vacant_key\", \"value\".to_string()));",
                "        }",
                "    }",
                "    assert!(map.contains_key(\"another_vacant_key\"));",
                "    assert_eq!(map[\"another_vacant_key\"], \"value\".to_string());",
                "    assert_eq!(map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, f64, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"float_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"float_key\", 3.14));",
                "        }",
                "    }",
                "    ",
                "    match map.raw_entry_mut().from_key(\"float_key2\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"float_key2\", 2.71));",
                "        }",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"float_key\"], 3.14);",
                "    assert_eq!(map[\"float_key2\"], 2.71);"
              ],
              "code": [
                "{",
                "    use hashbrown::{hash_map::RawEntryMut, HashMap, Global};",
                "",
                "    let mut map: HashMap<&str, f64, Global> = HashMap::new();",
                "",
                "    match map.raw_entry_mut().from_key(\"float_key\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"float_key\", 3.14));",
                "        }",
                "    }",
                "    ",
                "    match map.raw_entry_mut().from_key(\"float_key2\") {",
                "        RawEntryMut::Occupied(_) => unreachable!(),",
                "        RawEntryMut::Vacant(entry) => {",
                "            entry.or_insert_with(|| (\"float_key2\", 2.71));",
                "        }",
                "    }",
                "    assert_eq!(map[\"float_key\"], 3.14);",
                "    assert_eq!(map[\"float_key2\"], 2.71);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches RawEntryMut::Occupied(entry) at line 789 is true\n",
        "precondition: self matches RawEntryMut::Occupied(entry) at line 789 is true\n"
      ],
      "input_infer": "self must be of type RawEntryMut::Occupied, containing a valid key-value pair with K implementing Hash trait, and F must be a function that returns a tuple (K, V) where K and V are non-null and do not exceed memory constraints.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;",
            "use std::hash::BuildHasherDefault;",
            "use hashbrown::hash_map::RawEntryMut;",
            "use std::hash::Hash;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
                "    use std::hash::{BuildHasherDefault, Hash};",
                "    ",
                "    // Define a simple struct and implement Hash for it",
                "    #[derive(Hash, PartialEq, Eq)]",
                "    struct Key {",
                "        id: i32,",
                "    }",
                "    ",
                "    // Provide a default hasher",
                "    type DefaultHasher = BuildHasherDefault<core::hash::SipHasher>;",
                "",
                "    let mut map: HashMap<Key, String, DefaultHasher> = HashMap::new();",
                "    ",
                "    // Insert an initial key-value pair",
                "    map.insert(Key { id: 1 }, \"occupied\".to_string());",
                "    ",
                "    // Obtain a RawEntryMut and test or_insert_with on an occupied entry",
                "    let entry = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    match entry {",
                "        RawEntryMut::Occupied(entry) => {",
                "            entry.or_insert_with(|| (Key { id: 2 }, \"new_value\".to_string()));",
                "        },",
                "        RawEntryMut::Vacant(_) => unreachable!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(entry.get_key_value().0 == &Key { id: 1 });",
                "    assert!(entry.get_key_value().1 == \"occupied\");",
                "    assert!(entry.get_mut() == &mut \"occupied\");",
                "    assert!(entry.key() == &Key { id: 1 });",
                "    assert!(entry.get() == &\"occupied\");"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
                "    use std::hash::{BuildHasherDefault, Hash};",
                "    ",
                "    // Define a simple struct and implement Hash for it",
                "    #[derive(Hash, PartialEq, Eq)]",
                "    struct Key {",
                "        id: i32,",
                "    }",
                "    ",
                "    // Provide a default hasher",
                "    type DefaultHasher = BuildHasherDefault<core::hash::SipHasher>;",
                "",
                "    let mut map: HashMap<Key, String, DefaultHasher> = HashMap::new();",
                "    ",
                "    // Insert an initial key-value pair",
                "    map.insert(Key { id: 1 }, \"occupied\".to_string());",
                "    ",
                "    // Obtain a RawEntryMut and test or_insert_with on an occupied entry",
                "    let entry = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    match entry {",
                "        RawEntryMut::Occupied(entry) => {",
                "            entry.or_insert_with(|| (Key { id: 2 }, \"new_value\".to_string()));",
                "        },",
                "        RawEntryMut::Vacant(_) => unreachable!(),",
                "    }",
                "    assert!(entry.get_key_value().0 == &Key { id: 1 });",
                "    assert!(entry.get_key_value().1 == \"occupied\");",
                "    assert!(entry.get_mut() == &mut \"occupied\");",
                "    assert!(entry.key() == &Key { id: 1 });",
                "    assert!(entry.get() == &\"occupied\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
                "    use std::hash::{BuildHasherDefault, Hash};",
                "    ",
                "    #[derive(Hash, PartialEq, Eq)]",
                "    struct Key {",
                "        id: i32,",
                "    }",
                "",
                "    type DefaultHasher = BuildHasherDefault<core::hash::SipHasher>;",
                "",
                "    let mut map: HashMap<Key, String, DefaultHasher> = HashMap::new();",
                "    ",
                "    // Ensure there is a key-value pair so we can access an occupied entry",
                "    map.insert(Key { id: 1 }, \"occupied\".to_string());",
                "    ",
                "    // Access an existing occupied entry",
                "    let entry = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    match entry {",
                "        RawEntryMut::Occupied(entry) => {",
                "            entry.or_insert_with(|| (Key { id: 2 }, \"default_value\".to_string()));",
                "        },",
                "        RawEntryMut::Vacant(_) => unreachable!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[Key { id: 1 }], \"occupied\".to_string());",
                "    assert!(map.contains_key(&Key { id: 2 }));",
                "    assert_eq!(map[Key { id: 2 }], \"default_value\".to_string());",
                "    let entry_after = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    if let RawEntryMut::Occupied(entry) = entry_after {",
                "    assert_eq!(entry.get(), &\"occupied\".to_string());",
                "    assert!(entry.get_key_value().0.eq(&Key { id: 1 }));",
                "    } else {",
                "    unreachable!();",
                "    }"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, hash_map::RawEntryMut};",
                "    use std::hash::{BuildHasherDefault, Hash};",
                "    ",
                "    #[derive(Hash, PartialEq, Eq)]",
                "    struct Key {",
                "        id: i32,",
                "    }",
                "",
                "    type DefaultHasher = BuildHasherDefault<core::hash::SipHasher>;",
                "",
                "    let mut map: HashMap<Key, String, DefaultHasher> = HashMap::new();",
                "    ",
                "    // Ensure there is a key-value pair so we can access an occupied entry",
                "    map.insert(Key { id: 1 }, \"occupied\".to_string());",
                "    ",
                "    // Access an existing occupied entry",
                "    let entry = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    match entry {",
                "        RawEntryMut::Occupied(entry) => {",
                "            entry.or_insert_with(|| (Key { id: 2 }, \"default_value\".to_string()));",
                "        },",
                "        RawEntryMut::Vacant(_) => unreachable!(),",
                "    }",
                "    assert_eq!(map[Key { id: 1 }], \"occupied\".to_string());",
                "    assert!(map.contains_key(&Key { id: 2 }));",
                "    assert_eq!(map[Key { id: 2 }], \"default_value\".to_string());",
                "    let entry_after = map.raw_entry_mut().from_key(&Key { id: 1 });",
                "    if let RawEntryMut::Occupied(entry) = entry_after {",
                "    assert_eq!(entry.get(), &\"occupied\".to_string());",
                "    assert!(entry.get_key_value().0.eq(&Key { id: 1 }));",
                "    } else {",
                "    unreachable!();",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}