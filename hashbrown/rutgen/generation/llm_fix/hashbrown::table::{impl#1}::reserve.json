{
  "name": "hashbrown::table::{impl#1}::reserve",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:550:5:552:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0 to usize::MAX excluding isize::MAX, hasher: any function taking &T and returning u64\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(0, hasher);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 0);",
                "    ",
                "    #[should_panic]",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "    ",
                "    table.reserve(10, hasher);",
                "    assert!(table.capacity() >= 10);"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_reserve_exceed_isize_max() {",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "}",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(0, hasher);",
                "    assert_eq!(table.capacity(), 0);",
                "    ",
                "    #[should_panic]",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "    ",
                "    table.reserve(10, hasher);",
                "    assert!(table.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(5, hasher);",
                "}"
              ],
              "oracle": [
                "    assert_panics(test_reserve_exceed_isize_max);",
                "    assert_greater_equal(table.capacity(), 10);",
                "    assert_greater_equal(table.capacity(), 5);"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_reserve_exceed_isize_max() {",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "}",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(5, hasher);",
                "    assert_panics(test_reserve_exceed_isize_max);",
                "    assert_greater_equal(table.capacity(), 10);",
                "    assert_greater_equal(table.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(usize::MAX - 1, hasher);",
                "}"
              ],
              "oracle": [
                "    #[should_panic]",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    ",
                "    #[test]",
                "    table.reserve(usize::MAX - 1, hasher);"
              ],
              "code": [
                "{",
                "#[should_panic]",
                "fn test_reserve_exceed_isize_max() {",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "}",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64;",
                "    table.reserve(usize::MAX - 1, hasher);",
                "    #[should_panic]",
                "    table.reserve(isize::MAX as usize + 1, hasher);",
                "    assert!(table.capacity() >= 10);",
                "    ",
                "    #[test]",
                "    table.reserve(usize::MAX - 1, hasher);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}