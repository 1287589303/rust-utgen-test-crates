{
  "name": "hashbrown::set::{impl#3}::retain",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:368:5:373:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input conditions: a mutable HashSet of integers containing at least 0 to 10 elements (inclusive), predicate function F that evaluates to true for even integers and false for odd integers, check for a resulting set length of 0 to the initial set length after retain operation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::new();",
                "    set.retain(|&k| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert!(set.is_empty());",
                "    set.insert(2);",
                "    set.insert(3);",
                "    set.retain(|&k| k < 5);",
                "    assert_eq!(set.len(), 1);",
                "    assert!(set.contains(&2));",
                "    set.insert(4);",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 2);",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    set.retain(|&k| k > 10);",
                "    assert!(set.is_empty());",
                "    set.insert(10);",
                "    set.retain(|&k| k == 10);",
                "    assert_eq!(set.len(), 1);",
                "    assert!(set.contains(&10));"
              ],
              "code": [
                "{",
                "    let mut set: HashSet<i32> = HashSet::new();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert!(set.is_empty());",
                "    set.insert(2);",
                "    set.insert(3);",
                "    set.retain(|&k| k < 5);",
                "    assert_eq!(set.len(), 1);",
                "    assert!(set.contains(&2));",
                "    set.insert(4);",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 2);",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    set.retain(|&k| k > 10);",
                "    assert!(set.is_empty());",
                "    set.insert(10);",
                "    set.retain(|&k| k == 10);",
                "    assert_eq!(set.len(), 1);",
                "    assert!(set.contains(&10));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs = [1, 3, 5, 7, 9];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 0);",
                "    let xs = [2, 4, 6, 8];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 4);",
                "    let xs = [1, 2, 3, 4, 5];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k > 3);",
                "    assert_eq!(set.len(), 2);",
                "    let xs = [];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 0);",
                "    let xs = [10, 20, 30, 40];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k < 15);",
                "    assert_eq!(set.len(), 1);"
              ],
              "code": [
                "{",
                "    let xs = [1, 3, 5, 7, 9];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 0);",
                "    let xs = [2, 4, 6, 8];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 4);",
                "    let xs = [1, 2, 3, 4, 5];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k > 3);",
                "    assert_eq!(set.len(), 2);",
                "    let xs = [];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 0);",
                "    let xs = [10, 20, 30, 40];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k < 15);",
                "    assert_eq!(set.len(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs = [0, 2, 4, 6, 8, 10];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 6);",
                "    let retained_elements: Vec<_> = set.iter().collect();",
                "    assert_eq!(retained_elements, vec![0, 2, 4, 6, 8, 10]);",
                "    set.retain(|&k| k % 3 == 0);",
                "    assert_eq!(set.len(), 2);",
                "    let retained_elements_after: Vec<_> = set.iter().collect();",
                "    assert_eq!(retained_elements_after, vec![0, 6]);",
                "    set.retain(|&k| k > 5);",
                "    assert_eq!(set.len(), 1);",
                "    let final_elements: Vec<_> = set.iter().collect();",
                "    assert_eq!(final_elements, vec![6]);",
                "    set.retain(|_| false);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());"
              ],
              "code": [
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs = [0, 1, 2, 3, 4, 5, 6];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 4);",
                "    assert!(set.iter().all(|&k| k % 2 == 0);",
                "    assert!(!set.contains(&1));",
                "    assert!(!set.contains(&3));",
                "    assert!(!set.contains(&5));",
                "    assert!(set.contains(&0));",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    assert!(set.contains(&6));"
              ],
              "code": [
                "{",
                "    let xs = [0, 1, 2, 3, 4, 5, 6];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 4);",
                "   assert!(set.iter().all(|&k| k % 2 == 0));",
                "   assert!(!set.contains(&1));",
                "    assert!(!set.contains(&3));",
                "    assert!(!set.contains(&5));",
                "    assert!(set.contains(&0));",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    assert!(set.contains(&6));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 6);",
                "    assert!(set.contains(&0));",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    assert!(set.contains(&6));",
                "    assert!(set.contains(&8));",
                "    assert!(set.contains(&10));",
                "    assert!(!set.contains(&1));",
                "    assert!(!set.contains(&3));",
                "    assert!(!set.contains(&5));",
                "    assert!(!set.contains(&7));",
                "    assert!(!set.contains(&9));"
              ],
              "code": [
                "{",
                "    let xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];",
                "    let mut set: HashSet<i32> = xs.into_iter().collect();",
                "    set.retain(|&k| k % 2 == 0);",
                "    assert_eq!(set.len(), 6);",
                "    assert!(set.contains(&0));",
                "    assert!(set.contains(&2));",
                "    assert!(set.contains(&4));",
                "    assert!(set.contains(&6));",
                "    assert!(set.contains(&8));",
                "    assert!(set.contains(&10));",
                "    assert!(!set.contains(&1));",
                "    assert!(!set.contains(&3));",
                "    assert!(!set.contains(&5));",
                "    assert!(!set.contains(&7));",
                "    assert!(!set.contains(&9));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}