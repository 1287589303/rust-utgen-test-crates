{
  "name": "hashbrown::raw::{impl#8}::is_empty",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1265:5:1267:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.len() == 0\n"
      ],
      "input_infer": "self.len() = 0 (empty table), self.len() > 0 (non-empty table)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<u32> = RawTable::new_in(Global);",
                "    assert!(table.is_empty());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    let table_with_elements: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    table_with_elements.insert(1, 42, |x| *x);",
                "    assert!(!table_with_elements.is_empty());",
                "    table_with_elements.clear();",
                "    assert!(table_with_elements.is_empty());",
                "    let table_shrinked: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    assert!(table_shrinked.is_empty());",
                "    table_shrinked.reserve(1, |x| *x);",
                "    assert!(table_shrinked.is_empty());",
                "    let table_uninitialized: Result<RawTable<u32>, _> = unsafe { RawTable::new_uninitialized(Global, 4, Fallibility::Fallible) };",
                "    assert!(table_uninitialized.is_ok());",
                "    assert!(table_uninitialized.unwrap().is_empty());"
              ],
              "code": [
                "{",
                "    let table: RawTable<u32> = RawTable::new_in(Global);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    let table_with_elements: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    table_with_elements.insert(1, 42, |x| *x);",
                "    assert!(!table_with_elements.is_empty());",
                "    table_with_elements.clear();",
                "    assert!(table_with_elements.is_empty());",
                "    let table_shrinked: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    assert!(table_shrinked.is_empty());",
                "    table_shrinked.reserve(1, |x| *x);",
                "    assert!(table_shrinked.is_empty());",
                "    let table_uninitialized: Result<RawTable<u32>, _> = unsafe { RawTable::new_uninitialized(Global, 4, Fallibility::Fallible) };",
                "    assert!(table_uninitialized.is_ok());",
                "    assert!(table_uninitialized.unwrap().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    unsafe {",
                "        table.insert(1, 42, |x| *x);",
                "    }",
                "    assert!(!table.is_empty());",
                "}"
              ],
              "oracle": [
                "    assert!(table.is_empty());",
                "    table.insert(2, 100, |x| *x);",
                "    assert!(!table.is_empty());",
                "    table.clear();",
                "    assert!(table.is_empty());",
                "    unsafe {",
                "    table = RawTable::new_uninitialized(Global, 4, Fallibility::All);",
                "    }",
                "    assert!(table.is_empty());"
              ],
              "code": [
                "{",
                "    let mut table: RawTable<u32> = RawTable::with_capacity_in(1, Global);",
                "    unsafe {",
                "        table.insert(1, 42, |x| *x);",
                "    }",
                "    assert!(!table.is_empty());",
                "    assert!(table.is_empty());",
                "    table.insert(2, 100, |x| *x);",
                "    assert!(!table.is_empty());",
                "    table.clear();",
                "    assert!(table.is_empty());",
                "    unsafe {",
                "    table = RawTable::new_uninitialized(Global, 4, Fallibility::All);",
                "    }",
                "    assert!(table.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}