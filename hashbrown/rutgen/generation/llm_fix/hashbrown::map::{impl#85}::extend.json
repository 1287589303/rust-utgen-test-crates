{
  "name": "hashbrown::map::{impl#85}::extend",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4480:5:4495:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_empty() at line 4486 is true\n"
      ],
      "input_infer": "K: integer values or types, V: integer values or types, T: valid iterable collection type containing pairs of (K, V) where each K is distinct in the first batch and overlapping keys are updated with new values in subsequent extensions, iter.size_hint().0: positive integers, iter: non-empty iterable containing at least one (K, V) pair\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1)].into_iter();",
                "    map.extend(some_iter);",
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1), (2, 2)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.get(&2), Some(&2));",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(!map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1), (2, 2)].into_iter();",
                "    map.extend(some_iter);",
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.get(&2), Some(&2));",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(!map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(1, 1)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 2);",
                "    assert!(map.is_empty() == false);",
                "    assert_eq!(map.get(&100), None);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(1, 1)].into_iter();",
                "    map.extend(some_iter);",
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 2);",
                "    assert!(map.is_empty() == false);",
                "    assert_eq!(map.get(&100), None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1), (2, 2), (3, 3)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.get(&2), Some(&2));",
                "    assert_eq!(map.get(&3), Some(&3));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1), (2, 2), (3, 3)].into_iter();",
                "    map.extend(some_iter);",
                "    assert_eq!(map.get(&1), Some(&1));",
                "    assert_eq!(map.get(&2), Some(&2));",
                "    assert_eq!(map.get(&3), Some(&3));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_iter = [(1, 1), (1, 2)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&2));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.is_empty() == false);",
                "    assert_eq!(map.into_keys().collect::<Vec<_>>(), vec![1]);",
                "    assert_eq!(map.into_values().collect::<Vec<_>>(), vec![2]);"
              ],
              "code": [
                "{",
                "   use std::vec::Vec; // Import Vec to avoid scope error",
                "   let mut map = HashMap::new();",
                "   let some_iter = [(1, 1), (1, 2)].into_iter();",
                "   map.extend(some_iter);",
                "   assert_eq!(map.get(&1), Some(&2));",
                "   assert_eq!(map.len(), 1);",
                "   assert!(map.is_empty() == false);",
                "   assert_eq!(map.into_keys().collect::<Vec<_>>(), vec![1]);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_vec: Vec<_> = vec![(4, 4), (5, 5)];",
                "    map.extend(some_vec);",
                "    ",
                "    let some_arr = [(6, 6), (7, 7)];",
                "    map.extend(some_arr);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&4), Some(&4));",
                "    assert_eq!(map.get(&5), Some(&5));",
                "    assert_eq!(map.get(&6), Some(&6));",
                "    assert_eq!(map.get(&7), Some(&7));",
                "    assert_eq!(map.len(), 4);",
                "    assert!(map.is_empty() == false);",
                "    assert_eq!(map.capacity(), 4);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    let some_vec: Vec<_> = vec![(4, 4), (5, 5)];",
                "    map.extend(some_vec);",
                "    ",
                "    let some_arr = [(6, 6), (7, 7)];",
                "    map.extend(some_arr);",
                "    assert_eq!(map.get(&4), Some(&4));",
                "    assert_eq!(map.get(&5), Some(&5));",
                "    assert_eq!(map.get(&6), Some(&6));",
                "    assert_eq!(map.get(&7), Some(&7));",
                "    assert_eq!(map.len(), 4);",
                "    assert!(map.is_empty() == false);",
                "    assert_eq!(map.capacity(), 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_empty() at line 4486 is false\n"
      ],
      "input_infer": "Test input conditions or ranges: non-empty iterator of key-value pairs with unique keys, where key type K implements Eq and Hash traits, value type V is also supported for copying; iterator size hint should be greater than zero and less than or equal to the maximum usize capacity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(2, 200), (3, 300)].into_iter();",
                "    map.extend(some_iter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(2, 200), (3, 300)].into_iter();",
                "    map.extend(some_iter);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.len(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
                "    map.extend(some_vec);",
                "}"
              ],
              "oracle": [
                "    map.insert(1, 100);",
                "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
                "    map.extend(some_vec);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.get(&4), Some(&400));",
                "    assert_eq!(map.len(), 4);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
                "    map.extend(some_vec);",
                "    map.insert(1, 100);",
                "    let some_vec: Vec<_> = vec![(2, 200), (3, 300), (4, 400)];",
                "    map.extend(some_vec);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.get(&4), Some(&400));",
                "    assert_eq!(map.len(), 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_arr = [(2, 200), (3, 300), (4, 400), (5, 500)];",
                "    map.extend(some_arr);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.get(&4), Some(&400));",
                "    assert_eq!(map.get(&5), Some(&500));",
                "    assert_eq!(map.len(), 5);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_arr = [(2, 200), (3, 300), (4, 400), (5, 500)];",
                "    map.extend(some_arr);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.get(&4), Some(&400));",
                "    assert_eq!(map.get(&5), Some(&500));",
                "    assert_eq!(map.len(), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(1, 150), (2, 200)].into_iter();",
                "    map.extend(some_iter);",
                "    map.insert(3, 300);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&150));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let some_iter = [(1, 150), (2, 200)].into_iter();",
                "    map.extend(some_iter);",
                "    map.insert(3, 300);",
                "    assert_eq!(map.get(&1), Some(&150));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    map.insert(2, 200);",
                "    let some_vec: Vec<_> = vec![(3, 300), (4, 400)];",
                "    map.extend(some_vec);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert_eq!(map.get(&4), Some(&400));",
                "    assert_eq!(map.len(), 4);"
              ],
              "code": [
                "{",
                "   let mut map = HashMap::new();",
                "   map.insert(1, 100);",
                "   map.insert(2, 200);",
                "   let some_vec: std::vec::Vec<_> = vec![(3, 300), (4, 400)];",
                "   map.extend(some_vec);",
                "   assert_eq!(map.get(&1), Some(&100));",
                "   assert_eq!(map.get(&2), Some(&200));",
                "   assert_eq!(map.get(&3), Some(&300));",
                "   assert_eq!(map.get(&4), Some(&400));",
                "   assert_eq!(map.len(), 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}