{
  "name": "hashbrown::map::{impl#87}::extend",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4627:5:4629:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "K values: any integers or floats that implement Copy; V values: any integers or floats that implement Copy; Size of the iterator: 0 to 1000 elements; Existing keys: 0 to 100 elements; Duplicate keys within the iterator: 0 to (size of iterator); Edge cases: empty iterator, iterator with one element, iterator with duplicate keys.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let empty_iter: Vec<(i32, i32)> = Vec::new();",
                "    map.extend(empty_iter.iter());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.get(&1), None);",
                "    assert_eq!(map.get(&2), None);",
                "    ",
                "    let single_key_value: Vec<(i32, i32)> = vec![(1, 100)];",
                "    map.extend(single_key_value.iter());",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    ",
                "    let update_key_value: Vec<(i32, i32)> = vec![(1, 200)];",
                "    map.extend(update_key_value.iter());",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&200));"
              ],
              "code": [
                "{",
                "   use std::vec::Vec;  ",
                "   let mut map = HashMap::new();  ",
                "   let empty_iter: Vec<(i32, i32)> = Vec::new();  ",
                "   map.extend(empty_iter.iter());  ",
                "   assert_eq!(map.len(), 0);  ",
                "   assert_eq!(map.get(&1), None);  ",
                "   assert_eq!(map.get(&2), None);  ",
                "   let single_key_value: Vec<(i32, i32)> = vec![(1, 100)];  ",
                "    map.extend(single_key_value.iter());",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    ",
                "    let update_key_value: Vec<(i32, i32)> = vec![(1, 200)];",
                "    map.extend(update_key_value.iter());",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&200));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let single_elem = vec![(1, 200)];",
                "    map.extend(single_elem.iter());",
                "    let result = map.get(&1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(&200));",
                "    map.insert(2, 300);",
                "    let multiple_elems = vec![(1, 400), (2, 500)];",
                "    map.extend(multiple_elems.iter());",
                "    assert_eq!(map.get(&1), Some(&400));",
                "    assert_eq!(map.get(&2), Some(&500));",
                "    let additional_elems = vec![(3, 600), (4, 700)];",
                "    map.extend(additional_elems.iter());",
                "    assert_eq!(map.get(&3), Some(&600));",
                "    assert_eq!(map.get(&4), Some(&700));",
                "    let more_elems = vec![(1, 800), (5, 900)];",
                "    map.extend(more_elems.iter());",
                "    assert_eq!(map.get(&1), Some(&800));",
                "    assert_eq!(map.get(&5), Some(&900));",
                "    let empty_iter: Vec<(i32, i32)> = vec![];",
                "    map.extend(empty_iter.iter());",
                "    assert_eq!(map.len(), 5);",
                "    let single_elem_no_change = vec![(1, 800)];",
                "    map.extend(single_elem_no_change.iter());",
                "    assert_eq!(map.get(&1), Some(&800));"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let single_elem = vec![(1, 200)];",
                "    map.extend(single_elem.iter());",
                "    let result = map.get(&1);",
                "    assert_eq!(result, Some(&200));",
                "    map.insert(2, 300);",
                "    let multiple_elems = vec![(1, 400), (2, 500)];",
                "    map.extend(multiple_elems.iter());",
                "    assert_eq!(map.get(&1), Some(&400));",
                "    assert_eq!(map.get(&2), Some(&500));",
                "    let additional_elems = vec![(3, 600), (4, 700)];",
                "    map.extend(additional_elems.iter());",
                "    assert_eq!(map.get(&3), Some(&600));",
                "    assert_eq!(map.get(&4), Some(&700));",
                "    let more_elems = vec![(1, 800), (5, 900)];",
                "    map.extend(more_elems.iter());",
                "    assert_eq!(map.get(&1), Some(&800));",
                "    assert_eq!(map.get(&5), Some(&900));",
                "    let empty_iter: Vec<(i32, i32)> = vec![];",
                "    map.extend(empty_iter.iter());",
                "    assert_eq!(map.len(), 5);",
                "    let single_elem_no_change = vec![(1, 800)];",
                "    map.extend(single_elem_no_change.iter());",
                "    assert_eq!(map.get(&1), Some(&800));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    map.insert(2, 200);",
                "    let multiple_elems = vec![(1, 150), (3, 300), (4, 400)];",
                "    map.extend(multiple_elems.iter());",
                "    let result_1 = map.get(&1);",
                "    let result_3 = map.get(&3);",
                "    let result_4 = map.get(&4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result_1, Some(&150));",
                "    assert_eq!(result_3, Some(&300));",
                "    assert_eq!(result_4, Some(&400));"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    map.insert(2, 200);",
                "    let multiple_elems = vec![(1, 150), (3, 300), (4, 400)];",
                "    map.extend(multiple_elems.iter());",
                "    let result_1 = map.get(&1);",
                "    let result_3 = map.get(&3);",
                "    let result_4 = map.get(&4);",
                "    assert_eq!(result_1, Some(&150));",
                "    assert_eq!(result_3, Some(&300));",
                "    assert_eq!(result_4, Some(&400));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let dup_elems = vec![(1, 150), (2, 200), (1, 175)];",
                "    map.extend(dup_elems.iter());",
                "    let result_1 = map.get(&1);",
                "    let result_2 = map.get(&2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result_1, Some(&175));",
                "    assert_eq!(result_2, Some(&200));",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.get(&3).is_none());",
                "    assert!(map.get(&4).is_none());"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(1, 100);",
                "    let dup_elems = vec![(1, 150), (2, 200), (1, 175)];",
                "    map.extend(dup_elems.iter());",
                "    let result_1 = map.get(&1);",
                "    let result_2 = map.get(&2);",
                "    assert_eq!(result_1, Some(&175));",
                "    assert_eq!(result_2, Some(&200));",
                "    assert_eq!(map.len(), 2);",
                "    assert!(map.get(&3).is_none());",
                "    assert!(map.get(&4).is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    let large_iter: Vec<(i32, i32)> = (0..1000).map(|x| (x, x * 10)).collect();",
                "    map.extend(large_iter.iter());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&0), Some(&(0 * 10)));",
                "    assert_eq!(map.get(&1), Some(&(1 * 10)));",
                "    assert_eq!(map.get(&999), Some(&(999 * 10)));",
                "    assert_eq!(map.len(), 1000);",
                "    assert!(map.contains_key(&500));",
                "    assert!(map.contains_key(&999));",
                "    assert!(!map.contains_key(&1000));"
              ],
              "code": [
                "{",
                "      let mut map = HashMap::new();  ",
                "      let large_iter: std::vec::Vec<(i32, i32)> = (0..1000).map(|x| (x, x * 10)).collect();  ",
                "      map.extend(large_iter.iter());  ",
                "    assert_eq!(map.get(&0), Some(&(0 * 10)));",
                "    assert_eq!(map.get(&1), Some(&(1 * 10)));",
                "    assert_eq!(map.get(&999), Some(&(999 * 10)));",
                "    assert_eq!(map.len(), 1000);",
                "    assert!(map.contains_key(&500));",
                "    assert!(map.contains_key(&999));",
                "    assert!(!map.contains_key(&1000));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(5, 50);",
                "    map.insert(10, 100);",
                "    let existing_keys = vec![(5, 60), (10, 110), (15, 150)];",
                "    map.extend(existing_keys.iter());",
                "    let result_5 = map.get(&5);",
                "    let result_10 = map.get(&10);",
                "    let result_15 = map.get(&15);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result_5, Some(&60));",
                "    assert_eq!(result_10, Some(&110));",
                "    assert_eq!(result_15, None);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(5, 50);",
                "    map.insert(10, 100);",
                "    let existing_keys = vec![(5, 60), (10, 110), (15, 150)];",
                "    map.extend(existing_keys.iter());",
                "    let result_5 = map.get(&5);",
                "    let result_10 = map.get(&10);",
                "    let result_15 = map.get(&15);",
                "    assert_eq!(result_5, Some(&60));",
                "    assert_eq!(result_10, Some(&110));",
                "    assert_eq!(result_15, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}