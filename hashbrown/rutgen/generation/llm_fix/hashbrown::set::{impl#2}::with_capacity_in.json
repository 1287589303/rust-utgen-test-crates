{
  "name": "hashbrown::set::{impl#2}::with_capacity_in",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:251:5:255:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            map: HashMap::with_capacity_in(capacity, alloc),\n        }\n"
      ],
      "input_infer": "capacity: 0 to 10 (inclusive) and alloc: any valid Allocator implementation\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(0, alloc);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.map.table.capacity() > 0);",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());"
              ],
              "code": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(0, alloc);",
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.map.table.capacity() > 0);",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(1, alloc);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.capacity() >= 1);",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());",
                "    assert!(std::ptr::eq(set.map.raw_allocator as *const _, &alloc as *const _));",
                "    assert!(set.map.table.is_empty());",
                "    assert_eq!(set.map.table.capacity(), 1);"
              ],
              "code": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(1, alloc);",
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.capacity() >= 1);",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::default());",
                "    assert!(std::ptr::eq(set.map.raw_allocator as *const _, &alloc as *const _));",
                "    assert!(set.map.table.is_empty());",
                "    assert_eq!(set.map.table.capacity(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(10, alloc);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.map.hash_builder.is_default());",
                "    assert!(set.map.table.capacity() >= 10);",
                "    assert!(set.map.capacity() >= 10);",
                "    assert!(set.map.is_empty());",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());",
                "    assert!(set.capacity() >= 10);",
                "    assert!(set.map.table.is_empty());",
                "    assert!(set.map.table.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "    let set: HashSet<i32, DefaultHashBuilder, DummyAllocator> = HashSet::with_capacity_in(10, alloc);",
                "    assert_eq!(set.map.table.len(), 0);",
                "    assert!(set.map.hash_builder.is_default());",
                "    assert!(set.map.table.capacity() >= 10);",
                "    assert!(set.map.capacity() >= 10);",
                "    assert!(set.map.is_empty());",
                "    assert_eq!(set.map.hash_builder, DefaultHashBuilder::new());",
                "    assert!(set.capacity() >= 10);",
                "    assert!(set.map.table.is_empty());",
                "    assert!(set.map.table.capacity() >= 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "",
                "    // Below the lower boundary",
                "    let set_below = HashSet::with_capacity_in(usize::MAX, alloc);",
                "    ",
                "    // At the upper boundary",
                "    let set_at_upper = HashSet::with_capacity_in(10, alloc);",
                "}"
              ],
              "oracle": [
                "    let set_below = HashSet::with_capacity_in(usize::MAX, alloc); assert!(set_below.map.table.capacity() >= usize::MAX);",
                "    let set_at_upper = HashSet::with_capacity_in(10, alloc); assert!(set_at_upper.map.table.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    struct DummyAllocator;",
                "",
                "    impl Allocator for DummyAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::dangling())",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    let alloc = DummyAllocator;",
                "",
                "    // Below the lower boundary",
                "    let set_below = HashSet::with_capacity_in(usize::MAX, alloc);",
                "    ",
                "    // At the upper boundary",
                "    let set_at_upper = HashSet::with_capacity_in(10, alloc);",
                "    let set_below = HashSet::with_capacity_in(usize::MAX, alloc); assert!(set_below.map.table.capacity() >= usize::MAX);",
                "    let set_at_upper = HashSet::with_capacity_in(10, alloc); assert!(set_at_upper.map.table.capacity() >= 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}