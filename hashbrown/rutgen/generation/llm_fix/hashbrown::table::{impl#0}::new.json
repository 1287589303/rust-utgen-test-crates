{
  "name": "hashbrown::table::{impl#0}::new",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:68:5:72:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            raw: RawTable::new(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: Test with no input (zero capacity) for creating an empty HashTable, expect returned HashTable to have length 0 and capacity 0.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::new();",
                "    let length = table.raw.table.len(); // Length should be 0",
                "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.raw.table.len(), 0);",
                "    assert_eq!(table.raw.table.capacity(), 0);"
              ],
              "code": [
                "{",
                "   let table: HashTable<&str> = HashTable::new();",
                "   let length = table.len(); // Length should be 0",
                "   let capacity = table.capacity(); // Capacity should be 0",
                "   assert_eq!(length, 0);",
                "   assert_eq!(capacity, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(0);",
                "    let length = table.raw.table.len(); // Length should be 0",
                "    let capacity = table.raw.table.capacity(); // Capacity should be 0",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "    assert_eq!(table.raw.table, RawTableInner::NEW);",
                "    assert!(table.raw.alloc == Global);",
                "    assert!(std::mem::size_of::<HashTable<&str>>() > 0);"
              ],
              "code": [
                "{",
                "    let table: HashTable<&str> = HashTable::with_capacity(0);",
                "   let length = table.len(); // Length should be 0",
                "   let capacity = table.capacity(); // Capacity should be 0",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "   assert_eq!(table.raw.table.bucket_mask, 0);",
                "    assert!(table.raw.alloc == Global);",
                "    assert!(std::mem::size_of::<HashTable<&str>>() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}