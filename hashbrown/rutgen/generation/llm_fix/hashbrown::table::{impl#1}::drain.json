{
  "name": "hashbrown::table::{impl#1}::drain",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:903:5:907:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Drain {\n            inner: self.raw.drain(),\n        }\n"
      ],
      "input_infer": "initial population of HashTable with elements 0 to 3 and then call drain method, ensuring the table is not empty before and empty after draining\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::DefaultHashBuilder;",
            "use std::hash::BuildHasher;",
            "use hashbrown::HashTable;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    use std::hash::BuildHasher;",
                "",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 0..=3 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    let drained: Vec<_> = table.drain().collect();",
                "    ",
                "    assert!(!table.is_empty());",
                "    assert_eq!(drained.len(), 4);",
                "    assert!(table.is_empty());",
                "}"
              ],
              "oracle": [
                "    assert!(!table.is_empty());",
                "    assert_eq!(drained.len(), 4);",
                "    assert!(table.is_empty());",
                "    let drained_inner = table.raw.drain();",
                "    assert_eq!(drained_inner.inner, self.raw.drain());"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    use std::hash::BuildHasher;",
                "",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 0..=3 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    let drained: Vec<_> = table.drain().collect();",
                "    ",
                "    assert!(!table.is_empty());",
                "    assert_eq!(drained.len(), 4);",
                "    assert!(table.is_empty());",
                "    assert!(!table.is_empty());",
                "    assert_eq!(drained.len(), 4);",
                "    assert!(table.is_empty());",
                "    let drained_inner = table.raw.drain();",
                "    assert_eq!(drained_inner.inner, self.raw.drain());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashTable;",
                "",
                "    let mut table: HashTable<i32> = HashTable::new();",
                "    let drained: Vec<_> = table.drain().collect();",
                "    ",
                "    assert_eq!(drained.len(), 0);",
                "    assert!(table.is_empty());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drained.len(), 0);",
                "    assert!(table.is_empty());",
                "    let drained: Vec<_> = table.drain().collect();",
                "    let drain_result = table.drain();",
                "    assert!(drain_result.inner.is_empty());"
              ],
              "code": [
                "{",
                "    use hashbrown::HashTable;",
                "",
                "    let mut table: HashTable<i32> = HashTable::new();",
                "    let drained: Vec<_> = table.drain().collect();",
                "    ",
                "    assert_eq!(drained.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert_eq!(drained.len(), 0);",
                "    assert!(table.is_empty());",
                "    let drained: Vec<_> = table.drain().collect();",
                "    let drain_result = table.drain();",
                "    assert!(drain_result.inner.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}