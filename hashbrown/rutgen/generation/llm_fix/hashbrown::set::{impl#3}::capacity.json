{
  "name": "hashbrown::set::{impl#3}::capacity",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:269:5:271:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: valid capacities, including edge case of 0, positive integers up to the maximum size of the data type supported by the underlying allocator, e.g., [0, MAX_CAPACITY] where MAX_CAPACITY is determined by the allocator's limits\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(0);",
                "    let _ = set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.capacity(), 0);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(1);",
                "    assert!(set.capacity() >= 1);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(50);",
                "    assert!(set.capacity() >= 50);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set.capacity() >= 100);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(256);",
                "    assert!(set.capacity() >= 256);"
              ],
              "code": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(0);",
                "    let _ = set.capacity();",
                "    assert_eq!(set.capacity(), 0);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(1);",
                "    assert!(set.capacity() >= 1);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(50);",
                "    assert!(set.capacity() >= 50);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set.capacity() >= 100);",
                "    ",
                "    let set: HashSet<i32> = HashSet::with_capacity(256);",
                "    assert!(set.capacity() >= 256);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(1);",
                "    let _ = set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.capacity(), 1);",
                "    let set_large: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set_large.capacity() >= 100);",
                "    let set_empty: HashSet<i32> = HashSet::with_capacity(0);",
                "    assert_eq!(set_empty.capacity(), 0);",
                "    let set_default: HashSet<i32> = HashSet::with_capacity(10);",
                "    assert!(set_default.capacity() >= 10 && set_default.capacity() <= 10);"
              ],
              "code": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(1);",
                "    let _ = set.capacity();",
                "    assert_eq!(set.capacity(), 1);",
                "    let set_large: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set_large.capacity() >= 100);",
                "    let set_empty: HashSet<i32> = HashSet::with_capacity(0);",
                "    assert_eq!(set_empty.capacity(), 0);",
                "    let set_default: HashSet<i32> = HashSet::with_capacity(10);",
                "    assert!(set_default.capacity() >= 10 && set_default.capacity() <= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(1_000);",
                "    let _ = set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.capacity(), 1_000);",
                "    let set: HashSet<i32> = HashSet::with_capacity(0);",
                "    assert_eq!(set.capacity(), 0);",
                "    let set: HashSet<i32> = HashSet::with_capacity(10);",
                "    assert!(set.capacity() >= 10);",
                "    let set: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set.capacity() >= 100);",
                "    let set: HashSet<i32> = HashSet::with_capacity(10_000);",
                "    assert!(set.capacity() >= 10_000);"
              ],
              "code": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(1_000);",
                "    let _ = set.capacity();",
                "    assert_eq!(set.capacity(), 1_000);",
                "    let set: HashSet<i32> = HashSet::with_capacity(0);",
                "    assert_eq!(set.capacity(), 0);",
                "    let set: HashSet<i32> = HashSet::with_capacity(10);",
                "    assert!(set.capacity() >= 10);",
                "    let set: HashSet<i32> = HashSet::with_capacity(100);",
                "    assert!(set.capacity() >= 100);",
                "    let set: HashSet<i32> = HashSet::with_capacity(10_000);",
                "    assert!(set.capacity() >= 10_000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(usize::MAX);",
                "    let _ = set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.capacity(), usize::MAX);"
              ],
              "code": [
                "{",
                "    let set: HashSet<i32> = HashSet::with_capacity(usize::MAX);",
                "    let _ = set.capacity();",
                "    assert_eq!(set.capacity(), usize::MAX);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}