{
  "name": "hashbrown::map::{impl#3}::with_capacity_and_hasher",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:499:5:504:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            hash_builder,\n            table: RawTable::with_capacity(capacity),\n        }\n"
      ],
      "input_infer": "capacity: 0 to positive integer limits (inclusive) and hash_builder: any valid implementation of BuildHasher\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::DefaultHashBuilder;",
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(0, s);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() == 0);",
                "    assert!(map.hash_builder == s);",
                "    assert!(map.table.is_empty());"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(0, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() == 0);",
                "    assert!(map.hash_builder == s);",
                "    assert!(map.table.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(1, s);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.table.capacity(), 1);",
                "    assert_eq!(map.hash_builder, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 1);"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(1, s);",
                "    assert_eq!(map.table.capacity(), 1);",
                "    assert_eq!(map.hash_builder, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(100, s);",
                "}"
              ],
              "oracle": [
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(10, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    let map_zero_capacity = HashMap::with_capacity_and_hasher(0, s);",
                "    assert_eq!(map_zero_capacity.len(), 0);",
                "    assert!(map_zero_capacity.capacity() == 0);",
                "    let s_hash_dos = RandomState::new();",
                "    let map_hash_dos = HashMap::with_capacity_and_hasher(50, s_hash_dos);",
                "    assert_eq!(map_hash_dos.len(), 0);",
                "    assert!(map_hash_dos.capacity() >= 50);"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(100, s);",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(10, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    let map_zero_capacity = HashMap::with_capacity_and_hasher(0, s);",
                "    assert_eq!(map_zero_capacity.len(), 0);",
                "    assert!(map_zero_capacity.capacity() == 0);",
                "    let s_hash_dos = RandomState::new();",
                "    let map_hash_dos = HashMap::with_capacity_and_hasher(50, s_hash_dos);",
                "    assert_eq!(map_hash_dos.len(), 0);",
                "    assert!(map_hash_dos.capacity() >= 50);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(usize::MAX, s);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= usize::MAX);",
                "    assert_eq!(map.hash_builder, s);",
                "    assert!(map.table.capacity() >= usize::MAX);"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashMap, DefaultHashBuilder};",
                "",
                "    let s = DefaultHashBuilder::default();",
                "    let map = HashMap::with_capacity_and_hasher(usize::MAX, s);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= usize::MAX);",
                "    assert_eq!(map.hash_builder, s);",
                "    assert!(map.table.capacity() >= usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}