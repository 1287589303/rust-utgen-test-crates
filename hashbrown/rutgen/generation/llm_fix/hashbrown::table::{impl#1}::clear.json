{
  "name": "hashbrown::table::{impl#1}::clear",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:440:5:442:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "HashTable with various initial capacities (0 to N), inserting values of varying types (integers, strings), followed by a call to clear, ensuring is_empty returns true, testing both before and after clear with single and multiple inserts, and edge cases like clearing an already empty table.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    table.clear();",
                "    table.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 0);",
                "    assert!(table.iter().next().is_none());",
                "    assert!(table.get(0, |&x| x == 1).is_none());"
              ],
              "code": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    table.clear();",
                "    table.is_empty();",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 0);",
                "    assert!(table.iter().next().is_none());",
                "    assert!(table.get(0, |&x| x == 1).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64; // simple hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.clear();",
                "    table.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 1);  // Assuming initial capacity was set to 1",
                "    assert!(table.find(hasher(&1), |&v| v == 1).is_none());",
                "    assert!(table.find_mut(hasher(&1), |&mut v| v == 1).is_none());"
              ],
              "code": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64; // simple hasher",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "    table.clear();",
                "    table.is_empty();",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 1);  // Assuming initial capacity was set to 1",
                "    assert!(table.find(hasher(&1), |&v| v == 1).is_none());",
                "    assert!(table.find_mut(hasher(&1), |&mut v| v == 1).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64; // simple hasher",
                "    for i in 1..=5 {",
                "        table.insert_unique(hasher(&i), i, hasher);",
                "    }",
                "    table.clear();",
                "    table.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.iter().next().is_none());",
                "    assert!(table.iter_hash(1).next().is_none());",
                "    assert!(table.find(1, |&x| x == &1).is_none());",
                "    assert!(table.find_mut(1, |&x| x == &1).is_none());",
                "    assert!(table.get(1, |&x| x == &1).is_none());",
                "    assert!(table.get_mut(1, |&x| x == &1).is_none());"
              ],
              "code": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    let hasher = |val: &i32| *val as u64; // simple hasher",
                "    for i in 1..=5 {",
                "        table.insert_unique(hasher(&i), i, hasher);",
                "    }",
                "    table.clear();",
                "    table.is_empty();",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.iter().next().is_none());",
                "    assert!(table.iter_hash(1).next().is_none());",
                "    assert!(table.find(1, |&x| x == &1).is_none());",
                "    assert!(table.find_mut(1, |&x| x == &1).is_none());",
                "    assert!(table.get(1, |&x| x == &1).is_none());",
                "    assert!(table.get_mut(1, |&x| x == &1).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    table.clear(); // first clear on empty table",
                "    table.clear(); // second clear on already empty table",
                "    table.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert!(table.is_empty()); // verify table is still empty after first clear",
                "    assert!(table.is_empty()); // verify table is still empty after second clear"
              ],
              "code": [
                "{",
                "    let mut table: HashTable<i32> = HashTable::new_in(Global);",
                "    table.clear(); // first clear on empty table",
                "    table.clear(); // second clear on already empty table",
                "    table.is_empty();",
                "    assert!(table.is_empty()); // verify table is still empty after first clear",
                "    assert!(table.is_empty()); // verify table is still empty after second clear",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut table: HashTable<String> = HashTable::new_in(Global);",
                "    let hasher = |val: &String| {",
                "        let mut hasher = std::collections::hash_map::DefaultHasher::new();",
                "        val.hash(&mut hasher);",
                "        hasher.finish()",
                "    }; ",
                "    let values = vec![\"one\".to_string(), \"two\".to_string(), \"three\".to_string()];",
                "    for value in &values {",
                "        table.insert_unique(hasher(value), value.clone(), hasher);",
                "    }",
                "    table.clear();",
                "    table.is_empty();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.iter().count() == 0);",
                "    assert!(table.capacity() > 0);",
                "    table.clear();",
                "    assert!(table.is_empty());"
              ],
              "code": [
                "{",
                "    let mut table: HashTable<String> = HashTable::new_in(Global);",
                "    let hasher = |val: &String| {",
                "        let mut hasher = std::collections::hash_map::DefaultHasher::new();",
                "        val.hash(&mut hasher);",
                "        hasher.finish()",
                "    }; ",
                "    let values = vec![\"one\".to_string(), \"two\".to_string(), \"three\".to_string()];",
                "    for value in &values {",
                "        table.insert_unique(hasher(value), value.clone(), hasher);",
                "    }",
                "    table.clear();",
                "    table.is_empty();",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.iter().count() == 0);",
                "    assert!(table.capacity() > 0);",
                "    table.clear();",
                "    assert!(table.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}