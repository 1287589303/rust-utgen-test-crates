{
  "name": "hashbrown::raw_entry::{impl#7}::key_mut",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:951:5:953:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: unsafe { &mut self.elem.as_mut().0 }\n"
      ],
      "input_infer": "K must be a type that implements `Copy` and `Hash`, while V must be a valid type; the function requires a mutable reference to RawOccupiedEntryMut with an existing valid key in HashMap, and the allocator used should comply with the conditions of the Allocator trait.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::hash_map::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "",
                "    let mut map: HashMap<i32, u32> = HashMap::new();",
                "    map.insert(1, 10);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&1) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(core::ptr::eq(key_mut, &mut 1));",
                "    assert_eq!(*key_mut, 1);"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "",
                "    let mut map: HashMap<i32, u32> = HashMap::new();",
                "    map.insert(1, 10);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&1) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "    assert!(core::ptr::eq(key_mut, &mut 1));",
                "    assert_eq!(*key_mut, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "    ",
                "    let mut map: HashMap<String, u32> = HashMap::new();",
                "    map.insert(\"key\".to_string(), 20);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&\"key\".to_string()) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "}"
              ],
              "oracle": [
                "    let key_mut = occupied_entry.key_mut();",
                "    assert_eq!(key_mut, &mut \"key\".to_string());",
                "    assert_eq!(map.get(key_mut), Some(&20));",
                "    let original_key_strong_count = Rc::strong_count(key_mut);",
                "    *key_mut = \"new_key\".to_string();",
                "    assert_eq!(map.get(key_mut), None);",
                "    assert_eq!(map.get(&\"key\".to_string()), None);",
                "    assert_eq!(map.get(&\"new_key\".to_string()), Some(&20));",
                "    assert!(Rc::strong_count(key_mut) == original_key_strong_count);"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "    ",
                "    let mut map: HashMap<String, u32> = HashMap::new();",
                "    map.insert(\"key\".to_string(), 20);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&\"key\".to_string()) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "    let key_mut = occupied_entry.key_mut();",
                "    assert_eq!(key_mut, &mut \"key\".to_string());",
                "    assert_eq!(map.get(key_mut), Some(&20));",
                "    let original_key_strong_count = Rc::strong_count(key_mut);",
                "    *key_mut = \"new_key\".to_string();",
                "    assert_eq!(map.get(key_mut), None);",
                "    assert_eq!(map.get(&\"key\".to_string()), None);",
                "    assert_eq!(map.get(&\"new_key\".to_string()), Some(&20));",
                "    assert!(Rc::strong_count(key_mut) == original_key_strong_count);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "",
                "    let mut map: HashMap<(i32, i32), u32> = HashMap::new();",
                "    map.insert((1, 2), 30);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&(1, 2)) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(key_mut == &(1, 2));",
                "    *key_mut = (3, 4);",
                "    assert_eq!(map[&(3, 4)], 30);",
                "    assert!(map.get(&(1, 2)).is_none());",
                "    assert!(map.get(&(3, 4)).is_some());",
                "    assert!(Rc::strong_count(&(3, 4)) == 1);",
                "    assert!(Rc::strong_count(&(1, 2)) == 0);",
                "    assert!(key_mut != &(1, 2));",
                "    assert!(key_mut == &(3, 4));"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::HashMap;",
                "",
                "    let mut map: HashMap<(i32, i32), u32> = HashMap::new();",
                "    map.insert((1, 2), 30);",
                "",
                "    let mut occupied_entry = match map.raw_entry_mut().from_key(&(1, 2)) {",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "        RawEntryMut::Occupied(o) => o,",
                "    };",
                "",
                "    let key_mut = occupied_entry.key_mut();",
                "    assert!(key_mut == &(1, 2));",
                "    *key_mut = (3, 4);",
                "    assert_eq!(map[&(3, 4)], 30);",
                "    assert!(map.get(&(1, 2)).is_none());",
                "    assert!(map.get(&(3, 4)).is_some());",
                "    assert!(Rc::strong_count(&(3, 4)) == 1);",
                "    assert!(Rc::strong_count(&(1, 2)) == 0);",
                "    assert!(key_mut != &(1, 2));",
                "    assert!(key_mut == &(3, 4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}