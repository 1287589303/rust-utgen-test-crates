{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\ntrait RawTableClone {\n    unsafe fn clone_from_spec(&mut self, source: &Self);\n}\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\n#[derive(Copy, Clone)]\nstruct TableLayout {\n    size: usize,\n    ctrl_align: usize,\n}\nstruct RawTableInner {\n    bucket_mask: usize,\n    ctrl: NonNull<u8>,\n    growth_left: usize,\n    items: usize,\n}\nimpl<T, A: Allocator> RawTable<T, A> {\n    const TABLE_LAYOUT: TableLayout = TableLayout::new::<T>();\n    #[inline]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn new_in(alloc: A) -> Self {\n        Self {\n            table: RawTableInner::NEW,\n            alloc,\n            marker: PhantomData,\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    unsafe fn new_uninitialized(\n        alloc: A,\n        buckets: usize,\n        fallibility: Fallibility,\n    ) -> Result<Self, TryReserveError> {\n        debug_assert!(buckets.is_power_of_two());\n        Ok(Self {\n            table: RawTableInner::new_uninitialized(\n                &alloc,\n                Self::TABLE_LAYOUT,\n                buckets,\n                fallibility,\n            )?,\n            alloc,\n            marker: PhantomData,\n        })\n    }\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            table: RawTableInner::with_capacity(&alloc, Self::TABLE_LAYOUT, capacity),\n            alloc,\n            marker: PhantomData,\n        }\n    }\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[inline]\n    pub fn data_end(&self) -> NonNull<T> {}\n    #[inline]\n    #[cfg(feature = \"nightly\")]\n    pub unsafe fn data_start(&self) -> NonNull<T> {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n    #[inline]\n    pub unsafe fn bucket_index(&self, bucket: &Bucket<T>) -> usize {}\n    #[inline]\n    pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::needless_pass_by_value)]\n    pub unsafe fn erase(&mut self, item: Bucket<T>) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::needless_pass_by_value)]\n    pub unsafe fn remove(&mut self, item: Bucket<T>) -> (T, InsertSlot) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear_no_drop(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<(), TryReserveError> {}\n    #[cold]\n    #[inline(never)]\n    unsafe fn reserve_rehash(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n        fallibility: Fallibility,\n    ) -> Result<(), TryReserveError> {}\n    unsafe fn resize(\n        &mut self,\n        capacity: usize,\n        hasher: impl Fn(&T) -> u64,\n        fallibility: Fallibility,\n    ) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> &mut T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg(feature = \"rustc-internal-api\")]\n    pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn replace_bucket_with<F>(&mut self, bucket: Bucket<T>, f: F) -> bool\n    where\n        F: FnOnce(T) -> Option<T>,\n    {}\n    #[inline]\n    pub fn find_or_find_insert_slot(\n        &mut self,\n        hash: u64,\n        mut eq: impl FnMut(&T) -> bool,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<Bucket<T>, InsertSlot> {}\n    #[inline]\n    pub unsafe fn insert_in_slot(\n        &mut self,\n        hash: u64,\n        slot: InsertSlot,\n        value: T,\n    ) -> Bucket<T> {}\n    #[inline]\n    pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {}\n    #[inline]\n    pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {}\n    pub fn get_many_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    pub unsafe fn get_many_unchecked_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    unsafe fn get_many_mut_pointers<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        mut eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<NonNull<T>>; N] {\n        array::from_fn(|i| {\n            self.find(hashes[i], |k| eq(i, k)).map(|cur| cur.as_non_null())\n        })\n    }\n    #[inline]\n    pub fn capacity(&self) -> usize {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn buckets(&self) -> usize {}\n    #[inline]\n    pub unsafe fn is_bucket_full(&self, index: usize) -> bool {}\n    #[inline]\n    pub unsafe fn iter(&self) -> RawIter<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn iter_hash(&self, hash: u64) -> RawIterHash<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> RawDrain<'_, T, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn drain_iter_from(&mut self, iter: RawIter<T>) -> RawDrain<'_, T, A> {}\n    pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout, A)> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1237 unsafe fn get_many_mut_pointers<const N: usize>(\n1238     &mut self,\n1239     hashes: [u64; N],\n1240     mut eq: impl FnMut(usize, &T) -> bool,\n1241 ) -> [Option<NonNull<T>>; N] {\n1242     array::from_fn(|i| {\n1243         self.find(hashes[i], |k| eq(i, k))\n1244             .map(|cur| cur.as_non_null())\n1245     })\n1246 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}