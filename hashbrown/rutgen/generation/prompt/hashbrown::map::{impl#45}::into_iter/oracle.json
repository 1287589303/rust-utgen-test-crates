{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct IntoIter<T, A = Global>\nwhere\n    A: Allocator,\n{\n    inner: RawIntoIter<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct RawIntoIter<T, A: Allocator = Global> {\n    iter: RawIter<T>,\n    allocation: Option<(NonNull<u8>, Layout, A)>,\n    marker: PhantomData<T>,\n}\npub struct IntoIter<K, V, A: Allocator = Global> {\n    inner: RawIntoIter<(K, V), A>,\n}\npub struct IntoIter<K, A: Allocator = Global> {\n    iter: map::IntoIter<K, (), A>,\n}\nimpl<K, V, S, A: Allocator> IntoIterator for HashMap<K, V, S, A> {\n    type Item = (K, V);\n    type IntoIter = IntoIter<K, V, A>;\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn into_iter(self) -> IntoIter<K, V, A> {\n        IntoIter {\n            inner: self.table.into_iter(),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a consuming iterator, that is, one that moves each key-value\n/// pair out of the map in arbitrary order. The map cannot be used after\n/// calling this.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n///\n/// // Not possible with .iter()\n/// let mut vec: Vec<(&str, i32)> = map.into_iter().collect();\n/// // The `IntoIter` iterator produces items in arbitrary order, so\n/// // the items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n/// ```\n3151 fn into_iter(self) -> IntoIter<K, V, A> {\n3152     IntoIter {\n3153         inner: self.table.into_iter(),\n3154     }\n3155 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}