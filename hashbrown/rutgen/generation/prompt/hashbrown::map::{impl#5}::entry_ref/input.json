{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct VacantEntryRef<'a, 'b, K, Q: ?Sized, V, S, A: Allocator = Global> {\n    hash: u64,\n    key: &'b Q,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub enum EntryRef<'a, 'b, K, Q: ?Sized, V, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Vacant(_) => unreachable!(),\n    ///     EntryRef::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<String, i32> = HashMap::new();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Occupied(_) => unreachable!(),\n    ///     EntryRef::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntryRef<'a, 'b, K, Q, V, S, A>),\n}\nimpl<K, V, S, A> HashMap<K, V, S, A>\nwhere\n    K: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry_ref<'a, 'b, Q>(\n        &'a mut self,\n        key: &'b Q,\n    ) -> EntryRef<'a, 'b, K, Q, V, S, A>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {\n        let hash = make_hash::<Q, S>(&self.hash_builder, key);\n        if let Some(elem) = self.table.find(hash, equivalent_key(key)) {\n            EntryRef::Occupied(OccupiedEntry {\n                hash,\n                elem,\n                table: self,\n            })\n        } else {\n            EntryRef::Vacant(VacantEntryRef {\n                hash,\n                key,\n                table: self,\n            })\n        }\n    }\n    #[inline]\n    pub fn get<Q>(&self, k: &Q) -> Option<&V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, k: &Q) -> Option<(&K, &V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    fn get_inner<Q>(&self, k: &Q) -> Option<&(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value_mut<Q>(&mut self, k: &Q) -> Option<(&K, &mut V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains_key<Q>(&self, k: &Q) -> bool\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut<Q>(&mut self, k: &Q) -> Option<&mut V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    fn get_inner_mut<Q>(&mut self, k: &Q) -> Option<&mut (K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_key_value_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_key_value_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn get_many_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    unsafe fn get_many_unchecked_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn build_hashes_inner<Q, const N: usize>(&self, ks: [&Q; N]) -> [u64; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, k: K, v: V) -> Option<V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) fn find_or_find_insert_slot<Q>(\n        &mut self,\n        hash: u64,\n        key: &Q,\n    ) -> Result<Bucket<(K, V)>, crate::raw::InsertSlot>\n    where\n        Q: Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, k: K, v: V) -> (&K, &mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_insert(\n        &mut self,\n        key: K,\n        value: V,\n    ) -> Result<&mut V, OccupiedError<'_, K, V, S, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, k: &Q) -> Option<V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry<Q>(&mut self, k: &Q) -> Option<(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_\nwhere\n    Q: Equivalent<K> + ?Sized,\n{\n    move |x| k.equivalent(&x.0)\n}\n#[cfg(feature = \"nightly\")]\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hash<Q, S>(hash_builder: &S, val: &Q) -> u64\nwhere\n    Q: Hash + ?Sized,\n    S: BuildHasher,\n{\n    hash_builder.hash_one(val)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets the given key's corresponding entry by reference in the map for in-place manipulation.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut words: HashMap<String, usize> = HashMap::new();\n/// let source = [\"poneyland\", \"horseyland\", \"poneyland\", \"poneyland\"];\n/// for (i, &s) in source.iter().enumerate() {\n///     let counter = words.entry_ref(s).or_insert(0);\n///     *counter += 1;\n/// }\n///\n/// assert_eq!(words[\"poneyland\"], 3);\n/// assert_eq!(words[\"horseyland\"], 1);\n/// ```\n1264 pub fn entry_ref<'a, 'b, Q>(&'a mut self, key: &'b Q) -> EntryRef<'a, 'b, K, Q, V, S, A>\n1265 where\n1266     Q: Hash + Equivalent<K> + ?Sized,\n1267 {\n1268     let hash = make_hash::<Q, S>(&self.hash_builder, key);\n1269     if let Some(elem) = self.table.find(hash, equivalent_key(key)) {\n1270         EntryRef::Occupied(OccupiedEntry {\n1271             hash,\n1272             elem,\n1273             table: self,\n1274         })\n1275     } else {\n1276         EntryRef::Vacant(VacantEntryRef {\n1277             hash,\n1278             key,\n1279             table: self,\n1280         })\n1281     }\n1282 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}