{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<K, V, S, A> HashMap<K, V, S, A>\nwhere\n    K: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry_ref<'a, 'b, Q>(\n        &'a mut self,\n        key: &'b Q,\n    ) -> EntryRef<'a, 'b, K, Q, V, S, A>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get<Q>(&self, k: &Q) -> Option<&V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, k: &Q) -> Option<(&K, &V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    fn get_inner<Q>(&self, k: &Q) -> Option<&(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value_mut<Q>(&mut self, k: &Q) -> Option<(&K, &mut V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains_key<Q>(&self, k: &Q) -> bool\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut<Q>(&mut self, k: &Q) -> Option<&mut V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {\n        match self.get_inner_mut(k) {\n            Some(&mut (_, ref mut v)) => Some(v),\n            None => None,\n        }\n    }\n    #[inline]\n    fn get_inner_mut<Q>(&mut self, k: &Q) -> Option<&mut (K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_key_value_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_key_value_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn get_many_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    unsafe fn get_many_unchecked_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn build_hashes_inner<Q, const N: usize>(&self, ks: [&Q; N]) -> [u64; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, k: K, v: V) -> Option<V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) fn find_or_find_insert_slot<Q>(\n        &mut self,\n        hash: u64,\n        key: &Q,\n    ) -> Result<Bucket<(K, V)>, crate::raw::InsertSlot>\n    where\n        Q: Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, k: K, v: V) -> (&K, &mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_insert(\n        &mut self,\n        key: K,\n        value: V,\n    ) -> Result<&mut V, OccupiedError<'_, K, V, S, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, k: &Q) -> Option<V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry<Q>(&mut self, k: &Q) -> Option<(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a mutable reference to the value corresponding to the key.\n///\n/// The key may be any borrowed form of the map's key type, but\n/// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n/// the key type.\n///\n/// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n/// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(1, \"a\");\n/// if let Some(x) = map.get_mut(&1) {\n///     *x = \"b\";\n/// }\n/// assert_eq!(map[&1], \"b\");\n///\n/// assert_eq!(map.get_mut(&2), None);\n/// ```\n1445 pub fn get_mut<Q>(&mut self, k: &Q) -> Option<&mut V>\n1446 where\n1447     Q: Hash + Equivalent<K> + ?Sized,\n1448 {\n1449     // Avoid `Option::map` because it bloats LLVM IR.\n1450     match self.get_inner_mut(k) {\n1451         Some(&mut (_, ref mut v)) => Some(v),\n1452         None => None,\n1453     }\n1454 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}