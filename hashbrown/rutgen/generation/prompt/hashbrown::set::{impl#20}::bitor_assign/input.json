{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\nimpl<T, S, A> BitOrAssign<&HashSet<T, S, A>> for HashSet<T, S, A>\nwhere\n    T: Eq + Hash + Clone,\n    S: BuildHasher,\n    A: Allocator,\n{\n    fn bitor_assign(&mut self, rhs: &HashSet<T, S, A>) {\n        for item in rhs {\n            if !self.contains(item) {\n                self.insert(item.clone());\n            }\n        }\n    }\n}\nimpl<T, S, A> HashSet<T, S, A>\nwhere\n    T: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn difference<'a>(&'a self, other: &'a Self) -> Difference<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn symmetric_difference<'a>(\n        &'a self,\n        other: &'a Self,\n    ) -> SymmetricDifference<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn intersection<'a>(&'a self, other: &'a Self) -> Intersection<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn union<'a>(&'a self, other: &'a Self) -> Union<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains<Q>(&self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get<Q>(&self, value: &Q) -> Option<&T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert_with<Q, F>(&mut self, value: &Q, f: F) -> &T\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n        F: FnOnce(&Q) -> T,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, value: T) -> Entry<'_, T, S, A> {}\n    pub fn is_disjoint(&self, other: &Self) -> bool {}\n    pub fn is_subset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_superset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: T) -> bool {\n        self.map.insert(value, ()).is_none()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace(&mut self, value: T) -> Option<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Modifies this set to contain the union of `self` and `rhs`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n///\n/// a |= &b;\n///\n/// let mut i = 0;\n/// let expected = [1, 2, 3, 4, 5];\n/// for x in &a {\n///     assert!(expected.contains(x));\n///     i += 1;\n/// }\n/// assert_eq!(i, expected.len());\n/// ```\n1520 fn bitor_assign(&mut self, rhs: &HashSet<T, S, A>) {\n1521     for item in rhs {\n1522         if !self.contains(item) {\n1523             self.insert(item.clone());\n1524         }\n1525     }\n1526 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}