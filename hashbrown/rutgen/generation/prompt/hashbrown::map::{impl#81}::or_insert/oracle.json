{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntryRef<'a, 'b, K, Q: ?Sized, V, S, A: Allocator = Global> {\n    hash: u64,\n    key: &'b Q,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub enum EntryRef<'a, 'b, K, Q: ?Sized, V, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Vacant(_) => unreachable!(),\n    ///     EntryRef::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<String, i32> = HashMap::new();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Occupied(_) => unreachable!(),\n    ///     EntryRef::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntryRef<'a, 'b, K, Q, V, S, A>),\n}\nimpl<'a, 'b, K, Q: ?Sized, V, S, A: Allocator> EntryRef<'a, 'b, K, Q, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self, default: V) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {\n        match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(default),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with_key<F: FnOnce(&Q) -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash + Borrow<Q> + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &Q\n    where\n        K: Borrow<Q>,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut V),\n    {\n        match self {\n            EntryRef::Occupied(mut entry) => {\n                f(entry.get_mut());\n                EntryRef::Occupied(entry)\n            }\n            EntryRef::Vacant(entry) => EntryRef::Vacant(entry),\n        }\n    }\n}\nimpl<'a, K, V, S, A: Allocator> OccupiedEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {\n        unsafe { &mut self.elem.as_mut().1 }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {}\n}\nimpl<'a, 'b, K, Q: ?Sized, V, S, A: Allocator> VacantEntryRef<'a, 'b, K, Q, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &'b Q {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {\n        let table = &mut self.table.table;\n        let entry = table\n            .insert_entry(\n                self.hash,\n                (self.key.into(), value),\n                make_hasher::<_, V, S>(&self.table.hash_builder),\n            );\n        &mut entry.1\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Ensures a value is in the entry by inserting the default if empty, and returns\n/// a mutable reference to the value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<String, u32> = HashMap::new();\n///\n/// // nonexistent key\n/// map.entry_ref(\"poneyland\").or_insert(3);\n/// assert_eq!(map[\"poneyland\"], 3);\n///\n/// // existing key\n/// *map.entry_ref(\"poneyland\").or_insert(10) *= 2;\n/// assert_eq!(map[\"poneyland\"], 6);\n/// ```\n4165 pub fn or_insert(self, default: V) -> &'a mut V\n4166 where\n4167     K: Hash + From<&'b Q>,\n4168     S: BuildHasher,\n4169 {\n4170     match self {\n4171         EntryRef::Occupied(entry) => entry.into_mut(),\n4172         EntryRef::Vacant(entry) => entry.insert(default),\n4173     }\n4174 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}