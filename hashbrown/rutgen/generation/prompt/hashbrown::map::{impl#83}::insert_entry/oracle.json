{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct VacantEntryRef<'a, 'b, K, Q: ?Sized, V, S, A: Allocator = Global> {\n    hash: u64,\n    key: &'b Q,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\nimpl<'a, 'b, K, Q: ?Sized, V, S, A: Allocator> VacantEntryRef<'a, 'b, K, Q, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &'b Q {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {\n        let elem = self\n            .table\n            .table\n            .insert(\n                self.hash,\n                (self.key.into(), value),\n                make_hasher::<_, V, S>(&self.table.hash_builder),\n            );\n        OccupiedEntry {\n            hash: self.hash,\n            elem,\n            table: self.table,\n        }\n    }\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hasher<Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_\nwhere\n    Q: Hash,\n    S: BuildHasher,\n{\n    move |val| make_hash::<Q, S>(hash_builder, &val.0)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry with the [`VacantEntryRef`]'s key,\n/// and returns an [`OccupiedEntry`].\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::EntryRef;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n///\n/// if let EntryRef::Vacant(v) = map.entry_ref(\"poneyland\") {\n///     let o = v.insert_entry(37);\n///     assert_eq!(o.get(), &37);\n/// }\n/// ```\n4400 pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n4401 where\n4402     K: Hash + From<&'b Q>,\n4403     S: BuildHasher,\n4404 {\n4405     let elem = self.table.table.insert(\n4406         self.hash,\n4407         (self.key.into(), value),\n4408         make_hasher::<_, V, S>(&self.table.hash_builder),\n4409     );\n4410     OccupiedEntry {\n4411         hash: self.hash,\n4412         elem,\n4413         table: self.table,\n4414     }\n4415 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}