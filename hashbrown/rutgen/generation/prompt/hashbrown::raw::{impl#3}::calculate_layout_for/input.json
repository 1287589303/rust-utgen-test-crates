{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\n#[derive(Copy, Clone)]\nstruct TableLayout {\n    size: usize,\n    ctrl_align: usize,\n}\nimpl TableLayout {\n    #[inline]\n    const fn new<T>() -> Self {\n        let layout = Layout::new::<T>();\n        Self {\n            size: layout.size(),\n            ctrl_align: if layout.align() > Group::WIDTH {\n                layout.align()\n            } else {\n                Group::WIDTH\n            },\n        }\n    }\n    #[inline]\n    fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {\n        debug_assert!(buckets.is_power_of_two());\n        let TableLayout { size, ctrl_align } = self;\n        let ctrl_offset = size.checked_mul(buckets)?.checked_add(ctrl_align - 1)?\n            & !(ctrl_align - 1);\n        let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;\n        if len > isize::MAX as usize - (ctrl_align - 1) {\n            return None;\n        }\n        Some((\n            unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },\n            ctrl_offset,\n        ))\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n164 fn calculate_layout_for(self, buckets: usize) -> Option<(Layout, usize)> {\n165     debug_assert!(buckets.is_power_of_two());\n166 \n167     let TableLayout { size, ctrl_align } = self;\n168     // Manual layout calculation since Layout methods are not yet stable.\n169     let ctrl_offset =\n170         size.checked_mul(buckets)?.checked_add(ctrl_align - 1)? & !(ctrl_align - 1);\n171     let len = ctrl_offset.checked_add(buckets + Group::WIDTH)?;\n172 \n173     // We need an additional check to ensure that the allocation doesn't\n174     // exceed `isize::MAX` (https://github.com/rust-lang/rust/pull/95295).\n175     if len > isize::MAX as usize - (ctrl_align - 1) {\n176         return None;\n177     }\n178 \n179     Some((\n180         unsafe { Layout::from_size_align_unchecked(len, ctrl_align) },\n181         ctrl_offset,\n182     ))\n183 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}