{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\nstruct RawTableInner {\n    bucket_mask: usize,\n    ctrl: NonNull<u8>,\n    growth_left: usize,\n    items: usize,\n}\n#[derive(Copy, Clone, PartialEq, Eq)]\n#[repr(transparent)]\npub(crate) struct Tag(pub(super) u8);\nimpl RawTableInner {\n    const NEW: Self = RawTableInner::new();\n    #[inline]\n    const fn new() -> Self {\n        Self {\n            ctrl: unsafe {\n                NonNull::new_unchecked(Group::static_empty().as_ptr().cast_mut().cast())\n            },\n            bucket_mask: 0,\n            items: 0,\n            growth_left: 0,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a new empty hash table without allocating any memory.\n///\n/// In effect this returns a table with exactly 1 bucket. However we can\n/// leave the data pointer dangling since that bucket is never accessed\n/// due to our load factor forcing us to always have at least 1 free bucket.\n1403 const fn new() -> Self {\n1404     Self {\n1405         // Be careful to cast the entire slice to a raw pointer.\n1406         ctrl: unsafe {\n1407             NonNull::new_unchecked(Group::static_empty().as_ptr().cast_mut().cast())\n1408         },\n1409         bucket_mask: 0,\n1410         items: 0,\n1411         growth_left: 0,\n1412     }\n1413 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}