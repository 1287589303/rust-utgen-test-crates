{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawOccupiedEntryMut<'a, K, V, S, A: Allocator = Global> {\n    elem: Bucket<(K, V)>,\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub enum RawEntryMut<'a, K, V, S, A: Allocator = Global> {\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.raw_entry_mut().from_key(&\"a\") {\n    ///     RawEntryMut::Vacant(_) => unreachable!(),\n    ///     RawEntryMut::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(RawOccupiedEntryMut<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.raw_entry_mut().from_key(\"a\") {\n    ///     RawEntryMut::Occupied(_) => unreachable!(),\n    ///     RawEntryMut::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(RawVacantEntryMut<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> RawOccupiedEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key_mut(&mut self) -> &mut K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key(self) -> &'a mut K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_key_value(&self) -> (&K, &V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_key(&mut self, key: K) -> K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> RawEntryMut<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {\n        unsafe {\n            let still_occupied = self\n                .table\n                .replace_bucket_with(\n                    self.elem.clone(),\n                    |(key, value)| { f(&key, value).map(|new_value| (key, new_value)) },\n                );\n            if still_occupied {\n                RawEntryMut::Occupied(self)\n            } else {\n                RawEntryMut::Vacant(RawVacantEntryMut {\n                    table: self.table,\n                    hash_builder: self.hash_builder,\n                })\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Provides shared access to the key and owned access to the value of\n/// the entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n///\n/// let raw_entry = match map.raw_entry_mut().from_key(&\"a\") {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"a\");\n///         assert_eq!(v, 100);\n///         Some(v + 900)\n///     }),\n/// };\n/// let raw_entry = match raw_entry {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"a\");\n///         assert_eq!(v, 1000);\n///         None\n///     }),\n/// };\n/// match raw_entry {\n///     RawEntryMut::Vacant(_) => { },\n///     RawEntryMut::Occupied(_) => panic!(),\n/// };\n/// assert_eq!(map.get(&\"a\"), None);\n/// ```\n1280 pub fn replace_entry_with<F>(self, f: F) -> RawEntryMut<'a, K, V, S, A>\n1281 where\n1282     F: FnOnce(&K, V) -> Option<V>,\n1283 {\n1284     unsafe {\n1285         let still_occupied = self\n1286             .table\n1287             .replace_bucket_with(self.elem.clone(), |(key, value)| {\n1288                 f(&key, value).map(|new_value| (key, new_value))\n1289             });\n1290 \n1291         if still_occupied {\n1292             RawEntryMut::Occupied(self)\n1293         } else {\n1294             RawEntryMut::Vacant(RawVacantEntryMut {\n1295                 table: self.table,\n1296                 hash_builder: self.hash_builder,\n1297             })\n1298         }\n1299     }\n1300 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}