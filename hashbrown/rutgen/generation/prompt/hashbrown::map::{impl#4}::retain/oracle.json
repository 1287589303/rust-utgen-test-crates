{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct RawIter<T> {\n    pub(crate) iter: RawIterRange<T>,\n    items: usize,\n}\nimpl<K, V, S, A: Allocator> HashMap<K, V, S, A> {\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn with_hasher_in(hash_builder: S, alloc: A) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::new_in(alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn with_capacity_and_hasher_in(\n        capacity: usize,\n        hash_builder: S,\n        alloc: A,\n    ) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn hasher(&self) -> &S {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values(&self) -> Values<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    #[cfg(test)]\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn raw_capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, K, V, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {\n        unsafe {\n            for item in self.table.iter() {\n                let &mut (ref key, ref mut value) = item.as_mut();\n                if !f(key, value) {\n                    self.table.erase(item);\n                }\n            }\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn into_keys(self) -> IntoKeys<K, V, A> {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues<K, V, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Retains only the elements specified by the predicate. Keeps the\n/// allocated memory for reuse.\n///\n/// In other words, remove all pairs `(k, v)` such that `f(&k, &mut v)` returns `false`.\n/// The elements are visited in unsorted (and unspecified) order.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<i32, i32> = (0..8).map(|x|(x, x*10)).collect();\n/// assert_eq!(map.len(), 8);\n///\n/// map.retain(|&k, _| k % 2 == 0);\n///\n/// // We can see, that the number of elements inside map is changed.\n/// assert_eq!(map.len(), 4);\n///\n/// let mut vec: Vec<(i32, i32)> = map.iter().map(|(&k, &v)| (k, v)).collect();\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(0, 0), (2, 20), (4, 40), (6, 60)]);\n/// ```\n917 pub fn retain<F>(&mut self, mut f: F)\n918 where\n919     F: FnMut(&K, &mut V) -> bool,\n920 {\n921     // Here we only use `iter` as a temporary, preventing use-after-free\n922     unsafe {\n923         for item in self.table.iter() {\n924             let &mut (ref key, ref mut value) = item.as_mut();\n925             if !f(key, value) {\n926                 self.table.erase(item);\n927             }\n928         }\n929     }\n930 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}