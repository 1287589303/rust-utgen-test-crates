{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawEntryBuilderMut<'a, K, V, S, A: Allocator = Global> {\n    map: &'a mut HashMap<K, V, S, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<K, V, S, A: Allocator> HashMap<K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<'_, K, V, S, A> {\n        RawEntryBuilderMut { map: self }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn raw_entry(&self) -> RawEntryBuilder<'_, K, V, S, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a raw entry builder for the `HashMap`.\n///\n/// Raw entries provide the lowest level of control for searching and\n/// manipulating a map. They must be manually initialized with a hash and\n/// then manually searched. After this, insertions into a vacant entry\n/// still require an owned key to be provided.\n///\n/// Raw entries are useful for such exotic situations as:\n///\n/// * Hash memoization\n/// * Deferring the creation of an owned key until it is known to be required\n/// * Using a search key that doesn't work with the Borrow trait\n/// * Using custom comparison logic without newtype wrappers\n///\n/// Because raw entries provide much more low-level control, it's much easier\n/// to put the `HashMap` into an inconsistent state which, while memory-safe,\n/// will cause the map to produce seemingly random results. Higher-level and\n/// more foolproof APIs like `entry` should be preferred when possible.\n///\n/// In particular, the hash used to initialized the raw entry must still be\n/// consistent with the hash of the key that is ultimately stored in the entry.\n/// This is because implementations of `HashMap` may need to recompute hashes\n/// when resizing, at which point only the keys are available.\n///\n/// Raw entries give mutable access to the keys. This must not be used\n/// to modify how the key would compare or hash, as the map will not re-evaluate\n/// where the key should go, meaning the keys may become \"lost\" if their\n/// location does not reflect their state. For instance, if you change a key\n/// so that the map now contains keys which compare equal, search may start\n/// acting erratically, with two keys randomly masking each other. Implementations\n/// are free to assume this doesn't happen (within the limits of memory-safety).\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// let mut map = HashMap::new();\n/// map.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// // Existing key (insert and update)\n/// match map.raw_entry_mut().from_key(&\"a\") {\n///     RawEntryMut::Vacant(_) => unreachable!(),\n///     RawEntryMut::Occupied(mut view) => {\n///         assert_eq!(view.get(), &100);\n///         let v = view.get_mut();\n///         let new_v = (*v) * 10;\n///         *v = new_v;\n///         assert_eq!(view.insert(1111), 1000);\n///     }\n/// }\n///\n/// assert_eq!(map[&\"a\"], 1111);\n/// assert_eq!(map.len(), 3);\n///\n/// // Existing key (take)\n/// let hash = compute_hash(map.hasher(), &\"c\");\n/// match map.raw_entry_mut().from_key_hashed_nocheck(hash, &\"c\") {\n///     RawEntryMut::Vacant(_) => unreachable!(),\n///     RawEntryMut::Occupied(view) => {\n///         assert_eq!(view.remove_entry(), (\"c\", 300));\n///     }\n/// }\n/// assert_eq!(map.raw_entry().from_key(&\"c\"), None);\n/// assert_eq!(map.len(), 2);\n///\n/// // Nonexistent key (insert and update)\n/// let key = \"d\";\n/// let hash = compute_hash(map.hasher(), &key);\n/// match map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n///     RawEntryMut::Occupied(_) => unreachable!(),\n///     RawEntryMut::Vacant(view) => {\n///         let (k, value) = view.insert(\"d\", 4000);\n///         assert_eq!((*k, *value), (\"d\", 4000));\n///         *value = 40000;\n///     }\n/// }\n/// assert_eq!(map[&\"d\"], 40000);\n/// assert_eq!(map.len(), 3);\n///\n/// match map.raw_entry_mut().from_hash(hash, |q| *q == key) {\n///     RawEntryMut::Vacant(_) => unreachable!(),\n///     RawEntryMut::Occupied(view) => {\n///         assert_eq!(view.remove_entry(), (\"d\", 40000));\n///     }\n/// }\n/// assert_eq!(map.get(&\"d\"), None);\n/// assert_eq!(map.len(), 2);\n/// ```\n107 pub fn raw_entry_mut(&mut self) -> RawEntryBuilderMut<'_, K, V, S, A> {\n108     RawEntryBuilderMut { map: self }\n109 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}