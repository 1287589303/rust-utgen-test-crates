{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\nimpl<'a, T, A> OccupiedEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> (T, VacantEntry<'a, T, A>) {}\n    #[inline]\n    pub fn get(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> &mut T {\n        unsafe { self.bucket.as_mut() }\n    }\n    pub fn into_mut(self) -> &'a mut T {}\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Gets a mutable reference to the value in the entry.\n///\n/// If you need a reference to the `OccupiedEntry` which may outlive the\n/// destruction of the `Entry` value, see [`into_mut`].\n///\n/// [`into_mut`]: #method.into_mut\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&\"poneyland\"), (\"poneyland\", 12), |(k, _)| hasher(&k));\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 12))\n/// );\n///\n/// if let Entry::Occupied(mut o) = table.entry(\n///     hasher(&\"poneyland\"),\n///     |&(x, _)| x == \"poneyland\",\n///     |(k, _)| hasher(&k),\n/// ) {\n///     o.get_mut().1 += 10;\n///     assert_eq!(o.get().1, 22);\n///\n///     // We can use the same Entry multiple times.\n///     o.get_mut().1 += 2;\n/// }\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 24))\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n1711 pub fn get_mut(&mut self) -> &mut T {\n1712     unsafe { self.bucket.as_mut() }\n1713 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}