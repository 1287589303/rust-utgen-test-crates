{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawEntryBuilderMut<'a, K, V, S, A: Allocator = Global> {\n    map: &'a mut HashMap<K, V, S, A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawOccupiedEntryMut<'a, K, V, S, A: Allocator = Global> {\n    elem: Bucket<(K, V)>,\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub enum RawEntryMut<'a, K, V, S, A: Allocator = Global> {\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.raw_entry_mut().from_key(&\"a\") {\n    ///     RawEntryMut::Vacant(_) => unreachable!(),\n    ///     RawEntryMut::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(RawOccupiedEntryMut<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.raw_entry_mut().from_key(\"a\") {\n    ///     RawEntryMut::Occupied(_) => unreachable!(),\n    ///     RawEntryMut::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(RawVacantEntryMut<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> RawEntryBuilderMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_hash<F>(self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S, A>\n    where\n        for<'b> F: FnMut(&'b K) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>\n    where\n        for<'b> F: FnMut(&'b K) -> bool,\n    {\n        match self.map.table.find(hash, |(k, _)| is_match(k)) {\n            Some(elem) => {\n                RawEntryMut::Occupied(RawOccupiedEntryMut {\n                    elem,\n                    table: &mut self.map.table,\n                    hash_builder: &self.map.hash_builder,\n                })\n            }\n            None => {\n                RawEntryMut::Vacant(RawVacantEntryMut {\n                    table: &mut self.map.table,\n                    hash_builder: &self.map.hash_builder,\n                })\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n599 fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>\n600 where\n601     for<'b> F: FnMut(&'b K) -> bool,\n602 {\n603     match self.map.table.find(hash, |(k, _)| is_match(k)) {\n604         Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {\n605             elem,\n606             table: &mut self.map.table,\n607             hash_builder: &self.map.hash_builder,\n608         }),\n609         None => RawEntryMut::Vacant(RawVacantEntryMut {\n610             table: &mut self.map.table,\n611             hash_builder: &self.map.hash_builder,\n612         }),\n613     }\n614 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}