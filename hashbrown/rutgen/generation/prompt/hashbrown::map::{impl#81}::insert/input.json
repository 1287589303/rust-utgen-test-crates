{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntryRef<'a, 'b, K, Q: ?Sized, V, S, A: Allocator = Global> {\n    hash: u64,\n    key: &'b Q,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub enum EntryRef<'a, 'b, K, Q: ?Sized, V, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\".to_owned(), 100), (\"b\".into(), 200)].into();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Vacant(_) => unreachable!(),\n    ///     EntryRef::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{EntryRef, HashMap};\n    /// let mut map: HashMap<String, i32> = HashMap::new();\n    ///\n    /// match map.entry_ref(\"a\") {\n    ///     EntryRef::Occupied(_) => unreachable!(),\n    ///     EntryRef::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntryRef<'a, 'b, K, Q, V, S, A>),\n}\nimpl<'a, 'b, K, Q: ?Sized, V, S, A: Allocator> EntryRef<'a, 'b, K, Q, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {\n        match self {\n            EntryRef::Occupied(mut entry) => {\n                entry.insert(value);\n                entry\n            }\n            EntryRef::Vacant(entry) => entry.insert_entry(value),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self, default: V) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with_key<F: FnOnce(&Q) -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash + Borrow<Q> + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &Q\n    where\n        K: Borrow<Q>,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut V),\n    {\n        match self {\n            EntryRef::Occupied(mut entry) => {\n                f(entry.get_mut());\n                EntryRef::Occupied(entry)\n            }\n            EntryRef::Vacant(entry) => EntryRef::Vacant(entry),\n        }\n    }\n}\nimpl<'a, K, V, S, A: Allocator> OccupiedEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {\n        mem::replace(self.get_mut(), value)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {}\n}\nimpl<'a, 'b, K, Q: ?Sized, V, S, A: Allocator> VacantEntryRef<'a, 'b, K, Q, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &'b Q {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> &'a mut V\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash + From<&'b Q>,\n        S: BuildHasher,\n    {\n        let elem = self\n            .table\n            .table\n            .insert(\n                self.hash,\n                (self.key.into(), value),\n                make_hasher::<_, V, S>(&self.table.hash_builder),\n            );\n        OccupiedEntry {\n            hash: self.hash,\n            elem,\n            table: self.table,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry, and returns an `OccupiedEntry`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<String, u32> = HashMap::new();\n/// let entry = map.entry_ref(\"horseyland\").insert(37);\n///\n/// assert_eq!(entry.key(), \"horseyland\");\n/// ```\n4132 pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n4133 where\n4134     K: Hash + From<&'b Q>,\n4135     S: BuildHasher,\n4136 {\n4137     match self {\n4138         EntryRef::Occupied(mut entry) => {\n4139             entry.insert(value);\n4140             entry\n4141         }\n4142         EntryRef::Vacant(entry) => entry.insert_entry(value),\n4143     }\n4144 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}