{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<'a, K, V, S, A: Allocator> RawVacantEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::shadow_unrelated)]\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_with_hasher<H>(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n        hasher: H,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        H: Fn(&K) -> u64,\n    {\n        let &mut (ref mut k, ref mut v) = self\n            .table\n            .insert_entry(hash, (key, value), |x| hasher(&x.0));\n        (k, v)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn insert_entry(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Set the value of an entry with a custom hasher function.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// fn make_hasher<K, S>(hash_builder: &S) -> impl Fn(&K) -> u64 + '_\n/// where\n///     K: Hash + ?Sized,\n///     S: BuildHasher,\n/// {\n///     move |key: &K| {\n///         use core::hash::Hasher;\n///         let mut state = hash_builder.build_hasher();\n///         key.hash(&mut state);\n///         state.finish()\n///     }\n/// }\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// let key = \"a\";\n/// let hash_builder = map.hasher().clone();\n/// let hash = make_hasher(&hash_builder)(&key);\n///\n/// match map.raw_entry_mut().from_hash(hash, |q| q == &key) {\n///     RawEntryMut::Occupied(_) => panic!(),\n///     RawEntryMut::Vacant(v) => assert_eq!(\n///         v.insert_with_hasher(hash, key, 100, make_hasher(&hash_builder)),\n///         (&mut \"a\", &mut 100)\n///     ),\n/// }\n/// map.extend([(\"b\", 200), (\"c\", 300), (\"d\", 400), (\"e\", 500), (\"f\", 600)]);\n/// assert_eq!(map[&\"a\"], 100);\n/// ```\n1413 pub fn insert_with_hasher<H>(\n1414     self,\n1415     hash: u64,\n1416     key: K,\n1417     value: V,\n1418     hasher: H,\n1419 ) -> (&'a mut K, &'a mut V)\n1420 where\n1421     H: Fn(&K) -> u64,\n1422 {\n1423     let &mut (ref mut k, ref mut v) = self\n1424         .table\n1425         .insert_entry(hash, (key, value), |x| hasher(&x.0));\n1426     (k, v)\n1427 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}