{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\ntrait RawTableClone {\n    unsafe fn clone_from_spec(&mut self, source: &Self);\n}\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nstruct RawTableInner {\n    bucket_mask: usize,\n    ctrl: NonNull<u8>,\n    growth_left: usize,\n    items: usize,\n}\nimpl<T> RawTable<T, Global> {\n    #[inline]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn new() -> Self {\n        Self {\n            table: RawTableInner::NEW,\n            alloc: Global,\n            marker: PhantomData,\n        }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self::with_capacity_in(capacity, Global)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a new empty hash table without allocating any memory.\n///\n/// In effect this returns a table with exactly 1 bucket. However we can\n/// leave the data pointer dangling since that bucket is never written to\n/// due to our load factor forcing us to always have at least 1 free bucket.\n584 pub const fn new() -> Self {\n585     Self {\n586         table: RawTableInner::NEW,\n587         alloc: Global,\n588         marker: PhantomData,\n589     }\n590 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}