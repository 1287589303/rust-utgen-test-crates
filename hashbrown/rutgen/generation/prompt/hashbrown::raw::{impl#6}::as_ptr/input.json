{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\nimpl<T> Bucket<T> {\n    #[inline]\n    unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {\n        let ptr = if T::IS_ZERO_SIZED {\n            invalid_mut(index + 1)\n        } else {\n            base.as_ptr().sub(index)\n        };\n        Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }\n    }\n    #[inline]\n    unsafe fn to_base_index(&self, base: NonNull<T>) -> usize {}\n    #[inline]\n    pub fn as_ptr(&self) -> *mut T {\n        if T::IS_ZERO_SIZED {\n            invalid_mut(mem::align_of::<T>())\n        } else {\n            unsafe { self.ptr.as_ptr().sub(1) }\n        }\n    }\n    #[inline]\n    fn as_non_null(&self) -> NonNull<T> {}\n    #[inline]\n    unsafe fn next_n(&self, offset: usize) -> Self {\n        let ptr = if T::IS_ZERO_SIZED {\n            invalid_mut(self.ptr.as_ptr() as usize + offset)\n        } else {\n            self.ptr.as_ptr().sub(offset)\n        };\n        Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) unsafe fn drop(&self) {}\n    #[inline]\n    pub(crate) unsafe fn read(&self) -> T {}\n    #[inline]\n    pub(crate) unsafe fn write(&self, val: T) {}\n    #[inline]\n    pub unsafe fn as_ref<'a>(&self) -> &'a T {}\n    #[inline]\n    pub unsafe fn as_mut<'a>(&self) -> &'a mut T {}\n}\n#[inline(always)]\n#[allow(clippy::useless_transmute)]\npub(crate) fn invalid_mut<T>(addr: usize) -> *mut T {\n    unsafe { core::mem::transmute(addr) }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Acquires the underlying raw pointer `*mut T` to `data`.\n///\n/// # Note\n///\n/// If `T` is not [`Copy`], do not use `*mut T` methods that can cause calling the\n/// destructor of `T` (for example the [`<*mut T>::drop_in_place`] method), because\n/// for properly dropping the data we also need to clear `data` control bytes. If we\n/// drop data, but do not clear `data control byte` it leads to double drop when\n/// [`RawTable`] goes out of scope.\n///\n/// If you modify an already initialized `value`, so [`Hash`] and [`Eq`] on the new\n/// `T` value and its borrowed form *must* match those for the old `T` value, as the map\n/// will not re-evaluate where the new value should go, meaning the value may become\n/// \"lost\" if their location does not reflect their state.\n///\n/// [`RawTable`]: crate::raw::RawTable\n/// [`<*mut T>::drop_in_place`]: https://doc.rust-lang.org/core/primitive.pointer.html#method.drop_in_place\n/// [`Hash`]: https://doc.rust-lang.org/core/hash/trait.Hash.html\n/// [`Eq`]: https://doc.rust-lang.org/core/cmp/trait.Eq.html\n386 pub fn as_ptr(&self) -> *mut T {\n387     if T::IS_ZERO_SIZED {\n388         // Just return an arbitrary ZST pointer which is properly aligned\n389         // invalid pointer is good enough for ZST\n390         invalid_mut(mem::align_of::<T>())\n391     } else {\n392         unsafe { self.ptr.as_ptr().sub(1) }\n393     }\n394 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}