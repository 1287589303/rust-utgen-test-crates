{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct Drain<'a, K, V, A: Allocator = Global> {\n    inner: RawDrain<'a, (K, V), A>,\n}\npub struct RawDrain<'a, T, A: Allocator = Global> {\n    iter: RawIter<T>,\n    table: RawTableInner,\n    orig_table: NonNull<RawTableInner>,\n    marker: PhantomData<&'a RawTable<T, A>>,\n}\nimpl<K, V, S, A: Allocator> HashMap<K, V, S, A> {\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn with_hasher_in(hash_builder: S, alloc: A) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::new_in(alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn with_capacity_and_hasher_in(\n        capacity: usize,\n        hash_builder: S,\n        alloc: A,\n    ) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn hasher(&self) -> &S {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values(&self) -> Values<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    #[cfg(test)]\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn raw_capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, K, V, A> {\n        Drain { inner: self.table.drain() }\n    }\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn into_keys(self) -> IntoKeys<K, V, A> {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues<K, V, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Clears the map, returning all key-value pairs as an iterator. Keeps the\n/// allocated memory for reuse.\n///\n/// If the returned iterator is dropped before being fully consumed, it\n/// drops the remaining key-value pairs. The returned iterator keeps a\n/// mutable borrow on the vector to optimize its implementation.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut a = HashMap::new();\n/// a.insert(1, \"a\");\n/// a.insert(2, \"b\");\n/// let capacity_before_drain = a.capacity();\n///\n/// for (k, v) in a.drain().take(1) {\n///     assert!(k == 1 || k == 2);\n///     assert!(v == \"a\" || v == \"b\");\n/// }\n///\n/// // As we can see, the map is empty and contains no element.\n/// assert!(a.is_empty() && a.len() == 0);\n/// // But map capacity is equal to old one.\n/// assert_eq!(a.capacity(), capacity_before_drain);\n///\n/// let mut a = HashMap::new();\n/// a.insert(1, \"a\");\n/// a.insert(2, \"b\");\n///\n/// {   // Iterator is dropped without being consumed.\n///     let d = a.drain();\n/// }\n///\n/// // But the map is empty even if we do not use Drain iterator.\n/// assert!(a.is_empty());\n/// ```\n888 pub fn drain(&mut self) -> Drain<'_, K, V, A> {\n889     Drain {\n890         inner: self.table.drain(),\n891     }\n892 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}