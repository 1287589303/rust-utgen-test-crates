{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub(crate) trait TagSliceExt {\n    fn fill_tag(&mut self, tag: Tag);\n    #[inline]\n    fn fill_empty(&mut self);\n}\n#[cfg(not(feature = \"equivalent\"))]\npub trait Equivalent<K: ?Sized> {\n    fn equivalent(&self, key: &K) -> bool;\n}\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct IterMut<'a, K, V> {\n    inner: RawIter<(K, V)>,\n    marker: PhantomData<(&'a K, &'a mut V)>,\n}\npub struct IterMut<'a, T> {\n    inner: RawIter<T>,\n    marker: PhantomData<&'a mut T>,\n}\nimpl<'a, T, A> IntoIterator for &'a mut HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    type Item = &'a mut T;\n    type IntoIter = IterMut<'a, T>;\n    fn into_iter(self) -> IterMut<'a, T> {\n        self.iter_mut()\n    }\n}\nimpl<K, V, S, A: Allocator> HashMap<K, V, S, A> {\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn with_hasher_in(hash_builder: S, alloc: A) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::new_in(alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn with_capacity_and_hasher_in(\n        capacity: usize,\n        hash_builder: S,\n        alloc: A,\n    ) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn hasher(&self) -> &S {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values(&self) -> Values<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {\n        unsafe {\n            IterMut {\n                inner: self.table.iter(),\n                marker: PhantomData,\n            }\n        }\n    }\n    #[cfg(test)]\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn raw_capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, K, V, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn into_keys(self) -> IntoKeys<K, V, A> {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues<K, V, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an iterator over the entries of a `HashMap` in arbitrary order\n/// with mutable references to the values. The iterator element type is\n/// `(&'a K, &'a mut V)`.\n///\n/// Return the same `IterMut` struct as by the [`iter_mut`] method on\n/// [`HashMap`].\n///\n/// [`iter_mut`]: struct.HashMap.html#method.iter_mut\n/// [`HashMap`]: struct.HashMap.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// let mut map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n///\n/// for (key, value) in &mut map {\n///     println!(\"Key: {}, Value: {}\", key, value);\n///     *value *= 2;\n/// }\n///\n/// let mut vec = map.iter().collect::<Vec<_>>();\n/// // The `Iter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(&\"a\", &2), (&\"b\", &4), (&\"c\", &6)]);\n/// ```\n3123 fn into_iter(self) -> IterMut<'a, K, V> {\n3124     self.iter_mut()\n3125 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}