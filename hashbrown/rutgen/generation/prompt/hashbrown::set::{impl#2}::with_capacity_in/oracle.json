{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\n#[cfg(feature = \"default-hasher\")]\nimpl<T: Hash + Eq, A: Allocator> HashSet<T, DefaultHashBuilder, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn new_in(alloc: A) -> Self {\n        Self {\n            map: HashMap::new_in(alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            map: HashMap::with_capacity_in(capacity, alloc),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an empty `HashSet` with the specified capacity.\n///\n/// The hash set will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash set will not allocate.\n///\n/// # HashDoS resistance\n///\n/// The `hash_builder` normally use a fixed key by default and that does\n/// not allow the `HashSet` to be protected against attacks such as [`HashDoS`].\n/// Users who require HashDoS resistance should explicitly use\n/// [`std::collections::hash_map::RandomState`]\n/// as the hasher when creating a [`HashSet`], for example with\n/// [`with_capacity_and_hasher_in`](HashSet::with_capacity_and_hasher_in) method.\n///\n/// [`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n/// [`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let set: HashSet<i32> = HashSet::with_capacity(10);\n/// assert!(set.capacity() >= 10);\n/// ```\n251 pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n252     Self {\n253         map: HashMap::with_capacity_in(capacity, alloc),\n254     }\n255 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}