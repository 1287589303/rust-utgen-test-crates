{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawOccupiedEntryMut<'a, K, V, S, A: Allocator = Global> {\n    elem: Bucket<(K, V)>,\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub enum RawEntryMut<'a, K, V, S, A: Allocator = Global> {\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.raw_entry_mut().from_key(&\"a\") {\n    ///     RawEntryMut::Vacant(_) => unreachable!(),\n    ///     RawEntryMut::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(RawOccupiedEntryMut<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.raw_entry_mut().from_key(\"a\") {\n    ///     RawEntryMut::Occupied(_) => unreachable!(),\n    ///     RawEntryMut::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(RawVacantEntryMut<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> RawEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)\n    where\n        F: FnOnce() -> (K, V),\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut K, &mut V),\n    {\n        match self {\n            RawEntryMut::Occupied(mut entry) => {\n                {\n                    let (k, v) = entry.get_key_value_mut();\n                    f(k, v);\n                }\n                RawEntryMut::Occupied(entry)\n            }\n            RawEntryMut::Vacant(entry) => RawEntryMut::Vacant(entry),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_replace_entry_with<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {\n        match self {\n            RawEntryMut::Occupied(entry) => entry.replace_entry_with(f),\n            RawEntryMut::Vacant(_) => self,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Provides shared access to the key and owned access to the value of\n/// an occupied entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::RawEntryMut;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|_k, _v| panic!());\n///\n/// match entry {\n///     RawEntryMut::Vacant(_) => {},\n///     RawEntryMut::Occupied(_) => panic!(),\n/// }\n///\n/// map.insert(\"poneyland\", 42);\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"poneyland\");\n///         assert_eq!(v, 42);\n///         Some(v + 1)\n///     });\n///\n/// match entry {\n///     RawEntryMut::Occupied(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///         assert_eq!(e.get(), &43);\n///     },\n///     RawEntryMut::Vacant(_) => panic!(),\n/// }\n///\n/// assert_eq!(map[\"poneyland\"], 43);\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|_k, _v| None);\n///\n/// match entry {\n///     RawEntryMut::Vacant(_) => {},\n///     RawEntryMut::Occupied(_) => panic!(),\n/// }\n///\n/// assert!(!map.contains_key(\"poneyland\"));\n/// ```\n893 pub fn and_replace_entry_with<F>(self, f: F) -> Self\n894 where\n895     F: FnOnce(&K, V) -> Option<V>,\n896 {\n897     match self {\n898         RawEntryMut::Occupied(entry) => entry.replace_entry_with(f),\n899         RawEntryMut::Vacant(_) => self,\n900     }\n901 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}