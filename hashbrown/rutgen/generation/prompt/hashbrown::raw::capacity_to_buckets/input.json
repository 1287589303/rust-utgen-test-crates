{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\n#[cfg_attr(target_os = \"emscripten\", inline(never))]\n#[cfg_attr(not(target_os = \"emscripten\"), inline)]\nfn capacity_to_buckets(cap: usize) -> Option<usize> {\n    debug_assert_ne!(cap, 0);\n    if cap < 8 {\n        return Some(if cap < 4 { 4 } else { 8 });\n    }\n    let adjusted_cap = cap.checked_mul(8)? / 7;\n    Some(adjusted_cap.next_power_of_two())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the number of buckets needed to hold the given number of items,\n/// taking the maximum load factor into account.\n///\n/// Returns `None` if an overflow occurs.\n103 fn capacity_to_buckets(cap: usize) -> Option<usize> {\n104     debug_assert_ne!(cap, 0);\n105 \n106     // For small tables we require at least 1 empty bucket so that lookups are\n107     // guaranteed to terminate if an element doesn't exist in the table.\n108     if cap < 8 {\n109         // We don't bother with a table size of 2 buckets since that can only\n110         // hold a single element. Instead we skip directly to a 4 bucket table\n111         // which can hold 3 elements.\n112         return Some(if cap < 4 { 4 } else { 8 });\n113     }\n114 \n115     // Otherwise require 1/8 buckets to be empty (87.5% load)\n116     //\n117     // Be careful when modifying this, calculate_layout relies on the\n118     // overflow check here.\n119     let adjusted_cap = cap.checked_mul(8)? / 7;\n120 \n121     // Any overflows will have been caught by the checked_mul. Also, any\n122     // rounding errors from the division above will be cleaned up by\n123     // next_power_of_two (which can't overflow because of the previous division).\n124     Some(adjusted_cap.next_power_of_two())\n125 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}