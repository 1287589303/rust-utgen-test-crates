{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\n#[cfg_attr(target_os = \"emscripten\", inline(never))]\n#[cfg_attr(not(target_os = \"emscripten\"), inline)]\nfn capacity_to_buckets(cap: usize) -> Option<usize> {\n    debug_assert_ne!(cap, 0);\n    if cap < 8 {\n        return Some(if cap < 4 { 4 } else { 8 });\n    }\n    let adjusted_cap = cap.checked_mul(8)? / 7;\n    Some(adjusted_cap.next_power_of_two())\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns the number of buckets needed to hold the given number of items,\n/// taking the maximum load factor into account.\n///\n/// Returns `None` if an overflow occurs.\n103 fn capacity_to_buckets(cap: usize) -> Option<usize> {\n104     debug_assert_ne!(cap, 0);\n105 \n106     // For small tables we require at least 1 empty bucket so that lookups are\n107     // guaranteed to terminate if an element doesn't exist in the table.\n108     if cap < 8 {\n109         // We don't bother with a table size of 2 buckets since that can only\n110         // hold a single element. Instead we skip directly to a 4 bucket table\n111         // which can hold 3 elements.\n112         return Some(if cap < 4 { 4 } else { 8 });\n113     }\n114 \n115     // Otherwise require 1/8 buckets to be empty (87.5% load)\n116     //\n117     // Be careful when modifying this, calculate_layout relies on the\n118     // overflow check here.\n119     let adjusted_cap = cap.checked_mul(8)? / 7;\n120 \n121     // Any overflows will have been caught by the checked_mul. Also, any\n122     // rounding errors from the division above will be cleaned up by\n123     // next_power_of_two (which can't overflow because of the previous division).\n124     Some(adjusted_cap.next_power_of_two())\n125 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}