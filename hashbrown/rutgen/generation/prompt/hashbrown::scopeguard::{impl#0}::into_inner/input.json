{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/scopeguard.rs\n// crate name is hashbrown\nuse core::{\n    mem::ManuallyDrop, ops::{Deref, DerefMut},\n    ptr,\n};\npub struct ScopeGuard<T, F>\nwhere\n    F: FnMut(&mut T),\n{\n    dropfn: F,\n    value: T,\n}\nimpl<T, F> ScopeGuard<T, F>\nwhere\n    F: FnMut(&mut T),\n{\n    #[inline]\n    pub fn into_inner(guard: Self) -> T {\n        let guard = ManuallyDrop::new(guard);\n        unsafe {\n            let value = ptr::read(&guard.value);\n            let _ = ptr::read(&guard.dropfn);\n            value\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n29 pub fn into_inner(guard: Self) -> T {\n30     // Cannot move out of Drop-implementing types, so\n31     // ptr::read the value out of a ManuallyDrop<Self>\n32     // Don't use mem::forget as that might invalidate value\n33     let guard = ManuallyDrop::new(guard);\n34     unsafe {\n35         let value = ptr::read(&guard.value);\n36         // read the closure so that it is dropped\n37         let _ = ptr::read(&guard.dropfn);\n38         value\n39     }\n40 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}