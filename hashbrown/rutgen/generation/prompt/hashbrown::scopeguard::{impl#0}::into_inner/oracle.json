{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/scopeguard.rs\n// crate name is hashbrown\nuse core::{\n    mem::ManuallyDrop, ops::{Deref, DerefMut},\n    ptr,\n};\npub struct ScopeGuard<T, F>\nwhere\n    F: FnMut(&mut T),\n{\n    dropfn: F,\n    value: T,\n}\nimpl<T, F> ScopeGuard<T, F>\nwhere\n    F: FnMut(&mut T),\n{\n    #[inline]\n    pub fn into_inner(guard: Self) -> T {\n        let guard = ManuallyDrop::new(guard);\n        unsafe {\n            let value = ptr::read(&guard.value);\n            let _ = ptr::read(&guard.dropfn);\n            value\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n29 pub fn into_inner(guard: Self) -> T {\n30     // Cannot move out of Drop-implementing types, so\n31     // ptr::read the value out of a ManuallyDrop<Self>\n32     // Don't use mem::forget as that might invalidate value\n33     let guard = ManuallyDrop::new(guard);\n34     unsafe {\n35         let value = ptr::read(&guard.value);\n36         // read the closure so that it is dropped\n37         let _ = ptr::read(&guard.dropfn);\n38         value\n39     }\n40 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}