{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<'a, K, V, S, A: Allocator> VacantEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key(self) -> K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> &'a mut V\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let table = &mut self.table.table;\n        let entry = table\n            .insert_entry(\n                self.hash,\n                (self.key, value),\n                make_hasher::<_, V, S>(&self.table.hash_builder),\n            );\n        &mut entry.1\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hasher<Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_\nwhere\n    Q: Hash,\n    S: BuildHasher,\n{\n    move |val| make_hash::<Q, S>(hash_builder, &val.0)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry with the [`VacantEntry`]'s key,\n/// and returns a mutable reference to it.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::Entry;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n///\n/// if let Entry::Vacant(o) = map.entry(\"poneyland\") {\n///     o.insert(37);\n/// }\n/// assert_eq!(map[\"poneyland\"], 37);\n/// ```\n4069 pub fn insert(self, value: V) -> &'a mut V\n4070 where\n4071     K: Hash,\n4072     S: BuildHasher,\n4073 {\n4074     let table = &mut self.table.table;\n4075     let entry = table.insert_entry(\n4076         self.hash,\n4077         (self.key, value),\n4078         make_hasher::<_, V, S>(&self.table.hash_builder),\n4079     );\n4080     &mut entry.1\n4081 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}