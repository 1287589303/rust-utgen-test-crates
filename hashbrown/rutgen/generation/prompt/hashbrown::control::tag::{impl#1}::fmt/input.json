{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/control/tag.rs\n// crate name is hashbrown\nuse core::{fmt, mem};\n#[derive(Copy, Clone, PartialEq, Eq)]\n#[repr(transparent)]\npub(crate) struct Tag(pub(super) u8);\nimpl fmt::Debug for Tag {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        if self.is_special() {\n            if self.special_is_empty() { f.pad(\"EMPTY\") } else { f.pad(\"DELETED\") }\n        } else {\n            f.debug_tuple(\"full\").field(&(self.0 & 0x7F)).finish()\n        }\n    }\n}\nimpl Tag {\n    pub(crate) const EMPTY: Tag = Tag(0b1111_1111);\n    pub(crate) const DELETED: Tag = Tag(0b1000_0000);\n    #[inline]\n    pub(crate) const fn is_full(self) -> bool {}\n    #[inline]\n    pub(crate) const fn is_special(self) -> bool {\n        self.0 & 0x80 != 0\n    }\n    #[inline]\n    pub(crate) const fn special_is_empty(self) -> bool {\n        debug_assert!(self.is_special());\n        self.0 & 0x01 != 0\n    }\n    #[inline]\n    #[allow(clippy::cast_possible_truncation)]\n    pub(crate) const fn full(hash: u64) -> Tag {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n53 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n54     if self.is_special() {\n55         if self.special_is_empty() {\n56             f.pad(\"EMPTY\")\n57         } else {\n58             f.pad(\"DELETED\")\n59         }\n60     } else {\n61         f.debug_tuple(\"full\").field(&(self.0 & 0x7F)).finish()\n62     }\n63 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}