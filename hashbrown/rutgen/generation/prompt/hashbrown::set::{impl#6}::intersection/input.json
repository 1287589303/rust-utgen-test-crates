{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Intersection<'a, T, S, A: Allocator = Global> {\n    iter: Iter<'a, T>,\n    other: &'a HashSet<T, S, A>,\n}\nimpl<T, S, A> HashSet<T, S, A>\nwhere\n    T: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn difference<'a>(&'a self, other: &'a Self) -> Difference<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn symmetric_difference<'a>(\n        &'a self,\n        other: &'a Self,\n    ) -> SymmetricDifference<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn intersection<'a>(&'a self, other: &'a Self) -> Intersection<'a, T, S, A> {\n        let (smaller, larger) = if self.len() <= other.len() {\n            (self, other)\n        } else {\n            (other, self)\n        };\n        Intersection {\n            iter: smaller.iter(),\n            other: larger,\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn union<'a>(&'a self, other: &'a Self) -> Union<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains<Q>(&self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get<Q>(&self, value: &Q) -> Option<&T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert_with<Q, F>(&mut self, value: &Q, f: F) -> &T\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n        F: FnOnce(&Q) -> T,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, value: T) -> Entry<'_, T, S, A> {}\n    pub fn is_disjoint(&self, other: &Self) -> bool {}\n    pub fn is_subset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_superset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: T) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace(&mut self, value: T) -> Option<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\nimpl<T, S, A: Allocator> HashSet<T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, T> {\n        Iter { iter: self.map.keys() }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {\n        self.map.len()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Visits the values representing the intersection,\n/// i.e., the values that are both in `self` and `other`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let a: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = [4, 2, 3, 4].into_iter().collect();\n///\n/// // Print 2, 3 in arbitrary order.\n/// for x in a.intersection(&b) {\n///     println!(\"{}\", x);\n/// }\n///\n/// let intersection: HashSet<_> = a.intersection(&b).collect();\n/// assert_eq!(intersection, [2, 3].iter().collect());\n/// ```\n799 pub fn intersection<'a>(&'a self, other: &'a Self) -> Intersection<'a, T, S, A> {\n800     let (smaller, larger) = if self.len() <= other.len() {\n801         (self, other)\n802     } else {\n803         (other, self)\n804     };\n805     Intersection {\n806         iter: smaller.iter(),\n807         other: larger,\n808     }\n809 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}