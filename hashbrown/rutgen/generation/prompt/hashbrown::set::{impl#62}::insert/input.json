{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub enum Entry<'a, T, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_set::{Entry, HashSet};\n    /// let mut set: HashSet<_> = [\"a\", \"b\"].into();\n    ///\n    /// match set.entry(\"a\") {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, T, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_set::{Entry, HashSet};\n    /// let mut set: HashSet<&str> = HashSet::new();\n    ///\n    /// match set.entry(\"a\") {\n    ///     Entry::Occupied(_) => unreachable!(),\n    ///     Entry::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntry<'a, T, S, A>),\n}\nimpl<'a, T, S, A: Allocator> Entry<'a, T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self) -> OccupiedEntry<'a, T, S, A>\n    where\n        T: Hash,\n        S: BuildHasher,\n    {\n        match self {\n            Entry::Occupied(entry) => entry,\n            Entry::Vacant(entry) => entry.insert(),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self)\n    where\n        T: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &T {}\n}\nimpl<'a, T, S, A: Allocator> VacantEntry<'a, T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_value(self) -> T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self) -> OccupiedEntry<'a, T, S, A>\n    where\n        T: Hash,\n        S: BuildHasher,\n    {\n        OccupiedEntry {\n            inner: self.inner.insert_entry(()),\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry, and returns an `OccupiedEntry`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set: HashSet<&str> = HashSet::new();\n/// let entry = set.entry(\"horseyland\").insert();\n///\n/// assert_eq!(entry.get(), &\"horseyland\");\n/// ```\n2366 pub fn insert(self) -> OccupiedEntry<'a, T, S, A>\n2367 where\n2368     T: Hash,\n2369     S: BuildHasher,\n2370 {\n2371     match self {\n2372         Entry::Occupied(entry) => entry,\n2373         Entry::Vacant(entry) => entry.insert(),\n2374     }\n2375 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}