{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub enum Entry<'a, K, V, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{Entry, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.entry(\"a\") {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{Entry, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.entry(\"a\") {\n    ///     Entry::Occupied(_) => unreachable!(),\n    ///     Entry::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntry<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> OccupiedEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {\n        unsafe {\n            let mut spare_key = None;\n            self.table\n                .table\n                .replace_bucket_with(\n                    self.elem.clone(),\n                    |(key, value)| {\n                        if let Some(new_value) = f(&key, value) {\n                            Some((key, new_value))\n                        } else {\n                            spare_key = Some(key);\n                            None\n                        }\n                    },\n                );\n            if let Some(key) = spare_key {\n                Entry::Vacant(VacantEntry {\n                    hash: self.hash,\n                    key,\n                    table: self.table,\n                })\n            } else {\n                Entry::Occupied(self)\n            }\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Provides shared access to the key and owned access to the value of\n/// the entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::Entry;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// map.insert(\"poneyland\", 42);\n///\n/// let entry = match map.entry(\"poneyland\") {\n///     Entry::Occupied(e) => {\n///         e.replace_entry_with(|k, v| {\n///             assert_eq!(k, &\"poneyland\");\n///             assert_eq!(v, 42);\n///             Some(v + 1)\n///         })\n///     }\n///     Entry::Vacant(_) => panic!(),\n/// };\n///\n/// match entry {\n///     Entry::Occupied(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///         assert_eq!(e.get(), &43);\n///     }\n///     Entry::Vacant(_) => panic!(),\n/// }\n///\n/// assert_eq!(map[\"poneyland\"], 43);\n///\n/// let entry = match map.entry(\"poneyland\") {\n///     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n///     Entry::Vacant(_) => panic!(),\n/// };\n///\n/// match entry {\n///     Entry::Vacant(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///     }\n///     Entry::Occupied(_) => panic!(),\n/// }\n///\n/// assert!(!map.contains_key(\"poneyland\"));\n/// ```\n3985 pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>\n3986 where\n3987     F: FnOnce(&K, V) -> Option<V>,\n3988 {\n3989     unsafe {\n3990         let mut spare_key = None;\n3991 \n3992         self.table\n3993             .table\n3994             .replace_bucket_with(self.elem.clone(), |(key, value)| {\n3995                 if let Some(new_value) = f(&key, value) {\n3996                     Some((key, new_value))\n3997                 } else {\n3998                     spare_key = Some(key);\n3999                     None\n4000                 }\n4001             });\n4002 \n4003         if let Some(key) = spare_key {\n4004             Entry::Vacant(VacantEntry {\n4005                 hash: self.hash,\n4006                 key,\n4007                 table: self.table,\n4008             })\n4009         } else {\n4010             Entry::Occupied(self)\n4011         }\n4012     }\n4013 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}