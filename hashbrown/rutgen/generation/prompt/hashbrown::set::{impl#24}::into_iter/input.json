{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub(crate) trait TagSliceExt {\n    fn fill_tag(&mut self, tag: Tag);\n    #[inline]\n    fn fill_empty(&mut self);\n}\n#[cfg(not(feature = \"equivalent\"))]\npub trait Equivalent<K: ?Sized> {\n    fn equivalent(&self, key: &K) -> bool;\n}\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Iter<'a, K, V> {\n    inner: RawIter<(K, V)>,\n    marker: PhantomData<(&'a K, &'a V)>,\n}\npub struct Iter<'a, T> {\n    inner: RawIter<T>,\n    marker: PhantomData<&'a T>,\n}\nimpl<'a, T, A> IntoIterator for &'a mut HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    type Item = &'a mut T;\n    type IntoIter = IterMut<'a, T>;\n    fn into_iter(self) -> IterMut<'a, T> {\n        self.iter_mut()\n    }\n}\nimpl<T, S, A: Allocator> HashSet<T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, T> {\n        Iter { iter: self.map.keys() }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1744 fn into_iter(self) -> Iter<'a, T> {\n1745     self.iter()\n1746 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}