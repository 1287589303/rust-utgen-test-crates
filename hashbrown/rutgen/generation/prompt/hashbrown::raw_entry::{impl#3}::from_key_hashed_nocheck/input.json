{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawEntryBuilderMut<'a, K, V, S, A: Allocator = Global> {\n    map: &'a mut HashMap<K, V, S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub enum RawEntryMut<'a, K, V, S, A: Allocator = Global> {\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.raw_entry_mut().from_key(&\"a\") {\n    ///     RawEntryMut::Vacant(_) => unreachable!(),\n    ///     RawEntryMut::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(RawOccupiedEntryMut<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.raw_entry_mut().from_key(\"a\") {\n    ///     RawEntryMut::Occupied(_) => unreachable!(),\n    ///     RawEntryMut::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(RawVacantEntryMut<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> RawEntryBuilderMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_key<Q>(self, k: &Q) -> RawEntryMut<'a, K, V, S, A>\n    where\n        S: BuildHasher,\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_key_hashed_nocheck<Q>(\n        self,\n        hash: u64,\n        k: &Q,\n    ) -> RawEntryMut<'a, K, V, S, A>\n    where\n        Q: Equivalent<K> + ?Sized,\n    {\n        self.from_hash(hash, equivalent(k))\n    }\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\n#[allow(dead_code)]\npub(crate) fn equivalent<Q, K>(k: &Q) -> impl Fn(&K) -> bool + '_\nwhere\n    Q: Equivalent<K> + ?Sized,\n{\n    move |x| k.equivalent(x)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a `RawEntryMut` from the given key and its hash.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// let key = \"a\";\n/// let hash = compute_hash(map.hasher(), &key);\n/// let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key_hashed_nocheck(hash, &key);\n/// entry.insert(key, 100);\n/// assert_eq!(map[&\"a\"], 100);\n/// ```\n558 pub fn from_key_hashed_nocheck<Q>(self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S, A>\n559 where\n560     Q: Equivalent<K> + ?Sized,\n561 {\n562     self.from_hash(hash, equivalent(k))\n563 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}