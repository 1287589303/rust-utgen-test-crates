{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\n#[must_use = \"Iterators are lazy unless consumed\"]\npub struct ExtractIf<'a, K, V, F, A: Allocator = Global>\nwhere\n    F: FnMut(&K, &mut V) -> bool,\n{\n    f: F,\n    inner: RawExtractIf<'a, (K, V), A>,\n}\npub struct RawIter<T> {\n    pub(crate) iter: RawIterRange<T>,\n    items: usize,\n}\npub(crate) struct RawExtractIf<'a, T, A: Allocator> {\n    pub iter: RawIter<T>,\n    pub table: &'a mut RawTable<T, A>,\n}\nimpl<K, V, S, A: Allocator> HashMap<K, V, S, A> {\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn with_hasher_in(hash_builder: S, alloc: A) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::new_in(alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn with_capacity_and_hasher_in(\n        capacity: usize,\n        hash_builder: S,\n        alloc: A,\n    ) -> Self {\n        Self {\n            hash_builder,\n            table: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn hasher(&self) -> &S {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values(&self) -> Values<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    #[cfg(test)]\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn raw_capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, K, V, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>\n    where\n        F: FnMut(&K, &mut V) -> bool,\n    {\n        ExtractIf {\n            f,\n            inner: RawExtractIf {\n                iter: unsafe { self.table.iter() },\n                table: &mut self.table,\n            },\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[inline]\n    pub fn into_keys(self) -> IntoKeys<K, V, A> {}\n    #[inline]\n    pub fn into_values(self) -> IntoValues<K, V, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Drains elements which are true under the given predicate,\n/// and returns an iterator over the removed items.\n///\n/// In other words, move all pairs `(k, v)` such that `f(&k, &mut v)` returns `true` out\n/// into another iterator.\n///\n/// Note that `extract_if` lets you mutate every value in the filter closure, regardless of\n/// whether you choose to keep or remove it.\n///\n/// If the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\n/// or the iteration short-circuits, then the remaining elements will be retained.\n/// Use [`retain()`] with a negated predicate if you do not need the returned iterator.\n///\n/// Keeps the allocated memory for reuse.\n///\n/// [`retain()`]: HashMap::retain\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n///\n/// let drained: HashMap<i32, i32> = map.extract_if(|k, _v| k % 2 == 0).collect();\n///\n/// let mut evens = drained.keys().cloned().collect::<Vec<_>>();\n/// let mut odds = map.keys().cloned().collect::<Vec<_>>();\n/// evens.sort();\n/// odds.sort();\n///\n/// assert_eq!(evens, vec![0, 2, 4, 6]);\n/// assert_eq!(odds, vec![1, 3, 5, 7]);\n///\n/// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n///\n/// {   // Iterator is dropped without being consumed.\n///     let d = map.extract_if(|k, _v| k % 2 != 0);\n/// }\n///\n/// // ExtractIf was not exhausted, therefore no elements were drained.\n/// assert_eq!(map.len(), 8);\n/// ```\n976 pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>\n977 where\n978     F: FnMut(&K, &mut V) -> bool,\n979 {\n980     ExtractIf {\n981         f,\n982         inner: RawExtractIf {\n983             iter: unsafe { self.table.iter() },\n984             table: &mut self.table,\n985         },\n986     }\n987 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}