{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub enum Entry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    /// for x in [\"a\", \"b\"] {\n    ///     table.insert_unique(hasher(&x), x, hasher);\n    /// }\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => {}\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Occupied(OccupiedEntry<'a, T, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::<&str>::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => {}\n    ///     Entry::Occupied(_) => unreachable!(),\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Vacant(VacantEntry<'a, T, A>),\n}\nimpl<'a, T, A> Entry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {}\n    pub fn or_insert(self, default: T) -> OccupiedEntry<'a, T, A> {\n        match self {\n            Entry::Occupied(entry) => entry,\n            Entry::Vacant(entry) => entry.insert(default),\n        }\n    }\n    pub fn or_insert_with(self, default: impl FnOnce() -> T) -> OccupiedEntry<'a, T, A> {}\n    pub fn and_modify(self, f: impl FnOnce(&mut T)) -> Self {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n}\nimpl<'a, T, A> VacantEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[inline]\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        let bucket = unsafe {\n            self.table.raw.insert_in_slot(self.hash, self.insert_slot, value)\n        };\n        OccupiedEntry {\n            hash: self.hash,\n            bucket,\n            table: self.table,\n        }\n    }\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Ensures a value is in the entry by inserting if it was vacant.\n///\n/// Returns an [`OccupiedEntry`] pointing to the now-occupied entry.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// // nonexistent key\n/// table\n///     .entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher)\n///     .or_insert(\"poneyland\");\n/// assert!(table\n///     .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n///     .is_some());\n///\n/// // existing key\n/// table\n///     .entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher)\n///     .or_insert(\"poneyland\");\n/// assert!(table\n///     .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n///     .is_some());\n/// assert_eq!(table.len(), 1);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n1397 pub fn or_insert(self, default: T) -> OccupiedEntry<'a, T, A> {\n1398     match self {\n1399         Entry::Occupied(entry) => entry,\n1400         Entry::Vacant(entry) => entry.insert(default),\n1401     }\n1402 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}