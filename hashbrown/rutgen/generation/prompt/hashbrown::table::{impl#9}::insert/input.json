{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub enum Entry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    /// for x in [\"a\", \"b\"] {\n    ///     table.insert_unique(hasher(&x), x, hasher);\n    /// }\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => {}\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Occupied(OccupiedEntry<'a, T, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::<&str>::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => {}\n    ///     Entry::Occupied(_) => unreachable!(),\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Vacant(VacantEntry<'a, T, A>),\n}\nimpl<'a, T, A> Entry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        match self {\n            Entry::Occupied(mut entry) => {\n                *entry.get_mut() = value;\n                entry\n            }\n            Entry::Vacant(entry) => entry.insert(value),\n        }\n    }\n    pub fn or_insert(self, default: T) -> OccupiedEntry<'a, T, A> {}\n    pub fn or_insert_with(self, default: impl FnOnce() -> T) -> OccupiedEntry<'a, T, A> {}\n    pub fn and_modify(self, f: impl FnOnce(&mut T)) -> Self {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n}\nimpl<'a, T, A> OccupiedEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> (T, VacantEntry<'a, T, A>) {}\n    #[inline]\n    pub fn get(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> &mut T {\n        unsafe { self.bucket.as_mut() }\n    }\n    pub fn into_mut(self) -> &'a mut T {}\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\nimpl<'a, T, A> VacantEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[inline]\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        let bucket = unsafe {\n            self.table.raw.insert_in_slot(self.hash, self.insert_slot, value)\n        };\n        OccupiedEntry {\n            hash: self.hash,\n            bucket,\n            table: self.table,\n        }\n    }\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry, replacing any existing value if there is\n/// one, and returns an [`OccupiedEntry`].\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// let entry = table\n///     .entry(hasher(&\"horseyland\"), |&x| x == \"horseyland\", hasher)\n///     .insert(\"horseyland\");\n///\n/// assert_eq!(entry.get(), &\"horseyland\");\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n1349 pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n1350     match self {\n1351         Entry::Occupied(mut entry) => {\n1352             *entry.get_mut() = value;\n1353             entry\n1354         }\n1355         Entry::Vacant(entry) => entry.insert(value),\n1356     }\n1357 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}