{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub enum Entry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    /// for x in [\"a\", \"b\"] {\n    ///     table.insert_unique(hasher(&x), x, hasher);\n    /// }\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => {}\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Occupied(OccupiedEntry<'a, T, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// # #[cfg(feature = \"nightly\")]\n    /// # fn test() {\n    /// use hashbrown::hash_table::{Entry, OccupiedEntry};\n    /// use hashbrown::{HashTable, DefaultHashBuilder};\n    /// use std::hash::BuildHasher;\n    ///\n    /// let mut table = HashTable::<&str>::new();\n    /// let hasher = DefaultHashBuilder::default();\n    /// let hasher = |val: &_| hasher.hash_one(val);\n    ///\n    /// match table.entry(hasher(&\"a\"), |&x| x == \"a\", hasher) {\n    ///     Entry::Vacant(_) => {}\n    ///     Entry::Occupied(_) => unreachable!(),\n    /// }\n    /// # }\n    /// # fn main() {\n    /// #     #[cfg(feature = \"nightly\")]\n    /// #     test()\n    /// # }\n    /// ```\n    Vacant(VacantEntry<'a, T, A>),\n}\nimpl<'a, T, A> Entry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        match self {\n            Entry::Occupied(mut entry) => {\n                *entry.get_mut() = value;\n                entry\n            }\n            Entry::Vacant(entry) => entry.insert(value),\n        }\n    }\n    pub fn or_insert(self, default: T) -> OccupiedEntry<'a, T, A> {}\n    pub fn or_insert_with(self, default: impl FnOnce() -> T) -> OccupiedEntry<'a, T, A> {}\n    pub fn and_modify(self, f: impl FnOnce(&mut T)) -> Self {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n}\nimpl<'a, T, A> OccupiedEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> (T, VacantEntry<'a, T, A>) {}\n    #[inline]\n    pub fn get(&self) -> &T {}\n    #[inline]\n    pub fn get_mut(&mut self) -> &mut T {\n        unsafe { self.bucket.as_mut() }\n    }\n    pub fn into_mut(self) -> &'a mut T {}\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\nimpl<'a, T, A> VacantEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[inline]\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        let bucket = unsafe {\n            self.table.raw.insert_in_slot(self.hash, self.insert_slot, value)\n        };\n        OccupiedEntry {\n            hash: self.hash,\n            bucket,\n            table: self.table,\n        }\n    }\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry, replacing any existing value if there is\n/// one, and returns an [`OccupiedEntry`].\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// let entry = table\n///     .entry(hasher(&\"horseyland\"), |&x| x == \"horseyland\", hasher)\n///     .insert(\"horseyland\");\n///\n/// assert_eq!(entry.get(), &\"horseyland\");\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n1349 pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n1350     match self {\n1351         Entry::Occupied(mut entry) => {\n1352             *entry.get_mut() = value;\n1353             entry\n1354         }\n1355         Entry::Vacant(entry) => entry.insert(value),\n1356     }\n1357 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}