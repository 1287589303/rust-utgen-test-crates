{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct Difference<'a, T, S, A: Allocator = Global> {\n    iter: Iter<'a, T>,\n    other: &'a HashSet<T, S, A>,\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Iter<'a, T> {\n    inner: RawIter<T>,\n    marker: PhantomData<&'a T>,\n}\npub struct Iter<'a, K, V> {\n    inner: RawIter<(K, V)>,\n    marker: PhantomData<(&'a K, &'a V)>,\n}\nimpl<'a, T, S, A> Iterator for Difference<'a, T, S, A>\nwhere\n    T: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    type Item = &'a T;\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn next(&mut self) -> Option<&'a T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn size_hint(&self) -> (usize, Option<usize>) {\n        let (lower, upper) = self.iter.size_hint();\n        (lower.saturating_sub(self.other.len()), upper)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn fold<B, F>(self, init: B, mut f: F) -> B\n    where\n        Self: Sized,\n        F: FnMut(B, Self::Item) -> B,\n    {}\n}\nimpl<T, S, A: Allocator> HashSet<T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {\n        self.map.len()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2036 fn size_hint(&self) -> (usize, Option<usize>) {\n2037     let (lower, upper) = self.iter.size_hint();\n2038     (lower.saturating_sub(self.other.len()), upper)\n2039 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}