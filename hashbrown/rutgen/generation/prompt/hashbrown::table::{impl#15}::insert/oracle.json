{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct InsertSlot {\n    index: usize,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\nimpl<'a, T, A> VacantEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[inline]\n    pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n        let bucket = unsafe {\n            self.table.raw.insert_in_slot(self.hash, self.insert_slot, value)\n        };\n        OccupiedEntry {\n            hash: self.hash,\n            bucket,\n            table: self.table,\n        }\n    }\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\nimpl<T, A: Allocator> RawTable<T, A> {\n    const TABLE_LAYOUT: TableLayout = TableLayout::new::<T>();\n    #[inline]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn new_in(alloc: A) -> Self {\n        Self {\n            table: RawTableInner::NEW,\n            alloc,\n            marker: PhantomData,\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    unsafe fn new_uninitialized(\n        alloc: A,\n        buckets: usize,\n        fallibility: Fallibility,\n    ) -> Result<Self, TryReserveError> {\n        debug_assert!(buckets.is_power_of_two());\n        Ok(Self {\n            table: RawTableInner::new_uninitialized(\n                &alloc,\n                Self::TABLE_LAYOUT,\n                buckets,\n                fallibility,\n            )?,\n            alloc,\n            marker: PhantomData,\n        })\n    }\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            table: RawTableInner::with_capacity(&alloc, Self::TABLE_LAYOUT, capacity),\n            alloc,\n            marker: PhantomData,\n        }\n    }\n    #[inline]\n    pub fn allocator(&self) -> &A {}\n    #[inline]\n    pub fn data_end(&self) -> NonNull<T> {}\n    #[inline]\n    #[cfg(feature = \"nightly\")]\n    pub unsafe fn data_start(&self) -> NonNull<T> {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n    #[inline]\n    pub unsafe fn bucket_index(&self, bucket: &Bucket<T>) -> usize {}\n    #[inline]\n    pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    unsafe fn erase_no_drop(&mut self, item: &Bucket<T>) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::needless_pass_by_value)]\n    pub unsafe fn erase(&mut self, item: Bucket<T>) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::needless_pass_by_value)]\n    pub unsafe fn remove(&mut self, item: Bucket<T>) -> (T, InsertSlot) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear_no_drop(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<(), TryReserveError> {}\n    #[cold]\n    #[inline(never)]\n    unsafe fn reserve_rehash(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n        fallibility: Fallibility,\n    ) -> Result<(), TryReserveError> {}\n    unsafe fn resize(\n        &mut self,\n        capacity: usize,\n        hasher: impl Fn(&T) -> u64,\n        fallibility: Fallibility,\n    ) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> &mut T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[cfg(feature = \"rustc-internal-api\")]\n    pub unsafe fn insert_no_grow(&mut self, hash: u64, value: T) -> Bucket<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn replace_bucket_with<F>(&mut self, bucket: Bucket<T>, f: F) -> bool\n    where\n        F: FnOnce(T) -> Option<T>,\n    {}\n    #[inline]\n    pub fn find_or_find_insert_slot(\n        &mut self,\n        hash: u64,\n        mut eq: impl FnMut(&T) -> bool,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<Bucket<T>, InsertSlot> {}\n    #[inline]\n    pub unsafe fn insert_in_slot(\n        &mut self,\n        hash: u64,\n        slot: InsertSlot,\n        value: T,\n    ) -> Bucket<T> {\n        let old_ctrl = *self.table.ctrl(slot.index);\n        self.table.record_item_insert_at(slot.index, old_ctrl, hash);\n        let bucket = self.bucket(slot.index);\n        bucket.write(value);\n        bucket\n    }\n    #[inline]\n    pub fn find(&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>> {}\n    #[inline]\n    pub fn get(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {}\n    #[inline]\n    pub fn get_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {}\n    pub fn get_many_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    pub unsafe fn get_many_unchecked_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    unsafe fn get_many_mut_pointers<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        mut eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<NonNull<T>>; N] {}\n    #[inline]\n    pub fn capacity(&self) -> usize {}\n    #[inline]\n    pub fn len(&self) -> usize {}\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    #[inline]\n    pub fn buckets(&self) -> usize {}\n    #[inline]\n    pub unsafe fn is_bucket_full(&self, index: usize) -> bool {}\n    #[inline]\n    pub unsafe fn iter(&self) -> RawIter<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn iter_hash(&self, hash: u64) -> RawIterHash<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> RawDrain<'_, T, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn drain_iter_from(&mut self, iter: RawIter<T>) -> RawDrain<'_, T, A> {}\n    pub unsafe fn into_iter_from(self, iter: RawIter<T>) -> RawIntoIter<T, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) fn into_allocation(self) -> Option<(NonNull<u8>, Layout, A)> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts a new element into the table with the hash that was used to\n/// obtain the `VacantEntry`.\n///\n/// An `OccupiedEntry` is returned for the newly inserted element.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// if let Entry::Vacant(o) = table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n///     o.insert(\"poneyland\");\n/// }\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&x| x == \"poneyland\"),\n///     Some(&\"poneyland\")\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n1863 pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {\n1864     let bucket = unsafe {\n1865         self.table\n1866             .raw\n1867             .insert_in_slot(self.hash, self.insert_slot, value)\n1868     };\n1869     OccupiedEntry {\n1870         hash: self.hash,\n1871         bucket,\n1872         table: self.table,\n1873     }\n1874 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}