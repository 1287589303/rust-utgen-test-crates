{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(dead_code)]\nfn assert_covariance() {\n    fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {\n        v\n    }\n    fn map_val<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str> {\n        v\n    }\n    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8> {\n        v\n    }\n    fn iter_val<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str> {\n        v\n    }\n    fn into_iter_key<'new, A: Allocator>(\n        v: IntoIter<&'static str, u8, A>,\n    ) -> IntoIter<&'new str, u8, A> {\n        v\n    }\n    fn into_iter_val<'new, A: Allocator>(\n        v: IntoIter<u8, &'static str, A>,\n    ) -> IntoIter<u8, &'new str, A> {\n        v\n    }\n    fn keys_key<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8> {\n        v\n    }\n    fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> {\n        v\n    }\n    fn values_key<'a, 'new>(\n        v: Values<'a, &'static str, u8>,\n    ) -> Values<'a, &'new str, u8> {\n        v\n    }\n    fn values_val<'a, 'new>(\n        v: Values<'a, u8, &'static str>,\n    ) -> Values<'a, u8, &'new str> {\n        v\n    }\n    fn drain<'new>(\n        d: Drain<'static, &'static str, &'static str>,\n    ) -> Drain<'new, &'new str, &'new str> {\n        d\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n4645 fn assert_covariance() {\n4646     fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {\n4647         v\n4648     }\n4649     fn map_val<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str> {\n4650         v\n4651     }\n4652     fn iter_key<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8> {\n4653         v\n4654     }\n4655     fn iter_val<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str> {\n4656         v\n4657     }\n4658     fn into_iter_key<'new, A: Allocator>(\n4659         v: IntoIter<&'static str, u8, A>,\n4660     ) -> IntoIter<&'new str, u8, A> {\n4661         v\n4662     }\n4663     fn into_iter_val<'new, A: Allocator>(\n4664         v: IntoIter<u8, &'static str, A>,\n4665     ) -> IntoIter<u8, &'new str, A> {\n4666         v\n4667     }\n4668     fn keys_key<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8> {\n4669         v\n4670     }\n4671     fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> {\n4672         v\n4673     }\n4674     fn values_key<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8> {\n4675         v\n4676     }\n4677     fn values_val<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str> {\n4678         v\n4679     }\n4680     fn drain<'new>(\n4681         d: Drain<'static, &'static str, &'static str>,\n4682     ) -> Drain<'new, &'new str, &'new str> {\n4683         d\n4684     }\n4685 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}