{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawOccupiedEntryMut<'a, K, V, S, A: Allocator = Global> {\n    elem: Bucket<(K, V)>,\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub enum RawEntryMut<'a, K, V, S, A: Allocator = Global> {\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.raw_entry_mut().from_key(&\"a\") {\n    ///     RawEntryMut::Vacant(_) => unreachable!(),\n    ///     RawEntryMut::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(RawOccupiedEntryMut<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::{hash_map::RawEntryMut, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.raw_entry_mut().from_key(\"a\") {\n    ///     RawEntryMut::Occupied(_) => unreachable!(),\n    ///     RawEntryMut::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(RawVacantEntryMut<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> RawEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        match self {\n            RawEntryMut::Occupied(mut entry) => {\n                entry.insert(value);\n                entry\n            }\n            RawEntryMut::Vacant(entry) => entry.insert_entry(key, value),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)\n    where\n        F: FnOnce() -> (K, V),\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut K, &mut V),\n    {\n        match self {\n            RawEntryMut::Occupied(mut entry) => {\n                {\n                    let (k, v) = entry.get_key_value_mut();\n                    f(k, v);\n                }\n                RawEntryMut::Occupied(entry)\n            }\n            RawEntryMut::Vacant(entry) => RawEntryMut::Vacant(entry),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_replace_entry_with<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {\n        match self {\n            RawEntryMut::Occupied(entry) => entry.replace_entry_with(f),\n            RawEntryMut::Vacant(_) => self,\n        }\n    }\n}\nimpl<'a, K, V, S, A: Allocator> RawOccupiedEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key_mut(&mut self) -> &mut K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key(self) -> &'a mut K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_key_value(&self) -> (&K, &V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key_value(self) -> (&'a mut K, &'a mut V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {\n        mem::replace(self.get_mut(), value)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_key(&mut self, key: K) -> K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> RawEntryMut<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {}\n}\nimpl<'a, K, V, S, A: Allocator> RawVacantEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::shadow_unrelated)]\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_with_hasher<H>(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n        hasher: H,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        H: Fn(&K) -> u64,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn insert_entry(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let hash = make_hash::<K, S>(self.hash_builder, &key);\n        let elem = self\n            .table\n            .insert(hash, (key, value), make_hasher::<_, V, S>(self.hash_builder));\n        RawOccupiedEntryMut {\n            elem,\n            table: self.table,\n            hash_builder: self.hash_builder,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry, and returns a `RawOccupiedEntryMut`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// let entry = map.raw_entry_mut().from_key(\"horseyland\").insert(\"horseyland\", 37);\n///\n/// assert_eq!(entry.remove_entry(), (\"horseyland\", 37));\n/// ```\n724 pub fn insert(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n725 where\n726     K: Hash,\n727     S: BuildHasher,\n728 {\n729     match self {\n730         RawEntryMut::Occupied(mut entry) => {\n731             entry.insert(value);\n732             entry\n733         }\n734         RawEntryMut::Vacant(entry) => entry.insert_entry(key, value),\n735     }\n736 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}