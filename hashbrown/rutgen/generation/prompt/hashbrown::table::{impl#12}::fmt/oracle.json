{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\nimpl<T: fmt::Debug, A: Allocator> fmt::Debug for OccupiedEntry<'_, T, A> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"OccupiedEntry\").field(\"value\", self.get()).finish()\n    }\n}\nimpl<'a, T, A> OccupiedEntry<'a, T, A>\nwhere\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> (T, VacantEntry<'a, T, A>) {}\n    #[inline]\n    pub fn get(&self) -> &T {\n        unsafe { self.bucket.as_ref() }\n    }\n    #[inline]\n    pub fn get_mut(&mut self) -> &mut T {}\n    pub fn into_mut(self) -> &'a mut T {}\n    pub fn into_table(self) -> &'a mut HashTable<T, A> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1570 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n1571     f.debug_struct(\"OccupiedEntry\")\n1572         .field(\"value\", self.get())\n1573         .finish()\n1574 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}