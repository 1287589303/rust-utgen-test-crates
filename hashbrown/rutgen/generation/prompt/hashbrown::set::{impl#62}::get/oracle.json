{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub enum Entry<'a, T, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_set::{Entry, HashSet};\n    /// let mut set: HashSet<_> = [\"a\", \"b\"].into();\n    ///\n    /// match set.entry(\"a\") {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, T, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_set::{Entry, HashSet};\n    /// let mut set: HashSet<&str> = HashSet::new();\n    ///\n    /// match set.entry(\"a\") {\n    ///     Entry::Occupied(_) => unreachable!(),\n    ///     Entry::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntry<'a, T, S, A>),\n}\nimpl<'a, T, S, A: Allocator> Entry<'a, T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self) -> OccupiedEntry<'a, T, S, A>\n    where\n        T: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self)\n    where\n        T: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &T {\n        match *self {\n            Entry::Occupied(ref entry) => entry.get(),\n            Entry::Vacant(ref entry) => entry.get(),\n        }\n    }\n}\nimpl<T, S, A: Allocator> OccupiedEntry<'_, T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &T {\n        self.inner.key()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> T {}\n}\nimpl<'a, T, S, A: Allocator> VacantEntry<'a, T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &T {\n        self.inner.key()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_value(self) -> T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self) -> OccupiedEntry<'a, T, S, A>\n    where\n        T: Hash,\n        S: BuildHasher,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Returns a reference to this entry's value.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set: HashSet<&str> = HashSet::new();\n/// set.entry(\"poneyland\").or_insert();\n/// // existing key\n/// assert_eq!(set.entry(\"poneyland\").get(), &\"poneyland\");\n/// // nonexistent key\n/// assert_eq!(set.entry(\"horseland\").get(), &\"horseland\");\n/// ```\n2421 pub fn get(&self) -> &T {\n2422     match *self {\n2423         Entry::Occupied(ref entry) => entry.get(),\n2424         Entry::Vacant(ref entry) => entry.get(),\n2425     }\n2426 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}