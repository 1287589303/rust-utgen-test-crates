{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Difference<'a, T, S, A: Allocator = Global> {\n    iter: Iter<'a, T>,\n    other: &'a HashSet<T, S, A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Union<'a, T, S, A: Allocator = Global> {\n    iter: Chain<Iter<'a, T>, Difference<'a, T, S, A>>,\n}\nimpl<T, S, A> HashSet<T, S, A>\nwhere\n    T: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn difference<'a>(&'a self, other: &'a Self) -> Difference<'a, T, S, A> {\n        Difference {\n            iter: self.iter(),\n            other,\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn symmetric_difference<'a>(\n        &'a self,\n        other: &'a Self,\n    ) -> SymmetricDifference<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn intersection<'a>(&'a self, other: &'a Self) -> Intersection<'a, T, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn union<'a>(&'a self, other: &'a Self) -> Union<'a, T, S, A> {\n        let (smaller, larger) = if self.len() <= other.len() {\n            (self, other)\n        } else {\n            (other, self)\n        };\n        Union {\n            iter: larger.iter().chain(smaller.difference(larger)),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains<Q>(&self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get<Q>(&self, value: &Q) -> Option<&T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_or_insert_with<Q, F>(&mut self, value: &Q, f: F) -> &T\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n        F: FnOnce(&Q) -> T,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, value: T) -> Entry<'_, T, S, A> {}\n    pub fn is_disjoint(&self, other: &Self) -> bool {}\n    pub fn is_subset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_superset(&self, other: &Self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: T) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, value: T) -> &T {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace(&mut self, value: T) -> Option<T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, value: &Q) -> bool\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn take<Q>(&mut self, value: &Q) -> Option<T>\n    where\n        Q: Hash + Equivalent<T> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\nimpl<T, S, A: Allocator> HashSet<T, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn capacity(&self) -> usize {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn iter(&self) -> Iter<'_, T> {\n        Iter { iter: self.map.keys() }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn len(&self) -> usize {\n        self.map.len()\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn is_empty(&self) -> bool {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn retain<F>(&mut self, mut f: F)\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&T) -> bool,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn clear(&mut self) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Visits the values representing the union,\n/// i.e., all the values in `self` or `other`, without duplicates.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let a: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = [4, 2, 3, 4].into_iter().collect();\n///\n/// // Print 1, 2, 3, 4 in arbitrary order.\n/// for x in a.union(&b) {\n///     println!(\"{}\", x);\n/// }\n///\n/// let union: HashSet<_> = a.union(&b).collect();\n/// assert_eq!(union, [1, 2, 3, 4].iter().collect());\n/// ```\n830 pub fn union<'a>(&'a self, other: &'a Self) -> Union<'a, T, S, A> {\n831     // We'll iterate one set in full, and only the remaining difference from the other.\n832     // Use the smaller set for the difference in order to reduce hash lookups.\n833     let (smaller, larger) = if self.len() <= other.len() {\n834         (self, other)\n835     } else {\n836         (other, self)\n837     };\n838     Union {\n839         iter: larger.iter().chain(smaller.difference(larger)),\n840     }\n841 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}