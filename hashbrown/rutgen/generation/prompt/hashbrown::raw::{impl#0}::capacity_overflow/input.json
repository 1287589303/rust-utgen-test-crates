{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\n#[derive(Copy, Clone)]\nenum Fallibility {\n    Fallible,\n    Infallible,\n}\n#[derive(Clone, PartialEq, Eq, Debug)]\npub enum TryReserveError {\n    /// Error due to the computed capacity exceeding the collection's maximum\n    /// (usually `isize::MAX` bytes).\n    CapacityOverflow,\n    /// The memory allocator returned an error\n    AllocError {\n        /// The layout of the allocation request that failed.\n        layout: alloc::alloc::Layout,\n    },\n}\nimpl Fallibility {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn capacity_overflow(self) -> TryReserveError {\n        match self {\n            Fallibility::Fallible => TryReserveError::CapacityOverflow,\n            Fallibility::Infallible => panic!(\"Hash table capacity overflow\"),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn alloc_err(self, layout: Layout) -> TryReserveError {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Error to return on capacity overflow.\n34 fn capacity_overflow(self) -> TryReserveError {\n35     match self {\n36         Fallibility::Fallible => TryReserveError::CapacityOverflow,\n37         Fallibility::Infallible => panic!(\"Hash table capacity overflow\"),\n38     }\n39 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}