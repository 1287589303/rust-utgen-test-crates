{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct IntoKeys<K, V, A: Allocator = Global> {\n    inner: IntoIter<K, V, A>,\n}\npub struct IntoIter<K, V, A: Allocator = Global> {\n    inner: RawIntoIter<(K, V), A>,\n}\npub struct IntoIter<T, A = Global>\nwhere\n    A: Allocator,\n{\n    inner: RawIntoIter<T, A>,\n}\npub struct Iter<'a, K, V> {\n    inner: RawIter<(K, V)>,\n    marker: PhantomData<(&'a K, &'a V)>,\n}\npub struct IntoIter<K, A: Allocator = Global> {\n    iter: map::IntoIter<K, (), A>,\n}\nimpl<K: Debug, V: Debug, A: Allocator> fmt::Debug for IntoKeys<K, V, A> {\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n    }\n}\nimpl<K, V, A: Allocator> IntoIter<K, V, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(super) fn iter(&self) -> Iter<'_, K, V> {\n        Iter {\n            inner: self.inner.iter(),\n            marker: PhantomData,\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2343 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n2344     f.debug_list()\n2345         .entries(self.inner.iter().map(|(k, _)| k))\n2346         .finish()\n2347 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}