{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<T, A> HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    pub const fn new_in(alloc: A) -> Self {\n        Self {\n            raw: RawTable::new_in(alloc),\n        }\n    }\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            raw: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    pub fn allocator(&self) -> &A {}\n    pub fn find(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {}\n    pub fn find_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn find_entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n    ) -> Result<OccupiedEntry<'_, T, A>, AbsentEntry<'_, T, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Entry<'_, T, A> {}\n    pub fn insert_unique(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> OccupiedEntry<'_, T, A> {}\n    pub fn clear(&mut self) {}\n    pub fn shrink_to_fit(&mut self, hasher: impl Fn(&T) -> u64) {}\n    pub fn shrink_to(&mut self, min_capacity: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn try_reserve(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<(), TryReserveError> {}\n    pub fn capacity(&self) -> usize {}\n    pub fn len(&self) -> usize {}\n    pub fn is_empty(&self) -> bool {}\n    pub fn iter(&self) -> Iter<'_, T> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, T> {}\n    pub fn iter_hash(&self, hash: u64) -> IterHash<'_, T> {}\n    pub fn iter_hash_mut(&mut self, hash: u64) -> IterHashMut<'_, T> {}\n    pub fn retain(&mut self, mut f: impl FnMut(&mut T) -> bool) {}\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&mut T) -> bool,\n    {}\n    pub fn get_many_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {\n        self.raw.get_many_mut(hashes, eq)\n    }\n    pub unsafe fn get_many_unchecked_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Attempts to get mutable references to `N` values in the map at once.\n///\n/// The `eq` argument should be a closure such that `eq(i, k)` returns true if `k` is equal to\n/// the `i`th key to be looked up.\n///\n/// Returns an array of length `N` with the results of each query. For soundness, at most one\n/// mutable reference will be returned to any value. `None` will be used if the key is missing.\n///\n/// # Panics\n///\n/// Panics if any keys are overlapping.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut libraries: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// for (k, v) in [\n///     (\"Bodleian Library\", 1602),\n///     (\"Athenæum\", 1807),\n///     (\"Herzogin-Anna-Amalia-Bibliothek\", 1691),\n///     (\"Library of Congress\", 1800),\n/// ] {\n///     libraries.insert_unique(hasher(&k), (k, v), |(k, _)| hasher(&k));\n/// }\n///\n/// let keys = [\"Athenæum\", \"Library of Congress\"];\n/// let got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\n/// assert_eq!(\n///     got,\n///     [Some(&mut (\"Athenæum\", 1807)), Some(&mut (\"Library of Congress\", 1800))],\n/// );\n///\n/// // Missing keys result in None\n/// let keys = [\"Athenæum\", \"New York Public Library\"];\n/// let got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\n/// assert_eq!(got, [Some(&mut (\"Athenæum\", 1807)), None]);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n///\n/// ```should_panic\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// # use hashbrown::{HashTable, DefaultHashBuilder};\n/// # use std::hash::BuildHasher;\n///\n/// let mut libraries: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// for (k, v) in [\n///     (\"Athenæum\", 1807),\n///     (\"Library of Congress\", 1800),\n/// ] {\n///     libraries.insert_unique(hasher(&k), (k, v), |(k, _)| hasher(&k));\n/// }\n///\n/// // Duplicate keys result in a panic!\n/// let keys = [\"Athenæum\", \"Athenæum\"];\n/// let got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test();\n/// #     #[cfg(not(feature = \"nightly\"))]\n/// #     panic!();\n/// # }\n/// ```\n1041 pub fn get_many_mut<const N: usize>(\n1042     &mut self,\n1043     hashes: [u64; N],\n1044     eq: impl FnMut(usize, &T) -> bool,\n1045 ) -> [Option<&'_ mut T>; N] {\n1046     self.raw.get_many_mut(hashes, eq)\n1047 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}