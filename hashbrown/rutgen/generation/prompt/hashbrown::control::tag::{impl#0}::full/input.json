{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/control/tag.rs\n// crate name is hashbrown\nuse core::{fmt, mem};\n#[derive(Copy, Clone, PartialEq, Eq)]\n#[repr(transparent)]\npub(crate) struct Tag(pub(super) u8);\nimpl Tag {\n    pub(crate) const EMPTY: Tag = Tag(0b1111_1111);\n    pub(crate) const DELETED: Tag = Tag(0b1000_0000);\n    #[inline]\n    pub(crate) const fn is_full(self) -> bool {}\n    #[inline]\n    pub(crate) const fn is_special(self) -> bool {}\n    #[inline]\n    pub(crate) const fn special_is_empty(self) -> bool {}\n    #[inline]\n    #[allow(clippy::cast_possible_truncation)]\n    pub(crate) const fn full(hash: u64) -> Tag {\n        const MIN_HASH_LEN: usize = if mem::size_of::<usize>() < mem::size_of::<u64>() {\n            mem::size_of::<usize>()\n        } else {\n            mem::size_of::<u64>()\n        };\n        let top7 = hash >> (MIN_HASH_LEN * 8 - 7);\n        Tag((top7 & 0x7f) as u8)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates a control tag representing a full bucket with the given hash.\n36 pub(crate) const fn full(hash: u64) -> Tag {\n37     // Constant for function that grabs the top 7 bits of the hash.\n38     const MIN_HASH_LEN: usize = if mem::size_of::<usize>() < mem::size_of::<u64>() {\n39         mem::size_of::<usize>()\n40     } else {\n41         mem::size_of::<u64>()\n42     };\n43 \n44     // Grab the top 7 bits of the hash. While the hash is normally a full 64-bit\n45     // value, some hash functions (such as FxHash) produce a usize result\n46     // instead, which means that the top 32 bits are 0 on 32-bit platforms.\n47     // So we use MIN_HASH_LEN constant to handle this.\n48     let top7 = hash >> (MIN_HASH_LEN * 8 - 7);\n49     Tag((top7 & 0x7f) as u8) // truncation\n50 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}