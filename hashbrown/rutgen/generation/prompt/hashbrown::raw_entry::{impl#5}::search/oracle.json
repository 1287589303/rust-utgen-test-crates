{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawEntryBuilder<'a, K, V, S, A: Allocator = Global> {\n    map: &'a HashMap<K, V, S, A>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<'a, K, V, S, A: Allocator> RawEntryBuilder<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_key<Q>(self, k: &Q) -> Option<(&'a K, &'a V)>\n    where\n        S: BuildHasher,\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_key_hashed_nocheck<Q>(self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>\n    where\n        Q: Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>\n    where\n        F: FnMut(&K) -> bool,\n    {\n        match self.map.table.get(hash, |(k, _)| is_match(k)) {\n            Some((key, value)) => Some((key, value)),\n            None => None,\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::wrong_self_convention)]\n    pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>\n    where\n        F: FnMut(&K) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n670 fn search<F>(self, hash: u64, mut is_match: F) -> Option<(&'a K, &'a V)>\n671 where\n672     F: FnMut(&K) -> bool,\n673 {\n674     match self.map.table.get(hash, |(k, _)| is_match(k)) {\n675         Some((key, value)) => Some((key, value)),\n676         None => None,\n677     }\n678 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}