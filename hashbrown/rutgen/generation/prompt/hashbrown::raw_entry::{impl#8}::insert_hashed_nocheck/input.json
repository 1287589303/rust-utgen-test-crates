{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw_entry.rs\n// crate name is hashbrown\nuse crate::hash_map::{equivalent, make_hash, make_hasher};\nuse crate::raw::{Allocator, Bucket, Global, RawTable};\nuse crate::{Equivalent, HashMap};\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::mem;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct RawVacantEntryMut<'a, K, V, S, A: Allocator = Global> {\n    table: &'a mut RawTable<(K, V), A>,\n    hash_builder: &'a S,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<'a, K, V, S, A: Allocator> RawVacantEntryMut<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    #[allow(clippy::shadow_unrelated)]\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let &mut (ref mut k, ref mut v) = self\n            .table\n            .insert_entry(hash, (key, value), make_hasher::<_, V, S>(self.hash_builder));\n        (k, v)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_with_hasher<H>(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n        hasher: H,\n    ) -> (&'a mut K, &'a mut V)\n    where\n        H: Fn(&K) -> u64,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    fn insert_entry(self, key: K, value: V) -> RawOccupiedEntryMut<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hasher<Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_\nwhere\n    Q: Hash,\n    S: BuildHasher,\n{\n    move |val| make_hash::<Q, S>(hash_builder, &val.0)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Sets the value of the entry with the `VacantEntry`'s key,\n/// and returns a mutable reference to it.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n/// let key = \"c\";\n/// let hash = compute_hash(map.hasher(), &key);\n///\n/// match map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n///     RawEntryMut::Occupied(_) => panic!(),\n///     RawEntryMut::Vacant(v) => assert_eq!(\n///         v.insert_hashed_nocheck(hash, key, 300),\n///         (&mut \"c\", &mut 300)\n///     ),\n/// }\n///\n/// assert_eq!(map[&\"c\"], 300);\n/// ```\n1363 pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)\n1364 where\n1365     K: Hash,\n1366     S: BuildHasher,\n1367 {\n1368     let &mut (ref mut k, ref mut v) = self.table.insert_entry(\n1369         hash,\n1370         (key, value),\n1371         make_hasher::<_, V, S>(self.hash_builder),\n1372     );\n1373     (k, v)\n1374 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}