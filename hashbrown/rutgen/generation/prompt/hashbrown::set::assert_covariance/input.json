{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(dead_code)]\nfn assert_covariance() {\n    fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> {\n        v\n    }\n    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> {\n        v\n    }\n    fn into_iter<'new, A: Allocator>(\n        v: IntoIter<&'static str, A>,\n    ) -> IntoIter<&'new str, A> {\n        v\n    }\n    fn difference<'a, 'new, A: Allocator>(\n        v: Difference<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Difference<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn symmetric_difference<'a, 'new, A: Allocator>(\n        v: SymmetricDifference<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> SymmetricDifference<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn intersection<'a, 'new, A: Allocator>(\n        v: Intersection<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Intersection<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn union<'a, 'new, A: Allocator>(\n        v: Union<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Union<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn drain<'new, A: Allocator>(\n        d: Drain<'static, &'static str, A>,\n    ) -> Drain<'new, &'new str, A> {\n        d\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2544 fn assert_covariance() {\n2545     fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> {\n2546         v\n2547     }\n2548     fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> {\n2549         v\n2550     }\n2551     fn into_iter<'new, A: Allocator>(v: IntoIter<&'static str, A>) -> IntoIter<&'new str, A> {\n2552         v\n2553     }\n2554     fn difference<'a, 'new, A: Allocator>(\n2555         v: Difference<'a, &'static str, DefaultHashBuilder, A>,\n2556     ) -> Difference<'a, &'new str, DefaultHashBuilder, A> {\n2557         v\n2558     }\n2559     fn symmetric_difference<'a, 'new, A: Allocator>(\n2560         v: SymmetricDifference<'a, &'static str, DefaultHashBuilder, A>,\n2561     ) -> SymmetricDifference<'a, &'new str, DefaultHashBuilder, A> {\n2562         v\n2563     }\n2564     fn intersection<'a, 'new, A: Allocator>(\n2565         v: Intersection<'a, &'static str, DefaultHashBuilder, A>,\n2566     ) -> Intersection<'a, &'new str, DefaultHashBuilder, A> {\n2567         v\n2568     }\n2569     fn union<'a, 'new, A: Allocator>(\n2570         v: Union<'a, &'static str, DefaultHashBuilder, A>,\n2571     ) -> Union<'a, &'new str, DefaultHashBuilder, A> {\n2572         v\n2573     }\n2574     fn drain<'new, A: Allocator>(d: Drain<'static, &'static str, A>) -> Drain<'new, &'new str, A> {\n2575         d\n2576     }\n2577 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}