{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(dead_code)]\nfn assert_covariance() {\n    fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> {\n        v\n    }\n    fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> {\n        v\n    }\n    fn into_iter<'new, A: Allocator>(\n        v: IntoIter<&'static str, A>,\n    ) -> IntoIter<&'new str, A> {\n        v\n    }\n    fn difference<'a, 'new, A: Allocator>(\n        v: Difference<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Difference<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn symmetric_difference<'a, 'new, A: Allocator>(\n        v: SymmetricDifference<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> SymmetricDifference<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn intersection<'a, 'new, A: Allocator>(\n        v: Intersection<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Intersection<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn union<'a, 'new, A: Allocator>(\n        v: Union<'a, &'static str, DefaultHashBuilder, A>,\n    ) -> Union<'a, &'new str, DefaultHashBuilder, A> {\n        v\n    }\n    fn drain<'new, A: Allocator>(\n        d: Drain<'static, &'static str, A>,\n    ) -> Drain<'new, &'new str, A> {\n        d\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n2544 fn assert_covariance() {\n2545     fn set<'new>(v: HashSet<&'static str>) -> HashSet<&'new str> {\n2546         v\n2547     }\n2548     fn iter<'a, 'new>(v: Iter<'a, &'static str>) -> Iter<'a, &'new str> {\n2549         v\n2550     }\n2551     fn into_iter<'new, A: Allocator>(v: IntoIter<&'static str, A>) -> IntoIter<&'new str, A> {\n2552         v\n2553     }\n2554     fn difference<'a, 'new, A: Allocator>(\n2555         v: Difference<'a, &'static str, DefaultHashBuilder, A>,\n2556     ) -> Difference<'a, &'new str, DefaultHashBuilder, A> {\n2557         v\n2558     }\n2559     fn symmetric_difference<'a, 'new, A: Allocator>(\n2560         v: SymmetricDifference<'a, &'static str, DefaultHashBuilder, A>,\n2561     ) -> SymmetricDifference<'a, &'new str, DefaultHashBuilder, A> {\n2562         v\n2563     }\n2564     fn intersection<'a, 'new, A: Allocator>(\n2565         v: Intersection<'a, &'static str, DefaultHashBuilder, A>,\n2566     ) -> Intersection<'a, &'new str, DefaultHashBuilder, A> {\n2567         v\n2568     }\n2569     fn union<'a, 'new, A: Allocator>(\n2570         v: Union<'a, &'static str, DefaultHashBuilder, A>,\n2571     ) -> Union<'a, &'new str, DefaultHashBuilder, A> {\n2572         v\n2573     }\n2574     fn drain<'new, A: Allocator>(d: Drain<'static, &'static str, A>) -> Drain<'new, &'new str, A> {\n2575         d\n2576     }\n2577 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}