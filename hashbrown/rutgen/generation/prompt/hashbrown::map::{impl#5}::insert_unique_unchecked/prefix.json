{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<K, V, S, A> HashMap<K, V, S, A>\nwhere\n    K: Eq + Hash,\n    S: BuildHasher,\n    A: Allocator,\n{\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn reserve(&mut self, additional: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to_fit(&mut self) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry_ref<'a, 'b, Q>(\n        &'a mut self,\n        key: &'b Q,\n    ) -> EntryRef<'a, 'b, K, Q, V, S, A>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get<Q>(&self, k: &Q) -> Option<&V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value<Q>(&self, k: &Q) -> Option<(&K, &V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    fn get_inner<Q>(&self, k: &Q) -> Option<&(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn get_key_value_mut<Q>(&mut self, k: &Q) -> Option<(&K, &mut V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn contains_key<Q>(&self, k: &Q) -> bool\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut<Q>(&mut self, k: &Q) -> Option<&mut V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    fn get_inner_mut<Q>(&mut self, k: &Q) -> Option<&mut (K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut V>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub fn get_many_key_value_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    pub unsafe fn get_many_key_value_unchecked_mut<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<(&'_ K, &'_ mut V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn get_many_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    unsafe fn get_many_unchecked_mut_inner<Q, const N: usize>(\n        &mut self,\n        ks: [&Q; N],\n    ) -> [Option<&'_ mut (K, V)>; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    fn build_hashes_inner<Q, const N: usize>(&self, ks: [&Q; N]) -> [u64; N]\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, k: K, v: V) -> Option<V> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub(crate) fn find_or_find_insert_slot<Q>(\n        &mut self,\n        hash: u64,\n        key: &Q,\n    ) -> Result<Bucket<(K, V)>, crate::raw::InsertSlot>\n    where\n        Q: Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub unsafe fn insert_unique_unchecked(&mut self, k: K, v: V) -> (&K, &mut V) {\n        let hash = make_hash::<K, S>(&self.hash_builder, &k);\n        let bucket = self\n            .table\n            .insert(hash, (k, v), make_hasher::<_, V, S>(&self.hash_builder));\n        let (k_ref, v_ref) = unsafe { bucket.as_mut() };\n        (k_ref, v_ref)\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn try_insert(\n        &mut self,\n        key: K,\n        value: V,\n    ) -> Result<&mut V, OccupiedError<'_, K, V, S, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove<Q>(&mut self, k: &Q) -> Option<V>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry<Q>(&mut self, k: &Q) -> Option<(K, V)>\n    where\n        Q: Hash + Equivalent<K> + ?Sized,\n    {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hasher<Q, V, S>(hash_builder: &S) -> impl Fn(&(Q, V)) -> u64 + '_\nwhere\n    Q: Hash,\n    S: BuildHasher,\n{\n    move |val| make_hash::<Q, S>(hash_builder, &val.0)\n}\n#[cfg(feature = \"nightly\")]\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hash<Q, S>(hash_builder: &S, val: &Q) -> u64\nwhere\n    Q: Hash + ?Sized,\n    S: BuildHasher,\n{\n    hash_builder.hash_one(val)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Insert a key-value pair into the map without checking\n/// if the key already exists in the map.\n///\n/// This operation is faster than regular insert, because it does not perform\n/// lookup before insertion.\n///\n/// This operation is useful during initial population of the map.\n/// For example, when constructing a map from another map, we know\n/// that keys are unique.\n///\n/// Returns a reference to the key and value just inserted.\n///\n/// # Safety\n///\n/// This operation is safe if a key does not exist in the map.\n///\n/// However, if a key exists in the map already, the behavior is unspecified:\n/// this operation may panic, loop forever, or any following operation with the map\n/// may panic, loop forever or return arbitrary result.\n///\n/// That said, this operation (and following operations) are guaranteed to\n/// not violate memory safety.\n///\n/// However this operation is still unsafe because the resulting `HashMap`\n/// may be passed to unsafe code which does expect the map to behave\n/// correctly, and would cause unsoundness as a result.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map1 = HashMap::new();\n/// assert_eq!(map1.insert(1, \"a\"), None);\n/// assert_eq!(map1.insert(2, \"b\"), None);\n/// assert_eq!(map1.insert(3, \"c\"), None);\n/// assert_eq!(map1.len(), 3);\n///\n/// let mut map2 = HashMap::new();\n///\n/// for (key, value) in map1.into_iter() {\n///     unsafe {\n///         map2.insert_unique_unchecked(key, value);\n///     }\n/// }\n///\n/// let (key, value) = unsafe { map2.insert_unique_unchecked(4, \"d\") };\n/// assert_eq!(key, &4);\n/// assert_eq!(value, &mut \"d\");\n/// *value = \"e\";\n///\n/// assert_eq!(map2[&1], \"a\");\n/// assert_eq!(map2[&2], \"b\");\n/// assert_eq!(map2[&3], \"c\");\n/// assert_eq!(map2[&4], \"e\");\n/// assert_eq!(map2.len(), 4);\n/// ```\n1877 pub unsafe fn insert_unique_unchecked(&mut self, k: K, v: V) -> (&K, &mut V) {\n1878     let hash = make_hash::<K, S>(&self.hash_builder, &k);\n1879     let bucket = self\n1880         .table\n1881         .insert(hash, (k, v), make_hasher::<_, V, S>(&self.hash_builder));\n1882     let (k_ref, v_ref) = unsafe { bucket.as_mut() };\n1883     (k_ref, v_ref)\n1884 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}