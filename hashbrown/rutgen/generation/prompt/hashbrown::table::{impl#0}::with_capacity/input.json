{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<T> HashTable<T, Global> {\n    pub const fn new() -> Self {\n        Self { raw: RawTable::new() }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self {\n            raw: RawTable::with_capacity(capacity),\n        }\n    }\n}\nimpl<T> RawTable<T, Global> {\n    #[inline]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn new() -> Self {\n        Self {\n            table: RawTableInner::NEW,\n            alloc: Global,\n            marker: PhantomData,\n        }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self::with_capacity_in(capacity, Global)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an empty `HashTable` with the specified capacity.\n///\n/// The hash table will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash table will not allocate.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashTable;\n/// let mut table: HashTable<&str> = HashTable::with_capacity(10);\n/// assert_eq!(table.len(), 0);\n/// assert!(table.capacity() >= 10);\n/// ```\n87 pub fn with_capacity(capacity: usize) -> Self {\n88     Self {\n89         raw: RawTable::with_capacity(capacity),\n90     }\n91 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}