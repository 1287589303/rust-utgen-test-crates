{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<T> HashTable<T, Global> {\n    pub const fn new() -> Self {\n        Self { raw: RawTable::new() }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self {\n            raw: RawTable::with_capacity(capacity),\n        }\n    }\n}\nimpl<T> RawTable<T, Global> {\n    #[inline]\n    #[cfg_attr(feature = \"rustc-dep-of-std\", rustc_const_stable_indirect)]\n    pub const fn new() -> Self {\n        Self {\n            table: RawTableInner::NEW,\n            alloc: Global,\n            marker: PhantomData,\n        }\n    }\n    pub fn with_capacity(capacity: usize) -> Self {\n        Self::with_capacity_in(capacity, Global)\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Creates an empty `HashTable` with the specified capacity.\n///\n/// The hash table will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash table will not allocate.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashTable;\n/// let mut table: HashTable<&str> = HashTable::with_capacity(10);\n/// assert_eq!(table.len(), 0);\n/// assert!(table.capacity() >= 10);\n/// ```\n87 pub fn with_capacity(capacity: usize) -> Self {\n88     Self {\n89         raw: RawTable::with_capacity(capacity),\n90     }\n91 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}