{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub(crate) trait TagSliceExt {\n    fn fill_tag(&mut self, tag: Tag);\n    #[inline]\n    fn fill_empty(&mut self);\n}\n#[cfg(not(feature = \"equivalent\"))]\npub trait Equivalent<K: ?Sized> {\n    fn equivalent(&self, key: &K) -> bool;\n}\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Iter<'a, T> {\n    inner: RawIter<T>,\n    marker: PhantomData<&'a T>,\n}\npub struct Iter<'a, K, V> {\n    inner: RawIter<(K, V)>,\n    marker: PhantomData<(&'a K, &'a V)>,\n}\nimpl<'a, T, A> IntoIterator for &'a mut HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    type Item = &'a mut T;\n    type IntoIter = IterMut<'a, T>;\n    fn into_iter(self) -> IterMut<'a, T> {\n        self.iter_mut()\n    }\n}\nimpl<T, A> HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    pub const fn new_in(alloc: A) -> Self {\n        Self {\n            raw: RawTable::new_in(alloc),\n        }\n    }\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            raw: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    pub fn allocator(&self) -> &A {}\n    pub fn find(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {}\n    pub fn find_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn find_entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n    ) -> Result<OccupiedEntry<'_, T, A>, AbsentEntry<'_, T, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Entry<'_, T, A> {}\n    pub fn insert_unique(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> OccupiedEntry<'_, T, A> {}\n    pub fn clear(&mut self) {}\n    pub fn shrink_to_fit(&mut self, hasher: impl Fn(&T) -> u64) {}\n    pub fn shrink_to(&mut self, min_capacity: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn try_reserve(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<(), TryReserveError> {}\n    pub fn capacity(&self) -> usize {}\n    pub fn len(&self) -> usize {}\n    pub fn is_empty(&self) -> bool {}\n    pub fn iter(&self) -> Iter<'_, T> {\n        Iter {\n            inner: unsafe { self.raw.iter() },\n            marker: PhantomData,\n        }\n    }\n    pub fn iter_mut(&mut self) -> IterMut<'_, T> {}\n    pub fn iter_hash(&self, hash: u64) -> IterHash<'_, T> {}\n    pub fn iter_hash_mut(&mut self, hash: u64) -> IterHashMut<'_, T> {}\n    pub fn retain(&mut self, mut f: impl FnMut(&mut T) -> bool) {}\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&mut T) -> bool,\n    {}\n    pub fn get_many_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    pub unsafe fn get_many_unchecked_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n1145 fn into_iter(self) -> Iter<'a, T> {\n1146     self.iter()\n1147 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}