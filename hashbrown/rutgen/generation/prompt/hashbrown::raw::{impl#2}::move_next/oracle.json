{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/raw/mod.rs\n// crate name is hashbrown\nuse crate::alloc::alloc::{handle_alloc_error, Layout};\nuse crate::control::{BitMaskIter, Group, Tag, TagSliceExt};\nuse crate::scopeguard::{guard, ScopeGuard};\nuse crate::util::{invalid_mut, likely, unlikely};\nuse crate::TryReserveError;\nuse core::array;\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ptr::NonNull;\nuse core::slice;\nuse core::{hint, ptr};\n#[cfg(test)]\npub(crate) use self::alloc::AllocError;\npub(crate) use self::alloc::{do_alloc, Allocator, Global};\n#[derive(Clone)]\nstruct ProbeSeq {\n    pos: usize,\n    stride: usize,\n}\nimpl ProbeSeq {\n    #[inline]\n    fn move_next(&mut self, bucket_mask: usize) {\n        debug_assert!(self.stride <= bucket_mask, \"Went past end of probe sequence\");\n        self.stride += Group::WIDTH;\n        self.pos += self.stride;\n        self.pos &= bucket_mask;\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n83 fn move_next(&mut self, bucket_mask: usize) {\n84     // We should have found an empty bucket by now and ended the probe.\n85     debug_assert!(\n86         self.stride <= bucket_mask,\n87         \"Went past end of probe sequence\"\n88     );\n89 \n90     self.stride += Group::WIDTH;\n91     self.pos += self.stride;\n92     self.pos &= bucket_mask;\n93 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}