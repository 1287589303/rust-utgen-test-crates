{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/table.rs\n// crate name is hashbrown\nuse core::{fmt, iter::FusedIterator, marker::PhantomData};\nuse crate::{\n    raw::{\n        Allocator, Bucket, Global, InsertSlot, RawDrain, RawExtractIf, RawIntoIter,\n        RawIter, RawIterHash, RawTable,\n    },\n    TryReserveError,\n};\npub struct HashTable<T, A = Global>\nwhere\n    A: Allocator,\n{\n    pub(crate) raw: RawTable<T, A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\n#[derive(Clone, PartialEq, Eq, Debug)]\npub enum TryReserveError {\n    /// Error due to the computed capacity exceeding the collection's maximum\n    /// (usually `isize::MAX` bytes).\n    CapacityOverflow,\n    /// The memory allocator returned an error\n    AllocError {\n        /// The layout of the allocation request that failed.\n        layout: alloc::alloc::Layout,\n    },\n}\nimpl<T, A> HashTable<T, A>\nwhere\n    A: Allocator,\n{\n    pub const fn new_in(alloc: A) -> Self {\n        Self {\n            raw: RawTable::new_in(alloc),\n        }\n    }\n    pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {\n        Self {\n            raw: RawTable::with_capacity_in(capacity, alloc),\n        }\n    }\n    pub fn allocator(&self) -> &A {}\n    pub fn find(&self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&T> {}\n    pub fn find_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn find_entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n    ) -> Result<OccupiedEntry<'_, T, A>, AbsentEntry<'_, T, A>> {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn entry(\n        &mut self,\n        hash: u64,\n        eq: impl FnMut(&T) -> bool,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Entry<'_, T, A> {}\n    pub fn insert_unique(\n        &mut self,\n        hash: u64,\n        value: T,\n        hasher: impl Fn(&T) -> u64,\n    ) -> OccupiedEntry<'_, T, A> {}\n    pub fn clear(&mut self) {}\n    pub fn shrink_to_fit(&mut self, hasher: impl Fn(&T) -> u64) {}\n    pub fn shrink_to(&mut self, min_capacity: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {}\n    pub fn try_reserve(\n        &mut self,\n        additional: usize,\n        hasher: impl Fn(&T) -> u64,\n    ) -> Result<(), TryReserveError> {\n        self.raw.try_reserve(additional, hasher)\n    }\n    pub fn capacity(&self) -> usize {}\n    pub fn len(&self) -> usize {}\n    pub fn is_empty(&self) -> bool {}\n    pub fn iter(&self) -> Iter<'_, T> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, T> {}\n    pub fn iter_hash(&self, hash: u64) -> IterHash<'_, T> {}\n    pub fn iter_hash_mut(&mut self, hash: u64) -> IterHashMut<'_, T> {}\n    pub fn retain(&mut self, mut f: impl FnMut(&mut T) -> bool) {}\n    pub fn drain(&mut self) -> Drain<'_, T, A> {}\n    pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, T, F, A>\n    where\n        F: FnMut(&mut T) -> bool,\n    {}\n    pub fn get_many_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    pub unsafe fn get_many_unchecked_mut<const N: usize>(\n        &mut self,\n        hashes: [u64; N],\n        eq: impl FnMut(usize, &T) -> bool,\n    ) -> [Option<&'_ mut T>; N] {}\n    #[inline]\n    pub fn allocation_size(&self) -> usize {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Tries to reserve capacity for at least `additional` more elements to be inserted\n/// in the given `HashTable`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// `hasher` is called if entries need to be moved or copied to a new table.\n/// This must return the same hash value that each entry was inserted with.\n///\n/// # Errors\n///\n/// If the capacity overflows, or the allocator reports a failure, then an error\n/// is returned.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<i32> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table\n///     .try_reserve(10, hasher)\n///     .expect(\"why is the test harness OOMing on 10 bytes?\");\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n586 pub fn try_reserve(\n587     &mut self,\n588     additional: usize,\n589     hasher: impl Fn(&T) -> u64,\n590 ) -> Result<(), TryReserveError> {\n591     self.raw.try_reserve(additional, hasher)\n592 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}