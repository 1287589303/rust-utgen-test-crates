{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is hashbrown\nuse crate::raw::{\n    Allocator, Bucket, Global, RawDrain, RawExtractIf, RawIntoIter, RawIter, RawTable,\n};\nuse crate::{DefaultHashBuilder, Equivalent, TryReserveError};\nuse core::borrow::Borrow;\nuse core::fmt::{self, Debug};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::marker::PhantomData;\nuse core::mem;\nuse core::ops::Index;\n#[cfg(feature = \"raw-entry\")]\npub use crate::raw_entry::*;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct VacantEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    key: K,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    hash: u64,\n    elem: Bucket<(K, V)>,\n    table: &'a mut HashMap<K, V, S, A>,\n}\npub struct OccupiedEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    bucket: Bucket<T>,\n    table: &'a mut HashTable<T, A>,\n}\npub struct VacantEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::VacantEntry<'a, T, (), S, A>,\n}\npub struct OccupiedEntry<'a, T, S, A: Allocator = Global> {\n    inner: map::OccupiedEntry<'a, T, (), S, A>,\n}\npub struct VacantEntry<'a, T, A = Global>\nwhere\n    A: Allocator,\n{\n    hash: u64,\n    insert_slot: InsertSlot,\n    table: &'a mut HashTable<T, A>,\n}\npub enum Entry<'a, K, V, S, A = Global>\nwhere\n    A: Allocator,\n{\n    /// An occupied entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{Entry, HashMap};\n    /// let mut map: HashMap<_, _> = [(\"a\", 100), (\"b\", 200)].into();\n    ///\n    /// match map.entry(\"a\") {\n    ///     Entry::Vacant(_) => unreachable!(),\n    ///     Entry::Occupied(_) => { }\n    /// }\n    /// ```\n    Occupied(OccupiedEntry<'a, K, V, S, A>),\n    /// A vacant entry.\n    ///\n    /// # Examples\n    ///\n    /// ```\n    /// use hashbrown::hash_map::{Entry, HashMap};\n    /// let mut map: HashMap<&str, i32> = HashMap::new();\n    ///\n    /// match map.entry(\"a\") {\n    ///     Entry::Occupied(_) => unreachable!(),\n    ///     Entry::Vacant(_) => { }\n    /// }\n    /// ```\n    Vacant(VacantEntry<'a, K, V, S, A>),\n}\nimpl<'a, K, V, S, A: Allocator> Entry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert(self, default: V) -> &'a mut V\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with<F: FnOnce() -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => {\n                let value = default(entry.key());\n                entry.insert(value)\n            }\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_modify<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&mut V),\n    {\n        match self {\n            Entry::Occupied(mut entry) => {\n                f(entry.get_mut());\n                Entry::Occupied(entry)\n            }\n            Entry::Vacant(entry) => Entry::Vacant(entry),\n        }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn and_replace_entry_with<F>(self, f: F) -> Self\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {\n        match self {\n            Entry::Occupied(entry) => entry.replace_entry_with(f),\n            Entry::Vacant(_) => self,\n        }\n    }\n}\nimpl<'a, K, V, S, A: Allocator> VacantEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {\n        &self.key\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_key(self) -> K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(self, value: V) -> &'a mut V\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let table = &mut self.table.table;\n        let entry = table\n            .insert_entry(\n                self.hash,\n                (self.key, value),\n                make_hasher::<_, V, S>(&self.table.hash_builder),\n            );\n        &mut entry.1\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V, S, A>\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n}\nimpl<'a, K, V, S, A: Allocator> OccupiedEntry<'a, K, V, S, A> {\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn key(&self) -> &K {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove_entry(self) -> (K, V) {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get(&self) -> &V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn get_mut(&mut self) -> &mut V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn into_mut(self) -> &'a mut V {\n        unsafe { &mut self.elem.as_mut().1 }\n    }\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn insert(&mut self, value: V) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn remove(self) -> V {}\n    #[cfg_attr(feature = \"inline-more\", inline)]\n    pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>\n    where\n        F: FnOnce(&K, V) -> Option<V>,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Ensures a value is in the entry by inserting, if empty, the result of the default function.\n/// This method allows for generating key-derived values for insertion by providing the default\n/// function a reference to the key that was moved during the `.entry(key)` method call.\n///\n/// The reference to the moved key is provided so that cloning or copying the key is\n/// unnecessary, unlike with `.or_insert_with(|| ... )`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<&str, usize> = HashMap::new();\n///\n/// // nonexistent key\n/// map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n/// assert_eq!(map[\"poneyland\"], 9);\n///\n/// // existing key\n/// *map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count() * 10) *= 2;\n/// assert_eq!(map[\"poneyland\"], 18);\n/// ```\n3583 pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V\n3584 where\n3585     K: Hash,\n3586     S: BuildHasher,\n3587 {\n3588     match self {\n3589         Entry::Occupied(entry) => entry.into_mut(),\n3590         Entry::Vacant(entry) => {\n3591             let value = default(entry.key());\n3592             entry.insert(value)\n3593         }\n3594     }\n3595 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}