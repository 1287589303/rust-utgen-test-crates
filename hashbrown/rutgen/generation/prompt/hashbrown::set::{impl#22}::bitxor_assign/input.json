{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set.rs\n// crate name is hashbrown\nuse crate::{Equivalent, TryReserveError};\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::{Chain, FusedIterator};\nuse core::ops::{\n    BitAnd, BitAndAssign, BitOr, BitOrAssign, BitXor, BitXorAssign, Sub, SubAssign,\n};\nuse core::{fmt, mem};\nuse map::make_hash;\nuse super::map::{self, HashMap, Keys};\nuse crate::raw::{Allocator, Global, RawExtractIf};\nuse crate::DefaultHashBuilder;\n#[allow(clippy::missing_safety_doc)]\npub unsafe trait Allocator {\n    fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()>;\n    unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout);\n}\npub struct HashSet<T, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) map: HashMap<T, (), S, A>,\n}\npub struct InsertSlot {\n    index: usize,\n}\npub struct Iter<'a, K> {\n    iter: Keys<'a, K, ()>,\n}\npub struct Bucket<T> {\n    ptr: NonNull<T>,\n}\npub struct HashMap<K, V, S = DefaultHashBuilder, A: Allocator = Global> {\n    pub(crate) hash_builder: S,\n    pub(crate) table: RawTable<(K, V), A>,\n}\npub struct RawTable<T, A: Allocator = Global> {\n    table: RawTableInner,\n    alloc: A,\n    marker: PhantomData<T>,\n}\nimpl<T, S, A> BitXorAssign<&HashSet<T, S, A>> for HashSet<T, S, A>\nwhere\n    T: Eq + Hash + Clone,\n    S: BuildHasher,\n    A: Allocator,\n{\n    fn bitxor_assign(&mut self, rhs: &HashSet<T, S, A>) {\n        for item in rhs {\n            let hash = make_hash(&self.map.hash_builder, item);\n            match self.map.find_or_find_insert_slot(hash, item) {\n                Ok(bucket) => {\n                    unsafe {\n                        self.map.table.remove(bucket);\n                    }\n                }\n                Err(slot) => {\n                    unsafe {\n                        self.map.table.insert_in_slot(hash, slot, (item.clone(), ()));\n                    }\n                }\n            }\n        }\n    }\n}\n#[cfg(feature = \"nightly\")]\n#[cfg_attr(feature = \"inline-more\", inline)]\npub(crate) fn make_hash<Q, S>(hash_builder: &S, val: &Q) -> u64\nwhere\n    Q: Hash + ?Sized,\n    S: BuildHasher,\n{\n    hash_builder.hash_one(val)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Modifies this set to contain the symmetric difference of `self` and `rhs`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n///\n/// a ^= &b;\n///\n/// let mut i = 0;\n/// let expected = [1, 2, 4, 5];\n/// for x in &a {\n///     assert!(expected.contains(x));\n///     i += 1;\n/// }\n/// assert_eq!(i, expected.len());\n/// ```\n1586 fn bitxor_assign(&mut self, rhs: &HashSet<T, S, A>) {\n1587     for item in rhs {\n1588         let hash = make_hash(&self.map.hash_builder, item);\n1589         match self.map.find_or_find_insert_slot(hash, item) {\n1590             Ok(bucket) => unsafe {\n1591                 self.map.table.remove(bucket);\n1592             },\n1593             Err(slot) => unsafe {\n1594                 self.map\n1595                     .table\n1596                     .insert_in_slot(hash, slot, (item.clone(), ()));\n1597             },\n1598         }\n1599     }\n1600 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}