{
  "name": "hashbrown::raw_entry::{impl#5}::from_hash",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:702:5:707:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid hash values as u64 (including boundary cases such as zero and maximum u64), matching function that correctly identifies a key, an appropriate HashMap instance with at least one entry and keys of type K that are hashable and equatable.\n",
      "answers": [
        {
          "uses": [
            "use core::hash::BuildHasher;",
            "use core::hash::Hash;",
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let hash = {",
                "        let mut hasher = map.hasher().build_hasher();",
                "        key.hash(&mut hasher);",
                "        hasher.finish()",
                "    };",
                "    let result = map.raw_entry().from_hash(hash, |k| k == &key);",
                "    result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&\"a\", &100)));"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let hash = {",
                "        let mut hasher = map.hasher().build_hasher();",
                "        key.hash(&mut hasher);",
                "        hasher.finish()",
                "    };",
                "    let result = map.raw_entry().from_hash(hash, |k| k == &key);",
                "    result;",
                "    assert_eq!(result, Some((&\"a\", &100)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"b\";",
                "    let hash = {",
                "        let mut hasher = map.hasher().build_hasher();",
                "        key.hash(&mut hasher);",
                "        hasher.finish()",
                "    };",
                "    let result = map.raw_entry().from_hash(hash, |k| k == &key);",
                "    result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"b\";",
                "    let hash = {",
                "        let mut hasher = map.hasher().build_hasher();",
                "        key.hash(&mut hasher);",
                "        hasher.finish()",
                "    };",
                "    let result = map.raw_entry().from_hash(hash, |k| k == &key);",
                "    result;",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let result = map.raw_entry().from_hash(0, |k| k == &key);",
                "    result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&\"a\", &100)));",
                "    assert!(map.raw_entry().from_hash(0, |k| k == &\"b\").is_none());",
                "    assert!(map.raw_entry().from_hash(1, |k| k == &key).is_none());",
                "    assert!(map.raw_entry().from_hash(0, |k| k != &key).is_none());",
                "    let empty_map: HashMap<&str, u32> = HashMap::new();",
                "    assert!(empty_map.raw_entry().from_hash(0, |k| k == &key).is_none());"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let result = map.raw_entry().from_hash(0, |k| k == &key);",
                "    result;",
                "    assert_eq!(result, Some((&\"a\", &100)));",
                "    assert!(map.raw_entry().from_hash(0, |k| k == &\"b\").is_none());",
                "    assert!(map.raw_entry().from_hash(1, |k| k == &key).is_none());",
                "    assert!(map.raw_entry().from_hash(0, |k| k != &key).is_none());",
                "    let empty_map: HashMap<&str, u32> = HashMap::new();",
                "    assert!(empty_map.raw_entry().from_hash(0, |k| k == &key).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let result = map.raw_entry().from_hash(u64::MAX, |k| k == &key);",
                "    result;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    use core::hash::{BuildHasher, Hash};",
                "    use hashbrown::HashMap;",
                "",
                "    let map: HashMap<&str, u32> = [(\"a\", 100)].into();",
                "    let key = \"a\";",
                "    let result = map.raw_entry().from_hash(u64::MAX, |k| k == &key);",
                "    result;",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}