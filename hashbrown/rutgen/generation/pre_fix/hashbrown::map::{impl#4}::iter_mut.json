{
  "name": "hashbrown::map::{impl#4}::iter_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:799:5:807:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IterMut {\n                inner: self.table.iter(),\n                marker: PhantomData,\n            }\n"
      ],
      "input_infer": "Test input conditions or ranges: Valid `HashMap` instances with diverse key-value pairs, including empty instances, and varying capacities (0, 1, 10, maximum allowable); keys of different types (e.g., strings, integers) and values that are mutable (e.g., integers, structs) to ensure correct lifetimes and references during iteration.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    let mut iter = map.iter_mut();",
                "}"
              ],
              "oracle": [
                "    let map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    let iter = map.iter_mut();",
                "    assert_eq!(iter.inner.iter as *const _, map.table.iter() as *const _);",
                "    assert!(iter.marker == PhantomData);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    let mut iter = map.iter_mut();",
                "    let map: HashMap<String, i32> = HashMap::with_capacity_and_hasher_in(0, DefaultHashBuilder::new(), Global);",
                "    let iter = map.iter_mut();",
                "    assert_eq!(iter.inner.iter as *const _, map.table.iter() as *const _);",
                "    assert!(iter.marker == PhantomData);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    let mut iter = map.iter_mut();",
                "}"
              ],
              "oracle": [
                "    let mut map = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    let mut iter = map.iter_mut();",
                "    assert_eq!(iter.inner.items, 1);",
                "    assert!(iter.marker != PhantomData);",
                "    assert!(!iter.inner.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    let mut iter = map.iter_mut();",
                "    let mut map = HashMap::with_capacity_and_hasher_in(1, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    let mut iter = map.iter_mut();",
                "    assert_eq!(iter.inner.items, 1);",
                "    assert!(iter.marker != PhantomData);",
                "    assert!(!iter.inner.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    map.insert(\"b\".to_string(), 2);",
                "    map.insert(\"c\".to_string(), 3);",
                "    let mut iter = map.iter_mut();",
                "}"
              ],
              "oracle": [
                "    let mut map = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    assert_eq!(map.len(), 3);",
                "    let mut iter = map.iter_mut();",
                "    assert!(iter.inner.items <= map.len());",
                "    assert!(iter.marker == PhantomData::<(&str, &mut i32)>::default());"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    map.insert(\"a\".to_string(), 1);",
                "    map.insert(\"b\".to_string(), 2);",
                "    map.insert(\"c\".to_string(), 3);",
                "    let mut iter = map.iter_mut();",
                "    let mut map = HashMap::with_capacity_and_hasher_in(10, DefaultHashBuilder::new(), Global);",
                "    assert_eq!(map.len(), 3);",
                "    let mut iter = map.iter_mut();",
                "    assert!(iter.inner.items <= map.len());",
                "    assert!(iter.marker == PhantomData::<(&str, &mut i32)>::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    let mut iter = map.iter_mut();",
                "}"
              ],
              "oracle": [
                "    let mut map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let mut iter = map.iter_mut();",
                "    assert_eq!(iter.inner.items, 3);",
                "    assert_eq!(iter.marker, PhantomData);",
                "    assert_eq!(map.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    ",
                "    let mut iter = map.iter_mut();",
                "    let mut map = HashMap::with_capacity_and_hasher_in(5, DefaultHashBuilder::new(), Global);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let mut iter = map.iter_mut();",
                "    assert_eq!(iter.inner.items, 3);",
                "    assert_eq!(iter.marker, PhantomData);",
                "    assert_eq!(map.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(10000, DefaultHashBuilder::new(), Global);",
                "    for i in 0..10000 {",
                "        map.insert(i, i * 2);",
                "    }",
                "    let mut iter = map.iter_mut();",
                "}"
              ],
              "oracle": [
                "    iter_mut() returns IterMut<'_, K, V> with inner as self.table.iter()",
                "    iter_mut() constructs IterMut with marker as PhantomData",
                "    iter_mut() correctly ties the lifetime of self to the iterator",
                "    iter_mut() does not cause any memory safety violations during iteration",
                "    iter_mut() allows mutable access to values in the HashMap",
                "    iter_mut() can be called on a HashMap with a capacity of 10000",
                "    len() returns 10000 after inserting 10000 elements",
                "    is_empty() returns false after inserting elements into the HashMap"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::with_capacity_and_hasher_in(10000, DefaultHashBuilder::new(), Global);",
                "    for i in 0..10000 {",
                "        map.insert(i, i * 2);",
                "    }",
                "    let mut iter = map.iter_mut();",
                "    iter_mut() returns IterMut<'_, K, V> with inner as self.table.iter()",
                "    iter_mut() constructs IterMut with marker as PhantomData",
                "    iter_mut() correctly ties the lifetime of self to the iterator",
                "    iter_mut() does not cause any memory safety violations during iteration",
                "    iter_mut() allows mutable access to values in the HashMap",
                "    iter_mut() can be called on a HashMap with a capacity of 10000",
                "    len() returns 10000 after inserting 10000 elements",
                "    is_empty() returns false after inserting elements into the HashMap",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}