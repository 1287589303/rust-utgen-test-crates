{
  "name": "hashbrown::raw_entry::{impl#7}::get_key_value",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1069:5:1074:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (key, value)\n"
      ],
      "input_infer": "The input conditions or ranges are: valid keys and values of types K and V that match the expected types in the HashMap, keys that exist in the HashMap for occupied entries, and ensuring the map has been populated before calling get_key_value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    map.insert(\"b\", 200);",
                "    ",
                "    match map.raw_entry_mut().from_key(&\"a\") {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key_value, (&\"a\", &100));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    map.insert(\"b\", 200);",
                "    ",
                "    match map.raw_entry_mut().from_key(&\"a\") {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "    assert_eq!(key_value, (&\"a\", &100));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"x\", 300);",
                "    map.insert(\"y\", 400);",
                "    ",
                "    match map.raw_entry_mut().from_key(&\"x\") {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key_value, (&\"x\", &300));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"x\", 300);",
                "    map.insert(\"y\", 400);",
                "    ",
                "    match map.raw_entry_mut().from_key(&\"x\") {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "    assert_eq!(key_value, (&\"x\", &300));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<u32, String> = HashMap::new();",
                "    map.insert(0, \"zero\".to_string());",
                "    map.insert(1, \"one\".to_string());",
                "",
                "    match map.raw_entry_mut().from_key(&0) {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key_value, (&0, &\"zero\".to_string()));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<u32, String> = HashMap::new();",
                "    map.insert(0, \"zero\".to_string());",
                "    map.insert(1, \"one\".to_string());",
                "",
                "    match map.raw_entry_mut().from_key(&0) {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "    assert_eq!(key_value, (&0, &\"zero\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<u32, String> = HashMap::new();",
                "    map.insert(u32::MAX, \"max\".to_string());",
                "",
                "    match map.raw_entry_mut().from_key(&u32::MAX) {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key_value, (&u32::MAX, &\"max\".to_string()));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<u32, String> = HashMap::new();",
                "    map.insert(u32::MAX, \"max\".to_string());",
                "",
                "    match map.raw_entry_mut().from_key(&u32::MAX) {",
                "        RawEntryMut::Occupied(o) => {",
                "            let key_value = o.get_key_value();",
                "            // function call",
                "            let _ = key_value;",
                "        },",
                "        RawEntryMut::Vacant(_) => panic!(),",
                "    }",
                "    assert_eq!(key_value, (&u32::MAX, &\"max\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}