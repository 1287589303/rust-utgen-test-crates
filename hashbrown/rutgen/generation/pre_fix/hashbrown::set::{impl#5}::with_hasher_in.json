{
  "name": "hashbrown::set::{impl#5}::with_hasher_in",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:557:5:561:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            map: HashMap::with_hasher_in(hasher, alloc),\n        }\n"
      ],
      "input_infer": "Capacity: 0; Hasher: Any type implementing BuildHasher; Allocator: Any type implementing Allocator\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    ",
                "    impl BuildHasher for TestHasher {",
                "        fn build_hasher(&self) -> std::hash::Hasher {",
                "            std::collections::hash_map::DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let hasher = TestHasher;",
                "    let allocator = Global;",
                "    let set: HashSet<i32, TestHasher, Global> = HashSet::with_hasher_in(hasher, allocator);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.allocator(), &allocator);",
                "    assert!(set.map.table.is_empty());",
                "    assert_eq!(set.map.hash_builder.build_hasher().finish(), 0);",
                "    assert_eq!(set.map.hash_builder as &dyn BuildHasher, &hasher as &dyn BuildHasher);",
                "    assert!(set.map.table.capacity() == 0);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    ",
                "    impl BuildHasher for TestHasher {",
                "        fn build_hasher(&self) -> std::hash::Hasher {",
                "            std::collections::hash_map::DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let hasher = TestHasher;",
                "    let allocator = Global;",
                "    let set: HashSet<i32, TestHasher, Global> = HashSet::with_hasher_in(hasher, allocator);",
                "    assert_eq!(set.allocator(), &allocator);",
                "    assert!(set.map.table.is_empty());",
                "    assert_eq!(set.map.hash_builder.build_hasher().finish(), 0);",
                "    assert_eq!(set.map.hash_builder as &dyn BuildHasher, &hasher as &dyn BuildHasher);",
                "    assert!(set.map.table.capacity() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        fn build_hasher(&self) -> std::hash::Hasher {",
                "            std::collections::hash_map::DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    struct CustomAllocator;",
                "",
                "    unsafe impl Allocator for CustomAllocator {",
                "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "        ",
                "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let hasher = TestHasher;",
                "    let allocator = CustomAllocator;",
                "    let set: HashSet<i32, TestHasher, CustomAllocator> = HashSet::with_hasher_in(hasher, allocator);",
                "}"
              ],
              "oracle": [
                "    let hasher = TestHasher;",
                "    let allocator = CustomAllocator;",
                "    let set: HashSet<i32, TestHasher, CustomAllocator> = HashSet::with_hasher_in(hasher, allocator);",
                "    assert_eq!(set.map.hash_builder, hasher);",
                "    assert_eq!(set.map.table.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        fn build_hasher(&self) -> std::hash::Hasher {",
                "            std::collections::hash_map::DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    struct CustomAllocator;",
                "",
                "    unsafe impl Allocator for CustomAllocator {",
                "        fn allocate(&self, _layout: core::alloc::Layout) -> Result<core::ptr::NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "        ",
                "        unsafe fn deallocate(&self, _ptr: core::ptr::NonNull<u8>, _layout: core::alloc::Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let hasher = TestHasher;",
                "    let allocator = CustomAllocator;",
                "    let set: HashSet<i32, TestHasher, CustomAllocator> = HashSet::with_hasher_in(hasher, allocator);",
                "    let hasher = TestHasher;",
                "    let allocator = CustomAllocator;",
                "    let set: HashSet<i32, TestHasher, CustomAllocator> = HashSet::with_hasher_in(hasher, allocator);",
                "    assert_eq!(set.map.hash_builder, hasher);",
                "    assert_eq!(set.map.table.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hasher = DefaultHashBuilder::default();",
                "    let allocator = Global;",
                "    let set: HashSet<i32, DefaultHashBuilder, Global> = HashSet::with_hasher_in(hasher, allocator);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.map.hash_builder, hasher);",
                "    assert_eq!(set.map.table.capacity(), 0);",
                "    assert!(set.map.table.is_empty());",
                "    assert!(set.allocator() as *const _ == &allocator as *const _);"
              ],
              "code": [
                "{",
                "    let hasher = DefaultHashBuilder::default();",
                "    let allocator = Global;",
                "    let set: HashSet<i32, DefaultHashBuilder, Global> = HashSet::with_hasher_in(hasher, allocator);",
                "    assert_eq!(set.map.hash_builder, hasher);",
                "    assert_eq!(set.map.table.capacity(), 0);",
                "    assert!(set.map.table.is_empty());",
                "    assert!(set.allocator() as *const _ == &allocator as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}