{
  "name": "hashbrown::raw::bucket_mask_to_capacity",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:130:1:139:2",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: bucket_mask < 8 at line 131 is true\n",
        "expected return value/type: bucket_mask\n"
      ],
      "input_infer": "bucket_mask in the range of 0 to 7 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 0);",
                "    assert!(result < 8);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(0);",
                "    assert_eq!(result, 0);",
                "    assert!(result < 8);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 1);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(1);",
                "    assert_eq!(result, 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(2);",
                "}"
              ],
              "oracle": [
                "    let expected = 2;",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(2);",
                "    let expected = 2;",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 3);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(3);",
                "    assert_eq!(result, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 4);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(4);",
                "    assert_eq!(result, 4);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(5);",
                "}"
              ],
              "oracle": [
                "    let result = bucket_mask_to_capacity(5); assert_eq!(result, 5);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(5);",
                "    let result = bucket_mask_to_capacity(5); assert_eq!(result, 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 6);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(6);",
                "    assert_eq!(result, 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = bucket_mask_to_capacity(7);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, 7);"
              ],
              "code": [
                "{",
                "    let result = bucket_mask_to_capacity(7);",
                "    assert_eq!(result, 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: bucket_mask < 8 at line 131 is false, with bound bucket_mask == 8\n",
        "expected return value/type: ((bucket_mask + 1) / 8) * 7\n"
      ],
      "input_infer": "bucket_mask: 8, 9, 15, 16, 31, 32, 63, 64\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 8;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bucket_mask_to_capacity(8), 7);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 8;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(bucket_mask_to_capacity(8), 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 9;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    let expected_result = ((bucket_mask + 1) / 8) * 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected_result);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 9;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    let expected_result = ((bucket_mask + 1) / 8) * 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected_result);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 15;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    let expected_capacity = ((bucket_mask + 1) / 8) * 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected_capacity);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 15;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    let expected_capacity = ((bucket_mask + 1) / 8) * 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected_capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 16;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bucket_mask_to_capacity(8), 7);",
                "    assert_eq!(bucket_mask_to_capacity(16), 14);",
                "    assert_eq!(bucket_mask_to_capacity(32), 28);",
                "    assert_eq!(bucket_mask_to_capacity(64), 56);",
                "    assert_eq!(bucket_mask_to_capacity(128), 112);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 16;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(bucket_mask_to_capacity(8), 7);",
                "    assert_eq!(bucket_mask_to_capacity(16), 14);",
                "    assert_eq!(bucket_mask_to_capacity(32), 28);",
                "    assert_eq!(bucket_mask_to_capacity(64), 56);",
                "    assert_eq!(bucket_mask_to_capacity(128), 112);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 31;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    let expected = ((bucket_mask + 1) / 8) * 7;",
                "    let result = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 31;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    let expected = ((bucket_mask + 1) / 8) * 7;",
                "    let result = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 32;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    let expected = 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 15;",
                "    let expected = 13;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 24;",
                "    let expected = 21;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 32;",
                "    let expected = 28;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 32;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    let expected = 7;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 15;",
                "    let expected = 13;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 24;",
                "    let expected = 21;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "    let bucket_mask = 32;",
                "    let expected = 28;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 63;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    let expected = ((bucket_mask + 1) / 8) * 7;",
                "    let result = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 63;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    let expected = ((bucket_mask + 1) / 8) * 7;",
                "    let result = bucket_mask_to_capacity(bucket_mask);",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket_mask = 64;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "}"
              ],
              "oracle": [
                "    let bucket_mask = 8;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), 7);"
              ],
              "code": [
                "{",
                "    let bucket_mask = 64;",
                "    let _ = bucket_mask_to_capacity(bucket_mask);",
                "    let bucket_mask = 8;",
                "    assert_eq!(bucket_mask_to_capacity(bucket_mask), 7);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}