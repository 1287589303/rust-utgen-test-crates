{
  "name": "hashbrown::map::{impl#1}::with_capacity",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:319:5:321:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity: 0, 1, 10, maximum usize value (std::usize::MAX), and negative numbers (if applicable) to ensure proper handling of edge cases\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() == 0);",
                "    ",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(10);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() == 0);",
                "    ",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(10);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 1);"
              ],
              "code": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(1);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    assert!(map.capacity() == 10 || map.capacity() > 10);",
                "    let empty_map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(0);",
                "    assert_eq!(empty_map.len(), 0);",
                "    assert_eq!(empty_map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(10);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    assert!(map.capacity() == 10 || map.capacity() > 10);",
                "    let empty_map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(0);",
                "    assert_eq!(empty_map.len(), 0);",
                "    assert_eq!(empty_map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(std::usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(map.len() == 0);",
                "    assert!(map.capacity() == std::usize::MAX);",
                "    assert!(map.capacity() > 0);"
              ],
              "code": [
                "{",
                "    let map: crate::HashMap<&str, i32> = crate::HashMap::with_capacity(std::usize::MAX);",
                "    assert!(map.len() == 0);",
                "    assert!(map.capacity() == std::usize::MAX);",
                "    assert!(map.capacity() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}