{
  "name": "hashbrown::set::{impl#6}::is_subset",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1045:5:1047:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() <= other.len() at line 1046 is true, with bound self.len() == other.len()\n"
      ],
      "input_infer": "self.len() = 0 to n and other.len() = n where n >= 0, with self containing elements that are a subset of other, including edge cases where self is empty or has the same elements as other but in different orders.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashSet;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = HashSet::new();",
                "",
                "    set.is_subset(&sup);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.is_subset(&sup), true);",
                "    set.insert(2);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    set.insert(4);",
                "    assert_eq!(set.is_subset(&sup), false);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = HashSet::new();",
                "",
                "    set.is_subset(&sup);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    set.insert(2);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    set.insert(4);",
                "    assert_eq!(set.is_subset(&sup), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.is_subset(&sup), true);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.is_subset(&sup), true);",
                "    assert_eq!(set.len(), 2);",
                "    assert_eq!(sup.len(), 3);",
                "    assert!(set.iter().all(|v| sup.contains(v)));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    assert_eq!(set.len(), 2);",
                "    assert_eq!(sup.len(), 3);",
                "    assert!(set.iter().all(|v| sup.contains(v)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [2, 1].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), false);",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "    assert_eq!(set.is_subset(&set), true);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [2, 1].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), false);",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "    assert_eq!(set.is_subset(&set), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3, 4].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), false);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashSet;",
                "",
                "    let sup: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let set: HashSet<_> = [1, 2, 4].into_iter().collect();",
                "",
                "    set.is_subset(&sup);",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [2, 3].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), true);",
                "    let set: HashSet<_> = [1, 2, 3, 4].into_iter().collect();",
                "    assert_eq!(set.is_subset(&sup), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() <= other.len() at line 1046 is false\n",
        "expected return value/type: self.len() <= other.len() && self.iter().all(|v| other.contains(v))\n"
      ],
      "input_infer": "self.len() > other.len() with self containing a set of values not present in other, and also a case where self is empty and other is non-empty.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let larger_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
                "    let mut smaller_set = HashSet::new();",
                "    smaller_set.insert(4);",
                "    smaller_set.insert(5);",
                "    smaller_set.insert(6);",
                "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(smaller_set.len() <= larger_set.len(), false);",
                "    assert_eq!(smaller_set.iter().all(|v| larger_set.contains(v)), false);",
                "    assert_eq!(smaller_set.is_subset(&larger_set), false);"
              ],
              "code": [
                "{",
                "    let larger_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
                "    let mut smaller_set = HashSet::new();",
                "    smaller_set.insert(4);",
                "    smaller_set.insert(5);",
                "    smaller_set.insert(6);",
                "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
                "    assert_eq!(smaller_set.len() <= larger_set.len(), false);",
                "    assert_eq!(smaller_set.iter().all(|v| larger_set.contains(v)), false);",
                "    assert_eq!(smaller_set.is_subset(&larger_set), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let other_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
                "    let empty_set: HashSet<i32> = HashSet::new();",
                "    assert_eq!(empty_set.is_subset(&other_set), true);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(empty_set.len() <= other_set.len(), true);",
                "    assert_eq!(other_set.is_subset(&empty_set), false);",
                "    let mut set_with_elements: HashSet<i32> = HashSet::new();",
                "    set_with_elements.insert(4);",
                "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
                "    set_with_elements.insert(2);",
                "    assert_eq!(set_with_elements.is_subset(&other_set), false);"
              ],
              "code": [
                "{",
                "    let other_set: HashSet<i32> = [1, 2, 3].into_iter().collect();",
                "    let empty_set: HashSet<i32> = HashSet::new();",
                "    assert_eq!(empty_set.is_subset(&other_set), true);",
                "    assert_eq!(empty_set.len() <= other_set.len(), true);",
                "    assert_eq!(other_set.is_subset(&empty_set), false);",
                "    let mut set_with_elements: HashSet<i32> = HashSet::new();",
                "    set_with_elements.insert(4);",
                "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
                "    set_with_elements.insert(2);",
                "    assert_eq!(set_with_elements.is_subset(&other_set), false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let other_set: HashSet<i32> = HashSet::new();",
                "    let mut non_empty_set = HashSet::new();",
                "    non_empty_set.insert(1);",
                "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
                "    assert!(non_empty_set.len() > other_set.len());",
                "    assert!(non_empty_set.iter().any(|v| !other_set.contains(v));"
              ],
              "code": [
                "{",
                "    let other_set: HashSet<i32> = HashSet::new();",
                "    let mut non_empty_set = HashSet::new();",
                "    non_empty_set.insert(1);",
                "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
                "    assert_eq!(non_empty_set.is_subset(&other_set), false);",
                "    assert!(non_empty_set.len() > other_set.len());",
                "    assert!(non_empty_set.iter().any(|v| !other_set.contains(v));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}