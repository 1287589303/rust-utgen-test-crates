{
  "name": "hashbrown::set::{impl#6}::symmetric_difference",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:774:5:778:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: SymmetricDifference {\n            iter: self.difference(other).chain(other.difference(self)),\n        }\n"
      ],
      "input_infer": "HashSet<T> instances `a` and `b` with at least one common element, no common elements, and varying sizes (including empty sets); T can be any type that implements Hash and Eq.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(diff_vec, vec![1, 4]);",
                "    assert_eq!(diff_vec.len(), 2);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&4));"
              ],
              "code": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 4]);",
                "    assert_eq!(diff_vec.len(), 2);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(diff_vec, vec![1, 2, 3, 4, 5, 6]);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&2));",
                "    assert!(diff_vec.contains(&3));",
                "    assert!(diff_vec.contains(&4));",
                "    assert!(diff_vec.contains(&5));",
                "    assert!(diff_vec.contains(&6));",
                "    assert_eq!(diff_vec.len(), 6);",
                "    assert!(!diff_vec.contains(&5));",
                "    assert!(!diff_vec.contains(&6));",
                "    let c: HashSet<_> = [2, 3].into_iter().collect();",
                "    let diff_c = a.symmetric_difference(&c);",
                "    assert_eq!(diff_c.collect::<Vec<_>>(), vec![1, 4]);",
                "    let d: HashSet<_> = [1, 2, 3, 4, 5].into_iter().collect();",
                "    let diff_d = a.symmetric_difference(&d);",
                "    assert_eq!(diff_d.collect::<Vec<_>>(), vec![6]);"
              ],
              "code": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2, 3, 4, 5, 6]);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&2));",
                "    assert!(diff_vec.contains(&3));",
                "    assert!(diff_vec.contains(&4));",
                "    assert!(diff_vec.contains(&5));",
                "    assert!(diff_vec.contains(&6));",
                "    assert_eq!(diff_vec.len(), 6);",
                "    assert!(!diff_vec.contains(&5));",
                "    assert!(!diff_vec.contains(&6));",
                "    let c: HashSet<_> = [2, 3].into_iter().collect();",
                "    let diff_c = a.symmetric_difference(&c);",
                "    assert_eq!(diff_c.collect::<Vec<_>>(), vec![1, 4]);",
                "    let d: HashSet<_> = [1, 2, 3, 4, 5].into_iter().collect();",
                "    let diff_d = a.symmetric_difference(&d);",
                "    assert_eq!(diff_d.collect::<Vec<_>>(), vec![6]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "}"
              ],
              "oracle": [
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let expected_diff: HashSet<_> = [1, 2, 3].iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    assert_eq!(diff.collect::<HashSet<_>>(), expected_diff);"
              ],
              "code": [
                "{",
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let expected_diff: HashSet<_> = [1, 2, 3].iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    assert_eq!(diff.collect::<HashSet<_>>(), expected_diff);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(diff_vec, vec![]);",
                "    ",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2, 3, 4, 5, 6]);",
                "    ",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 4]);",
                "    ",
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2]);",
                "    ",
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2]);"
              ],
              "code": [
                "{",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![]);",
                "    ",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2, 3, 4, 5, 6]);",
                "    ",
                "    let a: HashSet<_> = [1, 2, 3].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 4]);",
                "    ",
                "    let a: HashSet<_> = [].into_iter().collect();",
                "    let b: HashSet<_> = [1, 2].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2]);",
                "    ",
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, vec![1, 2]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "}"
              ],
              "oracle": [
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let expected_diff_vec: Vec<_> = vec![1, 3, 4, 5, 6];",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, expected_diff_vec);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&3));",
                "    assert!(diff_vec.contains(&4));",
                "    assert!(diff_vec.contains(&5));",
                "    assert!(diff_vec.contains(&6));",
                "    assert!(!diff_vec.contains(&2));"
              ],
              "code": [
                "{",
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    let a: HashSet<_> = [1, 2].into_iter().collect();",
                "    let b: HashSet<_> = [2, 3, 4, 5, 6].into_iter().collect();",
                "    let diff = a.symmetric_difference(&b);",
                "    let expected_diff_vec: Vec<_> = vec![1, 3, 4, 5, 6];",
                "    let diff_vec: Vec<_> = diff.collect();",
                "    assert_eq!(diff_vec, expected_diff_vec);",
                "    assert!(diff_vec.contains(&1));",
                "    assert!(diff_vec.contains(&3));",
                "    assert!(diff_vec.contains(&4));",
                "    assert!(diff_vec.contains(&5));",
                "    assert!(diff_vec.contains(&6));",
                "    assert!(!diff_vec.contains(&2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}