{
  "name": "hashbrown::table::{impl#1}::retain",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:862:5:871:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: item in self.raw.iter() at line 865 is true\n",
        "precondition: f(item.as_mut()) at line 866 is true\n",
        "precondition: item in self.raw.iter() at line 865 is false\n"
      ],
      "input_infer": "capacity: 1 to 6 (inclusive); f: returns true for even numbers, returns false for odd numbers; T: integers from 1 to 6 (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x % 2 == 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 3);",
                "    assert_eq!(table.find(0, |&x| x == 2), Some(&2));",
                "    assert_eq!(table.find(0, |&x| x == 4), Some(&4));",
                "    assert_eq!(table.find(0, |&x| x == 6), Some(&6));",
                "    assert_eq!(table.find(0, |&x| x == 1), None);",
                "    assert_eq!(table.find(0, |&x| x == 3), None);",
                "    assert_eq!(table.find(0, |&x| x == 5), None);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    assert_eq!(table.len(), 3);",
                "    assert_eq!(table.find(0, |&x| x == 2), Some(&2));",
                "    assert_eq!(table.find(0, |&x| x == 4), Some(&4));",
                "    assert_eq!(table.find(0, |&x| x == 6), Some(&6));",
                "    assert_eq!(table.find(0, |&x| x == 1), None);",
                "    assert_eq!(table.find(0, |&x| x == 3), None);",
                "    assert_eq!(table.find(0, |&x| x == 5), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x > 6); // All items will be removed",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 6);",
                "    table.retain(|&mut x| x > 6);",
                "    assert_eq!(table.len(), 0);",
                "    table.retain(|&mut x| x < 0);",
                "    assert_eq!(table.len(), 0);",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    assert_eq!(table.len(), 0);",
                "    for x in 1..=6 {",
                "    table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    assert_eq!(table.len(), 3);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x > 6); // All items will be removed",
                "    assert_eq!(table.len(), 6);",
                "    table.retain(|&mut x| x > 6);",
                "    assert_eq!(table.len(), 0);",
                "    table.retain(|&mut x| x < 0);",
                "    assert_eq!(table.len(), 0);",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    assert_eq!(table.len(), 0);",
                "    for x in 1..=6 {",
                "    table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    assert_eq!(table.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x == 4); // Only item 4 should remain",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 1);",
                "    assert!(table.find(hasher(&1), hasher).is_none());",
                "    assert!(table.find(hasher(&2), hasher).is_none());",
                "    assert!(table.find(hasher(&3), hasher).is_none());",
                "    assert_eq!(table.find(hasher(&4), hasher), Some(&4));",
                "    assert!(table.find(hasher(&5), hasher).is_none());",
                "    assert!(table.find(hasher(&6), hasher).is_none());"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {}",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| 0; // Dummy hasher that produces the same hash for all values",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "    table.retain(|&mut x| x == 4); // Only item 4 should remain",
                "    assert_eq!(table.len(), 1);",
                "    assert!(table.find(hasher(&1), hasher).is_none());",
                "    assert!(table.find(hasher(&2), hasher).is_none());",
                "    assert!(table.find(hasher(&3), hasher).is_none());",
                "    assert_eq!(table.find(hasher(&4), hasher), Some(&4));",
                "    assert!(table.find(hasher(&5), hasher).is_none());",
                "    assert!(table.find(hasher(&6), hasher).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: item in self.raw.iter() at line 865 is true\n",
        "precondition: f(item.as_mut()) at line 866 is false\n",
        "precondition: item in self.raw.iter() at line 865 is false\n"
      ],
      "input_infer": "self.raw.iter() contains a range of elements with varying values; f(item.as_mut()) evaluates false for all odd integers in range 1 to 6; preconditions met when table contains at least one even integer (e.g., 2, 4, or 6); test input range: [1, 2, 3, 4, 5, 6] with focus on even values for retain function.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashTable;",
            "use hashbrown::DefaultHashBuilder;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    ",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    ",
                "    let len = table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 3);",
                "    assert!(table.find(hasher_fn(&1), |&v| v == 1).is_none());",
                "    assert!(table.find(hasher_fn(&3), |&v| v == 3).is_none());",
                "    assert!(table.find(hasher_fn(&5), |&v| v == 5).is_none());",
                "    assert!(table.find(hasher_fn(&2), |&v| v == 2).is_some());",
                "    assert!(table.find(hasher_fn(&4), |&v| v == 4).is_some());",
                "    assert!(table.find(hasher_fn(&6), |&v| v == 6).is_some());"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    ",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 1..=6 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    ",
                "    let len = table.len();",
                "    assert_eq!(len, 3);",
                "    assert!(table.find(hasher_fn(&1), |&v| v == 1).is_none());",
                "    assert!(table.find(hasher_fn(&3), |&v| v == 3).is_none());",
                "    assert!(table.find(hasher_fn(&5), |&v| v == 5).is_none());",
                "    assert!(table.find(hasher_fn(&2), |&v| v == 2).is_some());",
                "    assert!(table.find(hasher_fn(&4), |&v| v == 4).is_some());",
                "    assert!(table.find(hasher_fn(&6), |&v| v == 6).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    ",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    ",
                "    let len = table.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(len, 3);",
                "    assert!(table.find(hasher_fn(&1), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&3), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&5), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&2), hasher_fn).is_some());",
                "    assert!(table.find(hasher_fn(&4), hasher_fn).is_some());",
                "    assert!(table.find(hasher_fn(&6), hasher_fn).is_none());"
              ],
              "code": [
                "{",
                "    use hashbrown::{HashTable, DefaultHashBuilder};",
                "    ",
                "    let mut table = HashTable::new();",
                "    let hasher = DefaultHashBuilder::default();",
                "    let hasher_fn = |val: &_| hasher.hash_one(val);",
                "    ",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher_fn(&x), x, hasher_fn);",
                "    }",
                "    ",
                "    table.retain(|&mut x| x % 2 == 0);",
                "    ",
                "    let len = table.len();",
                "    assert_eq!(len, 3);",
                "    assert!(table.find(hasher_fn(&1), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&3), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&5), hasher_fn).is_none());",
                "    assert!(table.find(hasher_fn(&2), hasher_fn).is_some());",
                "    assert!(table.find(hasher_fn(&4), hasher_fn).is_some());",
                "    assert!(table.find(hasher_fn(&6), hasher_fn).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: item in self.raw.iter() at line 865 is false\n"
      ],
      "input_infer": "hash value: any valid u64; item in self.raw.iter(): collected from a HashTable containing at least 1 element; predicate f must return false for all elements; HashTable must start with a minimum length of 1 element\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x % 2 == 1); // Predicate returns false for all elements",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 5);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.iter().count() == 0);",
                "    assert!(table.iter_mut().count() == 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x % 2 == 1); // Predicate returns false for all elements",
                "    assert_eq!(table.len(), 5);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.iter().count() == 0);",
                "    assert!(table.iter_mut().count() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x > 4); // Predicate will return false for 1, 2, 3, 4",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 1);",
                "    assert_eq!(table.find(hasher(&5), hasher), Some(&5));",
                "    assert_eq!(table.find(hasher(&4), hasher), None);",
                "    assert_eq!(table.find(hasher(&3), hasher), None);",
                "    assert_eq!(table.find(hasher(&2), hasher), None);",
                "    assert_eq!(table.find(hasher(&1), hasher), None);",
                "    assert!(table.is_empty() == false);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 1..=5 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x > 4); // Predicate will return false for 1, 2, 3, 4",
                "    assert_eq!(table.len(), 1);",
                "    assert_eq!(table.find(hasher(&5), hasher), Some(&5));",
                "    assert_eq!(table.find(hasher(&4), hasher), None);",
                "    assert_eq!(table.find(hasher(&3), hasher), None);",
                "    assert_eq!(table.find(hasher(&2), hasher), None);",
                "    assert_eq!(table.find(hasher(&1), hasher), None);",
                "    assert!(table.is_empty() == false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "",
                "    table.retain(|&mut x| false); // Predicate returns false for all elements",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);  // Ensure the table is empty after retain",
                "    assert!(table.is_empty());  // Validate that table reports as empty",
                "    assert_eq!(table.capacity(), 1);  // Check that the capacity remains the same"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    table.insert_unique(hasher(&1), 1, hasher);",
                "",
                "    table.retain(|&mut x| false); // Predicate returns false for all elements",
                "    assert_eq!(table.len(), 0);  // Ensure the table is empty after retain",
                "    assert!(table.is_empty());  // Validate that table reports as empty",
                "    assert_eq!(table.capacity(), 1);  // Check that the capacity remains the same",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 10..=15 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x < 10); // Predicate returns false for all elements",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 6);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 6);",
                "    assert_eq!(table.iter().count(), 0);",
                "    assert!(table.raw.iter().count() == 0);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    let mut table = HashTable::new_in(TestAllocator);",
                "    let hasher = |val: &_| val;",
                "",
                "    for x in 10..=15 {",
                "        table.insert_unique(hasher(&x), x, hasher);",
                "    }",
                "",
                "    table.retain(|&mut x| x < 10); // Predicate returns false for all elements",
                "    assert_eq!(table.len(), 6);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.capacity(), 6);",
                "    assert_eq!(table.iter().count(), 0);",
                "    assert!(table.raw.iter().count() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}