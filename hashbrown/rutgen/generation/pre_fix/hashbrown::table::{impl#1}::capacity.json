{
  "name": "hashbrown::table::{impl#1}::capacity",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:603:5:605:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "valid_capacity: 0 to 2^30 (maximum capacity for a HashTable, assuming a realistic upper limit)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(0, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 0);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(100, Global);",
                "    assert!(table.capacity() >= 100);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1, Global);",
                "    assert_eq!(table.capacity(), 1);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(2, Global);",
                "    assert!(table.capacity() > 1);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1000, Global);",
                "    assert!(table.capacity() >= 1000);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(0, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), 0);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(100, Global);",
                "    assert!(table.capacity() >= 100);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1, Global);",
                "    assert_eq!(table.capacity(), 1);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(2, Global);",
                "    assert!(table.capacity() > 1);",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1000, Global);",
                "    assert!(table.capacity() >= 1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 1);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(5, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(5, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), 5);",
                "    assert!(table.capacity() >= 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1024, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 1024);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1024, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), 1024);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1 << 30, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 1 << 30);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in(1 << 30, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), 1 << 30);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in((1 << 30) + 1, Global);",
                "    let _cap = table.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), (1 << 30) + 1);"
              ],
              "code": [
                "{",
                "    let table: HashTable<i32> = HashTable::with_capacity_in((1 << 30) + 1, Global);",
                "    let _cap = table.capacity();",
                "    assert_eq!(table.capacity(), (1 << 30) + 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}