{
  "name": "hashbrown::map::{impl#41}::fmt",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3038:5:3044:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "K is a valid key type that implements Debug, V is a valid value type that implements Debug, entry is an instantiated OccupiedEntry with valid key and value, value is a valid value of type V, and allocator A is a valid type that implements Allocator.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    unsafe impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    #[derive(Debug)]",
                "    struct TestKey;",
                "    ",
                "    #[derive(Debug)]",
                "    struct TestValue;",
                "",
                "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "    ",
                "    test_table.insert(key, value);",
                "    let occupied_entry = OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((TestKey, TestValue)),",
                "        table: &mut test_table,",
                "    };",
                "    ",
                "    let occupied_error = OccupiedError {",
                "        entry: occupied_entry,",
                "        value: TestValue,",
                "    };",
                "",
                "    let _ = format!(\"{:?}\", occupied_error);",
                "}"
              ],
              "oracle": [
                "    let test_allocator = TestAllocator{};",
                "    let key = TestKey{};",
                "    let value = TestValue{};",
                "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    test_table.insert(key, value);",
                "    let occupied_entry = OccupiedEntry {",
                "    hash: 0,",
                "    elem: Bucket::new((TestKey, TestValue)),",
                "    table: &mut test_table,",
                "    };",
                "    let occupied_error = OccupiedError {",
                "    entry: occupied_entry,",
                "    value: TestValue,",
                "    };",
                "    let debug_output = format!(\"{:?}\", occupied_error);",
                "    assert!(debug_output.contains(\"OccupiedError\"));",
                "    assert!(debug_output.contains(\"key: TestKey\"));",
                "    assert!(debug_output.contains(\"old_value: TestValue\"));",
                "    assert!(debug_output.contains(\"new_value: TestValue\"));"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    unsafe impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {}",
                "    }",
                "",
                "    #[derive(Debug)]",
                "    struct TestKey;",
                "    ",
                "    #[derive(Debug)]",
                "    struct TestValue;",
                "",
                "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "    ",
                "    test_table.insert(key, value);",
                "    let occupied_entry = OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((TestKey, TestValue)),",
                "        table: &mut test_table,",
                "    };",
                "    ",
                "    let occupied_error = OccupiedError {",
                "        entry: occupied_entry,",
                "        value: TestValue,",
                "    };",
                "",
                "    let _ = format!(\"{:?}\", occupied_error);",
                "    let test_allocator = TestAllocator{};",
                "    let key = TestKey{};",
                "    let value = TestValue{};",
                "    let mut test_table: HashMap<TestKey, TestValue, DefaultHashBuilder, TestAllocator> = HashMap::new();",
                "    test_table.insert(key, value);",
                "    let occupied_entry = OccupiedEntry {",
                "    hash: 0,",
                "    elem: Bucket::new((TestKey, TestValue)),",
                "    table: &mut test_table,",
                "    };",
                "    let occupied_error = OccupiedError {",
                "    entry: occupied_entry,",
                "    value: TestValue,",
                "    };",
                "    let debug_output = format!(\"{:?}\", occupied_error);",
                "    assert!(debug_output.contains(\"OccupiedError\"));",
                "    assert!(debug_output.contains(\"key: TestKey\"));",
                "    assert!(debug_output.contains(\"old_value: TestValue\"));",
                "    assert!(debug_output.contains(\"new_value: TestValue\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}