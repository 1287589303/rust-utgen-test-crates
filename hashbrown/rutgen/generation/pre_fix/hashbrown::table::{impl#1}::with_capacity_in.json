{
  "name": "hashbrown::table::{impl#1}::with_capacity_in",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:183:5:187:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            raw: RawTable::with_capacity_in(capacity, alloc),\n        }\n"
      ],
      "input_infer": "capacity: 0 to a maximum size, alloc: any valid allocator type \n",
      "answers": [
        {
          "uses": [
            "use bumpalo::Bump;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(0, &bump);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "    ",
                "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "    assert_eq!(table_with_capacity.len(), 0);",
                "    assert!(table_with_capacity.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(0, &bump);",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.capacity(), 0);",
                "    ",
                "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "    assert_eq!(table_with_capacity.len(), 0);",
                "    assert!(table_with_capacity.capacity() >= 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1, &bump);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1);",
                "    ",
                "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "    assert_eq!(table_with_capacity.len(), 0);",
                "    assert!(table_with_capacity.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1, &bump);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1);",
                "    ",
                "    let table_with_capacity: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "    assert_eq!(table_with_capacity.len(), 0);",
                "    assert!(table_with_capacity.capacity() >= 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(5, &bump);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1000, &bump);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1000);",
                "    assert_eq!(table.allocator(), &bump);",
                "    assert!(table.is_empty());",
                "    assert!(table.capacity() >= 1000);",
                "    assert_eq!(table.allocation_size(), 0);",
                "    assert_eq!(table.raw.table.buckets(), 0);"
              ],
              "code": [
                "{",
                "    use bumpalo::Bump;",
                "    let bump = Bump::new();",
                "    let table: hashbrown::HashTable<i32, _> = hashbrown::HashTable::with_capacity_in(1000, &bump);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.capacity() >= 1000);",
                "    assert_eq!(table.allocator(), &bump);",
                "    assert!(table.is_empty());",
                "    assert!(table.capacity() >= 1000);",
                "    assert_eq!(table.allocation_size(), 0);",
                "    assert_eq!(table.raw.table.buckets(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}