{
  "name": "hashbrown::map::{impl#77}::insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3486:5:3498:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Entry::Vacant(entry) at line 3491 is true\n"
      ],
      "input_infer": "self should be an Entry::Vacant variant with a unique key type K and value type V, and the value V can be of any valid type that implements Clone and can be inserted without exceeding map capacity (e.g., number of elements limited to a typical maximum based on system memory, such as 1000).\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"key1\");",
                "    let _occupied_entry = entry.insert(42);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_occupied_entry.key(), &\"key1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&42));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "    ",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    let entry = map.entry(\"key1\");",
                "    let _occupied_entry = entry.insert(42);",
                "    assert_eq!(_occupied_entry.key(), &\"key1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&42));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(matches!(map.entry(\"key1\"), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"key2\"), Entry::Vacant(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    let entry = map.entry(1);",
                "    let _occupied_entry = entry.insert(\"value1\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entry.key(), &1);",
                "    assert_eq!(_occupied_entry.get(), &\"value1\");",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&1));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    let entry = map.entry(1);",
                "    let _occupied_entry = entry.insert(\"value1\".to_string());",
                "    assert_eq!(entry.key(), &1);",
                "    assert_eq!(_occupied_entry.get(), &\"value1\");",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    #[derive(Hash, Eq, PartialEq, Clone)]",
                "    struct ComplexKey {",
                "        id: i32,",
                "        name: String,",
                "    }",
                "",
                "    let mut map: HashMap<ComplexKey, Vec<i32>> = HashMap::new();",
                "    let entry = map.entry(ComplexKey { id: 1, name: \"test\".to_string() });",
                "    let _occupied_entry = entry.insert(vec![1, 2, 3]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_occupied_entry.key(), &ComplexKey { id: 1, name: \"test\".to_string() });",
                "    assert_eq!(_occupied_entry.get(), &vec![1, 2, 3]);",
                "    assert!(map.contains_key(&ComplexKey { id: 1, name: \"test\".to_string() }));",
                "    assert_eq!(map[&ComplexKey { id: 1, name: \"test\".to_string() }], vec![1, 2, 3]);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    #[derive(Hash, Eq, PartialEq, Clone)]",
                "    struct ComplexKey {",
                "        id: i32,",
                "        name: String,",
                "    }",
                "",
                "    let mut map: HashMap<ComplexKey, Vec<i32>> = HashMap::new();",
                "    let entry = map.entry(ComplexKey { id: 1, name: \"test\".to_string() });",
                "    let _occupied_entry = entry.insert(vec![1, 2, 3]);",
                "    assert_eq!(_occupied_entry.key(), &ComplexKey { id: 1, name: \"test\".to_string() });",
                "    assert_eq!(_occupied_entry.get(), &vec![1, 2, 3]);",
                "    assert!(map.contains_key(&ComplexKey { id: 1, name: \"test\".to_string() }));",
                "    assert_eq!(map[&ComplexKey { id: 1, name: \"test\".to_string() }], vec![1, 2, 3]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    ",
                "    for i in 0..5 {",
                "        let key = format!(\"key{}\", i);",
                "        let entry = map.entry(&key);",
                "        let _occupied_entry = entry.insert((i * 10) as u32);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 5);",
                "    assert_eq!(map.get(\"key0\"), Some(&0));",
                "    assert_eq!(map.get(\"key1\"), Some(&10));",
                "    assert_eq!(map.get(\"key2\"), Some(&20));",
                "    assert_eq!(map.get(\"key3\"), Some(&30));",
                "    assert_eq!(map.get(\"key4\"), Some(&40));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    ",
                "    for i in 0..5 {",
                "        let key = format!(\"key{}\", i);",
                "        let entry = map.entry(&key);",
                "        let _occupied_entry = entry.insert((i * 10) as u32);",
                "    }",
                "    assert_eq!(map.len(), 5);",
                "    assert_eq!(map.get(\"key0\"), Some(&0));",
                "    assert_eq!(map.get(\"key1\"), Some(&10));",
                "    assert_eq!(map.get(\"key2\"), Some(&20));",
                "    assert_eq!(map.get(\"key3\"), Some(&30));",
                "    assert_eq!(map.get(\"key4\"), Some(&40));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<i32, i32> = HashMap::new();",
                "    ",
                "    for i in 0..1000 {",
                "        let entry = map.entry(i);",
                "        let _occupied_entry = entry.insert(i * 2);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(&0), Some(&0));",
                "    assert_eq!(map.get(&1), Some(&2));",
                "    assert_eq!(map.get(&2), Some(&4));",
                "    assert_eq!(map.get(&3), Some(&6));",
                "    assert_eq!(map.get(&4), Some(&8));",
                "    assert_eq!(map.get(&5), Some(&10));",
                "    assert_eq!(map.get(&999), Some(&1998));",
                "    assert_eq!(map.len(), 1000);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<i32, i32> = HashMap::new();",
                "    ",
                "    for i in 0..1000 {",
                "        let entry = map.entry(i);",
                "        let _occupied_entry = entry.insert(i * 2);",
                "    }",
                "    assert_eq!(map.get(&0), Some(&0));",
                "    assert_eq!(map.get(&1), Some(&2));",
                "    assert_eq!(map.get(&2), Some(&4));",
                "    assert_eq!(map.get(&3), Some(&6));",
                "    assert_eq!(map.get(&4), Some(&8));",
                "    assert_eq!(map.get(&5), Some(&10));",
                "    assert_eq!(map.get(&999), Some(&1998));",
                "    assert_eq!(map.len(), 1000);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Entry::Occupied(mut entry) at line 3491 is true\n",
        "precondition: self matches Entry::Occupied(mut entry) at line 3491 is true\n",
        "expected return value/type: entry\n"
      ],
      "input_infer": "self must be an Entry::Occupied variant with a valid key and value types K and V that implement Hash; value must match the expected type V.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::hash_map::Entry;",
            "use hashbrown::hash_map::HashMap;",
            "use std::hash::Hash;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"existing_key\", 42);",
                "",
                "    let entry = map.entry(\"existing_key\");",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(37)",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(occupied_entry.key(), &\"existing_key\");",
                "    assert_eq!(occupied_entry.get(), &37);"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"existing_key\", 42);",
                "",
                "    let entry = map.entry(\"existing_key\");",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(37)",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(occupied_entry.key(), &\"existing_key\");",
                "    assert_eq!(occupied_entry.get(), &37);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    map.insert(1, \"one\".to_string());",
                "",
                "    let entry = map.entry(1);",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(\"another_one\".to_string())",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(occupied_entry.key(), &1);",
                "    assert_eq!(occupied_entry.get(), &\"another_one\".to_string());",
                "    assert_eq!(occupied_entry.get_mut(), &mut \"another_one\".to_string());",
                "    let old_value = occupied_entry.insert(\"new_value\".to_string());",
                "    assert_eq!(old_value, \"another_one\".to_string());",
                "    assert_eq!(occupied_entry.get(), &\"new_value\".to_string());"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    map.insert(1, \"one\".to_string());",
                "",
                "    let entry = map.entry(1);",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(\"another_one\".to_string())",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(occupied_entry.key(), &1);",
                "    assert_eq!(occupied_entry.get(), &\"another_one\".to_string());",
                "    assert_eq!(occupied_entry.get_mut(), &mut \"another_one\".to_string());",
                "    let old_value = occupied_entry.insert(\"new_value\".to_string());",
                "    assert_eq!(old_value, \"another_one\".to_string());",
                "    assert_eq!(occupied_entry.get(), &\"new_value\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<String, u64> = HashMap::new();",
                "    map.insert(\"test_key\".to_string(), 100);",
                "",
                "    let entry = map.entry(\"test_key\".to_string());",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(200)",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(map.entry(\"test_key\".to_string()), Entry::Occupied(_)));",
                "    let occupied_entry = map.entry(\"test_key\".to_string()).insert(200);",
                "    assert_eq!(occupied_entry.key(), &\"test_key\".to_string());",
                "    assert_eq!(occupied_entry.get(), &200);",
                "    assert_eq!(map.get(\"test_key\"), Some(&200));",
                "    assert!(matches!(map.entry(\"test_key\".to_string()), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"non_existent_key\".to_string()), Entry::Vacant(_)));"
              ],
              "code": [
                "{",
                "    use hashbrown::hash_map::{Entry, HashMap};",
                "    use std::hash::Hash;",
                "",
                "    let mut map: HashMap<String, u64> = HashMap::new();",
                "    map.insert(\"test_key\".to_string(), 100);",
                "",
                "    let entry = map.entry(\"test_key\".to_string());",
                "    let occupied_entry = match entry {",
                "        Entry::Occupied(entry) => {",
                "            entry.insert(200)",
                "        },",
                "        _ => panic!(\"Expected an occupied entry\"),",
                "    };",
                "",
                "    let key = occupied_entry.key();",
                "    let value = occupied_entry.get();",
                "",
                "    // Using the values for verification in context (assertions omitted).",
                "    assert!(matches!(map.entry(\"test_key\".to_string()), Entry::Occupied(_)));",
                "    let occupied_entry = map.entry(\"test_key\".to_string()).insert(200);",
                "    assert_eq!(occupied_entry.key(), &\"test_key\".to_string());",
                "    assert_eq!(occupied_entry.get(), &200);",
                "    assert_eq!(map.get(\"test_key\"), Some(&200));",
                "    assert!(matches!(map.entry(\"test_key\".to_string()), Entry::Occupied(_)));",
                "    assert!(matches!(map.entry(\"non_existent_key\".to_string()), Entry::Vacant(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}