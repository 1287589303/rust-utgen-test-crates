{
  "name": "hashbrown::map::{impl#5}::get_key_value",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1335:5:1344:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.get_inner(k) matches Some((key, value)) at line 1340 is true\n",
        "precondition: self.get_inner(k) matches Some((key, value)) at line 1340 is true\n",
        "expected return value/type: Some((key, value))\n"
      ],
      "input_infer": "K: valid key type that implements Hash and Eq; V: valid value type; Q: borrowed key type satisfying Hash + Equivalent<K>; k: Q instance matching one of the keys in the HashMap\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomEquiv;",
                "",
                "    impl Hash for CustomEquiv {",
                "        fn hash<H: std::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    impl Equivalent<usize> for CustomEquiv {",
                "        fn equivalent(&self, _other: &usize) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"a\");",
                "",
                "    let key_ref: &CustomEquiv = &CustomEquiv;",
                "    let result = map.get_key_value(key_ref);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&1, &\"a\")));"
              ],
              "code": [
                "{",
                "    struct CustomEquiv;",
                "",
                "    impl Hash for CustomEquiv {",
                "        fn hash<H: std::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    impl Equivalent<usize> for CustomEquiv {",
                "        fn equivalent(&self, _other: &usize) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut map = HashMap::new();",
                "    map.insert(1, \"a\");",
                "",
                "    let key_ref: &CustomEquiv = &CustomEquiv;",
                "    let result = map.get_key_value(key_ref);",
                "    assert_eq!(result, Some((&1, &\"a\")));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct AlternativeKey;",
                "",
                "    impl Hash for AlternativeKey {",
                "        fn hash<H: std::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    impl Equivalent<u32> for AlternativeKey {",
                "        fn equivalent(&self, _other: &u32) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<u32, &str> = HashMap::new();",
                "    map.insert(2, \"b\");",
                "",
                "    let key_ref: &AlternativeKey = &AlternativeKey;",
                "    let result = map.get_key_value(key_ref);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&2, &\"b\")));"
              ],
              "code": [
                "{",
                "    struct AlternativeKey;",
                "",
                "    impl Hash for AlternativeKey {",
                "        fn hash<H: std::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "",
                "    impl Equivalent<u32> for AlternativeKey {",
                "        fn equivalent(&self, _other: &u32) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<u32, &str> = HashMap::new();",
                "    map.insert(2, \"b\");",
                "",
                "    let key_ref: &AlternativeKey = &AlternativeKey;",
                "    let result = map.get_key_value(key_ref);",
                "    assert_eq!(result, Some((&2, &\"b\")));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.get_inner(k) matches None at line 1340 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "Q is a type that implements Hash and Equivalent<K>; k should be a reference to an instance of Q that does not match any keys in the HashMap and has a size of 0 or references to an empty collection.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MissingKey;",
                "    impl Hash for MissingKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    impl Equivalent<i32> for MissingKey {",
                "        fn equivalent(&self, _: &i32) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let missing_key = MissingKey;",
                "",
                "    let _result = map.get_key_value(&missing_key);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, None);"
              ],
              "code": [
                "{",
                "    struct MissingKey;",
                "    impl Hash for MissingKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    impl Equivalent<i32> for MissingKey {",
                "        fn equivalent(&self, _: &i32) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<i32, &str> = HashMap::new();",
                "    let missing_key = MissingKey;",
                "",
                "    let _result = map.get_key_value(&missing_key);",
                "    assert_eq!(_result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct EmptyKey;",
                "    impl Hash for EmptyKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    impl Equivalent<String> for EmptyKey {",
                "        fn equivalent(&self, _: &String) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, &str> = HashMap::new();",
                "    let empty_key = EmptyKey;",
                "",
                "    let _result = map.get_key_value(&empty_key);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_result, None);"
              ],
              "code": [
                "{",
                "    struct EmptyKey;",
                "    impl Hash for EmptyKey {",
                "        fn hash<H: core::hash::Hasher>(&self, _state: &mut H) {}",
                "    }",
                "    impl Equivalent<String> for EmptyKey {",
                "        fn equivalent(&self, _: &String) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, &str> = HashMap::new();",
                "    let empty_key = EmptyKey;",
                "",
                "    let _result = map.get_key_value(&empty_key);",
                "    assert_eq!(_result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}