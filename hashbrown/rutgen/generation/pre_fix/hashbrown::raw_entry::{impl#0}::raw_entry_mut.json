{
  "name": "hashbrown::raw_entry::{impl#0}::raw_entry_mut",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:107:5:109:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: RawEntryBuilderMut { map: self }\n"
      ],
      "input_infer": "valid mutations of a HashMap with key types that implement Hash and have equivalent logic, including cases of existing occupied keys, vacant keys, and proper initialization of the raw entry builder.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "}"
              ],
              "oracle": [
                "    assert!(raw_entry_mut.map as *const _ == &mut map as *mut _);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&\"a\"), Some(&100));"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"a\", 100);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "    assert!(raw_entry_mut.map as *const _ == &mut map as *mut _);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&\"a\"), Some(&100));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"b\", 200);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "}"
              ],
              "oracle": [
                "    assert!(raw_entry_mut.map as *const _ == &mut map as *mut _);",
                "    assert_eq!(raw_entry_mut.map.len(), 1);",
                "    assert_eq!(raw_entry_mut.map.get(&\"b\"), Some(&200));",
                "    assert!(std::mem::size_of::<RawEntryBuilderMut<_, _, _, _>>() > 0);",
                "    assert!(std::mem::align_of::<RawEntryBuilderMut<_, _, _, _>>() > 0);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"b\", 200);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "    assert!(raw_entry_mut.map as *const _ == &mut map as *mut _);",
                "    assert_eq!(raw_entry_mut.map.len(), 1);",
                "    assert_eq!(raw_entry_mut.map.get(&\"b\"), Some(&200));",
                "    assert!(std::mem::size_of::<RawEntryBuilderMut<_, _, _, _>>() > 0);",
                "    assert!(std::mem::align_of::<RawEntryBuilderMut<_, _, _, _>>() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.extend([(\"c\", 300), (\"d\", 400)]);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "}"
              ],
              "oracle": [
                "    let mut map = HashMap::new();",
                "    map.extend([(\"c\", 300), (\"d\", 400)]);",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    assert_eq!(raw_entry_mut.map, &mut map);",
                "    assert!(std::mem::size_of_val(&raw_entry_mut) > 0);",
                "    assert!(std::mem::align_of_val(&raw_entry_mut) > 0);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.extend([(\"c\", 300), (\"d\", 400)]);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "    let mut map = HashMap::new();",
                "    map.extend([(\"c\", 300), (\"d\", 400)]);",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    assert_eq!(raw_entry_mut.map, &mut map);",
                "    assert!(std::mem::size_of_val(&raw_entry_mut) > 0);",
                "    assert!(std::mem::align_of_val(&raw_entry_mut) > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"e\", 500);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::mem::size_of_val(&map.raw_entry_mut()), std::mem::size_of::<RawEntryBuilderMut<'_, &str, i32, DefaultHashBuilder>>());",
                "    assert!(!std::ptr::eq(raw_entry_mut.map, &map));",
                "    assert_eq!(raw_entry_mut.map.table.len(), 1);",
                "    assert_eq!(raw_entry_mut.map.table.get(\"e\"), Some(&500));",
                "    assert_eq!(raw_entry_mut.map.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut map = HashMap::new();",
                "    map.insert(\"e\", 500);",
                "    ",
                "    let raw_entry_mut = map.raw_entry_mut();",
                "    let _ = raw_entry_mut;",
                "    assert_eq!(std::mem::size_of_val(&map.raw_entry_mut()), std::mem::size_of::<RawEntryBuilderMut<'_, &str, i32, DefaultHashBuilder>>());",
                "    assert!(!std::ptr::eq(raw_entry_mut.map, &map));",
                "    assert_eq!(raw_entry_mut.map.table.len(), 1);",
                "    assert_eq!(raw_entry_mut.map.table.get(\"e\"), Some(&500));",
                "    assert_eq!(raw_entry_mut.map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}