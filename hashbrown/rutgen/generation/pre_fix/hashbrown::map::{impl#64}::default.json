{
  "name": "hashbrown::map::{impl#64}::default",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3347:5:3351:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            inner: Default::default(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input required since the function is a default constructor; it should be tested to ensure it constructs a valid instance of `Self` with `inner` being initialized to the default of its type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let _values: Values<(), ()> = Values::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_values.inner, Default::default());",
                "    assert!(std::mem::size_of_val(&_values) > 0);",
                "    assert!(std::mem::is_uninitialized(&_values));",
                "    assert_eq!(_values.inner.marker.type_id(), std::any::TypeId::of::<()>());",
                "    assert_eq!(std::mem::discriminant(&_values), std::mem::discriminant(&Values::default()));"
              ],
              "code": [
                "{",
                "    let _values: Values<(), ()> = Values::default();",
                "    assert_eq!(_values.inner, Default::default());",
                "    assert!(std::mem::size_of_val(&_values) > 0);",
                "    assert!(std::mem::is_uninitialized(&_values));",
                "    assert_eq!(_values.inner.marker.type_id(), std::any::TypeId::of::<()>());",
                "    assert_eq!(std::mem::discriminant(&_values), std::mem::discriminant(&Values::default()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct Key;",
                "    struct Value;",
                "",
                "    let _values: Values<Key, Value> = Values::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_values.inner, Default::default());"
              ],
              "code": [
                "{",
                "    struct Key;",
                "    struct Value;",
                "",
                "    let _values: Values<Key, Value> = Values::default();",
                "    assert_eq!(_values.inner, Default::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct StringKey;",
                "    struct IntValue;",
                "",
                "    let _values: Values<StringKey, IntValue> = Values::default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_values.inner, Default::default());",
                "    assert!(_values.is_empty());",
                "    assert_eq!(std::mem::size_of::<Values<StringKey, IntValue>>(), std::mem::size_of::<Values<_, _>>());",
                "    assert_eq!(_values.inner.iter.size_hint().0, 0);",
                "    assert_eq!(_values.inner.inner, Default::default());",
                "    assert!(std::any::TypeId::of::<Values<StringKey, IntValue>>() == std::any::TypeId::of::<Values<_, _>>());",
                "    assert!(_values.inner.is_done());"
              ],
              "code": [
                "{",
                "    struct StringKey;",
                "    struct IntValue;",
                "",
                "    let _values: Values<StringKey, IntValue> = Values::default();",
                "    assert_eq!(_values.inner, Default::default());",
                "    assert!(_values.is_empty());",
                "    assert_eq!(std::mem::size_of::<Values<StringKey, IntValue>>(), std::mem::size_of::<Values<_, _>>());",
                "    assert_eq!(_values.inner.iter.size_hint().0, 0);",
                "    assert_eq!(_values.inner.inner, Default::default());",
                "    assert!(std::any::TypeId::of::<Values<StringKey, IntValue>>() == std::any::TypeId::of::<Values<_, _>>());",
                "    assert!(_values.inner.is_done());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}