{
  "name": "hashbrown::raw::{impl#8}::new_in",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:610:5:616:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            table: RawTableInner::NEW,\n            alloc,\n            marker: PhantomData,\n        }\n"
      ],
      "input_infer": "valid allocator instances (e.g., Global or custom Allocator types)\n",
      "answers": [
        {
          "uses": [
            "use crate::alloc::Global;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use crate::alloc::Global;",
                "    let alloc = Global;",
                "    ",
                "    let table: RawTable<i32, Global> = RawTable::new_in(alloc);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.table.bucket_mask, 0);",
                "    assert_eq!(table.table.ctrl.as_ptr(), ptr::null_mut());",
                "    assert_eq!(table.table.growth_left, 0);",
                "    assert_eq!(table.table.items, 0);",
                "    assert_eq!(table.alloc as *const _, &alloc as *const _);",
                "    assert!(table.marker == PhantomData::<i32>);",
                "    assert_eq!(table.capacity(), 1);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.buckets(), 1);"
              ],
              "code": [
                "{",
                "    use crate::alloc::Global;",
                "    let alloc = Global;",
                "    ",
                "    let table: RawTable<i32, Global> = RawTable::new_in(alloc);",
                "    assert_eq!(table.table.bucket_mask, 0);",
                "    assert_eq!(table.table.ctrl.as_ptr(), ptr::null_mut());",
                "    assert_eq!(table.table.growth_left, 0);",
                "    assert_eq!(table.table.items, 0);",
                "    assert_eq!(table.alloc as *const _, &alloc as *const _);",
                "    assert!(table.marker == PhantomData::<i32>);",
                "    assert_eq!(table.capacity(), 1);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.len(), 0);",
                "    assert_eq!(table.buckets(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct CustomAllocator;",
                "",
                "    unsafe impl Allocator for CustomAllocator {",
                "        fn allocate(&self, _: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
                "    }",
                "",
                "    let alloc = CustomAllocator;",
                "",
                "    let table: RawTable<i32, CustomAllocator> = RawTable::new_in(alloc);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.table.bucket_mask, 0);",
                "    assert_eq!(table.table.ctrl, NonNull::new_unchecked(std::ptr::null_mut()));",
                "    assert_eq!(table.table.growth_left, 0);",
                "    assert_eq!(table.table.items, 0);",
                "    assert_eq!(table.alloc, alloc);",
                "    assert!(std::mem::size_of::<T>() == std::mem::size_of::<i32>());",
                "    assert!(table.marker == PhantomData::<i32>);"
              ],
              "code": [
                "{",
                "    struct CustomAllocator;",
                "",
                "    unsafe impl Allocator for CustomAllocator {",
                "        fn allocate(&self, _: Layout) -> Result<NonNull<u8>, ()> {",
                "            Ok(NonNull::new_unchecked(std::ptr::null_mut()))",
                "        }",
                "        unsafe fn deallocate(&self, _: NonNull<u8>, _: Layout) {}",
                "    }",
                "",
                "    let alloc = CustomAllocator;",
                "",
                "    let table: RawTable<i32, CustomAllocator> = RawTable::new_in(alloc);",
                "    assert_eq!(table.table.bucket_mask, 0);",
                "    assert_eq!(table.table.ctrl, NonNull::new_unchecked(std::ptr::null_mut()));",
                "    assert_eq!(table.table.growth_left, 0);",
                "    assert_eq!(table.table.items, 0);",
                "    assert_eq!(table.alloc, alloc);",
                "    assert!(std::mem::size_of::<T>() == std::mem::size_of::<i32>());",
                "    assert!(table.marker == PhantomData::<i32>);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}