{
  "name": "hashbrown::raw::{impl#0}::capacity_overflow",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:34:5:39:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Fallibility::Infallible at line 35 is true\n"
      ],
      "input_infer": "self = Fallibility::Infallible\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let fallibility = Fallibility::Infallible;",
                "    fallibility.capacity_overflow();",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let fallibility = Fallibility::Infallible;",
                "    fallibility.capacity_overflow();",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let fallibility = Fallibility::Infallible;",
                "    fallibility.capacity_overflow();",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let fallibility = Fallibility::Infallible;",
                "    fallibility.capacity_overflow();",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Fallibility::Fallible at line 35 is true\n",
        "precondition: self matches Fallibility::Fallible at line 35 is true\n",
        "expected return value/type: TryReserveError::CapacityOverflow\n"
      ],
      "input_infer": "self = Fallibility::Fallible\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let fallibility = Fallibility::Fallible;",
                "    let result = fallibility.capacity_overflow();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, TryReserveError::CapacityOverflow);"
              ],
              "code": [
                "{",
                "    let fallibility = Fallibility::Fallible;",
                "    let result = fallibility.capacity_overflow();",
                "    assert_eq!(result, TryReserveError::CapacityOverflow);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let fallibility = Fallibility::Infallible;",
                "    let _result = fallibility.capacity_overflow();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(Fallibility::Fallible.capacity_overflow(), TryReserveError::CapacityOverflow);",
                "    let fallibility = Fallibility::Fallible;",
                "    let result = fallibility.capacity_overflow();",
                "    assert!(matches!(result, TryReserveError::CapacityOverflow));"
              ],
              "code": [
                "{",
                "    let fallibility = Fallibility::Infallible;",
                "    let _result = fallibility.capacity_overflow();",
                "    assert_eq!(Fallibility::Fallible.capacity_overflow(), TryReserveError::CapacityOverflow);",
                "    let fallibility = Fallibility::Fallible;",
                "    let result = fallibility.capacity_overflow();",
                "    assert!(matches!(result, TryReserveError::CapacityOverflow));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}