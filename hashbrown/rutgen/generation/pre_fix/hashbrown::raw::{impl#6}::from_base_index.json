{
  "name": "hashbrown::raw::{impl#6}::from_base_index",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:263:5:295:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: T::IS_ZERO_SIZED at line 284 is true\n",
        "expected return value/type: Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }\n"
      ],
      "input_infer": "base: NonNull<T> pointing to a valid memory location for a zero-sized type, index: 0 to RawTableInner.bucket_mask (inclusive)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 0;",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 0;",
                "    let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    assert!(bucket.ptr.as_ptr() == (0x1 as *mut ZeroSized).sub(index));",
                "    assert!(bucket.ptr != NonNull::dangling());",
                "    assert!(bucket.ptr == NonNull::new_unchecked((index + 1) as *mut ZeroSized));"
              ],
              "code": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 0;",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 0;",
                "    let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    assert!(bucket.ptr.as_ptr() == (0x1 as *mut ZeroSized).sub(index));",
                "    assert!(bucket.ptr != NonNull::dangling());",
                "    assert!(bucket.ptr == NonNull::new_unchecked((index + 1) as *mut ZeroSized));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 1;",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "}"
              ],
              "oracle": [
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 1;",
                "    unsafe {",
                "    let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    assert!(bucket.ptr.as_ptr() == (index + 1) as *mut ZeroSized);",
                "    }"
              ],
              "code": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 1;",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 1;",
                "    unsafe {",
                "    let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    assert!(bucket.ptr.as_ptr() == (index + 1) as *mut ZeroSized);",
                "    }",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 10; // Assume bucket_mask is 10",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(unsafe { Bucket::<ZeroSized>::from_base_index(base, index).ptr }, NonNull::new_unchecked((index + 1) as *mut ZeroSized));"
              ],
              "code": [
                "{",
                "    struct ZeroSized;",
                "    impl ZeroSized {",
                "        const IS_ZERO_SIZED: bool = true;",
                "    }",
                "",
                "    let base = NonNull::new(0x1 as *mut ZeroSized).unwrap();",
                "    let index = 10; // Assume bucket_mask is 10",
                "    unsafe {",
                "        let bucket = Bucket::<ZeroSized>::from_base_index(base, index);",
                "    }",
                "    assert_eq!(unsafe { Bucket::<ZeroSized>::from_base_index(base, index).ptr }, NonNull::new_unchecked((index + 1) as *mut ZeroSized));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: T::IS_ZERO_SIZED at line 284 is false\n",
        "expected return value/type: Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }\n"
      ],
      "input_infer": "base: NonNull<T> pointing to a valid memory address of a non-zero-sized element in the data part of the table, index in the range of 0 to RawTableInner.bucket_mask inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    ",
                "    let index: usize = 0; // Minimum valid index",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "}"
              ],
              "oracle": [
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    let index: usize = 0;",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr().sub(index));",
                "    assert!(bucket.ptr.as_ptr().is_non_null());",
                "    assert_eq!(bucket.ptr.as_ref().data, 42);"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    ",
                "    let index: usize = 0; // Minimum valid index",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    let index: usize = 0;",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr().sub(index));",
                "    assert!(bucket.ptr.as_ptr().is_non_null());",
                "    assert_eq!(bucket.ptr.as_ref().data, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    ",
                "    let index: usize = 1; // Maximum valid index assuming bucket_mask is at least 1",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bucket.ptr.as_ptr(), &base_value as *const _ as *mut _);",
                "    assert!(bucket.ptr != NonNull::dangling());",
                "    assert!(bucket.ptr.is_alive());",
                "    assert_eq!(unsafe { bucket.as_ref() }.data, 42);"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    ",
                "    let index: usize = 1; // Maximum valid index assuming bucket_mask is at least 1",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    assert_eq!(bucket.ptr.as_ptr(), &base_value as *const _ as *mut _);",
                "    assert!(bucket.ptr != NonNull::dangling());",
                "    assert!(bucket.ptr.is_alive());",
                "    assert_eq!(unsafe { bucket.as_ref() }.data, 42);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "",
                "    let index: usize = 0; // Minimum valid index",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "}"
              ],
              "oracle": [
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    let index: usize = 0;",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr());"
              ],
              "code": [
                "{",
                "    struct TestStruct {",
                "        data: u32,",
                "    }",
                "",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "",
                "    let index: usize = 0; // Minimum valid index",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    let base_value = TestStruct { data: 42 };",
                "    let base_ptr = NonNull::new_unchecked(&base_value as *const _ as *mut _);",
                "    let index: usize = 0;",
                "    let bucket = Bucket::<TestStruct>::from_base_index(base_ptr, index);",
                "    assert_eq!(bucket.ptr.as_ptr(), base_ptr.as_ptr());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}