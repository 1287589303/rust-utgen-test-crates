{
  "name": "hashbrown::control::tag::{impl#0}::full",
  "mod_info": {
    "name": "control::tag",
    "loc": "src/control/mod.rs:3:1:3:9"
  },
  "visible": true,
  "loc": "src/control/tag.rs:36:5:50:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Tag((top7 & 0x7f) as u8)\n"
      ],
      "input_infer": "hash: 0 (minimum boundary), hash: 0xFFFFFFFFFFFFFFFF (maximum boundary), hash: 0x7F (maximum for top 7 bits), hash: 0x80 (minimum for top 7 bits, to test if it truncates correctly)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag::full(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(1);",
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x7F_FF_FF_FF_FF_FF_FF_FF);",
                "    assert_eq!(tag, Tag(0x7F));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x80_FF_FF_FF_FF_FF_FF_FF);",
                "    assert_eq!(tag, Tag(0x00));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x00);",
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);"
              ],
              "code": [
                "{",
                "    let tag = Tag::full(0);",
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(1);",
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x7F_FF_FF_FF_FF_FF_FF_FF);",
                "    assert_eq!(tag, Tag(0x7F));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x80_FF_FF_FF_FF_FF_FF_FF);",
                "    assert_eq!(tag, Tag(0x00));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "    ",
                "    let tag = Tag::full(0x00);",
                "    assert_eq!(tag, Tag(0));",
                "    assert!(tag.is_full() == false);",
                "    assert!(tag.is_special() == false);",
                "    assert!(tag.special_is_empty() == true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag::full(0xFFFFFFFFFFFFFFFF);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag, Tag(0b0111_1111));",
                "    assert_eq!(tag.0, 127);",
                "    assert!(tag.is_full());",
                "    assert!(!tag.is_special());",
                "    assert!(!tag.special_is_empty());"
              ],
              "code": [
                "{",
                "    let tag = Tag::full(0xFFFFFFFFFFFFFFFF);",
                "    assert_eq!(tag, Tag(0b0111_1111));",
                "    assert_eq!(tag.0, 127);",
                "    assert!(tag.is_full());",
                "    assert!(!tag.is_special());",
                "    assert!(!tag.special_is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag::full(0x7F);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag, Tag(0b01111111));",
                "    assert!(tag.is_full());",
                "    assert!(!tag.is_special());",
                "    assert!(!tag.special_is_empty());",
                "    assert_eq!(Tag::full(0xFF), Tag(0b01111111));",
                "    assert_eq!(Tag::full(0x00), Tag(0b00000000));",
                "    assert_eq!(Tag::full(0x80), Tag(0b00000000));",
                "    assert_eq!(Tag::full(0xFFFFFFFFFFFFFFFF), Tag(0b01111111));",
                "    assert_eq!(Tag::full(0x0000000000000000), Tag(0b00000000));"
              ],
              "code": [
                "{",
                "    let tag = Tag::full(0x7F);",
                "    assert_eq!(tag, Tag(0b01111111));",
                "    assert!(tag.is_full());",
                "    assert!(!tag.is_special());",
                "    assert!(!tag.special_is_empty());",
                "    assert_eq!(Tag::full(0xFF), Tag(0b01111111));",
                "    assert_eq!(Tag::full(0x00), Tag(0b00000000));",
                "    assert_eq!(Tag::full(0x80), Tag(0b00000000));",
                "    assert_eq!(Tag::full(0xFFFFFFFFFFFFFFFF), Tag(0b01111111));",
                "    assert_eq!(Tag::full(0x0000000000000000), Tag(0b00000000));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let tag = Tag::full(0x80);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(tag, Tag(0b0000_0000)); // Test case for hash 0x80, expecting empty tag",
                "    assert_eq!(tag, Tag(0b0000_0000)); // Repeated case for clarity",
                "    let tag = Tag::full(0x7F); // Test case for maximum value in top 7 bits",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting full tag with value 0x3F",
                "    let tag = Tag::full(0xFF); // Test case for hash with all bits set",
                "    assert_eq!(tag, Tag(0b0000_0111)); // Expecting truncated value (top 7 bits)",
                "    let tag = Tag::full(0x00); // Test case for zero hash",
                "    assert_eq!(tag, Tag(0b0000_0000)); // Expecting empty tag",
                "    let tag = Tag::full(0x7FFFFFFF); // Test case for maximum 32-bit signed integer",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting top 7 bits from the hash",
                "    let tag = Tag::full(0xFFFFFFFFFFFFFFFF); // Test case for maximum 64-bit unsigned integer",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting top 7 bits from the hash"
              ],
              "code": [
                "{",
                "    let tag = Tag::full(0x80);",
                "    assert_eq!(tag, Tag(0b0000_0000)); // Test case for hash 0x80, expecting empty tag",
                "    assert_eq!(tag, Tag(0b0000_0000)); // Repeated case for clarity",
                "    let tag = Tag::full(0x7F); // Test case for maximum value in top 7 bits",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting full tag with value 0x3F",
                "    let tag = Tag::full(0xFF); // Test case for hash with all bits set",
                "    assert_eq!(tag, Tag(0b0000_0111)); // Expecting truncated value (top 7 bits)",
                "    let tag = Tag::full(0x00); // Test case for zero hash",
                "    assert_eq!(tag, Tag(0b0000_0000)); // Expecting empty tag",
                "    let tag = Tag::full(0x7FFFFFFF); // Test case for maximum 32-bit signed integer",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting top 7 bits from the hash",
                "    let tag = Tag::full(0xFFFFFFFFFFFFFFFF); // Test case for maximum 64-bit unsigned integer",
                "    assert_eq!(tag, Tag(0b0111_1111)); // Expecting top 7 bits from the hash",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}