{
  "name": "hashbrown::raw::{impl#7}::with_capacity",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:594:5:596:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "capacity: 0 to maximum usize (upper limit can be system dependent, so test with both 0, 1, and a large value to represent high capacity scenarios)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 0);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert!(table.buckets() > 0);"
              ],
              "code": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(0);",
                "    assert_eq!(table.capacity(), 0);",
                "    assert_eq!(table.len(), 0);",
                "    assert!(table.is_empty());",
                "    assert!(table.buckets() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(table.capacity(), 1);",
                "    assert!(table.is_empty());",
                "    assert!(table.buckets() > 0);"
              ],
              "code": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(1);",
                "    assert_eq!(table.capacity(), 1);",
                "    assert!(table.is_empty());",
                "    assert!(table.buckets() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(table.len() == 0);",
                "    assert!(table.capacity() >= usize::MAX);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.buckets(), 0);",
                "    assert!(unsafe { table.is_bucket_full(0) } == false);"
              ],
              "code": [
                "{",
                "    let table: RawTable<i32> = RawTable::with_capacity(usize::MAX);",
                "    assert!(table.len() == 0);",
                "    assert!(table.capacity() >= usize::MAX);",
                "    assert!(table.is_empty());",
                "    assert_eq!(table.buckets(), 0);",
                "    assert!(unsafe { table.is_bucket_full(0) } == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}