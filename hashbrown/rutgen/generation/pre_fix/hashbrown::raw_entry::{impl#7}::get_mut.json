{
  "name": "hashbrown::raw_entry::{impl#7}::get_mut",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1050:5:1052:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: unsafe { &mut self.elem.as_mut().1 }\n"
      ],
      "input_infer": "K: valid key existing in the RawTable, V: valid mutable value type, A: Allocator type (e.g., Global), S: BuildHasher type, occupied entry must be present in the RawTable during the call\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key1\", 1));",
                "    ",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key1\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    let mut value_ref: &mut u32 = entry.get_mut();",
                "    *value_ref += 5;",
                "    assert_eq!(*value_ref, 6);",
                "    assert_eq!(table.get_mut(\"key1\"), &6);",
                "    let original_value = entry.get_mut();",
                "    *original_value += 10;",
                "    assert_eq!(*original_value, 16);",
                "    assert_eq!(table.get_mut(\"key1\"), &16);",
                "    assert!(entry.get_mut() as *mut _ != original_value as *mut _);"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key1\", 1));",
                "    ",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key1\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "    let mut value_ref: &mut u32 = entry.get_mut();",
                "    *value_ref += 5;",
                "    assert_eq!(*value_ref, 6);",
                "    assert_eq!(table.get_mut(\"key1\"), &6);",
                "    let original_value = entry.get_mut();",
                "    *original_value += 10;",
                "    assert_eq!(*original_value, 16);",
                "    assert_eq!(table.get_mut(\"key1\"), &16);",
                "    assert!(entry.get_mut() as *mut _ != original_value as *mut _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key2\", 2));",
                "    table.insert((\"key3\", 3));",
                "",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key2\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    let value_ref: &mut u32 = entry.get_mut();",
                "    assert_eq!(*value_ref, 2);",
                "    *value_ref += 1;",
                "    assert_eq!(table.get_mut(\"key2\"), Some(&mut 3));",
                "    let mut entry2 = RawOccupiedEntryMut {",
                "    elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key3\")).unwrap() },",
                "    table: &mut table,",
                "    hash_builder: &(),",
                "    };",
                "    let value_ref2: &mut u32 = entry2.get_mut();",
                "    assert_eq!(*value_ref2, 3);",
                "    *value_ref2 += 1;",
                "    assert_eq!(table.get_mut(\"key3\"), Some(&mut 4));"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key2\", 2));",
                "    table.insert((\"key3\", 3));",
                "",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key2\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "    assert_eq!(*value_ref, 2);",
                "    *value_ref += 1;",
                "    assert_eq!(table.get_mut(\"key2\"), Some(&mut 3));",
                "    let mut entry2 = RawOccupiedEntryMut {",
                "    elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key3\")).unwrap() },",
                "    table: &mut table,",
                "    hash_builder: &(),",
                "    };",
                "    let value_ref2: &mut u32 = entry2.get_mut();",
                "    assert_eq!(*value_ref2, 3);",
                "    *value_ref2 += 1;",
                "    assert_eq!(table.get_mut(\"key3\"), Some(&mut 4));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "        ",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key4\", 4));",
                "",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key_non_existent\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(std::ptr::eq(value_ref, &mut table.get_mut(\"key4\").unwrap()));",
                "    assert_eq!(*value_ref, 4);",
                "    let original_value = *value_ref;",
                "    *value_ref += 10;",
                "    assert_eq!(*value_ref, original_value + 10);",
                "    assert_eq!(table.get_mut(\"key4\").unwrap(), &mut (original_value + 10));",
                "    drop(value_ref);",
                "    assert_eq!(table.get_mut(\"key4\").unwrap(), &mut (original_value + 10));"
              ],
              "code": [
                "{",
                "    struct TestAllocator;",
                "",
                "    impl Allocator for TestAllocator {",
                "        fn allocate(&self, _layout: Layout) -> Result<NonNull<u8>, ()> {",
                "            unimplemented!()",
                "        }",
                "        ",
                "        unsafe fn deallocate(&self, _ptr: NonNull<u8>, _layout: Layout) {",
                "            unimplemented!()",
                "        }",
                "    }",
                "",
                "    let mut table = RawTable::new(TestAllocator);",
                "    table.insert((\"key4\", 4));",
                "",
                "    let mut entry = RawOccupiedEntryMut {",
                "        elem: Bucket { ptr: NonNull::new(&mut table.get_mut(\"key_non_existent\")).unwrap() },",
                "        table: &mut table,",
                "        hash_builder: &(),",
                "    };",
                "",
                "    let value_ref: &mut u32 = entry.get_mut();",
                "    assert!(std::ptr::eq(value_ref, &mut table.get_mut(\"key4\").unwrap()));",
                "    assert_eq!(*value_ref, 4);",
                "    let original_value = *value_ref;",
                "    *value_ref += 10;",
                "    assert_eq!(*value_ref, original_value + 10);",
                "    assert_eq!(table.get_mut(\"key4\").unwrap(), &mut (original_value + 10));",
                "    drop(value_ref);",
                "    assert_eq!(table.get_mut(\"key4\").unwrap(), &mut (original_value + 10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}