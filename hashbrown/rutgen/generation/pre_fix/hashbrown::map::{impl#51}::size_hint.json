{
  "name": "hashbrown::map::{impl#51}::size_hint",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3230:5:3232:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid test input conditions or ranges include: a valid non-empty RawIter with a size hint of 0 to n (where n is the maximum size), and a valid empty RawIter returning (0, Some(0)).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRawIter {",
                "        items: usize,",
                "    }",
                "    ",
                "    impl TestRawIter {",
                "        fn size_hint(&self) -> (usize, Option<usize>) {",
                "            (self.items, Some(self.items))",
                "        }",
                "    }",
                "",
                "    let mut iter = IterMut {",
                "        inner: RawIter {",
                "            iter: TestRawIter { items: 5 },",
                "            items: 5,",
                "        },",
                "        marker: PhantomData,",
                "    };",
                "",
                "    let hint = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hint, (5, Some(5)));",
                "    iter.inner.items = 0;",
                "    let hint_empty = iter.size_hint();",
                "    assert_eq!(hint_empty, (0, Some(0)));"
              ],
              "code": [
                "{",
                "    struct TestRawIter {",
                "        items: usize,",
                "    }",
                "    ",
                "    impl TestRawIter {",
                "        fn size_hint(&self) -> (usize, Option<usize>) {",
                "            (self.items, Some(self.items))",
                "        }",
                "    }",
                "",
                "    let mut iter = IterMut {",
                "        inner: RawIter {",
                "            iter: TestRawIter { items: 5 },",
                "            items: 5,",
                "        },",
                "        marker: PhantomData,",
                "    };",
                "",
                "    let hint = iter.size_hint();",
                "    assert_eq!(hint, (5, Some(5)));",
                "    iter.inner.items = 0;",
                "    let hint_empty = iter.size_hint();",
                "    assert_eq!(hint_empty, (0, Some(0)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestRawIter {",
                "        items: usize,",
                "    }",
                "    ",
                "    impl TestRawIter {",
                "        fn size_hint(&self) -> (usize, Option<usize>) {",
                "            (0, Some(0))",
                "        }",
                "    }",
                "",
                "    let mut iter = IterMut {",
                "        inner: RawIter {",
                "            iter: TestRawIter { items: 0 },",
                "            items: 0,",
                "        },",
                "        marker: PhantomData,",
                "    };",
                "",
                "    let hint = iter.size_hint();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(hint, (0, Some(0));"
              ],
              "code": [
                "{",
                "    struct TestRawIter {",
                "        items: usize,",
                "    }",
                "    ",
                "    impl TestRawIter {",
                "        fn size_hint(&self) -> (usize, Option<usize>) {",
                "            (0, Some(0))",
                "        }",
                "    }",
                "",
                "    let mut iter = IterMut {",
                "        inner: RawIter {",
                "            iter: TestRawIter { items: 0 },",
                "            items: 0,",
                "        },",
                "        marker: PhantomData,",
                "    };",
                "",
                "    let hint = iter.size_hint();",
                "    assert_eq!(hint, (0, Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}