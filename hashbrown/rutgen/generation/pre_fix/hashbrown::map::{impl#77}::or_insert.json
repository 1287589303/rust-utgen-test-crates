{
  "name": "hashbrown::map::{impl#77}::or_insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3519:5:3528:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Entry::Vacant(entry) at line 3524 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => entry.insert(default),\n        }\n"
      ],
      "input_infer": "self must be an instance of Entry::Vacant with an unused key K and a default value V to insert, ensuring that K implements Hash; also, the corresponding HashMap must be mutable, and the provided default value should not collide with existing keys in the HashMap.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct HashMapBuilder;",
                "",
                "    impl BuildHasher for HashMapBuilder {",
                "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            core::hash::BuildHasherDefault::default()",
                "        }",
                "    }",
                "",
                "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
                "    let key = \"vacant_key\";",
                "    let default_value = 42;",
                "    let entry = map.entry(key);",
                "",
                "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
                "        let value_ref = vacant_entry.or_insert(default_value);",
                "",
                "        // Use the inserted value reference to ensure it works correctly",
                "        *value_ref += 10;",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, hashbrown::hash_map::Entry::Vacant(_)));",
                "    assert_eq!(map[key], 52);",
                "    assert_eq!(map.get(key).unwrap(), &52);"
              ],
              "code": [
                "{",
                "    struct HashMapBuilder;",
                "",
                "    impl BuildHasher for HashMapBuilder {",
                "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            core::hash::BuildHasherDefault::default()",
                "        }",
                "    }",
                "",
                "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
                "    let key = \"vacant_key\";",
                "    let default_value = 42;",
                "    let entry = map.entry(key);",
                "",
                "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
                "        let value_ref = vacant_entry.or_insert(default_value);",
                "",
                "        // Use the inserted value reference to ensure it works correctly",
                "        *value_ref += 10;",
                "    }",
                "    assert!(matches!(entry, hashbrown::hash_map::Entry::Vacant(_)));",
                "    assert_eq!(map[key], 52);",
                "    assert_eq!(map.get(key).unwrap(), &52);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct HashMapBuilder;",
                "",
                "    impl BuildHasher for HashMapBuilder {",
                "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            core::hash::BuildHasherDefault::default()",
                "        }",
                "    }",
                "",
                "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
                "    map.insert(\"existing_key\", 1);",
                "    let key = \"vacant_key\"; // Ensure this key is not in the map",
                "    let default_value = 23;",
                "    let entry = map.entry(key);",
                "",
                "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
                "        let value_ref = vacant_entry.or_insert(default_value);",
                "        ",
                "        // Ensure the value is inserted correctly",
                "        *value_ref *= 2;",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"vacant_key\"], 46);",
                "    assert!(map.contains_key(\"vacant_key\"));",
                "    assert_eq!(map[\"existing_key\"], 1);",
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(vacant_entry.key(), &key);",
                "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
                "    assert_eq!(default_value, 23);",
                "    assert!(map.get(\"vacant_key\").is_some());",
                "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);"
              ],
              "code": [
                "{",
                "    struct HashMapBuilder;",
                "",
                "    impl BuildHasher for HashMapBuilder {",
                "        type Hasher = core::hash::BuildHasherDefault<core::hash::blake3::Hasher>;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            core::hash::BuildHasherDefault::default()",
                "        }",
                "    }",
                "",
                "    let mut map: hashbrown::HashMap<&str, i32> = hashbrown::HashMap::new();",
                "    map.insert(\"existing_key\", 1);",
                "    let key = \"vacant_key\"; // Ensure this key is not in the map",
                "    let default_value = 23;",
                "    let entry = map.entry(key);",
                "",
                "    if let hashbrown::hash_map::Entry::Vacant(vacant_entry) = entry {",
                "        let value_ref = vacant_entry.or_insert(default_value);",
                "        ",
                "        // Ensure the value is inserted correctly",
                "        *value_ref *= 2;",
                "    }",
                "    assert_eq!(map[\"vacant_key\"], 46);",
                "    assert!(map.contains_key(\"vacant_key\"));",
                "    assert_eq!(map[\"existing_key\"], 1);",
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(vacant_entry.key(), &key);",
                "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
                "    assert_eq!(default_value, 23);",
                "    assert!(map.get(\"vacant_key\").is_some());",
                "    assert_eq!(value_ref, &mut map[\"vacant_key\"]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Entry::Occupied(entry) at line 3524 is true\n",
        "precondition: self matches Entry::Occupied(entry) at line 3524 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => entry.insert(default),\n        }\n"
      ],
      "input_infer": "self is Entry::Occupied with a valid K and V types, default is a V type instance that is insertable into HashMap, HashMap is initialized with K and V, and contains at least one existing key matching the provided K.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"existing_key\", 5);",
                "",
                "    let entry = Entry::Occupied(OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((\"existing_key\", 5)),",
                "        table: &mut map,",
                "    });",
                "",
                "    let result = entry.or_insert(10);",
                "    *result += 5;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &mut 10);",
                "    assert_eq!(map[\"existing_key\"], 10);",
                "    assert!(map.contains_key(\"existing_key\"));",
                "    assert_eq!(map.len(), 1);",
                "    let entry_after = Entry::Occupied(entry);",
                "    assert_eq!(entry_after.key(), &\"existing_key\");",
                "    assert_eq!(entry_after.get(), &10);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "    map.insert(\"existing_key\", 5);",
                "",
                "    let entry = Entry::Occupied(OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((\"existing_key\", 5)),",
                "        table: &mut map,",
                "    });",
                "",
                "    let result = entry.or_insert(10);",
                "    *result += 5;",
                "    assert_eq!(result, &mut 10);",
                "    assert_eq!(map[\"existing_key\"], 10);",
                "    assert!(map.contains_key(\"existing_key\"));",
                "    assert_eq!(map.len(), 1);",
                "    let entry_after = Entry::Occupied(entry);",
                "    assert_eq!(entry_after.key(), &\"existing_key\");",
                "    assert_eq!(entry_after.get(), &10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "",
                "    let entry = Entry::Occupied(OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((\"nonexistent_key\", 0)),",
                "        table: &mut map,",
                "    });",
                "",
                "    entry.or_insert(10); // This should panic as the key does not exist.",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    let value = entry.or_insert(10);",
                "    assert_eq!(*value, 0);",
                "    assert_eq!(map.get(\"nonexistent_key\"), Some(&0));",
                "    assert!(map.contains_key(\"nonexistent_key\"));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, u32> = HashMap::new();",
                "",
                "    let entry = Entry::Occupied(OccupiedEntry {",
                "        hash: 0,",
                "        elem: Bucket::new((\"nonexistent_key\", 0)),",
                "        table: &mut map,",
                "    });",
                "",
                "    entry.or_insert(10); // This should panic as the key does not exist.",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    let value = entry.or_insert(10);",
                "    assert_eq!(*value, 0);",
                "    assert_eq!(map.get(\"nonexistent_key\"), Some(&0));",
                "    assert!(map.contains_key(\"nonexistent_key\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}