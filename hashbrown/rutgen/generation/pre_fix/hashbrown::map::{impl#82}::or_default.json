{
  "name": "hashbrown::map::{impl#82}::or_default",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4321:5:4330:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches EntryRef::Vacant(entry) at line 4326 is true\n",
        "expected return value/type: match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(Default::default()),\n        }\n"
      ],
      "input_infer": "self must be of type EntryRef::Vacant with a valid key from the HashMap, and K must implement Hash and From<&'b Q>; V must implement Default, ensuring the HashMap is empty or the existing key is not initialized.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "    let key = \"vacant_key\";",
                "    let entry_ref = map.entry_ref(key);",
                "    let value = entry_ref.or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"vacant_key\"], None);",
                "    assert_eq!(value, &mut None);",
                "    assert!(map.contains_key(\"vacant_key\"));",
                "    assert_eq!(map.get(\"vacant_key\"), Some(&None));"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "    let key = \"vacant_key\";",
                "    let entry_ref = map.entry_ref(key);",
                "    let value = entry_ref.or_default();",
                "    assert_eq!(map[\"vacant_key\"], None);",
                "    assert_eq!(value, &mut None);",
                "    assert!(map.contains_key(\"vacant_key\"));",
                "    assert_eq!(map.get(\"vacant_key\"), Some(&None));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    let key = 42;",
                "    let entry_ref = map.entry_ref(&key);",
                "    let value = entry_ref.or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &mut String::default());",
                "    assert_eq!(map.get(&key), Some(&String::default()));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.entry_ref(&key).or_default(), value);",
                "    assert_eq!(map[&key], String::default());"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, String> = HashMap::new();",
                "    let key = 42;",
                "    let entry_ref = map.entry_ref(&key);",
                "    let value = entry_ref.or_default();",
                "    assert_eq!(value, &mut String::default());",
                "    assert_eq!(map.get(&key), Some(&String::default()));",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.entry_ref(&key).or_default(), value);",
                "    assert_eq!(map[&key], String::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<String, String> = HashMap::new();",
                "    let key = \"empty_string_key\".to_string();",
                "    let entry_ref = map.entry_ref(&key);",
                "    let value = entry_ref.or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, &mut String::new());",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&String::new()));",
                "    assert_eq!(map.entry_ref(&key).or_default(), &mut String::new());"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<String, String> = HashMap::new();",
                "    let key = \"empty_string_key\".to_string();",
                "    let entry_ref = map.entry_ref(&key);",
                "    let value = entry_ref.or_default();",
                "    assert_eq!(value, &mut String::new());",
                "    assert!(map.contains_key(&key));",
                "    assert_eq!(map.get(&key), Some(&String::new()));",
                "    assert_eq!(map.entry_ref(&key).or_default(), &mut String::new());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches EntryRef::Occupied(entry) at line 4326 is true\n",
        "precondition: self matches EntryRef::Occupied(entry) at line 4326 is true\n",
        "expected return value/type: match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(Default::default()),\n        }\n"
      ],
      "input_infer": "self should be an instance of EntryRef::Occupied with a valid reference to a HashMap where the key K is a type that implements Hash and can be created from the given type Q, S is a valid BuildHasher, and the mutable reference to the value V should be of a type that implements Default and supports being dereferenced as &mut V.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;",
            "use std::hash::BuildHasher;",
            "use std::collections::hash_map::DefaultHasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::BuildHasher;",
                "",
                "    struct HasherBuilder;",
                "",
                "    impl BuildHasher for HasherBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "    map.insert(\"existing_key\".to_string(), Some(10));",
                "",
                "    {",
                "        let entry_ref = map.entry_ref(\"existing_key\");",
                "        let value_ref = entry_ref.or_default();",
                "        // Here, value_ref should be a mutable reference to Some(10)",
                "        // We don’t assert, only calling the function as per request",
                "    }",
                "}"
              ],
              "oracle": [
                "    let entry_ref = map.entry_ref(\"existing_key\");",
                "    assert_eq!(*entry_ref.or_default(), Some(10));",
                "    let entry_ref = map.entry_ref(\"nonexistent_key\");",
                "    assert_eq!(entry_ref.or_default(), &mut None);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::BuildHasher;",
                "",
                "    struct HasherBuilder;",
                "",
                "    impl BuildHasher for HasherBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "    map.insert(\"existing_key\".to_string(), Some(10));",
                "",
                "    {",
                "        let entry_ref = map.entry_ref(\"existing_key\");",
                "        let value_ref = entry_ref.or_default();",
                "        // Here, value_ref should be a mutable reference to Some(10)",
                "        // We don’t assert, only calling the function as per request",
                "    }",
                "    let entry_ref = map.entry_ref(\"existing_key\");",
                "    assert_eq!(*entry_ref.or_default(), Some(10));",
                "    let entry_ref = map.entry_ref(\"nonexistent_key\");",
                "    assert_eq!(entry_ref.or_default(), &mut None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::BuildHasher;",
                "",
                "    struct HasherBuilder;",
                "",
                "    impl BuildHasher for HasherBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "",
                "    {",
                "        let entry_ref = map.entry_ref(\"new_key\");",
                "        let value_ref = entry_ref.or_default();",
                "        // Here, value_ref should be a mutable reference to None (after inserting)",
                "        // We don’t assert, only calling the function as per request",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"new_key\"], None);",
                "    assert!(map.entry_ref(\"new_key\").or_default().is_some());",
                "    let existing_entry = map.entry_ref(\"new_key\");",
                "    let mut existing_value = existing_entry.or_default();",
                "    *existing_value = Some(5);",
                "    assert_eq!(map[\"new_key\"], Some(5));",
                "    assert_eq!(existing_entry.or_default(), &mut Some(5));",
                "    assert!(matches!(existing_entry, EntryRef::Occupied(_)));",
                "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::BuildHasher;",
                "",
                "    struct HasherBuilder;",
                "",
                "    impl BuildHasher for HasherBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let mut map: HashMap<String, Option<u32>> = HashMap::new();",
                "",
                "    {",
                "        let entry_ref = map.entry_ref(\"new_key\");",
                "        let value_ref = entry_ref.or_default();",
                "        // Here, value_ref should be a mutable reference to None (after inserting)",
                "        // We don’t assert, only calling the function as per request",
                "    }",
                "    assert_eq!(map[\"new_key\"], None);",
                "    assert!(map.entry_ref(\"new_key\").or_default().is_some());",
                "    let existing_entry = map.entry_ref(\"new_key\");",
                "    let mut existing_value = existing_entry.or_default();",
                "    *existing_value = Some(5);",
                "    assert_eq!(map[\"new_key\"], Some(5));",
                "    assert_eq!(existing_entry.or_default(), &mut Some(5));",
                "    assert!(matches!(existing_entry, EntryRef::Occupied(_)));",
                "    assert!(matches!(entry_ref, EntryRef::Vacant(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}