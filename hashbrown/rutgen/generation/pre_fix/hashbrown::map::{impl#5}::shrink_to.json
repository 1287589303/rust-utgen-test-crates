{
  "name": "hashbrown::map::{impl#5}::shrink_to",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1204:5:1207:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "min_capacity: 0 to current capacity, including edge cases where min_capacity equals current capacity or is greater than current capacity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(0);",
                "}"
              ],
              "oracle": [
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);",
                "    map.insert(5, 6);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(100);",
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(50);",
                "    assert!(map.capacity() >= 50);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);",
                "    map.insert(5, 6);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(100);",
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(50);",
                "    assert!(map.capacity() >= 50);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(100);",
                "}"
              ],
              "oracle": [
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(100);",
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(150);",
                "}"
              ],
              "oracle": [
                "    assert!(map.capacity() >= 100);",
                "    assert!(map.capacity() >= 150);",
                "    ",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 10);",
                "    ",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    ",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(150);",
                "    assert!(map.capacity() >= 100);",
                "    assert!(map.capacity() >= 150);",
                "    ",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 10);",
                "    ",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    ",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(10);",
                "}"
              ],
              "oracle": [
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(1);",
                "}"
              ],
              "oracle": [
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(100);",
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(50);",
                "    assert!(map.capacity() >= 50);",
                "    map.shrink_to(2);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(u32::MAX as usize);",
                "    assert!(map.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);",
                "    map.insert(1, 2);",
                "    map.insert(3, 4);",
                "    map.shrink_to(1);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(0);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(10);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(100);",
                "    assert!(map.capacity() >= 100);",
                "    map.shrink_to(50);",
                "    assert!(map.capacity() >= 50);",
                "    map.shrink_to(2);",
                "    assert!(map.capacity() >= 2);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(u32::MAX as usize);",
                "    assert!(map.capacity() >= 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}