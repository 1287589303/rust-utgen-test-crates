{
  "name": "hashbrown::map::{impl#77}::or_insert_with_key",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3583:5:3595:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Entry::Vacant(entry) at line 3588 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => {\n                let value = default(entry.key());\n                entry.insert(value)\n            }\n        }\n"
      ],
      "input_infer": "Entry::Vacant with a unique key of type K, a function F that takes a reference to K returning a value of type V, and a HashMap containing no entries at the time of the method call.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"unique_key\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"unique_key\"], 10);",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert!(map.contains_key(\"unique_key\"));"
              ],
              "code": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"unique_key\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "    assert_eq!(map[\"unique_key\"], 10);",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert!(map.contains_key(\"unique_key\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"another_unique_key\");",
                "    ",
                "    entry.or_insert_with_key(|_key| 42);",
                "}"
              ],
              "oracle": [
                "    map.entry(\"another_unique_key\").or_insert_with_key(|_key| 42); // Invokes or_insert_with_key on a Vacant entry",
                "    assert_eq!(map[\"another_unique_key\"], 42); // Assert expected value after insertion",
                "    ",
                "    let entry = map.entry(\"another_unique_key\");",
                "    let updated_value = entry.or_insert_with_key(|key| key.chars().count() * 10); // Re-invokes on occupied entry",
                "    assert_eq!(*updated_value, 42); // Assert the value remains unchanged",
                "    ",
                "    *updated_value *= 2; // Modifies the value",
                "    assert_eq!(map[\"another_unique_key\"], 84); // Assert the updated value after modification"
              ],
              "code": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"another_unique_key\");",
                "    ",
                "    entry.or_insert_with_key(|_key| 42);",
                "    map.entry(\"another_unique_key\").or_insert_with_key(|_key| 42); // Invokes or_insert_with_key on a Vacant entry",
                "    assert_eq!(map[\"another_unique_key\"], 42); // Assert expected value after insertion",
                "    ",
                "    let entry = map.entry(\"another_unique_key\");",
                "    let updated_value = entry.or_insert_with_key(|key| key.chars().count() * 10); // Re-invokes on occupied entry",
                "    assert_eq!(*updated_value, 42); // Assert the value remains unchanged",
                "    ",
                "    *updated_value *= 2; // Modifies the value",
                "    assert_eq!(map[\"another_unique_key\"], 84); // Assert the updated value after modification",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry1 = map.entry(\"first_key\");",
                "    ",
                "    entry1.or_insert_with_key(|key| key.len());",
                "    ",
                "    let entry2 = map.entry(\"second_key\");",
                "    ",
                "    entry2.or_insert_with_key(|key| key.chars().count());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"first_key\"], 9);",
                "    assert_eq!(map[\"second_key\"], 11);",
                "    assert!(map.contains_key(\"first_key\"));",
                "    assert!(map.contains_key(\"second_key\"));",
                "    assert_eq!(entry1.key(), &\"first_key\");",
                "    assert_eq!(entry2.key(), &\"second_key\");"
              ],
              "code": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry1 = map.entry(\"first_key\");",
                "    ",
                "    entry1.or_insert_with_key(|key| key.len());",
                "    ",
                "    let entry2 = map.entry(\"second_key\");",
                "    ",
                "    entry2.or_insert_with_key(|key| key.chars().count());",
                "    assert_eq!(map[\"first_key\"], 9);",
                "    assert_eq!(map[\"second_key\"], 11);",
                "    assert!(map.contains_key(\"first_key\"));",
                "    assert!(map.contains_key(\"second_key\"));",
                "    assert_eq!(entry1.key(), &\"first_key\");",
                "    assert_eq!(entry2.key(), &\"second_key\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"duplicate_key\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.len());",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert_eq!(map[\"duplicate_key\"], 14);",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(map[\"duplicate_key\"], 14);",
                "    assert_eq!(map[\"duplicate_key\"], entry.key().len());",
                "    assert_eq!(map[\"duplicate_key\"], entry.key().chars().count());"
              ],
              "code": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"duplicate_key\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.len());",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert_eq!(map[\"duplicate_key\"], 14);",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(map[\"duplicate_key\"], 14);",
                "    assert_eq!(map[\"duplicate_key\"], entry.key().len());",
                "    assert_eq!(map[\"duplicate_key\"], entry.key().chars().count());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"key_with_value\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "    let value = *entry.or_insert_with_key(|key| key.len());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"key_with_value\"], 15);",
                "    let entry = map.entry(\"key_with_value\");",
                "    assert_eq!(entry.or_insert_with_key(|key| key.chars().count()), &15);",
                "    assert_eq!(entry.or_insert_with_key(|key| key.len()), &15);",
                "    map.entry(\"new_key\").or_insert_with_key(|key| key.chars().count());",
                "    assert_eq!(map[\"new_key\"], 7);",
                "    let entry = map.entry(\"new_key\");",
                "    assert_eq!(entry.or_insert_with_key(|key| key.len()), &7);",
                "    assert!(matches!(entry, Entry::Occupied(_)));"
              ],
              "code": [
                "{",
                "    struct MyHashBuilder;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    let entry = map.entry(\"key_with_value\");",
                "    ",
                "    entry.or_insert_with_key(|key| key.chars().count());",
                "    let value = *entry.or_insert_with_key(|key| key.len());",
                "    assert_eq!(map[\"key_with_value\"], 15);",
                "    let entry = map.entry(\"key_with_value\");",
                "    assert_eq!(entry.or_insert_with_key(|key| key.chars().count()), &15);",
                "    assert_eq!(entry.or_insert_with_key(|key| key.len()), &15);",
                "    map.entry(\"new_key\").or_insert_with_key(|key| key.chars().count());",
                "    assert_eq!(map[\"new_key\"], 7);",
                "    let entry = map.entry(\"new_key\");",
                "    assert_eq!(entry.or_insert_with_key(|key| key.len()), &7);",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Entry::Occupied(entry) at line 3588 is true\n",
        "precondition: self matches Entry::Occupied(entry) at line 3588 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => {\n                let value = default(entry.key());\n                entry.insert(value)\n            }\n        }\n"
      ],
      "input_infer": "K: Any type implementing the Hash trait, V: Any type, S: Any type implementing BuildHasher, A: Any type implementing Allocator; Entry must be in Occupied state with preexisting key; key must be a valid reference in context of the HashMap; value must be of type V.\n",
      "answers": [
        {
          "uses": [
            "use hashbrown::HashMap;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    map.insert(\"hello\", 5);",
                "",
                "    match map.entry(\"hello\") {",
                "        Entry::Occupied(mut entry) => {",
                "            let value = entry.or_insert_with_key(|key| {",
                "                assert_eq!(key, &\"hello\");",
                "                10",
                "            });",
                "            // This should mutate the existing value",
                "            *value *= 2; // Existing value of 5, should become 10",
                "        }",
                "        _ => unreachable!(),",
                "    }",
                "",
                "    // Validate that value has been updated correctly",
                "    assert_eq!(map[\"hello\"], 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map[\"hello\"], 5); // Initial check for existing key",
                "    let value = entry.or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"hello\"); // Validate key passed to closure",
                "    10",
                "    });",
                "    assert_eq!(*value, 10); // Check value after mutation",
                "    assert_eq!(map[\"hello\"], 10); // Confirm map reflects the updated value"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    map.insert(\"hello\", 5);",
                "",
                "    match map.entry(\"hello\") {",
                "        Entry::Occupied(mut entry) => {",
                "            let value = entry.or_insert_with_key(|key| {",
                "                assert_eq!(key, &\"hello\");",
                "                10",
                "            });",
                "            // This should mutate the existing value",
                "            *value *= 2; // Existing value of 5, should become 10",
                "        }",
                "        _ => unreachable!(),",
                "    }",
                "",
                "    // Validate that value has been updated correctly",
                "    assert_eq!(map[\"hello\"], 10);",
                "    assert_eq!(map[\"hello\"], 5); // Initial check for existing key",
                "    let value = entry.or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"hello\"); // Validate key passed to closure",
                "    10",
                "    });",
                "    assert_eq!(*value, 10); // Check value after mutation",
                "    assert_eq!(map[\"hello\"], 10); // Confirm map reflects the updated value",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    map.insert(\"world\", 3);",
                "",
                "    match map.entry(\"world\") {",
                "        Entry::Occupied(mut entry) => {",
                "            let value = entry.or_insert_with_key(|key| {",
                "                assert_eq!(key, &\"world\");",
                "                7",
                "            });",
                "            // Mutate the existing value",
                "            *value += 2; // Existing value of 3, should become 5",
                "        }",
                "        _ => unreachable!(),",
                "    }",
                "",
                "    // Validate that value has been updated correctly",
                "    assert_eq!(map[\"world\"], 5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| key.chars().count()), &5);",
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"world\");",
                "    100",
                "    }), &5);",
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"world\");",
                "    10",
                "    }), &5);"
              ],
              "code": [
                "{",
                "    use hashbrown::HashMap;",
                "",
                "    let mut map: HashMap<&str, usize> = HashMap::new();",
                "    map.insert(\"world\", 3);",
                "",
                "    match map.entry(\"world\") {",
                "        Entry::Occupied(mut entry) => {",
                "            let value = entry.or_insert_with_key(|key| {",
                "                assert_eq!(key, &\"world\");",
                "                7",
                "            });",
                "            // Mutate the existing value",
                "            *value += 2; // Existing value of 3, should become 5",
                "        }",
                "        _ => unreachable!(),",
                "    }",
                "",
                "    // Validate that value has been updated correctly",
                "    assert_eq!(map[\"world\"], 5);",
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| key.chars().count()), &5);",
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"world\");",
                "    100",
                "    }), &5);",
                "    assert_eq!(map.entry(\"world\").or_insert_with_key(|key| {",
                "    assert_eq!(key, &\"world\");",
                "    10",
                "    }), &5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}