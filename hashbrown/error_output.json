{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#cfg-if@1.0.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"cfg_if","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/cfg-if-1.0.0/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcfg_if-57bf25c23e31efdb.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcfg_if-57bf25c23e31efdb.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#allocator-api2@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"allocator_api2","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/allocator-api2-0.2.21/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liballocator_api2-ea888f47493b772e.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liballocator_api2-ea888f47493b772e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#either@1.15.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"either","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/either-1.15.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libeither-9002f41bbd7e6bf4.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libeither-9002f41bbd7e6bf4.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#lazy_static@1.5.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"lazy_static","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/lazy_static-1.5.0/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liblazy_static-7af2f34f8b124b26.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liblazy_static-7af2f34f8b124b26.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#equivalent@1.0.2","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"equivalent","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/equivalent-1.0.2/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libequivalent-bf738b088bb070ea.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libequivalent-bf738b088bb070ea.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#foldhash@0.1.4","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"foldhash","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/foldhash-0.1.4/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libfoldhash-a690f5a6613af253.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libfoldhash-a690f5a6613af253.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#fnv@1.0.7","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"fnv","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/fnv-1.0.7/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libfnv-574dedeaa4c89e1d.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libfnv-574dedeaa4c89e1d.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#bumpalo@3.17.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bumpalo-3.17.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"bumpalo","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bumpalo-3.17.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["allocator-api2","default"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libbumpalo-44e39dabf9a3271e.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libbumpalo-44e39dabf9a3271e.rmeta"],"executable":null,"fresh":true}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/rayon-core-5c4347135a2d222f/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/rayon-core-71512b056f3de1f1/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/getrandom-4537a21348276e8e/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/getrandom-a92d17dcd104f758/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/crossbeam-utils-876b3ab42f13e18e/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/crossbeam-utils-9db73e04703dfb39/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#doc-comment@0.3.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/doc-comment-0.3.3/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/doc-comment-0.3.3/build.rs","edition":"2015","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/doc-comment-144d53e0d5246bb5/build-script-build"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/libc-2480f8b345c68cc9/build-script-build"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/build.rs","edition":"2018","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/serde-3a1c1b6abf4f2a00/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/serde-06a75ab96ceea28d/out"}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#doc-comment@0.3.3","linked_libs":[],"linked_paths":[],"cfgs":[],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/doc-comment-880da425dc2b43aa/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["custom-build"],"crate_types":["bin"],"name":"build-script-build","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/build.rs","edition":"2021","doc":false,"doctest":false,"test":false},"profile":{"opt_level":"0","debuginfo":0,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/zerocopy-e2dcbf5d140aef67/build-script-build"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","linked_libs":[],"linked_paths":[],"cfgs":["zerocopy_aarch64_simd_1_59_0","zerocopy_core_error_1_81_0","zerocopy_diagnostic_on_unimplemented_1_78_0","zerocopy_generic_bounds_in_const_fn_1_61_0","zerocopy_panic_in_const_and_vec_try_reserve_1_57_0","zerocopy_target_has_atomics_1_60_0"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/zerocopy-022e340a2c34a89a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#doc-comment@0.3.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/doc-comment-0.3.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"doc_comment","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/doc-comment-0.3.3/src/lib.rs","edition":"2015","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libdoc_comment-59471493c3e61b5e.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libdoc_comment-59471493c3e61b5e.rmeta"],"executable":null,"fresh":false}
{"reason":"build-script-executed","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","linked_libs":[],"linked_paths":[],"cfgs":["freebsd11","libc_const_extern_fn"],"env":[],"out_dir":"/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/build/libc-384c7caf153dd45a/out"}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-utils@0.8.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_utils","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-utils-0.8.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_utils-fc91994af250f6b1.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-epoch@0.9.18","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_epoch","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-epoch-0.9.18/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_epoch-e4dae6b27a9c3fda.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#crossbeam-deque@0.8.6","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"crossbeam_deque","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/crossbeam-deque-0.8.6/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libcrossbeam_deque-454e570476b9d215.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#libc@0.2.170","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"libc","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/libc-0.2.170/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liblibc-78e719d219e56f98.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/liblibc-78e719d219e56f98.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#getrandom@0.3.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"getrandom","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/getrandom-0.3.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libgetrandom-ff3a70d4d7f98bc4.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_core@0.9.3","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_core-0.9.3/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["os_rng","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand_core-c85e947e1719e143.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand_core-c85e947e1719e143.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon-core@1.12.1","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon_core","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-core-1.12.1/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librayon_core-6be1a6f658914dcd.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librayon_core-6be1a6f658914dcd.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#zerocopy@0.8.23","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"zerocopy","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/zerocopy-0.8.23/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libzerocopy-85026333d1a1561f.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libzerocopy-85026333d1a1561f.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#ppv-lite86@0.2.21","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"ppv_lite86","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ppv-lite86-0.2.21/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["simd","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libppv_lite86-7289bbc4c3cc06dd.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand_chacha@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand_chacha","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand_chacha-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand_chacha-6290e3ba04a0fbd3.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rand@0.9.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rand","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rand-0.9.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["alloc","default","os_rng","small_rng","std","std_rng","thread_rng"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand-353b58b3ca393991.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librand-353b58b3ca393991.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde@1.0.219","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde-1.0.219/src/lib.rs","edition":"2018","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":["default","std"],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libserde-89fb024451e0eba7.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libserde-89fb024451e0eba7.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#serde_test@1.0.177","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_test-1.0.177/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"serde_test","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/serde_test-1.0.177/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libserde_test-cecd648882e48de3.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/libserde_test-cecd648882e48de3.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-artifact","package_id":"registry+https://github.com/rust-lang/crates.io-index#rayon@1.10.0","manifest_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"rayon","src_path":"/home/abezbm/.cargo/registry/src/index.crates.io-6f17d22bba15001f/rayon-1.10.0/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"profile":{"opt_level":"0","debuginfo":2,"debug_assertions":true,"overflow_checks":true,"test":false},"features":[],"filenames":["/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librayon-4242ed74597101c9.rlib","/home/abezbm/rust-utgen-test-crates/hashbrown/target/debug/deps/librayon-4242ed74597101c9.rmeta"],"executable":null,"fresh":false}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Layout` in this scope\n    --> src/map.rs:6524:36\n     |\n6524 |         fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {\n     |                                    ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::alloc::Layout;\n     |\n6515 +     use alloc::alloc::Layout;\n     |\n6515 +     use allocator_api2::alloc::Layout;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use allocator_api2::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Layout` in this scope","spans":[{"byte_end":203888,"byte_start":203882,"column_end":42,"column_start":36,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6524,"line_start":6524,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":42,"highlight_start":36,"text":"        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `NonNull` in this scope\n    --> src/map.rs:6524:54\n     |\n6524 |         fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {\n     |                                                      ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this struct\n     |\n6515 +     use std::ptr::NonNull;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::ptr::NonNull;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `NonNull` in this scope","spans":[{"byte_end":203907,"byte_start":203900,"column_end":61,"column_start":54,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6524,"line_start":6524,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":61,"highlight_start":54,"text":"        fn allocate(&self, layout: Layout) -> Result<NonNull<u8>, ()> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `NonNull` in this scope\n    --> src/map.rs:6528:42\n     |\n6528 |         unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n     |                                          ^^^^^^^ not found in this scope\n     |\nhelp: consider importing this struct\n     |\n6515 +     use std::ptr::NonNull;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing this struct","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::ptr::NonNull;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `NonNull` in this scope","spans":[{"byte_end":204015,"byte_start":204008,"column_end":49,"column_start":42,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6528,"line_start":6528,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":42,"text":"        unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Layout` in this scope\n    --> src/map.rs:6528:63\n     |\n6528 |         unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n     |                                                               ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::alloc::Layout;\n     |\n6515 +     use alloc::alloc::Layout;\n     |\n6515 +     use allocator_api2::alloc::Layout;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use allocator_api2::alloc::Layout;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Layout` in this scope","spans":[{"byte_end":204035,"byte_start":204029,"column_end":69,"column_start":63,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6528,"line_start":6528,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":69,"highlight_start":63,"text":"        unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `String` in this scope\n    --> src/map.rs:6533:34\n     |\n6533 |     let empty_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::string::String;\n     |\n6515 +     use alloc::string::String;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `String` in this scope","spans":[{"byte_end":204124,"byte_start":204118,"column_end":40,"column_start":34,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6533,"line_start":6533,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":34,"text":"    let empty_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `String` in this scope\n    --> src/map.rs:6541:38\n     |\n6541 |     let non_empty_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {\n     |                                      ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::string::String;\n     |\n6515 +     use alloc::string::String;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `String` in this scope","spans":[{"byte_end":204362,"byte_start":204356,"column_end":44,"column_start":38,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6541,"line_start":6541,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":38,"text":"    let non_empty_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `String` in this scope\n    --> src/map.rs:6548:34\n     |\n6548 |     let mixed_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::string::String;\n     |\n6515 +     use alloc::string::String;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `String` in this scope","spans":[{"byte_end":204656,"byte_start":204650,"column_end":40,"column_start":34,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6548,"line_start":6548,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":34,"text":"    let mixed_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `String` in this scope\n    --> src/map.rs:6555:41\n     |\n6555 |     let single_entry_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {\n     |                                         ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::string::String;\n     |\n6515 +     use alloc::string::String;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `String` in this scope","spans":[{"byte_end":204947,"byte_start":204941,"column_end":47,"column_start":41,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6555,"line_start":6555,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":41,"text":"    let single_entry_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `String` in this scope\n    --> src/map.rs:6562:34\n     |\n6562 |     let large_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {\n     |                                  ^^^^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::string::String;\n     |\n6515 +     use alloc::string::String;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::string::String;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `String` in this scope","spans":[{"byte_end":205215,"byte_start":205209,"column_end":40,"column_start":34,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6562,"line_start":6562,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":34,"text":"    let large_map: IntoKeys<i32, String, TestAllocator> = IntoKeys {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Vec` in this scope\n    --> src/map.rs:6564:78\n     |\n6564 |     inner: RawIntoIter::from((0..1000).map(|i| (i, i.to_string())).collect::<Vec<_>>()),\n     |                                                                              ^^^ not found in this scope\n     |\nhelp: consider importing one of these structs\n     |\n6515 +     use std::vec::Vec;\n     |\n6515 +     use alloc::vec::Vec;\n     |\n6515 +     use allocator_api2::vec::Vec;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"consider importing one of these structs","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use std::vec::Vec;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use alloc::vec::Vec;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]},{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use allocator_api2::vec::Vec;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Vec` in this scope","spans":[{"byte_end":205347,"byte_start":205344,"column_end":81,"column_start":78,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"not found in this scope","line_end":6564,"line_start":6564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":81,"highlight_start":78,"text":"    inner: RawIntoIter::from((0..1000).map(|i| (i, i.to_string())).collect::<Vec<_>>()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0200]: the trait `allocator_api2::alloc::Allocator` requires an `unsafe impl` declaration\n    --> src/map.rs:6523:5\n     |\n6523 |     impl Allocator for TestAllocator {\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: the trait `allocator_api2::alloc::Allocator` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword\nhelp: add `unsafe` to this trait implementation\n     |\n6523 |     unsafe impl Allocator for TestAllocator {\n     |     ++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"the trait `allocator_api2::alloc::Allocator` enforces invariants that the compiler can't check. Review the trait documentation and make sure this implementation upholds those invariants before adding the `unsafe` keyword","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"add `unsafe` to this trait implementation","rendered":null,"spans":[{"byte_end":203812,"byte_start":203812,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6523,"line_start":6523,"suggested_replacement":"unsafe ","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    impl Allocator for TestAllocator {"}]}]}],"code":{"code":"E0200","explanation":"An unsafe trait was implemented without an unsafe implementation.\n\nErroneous code example:\n\n```compile_fail,E0200\nstruct Foo;\n\nunsafe trait Bar { }\n\nimpl Bar for Foo { } // error!\n```\n\nUnsafe traits must have unsafe implementations. This error occurs when an\nimplementation for an unsafe trait isn't marked as unsafe. This may be resolved\nby marking the unsafe implementation as unsafe.\n\n```\nstruct Foo;\n\nunsafe trait Bar { }\n\nunsafe impl Bar for Foo { } // ok!\n```\n"},"level":"error","message":"the trait `allocator_api2::alloc::Allocator` requires an `unsafe impl` declaration","spans":[{"byte_end":203844,"byte_start":203812,"column_end":37,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6523,"line_start":6523,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":37,"highlight_start":5,"text":"    impl Allocator for TestAllocator {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no function or associated item named `new` found for struct `raw::RawIntoIter` in the current scope\n    --> src/map.rs:6535:33\n     |\n6535 |             inner: RawIntoIter::new(),\n     |                                 ^^^ function or associated item not found in `RawIntoIter<_, _>`\n     |\n    ::: src/raw/mod.rs:3819:1\n     |\n3819 | pub struct RawIntoIter<T, A: Allocator = Global> {\n     | ------------------------------------------------ function or associated item `new` not found for this struct\n     |\n     = help: items from traits can only be used if the trait is implemented and in scope\n     = note: the following trait defines an item `new`, perhaps you need to implement it:\n             candidate #1: `UniformSampler`\nhelp: there is a method `ne` with a similar name, but with different arguments\n    --> /home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:3845:5\n     |\n3845 | /     fn ne<I>(self, other: I) -> bool\n3846 | |     where\n3847 | |         I: IntoIterator,\n3848 | |         Self::Item: PartialEq<I::Item>,\n3849 | |         Self: Sized,\n     | |____________________^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is implemented and in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"the following trait defines an item `new`, perhaps you need to implement it:\ncandidate #1: `UniformSampler`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"there is a method `ne` with a similar name, but with different arguments","rendered":null,"spans":[{"byte_end":127935,"byte_start":127807,"column_end":21,"column_start":5,"expansion":null,"file_name":"/home/abezbm/.rustup/toolchains/nightly-2024-07-21-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs","is_primary":true,"label":null,"line_end":3849,"line_start":3845,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":1,"highlight_start":5,"text":"    fn ne<I>(self, other: I) -> bool"},{"highlight_end":1,"highlight_start":1,"text":"    where"},{"highlight_end":1,"highlight_start":1,"text":"        I: IntoIterator,"},{"highlight_end":1,"highlight_start":1,"text":"        Self::Item: PartialEq<I::Item>,"},{"highlight_end":21,"highlight_start":1,"text":"        Self: Sized,"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no function or associated item named `new` found for struct `raw::RawIntoIter` in the current scope","spans":[{"byte_end":204215,"byte_start":204212,"column_end":36,"column_start":33,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"function or associated item not found in `RawIntoIter<_, _>`","line_end":6535,"line_start":6535,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":36,"highlight_start":33,"text":"            inner: RawIntoIter::new(),"}]},{"byte_end":171715,"byte_start":171667,"column_end":49,"column_start":1,"expansion":null,"file_name":"src/raw/mod.rs","is_primary":false,"label":"function or associated item `new` not found for this struct","line_end":3819,"line_start":3819,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":1,"text":"pub struct RawIntoIter<T, A: Allocator = Global> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/map.rs:6543:45\n     |\n6543 |     inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (2, \"two\".to_string())]),\n     |                                             ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n6515 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":204467,"byte_start":204458,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"method not found in `&str`","line_end":6543,"line_start":6543,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"    inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (2, \"two\".to_string())]),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/map.rs:6543:69\n     |\n6543 |     inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (2, \"two\".to_string())]),\n     |                                                                     ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n6515 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":204491,"byte_start":204482,"column_end":78,"column_start":69,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"method not found in `&str`","line_end":6543,"line_start":6543,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":78,"highlight_start":69,"text":"    inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (2, \"two\".to_string())]),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/map.rs:6550:45\n     |\n6550 |     inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (3, \"three\".to_string())]),\n     |                                             ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n6515 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":204761,"byte_start":204752,"column_end":54,"column_start":45,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"method not found in `&str`","line_end":6550,"line_start":6550,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":54,"highlight_start":45,"text":"    inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (3, \"three\".to_string())]),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/map.rs:6550:71\n     |\n6550 |     inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (3, \"three\".to_string())]),\n     |                                                                       ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n6515 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":204787,"byte_start":204778,"column_end":80,"column_start":71,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"method not found in `&str`","line_end":6550,"line_start":6550,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":80,"highlight_start":71,"text":"    inner: RawIntoIter::from(vec![(1, \"one\".to_string()), (3, \"three\".to_string())]),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0599]: no method named `to_string` found for reference `&'static str` in the current scope\n    --> src/map.rs:6557:46\n     |\n6557 |     inner: RawIntoIter::from(vec![(5, \"five\".to_string())]),\n     |                                              ^^^^^^^^^ method not found in `&str`\n     |\n     = help: items from traits can only be used if the trait is in scope\nhelp: trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it\n     |\n6515 +     use crate::std::string::ToString;\n     |\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"items from traits can only be used if the trait is in scope","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"trait `ToString` which provides `to_string` is implemented but not in scope; perhaps you want to import it","rendered":null,"spans":[{"byte_end":203737,"byte_start":203737,"column_end":5,"column_start":5,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6515,"line_start":6515,"suggested_replacement":"use crate::std::string::ToString;\n","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":5,"highlight_start":5,"text":"    use super::*;"}]}]}],"code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","message":"no method named `to_string` found for reference `&'static str` in the current scope","spans":[{"byte_end":205053,"byte_start":205044,"column_end":55,"column_start":46,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":"method not found in `&str`","line_end":6557,"line_start":6557,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":55,"highlight_start":46,"text":"    inner: RawIntoIter::from(vec![(5, \"five\".to_string())]),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error[E0689]: can't call method `to_string` on ambiguous numeric type `{integer}`\n    --> src/map.rs:6564:54\n     |\n6564 |     inner: RawIntoIter::from((0..1000).map(|i| (i, i.to_string())).collect::<Vec<_>>()),\n     |                                             -        ^^^^^^^^^\n     |                                             |\n     |                                             you must specify a type for this binding, like `i32`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0689","explanation":"A method was called on an ambiguous numeric type.\n\nErroneous code example:\n\n```compile_fail,E0689\n2.0.neg(); // error!\n```\n\nThis error indicates that the numeric value for the method being passed exists\nbut the type of the numeric value or binding could not be identified.\n\nThe error happens on numeric literals and on numeric bindings without an\nidentified concrete type:\n\n```compile_fail,E0689\nlet x = 2.0;\nx.neg();  // same error as above\n```\n\nBecause of this, you must give the numeric literal or binding a type:\n\n```\nuse std::ops::Neg;\n\nlet _ = 2.0_f32.neg(); // ok!\nlet x: f32 = 2.0;\nlet _ = x.neg(); // ok!\nlet _ = (2.0 as f32).neg(); // ok!\n```\n"},"level":"error","message":"can't call method `to_string` on ambiguous numeric type `{integer}`","spans":[{"byte_end":205312,"byte_start":205311,"column_end":46,"column_start":45,"expansion":null,"file_name":"src/map.rs","is_primary":false,"label":"you must specify a type for this binding, like `i32`","line_end":6564,"line_start":6564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":45,"text":"    inner: RawIntoIter::from((0..1000).map(|i| (i, i.to_string())).collect::<Vec<_>>()),"}]},{"byte_end":205329,"byte_start":205320,"column_end":63,"column_start":54,"expansion":null,"file_name":"src/map.rs","is_primary":true,"label":null,"line_end":6564,"line_start":6564,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":63,"highlight_start":54,"text":"    inner: RawIntoIter::from((0..1000).map(|i| (i, i.to_string())).collect::<Vec<_>>()),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"error: aborting due to 18 previous errors\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 18 previous errors","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0200, E0412, E0599, E0689.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0200, E0412, E0599, E0689.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///home/abezbm/rust-utgen-test-crates/hashbrown#0.15.2","manifest_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/Cargo.toml","target":{"kind":["lib"],"crate_types":["lib"],"name":"hashbrown","src_path":"/home/abezbm/rust-utgen-test-crates/hashbrown/src/lib.rs","edition":"2021","doc":true,"doctest":true,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0200`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0200`.","spans":[]}}
{"reason":"build-finished","success":false}
