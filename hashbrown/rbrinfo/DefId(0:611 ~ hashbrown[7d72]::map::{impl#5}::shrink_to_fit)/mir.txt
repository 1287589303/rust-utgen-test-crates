bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:1176:9-1177:70)
  1: StorageLive(_3)
    SourceInfo(src/map.rs:1176:9-1176:19)
  2: _3 = &mut ((*_1).1: raw::RawTable<(K, V), A>)
    SourceInfo(src/map.rs:1176:9-1176:19)
  3: StorageLive(_4)
    SourceInfo(src/map.rs:1177:27-1177:69)
  4: StorageLive(_5)
    SourceInfo(src/map.rs:1177:50-1177:68)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1177:50-1177:68)
  6: _6 = &((*_1).0: S)
    SourceInfo(src/map.rs:1177:50-1177:68)
  7: _5 = &(*_6)
    SourceInfo(src/map.rs:1177:50-1177:68)
  Terminator {
      source_info: SourceInfo(src/map.rs:1177:27-1177:69)
      kind: _4 = map::make_hasher::<K, V, S>(move _5) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_5)
    SourceInfo(src/map.rs:1177:68-1177:69)
  Terminator {
      source_info: SourceInfo(src/map.rs:1176:9-1177:70)
      kind: _2 = raw::RawTable::<(K, V), A>::shrink_to::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _3, const 0_usize, move _4) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_4)
    SourceInfo(src/map.rs:1177:69-1177:70)
  1: StorageDead(_3)
    SourceInfo(src/map.rs:1177:69-1177:70)
  2: StorageDead(_6)
    SourceInfo(src/map.rs:1177:70-1177:71)
  3: StorageDead(_2)
    SourceInfo(src/map.rs:1177:70-1177:71)
  4: _0 = const ()
    SourceInfo(src/map.rs:1175:37-1178:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1178:6-1178:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map.rs:1177:69-1177:70)
      kind: drop(_4) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1175:5-1178:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

