bb0
  0: StorageLive(_3)
    SourceInfo(src/set.rs:1025:9-1025:40)
  1: StorageLive(_4)
    SourceInfo(src/set.rs:1025:9-1025:40)
  2: StorageLive(_5)
    SourceInfo(src/set.rs:1025:9-1025:33)
  3: StorageLive(_6)
    SourceInfo(src/set.rs:1025:9-1025:33)
  4: StorageLive(_7)
    SourceInfo(src/set.rs:1025:9-1025:13)
  5: _7 = &(*_1)
    SourceInfo(src/set.rs:1025:9-1025:13)
  6: StorageLive(_8)
    SourceInfo(src/set.rs:1025:27-1025:32)
  7: _8 = &(*_2)
    SourceInfo(src/set.rs:1025:27-1025:32)
  Terminator {
      source_info: SourceInfo(src/set.rs:1025:9-1025:33)
      kind: _6 = set::HashSet::<T, S, A>::intersection(move _7, move _8) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _5 = &mut _6
    SourceInfo(src/set.rs:1025:9-1025:33)
  1: StorageDead(_8)
    SourceInfo(src/set.rs:1025:32-1025:33)
  2: StorageDead(_7)
    SourceInfo(src/set.rs:1025:32-1025:33)
  Terminator {
      source_info: SourceInfo(src/set.rs:1025:9-1025:40)
      kind: _4 = <set::Intersection<'_, T, S, A> as core::iter::Iterator>::next(move _5) -> [return: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _3 = &_4
    SourceInfo(src/set.rs:1025:9-1025:40)
  1: StorageDead(_5)
    SourceInfo(src/set.rs:1025:39-1025:40)
  Terminator {
      source_info: SourceInfo(src/set.rs:1025:9-1025:50)
      kind: _0 = core::option::Option::<&T>::is_none(move _3) -> [return: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: StorageDead(_3)
    SourceInfo(src/set.rs:1025:49-1025:50)
  1: StorageDead(_6)
    SourceInfo(src/set.rs:1026:5-1026:6)
  2: StorageDead(_4)
    SourceInfo(src/set.rs:1026:5-1026:6)
  Terminator {
      source_info: SourceInfo(src/set.rs:1026:6-1026:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/set.rs:1024:5-1026:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

