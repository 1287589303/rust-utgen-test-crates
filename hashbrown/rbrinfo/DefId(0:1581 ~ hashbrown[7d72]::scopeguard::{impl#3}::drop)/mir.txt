bb0
  0: StorageLive(_2)
    SourceInfo(src/scopeguard.rs:70:9-70:39)
  1: StorageLive(_3)
    SourceInfo(src/scopeguard.rs:70:9-70:22)
  2: _3 = &mut ((*_1).0: F)
    SourceInfo(src/scopeguard.rs:70:9-70:22)
  3: StorageLive(_4)
    SourceInfo(src/scopeguard.rs:70:9-70:39)
  4: StorageLive(_5)
    SourceInfo(src/scopeguard.rs:70:23-70:38)
  5: StorageLive(_6)
    SourceInfo(src/scopeguard.rs:70:23-70:38)
  6: _6 = &mut ((*_1).1: T)
    SourceInfo(src/scopeguard.rs:70:23-70:38)
  7: _5 = &mut (*_6)
    SourceInfo(src/scopeguard.rs:70:23-70:38)
  8: _4 = (move _5,)
    SourceInfo(src/scopeguard.rs:70:9-70:39)
  Terminator {
      source_info: SourceInfo(src/scopeguard.rs:70:9-70:39)
      kind: _2 = <F as core::ops::FnMut<(&mut T,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_5)
    SourceInfo(src/scopeguard.rs:70:38-70:39)
  1: StorageDead(_4)
    SourceInfo(src/scopeguard.rs:70:38-70:39)
  2: StorageDead(_3)
    SourceInfo(src/scopeguard.rs:70:38-70:39)
  3: StorageDead(_6)
    SourceInfo(src/scopeguard.rs:70:39-70:40)
  4: StorageDead(_2)
    SourceInfo(src/scopeguard.rs:70:39-70:40)
  5: _0 = const ()
    SourceInfo(src/scopeguard.rs:69:24-71:6)
  Terminator {
      source_info: SourceInfo(src/scopeguard.rs:71:6-71:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/scopeguard.rs:69:5-71:6)
      kind: resume
  }
  preds [bb0]
  succs []

