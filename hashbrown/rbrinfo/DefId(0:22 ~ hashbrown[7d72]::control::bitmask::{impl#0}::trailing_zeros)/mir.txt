bb0
  0: StorageLive(_2)
    SourceInfo(src/control/bitmask.rs:65:12-65:37)
  1: _2 = const false
    SourceInfo(src/control/bitmask.rs:65:12-65:37)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:65:12-65:37)
      kind: switchInt(move _2) -> [0: bb8, otherwise: bb1]
  }
  preds []
  succs [bb1, bb8]

bb1
  0: StorageLive(_3)
    SourceInfo(src/control/bitmask.rs:65:41-65:64)
  1: StorageLive(_4)
    SourceInfo(src/control/bitmask.rs:65:41-65:59)
  2: _5 = Eq(const 8_usize, const 0_usize)
    SourceInfo(src/control/bitmask.rs:65:41-65:59)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:65:41-65:59)
      kind: assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const control::group::sse2::BITMASK_STRIDE) -> [success: bb2, unwind: bb12]
  }
  preds [bb0]
  succs [bb2, bb12]

bb2
  0: _4 = Rem(const control::group::sse2::BITMASK_STRIDE, const 8_usize)
    SourceInfo(src/control/bitmask.rs:65:41-65:59)
  1: _3 = Eq(move _4, const 0_usize)
    SourceInfo(src/control/bitmask.rs:65:41-65:64)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:65:41-65:64)
      kind: switchInt(move _3) -> [0: bb7, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb7]

bb3
  0: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:65:63-65:64)
  1: StorageLive(_6)
    SourceInfo(src/control/bitmask.rs:66:13-66:57)
  2: StorageLive(_7)
    SourceInfo(src/control/bitmask.rs:66:13-66:48)
  3: StorageLive(_8)
    SourceInfo(src/control/bitmask.rs:66:13-66:32)
  4: StorageLive(_9)
    SourceInfo(src/control/bitmask.rs:66:13-66:19)
  5: _9 = (_1.0: u16)
    SourceInfo(src/control/bitmask.rs:66:13-66:19)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:66:13-66:32)
      kind: _8 = core::num::<impl u16>::swap_bytes(move _9) -> [return: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: StorageDead(_9)
    SourceInfo(src/control/bitmask.rs:66:31-66:32)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:66:13-66:48)
      kind: _7 = core::num::<impl u16>::leading_zeros(move _8) -> [return: bb5, unwind: bb12]
  }
  preds [bb3]
  succs [bb5, bb12]

bb5
  0: StorageDead(_8)
    SourceInfo(src/control/bitmask.rs:66:47-66:48)
  1: _6 = move _7 as usize (IntToInt)
    SourceInfo(src/control/bitmask.rs:66:13-66:57)
  2: StorageDead(_7)
    SourceInfo(src/control/bitmask.rs:66:56-66:57)
  3: _10 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize)
    SourceInfo(src/control/bitmask.rs:66:13-66:74)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:66:13-66:74)
      kind: assert(!move _10, "attempt to divide `{}` by zero", _6) -> [success: bb6, unwind: bb12]
  }
  preds [bb4]
  succs [bb6, bb12]

bb6
  0: _0 = Div(move _6, const control::group::sse2::BITMASK_STRIDE)
    SourceInfo(src/control/bitmask.rs:66:13-66:74)
  1: StorageDead(_6)
    SourceInfo(src/control/bitmask.rs:66:73-66:74)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:65:9-69:10)
      kind: goto -> bb11
  }
  preds [bb5]
  succs [bb11]

bb7
  0: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:65:63-65:64)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb8
  }
  preds [bb2]
  succs [bb8]

bb8
  0: StorageLive(_11)
    SourceInfo(src/control/bitmask.rs:68:13-68:45)
  1: StorageLive(_12)
    SourceInfo(src/control/bitmask.rs:68:13-68:36)
  2: StorageLive(_13)
    SourceInfo(src/control/bitmask.rs:68:13-68:19)
  3: _13 = (_1.0: u16)
    SourceInfo(src/control/bitmask.rs:68:13-68:19)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:68:13-68:36)
      kind: _12 = core::num::<impl u16>::trailing_zeros(move _13) -> [return: bb9, unwind: bb12]
  }
  preds [bb0, bb7]
  succs [bb9, bb12]

bb9
  0: StorageDead(_13)
    SourceInfo(src/control/bitmask.rs:68:35-68:36)
  1: _11 = move _12 as usize (IntToInt)
    SourceInfo(src/control/bitmask.rs:68:13-68:45)
  2: StorageDead(_12)
    SourceInfo(src/control/bitmask.rs:68:44-68:45)
  3: _14 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize)
    SourceInfo(src/control/bitmask.rs:68:13-68:62)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:68:13-68:62)
      kind: assert(!move _14, "attempt to divide `{}` by zero", _11) -> [success: bb10, unwind: bb12]
  }
  preds [bb8]
  succs [bb10, bb12]

bb10
  0: _0 = Div(move _11, const control::group::sse2::BITMASK_STRIDE)
    SourceInfo(src/control/bitmask.rs:68:13-68:62)
  1: StorageDead(_11)
    SourceInfo(src/control/bitmask.rs:68:61-68:62)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:65:9-69:10)
      kind: goto -> bb11
  }
  preds [bb9]
  succs [bb11]

bb11
  0: StorageDead(_3)
    SourceInfo(src/control/bitmask.rs:69:9-69:10)
  1: StorageDead(_2)
    SourceInfo(src/control/bitmask.rs:69:9-69:10)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:70:6-70:6)
      kind: return
  }
  preds [bb6, bb10]
  succs []

bb12
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:59:5-70:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb8, bb9]
  succs []

