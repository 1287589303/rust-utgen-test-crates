bb0
  0: StorageLive(_2)
    SourceInfo(src/control/bitmask.rs:38:17-38:38)
  1: StorageLive(_3)
    SourceInfo(src/control/bitmask.rs:38:17-38:23)
  2: _3 = (_1.0: u16)
    SourceInfo(src/control/bitmask.rs:38:17-38:23)
  3: StorageLive(_4)
    SourceInfo(src/control/bitmask.rs:38:26-38:38)
  4: StorageLive(_5)
    SourceInfo(src/control/bitmask.rs:38:27-38:33)
  5: _5 = (_1.0: u16)
    SourceInfo(src/control/bitmask.rs:38:27-38:33)
  6: _6 = SubWithOverflow(_5, const 1_u16)
    SourceInfo(src/control/bitmask.rs:38:26-38:38)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:38:26-38:38)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, const 1_u16) -> [success: bb1, unwind: bb2]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: _4 = move (_6.0: u16)
    SourceInfo(src/control/bitmask.rs:38:26-38:38)
  1: StorageDead(_5)
    SourceInfo(src/control/bitmask.rs:38:37-38:38)
  2: _2 = BitAnd(move _3, move _4)
    SourceInfo(src/control/bitmask.rs:38:17-38:38)
  3: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:38:37-38:38)
  4: StorageDead(_3)
    SourceInfo(src/control/bitmask.rs:38:37-38:38)
  5: _0 = control::bitmask::BitMask(move _2)
    SourceInfo(src/control/bitmask.rs:38:9-38:39)
  6: StorageDead(_2)
    SourceInfo(src/control/bitmask.rs:38:38-38:39)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:39:6-39:6)
      kind: return
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:37:5-39:6)
      kind: resume
  }
  preds [bb0]
  succs []

