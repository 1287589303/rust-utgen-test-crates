bb0
  0: StorageLive(_5)
    SourceInfo(src/table.rs:365:15-365:66)
  1: StorageLive(_6)
    SourceInfo(src/table.rs:365:15-365:23)
  2: _6 = &mut ((*_1).0: raw::RawTable<T, A>)
    SourceInfo(src/table.rs:365:15-365:23)
  3: StorageLive(_7)
    SourceInfo(src/table.rs:365:49-365:53)
  4: _7 = _2
    SourceInfo(src/table.rs:365:49-365:53)
  5: StorageLive(_8)
    SourceInfo(src/table.rs:365:55-365:57)
  6: _8 = move _3
    SourceInfo(src/table.rs:365:55-365:57)
  7: StorageLive(_9)
    SourceInfo(src/table.rs:365:59-365:65)
  8: _9 = move _4
    SourceInfo(src/table.rs:365:59-365:65)
  Terminator {
      source_info: SourceInfo(src/table.rs:365:15-365:66)
      kind: _5 = raw::RawTable::<T, A>::find_or_find_insert_slot::<impl FnMut(&T) -> bool, impl Fn(&T) -> u64>(move _6, move _7, move _8, move _9) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_9)
    SourceInfo(src/table.rs:365:65-365:66)
  1: StorageDead(_8)
    SourceInfo(src/table.rs:365:65-365:66)
  2: StorageDead(_7)
    SourceInfo(src/table.rs:365:65-365:66)
  3: StorageDead(_6)
    SourceInfo(src/table.rs:365:65-365:66)
  4: PlaceMention(_5)
    SourceInfo(src/table.rs:365:15-365:66)
  5: _10 = discriminant(_5)
    SourceInfo(src/table.rs:365:15-365:66)
  Terminator {
      source_info: SourceInfo(src/table.rs:365:9-365:66)
      kind: switchInt(move _10) -> [0: bb3, 1: bb4, otherwise: bb2]
  }
  preds [bb0]
  succs [bb2, bb3, bb4]

bb2
  0: FakeRead(ForMatchedPlace(None), _5)
    SourceInfo(src/table.rs:365:15-365:66)
  Terminator {
      source_info: SourceInfo(src/table.rs:365:15-365:66)
      kind: unreachable
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/table.rs:366:13-366:23)
      kind: falseEdge -> [real: bb5, imaginary: bb4]
  }
  preds [bb1]
  succs [bb4, bb5]

bb4
  0: StorageLive(_16)
    SourceInfo(src/table.rs:371:17-371:28)
  1: _16 = move ((_5 as Err).0: raw::InsertSlot)
    SourceInfo(src/table.rs:371:17-371:28)
  2: StorageLive(_17)
    SourceInfo(src/table.rs:371:47-375:14)
  3: StorageLive(_18)
    SourceInfo(src/table.rs:372:17-372:21)
  4: _18 = _2
    SourceInfo(src/table.rs:372:17-372:21)
  5: StorageLive(_19)
    SourceInfo(src/table.rs:373:17-373:28)
  6: _19 = move _16
    SourceInfo(src/table.rs:373:17-373:28)
  7: StorageLive(_20)
    SourceInfo(src/table.rs:374:24-374:28)
  8: _20 = &mut (*_1)
    SourceInfo(src/table.rs:374:24-374:28)
  9: _17 = table::VacantEntry::<'_, T, A> { hash: move _18, insert_slot: move _19, table: move _20 }
    SourceInfo(src/table.rs:371:47-375:14)
  10: StorageDead(_20)
    SourceInfo(src/table.rs:375:13-375:14)
  11: StorageDead(_19)
    SourceInfo(src/table.rs:375:13-375:14)
  12: StorageDead(_18)
    SourceInfo(src/table.rs:375:13-375:14)
  13: _0 = table::Entry::<'_, T, A>::Vacant(move _17)
    SourceInfo(src/table.rs:371:33-375:15)
  14: StorageDead(_17)
    SourceInfo(src/table.rs:375:14-375:15)
  15: StorageDead(_16)
    SourceInfo(src/table.rs:375:14-375:15)
  Terminator {
      source_info: SourceInfo(src/table.rs:375:14-375:15)
      kind: goto -> bb6
  }
  preds [bb1, bb3]
  succs [bb6]

bb5
  0: StorageLive(_11)
    SourceInfo(src/table.rs:366:16-366:22)
  1: _11 = move ((_5 as Ok).0: raw::Bucket<T>)
    SourceInfo(src/table.rs:366:16-366:22)
  2: StorageLive(_12)
    SourceInfo(src/table.rs:366:43-370:14)
  3: StorageLive(_13)
    SourceInfo(src/table.rs:367:17-367:21)
  4: _13 = _2
    SourceInfo(src/table.rs:367:17-367:21)
  5: StorageLive(_14)
    SourceInfo(src/table.rs:368:17-368:23)
  6: _14 = move _11
    SourceInfo(src/table.rs:368:17-368:23)
  7: StorageLive(_15)
    SourceInfo(src/table.rs:369:24-369:28)
  8: _15 = &mut (*_1)
    SourceInfo(src/table.rs:369:24-369:28)
  9: _12 = table::OccupiedEntry::<'_, T, A> { hash: move _13, bucket: move _14, table: move _15 }
    SourceInfo(src/table.rs:366:43-370:14)
  10: StorageDead(_15)
    SourceInfo(src/table.rs:370:13-370:14)
  11: StorageDead(_14)
    SourceInfo(src/table.rs:370:13-370:14)
  12: StorageDead(_13)
    SourceInfo(src/table.rs:370:13-370:14)
  13: _0 = table::Entry::<'_, T, A>::Occupied(move _12)
    SourceInfo(src/table.rs:366:27-370:15)
  14: StorageDead(_12)
    SourceInfo(src/table.rs:370:14-370:15)
  15: StorageDead(_11)
    SourceInfo(src/table.rs:370:14-370:15)
  Terminator {
      source_info: SourceInfo(src/table.rs:370:14-370:15)
      kind: goto -> bb6
  }
  preds [bb3]
  succs [bb6]

bb6
  0: StorageDead(_5)
    SourceInfo(src/table.rs:377:5-377:6)
  Terminator {
      source_info: SourceInfo(src/table.rs:377:5-377:6)
      kind: drop(_4) -> [return: bb7, unwind: bb12]
  }
  preds [bb4, bb5]
  succs [bb7, bb12]

bb7
  Terminator {
      source_info: SourceInfo(src/table.rs:377:5-377:6)
      kind: drop(_3) -> [return: bb8, unwind: bb13]
  }
  preds [bb6]
  succs [bb8, bb13]

bb8
  Terminator {
      source_info: SourceInfo(src/table.rs:377:6-377:6)
      kind: return
  }
  preds [bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/table.rs:365:65-365:66)
      kind: drop(_9) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/table.rs:365:65-365:66)
      kind: drop(_8) -> [return: bb11, unwind terminate(cleanup)]
  }
  preds [bb9]
  succs [bb11]

bb11
  Terminator {
      source_info: SourceInfo(src/table.rs:377:5-377:6)
      kind: drop(_4) -> [return: bb12, unwind terminate(cleanup)]
  }
  preds [bb10]
  succs [bb12]

bb12
  Terminator {
      source_info: SourceInfo(src/table.rs:377:5-377:6)
      kind: drop(_3) -> [return: bb13, unwind terminate(cleanup)]
  }
  preds [bb6, bb11]
  succs [bb13]

bb13
  Terminator {
      source_info: SourceInfo(src/table.rs:359:5-377:6)
      kind: resume
  }
  preds [bb7, bb12]
  succs []

