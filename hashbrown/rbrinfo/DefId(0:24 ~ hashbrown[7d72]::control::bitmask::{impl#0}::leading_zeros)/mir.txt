bb0
  0: StorageLive(_2)
    SourceInfo(src/control/bitmask.rs:87:9-87:40)
  1: StorageLive(_3)
    SourceInfo(src/control/bitmask.rs:87:9-87:31)
  2: StorageLive(_4)
    SourceInfo(src/control/bitmask.rs:87:9-87:15)
  3: _4 = (_1.0: u16)
    SourceInfo(src/control/bitmask.rs:87:9-87:15)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:87:9-87:31)
      kind: _3 = core::num::<impl u16>::leading_zeros(move _4) -> [return: bb1, unwind: bb3]
  }
  preds []
  succs [bb1, bb3]

bb1
  0: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:87:30-87:31)
  1: _2 = move _3 as usize (IntToInt)
    SourceInfo(src/control/bitmask.rs:87:9-87:40)
  2: StorageDead(_3)
    SourceInfo(src/control/bitmask.rs:87:39-87:40)
  3: _5 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize)
    SourceInfo(src/control/bitmask.rs:87:9-87:57)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:87:9-87:57)
      kind: assert(!move _5, "attempt to divide `{}` by zero", _2) -> [success: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: _0 = Div(move _2, const control::group::sse2::BITMASK_STRIDE)
    SourceInfo(src/control/bitmask.rs:87:9-87:57)
  1: StorageDead(_2)
    SourceInfo(src/control/bitmask.rs:87:56-87:57)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:88:6-88:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:86:5-88:6)
      kind: resume
  }
  preds [bb0, bb1]
  succs []

