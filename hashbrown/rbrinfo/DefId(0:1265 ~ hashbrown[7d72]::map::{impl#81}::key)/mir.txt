bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:4259:9-4262:10)
  1: PlaceMention((*_1))
    SourceInfo(src/map.rs:4259:15-4259:20)
  2: _3 = discriminant((*_1))
    SourceInfo(src/map.rs:4259:15-4259:20)
  Terminator {
      source_info: SourceInfo(src/map.rs:4259:9-4259:20)
      kind: switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), (*_1))
    SourceInfo(src/map.rs:4259:15-4259:20)
  Terminator {
      source_info: SourceInfo(src/map.rs:4259:15-4259:20)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/map.rs:4260:13-4260:42)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_9)
    SourceInfo(src/map.rs:4261:30-4261:39)
  1: _9 = &(((*_1) as Vacant).0: map::VacantEntryRef<'_, '_, K, Q, V, S, A>)
    SourceInfo(src/map.rs:4261:30-4261:39)
  2: StorageLive(_10)
    SourceInfo(src/map.rs:4261:44-4261:55)
  3: StorageLive(_11)
    SourceInfo(src/map.rs:4261:44-4261:49)
  4: _11 = &(*_9)
    SourceInfo(src/map.rs:4261:44-4261:49)
  Terminator {
      source_info: SourceInfo(src/map.rs:4261:44-4261:55)
      kind: _10 = map::VacantEntryRef::<'_, '_, K, Q, V, S, A>::key(move _11) -> [return: bb7, unwind: bb9]
  }
  preds [bb0, bb2]
  succs [bb7, bb9]

bb4
  0: StorageLive(_4)
    SourceInfo(src/map.rs:4260:32-4260:41)
  1: _4 = &(((*_1) as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>)
    SourceInfo(src/map.rs:4260:32-4260:41)
  2: StorageLive(_5)
    SourceInfo(src/map.rs:4260:46-4260:66)
  3: StorageLive(_6)
    SourceInfo(src/map.rs:4260:46-4260:57)
  4: StorageLive(_7)
    SourceInfo(src/map.rs:4260:46-4260:57)
  5: StorageLive(_8)
    SourceInfo(src/map.rs:4260:46-4260:51)
  6: _8 = &(*_4)
    SourceInfo(src/map.rs:4260:46-4260:51)
  Terminator {
      source_info: SourceInfo(src/map.rs:4260:46-4260:57)
      kind: _7 = map::OccupiedEntry::<'_, K, V, S, A>::key(move _8) -> [return: bb5, unwind: bb9]
  }
  preds [bb2]
  succs [bb5, bb9]

bb5
  0: _6 = &(*_7)
    SourceInfo(src/map.rs:4260:46-4260:57)
  1: StorageDead(_8)
    SourceInfo(src/map.rs:4260:56-4260:57)
  Terminator {
      source_info: SourceInfo(src/map.rs:4260:46-4260:66)
      kind: _5 = <K as core::borrow::Borrow<Q>>::borrow(move _6) -> [return: bb6, unwind: bb9]
  }
  preds [bb4]
  succs [bb6, bb9]

bb6
  0: _2 = &(*_5)
    SourceInfo(src/map.rs:4260:46-4260:66)
  1: StorageDead(_6)
    SourceInfo(src/map.rs:4260:65-4260:66)
  2: StorageDead(_7)
    SourceInfo(src/map.rs:4260:65-4260:66)
  3: StorageDead(_5)
    SourceInfo(src/map.rs:4260:65-4260:66)
  4: StorageDead(_4)
    SourceInfo(src/map.rs:4260:65-4260:66)
  Terminator {
      source_info: SourceInfo(src/map.rs:4260:65-4260:66)
      kind: goto -> bb8
  }
  preds [bb5]
  succs [bb8]

bb7
  0: _2 = &(*_10)
    SourceInfo(src/map.rs:4261:44-4261:55)
  1: StorageDead(_11)
    SourceInfo(src/map.rs:4261:54-4261:55)
  2: StorageDead(_10)
    SourceInfo(src/map.rs:4261:54-4261:55)
  3: StorageDead(_9)
    SourceInfo(src/map.rs:4261:54-4261:55)
  Terminator {
      source_info: SourceInfo(src/map.rs:4261:54-4261:55)
      kind: goto -> bb8
  }
  preds [bb3]
  succs [bb8]

bb8
  0: _0 = &(*_2)
    SourceInfo(src/map.rs:4259:9-4262:10)
  1: StorageDead(_2)
    SourceInfo(src/map.rs:4263:5-4263:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:4263:6-4263:6)
      kind: return
  }
  preds [bb6, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/map.rs:4255:5-4263:6)
      kind: resume
  }
  preds [bb3, bb4, bb5]
  succs []

