bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:1205:9-1206:81)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:1205:9-1205:19)
  2: _4 = &mut ((*_1).1: raw::RawTable<(K, V), A>)
    SourceInfo(src/map.rs:1205:9-1205:19)
  3: StorageLive(_5)
    SourceInfo(src/map.rs:1206:24-1206:36)
  4: _5 = _2
    SourceInfo(src/map.rs:1206:24-1206:36)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1206:38-1206:80)
  6: StorageLive(_7)
    SourceInfo(src/map.rs:1206:61-1206:79)
  7: StorageLive(_8)
    SourceInfo(src/map.rs:1206:61-1206:79)
  8: _8 = &((*_1).0: S)
    SourceInfo(src/map.rs:1206:61-1206:79)
  9: _7 = &(*_8)
    SourceInfo(src/map.rs:1206:61-1206:79)
  Terminator {
      source_info: SourceInfo(src/map.rs:1206:38-1206:80)
      kind: _6 = map::make_hasher::<K, V, S>(move _7) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_7)
    SourceInfo(src/map.rs:1206:79-1206:80)
  Terminator {
      source_info: SourceInfo(src/map.rs:1205:9-1206:81)
      kind: _3 = raw::RawTable::<(K, V), A>::shrink_to::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _4, move _5, move _6) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_6)
    SourceInfo(src/map.rs:1206:80-1206:81)
  1: StorageDead(_5)
    SourceInfo(src/map.rs:1206:80-1206:81)
  2: StorageDead(_4)
    SourceInfo(src/map.rs:1206:80-1206:81)
  3: StorageDead(_8)
    SourceInfo(src/map.rs:1206:81-1206:82)
  4: StorageDead(_3)
    SourceInfo(src/map.rs:1206:81-1206:82)
  5: _0 = const ()
    SourceInfo(src/map.rs:1204:54-1207:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1207:6-1207:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map.rs:1206:80-1206:81)
      kind: drop(_6) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1204:5-1207:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

