bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:193:27-193:52)
  1: StorageLive(_3)
    SourceInfo(src/map.rs:193:27-193:44)
  2: _3 = &((*_1).0: S)
    SourceInfo(src/map.rs:193:27-193:44)
  Terminator {
      source_info: SourceInfo(src/map.rs:193:27-193:52)
      kind: _2 = <S as core::clone::Clone>::clone(move _3) -> [return: bb1, unwind: bb6]
  }
  preds []
  succs [bb1, bb6]

bb1
  0: StorageDead(_3)
    SourceInfo(src/map.rs:193:51-193:52)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:194:20-194:38)
  2: StorageLive(_5)
    SourceInfo(src/map.rs:194:20-194:30)
  3: _5 = &((*_1).1: raw::RawTable<(K, V), A>)
    SourceInfo(src/map.rs:194:20-194:30)
  Terminator {
      source_info: SourceInfo(src/map.rs:194:20-194:38)
      kind: _4 = <raw::RawTable<(K, V), A> as core::clone::Clone>::clone(move _5) -> [return: bb2, unwind: bb5]
  }
  preds [bb0]
  succs [bb2, bb5]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map.rs:194:37-194:38)
  1: _0 = map::HashMap::<K, V, S, A> { hash_builder: move _2, table: move _4 }
    SourceInfo(src/map.rs:192:9-195:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:195:9-195:10)
      kind: drop(_4) -> [return: bb3, unwind: bb5]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_4)
    SourceInfo(src/map.rs:195:9-195:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:195:9-195:10)
      kind: drop(_2) -> [return: bb4, unwind: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  0: StorageDead(_2)
    SourceInfo(src/map.rs:195:9-195:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:196:6-196:6)
      kind: return
  }
  preds [bb3]
  succs []

bb5
  Terminator {
      source_info: SourceInfo(src/map.rs:195:9-195:10)
      kind: drop(_2) -> [return: bb6, unwind terminate(cleanup)]
  }
  preds [bb1, bb2]
  succs [bb6]

bb6
  Terminator {
      source_info: SourceInfo(src/map.rs:191:5-196:6)
      kind: resume
  }
  preds [bb0, bb3, bb5]
  succs []

