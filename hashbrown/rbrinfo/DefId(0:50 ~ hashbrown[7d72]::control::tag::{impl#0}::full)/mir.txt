bb0
  0: StorageLive(_2)
    SourceInfo(src/control/tag.rs:48:13-48:17)
  1: StorageLive(_3)
    SourceInfo(src/control/tag.rs:48:20-48:24)
  2: _3 = _1
    SourceInfo(src/control/tag.rs:48:20-48:24)
  3: StorageLive(_4)
    SourceInfo(src/control/tag.rs:48:28-48:50)
  4: StorageLive(_5)
    SourceInfo(src/control/tag.rs:48:29-48:45)
  5: _6 = MulWithOverflow(const control::tag::Tag::full::MIN_HASH_LEN, const 8_usize)
    SourceInfo(src/control/tag.rs:48:29-48:45)
  Terminator {
      source_info: SourceInfo(src/control/tag.rs:48:29-48:45)
      kind: assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", const control::tag::Tag::full::MIN_HASH_LEN, const 8_usize) -> [success: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: _5 = move (_6.0: usize)
    SourceInfo(src/control/tag.rs:48:29-48:45)
  1: _7 = SubWithOverflow(_5, const 7_usize)
    SourceInfo(src/control/tag.rs:48:28-48:50)
  Terminator {
      source_info: SourceInfo(src/control/tag.rs:48:28-48:50)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _5, const 7_usize) -> [success: bb2, unwind: bb4]
  }
  preds [bb0]
  succs [bb2, bb4]

bb2
  0: _4 = move (_7.0: usize)
    SourceInfo(src/control/tag.rs:48:28-48:50)
  1: StorageDead(_5)
    SourceInfo(src/control/tag.rs:48:49-48:50)
  2: _8 = Lt(_4, const 64_usize)
    SourceInfo(src/control/tag.rs:48:20-48:50)
  Terminator {
      source_info: SourceInfo(src/control/tag.rs:48:20-48:50)
      kind: assert(move _8, "attempt to shift right by `{}`, which would overflow", _4) -> [success: bb3, unwind: bb4]
  }
  preds [bb1]
  succs [bb3, bb4]

bb3
  0: _2 = Shr(move _3, move _4)
    SourceInfo(src/control/tag.rs:48:20-48:50)
  1: StorageDead(_4)
    SourceInfo(src/control/tag.rs:48:49-48:50)
  2: StorageDead(_3)
    SourceInfo(src/control/tag.rs:48:49-48:50)
  3: FakeRead(ForLet(None), _2)
    SourceInfo(src/control/tag.rs:48:13-48:17)
  4: StorageLive(_9)
    SourceInfo(src/control/tag.rs:49:13-49:32)
  5: StorageLive(_10)
    SourceInfo(src/control/tag.rs:49:13-49:26)
  6: StorageLive(_11)
    SourceInfo(src/control/tag.rs:49:14-49:18)
  7: _11 = _2
    SourceInfo(src/control/tag.rs:49:14-49:18)
  8: _10 = BitAnd(move _11, const 127_u64)
    SourceInfo(src/control/tag.rs:49:13-49:26)
  9: StorageDead(_11)
    SourceInfo(src/control/tag.rs:49:25-49:26)
  10: _9 = move _10 as u8 (IntToInt)
    SourceInfo(src/control/tag.rs:49:13-49:32)
  11: StorageDead(_10)
    SourceInfo(src/control/tag.rs:49:31-49:32)
  12: _0 = control::tag::Tag(move _9)
    SourceInfo(src/control/tag.rs:49:9-49:33)
  13: StorageDead(_9)
    SourceInfo(src/control/tag.rs:49:32-49:33)
  14: StorageDead(_2)
    SourceInfo(src/control/tag.rs:50:5-50:6)
  Terminator {
      source_info: SourceInfo(src/control/tag.rs:50:6-50:6)
      kind: return
  }
  preds [bb2]
  succs []

bb4
  Terminator {
      source_info: SourceInfo(src/control/tag.rs:36:5-50:6)
      kind: resume
  }
  preds [bb0, bb1, bb2]
  succs []

