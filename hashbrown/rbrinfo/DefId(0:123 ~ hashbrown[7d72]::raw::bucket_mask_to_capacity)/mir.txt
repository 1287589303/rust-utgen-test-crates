bb0
  0: StorageLive(_2)
    SourceInfo(src/raw/mod.rs:131:8-131:23)
  1: StorageLive(_3)
    SourceInfo(src/raw/mod.rs:131:8-131:19)
  2: _3 = _1
    SourceInfo(src/raw/mod.rs:131:8-131:19)
  3: _2 = Lt(move _3, const 8_usize)
    SourceInfo(src/raw/mod.rs:131:8-131:23)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:131:8-131:23)
      kind: switchInt(move _2) -> [0: bb2, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2]

bb1
  0: StorageDead(_3)
    SourceInfo(src/raw/mod.rs:131:22-131:23)
  1: _0 = _1
    SourceInfo(src/raw/mod.rs:134:9-134:20)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:131:5-138:6)
      kind: goto -> bb6
  }
  preds [bb0]
  succs [bb6]

bb2
  0: StorageDead(_3)
    SourceInfo(src/raw/mod.rs:131:22-131:23)
  1: StorageLive(_4)
    SourceInfo(src/raw/mod.rs:137:9-137:32)
  2: StorageLive(_5)
    SourceInfo(src/raw/mod.rs:137:10-137:27)
  3: StorageLive(_6)
    SourceInfo(src/raw/mod.rs:137:11-137:22)
  4: _6 = _1
    SourceInfo(src/raw/mod.rs:137:11-137:22)
  5: _7 = AddWithOverflow(_6, const 1_usize)
    SourceInfo(src/raw/mod.rs:137:10-137:27)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:137:10-137:27)
      kind: assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_usize) -> [success: bb3, unwind: bb7]
  }
  preds [bb0]
  succs [bb3, bb7]

bb3
  0: _5 = move (_7.0: usize)
    SourceInfo(src/raw/mod.rs:137:10-137:27)
  1: StorageDead(_6)
    SourceInfo(src/raw/mod.rs:137:26-137:27)
  2: _8 = Eq(const 8_usize, const 0_usize)
    SourceInfo(src/raw/mod.rs:137:9-137:32)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:137:9-137:32)
      kind: assert(!move _8, "attempt to divide `{}` by zero", _5) -> [success: bb4, unwind: bb7]
  }
  preds [bb2]
  succs [bb4, bb7]

bb4
  0: _4 = Div(move _5, const 8_usize)
    SourceInfo(src/raw/mod.rs:137:9-137:32)
  1: StorageDead(_5)
    SourceInfo(src/raw/mod.rs:137:31-137:32)
  2: _9 = MulWithOverflow(_4, const 7_usize)
    SourceInfo(src/raw/mod.rs:137:9-137:36)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:137:9-137:36)
      kind: assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const 7_usize) -> [success: bb5, unwind: bb7]
  }
  preds [bb3]
  succs [bb5, bb7]

bb5
  0: _0 = move (_9.0: usize)
    SourceInfo(src/raw/mod.rs:137:9-137:36)
  1: StorageDead(_4)
    SourceInfo(src/raw/mod.rs:137:35-137:36)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:131:5-138:6)
      kind: goto -> bb6
  }
  preds [bb4]
  succs [bb6]

bb6
  0: StorageDead(_2)
    SourceInfo(src/raw/mod.rs:138:5-138:6)
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:139:2-139:2)
      kind: return
  }
  preds [bb1, bb5]
  succs []

bb7
  Terminator {
      source_info: SourceInfo(src/raw/mod.rs:130:1-139:2)
      kind: resume
  }
  preds [bb2, bb3, bb4]
  succs []

