bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:1756:13-1756:23)
  1: _3 = [const 0_u64; N]
    SourceInfo(src/map.rs:1756:26-1756:36)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/map.rs:1756:13-1756:23)
  3: StorageLive(_4)
    SourceInfo(src/map.rs:1757:9-1759:10)
  4: StorageLive(_5)
    SourceInfo(src/map.rs:1757:18-1757:22)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1757:18-1757:22)
  6: _6 = core::ops::Range::<usize> { start: const 0_usize, end: const N }
    SourceInfo(src/map.rs:1757:18-1757:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:18-1757:22)
      kind: _5 = <core::ops::Range<usize> as core::iter::IntoIterator>::into_iter(move _6) -> [return: bb1, unwind: bb12]
  }
  preds []
  succs [bb1, bb12]

bb1
  0: StorageDead(_6)
    SourceInfo(src/map.rs:1757:21-1757:22)
  1: PlaceMention(_5)
    SourceInfo(src/map.rs:1757:18-1757:22)
  2: StorageLive(_7)
    SourceInfo(src/map.rs:1757:18-1757:22)
  3: _7 = move _5
    SourceInfo(src/map.rs:1757:18-1757:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:9-1759:10)
      kind: goto -> bb2
  }
  preds [bb0]
  succs [bb2]

bb2
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:9-1759:10)
      kind: falseUnwind -> [real: bb3, unwind: bb12]
  }
  preds [bb1, bb11]
  succs [bb3, bb12]

bb3
  0: StorageLive(_9)
    SourceInfo(src/map.rs:1757:18-1757:22)
  1: StorageLive(_10)
    SourceInfo(src/map.rs:1757:18-1757:22)
  2: StorageLive(_11)
    SourceInfo(src/map.rs:1757:18-1757:22)
  3: StorageLive(_12)
    SourceInfo(src/map.rs:1757:18-1757:22)
  4: _12 = &mut _7
    SourceInfo(src/map.rs:1757:18-1757:22)
  5: _11 = &mut (*_12)
    SourceInfo(src/map.rs:1757:18-1757:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:18-1757:22)
      kind: _10 = <core::ops::Range<usize> as core::iter::Iterator>::next(move _11) -> [return: bb4, unwind: bb12]
  }
  preds [bb2]
  succs [bb4, bb12]

bb4
  0: StorageDead(_11)
    SourceInfo(src/map.rs:1757:21-1757:22)
  1: PlaceMention(_10)
    SourceInfo(src/map.rs:1757:18-1757:22)
  2: _13 = discriminant(_10)
    SourceInfo(src/map.rs:1757:18-1757:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:18-1757:22)
      kind: switchInt(move _13) -> [0: bb6, 1: bb7, otherwise: bb5]
  }
  preds [bb3]
  succs [bb5, bb6, bb7]

bb5
  0: FakeRead(ForMatchedPlace(None), _10)
    SourceInfo(src/map.rs:1757:18-1757:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:18-1757:22)
      kind: unreachable
  }
  preds [bb4]
  succs []

bb6
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:9-1759:10)
      kind: falseEdge -> [real: bb8, imaginary: bb7]
  }
  preds [bb4]
  succs [bb7, bb8]

bb7
  0: StorageLive(_15)
    SourceInfo(src/map.rs:1757:13-1757:14)
  1: _15 = ((_10 as Some).0: usize)
    SourceInfo(src/map.rs:1757:13-1757:14)
  2: StorageLive(_16)
    SourceInfo(src/map.rs:1758:25-1758:69)
  3: StorageLive(_17)
    SourceInfo(src/map.rs:1758:43-1758:61)
  4: StorageLive(_18)
    SourceInfo(src/map.rs:1758:43-1758:61)
  5: _18 = &((*_1).0: S)
    SourceInfo(src/map.rs:1758:43-1758:61)
  6: _17 = &(*_18)
    SourceInfo(src/map.rs:1758:43-1758:61)
  7: StorageLive(_19)
    SourceInfo(src/map.rs:1758:63-1758:68)
  8: StorageLive(_20)
    SourceInfo(src/map.rs:1758:66-1758:67)
  9: _20 = _15
    SourceInfo(src/map.rs:1758:66-1758:67)
  10: _21 = Len(_2)
    SourceInfo(src/map.rs:1758:63-1758:68)
  11: _22 = Lt(_20, _21)
    SourceInfo(src/map.rs:1758:63-1758:68)
  Terminator {
      source_info: SourceInfo(src/map.rs:1758:63-1758:68)
      kind: assert(move _22, "index out of bounds: the length is {} but the index is {}", move _21, _20) -> [success: bb9, unwind: bb12]
  }
  preds [bb4, bb6]
  succs [bb9, bb12]

bb8
  0: _4 = const ()
    SourceInfo(src/map.rs:1757:9-1759:10)
  1: StorageDead(_12)
    SourceInfo(src/map.rs:1759:9-1759:10)
  2: StorageDead(_10)
    SourceInfo(src/map.rs:1759:9-1759:10)
  3: StorageDead(_9)
    SourceInfo(src/map.rs:1759:9-1759:10)
  4: StorageDead(_7)
    SourceInfo(src/map.rs:1759:9-1759:10)
  5: StorageDead(_5)
    SourceInfo(src/map.rs:1759:9-1759:10)
  6: StorageDead(_4)
    SourceInfo(src/map.rs:1759:9-1759:10)
  7: _0 = _3
    SourceInfo(src/map.rs:1760:9-1760:15)
  8: StorageDead(_3)
    SourceInfo(src/map.rs:1761:5-1761:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1761:6-1761:6)
      kind: return
  }
  preds [bb6]
  succs []

bb9
  0: _19 = &(*_2[_20])
    SourceInfo(src/map.rs:1758:63-1758:68)
  Terminator {
      source_info: SourceInfo(src/map.rs:1758:25-1758:69)
      kind: _16 = map::make_hash::<Q, S>(move _17, move _19) -> [return: bb10, unwind: bb12]
  }
  preds [bb7]
  succs [bb10, bb12]

bb10
  0: StorageDead(_19)
    SourceInfo(src/map.rs:1758:68-1758:69)
  1: StorageDead(_17)
    SourceInfo(src/map.rs:1758:68-1758:69)
  2: StorageLive(_23)
    SourceInfo(src/map.rs:1758:20-1758:21)
  3: _23 = _15
    SourceInfo(src/map.rs:1758:20-1758:21)
  4: _24 = Len(_3)
    SourceInfo(src/map.rs:1758:13-1758:22)
  5: _25 = Lt(_23, _24)
    SourceInfo(src/map.rs:1758:13-1758:22)
  Terminator {
      source_info: SourceInfo(src/map.rs:1758:13-1758:22)
      kind: assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> [success: bb11, unwind: bb12]
  }
  preds [bb9]
  succs [bb11, bb12]

bb11
  0: _3[_23] = move _16
    SourceInfo(src/map.rs:1758:13-1758:69)
  1: StorageDead(_16)
    SourceInfo(src/map.rs:1758:68-1758:69)
  2: StorageDead(_23)
    SourceInfo(src/map.rs:1758:69-1758:70)
  3: StorageDead(_20)
    SourceInfo(src/map.rs:1758:69-1758:70)
  4: StorageDead(_18)
    SourceInfo(src/map.rs:1758:69-1758:70)
  5: _9 = const ()
    SourceInfo(src/map.rs:1757:23-1759:10)
  6: StorageDead(_15)
    SourceInfo(src/map.rs:1759:9-1759:10)
  7: StorageDead(_12)
    SourceInfo(src/map.rs:1759:9-1759:10)
  8: StorageDead(_10)
    SourceInfo(src/map.rs:1759:9-1759:10)
  9: StorageDead(_9)
    SourceInfo(src/map.rs:1759:9-1759:10)
  10: _8 = const ()
    SourceInfo(src/map.rs:1757:9-1759:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:1757:9-1759:10)
      kind: goto -> bb2
  }
  preds [bb10]
  succs [bb2]

bb12
  Terminator {
      source_info: SourceInfo(src/map.rs:1752:5-1761:6)
      kind: resume
  }
  preds [bb0, bb2, bb3, bb7, bb9, bb10]
  succs []

