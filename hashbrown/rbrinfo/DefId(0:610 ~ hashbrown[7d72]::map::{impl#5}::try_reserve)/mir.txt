bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:1154:9-1154:19)
  1: _3 = &mut ((*_1).1: raw::RawTable<(K, V), A>)
    SourceInfo(src/map.rs:1154:9-1154:19)
  2: StorageLive(_4)
    SourceInfo(src/map.rs:1155:26-1155:36)
  3: _4 = _2
    SourceInfo(src/map.rs:1155:26-1155:36)
  4: StorageLive(_5)
    SourceInfo(src/map.rs:1155:38-1155:80)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1155:61-1155:79)
  6: StorageLive(_7)
    SourceInfo(src/map.rs:1155:61-1155:79)
  7: _7 = &((*_1).0: S)
    SourceInfo(src/map.rs:1155:61-1155:79)
  8: _6 = &(*_7)
    SourceInfo(src/map.rs:1155:61-1155:79)
  Terminator {
      source_info: SourceInfo(src/map.rs:1155:38-1155:80)
      kind: _5 = map::make_hasher::<K, V, S>(move _6) -> [return: bb1, unwind: bb4]
  }
  preds []
  succs [bb1, bb4]

bb1
  0: StorageDead(_6)
    SourceInfo(src/map.rs:1155:79-1155:80)
  Terminator {
      source_info: SourceInfo(src/map.rs:1154:9-1155:81)
      kind: _0 = raw::RawTable::<(K, V), A>::try_reserve::<impl for<'a> Fn(&'a (K, V)) -> u64 + '_>(move _3, move _4, move _5) -> [return: bb2, unwind: bb3]
  }
  preds [bb0]
  succs [bb2, bb3]

bb2
  0: StorageDead(_5)
    SourceInfo(src/map.rs:1155:80-1155:81)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:1155:80-1155:81)
  2: StorageDead(_3)
    SourceInfo(src/map.rs:1155:80-1155:81)
  3: StorageDead(_7)
    SourceInfo(src/map.rs:1156:5-1156:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1156:6-1156:6)
      kind: return
  }
  preds [bb1]
  succs []

bb3
  Terminator {
      source_info: SourceInfo(src/map.rs:1155:80-1155:81)
      kind: drop(_5) -> [return: bb4, unwind terminate(cleanup)]
  }
  preds [bb1]
  succs [bb4]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1153:5-1156:6)
      kind: resume
  }
  preds [bb0, bb3]
  succs []

