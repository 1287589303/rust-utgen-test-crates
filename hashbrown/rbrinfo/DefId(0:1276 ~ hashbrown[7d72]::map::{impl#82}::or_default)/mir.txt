bb0
  0: StorageLive(_2)
    SourceInfo(src/map.rs:4326:9-4329:10)
  1: StorageLive(_3)
    SourceInfo(src/map.rs:4326:9-4329:10)
  2: PlaceMention(_1)
    SourceInfo(src/map.rs:4326:15-4326:19)
  3: _4 = discriminant(_1)
    SourceInfo(src/map.rs:4326:15-4326:19)
  Terminator {
      source_info: SourceInfo(src/map.rs:4326:9-4326:19)
      kind: switchInt(move _4) -> [0: bb2, 1: bb3, otherwise: bb1]
  }
  preds []
  succs [bb1, bb2, bb3]

bb1
  0: FakeRead(ForMatchedPlace(None), _1)
    SourceInfo(src/map.rs:4326:15-4326:19)
  Terminator {
      source_info: SourceInfo(src/map.rs:4326:15-4326:19)
      kind: unreachable
  }
  preds [bb0]
  succs []

bb2
  Terminator {
      source_info: SourceInfo(src/map.rs:4327:13-4327:38)
      kind: falseEdge -> [real: bb4, imaginary: bb3]
  }
  preds [bb0]
  succs [bb3, bb4]

bb3
  0: StorageLive(_8)
    SourceInfo(src/map.rs:4328:30-4328:35)
  1: _8 = move ((_1 as Vacant).0: map::VacantEntryRef<'_, '_, K, Q, V, S, A>)
    SourceInfo(src/map.rs:4328:30-4328:35)
  2: StorageLive(_9)
    SourceInfo(src/map.rs:4328:40-4328:72)
  3: StorageLive(_10)
    SourceInfo(src/map.rs:4328:40-4328:45)
  4: _10 = move _8
    SourceInfo(src/map.rs:4328:40-4328:45)
  5: StorageLive(_11)
    SourceInfo(src/map.rs:4328:53-4328:71)
  Terminator {
      source_info: SourceInfo(src/map.rs:4328:53-4328:71)
      kind: _11 = <V as core::default::Default>::default() -> [return: bb6, unwind: bb10]
  }
  preds [bb0, bb2]
  succs [bb6, bb10]

bb4
  0: StorageLive(_5)
    SourceInfo(src/map.rs:4327:32-4327:37)
  1: _5 = move ((_1 as Occupied).0: map::OccupiedEntry<'_, K, V, S, A>)
    SourceInfo(src/map.rs:4327:32-4327:37)
  2: StorageLive(_6)
    SourceInfo(src/map.rs:4327:42-4327:58)
  3: StorageLive(_7)
    SourceInfo(src/map.rs:4327:42-4327:47)
  4: _7 = move _5
    SourceInfo(src/map.rs:4327:42-4327:47)
  Terminator {
      source_info: SourceInfo(src/map.rs:4327:42-4327:58)
      kind: _6 = map::OccupiedEntry::<'_, K, V, S, A>::into_mut(move _7) -> [return: bb5, unwind: bb10]
  }
  preds [bb2]
  succs [bb5, bb10]

bb5
  0: _3 = &mut (*_6)
    SourceInfo(src/map.rs:4327:42-4327:58)
  1: StorageDead(_7)
    SourceInfo(src/map.rs:4327:57-4327:58)
  2: StorageDead(_6)
    SourceInfo(src/map.rs:4327:57-4327:58)
  3: StorageDead(_5)
    SourceInfo(src/map.rs:4327:57-4327:58)
  Terminator {
      source_info: SourceInfo(src/map.rs:4327:57-4327:58)
      kind: goto -> bb8
  }
  preds [bb4]
  succs [bb8]

bb6
  Terminator {
      source_info: SourceInfo(src/map.rs:4328:40-4328:72)
      kind: _9 = map::VacantEntryRef::<'_, '_, K, Q, V, S, A>::insert(move _10, move _11) -> [return: bb7, unwind: bb9]
  }
  preds [bb3]
  succs [bb7, bb9]

bb7
  0: _3 = &mut (*_9)
    SourceInfo(src/map.rs:4328:40-4328:72)
  1: StorageDead(_11)
    SourceInfo(src/map.rs:4328:71-4328:72)
  2: StorageDead(_10)
    SourceInfo(src/map.rs:4328:71-4328:72)
  3: StorageDead(_9)
    SourceInfo(src/map.rs:4328:71-4328:72)
  4: StorageDead(_8)
    SourceInfo(src/map.rs:4328:71-4328:72)
  Terminator {
      source_info: SourceInfo(src/map.rs:4328:71-4328:72)
      kind: goto -> bb8
  }
  preds [bb6]
  succs [bb8]

bb8
  0: _2 = &mut (*_3)
    SourceInfo(src/map.rs:4326:9-4329:10)
  1: _0 = &mut (*_2)
    SourceInfo(src/map.rs:4326:9-4329:10)
  2: StorageDead(_3)
    SourceInfo(src/map.rs:4330:5-4330:6)
  3: StorageDead(_2)
    SourceInfo(src/map.rs:4330:5-4330:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:4330:6-4330:6)
      kind: return
  }
  preds [bb5, bb7]
  succs []

bb9
  Terminator {
      source_info: SourceInfo(src/map.rs:4328:71-4328:72)
      kind: drop(_11) -> [return: bb10, unwind terminate(cleanup)]
  }
  preds [bb6]
  succs [bb10]

bb10
  Terminator {
      source_info: SourceInfo(src/map.rs:4321:5-4330:6)
      kind: resume
  }
  preds [bb3, bb4, bb9]
  succs []

