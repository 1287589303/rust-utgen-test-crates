bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:1268:13-1268:17)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:1268:38-1268:56)
  2: StorageLive(_5)
    SourceInfo(src/map.rs:1268:38-1268:56)
  3: _5 = &((*_1).0: S)
    SourceInfo(src/map.rs:1268:38-1268:56)
  4: _4 = &(*_5)
    SourceInfo(src/map.rs:1268:38-1268:56)
  5: StorageLive(_6)
    SourceInfo(src/map.rs:1268:58-1268:61)
  6: _6 = &(*_2)
    SourceInfo(src/map.rs:1268:58-1268:61)
  Terminator {
      source_info: SourceInfo(src/map.rs:1268:20-1268:62)
      kind: _3 = map::make_hash::<Q, S>(move _4, move _6) -> [return: bb1, unwind: bb9]
  }
  preds []
  succs [bb1, bb9]

bb1
  0: StorageDead(_6)
    SourceInfo(src/map.rs:1268:61-1268:62)
  1: StorageDead(_4)
    SourceInfo(src/map.rs:1268:61-1268:62)
  2: FakeRead(ForLet(None), _3)
    SourceInfo(src/map.rs:1268:13-1268:17)
  3: StorageDead(_5)
    SourceInfo(src/map.rs:1268:62-1268:63)
  4: StorageLive(_7)
    SourceInfo(src/map.rs:1269:29-1269:71)
  5: StorageLive(_8)
    SourceInfo(src/map.rs:1269:29-1269:39)
  6: _8 = &((*_1).1: raw::RawTable<(K, V), A>)
    SourceInfo(src/map.rs:1269:29-1269:39)
  7: StorageLive(_9)
    SourceInfo(src/map.rs:1269:45-1269:49)
  8: _9 = _3
    SourceInfo(src/map.rs:1269:45-1269:49)
  9: StorageLive(_10)
    SourceInfo(src/map.rs:1269:51-1269:70)
  10: StorageLive(_11)
    SourceInfo(src/map.rs:1269:66-1269:69)
  11: _11 = &(*_2)
    SourceInfo(src/map.rs:1269:66-1269:69)
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:51-1269:70)
      kind: _10 = map::equivalent_key::<Q, K, V>(move _11) -> [return: bb2, unwind: bb9]
  }
  preds [bb0]
  succs [bb2, bb9]

bb2
  0: StorageDead(_11)
    SourceInfo(src/map.rs:1269:69-1269:70)
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:29-1269:71)
      kind: _7 = raw::RawTable::<(K, V), A>::find::<impl for<'a> Fn(&'a (K, V)) -> bool + '_>(move _8, move _9, move _10) -> [return: bb3, unwind: bb8]
  }
  preds [bb1]
  succs [bb3, bb8]

bb3
  0: StorageDead(_10)
    SourceInfo(src/map.rs:1269:70-1269:71)
  1: StorageDead(_9)
    SourceInfo(src/map.rs:1269:70-1269:71)
  2: StorageDead(_8)
    SourceInfo(src/map.rs:1269:70-1269:71)
  3: PlaceMention(_7)
    SourceInfo(src/map.rs:1269:29-1269:71)
  4: _12 = discriminant(_7)
    SourceInfo(src/map.rs:1269:29-1269:71)
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:16-1269:26)
      kind: switchInt(move _12) -> [1: bb4, otherwise: bb6]
  }
  preds [bb2]
  succs [bb4, bb6]

bb4
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:16-1269:26)
      kind: falseEdge -> [real: bb5, imaginary: bb6]
  }
  preds [bb3]
  succs [bb5, bb6]

bb5
  0: StorageLive(_13)
    SourceInfo(src/map.rs:1269:21-1269:25)
  1: _13 = move ((_7 as Some).0: raw::Bucket<(K, V)>)
    SourceInfo(src/map.rs:1269:21-1269:25)
  2: StorageLive(_14)
    SourceInfo(src/map.rs:1270:32-1274:14)
  3: StorageLive(_15)
    SourceInfo(src/map.rs:1271:17-1271:21)
  4: _15 = _3
    SourceInfo(src/map.rs:1271:17-1271:21)
  5: StorageLive(_16)
    SourceInfo(src/map.rs:1272:17-1272:21)
  6: _16 = move _13
    SourceInfo(src/map.rs:1272:17-1272:21)
  7: StorageLive(_17)
    SourceInfo(src/map.rs:1273:24-1273:28)
  8: _17 = &mut (*_1)
    SourceInfo(src/map.rs:1273:24-1273:28)
  9: _14 = map::OccupiedEntry::<'_, K, V, S, A> { hash: move _15, elem: move _16, table: move _17 }
    SourceInfo(src/map.rs:1270:32-1274:14)
  10: StorageDead(_17)
    SourceInfo(src/map.rs:1274:13-1274:14)
  11: StorageDead(_16)
    SourceInfo(src/map.rs:1274:13-1274:14)
  12: StorageDead(_15)
    SourceInfo(src/map.rs:1274:13-1274:14)
  13: _0 = map::EntryRef::<'_, '_, K, Q, V, S, A>::Occupied(move _14)
    SourceInfo(src/map.rs:1270:13-1274:15)
  14: StorageDead(_14)
    SourceInfo(src/map.rs:1274:14-1274:15)
  15: StorageDead(_13)
    SourceInfo(src/map.rs:1275:9-1275:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:9-1281:10)
      kind: goto -> bb7
  }
  preds [bb4]
  succs [bb7]

bb6
  0: StorageLive(_18)
    SourceInfo(src/map.rs:1276:30-1280:14)
  1: StorageLive(_19)
    SourceInfo(src/map.rs:1277:17-1277:21)
  2: _19 = _3
    SourceInfo(src/map.rs:1277:17-1277:21)
  3: StorageLive(_20)
    SourceInfo(src/map.rs:1278:17-1278:20)
  4: _20 = &(*_2)
    SourceInfo(src/map.rs:1278:17-1278:20)
  5: StorageLive(_21)
    SourceInfo(src/map.rs:1279:24-1279:28)
  6: _21 = &mut (*_1)
    SourceInfo(src/map.rs:1279:24-1279:28)
  7: _18 = map::VacantEntryRef::<'_, '_, K, Q, V, S, A> { hash: move _19, key: move _20, table: move _21 }
    SourceInfo(src/map.rs:1276:30-1280:14)
  8: StorageDead(_21)
    SourceInfo(src/map.rs:1280:13-1280:14)
  9: StorageDead(_20)
    SourceInfo(src/map.rs:1280:13-1280:14)
  10: StorageDead(_19)
    SourceInfo(src/map.rs:1280:13-1280:14)
  11: _0 = map::EntryRef::<'_, '_, K, Q, V, S, A>::Vacant(move _18)
    SourceInfo(src/map.rs:1276:13-1280:15)
  12: StorageDead(_18)
    SourceInfo(src/map.rs:1280:14-1280:15)
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:9-1281:10)
      kind: goto -> bb7
  }
  preds [bb3, bb4]
  succs [bb7]

bb7
  0: StorageDead(_3)
    SourceInfo(src/map.rs:1282:5-1282:6)
  1: StorageDead(_7)
    SourceInfo(src/map.rs:1282:5-1282:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:1282:6-1282:6)
      kind: return
  }
  preds [bb5, bb6]
  succs []

bb8
  Terminator {
      source_info: SourceInfo(src/map.rs:1269:70-1269:71)
      kind: drop(_10) -> [return: bb9, unwind terminate(cleanup)]
  }
  preds [bb2]
  succs [bb9]

bb9
  Terminator {
      source_info: SourceInfo(src/map.rs:1264:5-1282:6)
      kind: resume
  }
  preds [bb0, bb1, bb8]
  succs []

