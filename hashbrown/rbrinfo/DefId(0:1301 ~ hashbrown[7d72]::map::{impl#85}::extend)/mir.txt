bb0
  0: StorageLive(_3)
    SourceInfo(src/map.rs:4485:13-4485:17)
  1: StorageLive(_4)
    SourceInfo(src/map.rs:4485:20-4485:24)
  2: _4 = move _2
    SourceInfo(src/map.rs:4485:20-4485:24)
  Terminator {
      source_info: SourceInfo(src/map.rs:4485:20-4485:36)
      kind: _3 = <T as core::iter::IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb16]
  }
  preds []
  succs [bb1, bb16]

bb1
  0: StorageDead(_4)
    SourceInfo(src/map.rs:4485:35-4485:36)
  1: FakeRead(ForLet(None), _3)
    SourceInfo(src/map.rs:4485:13-4485:17)
  2: StorageLive(_5)
    SourceInfo(src/map.rs:4486:13-4486:20)
  3: StorageLive(_6)
    SourceInfo(src/map.rs:4486:26-4486:41)
  4: StorageLive(_7)
    SourceInfo(src/map.rs:4486:26-4486:30)
  5: _7 = &(*_1)
    SourceInfo(src/map.rs:4486:26-4486:30)
  Terminator {
      source_info: SourceInfo(src/map.rs:4486:26-4486:41)
      kind: _6 = map::HashMap::<K, V, S, A>::is_empty(move _7) -> [return: bb2, unwind: bb15]
  }
  preds [bb0]
  succs [bb2, bb15]

bb2
  Terminator {
      source_info: SourceInfo(src/map.rs:4486:26-4486:41)
      kind: switchInt(move _6) -> [0: bb5, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb5]

bb3
  0: StorageDead(_7)
    SourceInfo(src/map.rs:4486:40-4486:41)
  1: StorageLive(_8)
    SourceInfo(src/map.rs:4487:13-4487:29)
  2: StorageLive(_9)
    SourceInfo(src/map.rs:4487:13-4487:17)
  3: _9 = &_3
    SourceInfo(src/map.rs:4487:13-4487:17)
  Terminator {
      source_info: SourceInfo(src/map.rs:4487:13-4487:29)
      kind: _8 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::size_hint(move _9) -> [return: bb4, unwind: bb15]
  }
  preds [bb2]
  succs [bb4, bb15]

bb4
  0: StorageDead(_9)
    SourceInfo(src/map.rs:4487:28-4487:29)
  1: _5 = (_8.0: usize)
    SourceInfo(src/map.rs:4487:13-4487:31)
  2: StorageDead(_8)
    SourceInfo(src/map.rs:4488:9-4488:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:4486:23-4490:10)
      kind: goto -> bb9
  }
  preds [bb3]
  succs [bb9]

bb5
  0: StorageDead(_7)
    SourceInfo(src/map.rs:4486:40-4486:41)
  1: StorageLive(_10)
    SourceInfo(src/map.rs:4489:13-4489:37)
  2: StorageLive(_11)
    SourceInfo(src/map.rs:4489:14-4489:32)
  3: StorageLive(_12)
    SourceInfo(src/map.rs:4489:14-4489:30)
  4: StorageLive(_13)
    SourceInfo(src/map.rs:4489:14-4489:18)
  5: _13 = &_3
    SourceInfo(src/map.rs:4489:14-4489:18)
  Terminator {
      source_info: SourceInfo(src/map.rs:4489:14-4489:30)
      kind: _12 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::size_hint(move _13) -> [return: bb6, unwind: bb15]
  }
  preds [bb2]
  succs [bb6, bb15]

bb6
  0: StorageDead(_13)
    SourceInfo(src/map.rs:4489:29-4489:30)
  1: _11 = (_12.0: usize)
    SourceInfo(src/map.rs:4489:14-4489:32)
  2: _14 = AddWithOverflow(_11, const 1_usize)
    SourceInfo(src/map.rs:4489:13-4489:37)
  Terminator {
      source_info: SourceInfo(src/map.rs:4489:13-4489:37)
      kind: assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb7, unwind: bb15]
  }
  preds [bb5]
  succs [bb7, bb15]

bb7
  0: _10 = move (_14.0: usize)
    SourceInfo(src/map.rs:4489:13-4489:37)
  1: StorageDead(_11)
    SourceInfo(src/map.rs:4489:36-4489:37)
  2: _15 = Eq(const 2_usize, const 0_usize)
    SourceInfo(src/map.rs:4489:13-4489:41)
  Terminator {
      source_info: SourceInfo(src/map.rs:4489:13-4489:41)
      kind: assert(!move _15, "attempt to divide `{}` by zero", _10) -> [success: bb8, unwind: bb15]
  }
  preds [bb6]
  succs [bb8, bb15]

bb8
  0: _5 = Div(move _10, const 2_usize)
    SourceInfo(src/map.rs:4489:13-4489:41)
  1: StorageDead(_10)
    SourceInfo(src/map.rs:4489:40-4489:41)
  2: StorageDead(_12)
    SourceInfo(src/map.rs:4490:9-4490:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:4486:23-4490:10)
      kind: goto -> bb9
  }
  preds [bb7]
  succs [bb9]

bb9
  0: StorageDead(_6)
    SourceInfo(src/map.rs:4490:9-4490:10)
  1: FakeRead(ForLet(None), _5)
    SourceInfo(src/map.rs:4486:13-4486:20)
  2: StorageLive(_16)
    SourceInfo(src/map.rs:4491:9-4491:30)
  3: StorageLive(_17)
    SourceInfo(src/map.rs:4491:9-4491:13)
  4: _17 = &mut (*_1)
    SourceInfo(src/map.rs:4491:9-4491:13)
  5: StorageLive(_18)
    SourceInfo(src/map.rs:4491:22-4491:29)
  6: _18 = _5
    SourceInfo(src/map.rs:4491:22-4491:29)
  Terminator {
      source_info: SourceInfo(src/map.rs:4491:9-4491:30)
      kind: _16 = map::HashMap::<K, V, S, A>::reserve(move _17, move _18) -> [return: bb10, unwind: bb15]
  }
  preds [bb4, bb8]
  succs [bb10, bb15]

bb10
  0: StorageDead(_18)
    SourceInfo(src/map.rs:4491:29-4491:30)
  1: StorageDead(_17)
    SourceInfo(src/map.rs:4491:29-4491:30)
  2: StorageDead(_16)
    SourceInfo(src/map.rs:4491:30-4491:31)
  3: StorageLive(_19)
    SourceInfo(src/map.rs:4492:9-4494:11)
  4: StorageLive(_20)
    SourceInfo(src/map.rs:4492:9-4492:13)
  5: _20 = move _3
    SourceInfo(src/map.rs:4492:9-4492:13)
  6: StorageLive(_21)
    SourceInfo(src/map.rs:4492:23-4494:10)
  7: _21 = {closure@src/map.rs:4492:23: 4492:36} { self: move _1 }
    SourceInfo(src/map.rs:4492:23-4494:10)
  Terminator {
      source_info: SourceInfo(src/map.rs:4492:9-4494:11)
      kind: _19 = <<T as core::iter::IntoIterator>::IntoIter as core::iter::Iterator>::for_each::<{closure@src/map.rs:4492:23: 4492:36}>(move _20, move _21) -> [return: bb11, unwind: bb14]
  }
  preds [bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_21)
    SourceInfo(src/map.rs:4494:10-4494:11)
  1: StorageDead(_20)
    SourceInfo(src/map.rs:4494:10-4494:11)
  2: StorageDead(_19)
    SourceInfo(src/map.rs:4494:11-4494:12)
  3: _0 = const ()
    SourceInfo(src/map.rs:4480:67-4495:6)
  4: StorageDead(_5)
    SourceInfo(src/map.rs:4495:5-4495:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:4495:5-4495:6)
      kind: drop(_3) -> [return: bb12, unwind: bb17]
  }
  preds [bb10]
  succs [bb12, bb17]

bb12
  0: StorageDead(_3)
    SourceInfo(src/map.rs:4495:5-4495:6)
  Terminator {
      source_info: SourceInfo(src/map.rs:4495:5-4495:6)
      kind: drop(_2) -> [return: bb13, unwind: bb18]
  }
  preds [bb11]
  succs [bb13, bb18]

bb13
  Terminator {
      source_info: SourceInfo(src/map.rs:4495:6-4495:6)
      kind: return
  }
  preds [bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/map.rs:4494:10-4494:11)
      kind: drop(_20) -> [return: bb15, unwind terminate(cleanup)]
  }
  preds [bb10]
  succs [bb15]

bb15
  Terminator {
      source_info: SourceInfo(src/map.rs:4495:5-4495:6)
      kind: drop(_3) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb1, bb3, bb5, bb6, bb7, bb9, bb14]
  succs [bb17]

bb16
  Terminator {
      source_info: SourceInfo(src/map.rs:4485:35-4485:36)
      kind: drop(_4) -> [return: bb17, unwind terminate(cleanup)]
  }
  preds [bb0]
  succs [bb17]

bb17
  Terminator {
      source_info: SourceInfo(src/map.rs:4495:5-4495:6)
      kind: drop(_2) -> [return: bb18, unwind terminate(cleanup)]
  }
  preds [bb11, bb15, bb16]
  succs [bb18]

bb18
  Terminator {
      source_info: SourceInfo(src/map.rs:4480:5-4495:6)
      kind: resume
  }
  preds [bb12, bb17]
  succs []

