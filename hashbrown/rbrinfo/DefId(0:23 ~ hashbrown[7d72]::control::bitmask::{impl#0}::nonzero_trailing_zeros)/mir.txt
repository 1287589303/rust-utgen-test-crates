bb0
  0: StorageLive(_2)
    SourceInfo(src/control/bitmask.rs:75:12-75:37)
  1: _2 = const false
    SourceInfo(src/control/bitmask.rs:75:12-75:37)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:75:12-75:37)
      kind: switchInt(move _2) -> [0: bb10, otherwise: bb1]
  }
  preds []
  succs [bb1, bb10]

bb1
  0: StorageLive(_3)
    SourceInfo(src/control/bitmask.rs:75:41-75:64)
  1: StorageLive(_4)
    SourceInfo(src/control/bitmask.rs:75:41-75:59)
  2: _5 = Eq(const 8_usize, const 0_usize)
    SourceInfo(src/control/bitmask.rs:75:41-75:59)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:75:41-75:59)
      kind: assert(!move _5, "attempt to calculate the remainder of `{}` with a divisor of zero", const control::group::sse2::BITMASK_STRIDE) -> [success: bb2, unwind: bb14]
  }
  preds [bb0]
  succs [bb2, bb14]

bb2
  0: _4 = Rem(const control::group::sse2::BITMASK_STRIDE, const 8_usize)
    SourceInfo(src/control/bitmask.rs:75:41-75:59)
  1: _3 = Eq(move _4, const 0_usize)
    SourceInfo(src/control/bitmask.rs:75:41-75:64)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:75:41-75:64)
      kind: switchInt(move _3) -> [0: bb9, otherwise: bb3]
  }
  preds [bb1]
  succs [bb3, bb9]

bb3
  0: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:75:63-75:64)
  1: StorageLive(_6)
    SourceInfo(src/control/bitmask.rs:77:17-77:24)
  2: StorageLive(_7)
    SourceInfo(src/control/bitmask.rs:77:70-77:96)
  3: StorageLive(_8)
    SourceInfo(src/control/bitmask.rs:77:70-77:83)
  4: StorageLive(_9)
    SourceInfo(src/control/bitmask.rs:77:70-77:77)
  5: _9 = _1
    SourceInfo(src/control/bitmask.rs:77:70-77:77)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:77:70-77:83)
      kind: _8 = core::num::NonZero::<u16>::get(move _9) -> [return: bb4, unwind: bb14]
  }
  preds [bb2]
  succs [bb4, bb14]

bb4
  0: StorageDead(_9)
    SourceInfo(src/control/bitmask.rs:77:82-77:83)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:77:70-77:96)
      kind: _7 = core::num::<impl u16>::swap_bytes(move _8) -> [return: bb5, unwind: bb14]
  }
  preds [bb3]
  succs [bb5, bb14]

bb5
  0: StorageDead(_8)
    SourceInfo(src/control/bitmask.rs:77:95-77:96)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:77:36-77:97)
      kind: _6 = core::num::NonZero::<u16>::new_unchecked(move _7) -> [return: bb6, unwind: bb14]
  }
  preds [bb4]
  succs [bb6, bb14]

bb6
  0: StorageDead(_7)
    SourceInfo(src/control/bitmask.rs:77:96-77:97)
  1: FakeRead(ForLet(None), _6)
    SourceInfo(src/control/bitmask.rs:77:17-77:24)
  2: StorageLive(_10)
    SourceInfo(src/control/bitmask.rs:78:13-78:45)
  3: StorageLive(_11)
    SourceInfo(src/control/bitmask.rs:78:13-78:36)
  4: StorageLive(_12)
    SourceInfo(src/control/bitmask.rs:78:13-78:20)
  5: _12 = _6
    SourceInfo(src/control/bitmask.rs:78:13-78:20)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:78:13-78:36)
      kind: _11 = core::num::NonZero::<u16>::leading_zeros(move _12) -> [return: bb7, unwind: bb14]
  }
  preds [bb5]
  succs [bb7, bb14]

bb7
  0: StorageDead(_12)
    SourceInfo(src/control/bitmask.rs:78:35-78:36)
  1: _10 = move _11 as usize (IntToInt)
    SourceInfo(src/control/bitmask.rs:78:13-78:45)
  2: StorageDead(_11)
    SourceInfo(src/control/bitmask.rs:78:44-78:45)
  3: _13 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize)
    SourceInfo(src/control/bitmask.rs:78:13-78:62)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:78:13-78:62)
      kind: assert(!move _13, "attempt to divide `{}` by zero", _10) -> [success: bb8, unwind: bb14]
  }
  preds [bb6]
  succs [bb8, bb14]

bb8
  0: _0 = Div(move _10, const control::group::sse2::BITMASK_STRIDE)
    SourceInfo(src/control/bitmask.rs:78:13-78:62)
  1: StorageDead(_10)
    SourceInfo(src/control/bitmask.rs:78:61-78:62)
  2: StorageDead(_6)
    SourceInfo(src/control/bitmask.rs:79:9-79:10)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:75:9-81:10)
      kind: goto -> bb13
  }
  preds [bb7]
  succs [bb13]

bb9
  0: StorageDead(_4)
    SourceInfo(src/control/bitmask.rs:75:63-75:64)
  Terminator {
      source_info: SourceInfo(src/lib.rs:1:1-1:1)
      kind: goto -> bb10
  }
  preds [bb2]
  succs [bb10]

bb10
  0: StorageLive(_14)
    SourceInfo(src/control/bitmask.rs:80:13-80:46)
  1: StorageLive(_15)
    SourceInfo(src/control/bitmask.rs:80:13-80:37)
  2: StorageLive(_16)
    SourceInfo(src/control/bitmask.rs:80:13-80:20)
  3: _16 = _1
    SourceInfo(src/control/bitmask.rs:80:13-80:20)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:80:13-80:37)
      kind: _15 = core::num::NonZero::<u16>::trailing_zeros(move _16) -> [return: bb11, unwind: bb14]
  }
  preds [bb0, bb9]
  succs [bb11, bb14]

bb11
  0: StorageDead(_16)
    SourceInfo(src/control/bitmask.rs:80:36-80:37)
  1: _14 = move _15 as usize (IntToInt)
    SourceInfo(src/control/bitmask.rs:80:13-80:46)
  2: StorageDead(_15)
    SourceInfo(src/control/bitmask.rs:80:45-80:46)
  3: _17 = Eq(const control::group::sse2::BITMASK_STRIDE, const 0_usize)
    SourceInfo(src/control/bitmask.rs:80:13-80:63)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:80:13-80:63)
      kind: assert(!move _17, "attempt to divide `{}` by zero", _14) -> [success: bb12, unwind: bb14]
  }
  preds [bb10]
  succs [bb12, bb14]

bb12
  0: _0 = Div(move _14, const control::group::sse2::BITMASK_STRIDE)
    SourceInfo(src/control/bitmask.rs:80:13-80:63)
  1: StorageDead(_14)
    SourceInfo(src/control/bitmask.rs:80:62-80:63)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:75:9-81:10)
      kind: goto -> bb13
  }
  preds [bb11]
  succs [bb13]

bb13
  0: StorageDead(_3)
    SourceInfo(src/control/bitmask.rs:81:9-81:10)
  1: StorageDead(_2)
    SourceInfo(src/control/bitmask.rs:81:9-81:10)
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:82:6-82:6)
      kind: return
  }
  preds [bb8, bb12]
  succs []

bb14
  Terminator {
      source_info: SourceInfo(src/control/bitmask.rs:74:5-82:6)
      kind: resume
  }
  preds [bb1, bb3, bb4, bb5, bb6, bb7, bb10, bb11]
  succs []

