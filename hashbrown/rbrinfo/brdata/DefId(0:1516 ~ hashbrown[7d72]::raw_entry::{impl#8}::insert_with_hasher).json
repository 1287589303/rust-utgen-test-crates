{
  "name": "hashbrown::raw_entry::{impl#8}::insert_with_hasher",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1413:5:1427:6",
  "doc": "/// Set the value of an entry with a custom hasher function.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// fn make_hasher<K, S>(hash_builder: &S) -> impl Fn(&K) -> u64 + '_\n/// where\n///     K: Hash + ?Sized,\n///     S: BuildHasher,\n/// {\n///     move |key: &K| {\n///         use core::hash::Hasher;\n///         let mut state = hash_builder.build_hasher();\n///         key.hash(&mut state);\n///         state.finish()\n///     }\n/// }\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// let key = \"a\";\n/// let hash_builder = map.hasher().clone();\n/// let hash = make_hasher(&hash_builder)(&key);\n///\n/// match map.raw_entry_mut().from_hash(hash, |q| q == &key) {\n///     RawEntryMut::Occupied(_) => panic!(),\n///     RawEntryMut::Vacant(v) => assert_eq!(\n///         v.insert_with_hasher(hash, key, 100, make_hasher(&hash_builder)),\n///         (&mut \"a\", &mut 100)\n///     ),\n/// }\n/// map.extend([(\"b\", 200), (\"c\", 300), (\"d\", 400), (\"e\", 500), (\"f\", 600)]);\n/// assert_eq!(map[&\"a\"], 100);\n/// ```\n",
  "code": [
    "pub fn insert_with_hasher<H>(",
    "    self,",
    "    hash: u64,",
    "    key: K,",
    "    value: V,",
    "    hasher: H,",
    ") -> (&'a mut K, &'a mut V)",
    "where",
    "    H: Fn(&K) -> u64,",
    "{",
    "    let &mut (ref mut k, ref mut v) = self",
    "        .table",
    "        .insert_entry(hash, (key, value), |x| hasher(&x.0));",
    "    (k, v)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(k, v)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}