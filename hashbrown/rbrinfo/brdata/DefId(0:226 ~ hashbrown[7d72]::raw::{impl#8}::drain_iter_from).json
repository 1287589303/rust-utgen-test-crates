{
  "name": "hashbrown::raw::{impl#8}::drain_iter_from",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1330:5:1338:6",
  "doc": "/// Returns an iterator which removes all elements from the table without\n/// freeing the memory.\n///\n/// Iteration starts at the provided iterator's current location.\n///\n/// It is up to the caller to ensure that the iterator is valid for this\n/// `RawTable` and covers all items that remain in the table.\n",
  "code": [
    "pub unsafe fn drain_iter_from(&mut self, iter: RawIter<T>) -> RawDrain<'_, T, A> {",
    "    debug_assert_eq!(iter.len(), self.len());",
    "    RawDrain {",
    "        iter,",
    "        table: mem::replace(&mut self.table, RawTableInner::NEW),",
    "        orig_table: NonNull::from(&mut self.table),",
    "        marker: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "RawDrain {\n            iter,\n            table: mem::replace(&mut self.table, RawTableInner::NEW),\n            orig_table: NonNull::from(&mut self.table),\n            marker: PhantomData,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}