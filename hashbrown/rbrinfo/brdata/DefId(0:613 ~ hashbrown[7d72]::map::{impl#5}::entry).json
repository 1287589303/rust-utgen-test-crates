{
  "name": "hashbrown::map::{impl#5}::entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1229:5:1244:6",
  "doc": "/// Gets the given key's corresponding entry in the map for in-place manipulation.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut letters = HashMap::new();\n///\n/// for ch in \"a short treatise on fungi\".chars() {\n///     let counter = letters.entry(ch).or_insert(0);\n///     *counter += 1;\n/// }\n///\n/// assert_eq!(letters[&'s'], 2);\n/// assert_eq!(letters[&'t'], 3);\n/// assert_eq!(letters[&'u'], 1);\n/// assert_eq!(letters.get(&'y'), None);\n/// ```\n",
  "code": [
    "pub fn entry(&mut self, key: K) -> Entry<'_, K, V, S, A> {",
    "    let hash = make_hash::<K, S>(&self.hash_builder, &key);",
    "    if let Some(elem) = self.table.find(hash, equivalent_key(&key)) {",
    "        Entry::Occupied(OccupiedEntry {",
    "            hash,",
    "            elem,",
    "            table: self,",
    "        })",
    "    } else {",
    "        Entry::Vacant(VacantEntry {",
    "            hash,",
    "            key,",
    "            table: self,",
    "        })",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(elem) = self.table.find(hash, equivalent_key(&key))",
          "norm": null,
          "value": "true",
          "line": 1231,
          "bound": null
        }
      ],
      "ret": "Entry::Vacant(VacantEntry {\n                hash,\n                key,\n                table: self,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(elem) = self.table.find(hash, equivalent_key(&key))",
          "norm": null,
          "value": "true",
          "line": 1231,
          "bound": null
        }
      ],
      "ret": "Entry::Occupied(OccupiedEntry {\n                hash,\n                elem,\n                table: self,\n            })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}