{
  "name": "hashbrown::raw::{impl#12}::find_or_find_insert_slot_inner",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:1650:5:1709:6",
  "doc": "/// Searches for an element in the table, or a potential slot where that element could\n/// be inserted (an empty or deleted [`Bucket`] index).\n///\n/// This uses dynamic dispatch to reduce the amount of code generated, but that is\n/// eliminated by LLVM optimizations.\n///\n/// This function does not make any changes to the `data` part of the table, or any\n/// changes to the `items` or `growth_left` field of the table.\n///\n/// The table must have at least 1 empty or deleted `bucket`, otherwise, if the\n/// `eq: &mut dyn FnMut(usize) -> bool` function does not return `true`, this function\n/// will never return (will go into an infinite loop) for tables larger than the group\n/// width, or return an index outside of the table indices range if the table is less\n/// than the group width.\n///\n/// This function is guaranteed to provide the `eq: &mut dyn FnMut(usize) -> bool`\n/// function with only `FULL` buckets' indices and return the `index` of the found\n/// element (as `Ok(index)`). If the element is not found and there is at least 1\n/// empty or deleted [`Bucket`] in the table, the function is guaranteed to return\n/// [`InsertSlot`] with an index in the range `0..self.buckets()`, but in any case,\n/// if this function returns [`InsertSlot`], it will contain an index in the range\n/// `0..=self.buckets()`.\n///\n/// # Safety\n///\n/// The [`RawTableInner`] must have properly initialized control bytes otherwise calling\n/// this function results in [`undefined behavior`].\n///\n/// Attempt to write data at the [`InsertSlot`] returned by this function when the table is\n/// less than the group width and if there was not at least one empty or deleted bucket in\n/// the table will cause immediate [`undefined behavior`]. This is because in this case the\n/// function will return `self.bucket_mask + 1` as an index due to the trailing [`Tag::EMPTY`]\n/// control bytes outside the table range.\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn find_or_find_insert_slot_inner(",
    "    &self,",
    "    hash: u64,",
    "    eq: &mut dyn FnMut(usize) -> bool,",
    ") -> Result<usize, InsertSlot> {",
    "    let mut insert_slot = None;",
    "",
    "    let tag_hash = Tag::full(hash);",
    "    let mut probe_seq = self.probe_seq(hash);",
    "",
    "    loop {",
    "        // SAFETY:",
    "        // * Caller of this function ensures that the control bytes are properly initialized.",
    "        //",
    "        // * `ProbeSeq.pos` cannot be greater than `self.bucket_mask = self.buckets() - 1`",
    "        //   of the table due to masking with `self.bucket_mask` and also because the number",
    "        //   of buckets is a power of two (see `self.probe_seq` function).",
    "        //",
    "        // * Even if `ProbeSeq.pos` returns `position == self.bucket_mask`, it is safe to",
    "        //   call `Group::load` due to the extended control bytes range, which is",
    "        //  `self.bucket_mask + 1 + Group::WIDTH` (in fact, this means that the last control",
    "        //   byte will never be read for the allocated table);",
    "        //",
    "        // * Also, even if `RawTableInner` is not already allocated, `ProbeSeq.pos` will",
    "        //   always return \"0\" (zero), so Group::load will read unaligned `Group::static_empty()`",
    "        //   bytes, which is safe (see RawTableInner::new).",
    "        let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };",
    "",
    "        for bit in group.match_tag(tag_hash) {",
    "            let index = (probe_seq.pos + bit) & self.bucket_mask;",
    "",
    "            if likely(eq(index)) {",
    "                return Ok(index);",
    "            }",
    "        }",
    "",
    "        // We didn't find the element we were looking for in the group, try to get an",
    "        // insertion slot from the group if we don't have one yet.",
    "        if likely(insert_slot.is_none()) {",
    "            insert_slot = self.find_insert_slot_in_group(&group, &probe_seq);",
    "        }",
    "",
    "        // Only stop the search if the group contains at least one empty element.",
    "        // Otherwise, the element that we are looking for might be in a following group.",
    "        if likely(group.match_empty().any_bit_set()) {",
    "            // We must have found a insert slot by now, since the current group contains at",
    "            // least one. For tables smaller than the group width, there will still be an",
    "            // empty element in the current (and only) group due to the load factor.",
    "            unsafe {",
    "                // SAFETY:",
    "                // * Caller of this function ensures that the control bytes are properly initialized.",
    "                //",
    "                // * We use this function with the slot / index found by `self.find_insert_slot_in_group`",
    "                return Err(self.fix_insert_slot(insert_slot.unwrap_unchecked()));",
    "            }",
    "        }",
    "",
    "        probe_seq.move_next(self.bucket_mask);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 7,
    "contra": 4,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "true",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(eq(index))",
          "norm": null,
          "value": "true",
          "line": 1681,
          "bound": null
        }
      ],
      "ret": "Ok(index)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "true",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(eq(index))",
          "norm": null,
          "value": "false",
          "line": 1681,
          "bound": null
        },
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "true",
          "line": 1694,
          "bound": null
        }
      ],
      "ret": "Err(self.fix_insert_slot(insert_slot.unwrap_unchecked()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        20,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "true",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(eq(index))",
          "norm": null,
          "value": "false",
          "line": 1681,
          "bound": null
        },
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "false",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "true",
          "line": 1694,
          "bound": null
        }
      ],
      "ret": "Err(self.fix_insert_slot(insert_slot.unwrap_unchecked()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        20,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "true",
          "line": 1694,
          "bound": null
        }
      ],
      "ret": "Err(self.fix_insert_slot(insert_slot.unwrap_unchecked()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        23,
        24,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "true",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "false",
          "line": 1694,
          "bound": null
        },
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "true",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(eq(index))",
          "norm": null,
          "value": "true",
          "line": 1681,
          "bound": null
        }
      ],
      "ret": "Ok(index)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        23,
        24,
        26,
        27,
        28,
        29,
        33,
        34,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        35
      ],
      "may_contra": true,
      "min_set": false
    },
    {
      "id": 6,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "false",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "true",
          "line": 1694,
          "bound": null
        }
      ],
      "ret": "Err(self.fix_insert_slot(insert_slot.unwrap_unchecked()))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        35
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 7,
      "conds": [
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "false",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(insert_slot.is_none())",
          "norm": null,
          "value": "false",
          "line": 1688,
          "bound": null
        },
        {
          "cond": "likely(group.match_empty().any_bit_set())",
          "norm": null,
          "value": "false",
          "line": 1694,
          "bound": null
        },
        {
          "cond": "bit in group.match_tag(tag_hash)",
          "norm": null,
          "value": "true",
          "line": 1678,
          "bound": null
        },
        {
          "cond": "likely(eq(index))",
          "norm": null,
          "value": "true",
          "line": 1681,
          "bound": null
        }
      ],
      "ret": "Ok(index)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        21,
        22,
        25,
        26,
        27,
        28,
        29,
        33,
        34,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        14,
        16,
        17,
        18,
        19,
        35
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}