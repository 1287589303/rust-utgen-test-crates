{
  "name": "hashbrown::raw::{impl#12}::erase",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:3064:5:3121:6",
  "doc": "/// Erases the [`Bucket`]'s control byte at the given index so that it does not\n/// triggered as full, decreases the `items` of the table and, if it can be done,\n/// increases `self.growth_left`.\n///\n/// This function does not actually erase / drop the [`Bucket`] itself, i.e. it\n/// does not make any changes to the `data` parts of the table. The caller of this\n/// function must take care to properly drop the `data`, otherwise calling this\n/// function may result in a memory leak.\n///\n/// # Safety\n///\n/// You must observe the following safety rules when calling this function:\n///\n/// * The [`RawTableInner`] has already been allocated;\n///\n/// * It must be the full control byte at the given position;\n///\n/// * The `index` must not be greater than the `RawTableInner.bucket_mask`, i.e.\n///   `index <= RawTableInner.bucket_mask` or, in other words, `(index + 1)` must\n///   be no greater than the number returned by the function [`RawTableInner::buckets`].\n///\n/// Calling this function on a table that has not been allocated results in [`undefined behavior`].\n///\n/// Calling this function on a table with no elements is unspecified, but calling subsequent\n/// functions is likely to result in [`undefined behavior`] due to overflow subtraction\n/// (`self.items -= 1 cause overflow when self.items == 0`).\n///\n/// See also [`Bucket::as_ptr`] method, for more information about of properly removing\n/// or saving `data element` from / into the [`RawTable`] / [`RawTableInner`].\n///\n/// [`RawTableInner::buckets`]: RawTableInner::buckets\n/// [`Bucket::as_ptr`]: Bucket::as_ptr\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn erase(&mut self, index: usize) {",
    "    debug_assert!(self.is_bucket_full(index));",
    "",
    "    // This is the same as `index.wrapping_sub(Group::WIDTH) % self.buckets()` because",
    "    // the number of buckets is a power of two, and `self.bucket_mask = self.buckets() - 1`.",
    "    let index_before = index.wrapping_sub(Group::WIDTH) & self.bucket_mask;",
    "    // SAFETY:",
    "    // - The caller must uphold the safety contract for `erase` method;",
    "    // - `index_before` is guaranteed to be in range due to masking with `self.bucket_mask`",
    "    let empty_before = Group::load(self.ctrl(index_before)).match_empty();",
    "    let empty_after = Group::load(self.ctrl(index)).match_empty();",
    "",
    "    // Inserting and searching in the map is performed by two key functions:",
    "    //",
    "    // - The `find_insert_slot` function that looks up the index of any `Tag::EMPTY` or `Tag::DELETED`",
    "    //   slot in a group to be able to insert. If it doesn't find an `Tag::EMPTY` or `Tag::DELETED`",
    "    //   slot immediately in the first group, it jumps to the next `Group` looking for it,",
    "    //   and so on until it has gone through all the groups in the control bytes.",
    "    //",
    "    // - The `find_inner` function that looks for the index of the desired element by looking",
    "    //   at all the `FULL` bytes in the group. If it did not find the element right away, and",
    "    //   there is no `Tag::EMPTY` byte in the group, then this means that the `find_insert_slot`",
    "    //   function may have found a suitable slot in the next group. Therefore, `find_inner`",
    "    //   jumps further, and if it does not find the desired element and again there is no `Tag::EMPTY`",
    "    //   byte, then it jumps further, and so on. The search stops only if `find_inner` function",
    "    //   finds the desired element or hits an `Tag::EMPTY` slot/byte.",
    "    //",
    "    // Accordingly, this leads to two consequences:",
    "    //",
    "    // - The map must have `Tag::EMPTY` slots (bytes);",
    "    //",
    "    // - You can't just mark the byte to be erased as `Tag::EMPTY`, because otherwise the `find_inner`",
    "    //   function may stumble upon an `Tag::EMPTY` byte before finding the desired element and stop",
    "    //   searching.",
    "    //",
    "    // Thus it is necessary to check all bytes after and before the erased element. If we are in",
    "    // a contiguous `Group` of `FULL` or `Tag::DELETED` bytes (the number of `FULL` or `Tag::DELETED` bytes",
    "    // before and after is greater than or equal to `Group::WIDTH`), then we must mark our byte as",
    "    // `Tag::DELETED` in order for the `find_inner` function to go further. On the other hand, if there",
    "    // is at least one `Tag::EMPTY` slot in the `Group`, then the `find_inner` function will still stumble",
    "    // upon an `Tag::EMPTY` byte, so we can safely mark our erased byte as `Tag::EMPTY` as well.",
    "    //",
    "    // Finally, since `index_before == (index.wrapping_sub(Group::WIDTH) & self.bucket_mask) == index`",
    "    // and given all of the above, tables smaller than the group width (self.buckets() < Group::WIDTH)",
    "    // cannot have `Tag::DELETED` bytes.",
    "    //",
    "    // Note that in this context `leading_zeros` refers to the bytes at the end of a group, while",
    "    // `trailing_zeros` refers to the bytes at the beginning of a group.",
    "    let ctrl = if empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH {",
    "        Tag::DELETED",
    "    } else {",
    "        self.growth_left += 1;",
    "        Tag::EMPTY",
    "    };",
    "    // SAFETY: the caller must uphold the safety contract for `erase` method.",
    "    self.set_ctrl(index, ctrl);",
    "    self.items -= 1;",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_bucket_full(index)",
          "norm": null,
          "value": "true",
          "line": 3065,
          "bound": null
        },
        {
          "cond": "empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH",
          "norm": "Group::WIDTH <= empty_before.leading_zeros() + empty_after.trailing_zeros()",
          "value": "true",
          "line": 3112,
          "bound": "empty_before.leading_zeros() + empty_after.trailing_zeros() == Group::WIDTH"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_bucket_full(index)",
          "norm": null,
          "value": "true",
          "line": 3065,
          "bound": null
        },
        {
          "cond": "empty_before.leading_zeros() + empty_after.trailing_zeros() >= Group::WIDTH",
          "norm": "Group::WIDTH <= empty_before.leading_zeros() + empty_after.trailing_zeros()",
          "value": "false",
          "line": 3112,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        20,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_bucket_full(index)",
          "norm": null,
          "value": "false",
          "line": 3065,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        23
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}