{
  "name": "hashbrown::map::{impl#5}::remove_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1993:5:1999:6",
  "doc": "/// Removes a key from the map, returning the stored key and value if the\n/// key was previously in the map. Keeps the allocated memory for reuse.\n///\n/// The key may be any borrowed form of the map's key type, but\n/// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n/// the key type.\n///\n/// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n/// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// // The map is empty\n/// assert!(map.is_empty() && map.capacity() == 0);\n///\n/// map.insert(1, \"a\");\n///\n/// assert_eq!(map.remove_entry(&1), Some((1, \"a\")));\n/// assert_eq!(map.remove(&1), None);\n///\n/// // Now map hold none elements\n/// assert!(map.is_empty());\n/// ```\n",
  "code": [
    "pub fn remove_entry<Q>(&mut self, k: &Q) -> Option<(K, V)>",
    "where",
    "    Q: Hash + Equivalent<K> + ?Sized,",
    "{",
    "    let hash = make_hash::<Q, S>(&self.hash_builder, k);",
    "    self.table.remove_entry(hash, equivalent_key(k))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}