{
  "name": "hashbrown::raw::{impl#8}::iter_hash",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1308:5:1310:6",
  "doc": "/// Returns an iterator over occupied buckets that could match a given hash.\n///\n/// `RawTable` only stores 7 bits of the hash value, so this iterator may\n/// return items that have a hash value different than the one provided. You\n/// should always validate the returned values before using them.\n///\n/// It is up to the caller to ensure that the `RawTable` outlives the\n/// `RawIterHash`. Because we cannot make the `next` method unsafe on the\n/// `RawIterHash` struct, we have to make the `iter_hash` method unsafe.\n",
  "code": [
    "pub unsafe fn iter_hash(&self, hash: u64) -> RawIterHash<T> {",
    "    RawIterHash::new(self, hash)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}