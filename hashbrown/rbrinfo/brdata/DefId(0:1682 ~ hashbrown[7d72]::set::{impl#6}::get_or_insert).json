{
  "name": "hashbrown::set::{impl#6}::get_or_insert",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:914:5:921:6",
  "doc": "/// Inserts the given `value` into the set if it is not present, then\n/// returns a reference to the value in the set.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// assert_eq!(set.len(), 3);\n/// assert_eq!(set.get_or_insert(2), &2);\n/// assert_eq!(set.get_or_insert(100), &100);\n/// assert_eq!(set.len(), 4); // 100 was inserted\n/// ```\n",
  "code": [
    "pub fn get_or_insert(&mut self, value: T) -> &T {",
    "    let hash = make_hash(&self.map.hash_builder, &value);",
    "    let bucket = match self.map.find_or_find_insert_slot(hash, &value) {",
    "        Ok(bucket) => bucket,",
    "        Err(slot) => unsafe { self.map.table.insert_in_slot(hash, slot, (value, ())) },",
    "    };",
    "    unsafe { &bucket.as_ref().0 }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 916,
          "bound": null
        }
      ],
      "ret": "&bucket.as_ref().0",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 916,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 916,
          "bound": null
        }
      ],
      "ret": "&bucket.as_ref().0",
      "path": [
        0,
        1,
        2,
        4,
        6,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}