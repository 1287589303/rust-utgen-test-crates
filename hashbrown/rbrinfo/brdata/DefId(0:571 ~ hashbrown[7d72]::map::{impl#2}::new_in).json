{
  "name": "hashbrown::map::{impl#2}::new_in",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:366:5:368:6",
  "doc": "/// Creates an empty `HashMap` using the given allocator.\n///\n/// The hash map is initially created with a capacity of 0, so it will not allocate until it\n/// is first inserted into.\n///\n/// # HashDoS resistance\n///\n/// The `hash_builder` normally use a fixed key by default and that does\n/// not allow the `HashMap` to be protected against attacks such as [`HashDoS`].\n/// Users who require HashDoS resistance should explicitly use\n/// [`std::collections::hash_map::RandomState`]\n/// as the hasher when creating a [`HashMap`], for example with\n/// [`with_hasher_in`](HashMap::with_hasher_in) method.\n///\n/// [`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n/// [`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use bumpalo::Bump;\n///\n/// let bump = Bump::new();\n/// let mut map = HashMap::new_in(&bump);\n///\n/// // The created HashMap holds none elements\n/// assert_eq!(map.len(), 0);\n///\n/// // The created HashMap also doesn't allocate memory\n/// assert_eq!(map.capacity(), 0);\n///\n/// // Now we insert element inside created HashMap\n/// map.insert(\"One\", 1);\n/// // We can see that the HashMap holds 1 element\n/// assert_eq!(map.len(), 1);\n/// // And it also allocates some capacity\n/// assert!(map.capacity() > 1);\n/// ```\n",
  "code": [
    "pub fn new_in(alloc: A) -> Self {",
    "    Self::with_hasher_in(DefaultHashBuilder::default(), alloc)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}