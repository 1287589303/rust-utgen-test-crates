{
  "name": "hashbrown::raw::{impl#6}::from_base_index",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:263:5:295:6",
  "doc": "/// Creates a [`Bucket`] that contain pointer to the data.\n/// The pointer calculation is performed by calculating the\n/// offset from given `base` pointer (convenience for\n/// `base.as_ptr().sub(index)`).\n///\n/// `index` is in units of `T`; e.g., an `index` of 3 represents a pointer\n/// offset of `3 * size_of::<T>()` bytes.\n///\n/// If the `T` is a ZST, then we instead track the index of the element\n/// in the table so that `erase` works properly (return\n/// `NonNull::new_unchecked((index + 1) as *mut T)`)\n///\n/// # Safety\n///\n/// If `mem::size_of::<T>() != 0`, then the safety rules are directly derived\n/// from the safety rules for [`<*mut T>::sub`] method of `*mut T` and the safety\n/// rules of [`NonNull::new_unchecked`] function.\n///\n/// Thus, in order to uphold the safety contracts for the [`<*mut T>::sub`] method\n/// and [`NonNull::new_unchecked`] function, as well as for the correct\n/// logic of the work of this crate, the following rules are necessary and\n/// sufficient:\n///\n/// * the `base` pointer must not be `dangling` and must points to the\n///   end of the first `value element` from the `data part` of the table, i.e.\n///   must be the pointer that returned by [`RawTable::data_end`] or by\n///   [`RawTableInner::data_end<T>`];\n///\n/// * `index` must not be greater than `RawTableInner.bucket_mask`, i.e.\n///   `index <= RawTableInner.bucket_mask` or, in other words, `(index + 1)`\n///   must be no greater than the number returned by the function\n///   [`RawTable::buckets`] or [`RawTableInner::buckets`].\n///\n/// If `mem::size_of::<T>() == 0`, then the only requirement is that the\n/// `index` must not be greater than `RawTableInner.bucket_mask`, i.e.\n/// `index <= RawTableInner.bucket_mask` or, in other words, `(index + 1)`\n/// must be no greater than the number returned by the function\n/// [`RawTable::buckets`] or [`RawTableInner::buckets`].\n///\n/// [`Bucket`]: crate::raw::Bucket\n/// [`<*mut T>::sub`]: https://doc.rust-lang.org/core/primitive.pointer.html#method.sub-1\n/// [`NonNull::new_unchecked`]: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.new_unchecked\n/// [`RawTable::data_end`]: crate::raw::RawTable::data_end\n/// [`RawTableInner::data_end<T>`]: RawTableInner::data_end<T>\n/// [`RawTable::buckets`]: crate::raw::RawTable::buckets\n/// [`RawTableInner::buckets`]: RawTableInner::buckets\n",
  "code": [
    "unsafe fn from_base_index(base: NonNull<T>, index: usize) -> Self {",
    "    // If mem::size_of::<T>() != 0 then return a pointer to an `element` in",
    "    // the data part of the table (we start counting from \"0\", so that",
    "    // in the expression T[last], the \"last\" index actually one less than the",
    "    // \"buckets\" number in the table, i.e. \"last = RawTableInner.bucket_mask\"):",
    "    //",
    "    //                   `from_base_index(base, 1).as_ptr()` returns a pointer that",
    "    //                   points here in the data part of the table",
    "    //                   (to the start of T1)",
    "    //                        |",
    "    //                        |        `base: NonNull<T>` must point here",
    "    //                        |         (to the end of T0 or to the start of C0)",
    "    //                        v         v",
    "    // [Padding], Tlast, ..., |T1|, T0, |C0, C1, ..., Clast",
    "    //                           ^",
    "    //                           `from_base_index(base, 1)` returns a pointer",
    "    //                           that points here in the data part of the table",
    "    //                           (to the end of T1)",
    "    //",
    "    // where: T0...Tlast - our stored data; C0...Clast - control bytes",
    "    // or metadata for data.",
    "    let ptr = if T::IS_ZERO_SIZED {",
    "        // won't overflow because index must be less than length (bucket_mask)",
    "        // and bucket_mask is guaranteed to be less than `isize::MAX`",
    "        // (see TableLayout::calculate_layout_for method)",
    "        invalid_mut(index + 1)",
    "    } else {",
    "        base.as_ptr().sub(index)",
    "    };",
    "    Self {",
    "        ptr: NonNull::new_unchecked(ptr),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "true",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "false",
          "line": 284,
          "bound": null
        }
      ],
      "ret": "Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }",
      "path": [
        0,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}