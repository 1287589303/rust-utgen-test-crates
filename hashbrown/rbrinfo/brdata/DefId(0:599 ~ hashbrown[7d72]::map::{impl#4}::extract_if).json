{
  "name": "hashbrown::map::{impl#4}::extract_if",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:976:5:987:6",
  "doc": "/// Drains elements which are true under the given predicate,\n/// and returns an iterator over the removed items.\n///\n/// In other words, move all pairs `(k, v)` such that `f(&k, &mut v)` returns `true` out\n/// into another iterator.\n///\n/// Note that `extract_if` lets you mutate every value in the filter closure, regardless of\n/// whether you choose to keep or remove it.\n///\n/// If the returned `ExtractIf` is not exhausted, e.g. because it is dropped without iterating\n/// or the iteration short-circuits, then the remaining elements will be retained.\n/// Use [`retain()`] with a negated predicate if you do not need the returned iterator.\n///\n/// Keeps the allocated memory for reuse.\n///\n/// [`retain()`]: HashMap::retain\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n///\n/// let drained: HashMap<i32, i32> = map.extract_if(|k, _v| k % 2 == 0).collect();\n///\n/// let mut evens = drained.keys().cloned().collect::<Vec<_>>();\n/// let mut odds = map.keys().cloned().collect::<Vec<_>>();\n/// evens.sort();\n/// odds.sort();\n///\n/// assert_eq!(evens, vec![0, 2, 4, 6]);\n/// assert_eq!(odds, vec![1, 3, 5, 7]);\n///\n/// let mut map: HashMap<i32, i32> = (0..8).map(|x| (x, x)).collect();\n///\n/// {   // Iterator is dropped without being consumed.\n///     let d = map.extract_if(|k, _v| k % 2 != 0);\n/// }\n///\n/// // ExtractIf was not exhausted, therefore no elements were drained.\n/// assert_eq!(map.len(), 8);\n/// ```\n",
  "code": [
    "pub fn extract_if<F>(&mut self, f: F) -> ExtractIf<'_, K, V, F, A>",
    "where",
    "    F: FnMut(&K, &mut V) -> bool,",
    "{",
    "    ExtractIf {",
    "        f,",
    "        inner: RawExtractIf {",
    "            iter: unsafe { self.table.iter() },",
    "            table: &mut self.table,",
    "        },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "ExtractIf {\n            f,\n            inner: RawExtractIf {\n                iter: unsafe { self.table.iter() },\n                table: &mut self.table,\n            },\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}