{
  "name": "hashbrown::set::{impl#6}::get_or_insert_with",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:949:5:964:6",
  "doc": "/// Inserts a value computed from `f` into the set if the given `value` is\n/// not present, then returns a reference to the value in the set.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set: HashSet<String> = [\"cat\", \"dog\", \"horse\"]\n///     .iter().map(|&pet| pet.to_owned()).collect();\n///\n/// assert_eq!(set.len(), 3);\n/// for &pet in &[\"cat\", \"dog\", \"fish\"] {\n///     let value = set.get_or_insert_with(pet, str::to_owned);\n///     assert_eq!(value, pet);\n/// }\n/// assert_eq!(set.len(), 4); // a new \"fish\" was inserted\n/// ```\n///\n/// The following example will panic because the new value doesn't match.\n///\n/// ```should_panic\n/// let mut set = hashbrown::HashSet::new();\n/// set.get_or_insert_with(\"rust\", |_| String::new());\n/// ```\n",
  "code": [
    "pub fn get_or_insert_with<Q, F>(&mut self, value: &Q, f: F) -> &T",
    "where",
    "    Q: Hash + Equivalent<T> + ?Sized,",
    "    F: FnOnce(&Q) -> T,",
    "{",
    "    let hash = make_hash(&self.map.hash_builder, value);",
    "    let bucket = match self.map.find_or_find_insert_slot(hash, value) {",
    "        Ok(bucket) => bucket,",
    "        Err(slot) => {",
    "            let new = f(value);",
    "            assert!(value.equivalent(&new), \"new value is not equivalent\");",
    "            unsafe { self.map.table.insert_in_slot(hash, slot, (new, ())) }",
    "        }",
    "    };",
    "    unsafe { &bucket.as_ref().0 }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, value) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        },
        {
          "cond": "value.equivalent(&new)",
          "norm": null,
          "value": "true",
          "line": 959,
          "bound": null
        }
      ],
      "ret": "&bucket.as_ref().0",
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, value) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        },
        {
          "cond": "value.equivalent(&new)",
          "norm": null,
          "value": "false",
          "line": 959,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        7,
        8,
        10,
        11,
        19,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 955,
          "bound": null
        }
      ],
      "ret": "&bucket.as_ref().0",
      "path": [
        0,
        1,
        2,
        4,
        6,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}