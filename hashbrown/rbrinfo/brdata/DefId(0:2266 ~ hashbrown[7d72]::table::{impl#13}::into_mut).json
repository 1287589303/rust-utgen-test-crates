{
  "name": "hashbrown::table::{impl#13}::into_mut",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1762:5:1764:6",
  "doc": "/// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n/// with a lifetime bound to the table itself.\n///\n/// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n///\n/// [`get_mut`]: #method.get_mut\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&\"poneyland\"), (\"poneyland\", 12), |(k, _)| hasher(&k));\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 12))\n/// );\n///\n/// let value: &mut (&str, u32);\n/// match table.entry(\n///     hasher(&\"poneyland\"),\n///     |&(x, _)| x == \"poneyland\",\n///     |(k, _)| hasher(&k),\n/// ) {\n///     Entry::Occupied(entry) => value = entry.into_mut(),\n///     Entry::Vacant(_) => panic!(),\n/// }\n/// value.1 += 10;\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 22))\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn into_mut(self) -> &'a mut T {",
    "    unsafe { self.bucket.as_mut() }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { self.bucket.as_mut() }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}