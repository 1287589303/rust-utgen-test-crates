{
  "name": "hashbrown::table::{impl#13}::get_mut",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1711:5:1713:6",
  "doc": "/// Gets a mutable reference to the value in the entry.\n///\n/// If you need a reference to the `OccupiedEntry` which may outlive the\n/// destruction of the `Entry` value, see [`into_mut`].\n///\n/// [`into_mut`]: #method.into_mut\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&\"poneyland\"), (\"poneyland\", 12), |(k, _)| hasher(&k));\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 12))\n/// );\n///\n/// if let Entry::Occupied(mut o) = table.entry(\n///     hasher(&\"poneyland\"),\n///     |&(x, _)| x == \"poneyland\",\n///     |(k, _)| hasher(&k),\n/// ) {\n///     o.get_mut().1 += 10;\n///     assert_eq!(o.get().1, 22);\n///\n///     // We can use the same Entry multiple times.\n///     o.get_mut().1 += 2;\n/// }\n///\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(x, _)| x == \"poneyland\",),\n///     Some(&(\"poneyland\", 24))\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn get_mut(&mut self) -> &mut T {",
    "    unsafe { self.bucket.as_mut() }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { self.bucket.as_mut() }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}