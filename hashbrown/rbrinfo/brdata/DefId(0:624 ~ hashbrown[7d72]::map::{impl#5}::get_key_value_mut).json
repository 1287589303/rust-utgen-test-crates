{
  "name": "hashbrown::map::{impl#5}::get_key_value_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1383:5:1392:6",
  "doc": "/// Returns the key-value pair corresponding to the supplied key, with a mutable reference to value.\n///\n/// The supplied key may be any borrowed form of the map's key type, but\n/// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n/// the key type.\n///\n/// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n/// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(1, \"a\");\n/// let (k, v) = map.get_key_value_mut(&1).unwrap();\n/// assert_eq!(k, &1);\n/// assert_eq!(v, &mut \"a\");\n/// *v = \"b\";\n/// assert_eq!(map.get_key_value_mut(&1), Some((&1, &mut \"b\")));\n/// assert_eq!(map.get_key_value_mut(&2), None);\n/// ```\n",
  "code": [
    "pub fn get_key_value_mut<Q>(&mut self, k: &Q) -> Option<(&K, &mut V)>",
    "where",
    "    Q: Hash + Equivalent<K> + ?Sized,",
    "{",
    "    // Avoid `Option::map` because it bloats LLVM IR.",
    "    match self.get_inner_mut(k) {",
    "        Some(&mut (ref key, ref mut value)) => Some((key, value)),",
    "        None => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.get_inner_mut(k) matches Some(&mut (ref key, ref mut value))",
          "norm": null,
          "value": "true",
          "line": 1388,
          "bound": null
        },
        {
          "cond": "self.get_inner_mut(k) matches Some(&mut (ref key, ref mut value))",
          "norm": null,
          "value": "true",
          "line": 1388,
          "bound": null
        }
      ],
      "ret": "Some((key, value))",
      "path": [
        0,
        1,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.get_inner_mut(k) matches None",
          "norm": null,
          "value": "true",
          "line": 1388,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}