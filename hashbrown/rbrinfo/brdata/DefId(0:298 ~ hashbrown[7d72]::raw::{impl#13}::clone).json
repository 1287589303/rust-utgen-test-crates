{
  "name": "hashbrown::raw::{impl#13}::clone",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:3125:5:3156:6",
  "doc": "",
  "code": [
    "fn clone(&self) -> Self {",
    "    if self.table.is_empty_singleton() {",
    "        Self::new_in(self.alloc.clone())",
    "    } else {",
    "        unsafe {",
    "            // Avoid `Result::ok_or_else` because it bloats LLVM IR.",
    "            //",
    "            // SAFETY: This is safe as we are taking the size of an already allocated table",
    "            // and therefore capacity overflow cannot occur, `self.table.buckets()` is power",
    "            // of two and all allocator errors will be caught inside `RawTableInner::new_uninitialized`.",
    "            let mut new_table = match Self::new_uninitialized(",
    "                self.alloc.clone(),",
    "                self.table.buckets(),",
    "                Fallibility::Infallible,",
    "            ) {",
    "                Ok(table) => table,",
    "                Err(_) => hint::unreachable_unchecked(),",
    "            };",
    "",
    "            // Cloning elements may fail (the clone function may panic). But we don't",
    "            // need to worry about uninitialized control bits, since:",
    "            // 1. The number of items (elements) in the table is zero, which means that",
    "            //    the control bits will not be read by Drop function.",
    "            // 2. The `clone_from_spec` method will first copy all control bits from",
    "            //    `self` (thus initializing them). But this will not affect the `Drop`",
    "            //    function, since the `clone_from_spec` function sets `items` only after",
    "            //    successfully cloning all elements.",
    "            new_table.clone_from_spec(self);",
    "            new_table",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.table.is_empty_singleton()",
          "norm": null,
          "value": "true",
          "line": 3126,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.table.is_empty_singleton()",
          "norm": null,
          "value": "false",
          "line": 3126,
          "bound": null
        },
        {
          "cond": "Self::new_uninitialized(\n                    self.alloc.clone(),\n                    self.table.buckets(),\n                    Fallibility::Infallible,\n                ) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 3135,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        11,
        19,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.table.is_empty_singleton()",
          "norm": null,
          "value": "false",
          "line": 3126,
          "bound": null
        },
        {
          "cond": "Self::new_uninitialized(\n                    self.alloc.clone(),\n                    self.table.buckets(),\n                    Fallibility::Infallible,\n                ) matches Ok(table)",
          "norm": null,
          "value": "true",
          "line": 3135,
          "bound": null
        },
        {
          "cond": "Self::new_uninitialized(\n                    self.alloc.clone(),\n                    self.table.buckets(),\n                    Fallibility::Infallible,\n                ) matches Ok(table)",
          "norm": null,
          "value": "true",
          "line": 3135,
          "bound": null
        }
      ],
      "ret": "new_table",
      "path": [
        0,
        1,
        5,
        6,
        7,
        8,
        10,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}