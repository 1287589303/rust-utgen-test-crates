{
  "name": "hashbrown::table::{impl#1}::retain",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:862:5:871:6",
  "doc": "/// Retains only the elements specified by the predicate.\n///\n/// In other words, remove all elements `e` such that `f(&e)` returns `false`.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// for x in 1..=6 {\n///     table.insert_unique(hasher(&x), x, hasher);\n/// }\n/// table.retain(|&mut x| x % 2 == 0);\n/// assert_eq!(table.len(), 3);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn retain(&mut self, mut f: impl FnMut(&mut T) -> bool) {",
    "    // Here we only use `iter` as a temporary, preventing use-after-free",
    "    unsafe {",
    "        for item in self.raw.iter() {",
    "            if !f(item.as_mut()) {",
    "                self.raw.erase(item);",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "item in self.raw.iter()",
          "norm": null,
          "value": "true",
          "line": 865,
          "bound": null
        },
        {
          "cond": "f(item.as_mut())",
          "norm": null,
          "value": "true",
          "line": 866,
          "bound": null
        },
        {
          "cond": "item in self.raw.iter()",
          "norm": null,
          "value": "false",
          "line": 865,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        12,
        15,
        3,
        4,
        5,
        7,
        9,
        16
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "item in self.raw.iter()",
          "norm": null,
          "value": "true",
          "line": 865,
          "bound": null
        },
        {
          "cond": "f(item.as_mut())",
          "norm": null,
          "value": "false",
          "line": 866,
          "bound": null
        },
        {
          "cond": "item in self.raw.iter()",
          "norm": null,
          "value": "false",
          "line": 865,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        10,
        11,
        13,
        14,
        15,
        3,
        4,
        5,
        7,
        9,
        16
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "item in self.raw.iter()",
          "norm": null,
          "value": "false",
          "line": 865,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}