{
  "name": "hashbrown::raw::{impl#12}::drop_elements",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2065:5:2078:6",
  "doc": "/// Executes the destructors (if any) of the values stored in the table.\n///\n/// # Note\n///\n/// This function does not erase the control bytes of the table and does\n/// not make any changes to the `items` or `growth_left` fields of the\n/// table. If necessary, the caller of this function must manually set\n/// up these table fields, for example using the [`clear_no_drop`] function.\n///\n/// Be careful during calling this function, because drop function of\n/// the elements can panic, and this can leave table in an inconsistent\n/// state.\n///\n/// # Safety\n///\n/// The type `T` must be the actual type of the elements stored in the table,\n/// otherwise calling this function may result in [`undefined behavior`].\n///\n/// If `T` is a type that should be dropped and **the table is not empty**,\n/// calling this function more than once results in [`undefined behavior`].\n///\n/// If `T` is not [`Copy`], attempting to use values stored in the table after\n/// calling this function may result in [`undefined behavior`].\n///\n/// It is safe to call this function on a table that has not been allocated,\n/// on a table with uninitialized control bytes, and on a table with no actual\n/// data but with `Full` control bytes if `self.items == 0`.\n///\n/// See also [`Bucket::drop`] / [`Bucket::as_ptr`] methods, for more information\n/// about of properly removing or saving `element` from / into the [`RawTable`] /\n/// [`RawTableInner`].\n///\n/// [`Bucket::drop`]: Bucket::drop\n/// [`Bucket::as_ptr`]: Bucket::as_ptr\n/// [`clear_no_drop`]: RawTableInner::clear_no_drop\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn drop_elements<T>(&mut self) {",
    "    // Check that `self.items != 0`. Protects against the possibility",
    "    // of creating an iterator on an table with uninitialized control bytes.",
    "    if T::NEEDS_DROP && self.items != 0 {",
    "        // SAFETY: We know for sure that RawTableInner will outlive the",
    "        // returned `RawIter` iterator, and the caller of this function",
    "        // must uphold the safety contract for `drop_elements` method.",
    "        for item in self.iter::<T>() {",
    "            // SAFETY: The caller must uphold the safety contract for",
    "            // `drop_elements` method.",
    "            item.drop();",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 1,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "true",
          "line": 2068,
          "bound": null
        },
        {
          "cond": "self.items != 0",
          "norm": "0 != self.items",
          "value": "true",
          "line": 2068,
          "bound": null
        },
        {
          "cond": "item in self.iter::<T>()",
          "norm": null,
          "value": "true",
          "line": 2072,
          "bound": null
        },
        {
          "cond": "item in self.iter::<T>()",
          "norm": null,
          "value": "false",
          "line": 2072,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        10,
        12,
        5,
        6,
        7,
        9,
        11,
        15
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "true",
          "line": 2068,
          "bound": null
        },
        {
          "cond": "self.items != 0",
          "norm": "0 != self.items",
          "value": "true",
          "line": 2068,
          "bound": null
        },
        {
          "cond": "item in self.iter::<T>()",
          "norm": null,
          "value": "false",
          "line": 2072,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        9,
        11,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "true",
          "line": 2068,
          "bound": null
        },
        {
          "cond": "self.items != 0",
          "norm": "0 != self.items",
          "value": "false",
          "line": 2068,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "false",
          "line": 2068,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}