{
  "name": "hashbrown::table::{impl#1}::find_mut",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:261:5:263:6",
  "doc": "/// Returns a mutable reference to an entry in the table with the given hash\n/// and which satisfies the equality function passed.\n///\n/// This method will call `eq` for all entries with the given hash, but may\n/// also call it for entries with a different hash. `eq` should only return\n/// true for the desired entry, at which point the search is stopped.\n///\n/// When mutating an entry, you should ensure that it still retains the same\n/// hash value as when it was inserted, otherwise lookups of that entry may\n/// fail to find it.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\n/// if let Some(val) = table.find_mut(hasher(&1), |val| val.0 == 1) {\n///     val.1 = \"b\";\n/// }\n/// assert_eq!(table.find(hasher(&1), |val| val.0 == 1), Some(&(1, \"b\")));\n/// assert_eq!(table.find(hasher(&2), |val| val.0 == 2), None);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn find_mut(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<&mut T> {",
    "    self.raw.get_mut(hash, eq)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}