{
  "name": "hashbrown::map::{impl#5}::insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1790:5:1801:6",
  "doc": "/// Inserts a key-value pair into the map.\n///\n/// If the map did not have this key present, [`None`] is returned.\n///\n/// If the map did have this key present, the value is updated, and the old\n/// value is returned. The key is not updated, though; this matters for\n/// types that can be `==` without being identical. See the [`std::collections`]\n/// [module-level documentation] for more.\n///\n/// [`None`]: https://doc.rust-lang.org/std/option/enum.Option.html#variant.None\n/// [`std::collections`]: https://doc.rust-lang.org/std/collections/index.html\n/// [module-level documentation]: https://doc.rust-lang.org/std/collections/index.html#insert-and-complex-keys\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// assert_eq!(map.insert(37, \"a\"), None);\n/// assert_eq!(map.is_empty(), false);\n///\n/// map.insert(37, \"b\");\n/// assert_eq!(map.insert(37, \"c\"), Some(\"b\"));\n/// assert_eq!(map[&37], \"c\");\n/// ```\n",
  "code": [
    "pub fn insert(&mut self, k: K, v: V) -> Option<V> {",
    "    let hash = make_hash::<K, S>(&self.hash_builder, &k);",
    "    match self.find_or_find_insert_slot(hash, &k) {",
    "        Ok(bucket) => Some(mem::replace(unsafe { &mut bucket.as_mut().1 }, v)),",
    "        Err(slot) => {",
    "            unsafe {",
    "                self.table.insert_in_slot(hash, slot, (k, v));",
    "            }",
    "            None",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.find_or_find_insert_slot(hash, &k) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 1792,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        10,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.find_or_find_insert_slot(hash, &k) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1792,
          "bound": null
        },
        {
          "cond": "self.find_or_find_insert_slot(hash, &k) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1792,
          "bound": null
        }
      ],
      "ret": "Some(mem::replace(unsafe { &mut bucket.as_mut().1 }, v))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8,
        9,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}