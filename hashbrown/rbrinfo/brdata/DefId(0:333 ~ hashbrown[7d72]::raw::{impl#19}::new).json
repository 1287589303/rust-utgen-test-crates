{
  "name": "hashbrown::raw::{impl#19}::new",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:3399:5:3416:6",
  "doc": "/// Returns a `RawIterRange` covering a subset of a table.\n///\n/// # Safety\n///\n/// If any of the following conditions are violated, the result is\n/// [`undefined behavior`]:\n///\n/// * `ctrl` must be [valid] for reads, i.e. table outlives the `RawIterRange`;\n///\n/// * `ctrl` must be properly aligned to the group size (`Group::WIDTH`);\n///\n/// * `ctrl` must point to the array of properly initialized control bytes;\n///\n/// * `data` must be the [`Bucket`] at the `ctrl` index in the table;\n///\n/// * the value of `len` must be less than or equal to the number of table buckets,\n///   and the returned value of `ctrl.as_ptr().add(len).offset_from(ctrl.as_ptr())`\n///   must be positive.\n///\n/// * The `ctrl.add(len)` pointer must be either in bounds or one\n///   byte past the end of the same [allocated table].\n///\n/// * The `len` must be a power of two.\n///\n/// [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn new(ctrl: *const u8, data: Bucket<T>, len: usize) -> Self {",
    "    debug_assert_ne!(len, 0);",
    "    debug_assert_eq!(ctrl as usize % Group::WIDTH, 0);",
    "    // SAFETY: The caller must uphold the safety rules for the [`RawIterRange::new`]",
    "    let end = ctrl.add(len);",
    "",
    "    // Load the first group and advance ctrl to point to the next group",
    "    // SAFETY: The caller must uphold the safety rules for the [`RawIterRange::new`]",
    "    let current_group = Group::load_aligned(ctrl.cast()).match_full();",
    "    let next_ctrl = ctrl.add(Group::WIDTH);",
    "",
    "    Self {",
    "        current_group: current_group.into_iter(),",
    "        data,",
    "        next_ctrl,",
    "        end,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "true",
          "line": 40,
          "bound": null
        }
      ],
      "ret": "Self {\n            current_group: current_group.into_iter(),\n            data,\n            next_ctrl,\n            end,\n        }",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "(*left_val == *right_val)",
          "norm": null,
          "value": "false",
          "line": 40,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        18
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}