{
  "name": "hashbrown::raw::{impl#19}::next_impl",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:3466:5:3487:6",
  "doc": "/// # Safety\n/// If `DO_CHECK_PTR_RANGE` is false, caller must ensure that we never try to iterate\n/// after yielding all elements.\n",
  "code": [
    "unsafe fn next_impl<const DO_CHECK_PTR_RANGE: bool>(&mut self) -> Option<Bucket<T>> {",
    "    loop {",
    "        if let Some(index) = self.current_group.next() {",
    "            return Some(self.data.next_n(index));",
    "        }",
    "",
    "        if DO_CHECK_PTR_RANGE && self.next_ctrl >= self.end {",
    "            return None;",
    "        }",
    "",
    "        // We might read past self.end up to the next group boundary,",
    "        // but this is fine because it only occurs on tables smaller",
    "        // than the group size where the trailing control bytes are all",
    "        // EMPTY. On larger tables self.end is guaranteed to be aligned",
    "        // to the group size (since tables are power-of-two sized).",
    "        self.current_group = Group::load_aligned(self.next_ctrl.cast())",
    "            .match_full()",
    "            .into_iter();",
    "        self.data = self.data.next_n(Group::WIDTH);",
    "        self.next_ctrl = self.next_ctrl.add(Group::WIDTH);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        },
        {
          "cond": "DO_CHECK_PTR_RANGE",
          "norm": null,
          "value": "true",
          "line": 3472,
          "bound": null
        },
        {
          "cond": "self.next_ctrl >= self.end",
          "norm": "self.end <= self.next_ctrl",
          "value": "true",
          "line": 3472,
          "bound": "self.next_ctrl == self.end"
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        },
        {
          "cond": "DO_CHECK_PTR_RANGE",
          "norm": null,
          "value": "true",
          "line": 3472,
          "bound": null
        },
        {
          "cond": "self.next_ctrl >= self.end",
          "norm": "self.end <= self.next_ctrl",
          "value": "false",
          "line": 3472,
          "bound": null
        },
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        }
      ],
      "ret": "Some(self.data.next_n(index))",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        1,
        2,
        3,
        4,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        },
        {
          "cond": "DO_CHECK_PTR_RANGE",
          "norm": null,
          "value": "false",
          "line": 3472,
          "bound": null
        },
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        }
      ],
      "ret": "Some(self.data.next_n(index))",
      "path": [
        0,
        1,
        2,
        3,
        7,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        1,
        2,
        3,
        4,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3468,
          "bound": null
        }
      ],
      "ret": "Some(self.data.next_n(index))",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        18
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}