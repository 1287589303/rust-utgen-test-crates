{
  "name": "hashbrown::set::{impl#6}::is_disjoint",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1024:5:1026:6",
  "doc": "/// Returns `true` if `self` has no elements in common with `other`.\n/// This is equivalent to checking for an empty intersection.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let a: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let mut b = HashSet::new();\n///\n/// assert_eq!(a.is_disjoint(&b), true);\n/// b.insert(4);\n/// assert_eq!(a.is_disjoint(&b), true);\n/// b.insert(1);\n/// assert_eq!(a.is_disjoint(&b), false);\n/// ```\n",
  "code": [
    "pub fn is_disjoint(&self, other: &Self) -> bool {",
    "    self.intersection(other).next().is_none()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}