{
  "name": "hashbrown::raw::{impl#8}::reserve",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:898:5:913:6",
  "doc": "/// Ensures that at least `additional` items can be inserted into the table\n/// without reallocation.\n",
  "code": [
    "pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {",
    "    if unlikely(additional > self.table.growth_left) {",
    "        // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.",
    "        unsafe {",
    "            // SAFETY: The [`RawTableInner`] must already have properly initialized control",
    "            // bytes since we will never expose RawTable::new_uninitialized in a public API.",
    "            if self",
    "                .reserve_rehash(additional, hasher, Fallibility::Infallible)",
    "                .is_err()",
    "            {",
    "                // SAFETY: All allocation errors will be caught inside `RawTableInner::reserve_rehash`.",
    "                hint::unreachable_unchecked()",
    "            }",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "unlikely(additional > self.table.growth_left)",
          "norm": null,
          "value": "true",
          "line": 899,
          "bound": null
        },
        {
          "cond": "self\n                    .reserve_rehash(additional, hasher, Fallibility::Infallible)\n                    .is_err()",
          "norm": null,
          "value": "true",
          "line": 904,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "unlikely(additional > self.table.growth_left)",
          "norm": null,
          "value": "true",
          "line": 899,
          "bound": null
        },
        {
          "cond": "self\n                    .reserve_rehash(additional, hasher, Fallibility::Infallible)\n                    .is_err()",
          "norm": null,
          "value": "false",
          "line": 904,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "unlikely(additional > self.table.growth_left)",
          "norm": null,
          "value": "false",
          "line": 899,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}