{
  "name": "hashbrown::map::{impl#44}::into_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3123:5:3125:6",
  "doc": "/// Creates an iterator over the entries of a `HashMap` in arbitrary order\n/// with mutable references to the values. The iterator element type is\n/// `(&'a K, &'a mut V)`.\n///\n/// Return the same `IterMut` struct as by the [`iter_mut`] method on\n/// [`HashMap`].\n///\n/// [`iter_mut`]: struct.HashMap.html#method.iter_mut\n/// [`HashMap`]: struct.HashMap.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// let mut map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n///\n/// for (key, value) in &mut map {\n///     println!(\"Key: {}, Value: {}\", key, value);\n///     *value *= 2;\n/// }\n///\n/// let mut vec = map.iter().collect::<Vec<_>>();\n/// // The `Iter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(&\"a\", &2), (&\"b\", &4), (&\"c\", &6)]);\n/// ```\n",
  "code": [
    "fn into_iter(self) -> IterMut<'a, K, V> {",
    "    self.iter_mut()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}