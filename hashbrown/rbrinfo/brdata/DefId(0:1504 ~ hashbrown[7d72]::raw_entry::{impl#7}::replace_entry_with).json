{
  "name": "hashbrown::raw_entry::{impl#7}::replace_entry_with",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1280:5:1300:6",
  "doc": "/// Provides shared access to the key and owned access to the value of\n/// the entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n///\n/// let raw_entry = match map.raw_entry_mut().from_key(&\"a\") {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"a\");\n///         assert_eq!(v, 100);\n///         Some(v + 900)\n///     }),\n/// };\n/// let raw_entry = match raw_entry {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(o) => o.replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"a\");\n///         assert_eq!(v, 1000);\n///         None\n///     }),\n/// };\n/// match raw_entry {\n///     RawEntryMut::Vacant(_) => { },\n///     RawEntryMut::Occupied(_) => panic!(),\n/// };\n/// assert_eq!(map.get(&\"a\"), None);\n/// ```\n",
  "code": [
    "pub fn replace_entry_with<F>(self, f: F) -> RawEntryMut<'a, K, V, S, A>",
    "where",
    "    F: FnOnce(&K, V) -> Option<V>,",
    "{",
    "    unsafe {",
    "        let still_occupied = self",
    "            .table",
    "            .replace_bucket_with(self.elem.clone(), |(key, value)| {",
    "                f(&key, value).map(|new_value| (key, new_value))",
    "            });",
    "",
    "        if still_occupied {",
    "            RawEntryMut::Occupied(self)",
    "        } else {",
    "            RawEntryMut::Vacant(RawVacantEntryMut {",
    "                table: self.table,",
    "                hash_builder: self.hash_builder,",
    "            })",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "still_occupied",
          "norm": null,
          "value": "true",
          "line": 1291,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Occupied(self)",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "still_occupied",
          "norm": null,
          "value": "false",
          "line": 1291,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Vacant(RawVacantEntryMut {\n                    table: self.table,\n                    hash_builder: self.hash_builder,\n                })",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}