{
  "name": "hashbrown::map::{impl#45}::into_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3151:5:3155:6",
  "doc": "/// Creates a consuming iterator, that is, one that moves each key-value\n/// pair out of the map in arbitrary order. The map cannot be used after\n/// calling this.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let map: HashMap<_, _> = [(\"a\", 1), (\"b\", 2), (\"c\", 3)].into();\n///\n/// // Not possible with .iter()\n/// let mut vec: Vec<(&str, i32)> = map.into_iter().collect();\n/// // The `IntoIter` iterator produces items in arbitrary order, so\n/// // the items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(\"a\", 1), (\"b\", 2), (\"c\", 3)]);\n/// ```\n",
  "code": [
    "fn into_iter(self) -> IntoIter<K, V, A> {",
    "    IntoIter {",
    "        inner: self.table.into_iter(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IntoIter {\n            inner: self.table.into_iter(),\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}