{
  "name": "hashbrown::raw_entry::{impl#5}::from_hash",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:702:5:707:6",
  "doc": "/// Access an immutable entry by hash and matching function.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::HashMap;\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// let map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n/// let key = \"a\";\n/// let hash = compute_hash(map.hasher(), &key);\n/// assert_eq!(map.raw_entry().from_hash(hash, |k| k == &key), Some((&\"a\", &100)));\n/// ```\n",
  "code": [
    "pub fn from_hash<F>(self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>",
    "where",
    "    F: FnMut(&K) -> bool,",
    "{",
    "    self.search(hash, is_match)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}