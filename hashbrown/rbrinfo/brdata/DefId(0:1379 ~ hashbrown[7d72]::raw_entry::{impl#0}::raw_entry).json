{
  "name": "hashbrown::raw_entry::{impl#0}::raw_entry",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:156:5:158:6",
  "doc": "/// Creates a raw immutable entry builder for the `HashMap`.\n///\n/// Raw entries provide the lowest level of control for searching and\n/// manipulating a map. They must be manually initialized with a hash and\n/// then manually searched.\n///\n/// This is useful for\n/// * Hash memoization\n/// * Using a search key that doesn't work with the Borrow trait\n/// * Using custom comparison logic without newtype wrappers\n///\n/// Unless you are in such a situation, higher-level and more foolproof APIs like\n/// `get` should be preferred.\n///\n/// Immutable raw entries have very limited use; you might instead want `raw_entry_mut`.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.extend([(\"a\", 100), (\"b\", 200), (\"c\", 300)]);\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// for k in [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"] {\n///     let hash = compute_hash(map.hasher(), k);\n///     let v = map.get(&k).cloned();\n///     let kv = v.as_ref().map(|v| (&k, v));\n///\n///     println!(\"Key: {} and value: {:?}\", k, v);\n///\n///     assert_eq!(map.raw_entry().from_key(&k), kv);\n///     assert_eq!(map.raw_entry().from_hash(hash, |q| *q == k), kv);\n///     assert_eq!(map.raw_entry().from_key_hashed_nocheck(hash, &k), kv);\n/// }\n/// ```\n",
  "code": [
    "pub fn raw_entry(&self) -> RawEntryBuilder<'_, K, V, S, A> {",
    "    RawEntryBuilder { map: self }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "RawEntryBuilder { map: self }",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}