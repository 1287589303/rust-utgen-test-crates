{
  "name": "hashbrown::raw::{impl#8}::insert_in_slot",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1147:5:1154:6",
  "doc": "/// Inserts a new element into the table in the given slot, and returns its\n/// raw bucket.\n///\n/// # Safety\n///\n/// `slot` must point to a slot previously returned by\n/// `find_or_find_insert_slot`, and no mutation of the table must have\n/// occurred since that call.\n",
  "code": [
    "pub unsafe fn insert_in_slot(&mut self, hash: u64, slot: InsertSlot, value: T) -> Bucket<T> {",
    "    let old_ctrl = *self.table.ctrl(slot.index);",
    "    self.table.record_item_insert_at(slot.index, old_ctrl, hash);",
    "",
    "    let bucket = self.bucket(slot.index);",
    "    bucket.write(value);",
    "    bucket",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "bucket",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}