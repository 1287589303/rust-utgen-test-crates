{
  "name": "hashbrown::map::{impl#2}::with_capacity_in",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:415:5:417:6",
  "doc": "/// Creates an empty `HashMap` with the specified capacity using the given allocator.\n///\n/// The hash map will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash map will not allocate.\n///\n/// # HashDoS resistance\n///\n/// The `hash_builder` normally use a fixed key by default and that does\n/// not allow the `HashMap` to be protected against attacks such as [`HashDoS`].\n/// Users who require HashDoS resistance should explicitly use\n/// [`std::collections::hash_map::RandomState`]\n/// as the hasher when creating a [`HashMap`], for example with\n/// [`with_capacity_and_hasher_in`](HashMap::with_capacity_and_hasher_in) method.\n///\n/// [`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n/// [`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use bumpalo::Bump;\n///\n/// let bump = Bump::new();\n/// let mut map = HashMap::with_capacity_in(5, &bump);\n///\n/// // The created HashMap holds none elements\n/// assert_eq!(map.len(), 0);\n/// // But it can hold at least 5 elements without reallocating\n/// let empty_map_capacity = map.capacity();\n/// assert!(empty_map_capacity >= 5);\n///\n/// // Now we insert some 5 elements inside created HashMap\n/// map.insert(\"One\",   1);\n/// map.insert(\"Two\",   2);\n/// map.insert(\"Three\", 3);\n/// map.insert(\"Four\",  4);\n/// map.insert(\"Five\",  5);\n///\n/// // We can see that the HashMap holds 5 elements\n/// assert_eq!(map.len(), 5);\n/// // But its capacity isn't changed\n/// assert_eq!(map.capacity(), empty_map_capacity)\n/// ```\n",
  "code": [
    "pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {",
    "    Self::with_capacity_and_hasher_in(capacity, DefaultHashBuilder::default(), alloc)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}