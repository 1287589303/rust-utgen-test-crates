{
  "name": "hashbrown::table::{impl#9}::and_modify",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1486:5:1494:6",
  "doc": "/// Provides in-place mutable access to an occupied entry before any\n/// potential inserts into the table.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// table\n///     .entry(\n///         hasher(&\"poneyland\"),\n///         |&(x, _)| x == \"poneyland\",\n///         |(k, _)| hasher(&k),\n///     )\n///     .and_modify(|(_, v)| *v += 1)\n///     .or_insert((\"poneyland\", 42));\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(k, _)| k == \"poneyland\"),\n///     Some(&(\"poneyland\", 42))\n/// );\n///\n/// table\n///     .entry(\n///         hasher(&\"poneyland\"),\n///         |&(x, _)| x == \"poneyland\",\n///         |(k, _)| hasher(&k),\n///     )\n///     .and_modify(|(_, v)| *v += 1)\n///     .or_insert((\"poneyland\", 42));\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&(k, _)| k == \"poneyland\"),\n///     Some(&(\"poneyland\", 43))\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn and_modify(self, f: impl FnOnce(&mut T)) -> Self {",
    "    match self {",
    "        Entry::Occupied(mut entry) => {",
    "            f(entry.get_mut());",
    "            Entry::Occupied(entry)",
    "        }",
    "        Entry::Vacant(entry) => Entry::Vacant(entry),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 1487,
          "bound": null
        }
      ],
      "ret": "Entry::Vacant(entry)",
      "path": [
        0,
        3,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 1487,
          "bound": null
        },
        {
          "cond": "self matches Entry::Occupied(mut entry)",
          "norm": null,
          "value": "true",
          "line": 1487,
          "bound": null
        }
      ],
      "ret": "Entry::Occupied(entry)",
      "path": [
        0,
        2,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}