{
  "name": "hashbrown::table::{impl#1}::get_many_unchecked_mut",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1105:5:1111:6",
  "doc": "/// Attempts to get mutable references to `N` values in the map at once, without validating that\n/// the values are unique.\n///\n/// The `eq` argument should be a closure such that `eq(i, k)` returns true if `k` is equal to\n/// the `i`th key to be looked up.\n///\n/// Returns an array of length `N` with the results of each query. `None` will be returned if\n/// any of the keys are missing.\n///\n/// For a safe alternative see [`get_many_mut`](`HashTable::get_many_mut`).\n///\n/// # Safety\n///\n/// Calling this method with overlapping keys is *[undefined behavior]* even if the resulting\n/// references are not used.\n///\n/// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut libraries: HashTable<(&str, u32)> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// for (k, v) in [\n///     (\"Bodleian Library\", 1602),\n///     (\"Athenæum\", 1807),\n///     (\"Herzogin-Anna-Amalia-Bibliothek\", 1691),\n///     (\"Library of Congress\", 1800),\n/// ] {\n///     libraries.insert_unique(hasher(&k), (k, v), |(k, _)| hasher(&k));\n/// }\n///\n/// let keys = [\"Athenæum\", \"Library of Congress\"];\n/// let got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\n/// assert_eq!(\n///     got,\n///     [Some(&mut (\"Athenæum\", 1807)), Some(&mut (\"Library of Congress\", 1800))],\n/// );\n///\n/// // Missing keys result in None\n/// let keys = [\"Athenæum\", \"New York Public Library\"];\n/// let got = libraries.get_many_mut(keys.map(|k| hasher(&k)), |i, val| keys[i] == val.0);\n/// assert_eq!(got, [Some(&mut (\"Athenæum\", 1807)), None]);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub unsafe fn get_many_unchecked_mut<const N: usize>(",
    "    &mut self,",
    "    hashes: [u64; N],",
    "    eq: impl FnMut(usize, &T) -> bool,",
    ") -> [Option<&'_ mut T>; N] {",
    "    self.raw.get_many_unchecked_mut(hashes, eq)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}