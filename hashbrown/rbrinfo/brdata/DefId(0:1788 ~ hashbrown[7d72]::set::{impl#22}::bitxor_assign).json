{
  "name": "hashbrown::set::{impl#22}::bitxor_assign",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1586:5:1600:6",
  "doc": "/// Modifies this set to contain the symmetric difference of `self` and `rhs`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n///\n/// a ^= &b;\n///\n/// let mut i = 0;\n/// let expected = [1, 2, 4, 5];\n/// for x in &a {\n///     assert!(expected.contains(x));\n///     i += 1;\n/// }\n/// assert_eq!(i, expected.len());\n/// ```\n",
  "code": [
    "fn bitxor_assign(&mut self, rhs: &HashSet<T, S, A>) {",
    "    for item in rhs {",
    "        let hash = make_hash(&self.map.hash_builder, item);",
    "        match self.map.find_or_find_insert_slot(hash, item) {",
    "            Ok(bucket) => unsafe {",
    "                self.map.table.remove(bucket);",
    "            },",
    "            Err(slot) => unsafe {",
    "                self.map",
    "                    .table",
    "                    .insert_in_slot(hash, slot, (item.clone(), ()));",
    "            },",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 2,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "item in rhs",
          "norm": null,
          "value": "true",
          "line": 1587,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, item) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 1589,
          "bound": null
        },
        {
          "cond": "item in rhs",
          "norm": null,
          "value": "false",
          "line": 1587,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        10,
        13,
        17,
        18,
        19,
        20,
        2,
        3,
        4,
        6,
        8
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "item in rhs",
          "norm": null,
          "value": "true",
          "line": 1587,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, item) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1589,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, item) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1589,
          "bound": null
        },
        {
          "cond": "item in rhs",
          "norm": null,
          "value": "false",
          "line": 1587,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        7,
        9,
        10,
        12,
        14,
        15,
        16,
        20,
        2,
        3,
        4,
        6,
        8
      ],
      "may_contra": true,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "item in rhs",
          "norm": null,
          "value": "false",
          "line": 1587,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        6,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}