{
  "name": "hashbrown::table::{impl#1}::drain",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:903:5:907:6",
  "doc": "/// Clears the set, returning all elements in an iterator.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// for x in 1..=3 {\n///     table.insert_unique(hasher(&x), x, hasher);\n/// }\n/// assert!(!table.is_empty());\n///\n/// // print 1, 2, 3 in an arbitrary order\n/// for i in table.drain() {\n///     println!(\"{}\", i);\n/// }\n///\n/// assert!(table.is_empty());\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn drain(&mut self) -> Drain<'_, T, A> {",
    "    Drain {",
    "        inner: self.raw.drain(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Drain {\n            inner: self.raw.drain(),\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}