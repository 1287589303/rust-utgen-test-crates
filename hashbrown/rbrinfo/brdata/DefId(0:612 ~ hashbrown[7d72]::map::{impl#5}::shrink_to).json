{
  "name": "hashbrown::map::{impl#5}::shrink_to",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1204:5:1207:6",
  "doc": "/// Shrinks the capacity of the map with a lower limit. It will drop\n/// down no lower than the supplied limit while maintaining the internal rules\n/// and possibly leaving some space in accordance with the resize policy.\n///\n/// This function does nothing if the current capacity is smaller than the\n/// supplied minimum capacity.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<i32, i32> = HashMap::with_capacity(100);\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n/// assert!(map.capacity() >= 100);\n/// map.shrink_to(10);\n/// assert!(map.capacity() >= 10);\n/// map.shrink_to(0);\n/// assert!(map.capacity() >= 2);\n/// map.shrink_to(10);\n/// assert!(map.capacity() >= 2);\n/// ```\n",
  "code": [
    "pub fn shrink_to(&mut self, min_capacity: usize) {",
    "    self.table",
    "        .shrink_to(min_capacity, make_hasher::<_, V, S>(&self.hash_builder));",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}