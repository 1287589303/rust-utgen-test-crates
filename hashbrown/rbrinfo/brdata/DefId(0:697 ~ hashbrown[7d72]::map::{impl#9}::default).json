{
  "name": "hashbrown::map::{impl#9}::default",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:2070:5:2072:6",
  "doc": "/// Creates an empty `HashMap<K, V, S, A>`, with the `Default` value for the hasher and allocator.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use std::collections::hash_map::RandomState;\n///\n/// // You can specify all types of HashMap, including hasher and allocator.\n/// // Created map is empty and don't allocate memory\n/// let map: HashMap<u32, String> = Default::default();\n/// assert_eq!(map.capacity(), 0);\n/// let map: HashMap<u32, String, RandomState> = HashMap::default();\n/// assert_eq!(map.capacity(), 0);\n/// ```\n",
  "code": [
    "fn default() -> Self {",
    "    Self::with_hasher_in(Default::default(), Default::default())",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}