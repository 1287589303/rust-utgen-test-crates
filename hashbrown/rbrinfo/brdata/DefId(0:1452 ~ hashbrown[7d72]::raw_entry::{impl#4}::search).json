{
  "name": "hashbrown::raw_entry::{impl#4}::search",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": false,
  "loc": "src/raw_entry.rs:599:5:614:6",
  "doc": "",
  "code": [
    "fn search<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S, A>",
    "where",
    "    for<'b> F: FnMut(&'b K) -> bool,",
    "{",
    "    match self.map.table.find(hash, |(k, _)| is_match(k)) {",
    "        Some(elem) => RawEntryMut::Occupied(RawOccupiedEntryMut {",
    "            elem,",
    "            table: &mut self.map.table,",
    "            hash_builder: &self.map.hash_builder,",
    "        }),",
    "        None => RawEntryMut::Vacant(RawVacantEntryMut {",
    "            table: &mut self.map.table,",
    "            hash_builder: &self.map.hash_builder,",
    "        }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.table.find(hash, |(k, _)| is_match(k)) matches Some(elem)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        },
        {
          "cond": "self.map.table.find(hash, |(k, _)| is_match(k)) matches Some(elem)",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Occupied(RawOccupiedEntryMut {\n                elem,\n                table: &mut self.map.table,\n                hash_builder: &self.map.hash_builder,\n            })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.table.find(hash, |(k, _)| is_match(k)) matches None",
          "norm": null,
          "value": "true",
          "line": 603,
          "bound": null
        }
      ],
      "ret": "RawEntryMut::Vacant(RawVacantEntryMut {\n                table: &mut self.map.table,\n                hash_builder: &self.map.hash_builder,\n            })",
      "path": [
        0,
        1,
        4,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}