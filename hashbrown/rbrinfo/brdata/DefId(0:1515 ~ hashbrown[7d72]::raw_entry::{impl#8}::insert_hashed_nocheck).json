{
  "name": "hashbrown::raw_entry::{impl#8}::insert_hashed_nocheck",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1363:5:1374:6",
  "doc": "/// Sets the value of the entry with the `VacantEntry`'s key,\n/// and returns a mutable reference to it.\n///\n/// # Examples\n///\n/// ```\n/// use core::hash::{BuildHasher, Hash};\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// fn compute_hash<K: Hash + ?Sized, S: BuildHasher>(hash_builder: &S, key: &K) -> u64 {\n///     use core::hash::Hasher;\n///     let mut state = hash_builder.build_hasher();\n///     key.hash(&mut state);\n///     state.finish()\n/// }\n///\n/// let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n/// let key = \"c\";\n/// let hash = compute_hash(map.hasher(), &key);\n///\n/// match map.raw_entry_mut().from_key_hashed_nocheck(hash, &key) {\n///     RawEntryMut::Occupied(_) => panic!(),\n///     RawEntryMut::Vacant(v) => assert_eq!(\n///         v.insert_hashed_nocheck(hash, key, 300),\n///         (&mut \"c\", &mut 300)\n///     ),\n/// }\n///\n/// assert_eq!(map[&\"c\"], 300);\n/// ```\n",
  "code": [
    "pub fn insert_hashed_nocheck(self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)",
    "where",
    "    K: Hash,",
    "    S: BuildHasher,",
    "{",
    "    let &mut (ref mut k, ref mut v) = self.table.insert_entry(",
    "        hash,",
    "        (key, value),",
    "        make_hasher::<_, V, S>(self.hash_builder),",
    "    );",
    "    (k, v)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(k, v)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}