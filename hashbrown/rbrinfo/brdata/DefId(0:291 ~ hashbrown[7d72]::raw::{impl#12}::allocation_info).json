{
  "name": "hashbrown::raw::{impl#12}::allocation_info",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2975:5:2991:6",
  "doc": "/// Returns a pointer to the allocated memory and the layout that was used to\n/// allocate the table.\n///\n/// # Safety\n///\n/// Caller of this function must observe the following safety rules:\n///\n/// * The [`RawTableInner`] has already been allocated, otherwise\n///   calling this function results in [`undefined behavior`]\n///\n/// * The `table_layout` must be the same [`TableLayout`] as the `TableLayout`\n///   that was used to allocate this table. Failure to comply with this condition\n///   may result in [`undefined behavior`].\n///\n/// See also [`GlobalAlloc::dealloc`] or [`Allocator::deallocate`] for more  information.\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n/// [`GlobalAlloc::dealloc`]: https://doc.rust-lang.org/alloc/alloc/trait.GlobalAlloc.html#tymethod.dealloc\n/// [`Allocator::deallocate`]: https://doc.rust-lang.org/alloc/alloc/trait.Allocator.html#tymethod.deallocate\n",
  "code": [
    "unsafe fn allocation_info(&self, table_layout: TableLayout) -> (NonNull<u8>, Layout) {",
    "    debug_assert!(",
    "        !self.is_empty_singleton(),",
    "        \"this function can only be called on non-empty tables\"",
    "    );",
    "",
    "    // Avoid `Option::unwrap_or_else` because it bloats LLVM IR.",
    "    let (layout, ctrl_offset) = match table_layout.calculate_layout_for(self.buckets()) {",
    "        Some(lco) => lco,",
    "        None => unsafe { hint::unreachable_unchecked() },",
    "    };",
    "    (",
    "        // SAFETY: The caller must uphold the safety contract for `allocation_info` method.",
    "        unsafe { NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)) },",
    "        layout,",
    "    )",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_empty_singleton()",
          "norm": null,
          "value": "true",
          "line": 2977,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_empty_singleton()",
          "norm": null,
          "value": "false",
          "line": 2977,
          "bound": null
        },
        {
          "cond": "table_layout.calculate_layout_for(self.buckets()) matches Some(lco)",
          "norm": null,
          "value": "true",
          "line": 2982,
          "bound": null
        },
        {
          "cond": "table_layout.calculate_layout_for(self.buckets()) matches Some(lco)",
          "norm": null,
          "value": "true",
          "line": 2982,
          "bound": null
        }
      ],
      "ret": "(\n            // SAFETY: The caller must uphold the safety contract for `allocation_info` method.\n            unsafe { NonNull::new_unchecked(self.ctrl.as_ptr().sub(ctrl_offset)) },\n            layout,\n        )",
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        11,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.is_empty_singleton()",
          "norm": null,
          "value": "false",
          "line": 2977,
          "bound": null
        },
        {
          "cond": "table_layout.calculate_layout_for(self.buckets()) matches None",
          "norm": null,
          "value": "true",
          "line": 2982,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        7,
        8,
        9,
        12,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}