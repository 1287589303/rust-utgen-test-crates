{
  "name": "hashbrown::table::{impl#13}::get",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1658:5:1660:6",
  "doc": "/// Gets a reference to the value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&\"poneyland\"), \"poneyland\", hasher);\n///\n/// match table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n///     Entry::Vacant(_) => panic!(),\n///     Entry::Occupied(entry) => assert_eq!(entry.get(), &\"poneyland\"),\n/// }\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn get(&self) -> &T {",
    "    unsafe { self.bucket.as_ref() }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.bucket.as_ref()",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}