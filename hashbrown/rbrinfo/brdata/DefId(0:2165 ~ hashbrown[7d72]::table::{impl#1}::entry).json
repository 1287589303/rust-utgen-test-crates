{
  "name": "hashbrown::table::{impl#1}::entry",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:359:5:377:6",
  "doc": "/// Returns an `Entry` for an entry in the table with the given hash\n/// and which satisfies the equality function passed.\n///\n/// This can be used to remove the entry from the table, or insert a new\n/// entry with the given hash if one doesn't already exist.\n///\n/// This method will call `eq` for all entries with the given hash, but may\n/// also call it for entries with a different hash. `eq` should only return\n/// true for the desired entry, at which point the search is stopped.\n///\n/// This method may grow the table in preparation for an insertion. Call\n/// [`HashTable::find_entry`] if this is undesirable.\n///\n/// `hasher` is called if entries need to be moved or copied to a new table.\n/// This must return the same hash value that each entry was inserted with.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\n/// if let Entry::Occupied(entry) = table.entry(hasher(&1), |val| val.0 == 1, |val| hasher(&val.0))\n/// {\n///     entry.remove();\n/// }\n/// if let Entry::Vacant(entry) = table.entry(hasher(&2), |val| val.0 == 2, |val| hasher(&val.0)) {\n///     entry.insert((2, \"b\"));\n/// }\n/// assert_eq!(table.find(hasher(&1), |val| val.0 == 1), None);\n/// assert_eq!(table.find(hasher(&2), |val| val.0 == 2), Some(&(2, \"b\")));\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn entry(",
    "    &mut self,",
    "    hash: u64,",
    "    eq: impl FnMut(&T) -> bool,",
    "    hasher: impl Fn(&T) -> u64,",
    ") -> Entry<'_, T, A> {",
    "    match self.raw.find_or_find_insert_slot(hash, eq, hasher) {",
    "        Ok(bucket) => Entry::Occupied(OccupiedEntry {",
    "            hash,",
    "            bucket,",
    "            table: self,",
    "        }),",
    "        Err(insert_slot) => Entry::Vacant(VacantEntry {",
    "            hash,",
    "            insert_slot,",
    "            table: self,",
    "        }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.raw.find_or_find_insert_slot(hash, eq, hasher) matches Err(insert_slot)",
          "norm": null,
          "value": "true",
          "line": 365,
          "bound": null
        }
      ],
      "ret": "Entry::Vacant(VacantEntry {\n                hash,\n                insert_slot,\n                table: self,\n            })",
      "path": [
        0,
        1,
        4,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.raw.find_or_find_insert_slot(hash, eq, hasher) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 365,
          "bound": null
        },
        {
          "cond": "self.raw.find_or_find_insert_slot(hash, eq, hasher) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 365,
          "bound": null
        }
      ],
      "ret": "Entry::Occupied(OccupiedEntry {\n                hash,\n                bucket,\n                table: self,\n            })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}