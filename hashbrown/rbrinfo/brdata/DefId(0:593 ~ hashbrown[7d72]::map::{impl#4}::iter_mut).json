{
  "name": "hashbrown::map::{impl#4}::iter_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:799:5:807:6",
  "doc": "/// An iterator visiting all key-value pairs in arbitrary order,\n/// with mutable references to the values.\n/// The iterator element type is `(&'a K, &'a mut V)`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(\"a\", 1);\n/// map.insert(\"b\", 2);\n/// map.insert(\"c\", 3);\n///\n/// // Update all values\n/// for (_, val) in map.iter_mut() {\n///     *val *= 2;\n/// }\n///\n/// assert_eq!(map.len(), 3);\n/// let mut vec: Vec<(&str, i32)> = Vec::new();\n///\n/// for (key, val) in &map {\n///     println!(\"key: {} val: {}\", key, val);\n///     vec.push((*key, *val));\n/// }\n///\n/// // The `Iter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(\"a\", 2), (\"b\", 4), (\"c\", 6)]);\n///\n/// assert_eq!(map.len(), 3);\n/// ```\n",
  "code": [
    "pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {",
    "    // Here we tie the lifetime of self to the iter.",
    "    unsafe {",
    "        IterMut {",
    "            inner: self.table.iter(),",
    "            marker: PhantomData,",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IterMut {\n                inner: self.table.iter(),\n                marker: PhantomData,\n            }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}