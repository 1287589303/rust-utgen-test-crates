{
  "name": "hashbrown::table::{impl#13}::remove",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1619:5:1629:6",
  "doc": "/// Takes the value out of the entry, and returns it along with a\n/// `VacantEntry` that can be used to insert another value with the same\n/// hash as the one that was just removed.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// // The table is empty\n/// assert!(table.is_empty() && table.capacity() == 0);\n///\n/// table.insert_unique(hasher(&\"poneyland\"), \"poneyland\", hasher);\n/// let capacity_before_remove = table.capacity();\n///\n/// if let Entry::Occupied(o) = table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n///     assert_eq!(o.remove().0, \"poneyland\");\n/// }\n///\n/// assert!(table\n///     .find(hasher(&\"poneyland\"), |&x| x == \"poneyland\")\n///     .is_none());\n/// // Now table hold none elements but capacity is equal to the old one\n/// assert!(table.len() == 0 && table.capacity() == capacity_before_remove);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn remove(self) -> (T, VacantEntry<'a, T, A>) {",
    "    let (val, slot) = unsafe { self.table.raw.remove(self.bucket) };",
    "    (",
    "        val,",
    "        VacantEntry {",
    "            hash: self.hash,",
    "            insert_slot: slot,",
    "            table: self.table,",
    "        },",
    "    )",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(\n            val,\n            VacantEntry {\n                hash: self.hash,\n                insert_slot: slot,\n                table: self.table,\n            },\n        )",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}