{
  "name": "hashbrown::map::{impl#5}::try_reserve",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1153:5:1156:6",
  "doc": "/// Tries to reserve capacity for at least `additional` more elements to be inserted\n/// in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// # Errors\n///\n/// If the capacity overflows, or the allocator reports a failure, then an error\n/// is returned.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<&str, isize> = HashMap::new();\n/// // Map is empty and doesn't allocate memory\n/// assert_eq!(map.capacity(), 0);\n///\n/// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n///\n/// // And now map can hold at least 10 elements\n/// assert!(map.capacity() >= 10);\n/// ```\n/// If the capacity overflows, or the allocator reports a failure, then an error\n/// is returned:\n/// ```\n/// # fn test() {\n/// use hashbrown::HashMap;\n/// use hashbrown::TryReserveError;\n/// let mut map: HashMap<i32, i32> = HashMap::new();\n///\n/// match map.try_reserve(usize::MAX) {\n///     Err(error) => match error {\n///         TryReserveError::CapacityOverflow => {}\n///         _ => panic!(\"TryReserveError::AllocError ?\"),\n///     },\n///     _ => panic!(),\n/// }\n/// # }\n/// # fn main() {\n/// #     #[cfg(not(miri))]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {",
    "    self.table",
    "        .try_reserve(additional, make_hasher::<_, V, S>(&self.hash_builder))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}