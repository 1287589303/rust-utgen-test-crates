{
  "name": "hashbrown::raw::{impl#12}::bucket_ptr",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2250:5:2255:6",
  "doc": "/// Returns a raw `*mut u8` pointer to the start of the `data` element in the table\n/// (convenience for `self.data_end::<u8>().as_ptr().sub((index + 1) * size_of)`).\n///\n/// The caller must ensure that the `RawTableInner` outlives the returned `*mut u8`,\n/// otherwise using it may result in [`undefined behavior`].\n///\n/// # Safety\n///\n/// If any of the following conditions are violated, the result is [`undefined behavior`]:\n///\n/// * The table must already be allocated;\n///\n/// * The `index` must not be greater than the number returned by the [`RawTableInner::buckets`]\n///   function, i.e. `(index + 1) <= self.buckets()`;\n///\n/// * The `size_of` must be equal to the size of the elements stored in the table;\n///\n/// ```none\n/// If mem::size_of::<T>() != 0 then return a pointer to the `element` in the `data part` of the table\n/// (we start counting from \"0\", so that in the expression T[n], the \"n\" index actually one less than\n/// the \"buckets\" number of our `RawTableInner`, i.e. \"n = RawTableInner::buckets() - 1\"):\n///\n///           `table.bucket_ptr(3, mem::size_of::<T>())` returns a pointer that points here in the\n///           `data` part of the `RawTableInner`, i.e. to the start of T3\n///                  |\n///                  |               `base = table.data_end::<u8>()` points here\n///                  |               (to the start of CT0 or to the end of T0)\n///                  v                 v\n/// [Pad], T_n, ..., |T3|, T2, T1, T0, |CT0, CT1, CT2, CT3, ..., CT_n, CTa_0, CTa_1, ..., CTa_m\n///                                                                    \\__________  __________/\n///                                                                               \\/\n///                                                                    additional control bytes\n///                                                                     `m = Group::WIDTH - 1`\n///\n/// where: T0...T_n  - our stored data;\n///        CT0...CT_n - control bytes or metadata for `data`;\n///        CTa_0...CTa_m - additional control bytes (so that the search with loading `Group` bytes from\n///                        the heap works properly, even if the result of `h1(hash) & self.bucket_mask`\n///                        is equal to `self.bucket_mask`). See also `RawTableInner::set_ctrl` function.\n///\n/// P.S. `h1(hash) & self.bucket_mask` is the same as `hash as usize % self.buckets()` because the number\n/// of buckets is a power of two, and `self.bucket_mask = self.buckets() - 1`.\n/// ```\n///\n/// [`RawTableInner::buckets`]: RawTableInner::buckets\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn bucket_ptr(&self, index: usize, size_of: usize) -> *mut u8 {",
    "    debug_assert_ne!(self.bucket_mask, 0);",
    "    debug_assert!(index < self.buckets());",
    "    let base: *mut u8 = self.data_end().as_ptr();",
    "    base.sub((index + 1) * size_of)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        17
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "index < self.buckets()",
          "norm": null,
          "value": "true",
          "line": 2252,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13,
        14,
        15,
        16
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "index < self.buckets()",
          "norm": null,
          "value": "false",
          "line": 2252,
          "bound": "index == self.buckets()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        17
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}