{
  "name": "hashbrown::raw_entry::{impl#6}::or_insert_with",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:783:5:796:6",
  "doc": "/// Ensures a value is in the entry by inserting the result of the default function if empty,\n/// and returns mutable references to the key and value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<&str, String> = HashMap::new();\n///\n/// map.raw_entry_mut().from_key(\"poneyland\").or_insert_with(|| {\n///     (\"poneyland\", \"hoho\".to_string())\n/// });\n///\n/// assert_eq!(map[\"poneyland\"], \"hoho\".to_string());\n/// ```\n",
  "code": [
    "pub fn or_insert_with<F>(self, default: F) -> (&'a mut K, &'a mut V)",
    "where",
    "    F: FnOnce() -> (K, V),",
    "    K: Hash,",
    "    S: BuildHasher,",
    "{",
    "    match self {",
    "        RawEntryMut::Occupied(entry) => entry.into_key_value(),",
    "        RawEntryMut::Vacant(entry) => {",
    "            let (k, v) = default();",
    "            entry.insert(k, v)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches RawEntryMut::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        6,
        7,
        8,
        9,
        10,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches RawEntryMut::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        },
        {
          "cond": "self matches RawEntryMut::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 789,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        11,
        12
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}