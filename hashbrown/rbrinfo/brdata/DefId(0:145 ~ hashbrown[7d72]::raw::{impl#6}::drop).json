{
  "name": "hashbrown::raw::{impl#6}::drop",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:469:5:471:6",
  "doc": "/// Executes the destructor (if any) of the pointed-to `data`.\n///\n/// # Safety\n///\n/// See [`ptr::drop_in_place`] for safety concerns.\n///\n/// You should use [`RawTable::erase`] instead of this function,\n/// or be careful with calling this function directly, because for\n/// properly dropping the data we need also clear `data` control bytes.\n/// If we drop data, but do not erase `data control byte` it leads to\n/// double drop when [`RawTable`] goes out of scope.\n///\n/// [`ptr::drop_in_place`]: https://doc.rust-lang.org/core/ptr/fn.drop_in_place.html\n/// [`RawTable`]: crate::raw::RawTable\n/// [`RawTable::erase`]: crate::raw::RawTable::erase\n",
  "code": [
    "pub(crate) unsafe fn drop(&self) {",
    "    self.as_ptr().drop_in_place();",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}