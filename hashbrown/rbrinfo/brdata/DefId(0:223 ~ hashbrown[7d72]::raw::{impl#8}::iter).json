{
  "name": "hashbrown::raw::{impl#8}::iter",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1290:5:1296:6",
  "doc": "/// Returns an iterator over every element in the table. It is up to\n/// the caller to ensure that the `RawTable` outlives the `RawIter`.\n/// Because we cannot make the `next` method unsafe on the `RawIter`\n/// struct, we have to make the `iter` method unsafe.\n",
  "code": [
    "pub unsafe fn iter(&self) -> RawIter<T> {",
    "    // SAFETY:",
    "    // 1. The caller must uphold the safety contract for `iter` method.",
    "    // 2. The [`RawTableInner`] must already have properly initialized control bytes since",
    "    //    we will never expose RawTable::new_uninitialized in a public API.",
    "    self.table.iter()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}