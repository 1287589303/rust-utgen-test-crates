{
  "name": "hashbrown::table::{impl#1}::iter_hash",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:776:5:781:6",
  "doc": "/// An iterator visiting all elements which may match a hash.\n/// The iterator element type is `&'a T`.\n///\n/// This iterator may return elements from the table that have a hash value\n/// different than the one provided. You should always validate the returned\n/// values before using them.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&\"a\"), \"a\", hasher);\n/// table.insert_unique(hasher(&\"a\"), \"b\", hasher);\n/// table.insert_unique(hasher(&\"b\"), \"c\", hasher);\n///\n/// // Will print \"a\" and \"b\" (and possibly \"c\") in an arbitrary order.\n/// for x in table.iter_hash(hasher(&\"a\")) {\n///     println!(\"{}\", x);\n/// }\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn iter_hash(&self, hash: u64) -> IterHash<'_, T> {",
    "    IterHash {",
    "        inner: unsafe { self.raw.iter_hash(hash) },",
    "        marker: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IterHash {\n            inner: unsafe { self.raw.iter_hash(hash) },\n            marker: PhantomData,\n        }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}