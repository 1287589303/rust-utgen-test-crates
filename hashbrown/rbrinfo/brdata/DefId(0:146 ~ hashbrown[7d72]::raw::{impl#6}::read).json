{
  "name": "hashbrown::raw::{impl#6}::read",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:490:5:492:6",
  "doc": "/// Reads the `value` from `self` without moving it. This leaves the\n/// memory in `self` unchanged.\n///\n/// # Safety\n///\n/// See [`ptr::read`] for safety concerns.\n///\n/// You should use [`RawTable::remove`] instead of this function,\n/// or be careful with calling this function directly, because compiler\n/// calls its destructor when the read `value` goes out of scope. It\n/// can cause double dropping when [`RawTable`] goes out of scope,\n/// because of not erased `data control byte`.\n///\n/// [`ptr::read`]: https://doc.rust-lang.org/core/ptr/fn.read.html\n/// [`RawTable`]: crate::raw::RawTable\n/// [`RawTable::remove`]: crate::raw::RawTable::remove\n",
  "code": [
    "pub(crate) unsafe fn read(&self) -> T {",
    "    self.as_ptr().read()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}