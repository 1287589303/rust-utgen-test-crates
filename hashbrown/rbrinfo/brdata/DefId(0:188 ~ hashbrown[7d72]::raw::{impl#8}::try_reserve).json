{
  "name": "hashbrown::raw::{impl#8}::try_reserve",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:918:5:930:6",
  "doc": "/// Tries to ensure that at least `additional` items can be inserted into\n/// the table without reallocation.\n",
  "code": [
    "pub fn try_reserve(",
    "    &mut self,",
    "    additional: usize,",
    "    hasher: impl Fn(&T) -> u64,",
    ") -> Result<(), TryReserveError> {",
    "    if additional > self.table.growth_left {",
    "        // SAFETY: The [`RawTableInner`] must already have properly initialized control",
    "        // bytes since we will never expose RawTable::new_uninitialized in a public API.",
    "        unsafe { self.reserve_rehash(additional, hasher, Fallibility::Fallible) }",
    "    } else {",
    "        Ok(())",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "additional > self.table.growth_left",
          "norm": null,
          "value": "true",
          "line": 923,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "additional > self.table.growth_left",
          "norm": null,
          "value": "false",
          "line": 923,
          "bound": "additional == self.table.growth_left"
        }
      ],
      "ret": "Ok(())",
      "path": [
        0,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}