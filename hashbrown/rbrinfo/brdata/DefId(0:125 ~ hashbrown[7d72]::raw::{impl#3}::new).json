{
  "name": "hashbrown::raw::{impl#3}::new",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:151:5:161:6",
  "doc": "",
  "code": [
    "const fn new<T>() -> Self {",
    "    let layout = Layout::new::<T>();",
    "    Self {",
    "        size: layout.size(),",
    "        ctrl_align: if layout.align() > Group::WIDTH {",
    "            layout.align()",
    "        } else {",
    "            Group::WIDTH",
    "        },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "layout.align() > Group::WIDTH",
          "norm": "Group::WIDTH < layout.align()",
          "value": "true",
          "line": 155,
          "bound": null
        }
      ],
      "ret": "Self {\n            size: layout.size(),\n            ctrl_align: if layout.align() > Group::WIDTH {\n                layout.align()\n            } else {\n                Group::WIDTH\n            },\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "layout.align() > Group::WIDTH",
          "norm": "Group::WIDTH < layout.align()",
          "value": "false",
          "line": 155,
          "bound": "layout.align() == Group::WIDTH"
        }
      ],
      "ret": "Self {\n            size: layout.size(),\n            ctrl_align: if layout.align() > Group::WIDTH {\n                layout.align()\n            } else {\n                Group::WIDTH\n            },\n        }",
      "path": [
        0,
        1,
        2,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}