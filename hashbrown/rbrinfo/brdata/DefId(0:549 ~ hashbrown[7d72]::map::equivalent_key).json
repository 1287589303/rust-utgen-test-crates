{
  "name": "hashbrown::map::equivalent_key",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:220:1:225:2",
  "doc": "/// Ensures that a single closure type across uses of this which, in turn prevents multiple\n/// instances of any functions like `RawTable::reserve` from being generated\n",
  "code": [
    "pub(crate) fn equivalent_key<Q, K, V>(k: &Q) -> impl Fn(&(K, V)) -> bool + '_",
    "where",
    "    Q: Equivalent<K> + ?Sized,",
    "{",
    "    move |x| k.equivalent(&x.0)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "move |x| k.equivalent(&x.0)",
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}