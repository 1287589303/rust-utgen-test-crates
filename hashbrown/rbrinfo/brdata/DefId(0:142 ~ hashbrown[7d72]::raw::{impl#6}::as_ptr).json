{
  "name": "hashbrown::raw::{impl#6}::as_ptr",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:386:5:394:6",
  "doc": "/// Acquires the underlying raw pointer `*mut T` to `data`.\n///\n/// # Note\n///\n/// If `T` is not [`Copy`], do not use `*mut T` methods that can cause calling the\n/// destructor of `T` (for example the [`<*mut T>::drop_in_place`] method), because\n/// for properly dropping the data we also need to clear `data` control bytes. If we\n/// drop data, but do not clear `data control byte` it leads to double drop when\n/// [`RawTable`] goes out of scope.\n///\n/// If you modify an already initialized `value`, so [`Hash`] and [`Eq`] on the new\n/// `T` value and its borrowed form *must* match those for the old `T` value, as the map\n/// will not re-evaluate where the new value should go, meaning the value may become\n/// \"lost\" if their location does not reflect their state.\n///\n/// [`RawTable`]: crate::raw::RawTable\n/// [`<*mut T>::drop_in_place`]: https://doc.rust-lang.org/core/primitive.pointer.html#method.drop_in_place\n/// [`Hash`]: https://doc.rust-lang.org/core/hash/trait.Hash.html\n/// [`Eq`]: https://doc.rust-lang.org/core/cmp/trait.Eq.html\n",
  "code": [
    "pub fn as_ptr(&self) -> *mut T {",
    "    if T::IS_ZERO_SIZED {",
    "        // Just return an arbitrary ZST pointer which is properly aligned",
    "        // invalid pointer is good enough for ZST",
    "        invalid_mut(mem::align_of::<T>())",
    "    } else {",
    "        unsafe { self.ptr.as_ptr().sub(1) }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "true",
          "line": 387,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "false",
          "line": 387,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}