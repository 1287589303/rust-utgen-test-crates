{
  "name": "hashbrown::raw_entry::{impl#7}::get_mut",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1050:5:1052:6",
  "doc": "/// Gets a mutable reference to the value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// let mut map: HashMap<&str, u32> = [(\"a\", 100), (\"b\", 200)].into();\n///\n/// match map.raw_entry_mut().from_key(&\"a\") {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(mut o) => *o.get_mut() += 900,\n/// }\n///\n/// assert_eq!(map[&\"a\"], 1000);\n/// ```\n",
  "code": [
    "pub fn get_mut(&mut self) -> &mut V {",
    "    unsafe { &mut self.elem.as_mut().1 }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { &mut self.elem.as_mut().1 }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}