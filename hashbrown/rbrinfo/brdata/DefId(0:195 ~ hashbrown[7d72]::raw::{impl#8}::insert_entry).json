{
  "name": "hashbrown::raw::{impl#8}::insert_entry",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1053:5:1055:6",
  "doc": "/// Inserts a new element into the table, and returns a mutable reference to it.\n///\n/// This does not check if the given element already exists in the table.\n",
  "code": [
    "pub fn insert_entry(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> &mut T {",
    "    unsafe { self.insert(hash, value, hasher).as_mut() }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { self.insert(hash, value, hasher).as_mut() }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}