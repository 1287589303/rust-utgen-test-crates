{
  "name": "hashbrown::set::{impl#6}::replace",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1140:5:1151:6",
  "doc": "/// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n/// one. Returns the replaced value.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set = HashSet::new();\n/// set.insert(Vec::<i32>::new());\n///\n/// assert_eq!(set.get(&[][..]).unwrap().capacity(), 0);\n/// set.replace(Vec::with_capacity(10));\n/// assert_eq!(set.get(&[][..]).unwrap().capacity(), 10);\n/// ```\n",
  "code": [
    "pub fn replace(&mut self, value: T) -> Option<T> {",
    "    let hash = make_hash(&self.map.hash_builder, &value);",
    "    match self.map.find_or_find_insert_slot(hash, &value) {",
    "        Ok(bucket) => Some(mem::replace(unsafe { &mut bucket.as_mut().0 }, value)),",
    "        Err(slot) => {",
    "            unsafe {",
    "                self.map.table.insert_in_slot(hash, slot, (value, ()));",
    "            }",
    "            None",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Err(slot)",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        5,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        },
        {
          "cond": "self.map.find_or_find_insert_slot(hash, &value) matches Ok(bucket)",
          "norm": null,
          "value": "true",
          "line": 1142,
          "bound": null
        }
      ],
      "ret": "Some(mem::replace(unsafe { &mut bucket.as_mut().0 }, value))",
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8,
        9,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}