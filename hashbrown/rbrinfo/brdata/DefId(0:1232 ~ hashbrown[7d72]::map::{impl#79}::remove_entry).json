{
  "name": "hashbrown::map::{impl#79}::remove_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3798:5:3800:6",
  "doc": "/// Take the ownership of the key and value from the map.\n/// Keeps the allocated memory for reuse.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::Entry;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// // The map is empty\n/// assert!(map.is_empty() && map.capacity() == 0);\n///\n/// map.entry(\"poneyland\").or_insert(12);\n///\n/// if let Entry::Occupied(o) = map.entry(\"poneyland\") {\n///     // We delete the entry from the map.\n///     assert_eq!(o.remove_entry(), (\"poneyland\", 12));\n/// }\n///\n/// assert_eq!(map.contains_key(\"poneyland\"), false);\n/// // Now map hold none elements\n/// assert!(map.is_empty());\n/// ```\n",
  "code": [
    "pub fn remove_entry(self) -> (K, V) {",
    "    unsafe { self.table.table.remove(self.elem).0 }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.table.table.remove(self.elem).0",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}