{
  "name": "hashbrown::raw::{impl#12}::prepare_resize",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2539:5:2570:6",
  "doc": "/// Attempts to allocate a new hash table with at least enough capacity\n/// for inserting the given number of elements without reallocating,\n/// and return it inside `ScopeGuard` to protect against panic in the hash\n/// function.\n///\n/// # Note\n///\n/// It is recommended (but not required):\n///\n/// * That the new table's `capacity` be greater than or equal to `self.items`.\n///\n/// * The `alloc` is the same [`Allocator`] as the `Allocator` used\n///   to allocate this table.\n///\n/// * The `table_layout` is the same [`TableLayout`] as the `TableLayout` used\n///   to allocate this table.\n///\n/// If `table_layout` does not match the `TableLayout` that was used to allocate\n/// this table, then using `mem::swap` with the `self` and the new table returned\n/// by this function results in [`undefined behavior`].\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "fn prepare_resize<'a, A>(",
    "    &self,",
    "    alloc: &'a A,",
    "    table_layout: TableLayout,",
    "    capacity: usize,",
    "    fallibility: Fallibility,",
    ") -> Result<crate::scopeguard::ScopeGuard<Self, impl FnMut(&mut Self) + 'a>, TryReserveError>",
    "where",
    "    A: Allocator,",
    "{",
    "    debug_assert!(self.items <= capacity);",
    "",
    "    // Allocate and initialize the new table.",
    "    let new_table =",
    "        RawTableInner::fallible_with_capacity(alloc, table_layout, capacity, fallibility)?;",
    "",
    "    // The hash function may panic, in which case we simply free the new",
    "    // table without dropping any elements that may have been copied into",
    "    // it.",
    "    //",
    "    // This guard is also used to free the old table on success, see",
    "    // the comment at the bottom of this function.",
    "    Ok(guard(new_table, move |self_| {",
    "        if !self_.is_empty_singleton() {",
    "            // SAFETY:",
    "            // 1. We have checked that our table is allocated.",
    "            // 2. We know for sure that the `alloc` and `table_layout` matches the",
    "            //    [`Allocator`] and [`TableLayout`] used to allocate this table.",
    "            unsafe { self_.free_buckets(alloc, table_layout) };",
    "        }",
    "    }))",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.items <= capacity",
          "norm": "capacity >= self.items",
          "value": "true",
          "line": 2549,
          "bound": "self.items == capacity"
        },
        {
          "cond": "RawTableInner::fallible_with_capacity(alloc, table_layout, capacity, fallibility)?",
          "norm": null,
          "value": "Err/None",
          "line": 2553,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        9,
        11,
        12,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.items <= capacity",
          "norm": "capacity >= self.items",
          "value": "true",
          "line": 2549,
          "bound": "self.items == capacity"
        },
        {
          "cond": "RawTableInner::fallible_with_capacity(alloc, table_layout, capacity, fallibility)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 2553,
          "bound": null
        }
      ],
      "ret": "Ok(guard(new_table, move |self_| {\n            if !self_.is_empty_singleton() {\n                // SAFETY:\n                // 1. We have checked that our table is allocated.\n                // 2. We know for sure that the `alloc` and `table_layout` matches the\n                //    [`Allocator`] and [`TableLayout`] used to allocate this table.\n                unsafe { self_.free_buckets(alloc, table_layout) };\n            }\n        }))",
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        10,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.items <= capacity",
          "norm": "capacity >= self.items",
          "value": "false",
          "line": 2549,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        16
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}