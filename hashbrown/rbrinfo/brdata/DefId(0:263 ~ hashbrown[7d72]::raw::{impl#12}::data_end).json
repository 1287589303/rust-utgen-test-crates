{
  "name": "hashbrown::raw::{impl#12}::data_end",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2293:5:2295:6",
  "doc": "/// Returns pointer to one past last `data` element in the table as viewed from\n/// the start point of the allocation (convenience for `self.ctrl.cast()`).\n///\n/// This function actually returns a pointer to the end of the `data element` at\n/// index \"0\" (zero).\n///\n/// The caller must ensure that the `RawTableInner` outlives the returned [`NonNull<T>`],\n/// otherwise using it may result in [`undefined behavior`].\n///\n/// # Note\n///\n/// The type `T` must be the actual type of the elements stored in the table, otherwise\n/// using the returned [`NonNull<T>`] may result in [`undefined behavior`].\n///\n/// ```none\n///                        `table.data_end::<T>()` returns pointer that points here\n///                        (to the end of `T0`)\n///                          âˆ¨\n/// [Pad], T_n, ..., T1, T0, |CT0, CT1, ..., CT_n|, CTa_0, CTa_1, ..., CTa_m\n///                           \\________  ________/\n///                                    \\/\n///       `n = buckets - 1`, i.e. `RawTableInner::buckets() - 1`\n///\n/// where: T0...T_n  - our stored data;\n///        CT0...CT_n - control bytes or metadata for `data`.\n///        CTa_0...CTa_m - additional control bytes, where `m = Group::WIDTH - 1` (so that the search\n///                        with loading `Group` bytes from the heap works properly, even if the result\n///                        of `h1(hash) & self.bucket_mask` is equal to `self.bucket_mask`). See also\n///                        `RawTableInner::set_ctrl` function.\n///\n/// P.S. `h1(hash) & self.bucket_mask` is the same as `hash as usize % self.buckets()` because the number\n/// of buckets is a power of two, and `self.bucket_mask = self.buckets() - 1`.\n/// ```\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "fn data_end<T>(&self) -> NonNull<T> {",
    "    self.ctrl.cast()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}