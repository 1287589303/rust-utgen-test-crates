{
  "name": "hashbrown::map::{impl#79}::replace_entry_with",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3985:5:4013:6",
  "doc": "/// Provides shared access to the key and owned access to the value of\n/// the entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::Entry;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// map.insert(\"poneyland\", 42);\n///\n/// let entry = match map.entry(\"poneyland\") {\n///     Entry::Occupied(e) => {\n///         e.replace_entry_with(|k, v| {\n///             assert_eq!(k, &\"poneyland\");\n///             assert_eq!(v, 42);\n///             Some(v + 1)\n///         })\n///     }\n///     Entry::Vacant(_) => panic!(),\n/// };\n///\n/// match entry {\n///     Entry::Occupied(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///         assert_eq!(e.get(), &43);\n///     }\n///     Entry::Vacant(_) => panic!(),\n/// }\n///\n/// assert_eq!(map[\"poneyland\"], 43);\n///\n/// let entry = match map.entry(\"poneyland\") {\n///     Entry::Occupied(e) => e.replace_entry_with(|_k, _v| None),\n///     Entry::Vacant(_) => panic!(),\n/// };\n///\n/// match entry {\n///     Entry::Vacant(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///     }\n///     Entry::Occupied(_) => panic!(),\n/// }\n///\n/// assert!(!map.contains_key(\"poneyland\"));\n/// ```\n",
  "code": [
    "pub fn replace_entry_with<F>(self, f: F) -> Entry<'a, K, V, S, A>",
    "where",
    "    F: FnOnce(&K, V) -> Option<V>,",
    "{",
    "    unsafe {",
    "        let mut spare_key = None;",
    "",
    "        self.table",
    "            .table",
    "            .replace_bucket_with(self.elem.clone(), |(key, value)| {",
    "                if let Some(new_value) = f(&key, value) {",
    "                    Some((key, new_value))",
    "                } else {",
    "                    spare_key = Some(key);",
    "                    None",
    "                }",
    "            });",
    "",
    "        if let Some(key) = spare_key {",
    "            Entry::Vacant(VacantEntry {",
    "                hash: self.hash,",
    "                key,",
    "                table: self.table,",
    "            })",
    "        } else {",
    "            Entry::Occupied(self)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(key) = spare_key",
          "norm": null,
          "value": "true",
          "line": 4003,
          "bound": null
        }
      ],
      "ret": "Entry::Occupied(self)",
      "path": [
        0,
        1,
        2,
        7,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(key) = spare_key",
          "norm": null,
          "value": "true",
          "line": 4003,
          "bound": null
        }
      ],
      "ret": "Entry::Vacant(VacantEntry {\n                    hash: self.hash,\n                    key,\n                    table: self.table,\n                })",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}