{
  "name": "hashbrown::map::{impl#5}::find_or_find_insert_slot",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1804:5:1817:6",
  "doc": "",
  "code": [
    "pub(crate) fn find_or_find_insert_slot<Q>(",
    "    &mut self,",
    "    hash: u64,",
    "    key: &Q,",
    ") -> Result<Bucket<(K, V)>, crate::raw::InsertSlot>",
    "where",
    "    Q: Equivalent<K> + ?Sized,",
    "{",
    "    self.table.find_or_find_insert_slot(",
    "        hash,",
    "        equivalent_key(key),",
    "        make_hasher(&self.hash_builder),",
    "    )",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}