{
  "name": "hashbrown::table::{impl#1}::iter_mut",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:737:5:742:6",
  "doc": "/// An iterator visiting all elements in arbitrary order,\n/// with mutable references to the elements.\n/// The iterator element type is `&'a mut T`.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&1), 1, hasher);\n/// table.insert_unique(hasher(&2), 2, hasher);\n/// table.insert_unique(hasher(&3), 3, hasher);\n///\n/// // Update all values\n/// for val in table.iter_mut() {\n///     *val *= 2;\n/// }\n///\n/// assert_eq!(table.len(), 3);\n/// let mut vec: Vec<i32> = Vec::new();\n///\n/// for val in &table {\n///     println!(\"val: {}\", val);\n///     vec.push(*val);\n/// }\n///\n/// // The `Iter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [2, 4, 6]);\n///\n/// assert_eq!(table.len(), 3);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn iter_mut(&mut self) -> IterMut<'_, T> {",
    "    IterMut {",
    "        inner: unsafe { self.raw.iter() },",
    "        marker: PhantomData,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IterMut {\n            inner: unsafe { self.raw.iter() },\n            marker: PhantomData,\n        }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}