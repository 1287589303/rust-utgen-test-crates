{
  "name": "hashbrown::raw::{impl#12}::with_capacity",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:1508:5:1518:6",
  "doc": "/// Allocates a new [`RawTableInner`] with at least enough capacity for inserting\n/// the given number of elements without reallocating.\n///\n/// Panics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\n/// in case of allocation error. Use [`fallible_with_capacity`] instead if you want to\n/// handle memory allocation failure.\n///\n/// All the control bytes are initialized with the [`Tag::EMPTY`] bytes.\n///\n/// [`fallible_with_capacity`]: RawTableInner::fallible_with_capacity\n/// [`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n",
  "code": [
    "fn with_capacity<A>(alloc: &A, table_layout: TableLayout, capacity: usize) -> Self",
    "where",
    "    A: Allocator,",
    "{",
    "    // Avoid `Result::unwrap_or_else` because it bloats LLVM IR.",
    "    match Self::fallible_with_capacity(alloc, table_layout, capacity, Fallibility::Infallible) {",
    "        Ok(table_inner) => table_inner,",
    "        // SAFETY: All allocation errors will be caught inside `RawTableInner::new_uninitialized`.",
    "        Err(_) => unsafe { hint::unreachable_unchecked() },",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "Self::fallible_with_capacity(alloc, table_layout, capacity, Fallibility::Infallible) matches Err(_)",
          "norm": null,
          "value": "true",
          "line": 1513,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        4,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "Self::fallible_with_capacity(alloc, table_layout, capacity, Fallibility::Infallible) matches Ok(table_inner)",
          "norm": null,
          "value": "true",
          "line": 1513,
          "bound": null
        },
        {
          "cond": "Self::fallible_with_capacity(alloc, table_layout, capacity, Fallibility::Infallible) matches Ok(table_inner)",
          "norm": null,
          "value": "true",
          "line": 1513,
          "bound": null
        }
      ],
      "ret": "table_inner",
      "path": [
        0,
        1,
        3,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}