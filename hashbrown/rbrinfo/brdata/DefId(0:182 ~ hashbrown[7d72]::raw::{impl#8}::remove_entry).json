{
  "name": "hashbrown::raw::{impl#8}::remove_entry",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:799:5:805:6",
  "doc": "/// Finds and removes an element from the table, returning it.\n",
  "code": [
    "pub fn remove_entry(&mut self, hash: u64, eq: impl FnMut(&T) -> bool) -> Option<T> {",
    "    // Avoid `Option::map` because it bloats LLVM IR.",
    "    match self.find(hash, eq) {",
    "        Some(bucket) => Some(unsafe { self.remove(bucket).0 }),",
    "        None => None,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.find(hash, eq) matches Some(bucket)",
          "norm": null,
          "value": "true",
          "line": 801,
          "bound": null
        },
        {
          "cond": "self.find(hash, eq) matches Some(bucket)",
          "norm": null,
          "value": "true",
          "line": 801,
          "bound": null
        }
      ],
      "ret": "Some(unsafe { self.remove(bucket).0 })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.find(hash, eq) matches None",
          "norm": null,
          "value": "true",
          "line": 801,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        4,
        9,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}