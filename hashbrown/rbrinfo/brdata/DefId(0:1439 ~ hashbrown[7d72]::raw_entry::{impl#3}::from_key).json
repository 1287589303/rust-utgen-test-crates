{
  "name": "hashbrown::raw_entry::{impl#3}::from_key",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:525:5:532:6",
  "doc": "/// Creates a `RawEntryMut` from the given key.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// let key = \"a\";\n/// let entry: RawEntryMut<&str, u32, _> = map.raw_entry_mut().from_key(&key);\n/// entry.insert(key, 100);\n/// assert_eq!(map[&\"a\"], 100);\n/// ```\n",
  "code": [
    "pub fn from_key<Q>(self, k: &Q) -> RawEntryMut<'a, K, V, S, A>",
    "where",
    "    S: BuildHasher,",
    "    Q: Hash + Equivalent<K> + ?Sized,",
    "{",
    "    let hash = make_hash::<Q, S>(&self.map.hash_builder, k);",
    "    self.from_key_hashed_nocheck(hash, k)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}