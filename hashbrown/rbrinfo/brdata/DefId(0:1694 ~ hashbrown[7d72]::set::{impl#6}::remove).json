{
  "name": "hashbrown::set::{impl#6}::remove",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1175:5:1180:6",
  "doc": "/// Removes a value from the set. Returns whether the value was\n/// present in the set.\n///\n/// The value may be any borrowed form of the set's value type, but\n/// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n/// the value type.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set = HashSet::new();\n///\n/// set.insert(2);\n/// assert_eq!(set.remove(&2), true);\n/// assert_eq!(set.remove(&2), false);\n/// ```\n///\n/// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n/// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n",
  "code": [
    "pub fn remove<Q>(&mut self, value: &Q) -> bool",
    "where",
    "    Q: Hash + Equivalent<T> + ?Sized,",
    "{",
    "    self.map.remove(value).is_some()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}