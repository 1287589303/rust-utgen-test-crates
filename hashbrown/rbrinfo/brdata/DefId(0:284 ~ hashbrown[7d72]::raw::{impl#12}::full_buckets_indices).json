{
  "name": "hashbrown::raw::{impl#12}::full_buckets_indices",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2662:5:2694:6",
  "doc": "/// Returns an iterator over full buckets indices in the table.\n///\n/// # Safety\n///\n/// Behavior is undefined if any of the following conditions are violated:\n///\n/// * The caller has to ensure that the `RawTableInner` outlives the\n///   `FullBucketsIndices`. Because we cannot make the `next` method\n///   unsafe on the `FullBucketsIndices` struct, we have to make the\n///   `full_buckets_indices` method unsafe.\n///\n/// * The [`RawTableInner`] must have properly initialized control bytes.\n",
  "code": [
    "unsafe fn full_buckets_indices(&self) -> FullBucketsIndices {",
    "    // SAFETY:",
    "    // 1. Since the caller of this function ensures that the control bytes",
    "    //    are properly initialized and `self.ctrl(0)` points to the start",
    "    //    of the array of control bytes, therefore: `ctrl` is valid for reads,",
    "    //    properly aligned to `Group::WIDTH` and points to the properly initialized",
    "    //    control bytes.",
    "    // 2. The value of `items` is equal to the amount of data (values) added",
    "    //    to the table.",
    "    //",
    "    //                         `ctrl` points here (to the start",
    "    //                         of the first control byte `CT0`)",
    "    //                          âˆ¨",
    "    // [Pad], T_n, ..., T1, T0, |CT0, CT1, ..., CT_n|, Group::WIDTH",
    "    //                           \\________  ________/",
    "    //                                    \\/",
    "    //       `n = buckets - 1`, i.e. `RawTableInner::buckets() - 1`",
    "    //",
    "    // where: T0...T_n  - our stored data;",
    "    //        CT0...CT_n - control bytes or metadata for `data`.",
    "    let ctrl = NonNull::new_unchecked(self.ctrl(0).cast::<u8>());",
    "",
    "    FullBucketsIndices {",
    "        // Load the first group",
    "        // SAFETY: See explanation above.",
    "        current_group: Group::load_aligned(ctrl.as_ptr().cast())",
    "            .match_full()",
    "            .into_iter(),",
    "        group_first_index: 0,",
    "        ctrl,",
    "        items: self.items,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "FullBucketsIndices {\n            // Load the first group\n            // SAFETY: See explanation above.\n            current_group: Group::load_aligned(ctrl.as_ptr().cast())\n                .match_full()\n                .into_iter(),\n            group_first_index: 0,\n            ctrl,\n            items: self.items,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}