{
  "name": "hashbrown::set::{impl#6}::contains",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:862:5:867:6",
  "doc": "/// Returns `true` if the set contains a value.\n///\n/// The value may be any borrowed form of the set's value type, but\n/// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n/// the value type.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let set: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// assert_eq!(set.contains(&1), true);\n/// assert_eq!(set.contains(&4), false);\n/// ```\n///\n/// [`Eq`]: https://doc.rust-lang.org/std/cmp/trait.Eq.html\n/// [`Hash`]: https://doc.rust-lang.org/std/hash/trait.Hash.html\n",
  "code": [
    "pub fn contains<Q>(&self, value: &Q) -> bool",
    "where",
    "    Q: Hash + Equivalent<T> + ?Sized,",
    "{",
    "    self.map.contains_key(value)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}