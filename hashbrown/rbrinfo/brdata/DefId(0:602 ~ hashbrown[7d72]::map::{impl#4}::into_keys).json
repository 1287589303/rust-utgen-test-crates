{
  "name": "hashbrown::map::{impl#4}::into_keys",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1035:5:1039:6",
  "doc": "/// Creates a consuming iterator visiting all the keys in arbitrary order.\n/// The map cannot be used after calling this.\n/// The iterator element type is `K`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(\"a\", 1);\n/// map.insert(\"b\", 2);\n/// map.insert(\"c\", 3);\n///\n/// let mut vec: Vec<&str> = map.into_keys().collect();\n///\n/// // The `IntoKeys` iterator produces keys in arbitrary order, so the\n/// // keys must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [\"a\", \"b\", \"c\"]);\n/// ```\n",
  "code": [
    "pub fn into_keys(self) -> IntoKeys<K, V, A> {",
    "    IntoKeys {",
    "        inner: self.into_iter(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IntoKeys {\n            inner: self.into_iter(),\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}