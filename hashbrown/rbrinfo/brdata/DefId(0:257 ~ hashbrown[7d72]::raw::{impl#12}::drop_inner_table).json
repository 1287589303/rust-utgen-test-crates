{
  "name": "hashbrown::raw::{impl#12}::drop_inner_table",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2126:5:2137:6",
  "doc": "/// Executes the destructors (if any) of the values stored in the table and than\n/// deallocates the table.\n///\n/// # Note\n///\n/// Calling this function automatically makes invalid (dangling) all instances of\n/// buckets ([`Bucket`]) and makes invalid (dangling) the `ctrl` field of the table.\n///\n/// This function does not make any changes to the `bucket_mask`, `items` or `growth_left`\n/// fields of the table. If necessary, the caller of this function must manually set\n/// up these table fields.\n///\n/// # Safety\n///\n/// If any of the following conditions are violated, the result is [`undefined behavior`]:\n///\n/// * Calling this function more than once;\n///\n/// * The type `T` must be the actual type of the elements stored in the table.\n///\n/// * The `alloc` must be the same [`Allocator`] as the `Allocator` that was used\n///   to allocate this table.\n///\n/// * The `table_layout` must be the same [`TableLayout`] as the `TableLayout` that\n///   was used to allocate this table.\n///\n/// The caller of this function should pay attention to the possibility of the\n/// elements' drop function panicking, because this:\n///\n///    * May leave the table in an inconsistent state;\n///\n///    * Memory is never deallocated, so a memory leak may occur.\n///\n/// Attempt to use the `ctrl` field of the table (dereference) after calling this\n/// function results in [`undefined behavior`].\n///\n/// It is safe to call this function on a table that has not been allocated,\n/// on a table with uninitialized control bytes, and on a table with no actual\n/// data but with `Full` control bytes if `self.items == 0`.\n///\n/// See also [`RawTableInner::drop_elements`] or [`RawTableInner::free_buckets`]\n/// for more  information.\n///\n/// [`RawTableInner::drop_elements`]: RawTableInner::drop_elements\n/// [`RawTableInner::free_buckets`]: RawTableInner::free_buckets\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn drop_inner_table<T, A: Allocator>(&mut self, alloc: &A, table_layout: TableLayout) {",
    "    if !self.is_empty_singleton() {",
    "        unsafe {",
    "            // SAFETY: The caller must uphold the safety contract for `drop_inner_table` method.",
    "            self.drop_elements::<T>();",
    "            // SAFETY:",
    "            // 1. We have checked that our table is allocated.",
    "            // 2. The caller must uphold the safety contract for `drop_inner_table` method.",
    "            self.free_buckets(alloc, table_layout);",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_empty_singleton()",
          "norm": null,
          "value": "true",
          "line": 2127,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_empty_singleton()",
          "norm": null,
          "value": "false",
          "line": 2127,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}