{
  "name": "hashbrown::set::{impl#63}::remove",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:2475:5:2477:6",
  "doc": "/// Takes the value out of the entry, and returns it.\n/// Keeps the allocated memory for reuse.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// use hashbrown::hash_set::Entry;\n///\n/// let mut set: HashSet<&str> = HashSet::new();\n/// // The set is empty\n/// assert!(set.is_empty() && set.capacity() == 0);\n///\n/// set.entry(\"poneyland\").or_insert();\n/// let capacity_before_remove = set.capacity();\n///\n/// if let Entry::Occupied(o) = set.entry(\"poneyland\") {\n///     assert_eq!(o.remove(), \"poneyland\");\n/// }\n///\n/// assert_eq!(set.contains(\"poneyland\"), false);\n/// // Now set hold none elements but capacity is equal to the old one\n/// assert!(set.len() == 0 && set.capacity() == capacity_before_remove);\n/// ```\n",
  "code": [
    "pub fn remove(self) -> T {",
    "    self.inner.remove_entry().0",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.inner.remove_entry().0",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}