{
  "name": "hashbrown::raw::{impl#12}::fallible_with_capacity",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:1467:5:1495:6",
  "doc": "/// Attempts to allocate a new [`RawTableInner`] with at least enough\n/// capacity for inserting the given number of elements without reallocating.\n///\n/// All the control bytes are initialized with the [`Tag::EMPTY`] bytes.\n",
  "code": [
    "fn fallible_with_capacity<A>(",
    "    alloc: &A,",
    "    table_layout: TableLayout,",
    "    capacity: usize,",
    "    fallibility: Fallibility,",
    ") -> Result<Self, TryReserveError>",
    "where",
    "    A: Allocator,",
    "{",
    "    if capacity == 0 {",
    "        Ok(Self::NEW)",
    "    } else {",
    "        // SAFETY: We checked that we could successfully allocate the new table, and then",
    "        // initialized all control bytes with the constant `Tag::EMPTY` byte.",
    "        unsafe {",
    "            let buckets =",
    "                capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?;",
    "",
    "            let mut result =",
    "                Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?;",
    "            // SAFETY: We checked that the table is allocated and therefore the table already has",
    "            // `self.bucket_mask + 1 + Group::WIDTH` number of control bytes (see TableLayout::calculate_layout_for)",
    "            // so writing `self.num_ctrl_bytes() == bucket_mask + 1 + Group::WIDTH` bytes is safe.",
    "            result.ctrl_slice().fill_empty();",
    "",
    "            Ok(result)",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 4
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "capacity == 0",
          "norm": "0 == capacity",
          "value": "false",
          "line": 1476,
          "bound": null
        }
      ],
      "ret": "Ok(Self::NEW)",
      "path": [
        0,
        1,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "capacity == 0",
          "norm": "0 == capacity",
          "value": "true",
          "line": 1476,
          "bound": null
        },
        {
          "cond": "capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?",
          "norm": null,
          "value": "Err/None",
          "line": 1483,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        7,
        9,
        10,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "capacity == 0",
          "norm": "0 == capacity",
          "value": "true",
          "line": 1476,
          "bound": null
        },
        {
          "cond": "capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1483,
          "bound": null
        },
        {
          "cond": "Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?",
          "norm": null,
          "value": "Err/None",
          "line": 1486,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        14,
        16,
        17,
        21,
        22
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "capacity == 0",
          "norm": "0 == capacity",
          "value": "true",
          "line": 1476,
          "bound": null
        },
        {
          "cond": "capacity_to_buckets(capacity).ok_or_else(|| fallibility.capacity_overflow())?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1483,
          "bound": null
        },
        {
          "cond": "Self::new_uninitialized(alloc, table_layout, buckets, fallibility)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 1486,
          "bound": null
        }
      ],
      "ret": "Ok(result)",
      "path": [
        0,
        2,
        3,
        4,
        5,
        8,
        11,
        12,
        15,
        18,
        19,
        20,
        22
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}