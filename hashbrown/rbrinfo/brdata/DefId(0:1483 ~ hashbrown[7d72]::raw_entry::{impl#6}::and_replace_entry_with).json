{
  "name": "hashbrown::raw_entry::{impl#6}::and_replace_entry_with",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:893:5:901:6",
  "doc": "/// Provides shared access to the key and owned access to the value of\n/// an occupied entry and allows to replace or remove it based on the\n/// value of the returned option.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::RawEntryMut;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|_k, _v| panic!());\n///\n/// match entry {\n///     RawEntryMut::Vacant(_) => {},\n///     RawEntryMut::Occupied(_) => panic!(),\n/// }\n///\n/// map.insert(\"poneyland\", 42);\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|k, v| {\n///         assert_eq!(k, &\"poneyland\");\n///         assert_eq!(v, 42);\n///         Some(v + 1)\n///     });\n///\n/// match entry {\n///     RawEntryMut::Occupied(e) => {\n///         assert_eq!(e.key(), &\"poneyland\");\n///         assert_eq!(e.get(), &43);\n///     },\n///     RawEntryMut::Vacant(_) => panic!(),\n/// }\n///\n/// assert_eq!(map[\"poneyland\"], 43);\n///\n/// let entry = map\n///     .raw_entry_mut()\n///     .from_key(\"poneyland\")\n///     .and_replace_entry_with(|_k, _v| None);\n///\n/// match entry {\n///     RawEntryMut::Vacant(_) => {},\n///     RawEntryMut::Occupied(_) => panic!(),\n/// }\n///\n/// assert!(!map.contains_key(\"poneyland\"));\n/// ```\n",
  "code": [
    "pub fn and_replace_entry_with<F>(self, f: F) -> Self",
    "where",
    "    F: FnOnce(&K, V) -> Option<V>,",
    "{",
    "    match self {",
    "        RawEntryMut::Occupied(entry) => entry.replace_entry_with(f),",
    "        RawEntryMut::Vacant(_) => self,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches RawEntryMut::Vacant(_)",
          "norm": null,
          "value": "true",
          "line": 897,
          "bound": null
        }
      ],
      "ret": "self",
      "path": [
        0,
        3,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches RawEntryMut::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 897,
          "bound": null
        },
        {
          "cond": "self matches RawEntryMut::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 897,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        4,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}