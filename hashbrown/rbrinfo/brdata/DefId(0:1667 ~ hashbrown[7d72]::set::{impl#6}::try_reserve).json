{
  "name": "hashbrown::set::{impl#6}::try_reserve",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:670:5:672:6",
  "doc": "/// Tries to reserve capacity for at least `additional` more elements to be inserted\n/// in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// # Errors\n///\n/// If the capacity overflows, or the allocator reports a failure, then an error\n/// is returned.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let mut set: HashSet<i32> = HashSet::new();\n/// set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n/// ```\n",
  "code": [
    "pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {",
    "    self.map.try_reserve(additional)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}