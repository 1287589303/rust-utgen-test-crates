{
  "name": "hashbrown::map::{impl#43}::into_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3086:5:3088:6",
  "doc": "/// Creates an iterator over the entries of a `HashMap` in arbitrary order.\n/// The iterator element type is `(&'a K, &'a V)`.\n///\n/// Return the same `Iter` struct as by the [`iter`] method on [`HashMap`].\n///\n/// [`iter`]: struct.HashMap.html#method.iter\n/// [`HashMap`]: struct.HashMap.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// let map_one: HashMap<_, _> = [(1, \"a\"), (2, \"b\"), (3, \"c\")].into();\n/// let mut map_two = HashMap::new();\n///\n/// for (key, value) in &map_one {\n///     println!(\"Key: {}, Value: {}\", key, value);\n///     map_two.insert(*key, *value);\n/// }\n///\n/// assert_eq!(map_one, map_two);\n/// ```\n",
  "code": [
    "fn into_iter(self) -> Iter<'a, K, V> {",
    "    self.iter()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}