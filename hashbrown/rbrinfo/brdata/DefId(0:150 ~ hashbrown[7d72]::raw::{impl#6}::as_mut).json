{
  "name": "hashbrown::raw::{impl#6}::as_mut",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:545:5:547:6",
  "doc": "/// Returns a unique mutable reference to the `value`.\n///\n/// # Safety\n///\n/// See [`NonNull::as_mut`] for safety concerns.\n///\n/// # Note\n///\n/// [`Hash`] and [`Eq`] on the new `T` value and its borrowed form *must* match\n/// those for the old `T` value, as the map will not re-evaluate where the new\n/// value should go, meaning the value may become \"lost\" if their location\n/// does not reflect their state.\n///\n/// [`NonNull::as_mut`]: https://doc.rust-lang.org/core/ptr/struct.NonNull.html#method.as_mut\n/// [`Hash`]: https://doc.rust-lang.org/core/hash/trait.Hash.html\n/// [`Eq`]: https://doc.rust-lang.org/core/cmp/trait.Eq.html\n",
  "code": [
    "pub unsafe fn as_mut<'a>(&self) -> &'a mut T {",
    "    &mut *self.as_ptr()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut *self.as_ptr()",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}