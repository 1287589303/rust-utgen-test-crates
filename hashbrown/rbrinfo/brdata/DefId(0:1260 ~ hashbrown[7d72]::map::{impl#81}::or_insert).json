{
  "name": "hashbrown::map::{impl#81}::or_insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4165:5:4174:6",
  "doc": "/// Ensures a value is in the entry by inserting the default if empty, and returns\n/// a mutable reference to the value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map: HashMap<String, u32> = HashMap::new();\n///\n/// // nonexistent key\n/// map.entry_ref(\"poneyland\").or_insert(3);\n/// assert_eq!(map[\"poneyland\"], 3);\n///\n/// // existing key\n/// *map.entry_ref(\"poneyland\").or_insert(10) *= 2;\n/// assert_eq!(map[\"poneyland\"], 6);\n/// ```\n",
  "code": [
    "pub fn or_insert(self, default: V) -> &'a mut V",
    "where",
    "    K: Hash + From<&'b Q>,",
    "    S: BuildHasher,",
    "{",
    "    match self {",
    "        EntryRef::Occupied(entry) => entry.into_mut(),",
    "        EntryRef::Vacant(entry) => entry.insert(default),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches EntryRef::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 4170,
          "bound": null
        }
      ],
      "ret": "match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(default),\n        }",
      "path": [
        0,
        3,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches EntryRef::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 4170,
          "bound": null
        },
        {
          "cond": "self matches EntryRef::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 4170,
          "bound": null
        }
      ],
      "ret": "match self {\n            EntryRef::Occupied(entry) => entry.into_mut(),\n            EntryRef::Vacant(entry) => entry.insert(default),\n        }",
      "path": [
        0,
        2,
        4,
        5,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}