{
  "name": "hashbrown::table::{impl#1}::shrink_to",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:511:5:513:6",
  "doc": "/// Shrinks the capacity of the table with a lower limit. It will drop\n/// down no lower than the supplied limit while maintaining the internal rules\n/// and possibly leaving some space in accordance with the resize policy.\n///\n/// `hasher` is called if entries need to be moved or copied to a new table.\n/// This must return the same hash value that each entry was inserted with.\n///\n/// Panics if the current capacity is smaller than the supplied\n/// minimum capacity.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::with_capacity(100);\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&1), 1, hasher);\n/// table.insert_unique(hasher(&2), 2, hasher);\n/// assert!(table.capacity() >= 100);\n/// table.shrink_to(10, hasher);\n/// assert!(table.capacity() >= 10);\n/// table.shrink_to(0, hasher);\n/// assert!(table.capacity() >= 2);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn shrink_to(&mut self, min_capacity: usize, hasher: impl Fn(&T) -> u64) {",
    "    self.raw.shrink_to(min_capacity, hasher);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}