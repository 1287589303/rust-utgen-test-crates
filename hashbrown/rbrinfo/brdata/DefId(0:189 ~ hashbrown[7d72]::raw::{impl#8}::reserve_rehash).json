{
  "name": "hashbrown::raw::{impl#8}::reserve_rehash",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:942:5:969:6",
  "doc": "/// Out-of-line slow path for `reserve` and `try_reserve`.\n///\n/// # Safety\n///\n/// The [`RawTableInner`] must have properly initialized control bytes,\n/// otherwise calling this function results in [`undefined behavior`]\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn reserve_rehash(",
    "    &mut self,",
    "    additional: usize,",
    "    hasher: impl Fn(&T) -> u64,",
    "    fallibility: Fallibility,",
    ") -> Result<(), TryReserveError> {",
    "    unsafe {",
    "        // SAFETY:",
    "        // 1. We know for sure that `alloc` and `layout` matches the [`Allocator`] and",
    "        //    [`TableLayout`] that were used to allocate this table.",
    "        // 2. The `drop` function is the actual drop function of the elements stored in",
    "        //    the table.",
    "        // 3. The caller ensures that the control bytes of the `RawTableInner`",
    "        //    are already initialized.",
    "        self.table.reserve_rehash_inner(",
    "            &self.alloc,",
    "            additional,",
    "            &|table, index| hasher(table.bucket::<T>(index).as_ref()),",
    "            fallibility,",
    "            Self::TABLE_LAYOUT,",
    "            if T::NEEDS_DROP {",
    "                Some(|ptr| ptr::drop_in_place(ptr as *mut T))",
    "            } else {",
    "                None",
    "            },",
    "        )",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "true",
          "line": 962,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "T::NEEDS_DROP",
          "norm": null,
          "value": "false",
          "line": 962,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}