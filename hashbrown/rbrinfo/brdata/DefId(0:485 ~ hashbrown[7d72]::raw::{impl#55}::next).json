{
  "name": "hashbrown::raw::{impl#55}::next",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:4089:5:4111:6",
  "doc": "",
  "code": [
    "fn next(&mut self) -> Option<Self::Item> {",
    "    unsafe {",
    "        loop {",
    "            if let Some(bit) = self.bitmask.next() {",
    "                let index = (self.probe_seq.pos + bit) & self.bucket_mask;",
    "                return Some(index);",
    "            }",
    "            if likely(self.group.match_empty().any_bit_set()) {",
    "                return None;",
    "            }",
    "            self.probe_seq.move_next(self.bucket_mask);",
    "",
    "            // Can't use `RawTableInner::ctrl` here as we don't have",
    "            // an actual `RawTableInner` reference to use.",
    "            let index = self.probe_seq.pos;",
    "            debug_assert!(index < self.bucket_mask + 1 + Group::WIDTH);",
    "            let group_ctrl = self.ctrl.as_ptr().add(index).cast();",
    "",
    "            self.group = Group::load(group_ctrl);",
    "            self.bitmask = self.group.match_tag(self.tag_hash).into_iter();",
    "        }",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(bit) = self.bitmask.next()",
          "norm": null,
          "value": "true",
          "line": 4092,
          "bound": null
        },
        {
          "cond": "likely(self.group.match_empty().any_bit_set())",
          "norm": null,
          "value": "true",
          "line": 4096,
          "bound": null
        }
      ],
      "ret": "None",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        10,
        11,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(bit) = self.bitmask.next()",
          "norm": null,
          "value": "true",
          "line": 4092,
          "bound": null
        },
        {
          "cond": "likely(self.group.match_empty().any_bit_set())",
          "norm": null,
          "value": "false",
          "line": 4096,
          "bound": null
        },
        {
          "cond": "index < self.bucket_mask + 1 + Group::WIDTH",
          "norm": null,
          "value": "true",
          "line": 4104,
          "bound": null
        },
        {
          "cond": "let Some(bit) = self.bitmask.next()",
          "norm": null,
          "value": "true",
          "line": 4092,
          "bound": null
        }
      ],
      "ret": "Some(index)",
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        17,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        1,
        2,
        3,
        4,
        5,
        6,
        27
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(bit) = self.bitmask.next()",
          "norm": null,
          "value": "true",
          "line": 4092,
          "bound": null
        },
        {
          "cond": "likely(self.group.match_empty().any_bit_set())",
          "norm": null,
          "value": "false",
          "line": 4096,
          "bound": null
        },
        {
          "cond": "index < self.bucket_mask + 1 + Group::WIDTH",
          "norm": null,
          "value": "false",
          "line": 4104,
          "bound": "index == self.bucket_mask + 1 + Group::WIDTH"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15,
        16,
        18,
        28
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(bit) = self.bitmask.next()",
          "norm": null,
          "value": "true",
          "line": 4092,
          "bound": null
        }
      ],
      "ret": "Some(index)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        27
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}