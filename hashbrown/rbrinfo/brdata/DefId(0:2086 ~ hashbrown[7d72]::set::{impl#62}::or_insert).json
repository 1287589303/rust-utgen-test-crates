{
  "name": "hashbrown::set::{impl#62}::or_insert",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:2396:5:2404:6",
  "doc": "/// Ensures a value is in the entry by inserting if it was vacant.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let mut set: HashSet<&str> = HashSet::new();\n///\n/// // nonexistent key\n/// set.entry(\"poneyland\").or_insert();\n/// assert!(set.contains(\"poneyland\"));\n///\n/// // existing key\n/// set.entry(\"poneyland\").or_insert();\n/// assert!(set.contains(\"poneyland\"));\n/// assert_eq!(set.len(), 1);\n/// ```\n",
  "code": [
    "pub fn or_insert(self)",
    "where",
    "    T: Hash,",
    "    S: BuildHasher,",
    "{",
    "    if let Entry::Vacant(entry) = self {",
    "        entry.insert();",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Entry::Vacant(entry) = self",
          "norm": null,
          "value": "true",
          "line": 2401,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        4,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Entry::Vacant(entry) = self",
          "norm": null,
          "value": "true",
          "line": 2401,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}