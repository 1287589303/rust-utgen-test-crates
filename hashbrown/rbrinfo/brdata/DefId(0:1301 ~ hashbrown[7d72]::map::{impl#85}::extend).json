{
  "name": "hashbrown::map::{impl#85}::extend",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4480:5:4495:6",
  "doc": "/// Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\n/// Replace values with existing keys with new values returned from the iterator.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(1, 100);\n///\n/// let some_iter = [(1, 1), (2, 2)].into_iter();\n/// map.extend(some_iter);\n/// // Replace values with existing keys with new values returned from the iterator.\n/// // So that the map.get(&1) doesn't return Some(&100).\n/// assert_eq!(map.get(&1), Some(&1));\n///\n/// let some_vec: Vec<_> = vec![(3, 3), (4, 4)];\n/// map.extend(some_vec);\n///\n/// let some_arr = [(5, 5), (6, 6)];\n/// map.extend(some_arr);\n/// let old_map_len = map.len();\n///\n/// // You can also extend from another HashMap\n/// let mut new_map = HashMap::new();\n/// new_map.extend(map);\n/// assert_eq!(new_map.len(), old_map_len);\n///\n/// let mut vec: Vec<_> = new_map.into_iter().collect();\n/// // The `IntoIter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n/// ```\n",
  "code": [
    "fn extend<T: IntoIterator<Item = (K, V)>>(&mut self, iter: T) {",
    "    // Keys may be already present or show multiple times in the iterator.",
    "    // Reserve the entire hint lower bound if the map is empty.",
    "    // Otherwise reserve half the hint (rounded up), so the map",
    "    // will only resize twice in the worst case.",
    "    let iter = iter.into_iter();",
    "    let reserve = if self.is_empty() {",
    "        iter.size_hint().0",
    "    } else {",
    "        (iter.size_hint().0 + 1) / 2",
    "    };",
    "    self.reserve(reserve);",
    "    iter.for_each(move |(k, v)| {",
    "        self.insert(k, v);",
    "    });",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "true",
          "line": 4486,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.is_empty()",
          "norm": null,
          "value": "false",
          "line": 4486,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}