{
  "name": "hashbrown::set::{impl#25}::into_iter",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1774:5:1778:6",
  "doc": "/// Creates a consuming iterator, that is, one that moves each value out\n/// of the set in arbitrary order. The set cannot be used after calling\n/// this.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let mut set = HashSet::new();\n/// set.insert(\"a\".to_string());\n/// set.insert(\"b\".to_string());\n///\n/// // Not possible to collect to a Vec<String> with a regular `.iter()`.\n/// let v: Vec<String> = set.into_iter().collect();\n///\n/// // Will print in an arbitrary order.\n/// for x in &v {\n///     println!(\"{}\", x);\n/// }\n/// ```\n",
  "code": [
    "fn into_iter(self) -> IntoIter<T, A> {",
    "    IntoIter {",
    "        iter: self.map.into_iter(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "IntoIter {\n            iter: self.map.into_iter(),\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}