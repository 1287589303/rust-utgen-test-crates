{
  "name": "hashbrown::set::{impl#6}::reserve",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:649:5:651:6",
  "doc": "/// Reserves capacity for at least `additional` more elements to be inserted\n/// in the `HashSet`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// # Panics\n///\n/// Panics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\n/// in case of allocation error. Use [`try_reserve`](HashSet::try_reserve) instead\n/// if you want to handle memory allocation failure.\n///\n/// [`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n/// [`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let mut set: HashSet<i32> = HashSet::new();\n/// set.reserve(10);\n/// assert!(set.capacity() >= 10);\n/// ```\n",
  "code": [
    "pub fn reserve(&mut self, additional: usize) {",
    "    self.map.reserve(additional);",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}