{
  "name": "hashbrown::map::{impl#3}::with_hasher",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:457:5:462:6",
  "doc": "/// Creates an empty `HashMap` which will use the given hash builder to hash\n/// keys.\n///\n/// The hash map is initially created with a capacity of 0, so it will not\n/// allocate until it is first inserted into.\n///\n/// # HashDoS resistance\n///\n/// The `hash_builder` normally use a fixed key by default and that does\n/// not allow the `HashMap` to be protected against attacks such as [`HashDoS`].\n/// Users who require HashDoS resistance should explicitly use\n/// [`std::collections::hash_map::RandomState`]\n/// as the hasher when creating a [`HashMap`].\n///\n/// The `hash_builder` passed should implement the [`BuildHasher`] trait for\n/// the `HashMap` to be useful, see its documentation for details.\n///\n/// [`HashDoS`]: https://en.wikipedia.org/wiki/Collision_attack\n/// [`std::collections::hash_map::RandomState`]: https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\n/// [`BuildHasher`]: https://doc.rust-lang.org/std/hash/trait.BuildHasher.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::DefaultHashBuilder;\n///\n/// let s = DefaultHashBuilder::default();\n/// let mut map = HashMap::with_hasher(s);\n/// assert_eq!(map.len(), 0);\n/// assert_eq!(map.capacity(), 0);\n///\n/// map.insert(1, 2);\n/// ```\n",
  "code": [
    "pub const fn with_hasher(hash_builder: S) -> Self {",
    "    Self {",
    "        hash_builder,",
    "        table: RawTable::new(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            hash_builder,\n            table: RawTable::new(),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}