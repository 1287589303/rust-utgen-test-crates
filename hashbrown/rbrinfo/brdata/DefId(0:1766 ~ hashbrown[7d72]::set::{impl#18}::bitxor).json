{
  "name": "hashbrown::set::{impl#18}::bitxor",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1456:5:1458:6",
  "doc": "/// Returns the symmetric difference of `self` and `rhs` as a new `HashSet<T, S>`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let a: HashSet<_> = vec![1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = vec![3, 4, 5].into_iter().collect();\n///\n/// let set = &a ^ &b;\n///\n/// let mut i = 0;\n/// let expected = [1, 2, 4, 5];\n/// for x in &set {\n///     assert!(expected.contains(x));\n///     i += 1;\n/// }\n/// assert_eq!(i, expected.len());\n/// ```\n",
  "code": [
    "fn bitxor(self, rhs: &HashSet<T, S, A>) -> HashSet<T, S, A> {",
    "    self.symmetric_difference(rhs).cloned().collect()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}