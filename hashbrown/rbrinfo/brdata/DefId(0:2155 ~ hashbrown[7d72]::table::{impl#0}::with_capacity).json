{
  "name": "hashbrown::table::{impl#0}::with_capacity",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:87:5:91:6",
  "doc": "/// Creates an empty `HashTable` with the specified capacity.\n///\n/// The hash table will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash table will not allocate.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashTable;\n/// let mut table: HashTable<&str> = HashTable::with_capacity(10);\n/// assert_eq!(table.len(), 0);\n/// assert!(table.capacity() >= 10);\n/// ```\n",
  "code": [
    "pub fn with_capacity(capacity: usize) -> Self {",
    "    Self {",
    "        raw: RawTable::with_capacity(capacity),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            raw: RawTable::with_capacity(capacity),\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}