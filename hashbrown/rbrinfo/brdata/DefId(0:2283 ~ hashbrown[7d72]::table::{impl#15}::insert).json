{
  "name": "hashbrown::table::{impl#15}::insert",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1863:5:1874:6",
  "doc": "/// Inserts a new element into the table with the hash that was used to\n/// obtain the `VacantEntry`.\n///\n/// An `OccupiedEntry` is returned for the newly inserted element.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::hash_table::Entry;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<&str> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// if let Entry::Vacant(o) = table.entry(hasher(&\"poneyland\"), |&x| x == \"poneyland\", hasher) {\n///     o.insert(\"poneyland\");\n/// }\n/// assert_eq!(\n///     table.find(hasher(&\"poneyland\"), |&x| x == \"poneyland\"),\n///     Some(&\"poneyland\")\n/// );\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn insert(self, value: T) -> OccupiedEntry<'a, T, A> {",
    "    let bucket = unsafe {",
    "        self.table",
    "            .raw",
    "            .insert_in_slot(self.hash, self.insert_slot, value)",
    "    };",
    "    OccupiedEntry {",
    "        hash: self.hash,",
    "        bucket,",
    "        table: self.table,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "OccupiedEntry {\n            hash: self.hash,\n            bucket,\n            table: self.table,\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}