{
  "name": "hashbrown::map::{impl#4}::drain",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:888:5:892:6",
  "doc": "/// Clears the map, returning all key-value pairs as an iterator. Keeps the\n/// allocated memory for reuse.\n///\n/// If the returned iterator is dropped before being fully consumed, it\n/// drops the remaining key-value pairs. The returned iterator keeps a\n/// mutable borrow on the vector to optimize its implementation.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut a = HashMap::new();\n/// a.insert(1, \"a\");\n/// a.insert(2, \"b\");\n/// let capacity_before_drain = a.capacity();\n///\n/// for (k, v) in a.drain().take(1) {\n///     assert!(k == 1 || k == 2);\n///     assert!(v == \"a\" || v == \"b\");\n/// }\n///\n/// // As we can see, the map is empty and contains no element.\n/// assert!(a.is_empty() && a.len() == 0);\n/// // But map capacity is equal to old one.\n/// assert_eq!(a.capacity(), capacity_before_drain);\n///\n/// let mut a = HashMap::new();\n/// a.insert(1, \"a\");\n/// a.insert(2, \"b\");\n///\n/// {   // Iterator is dropped without being consumed.\n///     let d = a.drain();\n/// }\n///\n/// // But the map is empty even if we do not use Drain iterator.\n/// assert!(a.is_empty());\n/// ```\n",
  "code": [
    "pub fn drain(&mut self) -> Drain<'_, K, V, A> {",
    "    Drain {",
    "        inner: self.table.drain(),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Drain {\n            inner: self.table.drain(),\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}