{
  "name": "hashbrown::raw::{impl#8}::bucket",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:736:5:764:6",
  "doc": "/// Returns a pointer to an element in the table.\n///\n/// The caller must ensure that the `RawTable` outlives the returned [`Bucket<T>`],\n/// otherwise using it may result in [`undefined behavior`].\n///\n/// # Safety\n///\n/// If `mem::size_of::<T>() != 0`, then the caller of this function must observe the\n/// following safety rules:\n///\n/// * The table must already be allocated;\n///\n/// * The `index` must not be greater than the number returned by the [`RawTable::buckets`]\n///   function, i.e. `(index + 1) <= self.buckets()`.\n///\n/// It is safe to call this function with index of zero (`index == 0`) on a table that has\n/// not been allocated, but using the returned [`Bucket`] results in [`undefined behavior`].\n///\n/// If `mem::size_of::<T>() == 0`, then the only requirement is that the `index` must\n/// not be greater than the number returned by the [`RawTable::buckets`] function, i.e.\n/// `(index + 1) <= self.buckets()`.\n///\n/// [`RawTable::buckets`]: RawTable::buckets\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "pub unsafe fn bucket(&self, index: usize) -> Bucket<T> {",
    "    // If mem::size_of::<T>() != 0 then return a pointer to the `element` in the `data part` of the table",
    "    // (we start counting from \"0\", so that in the expression T[n], the \"n\" index actually one less than",
    "    // the \"buckets\" number of our `RawTable`, i.e. \"n = RawTable::buckets() - 1\"):",
    "    //",
    "    //           `table.bucket(3).as_ptr()` returns a pointer that points here in the `data`",
    "    //           part of the `RawTable`, i.e. to the start of T3 (see `Bucket::as_ptr`)",
    "    //                  |",
    "    //                  |               `base = self.data_end()` points here",
    "    //                  |               (to the start of CT0 or to the end of T0)",
    "    //                  v                 v",
    "    // [Pad], T_n, ..., |T3|, T2, T1, T0, |CT0, CT1, CT2, CT3, ..., CT_n, CTa_0, CTa_1, ..., CTa_m",
    "    //                     ^                                              \\__________  __________/",
    "    //        `table.bucket(3)` returns a pointer that points                        \\/",
    "    //         here in the `data` part of the `RawTable` (to              additional control bytes",
    "    //         the end of T3)                                              `m = Group::WIDTH - 1`",
    "    //",
    "    // where: T0...T_n  - our stored data;",
    "    //        CT0...CT_n - control bytes or metadata for `data`;",
    "    //        CTa_0...CTa_m - additional control bytes (so that the search with loading `Group` bytes from",
    "    //                        the heap works properly, even if the result of `h1(hash) & self.table.bucket_mask`",
    "    //                        is equal to `self.table.bucket_mask`). See also `RawTableInner::set_ctrl` function.",
    "    //",
    "    // P.S. `h1(hash) & self.table.bucket_mask` is the same as `hash as usize % self.buckets()` because the number",
    "    // of buckets is a power of two, and `self.table.bucket_mask = self.buckets() - 1`.",
    "    debug_assert_ne!(self.table.bucket_mask, 0);",
    "    debug_assert!(index < self.buckets());",
    "    Bucket::from_base_index(self.data_end(), index)",
    "}"
  ],
  "size": {
    "chain": 3,
    "contra": 0,
    "min_set": 3
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        14
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "index < self.buckets()",
          "norm": null,
          "value": "true",
          "line": 762,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        8,
        11,
        12,
        13
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "index < self.buckets()",
          "norm": null,
          "value": "false",
          "line": 762,
          "bound": "index == self.buckets()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        14
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}