{
  "name": "hashbrown::table::{impl#1}::reserve",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:550:5:552:6",
  "doc": "/// Reserves capacity for at least `additional` more elements to be inserted\n/// in the `HashTable`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// `hasher` is called if entries need to be moved or copied to a new table.\n/// This must return the same hash value that each entry was inserted with.\n///\n/// # Panics\n///\n/// Panics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\n/// in case of allocation error. Use [`try_reserve`](HashTable::try_reserve) instead\n/// if you want to handle memory allocation failure.\n///\n/// [`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n/// [`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<i32> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.reserve(10, hasher);\n/// assert!(table.capacity() >= 10);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn reserve(&mut self, additional: usize, hasher: impl Fn(&T) -> u64) {",
    "    self.raw.reserve(additional, hasher)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}