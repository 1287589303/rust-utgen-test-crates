{
  "name": "hashbrown::table::{impl#1}::find_entry",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:299:5:312:6",
  "doc": "/// Returns an `OccupiedEntry` for an entry in the table with the given hash\n/// and which satisfies the equality function passed.\n///\n/// This can be used to remove the entry from the table. Call\n/// [`HashTable::entry`] instead if you wish to insert an entry if the\n/// lookup fails.\n///\n/// This method will call `eq` for all entries with the given hash, but may\n/// also call it for entries with a different hash. `eq` should only return\n/// true for the desired entry, at which point the search is stopped.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// table.insert_unique(hasher(&1), (1, \"a\"), |val| hasher(&val.0));\n/// if let Ok(entry) = table.find_entry(hasher(&1), |val| val.0 == 1) {\n///     entry.remove();\n/// }\n/// assert_eq!(table.find(hasher(&1), |val| val.0 == 1), None);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn find_entry(",
    "    &mut self,",
    "    hash: u64,",
    "    eq: impl FnMut(&T) -> bool,",
    ") -> Result<OccupiedEntry<'_, T, A>, AbsentEntry<'_, T, A>> {",
    "    match self.raw.find(hash, eq) {",
    "        Some(bucket) => Ok(OccupiedEntry {",
    "            hash,",
    "            bucket,",
    "            table: self,",
    "        }),",
    "        None => Err(AbsentEntry { table: self }),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.raw.find(hash, eq) matches Some(bucket)",
          "norm": null,
          "value": "true",
          "line": 304,
          "bound": null
        },
        {
          "cond": "self.raw.find(hash, eq) matches Some(bucket)",
          "norm": null,
          "value": "true",
          "line": 304,
          "bound": null
        }
      ],
      "ret": "Ok(OccupiedEntry {\n                hash,\n                bucket,\n                table: self,\n            })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.raw.find(hash, eq) matches None",
          "norm": null,
          "value": "true",
          "line": 304,
          "bound": null
        }
      ],
      "ret": "Err(AbsentEntry { table: self })",
      "path": [
        0,
        1,
        4,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}