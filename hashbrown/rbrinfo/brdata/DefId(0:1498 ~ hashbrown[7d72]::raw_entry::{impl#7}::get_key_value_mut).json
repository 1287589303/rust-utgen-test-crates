{
  "name": "hashbrown::raw_entry::{impl#7}::get_key_value_mut",
  "mod_info": {
    "name": "raw_entry",
    "loc": "src/lib.rs:80:1:80:15"
  },
  "visible": true,
  "loc": "src/raw_entry.rs:1105:5:1110:6",
  "doc": "/// Gets a mutable reference to the key and value in the entry.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{HashMap, RawEntryMut};\n/// use std::rc::Rc;\n///\n/// let key_one = Rc::new(\"a\");\n/// let key_two = Rc::new(\"a\");\n///\n/// let mut map: HashMap<Rc<&str>, u32> = HashMap::new();\n/// map.insert(key_one.clone(), 10);\n///\n/// assert_eq!(map[&key_one], 10);\n/// assert!(Rc::strong_count(&key_one) == 2 && Rc::strong_count(&key_two) == 1);\n///\n/// match map.raw_entry_mut().from_key(&key_one) {\n///     RawEntryMut::Vacant(_) => panic!(),\n///     RawEntryMut::Occupied(mut o) => {\n///         let (inside_key, inside_value) = o.get_key_value_mut();\n///         *inside_key = key_two.clone();\n///         *inside_value = 100;\n///     }\n/// }\n/// assert_eq!(map[&key_two], 100);\n/// assert!(Rc::strong_count(&key_one) == 1 && Rc::strong_count(&key_two) == 2);\n/// ```\n",
  "code": [
    "pub fn get_key_value_mut(&mut self) -> (&mut K, &mut V) {",
    "    unsafe {",
    "        let &mut (ref mut key, ref mut value) = self.elem.as_mut();",
    "        (key, value)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(key, value)",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}