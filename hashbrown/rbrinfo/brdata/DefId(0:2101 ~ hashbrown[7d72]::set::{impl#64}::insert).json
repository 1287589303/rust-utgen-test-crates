{
  "name": "hashbrown::set::{impl#64}::insert",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:2532:5:2540:6",
  "doc": "/// Sets the value of the entry with the `VacantEntry`'s value.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// use hashbrown::hash_set::Entry;\n///\n/// let mut set: HashSet<&str> = HashSet::new();\n///\n/// if let Entry::Vacant(o) = set.entry(\"poneyland\") {\n///     o.insert();\n/// }\n/// assert!(set.contains(\"poneyland\"));\n/// ```\n",
  "code": [
    "pub fn insert(self) -> OccupiedEntry<'a, T, S, A>",
    "where",
    "    T: Hash,",
    "    S: BuildHasher,",
    "{",
    "    OccupiedEntry {",
    "        inner: self.inner.insert_entry(()),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "OccupiedEntry {\n            inner: self.inner.insert_entry(()),\n        }",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}