{
  "name": "hashbrown::raw::{impl#8}::insert",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:1023:5:1047:6",
  "doc": "/// Inserts a new element into the table, and returns its raw bucket.\n///\n/// This does not check if the given element already exists in the table.\n",
  "code": [
    "pub fn insert(&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T> {",
    "    unsafe {",
    "        // SAFETY:",
    "        // 1. The [`RawTableInner`] must already have properly initialized control bytes since",
    "        //    we will never expose `RawTable::new_uninitialized` in a public API.",
    "        //",
    "        // 2. We reserve additional space (if necessary) right after calling this function.",
    "        let mut slot = self.table.find_insert_slot(hash);",
    "",
    "        // We can avoid growing the table once we have reached our load factor if we are replacing",
    "        // a tombstone. This works since the number of EMPTY slots does not change in this case.",
    "        //",
    "        // SAFETY: The function is guaranteed to return [`InsertSlot`] that contains an index",
    "        // in the range `0..=self.buckets()`.",
    "        let old_ctrl = *self.table.ctrl(slot.index);",
    "        if unlikely(self.table.growth_left == 0 && old_ctrl.special_is_empty()) {",
    "            self.reserve(1, hasher);",
    "            // SAFETY: We know for sure that `RawTableInner` has control bytes",
    "            // initialized and that there is extra space in the table.",
    "            slot = self.table.find_insert_slot(hash);",
    "        }",
    "",
    "        self.insert_in_slot(hash, slot, value)",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.table.growth_left == 0",
          "norm": "0 == self.table.growth_left",
          "value": "false",
          "line": 1038,
          "bound": null
        },
        {
          "cond": "unlikely(self.table.growth_left == 0 && old_ctrl.special_is_empty())",
          "norm": null,
          "value": "true",
          "line": 1038,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.table.growth_left == 0",
          "norm": "0 == self.table.growth_left",
          "value": "false",
          "line": 1038,
          "bound": null
        },
        {
          "cond": "unlikely(self.table.growth_left == 0 && old_ctrl.special_is_empty())",
          "norm": null,
          "value": "false",
          "line": 1038,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "self.table.growth_left == 0",
          "norm": "0 == self.table.growth_left",
          "value": "true",
          "line": 1038,
          "bound": null
        },
        {
          "cond": "unlikely(self.table.growth_left == 0 && old_ctrl.special_is_empty())",
          "norm": null,
          "value": "true",
          "line": 1038,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        8,
        9,
        10,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "self.table.growth_left == 0",
          "norm": "0 == self.table.growth_left",
          "value": "true",
          "line": 1038,
          "bound": null
        },
        {
          "cond": "unlikely(self.table.growth_left == 0 && old_ctrl.special_is_empty())",
          "norm": null,
          "value": "false",
          "line": 1038,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        6,
        7,
        11,
        12,
        13,
        14,
        15
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}