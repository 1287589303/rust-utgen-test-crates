{
  "name": "hashbrown::raw::{impl#17}::drop",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": true,
  "loc": "src/raw/mod.rs:3325:5:3337:6",
  "doc": "",
  "code": [
    "fn drop(&mut self) {",
    "    unsafe {",
    "        // SAFETY:",
    "        // 1. We call the function only once;",
    "        // 2. We know for sure that `alloc` and `table_layout` matches the [`Allocator`]",
    "        //    and [`TableLayout`] that were used to allocate this table.",
    "        // 3. If the drop function of any elements fails, then only a memory leak will occur,",
    "        //    and we don't care because we are inside the `Drop` function of the `RawTable`,",
    "        //    so there won't be any table left in an inconsistent state.",
    "        self.table",
    "            .drop_inner_table::<T, _>(&self.alloc, Self::TABLE_LAYOUT);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}