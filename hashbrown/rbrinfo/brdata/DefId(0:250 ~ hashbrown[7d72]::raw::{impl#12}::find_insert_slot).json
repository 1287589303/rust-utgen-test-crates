{
  "name": "hashbrown::raw::{impl#12}::find_insert_slot",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:1807:5:1839:6",
  "doc": "/// Searches for an empty or deleted bucket which is suitable for inserting\n/// a new element, returning the `index` for the new [`Bucket`].\n///\n/// This function does not make any changes to the `data` part of the table, or any\n/// changes to the `items` or `growth_left` field of the table.\n///\n/// The table must have at least 1 empty or deleted `bucket`, otherwise this function\n/// will never return (will go into an infinite loop) for tables larger than the group\n/// width, or return an index outside of the table indices range if the table is less\n/// than the group width.\n///\n/// If there is at least 1 empty or deleted `bucket` in the table, the function is\n/// guaranteed to return [`InsertSlot`] with an index in the range `0..self.buckets()`,\n/// but in any case, if this function returns [`InsertSlot`], it will contain an index\n/// in the range `0..=self.buckets()`.\n///\n/// # Safety\n///\n/// The [`RawTableInner`] must have properly initialized control bytes otherwise calling\n/// this function results in [`undefined behavior`].\n///\n/// Attempt to write data at the [`InsertSlot`] returned by this function when the table is\n/// less than the group width and if there was not at least one empty or deleted bucket in\n/// the table will cause immediate [`undefined behavior`]. This is because in this case the\n/// function will return `self.bucket_mask + 1` as an index due to the trailing [`Tag::EMPTY`]\n/// control bytes outside the table range.\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn find_insert_slot(&self, hash: u64) -> InsertSlot {",
    "    let mut probe_seq = self.probe_seq(hash);",
    "    loop {",
    "        // SAFETY:",
    "        // * Caller of this function ensures that the control bytes are properly initialized.",
    "        //",
    "        // * `ProbeSeq.pos` cannot be greater than `self.bucket_mask = self.buckets() - 1`",
    "        //   of the table due to masking with `self.bucket_mask` and also because the number",
    "        //   of buckets is a power of two (see `self.probe_seq` function).",
    "        //",
    "        // * Even if `ProbeSeq.pos` returns `position == self.bucket_mask`, it is safe to",
    "        //   call `Group::load` due to the extended control bytes range, which is",
    "        //  `self.bucket_mask + 1 + Group::WIDTH` (in fact, this means that the last control",
    "        //   byte will never be read for the allocated table);",
    "        //",
    "        // * Also, even if `RawTableInner` is not already allocated, `ProbeSeq.pos` will",
    "        //   always return \"0\" (zero), so Group::load will read unaligned `Group::static_empty()`",
    "        //   bytes, which is safe (see RawTableInner::new).",
    "        let group = unsafe { Group::load(self.ctrl(probe_seq.pos)) };",
    "",
    "        let index = self.find_insert_slot_in_group(&group, &probe_seq);",
    "        if likely(index.is_some()) {",
    "            // SAFETY:",
    "            // * Caller of this function ensures that the control bytes are properly initialized.",
    "            //",
    "            // * We use this function with the slot / index found by `self.find_insert_slot_in_group`",
    "            unsafe {",
    "                return self.fix_insert_slot(index.unwrap_unchecked());",
    "            }",
    "        }",
    "        probe_seq.move_next(self.bucket_mask);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 1,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "likely(index.is_some())",
          "norm": null,
          "value": "true",
          "line": 1828,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "likely(index.is_some())",
          "norm": null,
          "value": "false",
          "line": 1828,
          "bound": null
        },
        {
          "cond": "likely(index.is_some())",
          "norm": null,
          "value": "true",
          "line": 1828,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        12,
        13,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11
      ],
      "may_contra": true,
      "min_set": true
    }
  ]
}