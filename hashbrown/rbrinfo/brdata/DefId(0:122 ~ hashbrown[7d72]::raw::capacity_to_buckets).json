{
  "name": "hashbrown::raw::capacity_to_buckets",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:103:1:125:2",
  "doc": "/// Returns the number of buckets needed to hold the given number of items,\n/// taking the maximum load factor into account.\n///\n/// Returns `None` if an overflow occurs.\n",
  "code": [
    "fn capacity_to_buckets(cap: usize) -> Option<usize> {",
    "    debug_assert_ne!(cap, 0);",
    "",
    "    // For small tables we require at least 1 empty bucket so that lookups are",
    "    // guaranteed to terminate if an element doesn't exist in the table.",
    "    if cap < 8 {",
    "        // We don't bother with a table size of 2 buckets since that can only",
    "        // hold a single element. Instead we skip directly to a 4 bucket table",
    "        // which can hold 3 elements.",
    "        return Some(if cap < 4 { 4 } else { 8 });",
    "    }",
    "",
    "    // Otherwise require 1/8 buckets to be empty (87.5% load)",
    "    //",
    "    // Be careful when modifying this, calculate_layout relies on the",
    "    // overflow check here.",
    "    let adjusted_cap = cap.checked_mul(8)? / 7;",
    "",
    "    // Any overflows will have been caught by the checked_mul. Also, any",
    "    // rounding errors from the division above will be cleaned up by",
    "    // next_power_of_two (which can't overflow because of the previous division).",
    "    Some(adjusted_cap.next_power_of_two())",
    "}"
  ],
  "size": {
    "chain": 5,
    "contra": 0,
    "min_set": 5
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "true",
          "line": 90,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        21
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "cap < 8",
          "norm": "8 > cap",
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "cap < 4",
          "norm": "4 > cap",
          "value": "true",
          "line": 112,
          "bound": null
        }
      ],
      "ret": "Some(if cap < 4 { 4 } else { 8 })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        7,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "cap < 8",
          "norm": "8 > cap",
          "value": "true",
          "line": 108,
          "bound": null
        },
        {
          "cond": "cap < 4",
          "norm": "4 > cap",
          "value": "false",
          "line": 112,
          "bound": "cap == 4"
        }
      ],
      "ret": "Some(if cap < 4 { 4 } else { 8 })",
      "path": [
        0,
        1,
        3,
        5,
        6,
        8,
        9,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "cap < 8",
          "norm": "8 > cap",
          "value": "false",
          "line": 108,
          "bound": "cap == 8"
        },
        {
          "cond": "cap.checked_mul(8)?",
          "norm": null,
          "value": "Err/None",
          "line": 119,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        3,
        5,
        10,
        11,
        12,
        14,
        16,
        17,
        20
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 5,
      "conds": [
        {
          "cond": "*left_val == *right_val",
          "norm": null,
          "value": "false",
          "line": 90,
          "bound": null
        },
        {
          "cond": "cap < 8",
          "norm": "8 > cap",
          "value": "false",
          "line": 108,
          "bound": "cap == 8"
        },
        {
          "cond": "cap.checked_mul(8)?",
          "norm": null,
          "value": "Ok/Some",
          "line": 119,
          "bound": null
        }
      ],
      "ret": "Some(adjusted_cap.next_power_of_two())",
      "path": [
        0,
        1,
        3,
        5,
        10,
        11,
        12,
        15,
        18,
        19,
        20
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}