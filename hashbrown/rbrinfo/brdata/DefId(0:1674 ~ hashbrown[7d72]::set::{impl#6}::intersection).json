{
  "name": "hashbrown::set::{impl#6}::intersection",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:799:5:809:6",
  "doc": "/// Visits the values representing the intersection,\n/// i.e., the values that are both in `self` and `other`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let a: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = [4, 2, 3, 4].into_iter().collect();\n///\n/// // Print 2, 3 in arbitrary order.\n/// for x in a.intersection(&b) {\n///     println!(\"{}\", x);\n/// }\n///\n/// let intersection: HashSet<_> = a.intersection(&b).collect();\n/// assert_eq!(intersection, [2, 3].iter().collect());\n/// ```\n",
  "code": [
    "pub fn intersection<'a>(&'a self, other: &'a Self) -> Intersection<'a, T, S, A> {",
    "    let (smaller, larger) = if self.len() <= other.len() {",
    "        (self, other)",
    "    } else {",
    "        (other, self)",
    "    };",
    "    Intersection {",
    "        iter: smaller.iter(),",
    "        other: larger,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.len() <= other.len()",
          "norm": "other.len() >= self.len()",
          "value": "true",
          "line": 800,
          "bound": "self.len() == other.len()"
        }
      ],
      "ret": "Intersection {\n            iter: smaller.iter(),\n            other: larger,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.len() <= other.len()",
          "norm": "other.len() >= self.len()",
          "value": "false",
          "line": 800,
          "bound": null
        }
      ],
      "ret": "Intersection {\n            iter: smaller.iter(),\n            other: larger,\n        }",
      "path": [
        0,
        1,
        2,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}