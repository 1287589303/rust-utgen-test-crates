{
  "name": "hashbrown::table::{impl#1}::insert_unique",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:404:5:416:6",
  "doc": "/// Inserts an element into the `HashTable` with the given hash value, but\n/// without checking whether an equivalent element already exists within the\n/// table.\n///\n/// `hasher` is called if entries need to be moved or copied to a new table.\n/// This must return the same hash value that each entry was inserted with.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut v = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n/// v.insert_unique(hasher(&1), 1, hasher);\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn insert_unique(",
    "    &mut self,",
    "    hash: u64,",
    "    value: T,",
    "    hasher: impl Fn(&T) -> u64,",
    ") -> OccupiedEntry<'_, T, A> {",
    "    let bucket = self.raw.insert(hash, value, hasher);",
    "    OccupiedEntry {",
    "        hash,",
    "        bucket,",
    "        table: self,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "OccupiedEntry {\n            hash,\n            bucket,\n            table: self,\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}