{
  "name": "hashbrown::scopeguard::{impl#0}::into_inner",
  "mod_info": {
    "name": "scopeguard",
    "loc": "src/lib.rs:83:1:83:16"
  },
  "visible": true,
  "loc": "src/scopeguard.rs:29:5:40:6",
  "doc": "",
  "code": [
    "pub fn into_inner(guard: Self) -> T {",
    "    // Cannot move out of Drop-implementing types, so",
    "    // ptr::read the value out of a ManuallyDrop<Self>",
    "    // Don't use mem::forget as that might invalidate value",
    "    let guard = ManuallyDrop::new(guard);",
    "    unsafe {",
    "        let value = ptr::read(&guard.value);",
    "        // read the closure so that it is dropped",
    "        let _ = ptr::read(&guard.dropfn);",
    "        value",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "value",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}