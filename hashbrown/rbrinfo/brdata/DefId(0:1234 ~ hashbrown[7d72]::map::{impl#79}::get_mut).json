{
  "name": "hashbrown::map::{impl#79}::get_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3851:5:3853:6",
  "doc": "/// Gets a mutable reference to the value in the entry.\n///\n/// If you need a reference to the `OccupiedEntry` which may outlive the\n/// destruction of the `Entry` value, see [`into_mut`].\n///\n/// [`into_mut`]: #method.into_mut\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::Entry;\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// map.entry(\"poneyland\").or_insert(12);\n///\n/// assert_eq!(map[\"poneyland\"], 12);\n/// if let Entry::Occupied(mut o) = map.entry(\"poneyland\") {\n///     *o.get_mut() += 10;\n///     assert_eq!(*o.get(), 22);\n///\n///     // We can use the same Entry multiple times.\n///     *o.get_mut() += 2;\n/// }\n///\n/// assert_eq!(map[\"poneyland\"], 24);\n/// ```\n",
  "code": [
    "pub fn get_mut(&mut self) -> &mut V {",
    "    unsafe { &mut self.elem.as_mut().1 }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { &mut self.elem.as_mut().1 }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}