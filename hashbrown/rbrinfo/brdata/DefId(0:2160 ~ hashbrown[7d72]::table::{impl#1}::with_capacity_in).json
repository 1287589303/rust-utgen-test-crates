{
  "name": "hashbrown::table::{impl#1}::with_capacity_in",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:183:5:187:6",
  "doc": "/// Creates an empty `HashTable` with the specified capacity using the given allocator.\n///\n/// The hash table will be able to hold at least `capacity` elements without\n/// reallocating. If `capacity` is 0, the hash table will not allocate.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use bumpalo::Bump;\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let bump = Bump::new();\n/// let mut table = HashTable::with_capacity_in(5, &bump);\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// // The created HashTable holds none elements\n/// assert_eq!(table.len(), 0);\n/// // But it can hold at least 5 elements without reallocating\n/// let empty_map_capacity = table.capacity();\n/// assert!(empty_map_capacity >= 5);\n///\n/// // Now we insert some 5 elements inside created HashTable\n/// table.insert_unique(hasher(&\"One\"), \"One\", hasher);\n/// table.insert_unique(hasher(&\"Two\"), \"Two\", hasher);\n/// table.insert_unique(hasher(&\"Three\"), \"Three\", hasher);\n/// table.insert_unique(hasher(&\"Four\"), \"Four\", hasher);\n/// table.insert_unique(hasher(&\"Five\"), \"Five\", hasher);\n///\n/// // We can see that the HashTable holds 5 elements\n/// assert_eq!(table.len(), 5);\n/// // But its capacity isn't changed\n/// assert_eq!(table.capacity(), empty_map_capacity)\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn with_capacity_in(capacity: usize, alloc: A) -> Self {",
    "    Self {",
    "        raw: RawTable::with_capacity_in(capacity, alloc),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "Self {\n            raw: RawTable::with_capacity_in(capacity, alloc),\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}