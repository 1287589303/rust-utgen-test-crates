{
  "name": "hashbrown::map::{impl#5}::get_many_key_value_unchecked_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1720:5:1729:6",
  "doc": "/// Attempts to get mutable references to `N` values in the map at once, with immutable\n/// references to the corresponding keys, without validating that the values are unique.\n///\n/// Returns an array of length `N` with the results of each query. `None` will be returned if\n/// any of the keys are missing.\n///\n/// For a safe alternative see [`get_many_key_value_mut`](`HashMap::get_many_key_value_mut`).\n///\n/// # Safety\n///\n/// Calling this method with overlapping keys is *[undefined behavior]* even if the resulting\n/// references are not used.\n///\n/// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut libraries = HashMap::new();\n/// libraries.insert(\"Bodleian Library\".to_string(), 1602);\n/// libraries.insert(\"Athen√¶um\".to_string(), 1807);\n/// libraries.insert(\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), 1691);\n/// libraries.insert(\"Library of Congress\".to_string(), 1800);\n///\n/// let got = libraries.get_many_key_value_mut([\n///     \"Bodleian Library\",\n///     \"Herzogin-Anna-Amalia-Bibliothek\",\n/// ]);\n/// assert_eq!(\n///     got,\n///     [\n///         Some((&\"Bodleian Library\".to_string(), &mut 1602)),\n///         Some((&\"Herzogin-Anna-Amalia-Bibliothek\".to_string(), &mut 1691)),\n///     ],\n/// );\n/// // Missing keys result in None\n/// let got = libraries.get_many_key_value_mut([\n///     \"Bodleian Library\",\n///     \"Gewandhaus\",\n/// ]);\n/// assert_eq!(\n///     got,\n///     [\n///         Some((&\"Bodleian Library\".to_string(), &mut 1602)),\n///         None,\n///     ],\n/// );\n/// ```\n",
  "code": [
    "pub unsafe fn get_many_key_value_unchecked_mut<Q, const N: usize>(",
    "    &mut self,",
    "    ks: [&Q; N],",
    ") -> [Option<(&'_ K, &'_ mut V)>; N]",
    "where",
    "    Q: Hash + Equivalent<K> + ?Sized,",
    "{",
    "    self.get_many_unchecked_mut_inner(ks)",
    "        .map(|res| res.map(|(k, v)| (&*k, v)))",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}