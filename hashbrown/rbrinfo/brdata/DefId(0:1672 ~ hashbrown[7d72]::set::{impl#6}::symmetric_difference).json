{
  "name": "hashbrown::set::{impl#6}::symmetric_difference",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:774:5:778:6",
  "doc": "/// Visits the values representing the symmetric difference,\n/// i.e., the values that are in `self` or in `other` but not in both.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n/// let a: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let b: HashSet<_> = [4, 2, 3, 4].into_iter().collect();\n///\n/// // Print 1, 4 in arbitrary order.\n/// for x in a.symmetric_difference(&b) {\n///     println!(\"{}\", x);\n/// }\n///\n/// let diff1: HashSet<_> = a.symmetric_difference(&b).collect();\n/// let diff2: HashSet<_> = b.symmetric_difference(&a).collect();\n///\n/// assert_eq!(diff1, diff2);\n/// assert_eq!(diff1, [1, 4].iter().collect());\n/// ```\n",
  "code": [
    "pub fn symmetric_difference<'a>(&'a self, other: &'a Self) -> SymmetricDifference<'a, T, S, A> {",
    "    SymmetricDifference {",
    "        iter: self.difference(other).chain(other.difference(self)),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "SymmetricDifference {\n            iter: self.difference(other).chain(other.difference(self)),\n        }",
      "path": [
        0,
        1,
        2,
        3
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}