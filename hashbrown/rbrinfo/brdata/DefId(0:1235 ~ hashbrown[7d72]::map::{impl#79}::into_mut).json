{
  "name": "hashbrown::map::{impl#79}::into_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:3882:5:3884:6",
  "doc": "/// Converts the `OccupiedEntry` into a mutable reference to the value in the entry\n/// with a lifetime bound to the map itself.\n///\n/// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n///\n/// [`get_mut`]: #method.get_mut\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::{Entry, HashMap};\n///\n/// let mut map: HashMap<&str, u32> = HashMap::new();\n/// map.entry(\"poneyland\").or_insert(12);\n///\n/// assert_eq!(map[\"poneyland\"], 12);\n///\n/// let value: &mut u32;\n/// match map.entry(\"poneyland\") {\n///     Entry::Occupied(entry) => value = entry.into_mut(),\n///     Entry::Vacant(_) => panic!(),\n/// }\n/// *value += 10;\n///\n/// assert_eq!(map[\"poneyland\"], 22);\n/// ```\n",
  "code": [
    "pub fn into_mut(self) -> &'a mut V {",
    "    unsafe { &mut self.elem.as_mut().1 }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "unsafe { &mut self.elem.as_mut().1 }",
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}