{
  "name": "hashbrown::raw::{impl#6}::next_n",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:441:5:451:6",
  "doc": "/// Create a new [`Bucket`] that is offset from the `self` by the given\n/// `offset`. The pointer calculation is performed by calculating the\n/// offset from `self` pointer (convenience for `self.ptr.as_ptr().sub(offset)`).\n/// This function is used for iterators.\n///\n/// `offset` is in units of `T`; e.g., a `offset` of 3 represents a pointer\n/// offset of `3 * size_of::<T>()` bytes.\n///\n/// # Safety\n///\n/// If `mem::size_of::<T>() != 0`, then the safety rules are directly derived\n/// from the safety rules for [`<*mut T>::sub`] method of `*mut T` and safety\n/// rules of [`NonNull::new_unchecked`] function.\n///\n/// Thus, in order to uphold the safety contracts for [`<*mut T>::sub`] method\n/// and [`NonNull::new_unchecked`] function, as well as for the correct\n/// logic of the work of this crate, the following rules are necessary and\n/// sufficient:\n///\n/// * `self` contained pointer must not be `dangling`;\n///\n/// * `self.to_base_index() + offset` must not be greater than `RawTableInner.bucket_mask`,\n///   i.e. `(self.to_base_index() + offset) <= RawTableInner.bucket_mask` or, in other\n///   words, `self.to_base_index() + offset + 1` must be no greater than the number returned\n///   by the function [`RawTable::buckets`] or [`RawTableInner::buckets`].\n///\n/// If `mem::size_of::<T>() == 0`, then the only requirement is that the\n/// `self.to_base_index() + offset` must not be greater than `RawTableInner.bucket_mask`,\n/// i.e. `(self.to_base_index() + offset) <= RawTableInner.bucket_mask` or, in other words,\n/// `self.to_base_index() + offset + 1` must be no greater than the number returned by the\n/// function [`RawTable::buckets`] or [`RawTableInner::buckets`].\n///\n/// [`Bucket`]: crate::raw::Bucket\n/// [`<*mut T>::sub`]: https://doc.rust-lang.org/core/primitive.pointer.html#method.sub-1\n/// [`NonNull::new_unchecked`]: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.new_unchecked\n/// [`RawTable::buckets`]: crate::raw::RawTable::buckets\n/// [`RawTableInner::buckets`]: RawTableInner::buckets\n",
  "code": [
    "unsafe fn next_n(&self, offset: usize) -> Self {",
    "    let ptr = if T::IS_ZERO_SIZED {",
    "        // invalid pointer is good enough for ZST",
    "        invalid_mut(self.ptr.as_ptr() as usize + offset)",
    "    } else {",
    "        self.ptr.as_ptr().sub(offset)",
    "    };",
    "    Self {",
    "        ptr: NonNull::new_unchecked(ptr),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "true",
          "line": 442,
          "bound": null
        }
      ],
      "ret": "Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "T::IS_ZERO_SIZED",
          "norm": null,
          "value": "false",
          "line": 442,
          "bound": null
        }
      ],
      "ret": "Self {\n            ptr: NonNull::new_unchecked(ptr),\n        }",
      "path": [
        0,
        5,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}