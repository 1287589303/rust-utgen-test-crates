{
  "name": "hashbrown::map::{impl#86}::extend",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4567:5:4569:6",
  "doc": "/// Inserts all new key-values from the iterator to existing `HashMap<K, V, S, A>`.\n/// Replace values with existing keys with new values returned from the iterator.\n/// The keys and values must implement [`Copy`] trait.\n///\n/// [`Copy`]: https://doc.rust-lang.org/core/marker/trait.Copy.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::hash_map::HashMap;\n///\n/// let mut map = HashMap::new();\n/// map.insert(1, 100);\n///\n/// let arr = [(1, 1), (2, 2)];\n/// let some_iter = arr.iter().map(|(k, v)| (k, v));\n/// map.extend(some_iter);\n/// // Replace values with existing keys with new values returned from the iterator.\n/// // So that the map.get(&1) doesn't return Some(&100).\n/// assert_eq!(map.get(&1), Some(&1));\n///\n/// let some_vec: Vec<_> = vec![(3, 3), (4, 4)];\n/// map.extend(some_vec.iter().map(|(k, v)| (k, v)));\n///\n/// let some_arr = [(5, 5), (6, 6)];\n/// map.extend(some_arr.iter().map(|(k, v)| (k, v)));\n///\n/// // You can also extend from another HashMap\n/// let mut new_map = HashMap::new();\n/// new_map.extend(&map);\n/// assert_eq!(new_map, map);\n///\n/// let mut vec: Vec<_> = new_map.into_iter().collect();\n/// // The `IntoIter` iterator produces items in arbitrary order, so the\n/// // items must be sorted to test them against a sorted array.\n/// vec.sort_unstable();\n/// assert_eq!(vec, [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]);\n/// ```\n",
  "code": [
    "fn extend<T: IntoIterator<Item = (&'a K, &'a V)>>(&mut self, iter: T) {",
    "    self.extend(iter.into_iter().map(|(&key, &value)| (key, value)));",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}