{
  "name": "hashbrown::set::{impl#6}::is_subset",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:84:1:84:9"
  },
  "visible": true,
  "loc": "src/set.rs:1045:5:1047:6",
  "doc": "/// Returns `true` if the set is a subset of another,\n/// i.e., `other` contains at least all the values in `self`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashSet;\n///\n/// let sup: HashSet<_> = [1, 2, 3].into_iter().collect();\n/// let mut set = HashSet::new();\n///\n/// assert_eq!(set.is_subset(&sup), true);\n/// set.insert(2);\n/// assert_eq!(set.is_subset(&sup), true);\n/// set.insert(4);\n/// assert_eq!(set.is_subset(&sup), false);\n/// ```\n",
  "code": [
    "pub fn is_subset(&self, other: &Self) -> bool {",
    "    self.len() <= other.len() && self.iter().all(|v| other.contains(v))",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self.len() <= other.len()",
          "norm": "other.len() >= self.len()",
          "value": "true",
          "line": 1046,
          "bound": "self.len() == other.len()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        5,
        6,
        7
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self.len() <= other.len()",
          "norm": "other.len() >= self.len()",
          "value": "false",
          "line": 1046,
          "bound": null
        }
      ],
      "ret": "self.len() <= other.len() && self.iter().all(|v| other.contains(v))",
      "path": [
        0,
        1,
        2,
        4,
        7
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}