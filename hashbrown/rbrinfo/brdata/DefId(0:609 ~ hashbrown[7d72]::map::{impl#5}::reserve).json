{
  "name": "hashbrown::map::{impl#5}::reserve",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1103:5:1106:6",
  "doc": "/// Reserves capacity for at least `additional` more elements to be inserted\n/// in the `HashMap`. The collection may reserve more space to avoid\n/// frequent reallocations.\n///\n/// # Panics\n///\n/// Panics if the new capacity exceeds [`isize::MAX`] bytes and [`abort`] the program\n/// in case of allocation error. Use [`try_reserve`](HashMap::try_reserve) instead\n/// if you want to handle memory allocation failure.\n///\n/// [`isize::MAX`]: https://doc.rust-lang.org/std/primitive.isize.html\n/// [`abort`]: https://doc.rust-lang.org/alloc/alloc/fn.handle_alloc_error.html\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// let mut map: HashMap<&str, i32> = HashMap::new();\n/// // Map is empty and doesn't allocate memory\n/// assert_eq!(map.capacity(), 0);\n///\n/// map.reserve(10);\n///\n/// // And now map can hold at least 10 elements\n/// assert!(map.capacity() >= 10);\n/// ```\n",
  "code": [
    "pub fn reserve(&mut self, additional: usize) {",
    "    self.table",
    "        .reserve(additional, make_hasher::<_, V, S>(&self.hash_builder));",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}