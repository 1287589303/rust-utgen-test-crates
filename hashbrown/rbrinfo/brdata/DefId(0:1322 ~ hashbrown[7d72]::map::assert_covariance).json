{
  "name": "hashbrown::map::assert_covariance",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": false,
  "loc": "src/map.rs:4645:1:4685:2",
  "doc": "",
  "code": [
    "fn assert_covariance() {",
    "    fn map_key<'new>(v: HashMap<&'static str, u8>) -> HashMap<&'new str, u8> {",
    "        v",
    "    }",
    "    fn map_val<'new>(v: HashMap<u8, &'static str>) -> HashMap<u8, &'new str> {",
    "        v",
    "    }",
    "    fn iter_key<'a, 'new>(v: Iter<'a, &'static str, u8>) -> Iter<'a, &'new str, u8> {",
    "        v",
    "    }",
    "    fn iter_val<'a, 'new>(v: Iter<'a, u8, &'static str>) -> Iter<'a, u8, &'new str> {",
    "        v",
    "    }",
    "    fn into_iter_key<'new, A: Allocator>(",
    "        v: IntoIter<&'static str, u8, A>,",
    "    ) -> IntoIter<&'new str, u8, A> {",
    "        v",
    "    }",
    "    fn into_iter_val<'new, A: Allocator>(",
    "        v: IntoIter<u8, &'static str, A>,",
    "    ) -> IntoIter<u8, &'new str, A> {",
    "        v",
    "    }",
    "    fn keys_key<'a, 'new>(v: Keys<'a, &'static str, u8>) -> Keys<'a, &'new str, u8> {",
    "        v",
    "    }",
    "    fn keys_val<'a, 'new>(v: Keys<'a, u8, &'static str>) -> Keys<'a, u8, &'new str> {",
    "        v",
    "    }",
    "    fn values_key<'a, 'new>(v: Values<'a, &'static str, u8>) -> Values<'a, &'new str, u8> {",
    "        v",
    "    }",
    "    fn values_val<'a, 'new>(v: Values<'a, u8, &'static str>) -> Values<'a, u8, &'new str> {",
    "        v",
    "    }",
    "    fn drain<'new>(",
    "        d: Drain<'static, &'static str, &'static str>,",
    "    ) -> Drain<'new, &'new str, &'new str> {",
    "        d",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}