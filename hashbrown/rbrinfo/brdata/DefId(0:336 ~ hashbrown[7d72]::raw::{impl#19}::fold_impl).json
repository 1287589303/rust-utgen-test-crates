{
  "name": "hashbrown::raw::{impl#19}::fold_impl",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:3516:5:3568:6",
  "doc": "/// Folds every element into an accumulator by applying an operation,\n/// returning the final result.\n///\n/// `fold_impl()` takes three arguments: the number of items remaining in\n/// the iterator, an initial value, and a closure with two arguments: an\n/// 'accumulator', and an element. The closure returns the value that the\n/// accumulator should have for the next iteration.\n///\n/// The initial value is the value the accumulator will have on the first call.\n///\n/// After applying this closure to every element of the iterator, `fold_impl()`\n/// returns the accumulator.\n///\n/// # Safety\n///\n/// If any of the following conditions are violated, the result is\n/// [`Undefined Behavior`]:\n///\n/// * The [`RawTableInner`] / [`RawTable`] must be alive and not moved,\n///   i.e. table outlives the `RawIterRange`;\n///\n/// * The provided `n` value must match the actual number of items\n///   in the table.\n///\n/// [`Undefined Behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn fold_impl<F, B>(mut self, mut n: usize, mut acc: B, mut f: F) -> B",
    "where",
    "    F: FnMut(B, Bucket<T>) -> B,",
    "{",
    "    loop {",
    "        while let Some(index) = self.current_group.next() {",
    "            // The returned `index` will always be in the range `0..Group::WIDTH`,",
    "            // so that calling `self.data.next_n(index)` is safe (see detailed explanation below).",
    "            debug_assert!(n != 0);",
    "            let bucket = self.data.next_n(index);",
    "            acc = f(acc, bucket);",
    "            n -= 1;",
    "        }",
    "",
    "        if n == 0 {",
    "            return acc;",
    "        }",
    "",
    "        // SAFETY: The caller of this function ensures that:",
    "        //",
    "        // 1. The provided `n` value matches the actual number of items in the table;",
    "        // 2. The table is alive and did not moved.",
    "        //",
    "        // Taking the above into account, we always stay within the bounds, because:",
    "        //",
    "        // 1. For tables smaller than the group width (self.buckets() <= Group::WIDTH),",
    "        //    we will never end up in the given branch, since we should have already",
    "        //    yielded all the elements of the table.",
    "        //",
    "        // 2. For tables larger than the group width. The number of buckets is a",
    "        //    power of two (2 ^ n), Group::WIDTH is also power of two (2 ^ k). Since",
    "        //    `(2 ^ n) > (2 ^ k)`, than `(2 ^ n) % (2 ^ k) = 0`. As we start from the",
    "        //    start of the array of control bytes, and never try to iterate after",
    "        //    getting all the elements, the last `self.current_group` will read bytes",
    "        //    from the `self.buckets() - Group::WIDTH` index.  We know also that",
    "        //    `self.current_group.next()` will always return indices within the range",
    "        //    `0..Group::WIDTH`.",
    "        //",
    "        //    Knowing all of the above and taking into account that we are synchronizing",
    "        //    the `self.data` index with the index we used to read the `self.current_group`,",
    "        //    the subsequent `self.data.next_n(index)` will always return a bucket with",
    "        //    an index number less than `self.buckets()`.",
    "        //",
    "        //    The last `self.next_ctrl`, whose index would be `self.buckets()`, will never",
    "        //    actually be read, since we should have already yielded all the elements of",
    "        //    the table.",
    "        self.current_group = Group::load_aligned(self.next_ctrl.cast())",
    "            .match_full()",
    "            .into_iter();",
    "        self.data = self.data.next_n(Group::WIDTH);",
    "        self.next_ctrl = self.next_ctrl.add(Group::WIDTH);",
    "    }",
    "}"
  ],
  "size": {
    "chain": 4,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 3530,
          "bound": null
        }
      ],
      "ret": "acc",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        20,
        21,
        29,
        30
      ],
      "may_contra": false,
      "min_set": false
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "true",
          "line": 3530,
          "bound": null
        },
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n != 0",
          "norm": "0 != n",
          "value": "false",
          "line": 3524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        20,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 3,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n != 0",
          "norm": "0 != n",
          "value": "true",
          "line": 3524,
          "bound": null
        },
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n == 0",
          "norm": "0 == n",
          "value": "false",
          "line": 3530,
          "bound": null
        }
      ],
      "ret": "acc",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        12,
        13,
        14,
        15,
        16,
        18,
        19,
        3,
        4,
        5,
        20,
        21,
        29,
        30
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 4,
      "conds": [
        {
          "cond": "let Some(index) = self.current_group.next()",
          "norm": null,
          "value": "true",
          "line": 3521,
          "bound": null
        },
        {
          "cond": "n != 0",
          "norm": "0 != n",
          "value": "false",
          "line": 3524,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        10,
        34,
        35,
        36
      ],
      "may_contra": false,
      "min_set": false
    }
  ]
}