{
  "name": "hashbrown::map::{impl#4}::capacity",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:618:5:620:6",
  "doc": "/// Returns the number of elements the map can hold without reallocating.\n///\n/// This number is a lower bound; the `HashMap<K, V>` might be able to hold\n/// more, but is guaranteed to be able to hold at least this many.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// let map: HashMap<i32, i32> = HashMap::with_capacity(100);\n/// assert_eq!(map.len(), 0);\n/// assert!(map.capacity() >= 100);\n/// ```\n",
  "code": [
    "pub fn capacity(&self) -> usize {",
    "    self.table.capacity()",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": null,
      "path": [
        0,
        1
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}