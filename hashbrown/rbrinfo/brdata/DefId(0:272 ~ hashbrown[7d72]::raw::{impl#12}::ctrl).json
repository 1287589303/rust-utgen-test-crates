{
  "name": "hashbrown::raw::{impl#12}::ctrl",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:2477:5:2481:6",
  "doc": "/// Returns a pointer to a control byte.\n///\n/// # Safety\n///\n/// For the allocated [`RawTableInner`], the result is [`Undefined Behavior`],\n/// if the `index` is greater than the `self.bucket_mask + 1 + Group::WIDTH`.\n/// In that case, calling this function with `index == self.bucket_mask + 1 + Group::WIDTH`\n/// will return a pointer to the end of the allocated table and it is useless on its own.\n///\n/// Calling this function with `index >= self.bucket_mask + 1 + Group::WIDTH` on a\n/// table that has not been allocated results in [`Undefined Behavior`].\n///\n/// So to satisfy both requirements you should always follow the rule that\n/// `index < self.bucket_mask + 1 + Group::WIDTH`\n///\n/// Calling this function on [`RawTableInner`] that are not already allocated is safe\n/// for read-only purpose.\n///\n/// See also [`Bucket::as_ptr()`] method, for more information about of properly removing\n/// or saving `data element` from / into the [`RawTable`] / [`RawTableInner`].\n///\n/// [`Bucket::as_ptr()`]: Bucket::as_ptr()\n/// [`Undefined Behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn ctrl(&self, index: usize) -> *mut Tag {",
    "    debug_assert!(index < self.num_ctrl_bytes());",
    "    // SAFETY: The caller must uphold the safety rules for the [`RawTableInner::ctrl`]",
    "    self.ctrl.as_ptr().add(index).cast()",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "index < self.num_ctrl_bytes()",
          "norm": null,
          "value": "true",
          "line": 2478,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        3,
        6,
        7,
        8,
        9
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "index < self.num_ctrl_bytes()",
          "norm": null,
          "value": "false",
          "line": 2478,
          "bound": "index == self.num_ctrl_bytes()"
        }
      ],
      "ret": null,
      "path": [
        0,
        1,
        2,
        4,
        10
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}