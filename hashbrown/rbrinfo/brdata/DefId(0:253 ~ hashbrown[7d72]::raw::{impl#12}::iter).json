{
  "name": "hashbrown::raw::{impl#12}::iter",
  "mod_info": {
    "name": "raw",
    "loc": "src/lib.rs:74:1:74:9"
  },
  "visible": false,
  "loc": "src/raw/mod.rs:1993:5:2027:6",
  "doc": "/// Returns an iterator over every element in the table.\n///\n/// # Safety\n///\n/// If any of the following conditions are violated, the result\n/// is [`undefined behavior`]:\n///\n/// * The caller has to ensure that the `RawTableInner` outlives the\n///   `RawIter`. Because we cannot make the `next` method unsafe on\n///   the `RawIter` struct, we have to make the `iter` method unsafe.\n///\n/// * The [`RawTableInner`] must have properly initialized control bytes.\n///\n/// The type `T` must be the actual type of the elements stored in the table,\n/// otherwise using the returned [`RawIter`] results in [`undefined behavior`].\n///\n/// [`undefined behavior`]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n",
  "code": [
    "unsafe fn iter<T>(&self) -> RawIter<T> {",
    "    // SAFETY:",
    "    // 1. Since the caller of this function ensures that the control bytes",
    "    //    are properly initialized and `self.data_end()` points to the start",
    "    //    of the array of control bytes, therefore: `ctrl` is valid for reads,",
    "    //    properly aligned to `Group::WIDTH` and points to the properly initialized",
    "    //    control bytes.",
    "    // 2. `data` bucket index in the table is equal to the `ctrl` index (i.e.",
    "    //    equal to zero).",
    "    // 3. We pass the exact value of buckets of the table to the function.",
    "    //",
    "    //                         `ctrl` points here (to the start",
    "    //                         of the first control byte `CT0`)",
    "    //                          âˆ¨",
    "    // [Pad], T_n, ..., T1, T0, |CT0, CT1, ..., CT_n|, CTa_0, CTa_1, ..., CTa_m",
    "    //                           \\________  ________/",
    "    //                                    \\/",
    "    //       `n = buckets - 1`, i.e. `RawTableInner::buckets() - 1`",
    "    //",
    "    // where: T0...T_n  - our stored data;",
    "    //        CT0...CT_n - control bytes or metadata for `data`.",
    "    //        CTa_0...CTa_m - additional control bytes, where `m = Group::WIDTH - 1` (so that the search",
    "    //                        with loading `Group` bytes from the heap works properly, even if the result",
    "    //                        of `h1(hash) & self.bucket_mask` is equal to `self.bucket_mask`). See also",
    "    //                        `RawTableInner::set_ctrl` function.",
    "    //",
    "    // P.S. `h1(hash) & self.bucket_mask` is the same as `hash as usize % self.buckets()` because the number",
    "    // of buckets is a power of two, and `self.bucket_mask = self.buckets() - 1`.",
    "    let data = Bucket::from_base_index(self.data_end(), 0);",
    "    RawIter {",
    "        // SAFETY: See explanation above",
    "        iter: RawIterRange::new(self.ctrl.as_ptr(), data, self.buckets()),",
    "        items: self.items,",
    "    }",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "RawIter {\n            // SAFETY: See explanation above\n            iter: RawIterRange::new(self.ctrl.as_ptr(), data, self.buckets()),\n            items: self.items,\n        }",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}