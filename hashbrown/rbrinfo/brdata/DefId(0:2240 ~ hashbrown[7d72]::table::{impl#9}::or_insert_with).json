{
  "name": "hashbrown::table::{impl#9}::or_insert_with",
  "mod_info": {
    "name": "table",
    "loc": "src/lib.rs:85:1:85:11"
  },
  "visible": true,
  "loc": "src/table.rs:1433:5:1438:6",
  "doc": "/// Ensures a value is in the entry by inserting the result of the default function if empty..\n///\n/// Returns an [`OccupiedEntry`] pointing to the now-occupied entry.\n///\n/// # Examples\n///\n/// ```\n/// # #[cfg(feature = \"nightly\")]\n/// # fn test() {\n/// use hashbrown::{HashTable, DefaultHashBuilder};\n/// use std::hash::BuildHasher;\n///\n/// let mut table: HashTable<String> = HashTable::new();\n/// let hasher = DefaultHashBuilder::default();\n/// let hasher = |val: &_| hasher.hash_one(val);\n///\n/// table\n///     .entry(hasher(\"poneyland\"), |x| x == \"poneyland\", |val| hasher(val))\n///     .or_insert_with(|| \"poneyland\".to_string());\n///\n/// assert!(table\n///     .find(hasher(&\"poneyland\"), |x| x == \"poneyland\")\n///     .is_some());\n/// # }\n/// # fn main() {\n/// #     #[cfg(feature = \"nightly\")]\n/// #     test()\n/// # }\n/// ```\n",
  "code": [
    "pub fn or_insert_with(self, default: impl FnOnce() -> T) -> OccupiedEntry<'a, T, A> {",
    "    match self {",
    "        Entry::Occupied(entry) => entry,",
    "        Entry::Vacant(entry) => entry.insert(default()),",
    "    }",
    "}"
  ],
  "size": {
    "chain": 2,
    "contra": 0,
    "min_set": 2
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [
        {
          "cond": "self matches Entry::Vacant(entry)",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        }
      ],
      "ret": null,
      "path": [
        0,
        3,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    },
    {
      "id": 2,
      "conds": [
        {
          "cond": "self matches Entry::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        },
        {
          "cond": "self matches Entry::Occupied(entry)",
          "norm": null,
          "value": "true",
          "line": 1434,
          "bound": null
        }
      ],
      "ret": "entry",
      "path": [
        0,
        2,
        4,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}