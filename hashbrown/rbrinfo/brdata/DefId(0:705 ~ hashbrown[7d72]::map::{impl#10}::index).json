{
  "name": "hashbrown::map::{impl#10}::index",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:2101:5:2103:6",
  "doc": "/// Returns a reference to the value corresponding to the supplied key.\n///\n/// # Panics\n///\n/// Panics if the key is not present in the `HashMap`.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let map: HashMap<_, _> = [(\"a\", \"One\"), (\"b\", \"Two\")].into();\n///\n/// assert_eq!(map[&\"a\"], \"One\");\n/// assert_eq!(map[&\"b\"], \"Two\");\n/// ```\n",
  "code": [
    "fn index(&self, key: &Q) -> &V {",
    "    self.get(key).expect(\"no entry found for key\")",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "self.get(key).expect(\"no entry found for key\")",
      "path": [
        0,
        1,
        2
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}