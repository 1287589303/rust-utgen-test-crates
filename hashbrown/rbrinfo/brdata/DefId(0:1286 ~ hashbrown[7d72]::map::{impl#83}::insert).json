{
  "name": "hashbrown::map::{impl#83}::insert",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:4369:5:4381:6",
  "doc": "/// Sets the value of the entry with the `VacantEntryRef`'s key,\n/// and returns a mutable reference to it.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n/// use hashbrown::hash_map::EntryRef;\n///\n/// let mut map: HashMap<String, u32> = HashMap::new();\n/// let key: &str = \"poneyland\";\n///\n/// if let EntryRef::Vacant(o) = map.entry_ref(key) {\n///     o.insert(37);\n/// }\n/// assert_eq!(map[\"poneyland\"], 37);\n/// ```\n",
  "code": [
    "pub fn insert(self, value: V) -> &'a mut V",
    "where",
    "    K: Hash + From<&'b Q>,",
    "    S: BuildHasher,",
    "{",
    "    let table = &mut self.table.table;",
    "    let entry = table.insert_entry(",
    "        self.hash,",
    "        (self.key.into(), value),",
    "        make_hasher::<_, V, S>(&self.table.hash_builder),",
    "    );",
    "    &mut entry.1",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "&mut entry.1",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}