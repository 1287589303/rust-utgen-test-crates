{
  "name": "hashbrown::map::{impl#5}::insert_unique_unchecked",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:78:1:78:9"
  },
  "visible": true,
  "loc": "src/map.rs:1877:5:1884:6",
  "doc": "/// Insert a key-value pair into the map without checking\n/// if the key already exists in the map.\n///\n/// This operation is faster than regular insert, because it does not perform\n/// lookup before insertion.\n///\n/// This operation is useful during initial population of the map.\n/// For example, when constructing a map from another map, we know\n/// that keys are unique.\n///\n/// Returns a reference to the key and value just inserted.\n///\n/// # Safety\n///\n/// This operation is safe if a key does not exist in the map.\n///\n/// However, if a key exists in the map already, the behavior is unspecified:\n/// this operation may panic, loop forever, or any following operation with the map\n/// may panic, loop forever or return arbitrary result.\n///\n/// That said, this operation (and following operations) are guaranteed to\n/// not violate memory safety.\n///\n/// However this operation is still unsafe because the resulting `HashMap`\n/// may be passed to unsafe code which does expect the map to behave\n/// correctly, and would cause unsoundness as a result.\n///\n/// # Examples\n///\n/// ```\n/// use hashbrown::HashMap;\n///\n/// let mut map1 = HashMap::new();\n/// assert_eq!(map1.insert(1, \"a\"), None);\n/// assert_eq!(map1.insert(2, \"b\"), None);\n/// assert_eq!(map1.insert(3, \"c\"), None);\n/// assert_eq!(map1.len(), 3);\n///\n/// let mut map2 = HashMap::new();\n///\n/// for (key, value) in map1.into_iter() {\n///     unsafe {\n///         map2.insert_unique_unchecked(key, value);\n///     }\n/// }\n///\n/// let (key, value) = unsafe { map2.insert_unique_unchecked(4, \"d\") };\n/// assert_eq!(key, &4);\n/// assert_eq!(value, &mut \"d\");\n/// *value = \"e\";\n///\n/// assert_eq!(map2[&1], \"a\");\n/// assert_eq!(map2[&2], \"b\");\n/// assert_eq!(map2[&3], \"c\");\n/// assert_eq!(map2[&4], \"e\");\n/// assert_eq!(map2.len(), 4);\n/// ```\n",
  "code": [
    "pub unsafe fn insert_unique_unchecked(&mut self, k: K, v: V) -> (&K, &mut V) {",
    "    let hash = make_hash::<K, S>(&self.hash_builder, &k);",
    "    let bucket = self",
    "        .table",
    "        .insert(hash, (k, v), make_hasher::<_, V, S>(&self.hash_builder));",
    "    let (k_ref, v_ref) = unsafe { bucket.as_mut() };",
    "    (k_ref, v_ref)",
    "}"
  ],
  "size": {
    "chain": 1,
    "contra": 0,
    "min_set": 1
  },
  "cond_chains": [
    {
      "id": 1,
      "conds": [],
      "ret": "(k_ref, v_ref)",
      "path": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8
      ],
      "may_contra": false,
      "min_set": true
    }
  ]
}