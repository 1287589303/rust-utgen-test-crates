{
  "name": "indexmap::map::core::raw_entry_v1::{impl#2}::index_from_hash",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:241:5:249:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "hash: u64 >= 0, is_match: F: FnMut(&K) -> bool, entries: non-empty collection of unique keys for valid indexing scenarios, edge cases with empty map, and possible maximum size limit for indices.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(1u64, 10), (2, 20), (3, 30)];",
                "    let indices = vec![0, 1, 2];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(2, |&key| key == 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(1));",
                "    assert_eq!(builder.index_from_hash(4, |&key| key == 4), None);",
                "    assert_eq!(builder.index_from_hash(2, |&key| key != 2), None);",
                "    assert_eq!(builder.index_from_hash(1, |&key| key == 1), Some(0));",
                "    assert_eq!(builder.index_from_hash(3, |&key| key == 3), Some(2));",
                "    assert_eq!(builder.index_from_hash(2, |&key| key < 2), None);",
                "    assert_eq!(builder.index_from_hash(2, |&key| key <= 2), Some(1));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(1u64, 10), (2, 20), (3, 30)];",
                "    let indices = vec![0, 1, 2];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(2, |&key| key == 2);",
                "    assert_eq!(result, Some(1));",
                "    assert_eq!(builder.index_from_hash(4, |&key| key == 4), None);",
                "    assert_eq!(builder.index_from_hash(2, |&key| key != 2), None);",
                "    assert_eq!(builder.index_from_hash(1, |&key| key == 1), Some(0));",
                "    assert_eq!(builder.index_from_hash(3, |&key| key == 3), Some(2));",
                "    assert_eq!(builder.index_from_hash(2, |&key| key < 2), None);",
                "    assert_eq!(builder.index_from_hash(2, |&key| key <= 2), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries: Vec<(u64, usize)> = vec![];",
                "    let indices = vec![];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(0, |&key| key == 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let entries: Vec<(u64, usize)> = vec![(1, 42)];",
                "    let indices = vec![0];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(0, |&key| key == 1);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(1, |&key| key == 1);",
                "    assert_eq!(result, Some(0));",
                "    let entries: Vec<(u64, usize)> = vec![(2, 21), (1, 42)];",
                "    let indices = vec![1, 0];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(1, |&key| key == 2);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(2, |&key| key == 2);",
                "    assert_eq!(result, Some(1));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries: Vec<(u64, usize)> = vec![];",
                "    let indices = vec![];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(0, |&key| key == 1);",
                "    assert_eq!(result, None);",
                "    let entries: Vec<(u64, usize)> = vec![(1, 42)];",
                "    let indices = vec![0];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(0, |&key| key == 1);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(1, |&key| key == 1);",
                "    assert_eq!(result, Some(0));",
                "    let entries: Vec<(u64, usize)> = vec![(2, 21), (1, 42)];",
                "    let indices = vec![1, 0];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(1, |&key| key == 2);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(2, |&key| key == 2);",
                "    assert_eq!(result, Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(100u64, 50), (200, 60)];",
                "    let indices = vec![0, 1];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(10, |&key| key == 10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(100, |&key| key == 100);",
                "    assert_eq!(result, Some(0));",
                "    let result = builder.index_from_hash(200, |&key| key == 200);",
                "    assert_eq!(result, Some(1));",
                "    let result = builder.index_from_hash(150, |&key| key == 150);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(200, |&key| key == 60);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(100, |&key| key != 100);",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(100u64, 50), (200, 60)];",
                "    let indices = vec![0, 1];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(10, |&key| key == 10);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(100, |&key| key == 100);",
                "    assert_eq!(result, Some(0));",
                "    let result = builder.index_from_hash(200, |&key| key == 200);",
                "    assert_eq!(result, Some(1));",
                "    let result = builder.index_from_hash(150, |&key| key == 150);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(200, |&key| key == 60);",
                "    assert_eq!(result, None);",
                "    let result = builder.index_from_hash(100, |&key| key != 100);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(0u64, 100), (255, 200), (300, 300)];",
                "    let indices = vec![0, 1, 2];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(255, |&key| key == 255);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(1));",
                "    assert_eq!(builder.index_from_hash(0, |&key| key == 0), Some(0));",
                "    assert_eq!(builder.index_from_hash(300, |&key| key == 300), Some(2));",
                "    assert_eq!(builder.index_from_hash(400, |&key| key == 400), None);",
                "    assert_eq!(builder.index_from_hash(255, |&key| key != 255), None);",
                "    assert_eq!(builder.index_from_hash(255, |&key| key == 100), None);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    struct TestMap {",
                "        core: crate::IndexMapCore<u64, usize>,",
                "        indices: Vec<usize>,",
                "    }",
                "",
                "    let entries = vec![(0u64, 100), (255, 200), (300, 300)];",
                "    let indices = vec![0, 1, 2];",
                "    let map = TestMap { core: crate::IndexMapCore { entries }, indices };",
                "",
                "    let builder = RawEntryBuilder { map: &map };",
                "    let result = builder.index_from_hash(255, |&key| key == 255);",
                "    assert_eq!(result, Some(1));",
                "    assert_eq!(builder.index_from_hash(0, |&key| key == 0), Some(0));",
                "    assert_eq!(builder.index_from_hash(300, |&key| key == 300), Some(2));",
                "    assert_eq!(builder.index_from_hash(400, |&key| key == 400), None);",
                "    assert_eq!(builder.index_from_hash(255, |&key| key != 255), None);",
                "    assert_eq!(builder.index_from_hash(255, |&key| key == 100), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}