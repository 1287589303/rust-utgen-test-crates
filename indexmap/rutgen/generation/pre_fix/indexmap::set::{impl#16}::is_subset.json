{
  "name": "indexmap::set::{impl#16}::is_subset",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:1221:5:1226:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.len() <= other.len() at line 1225 is true, with bound self.len() == other.len()\n"
      ],
      "input_infer": "self.len() == other.len() >= 0 and self.iter() returns elements that are contained in other\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    set1.insert(3);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    set2.insert(3);",
                "",
                "    let result = set1.is_subset(&set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    set1.insert(3);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    set2.insert(3);",
                "",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let set1: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "    let set2: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "",
                "    let result = set1.is_subset(&set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    set1.reserve(1);",
                "    set1.insert(1);",
                "    set2.insert(1);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set2.insert(2);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set1.remove(&1);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set1.insert(2);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, false);"
              ],
              "code": [
                "{",
                "    let set1: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "    let set2: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set1.reserve(1);",
                "    set1.insert(1);",
                "    set2.insert(1);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set2.insert(2);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set1.remove(&1);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "    set1.insert(2);",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    set1.insert(3);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    set2.insert(3);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "",
                "    set1.insert(1);",
                "    set1.insert(2);",
                "    set1.insert(3);",
                "    ",
                "    set2.insert(1);",
                "    set2.insert(2);",
                "    set2.insert(3);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "",
                "    set1.insert(10);",
                "    set1.insert(20);",
                "    ",
                "    set2.insert(10);",
                "    set2.insert(20);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    let mut set1 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    let mut set2 = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "",
                "    set1.insert(10);",
                "    set1.insert(20);",
                "    ",
                "    set2.insert(10);",
                "    set2.insert(20);",
                "    ",
                "    let result = set1.is_subset(&set2);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.len() <= other.len() at line 1225 is false\n",
        "expected return value/type: self.len() <= other.len() && self.iter().all(move |value| other.contains(value))\n"
      ],
      "input_infer": "self.len() > other.len() and at least one value from self not contained in other\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
                "    self_set.insert(\"a\");",
                "    self_set.insert(\"b\");",
                "    self_set.insert(\"c\");",
                "    self_set.insert(\"d\");",
                "    self_set.insert(\"e\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "    other_set.insert(\"c\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(!self_set.len() <= other_set.len());",
                "    assert!(self_set.iter().all(|value| other_set.contains(value)) == false);",
                "    assert_eq!(self_set.len(), 5);",
                "    assert_eq!(other_set.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
                "    self_set.insert(\"a\");",
                "    self_set.insert(\"b\");",
                "    self_set.insert(\"c\");",
                "    self_set.insert(\"d\");",
                "    self_set.insert(\"e\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "    other_set.insert(\"c\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "    assert_eq!(result, false);",
                "    assert!(!self_set.len() <= other_set.len());",
                "    assert!(self_set.iter().all(|value| other_set.contains(value)) == false);",
                "    assert_eq!(self_set.len(), 5);",
                "    assert_eq!(other_set.len(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(4, RandomState::new());",
                "    self_set.insert(\"x\");",
                "    self_set.insert(\"y\");",
                "    self_set.insert(\"z\");",
                "    self_set.insert(\"w\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
                "    other_set.insert(\"x\");",
                "    other_set.insert(\"y\");",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "    other_set.insert(\"c\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(self_set.len() > other_set.len());",
                "    assert!(self_set.iter().all(|value| !other_set.contains(value)));",
                "    assert!(self_set.contains(\"z\") || self_set.contains(\"w\"));",
                "    assert!(!other_set.contains(\"z\"));",
                "    assert!(!other_set.contains(\"w\"));"
              ],
              "code": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(4, RandomState::new());",
                "    self_set.insert(\"x\");",
                "    self_set.insert(\"y\");",
                "    self_set.insert(\"z\");",
                "    self_set.insert(\"w\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(5, RandomState::new());",
                "    other_set.insert(\"x\");",
                "    other_set.insert(\"y\");",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "    other_set.insert(\"c\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "    assert_eq!(result, false);",
                "    assert!(self_set.len() > other_set.len());",
                "    assert!(self_set.iter().all(|value| !other_set.contains(value)));",
                "    assert!(self_set.contains(\"z\") || self_set.contains(\"w\"));",
                "    assert!(!other_set.contains(\"z\"));",
                "    assert!(!other_set.contains(\"w\"));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    self_set.insert(\"1\");",
                "    self_set.insert(\"2\");",
                "    self_set.insert(\"3\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, false);",
                "    assert!(self_set.len() > other_set.len());",
                "    assert!(self_set.iter().count() > 0);",
                "    assert!(other_set.len() > 0);",
                "    assert!(self_set.iter().any(|value| !other_set.contains(value)));"
              ],
              "code": [
                "{",
                "    let mut self_set = IndexSet::with_capacity_and_hasher(3, RandomState::new());",
                "    self_set.insert(\"1\");",
                "    self_set.insert(\"2\");",
                "    self_set.insert(\"3\");",
                "",
                "    let mut other_set = IndexSet::with_capacity_and_hasher(2, RandomState::new());",
                "    other_set.insert(\"a\");",
                "    other_set.insert(\"b\");",
                "",
                "    let result = self_set.is_subset(&other_set);",
                "    assert_eq!(result, false);",
                "    assert!(self_set.len() > other_set.len());",
                "    assert!(self_set.iter().count() > 0);",
                "    assert!(other_set.len() > 0);",
                "    assert!(self_set.iter().any(|value| !other_set.contains(value)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}