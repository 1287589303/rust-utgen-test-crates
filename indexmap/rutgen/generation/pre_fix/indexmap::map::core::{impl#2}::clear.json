{
  "name": "indexmap::map::core::{impl#2}::clear",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:174:5:177:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The input conditions or ranges should include: an instance of `IndexMapCore<K, V>` pre-filled with various numbers of entries (0, 1, MAX_ENTRIES_CAPACITY), and test for both empty and non-empty states before and after invoking `clear()`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.entries.is_empty());",
                "    assert!(index_map.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.clear();",
                "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.entries.is_empty());",
                "    assert!(index_map.indices.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.insert_full(1, 1, 10);",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(index_map.get_index_of(1, &1).is_none());",
                "    assert!(index_map.entries.is_empty());",
                "    assert!(index_map.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.insert_full(1, 1, 10);",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(index_map.get_index_of(1, &1).is_none());",
                "    assert!(index_map.entries.is_empty());",
                "    assert!(index_map.indices.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        index_map.insert_full(1, i, i as usize);",
                "    }",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(index_map.get_index_of(1, &0).is_none());",
                "    assert!(index_map.entries.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        index_map.insert_full(1, i, i as usize);",
                "    }",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(index_map.get_index_of(1, &0).is_none());",
                "    assert!(index_map.entries.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}