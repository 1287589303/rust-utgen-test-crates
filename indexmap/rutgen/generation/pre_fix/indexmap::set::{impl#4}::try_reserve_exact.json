{
  "name": "indexmap::set::{impl#4}::try_reserve_exact",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:312:5:314:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0 (minimum value), 1, any positive integer value, maximum integer value (boundary case)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(0);",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert!(set.capacity() >= 11);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(!set.is_empty());"
              ],
              "code": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(1);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(set.capacity() >= 11);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(!set.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(5).unwrap();",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(0).unwrap();",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    result = set.try_reserve_exact(20);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(5);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(5).unwrap();",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(0).unwrap();",
                "    assert_eq!(set.capacity(), 10);",
                "    assert_eq!(set.len(), 0);",
                "    result = set.try_reserve_exact(20);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_err(), true);",
                "    assert!(matches!(result, Err(_)));",
                "    set.try_reserve_exact(0).unwrap();",
                "    set.try_reserve_exact(5).unwrap();",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(10).unwrap();",
                "    assert!(set.capacity() >= 10);",
                "    set.try_reserve_exact(1).unwrap();",
                "    assert!(set.len() == 0);",
                "    set.reserve_exact(5);",
                "    assert!(set.capacity() >= 15);"
              ],
              "code": [
                "{",
                "    let mut set = IndexSet::<i32, RandomState>::with_capacity_and_hasher(10, RandomState::new());",
                "    let result = set.try_reserve_exact(usize::MAX);",
                "    assert_eq!(result.is_err(), true);",
                "    assert!(matches!(result, Err(_)));",
                "    set.try_reserve_exact(0).unwrap();",
                "    set.try_reserve_exact(5).unwrap();",
                "    assert_eq!(set.len(), 0);",
                "    set.try_reserve_exact(10).unwrap();",
                "    assert!(set.capacity() >= 10);",
                "    set.try_reserve_exact(1).unwrap();",
                "    assert!(set.len() == 0);",
                "    set.reserve_exact(5);",
                "    assert!(set.capacity() >= 15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}