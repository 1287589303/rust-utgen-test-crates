{
  "name": "indexmap::map::slice::{impl#1}::values_mut",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:206:5:208:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a mutable reference to a non-empty Slice<K, V> containing at least one Bucket<K, V> element; K and V can be of any type that implements required traits.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"b\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(_values_mut.iter.len() == 2);",
                "    assert!(_values_mut.iter().next().unwrap().1 == \"a\");",
                "    assert!(_values_mut.iter().nth(1).unwrap().1 == \"b\");",
                "    let first_value_mut = _values_mut.iter_mut().next().unwrap();",
                "    *first_value_mut.1 = \"c\";",
                "    assert!(slice.get_index(0).unwrap().1 == \"c\");",
                "    assert!(slice.get_index(1).unwrap().1 == \"b\");"
              ],
              "code": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"b\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "    assert!(_values_mut.iter.len() == 2);",
                "    assert!(_values_mut.iter().next().unwrap().1 == \"a\");",
                "    assert!(_values_mut.iter().nth(1).unwrap().1 == \"b\");",
                "    let first_value_mut = _values_mut.iter_mut().next().unwrap();",
                "    *first_value_mut.1 = \"c\";",
                "    assert!(slice.get_index(0).unwrap().1 == \"c\");",
                "    assert!(slice.get_index(1).unwrap().1 == \"b\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_values_mut.iter.len(), 1);",
                "    assert_eq!(_values_mut.iter.next(), Some(&mut \"a\"));",
                "    assert_eq!(_values_mut.iter.size_hint(), (1, Some(1)));",
                "    assert_eq!(slice.len(), 1);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some((&1, &\"a\")));",
                "    assert_eq!(slice.split_first_mut().map(|(first, _)| first.1), Some(&mut \"a\"));"
              ],
              "code": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "    assert_eq!(_values_mut.iter.len(), 1);",
                "    assert_eq!(_values_mut.iter.next(), Some(&mut \"a\"));",
                "    assert_eq!(_values_mut.iter.size_hint(), (1, Some(1)));",
                "    assert_eq!(slice.len(), 1);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some((&1, &\"a\")));",
                "    assert_eq!(slice.split_first_mut().map(|(first, _)| first.1), Some(&mut \"a\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"b\" },",
                "            Bucket { hash: HashValue::default(), key: 3, value: \"c\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.entries.len(), 3);",
                "    assert_eq!(slice.entries[0].key, 1);",
                "    assert_eq!(slice.entries[0].value, \"a\");",
                "    assert_eq!(slice.entries[1].key, 2);",
                "    assert_eq!(slice.entries[1].value, \"b\");",
                "    assert_eq!(slice.entries[2].key, 3);",
                "    assert_eq!(slice.entries[2].value, \"c\");"
              ],
              "code": [
                "{",
                "    let mut slice = Box::new(Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"a\" },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"b\" },",
                "            Bucket { hash: HashValue::default(), key: 3, value: \"c\" },",
                "        ],",
                "    });",
                "",
                "    let _values_mut = slice.values_mut();",
                "    assert_eq!(slice.entries.len(), 3);",
                "    assert_eq!(slice.entries[0].key, 1);",
                "    assert_eq!(slice.entries[0].value, \"a\");",
                "    assert_eq!(slice.entries[1].key, 2);",
                "    assert_eq!(slice.entries[1].value, \"b\");",
                "    assert_eq!(slice.entries[2].key, 3);",
                "    assert_eq!(slice.entries[2].value, \"c\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}