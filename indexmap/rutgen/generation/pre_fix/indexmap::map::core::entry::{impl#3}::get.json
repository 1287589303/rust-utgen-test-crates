{
  "name": "indexmap::map::core::entry::{impl#3}::get",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:185:5:187:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &self.entries[self.index()].value\n"
      ],
      "input_infer": "self.entries must be a non-empty Entries<K, V> instance; self.index() must return a valid index within the bounds of entries (0 <= index < entries.len()).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &10);",
                "    assert_eq!(occupied_entry.index(), 0);",
                "    assert_eq!(entries.as_entries()[occupied_entry.index()].value, 10);",
                "    let mut entries_2 = TestEntries {",
                "    entries: vec![",
                "    Bucket { hash: HashValue::default(), key: 3, value: 30 },",
                "    Bucket { hash: HashValue::default(), key: 4, value: 40 },",
                "    ],",
                "    };",
                "    let occupied_entry_2 = OccupiedEntry::new(&mut entries_2, hash_table::OccupiedEntry::new(&mut entries_2.entries, 1));",
                "    let result_2 = occupied_entry_2.get();",
                "    assert_eq!(result_2, &40);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "    assert_eq!(result, &10);",
                "    assert_eq!(occupied_entry.index(), 0);",
                "    assert_eq!(entries.as_entries()[occupied_entry.index()].value, 10);",
                "    let mut entries_2 = TestEntries {",
                "    entries: vec![",
                "    Bucket { hash: HashValue::default(), key: 3, value: 30 },",
                "    Bucket { hash: HashValue::default(), key: 4, value: 40 },",
                "    ],",
                "    };",
                "    let occupied_entry_2 = OccupiedEntry::new(&mut entries_2, hash_table::OccupiedEntry::new(&mut entries_2.entries, 1));",
                "    let result_2 = occupied_entry_2.get();",
                "    assert_eq!(result_2, &40);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = entries.entries.len() - 1;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "}"
              ],
              "oracle": [
                "    let expected_value = &entries.entries[index].value;",
                "    assert_eq!(result, expected_value);",
                "    assert_eq!(result, &20);",
                "    assert_eq!(result, &entries.entries[1].value);",
                "    assert!(result.is_some());"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = entries.entries.len() - 1;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "    let expected_value = &entries.entries[index].value;",
                "    assert_eq!(result, expected_value);",
                "    assert_eq!(result, &20);",
                "    assert_eq!(result, &entries.entries[1].value);",
                "    assert!(result.is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
                "        ],",
                "    };",
                "",
                "    let index = 1; // Middle index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, &20);",
                "    assert_eq!(occupied_entry.index(), 1);",
                "    assert_eq!(occupied_entry.get(), &entries.entries[1].value);",
                "    assert!(std::ptr::eq(result, &entries.entries[1].value));",
                "    assert_eq!(occupied_entry.key(), &2);",
                "    assert_eq!(occupied_entry.get_mut(), &mut entries.entries[1].value);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, i32>>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "            Bucket { hash: HashValue::default(), key: 3, value: 30 },",
                "        ],",
                "    };",
                "",
                "    let index = 1; // Middle index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(&mut entries.entries, index));",
                "    let result = occupied_entry.get(); // Calls the function under test",
                "    assert_eq!(result, &20);",
                "    assert_eq!(occupied_entry.index(), 1);",
                "    assert_eq!(occupied_entry.get(), &entries.entries[1].value);",
                "    assert!(std::ptr::eq(result, &entries.entries[1].value));",
                "    assert_eq!(occupied_entry.key(), &2);",
                "    assert_eq!(occupied_entry.get_mut(), &mut entries.entries[1].value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}