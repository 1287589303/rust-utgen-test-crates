{
  "name": "indexmap::set::{impl#7}::move_index",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:1059:5:1061:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "from: usize in range [0, size_of_set), to: usize in range [0, size_of_set), where size_of_set is the current number of elements in the IndexSet\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&3));",
                "    assert_eq!(index_set.get_index(2), Some(&2));",
                "    assert_eq!(index_set.len(), 3);",
                "    assert!(index_set.get_index(3).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(0, 5)).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 2);",
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&3));",
                "    assert_eq!(index_set.get_index(2), Some(&2));",
                "    assert_eq!(index_set.len(), 3);",
                "    assert!(index_set.get_index(3).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(0, 5)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(2, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.get_index(0), Some(&2));",
                "    assert_eq!(index_set.get_index(1), Some(&3));",
                "    assert_eq!(index_set.get_index(2), Some(&1));",
                "    assert_eq!(index_set.len(), 3);",
                "    assert!(index_set.get_index(3).is_none());"
              ],
              "code": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(2, 1);",
                "    assert_eq!(index_set.get_index(0), Some(&2));",
                "    assert_eq!(index_set.get_index(1), Some(&3));",
                "    assert_eq!(index_set.get_index(2), Some(&1));",
                "    assert_eq!(index_set.len(), 3);",
                "    assert!(index_set.get_index(3).is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(3, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.len(), 3);",
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&2));",
                "    assert_eq!(index_set.get_index(2), Some(&3));",
                "    assert!(index_set.get_index(3).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(0, 4)).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(3, 1);",
                "    assert_eq!(index_set.len(), 3);",
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&2));",
                "    assert_eq!(index_set.get_index(2), Some(&3));",
                "    assert!(index_set.get_index(3).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(0, 4)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 3);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 3);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 3);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 3);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&2));",
                "    assert_eq!(index_set.get_index(2), Some(&3));",
                "    assert_eq!(index_set.get_index(3), None);",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(1, 4)).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_set: IndexSet<usize, RandomState> = IndexSet::new();",
                "    index_set.insert(1);",
                "    index_set.insert(2);",
                "    index_set.insert(3);",
                "    index_set.move_index(1, 1);",
                "    assert_eq!(index_set.get_index(0), Some(&1));",
                "    assert_eq!(index_set.get_index(1), Some(&2));",
                "    assert_eq!(index_set.get_index(2), Some(&3));",
                "    assert_eq!(index_set.get_index(3), None);",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(3, 1)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_set.move_index(1, 4)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}