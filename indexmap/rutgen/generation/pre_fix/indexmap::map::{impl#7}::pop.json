{
  "name": "indexmap::map::{impl#7}::pop",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:958:5:960:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self should have at least 0 to MAX_ENTRIES_CAPACITY number of key-value pairs; expected return is Some((K, V)) if at least 1 pair exists, otherwise None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    assert!(index_map.pop().is_some());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.pop(), Some((1, 10)));",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    index_map.pop();",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop(), Some((2, 20)));",
                "    assert!(index_map.pop().is_some());",
                "    assert!(index_map.pop().is_none());",
                "    assert!(index_map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    assert!(index_map.pop().is_some());",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.pop(), Some((1, 10)));",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    index_map.pop();",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop(), Some((2, 20)));",
                "    assert!(index_map.pop().is_some());",
                "    assert!(index_map.pop().is_none());",
                "    assert!(index_map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    assert!(index_map.pop().is_some());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.pop().unwrap(), (3, 30));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop().unwrap(), (2, 20));",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.pop().is_none());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    assert!(index_map.pop().is_some());",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.pop().unwrap(), (3, 30));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop().unwrap(), (2, 20));",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.pop().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert!(index_map.pop().is_none());",
                "}"
              ],
              "oracle": [
                "    assert!(index_map.pop().is_none());",
                "    index_map.insert(1, 100);",
                "    index_map.insert(2, 200);",
                "    index_map.insert(3, 300);",
                "    assert_eq!(index_map.pop(), Some((3, 300)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.pop(), Some((2, 200)));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop(), Some((1, 100)));",
                "    assert!(index_map.pop().is_none());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert!(index_map.pop().is_none());",
                "    assert!(index_map.pop().is_none());",
                "    index_map.insert(1, 100);",
                "    index_map.insert(2, 200);",
                "    index_map.insert(3, 300);",
                "    assert_eq!(index_map.pop(), Some((3, 300)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.pop(), Some((2, 200)));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.pop(), Some((1, 100)));",
                "    assert!(index_map.pop().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.pop();",
                "    index_map.pop();",
                "    assert!(index_map.pop().is_none());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.first(), None);",
                "    assert!(index_map.last().is_none());",
                "    assert_eq!(index_map.get_index(0), None);",
                "    assert_eq!(index_map.get_index_mut(0), None);",
                "    assert_eq!(index_map.first_mut(), None);",
                "    assert_eq!(index_map.last_mut(), None);",
                "    index_map.insert(3, 30);",
                "    assert_eq!(index_map.pop(), Some((3, 30)));",
                "    assert_eq!(index_map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.pop();",
                "    index_map.pop();",
                "    assert!(index_map.pop().is_none());",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.first(), None);",
                "    assert!(index_map.last().is_none());",
                "    assert_eq!(index_map.get_index(0), None);",
                "    assert_eq!(index_map.get_index_mut(0), None);",
                "    assert_eq!(index_map.first_mut(), None);",
                "    assert_eq!(index_map.last_mut(), None);",
                "    index_map.insert(3, 30);",
                "    assert_eq!(index_map.pop(), Some((3, 30)));",
                "    assert_eq!(index_map.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}