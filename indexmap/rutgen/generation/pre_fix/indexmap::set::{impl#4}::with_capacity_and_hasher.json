{
  "name": "indexmap::set::{impl#4}::with_capacity_and_hasher",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:176:5:180:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IndexSet {\n            map: IndexMap::with_capacity_and_hasher(n, hash_builder),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: n is 0 or a positive integer; hash_builder is a valid hash function or instance complying with the BuildHasher trait, and should be tested with both default and custom instances.\n",
      "answers": [
        {
          "uses": [
            "use std::collections::hash_map::DefaultHasher;",
            "use std::collections::hash_map::RandomState;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "    let n = 0;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "}"
              ],
              "oracle": [
                "    let n = 0;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    let hasher2 = RandomState::new();",
                "    let set2: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(5, hasher2);",
                "    assert_eq!(set2.len(), 0);",
                "    assert!(set2.is_empty());",
                "    assert!(set2.capacity() >= 5);",
                "    let hasher3 = RandomState::new();",
                "    let set3: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(10, hasher3);",
                "    assert_eq!(set3.len(), 0);",
                "    assert!(set3.is_empty());",
                "    assert!(set3.capacity() >= 10);"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "    let n = 0;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    let n = 0;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    let hasher2 = RandomState::new();",
                "    let set2: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(5, hasher2);",
                "    assert_eq!(set2.len(), 0);",
                "    assert!(set2.is_empty());",
                "    assert!(set2.capacity() >= 5);",
                "    let hasher3 = RandomState::new();",
                "    let set3: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(10, hasher3);",
                "    assert_eq!(set3.len(), 0);",
                "    assert!(set3.is_empty());",
                "    assert!(set3.capacity() >= 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "    let n = 10;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "}"
              ],
              "oracle": [
                "    let n = 10;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    assert_eq!(set.capacity(), n);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    let set_empty: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(0, hasher);",
                "    assert_eq!(set_empty.capacity(), 0);",
                "    let set_with_zero_capacity: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(0, hasher);",
                "    assert_eq!(set_with_zero_capacity.capacity(), 0);",
                "    assert!(set_with_zero_capacity.is_empty());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "    let n = 10;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    let n = 10;",
                "    let hasher = RandomState::new();",
                "    let set: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    assert_eq!(set.capacity(), n);",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    let set_empty: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(0, hasher);",
                "    assert_eq!(set_empty.capacity(), 0);",
                "    let set_with_zero_capacity: super::IndexSet<(), RandomState> = super::IndexSet::with_capacity_and_hasher(0, hasher);",
                "    assert_eq!(set_with_zero_capacity.capacity(), 0);",
                "    assert!(set_with_zero_capacity.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::{RandomState, DefaultHasher};",
                "    let n = 5;",
                "    let hasher = DefaultHasher::new();",
                "    let set: super::IndexSet<(), DefaultHasher> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "}"
              ],
              "oracle": [
                "    let expected_set: super::IndexSet<(), DefaultHasher> = super::IndexSet::with_capacity_and_hasher(5, DefaultHasher::new());",
                "    assert_eq!(set.capacity(), expected_set.capacity());",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.hasher().build_hasher(), expected_set.hasher().build_hasher());",
                "    assert_eq!(set.map.core.len(), expected_set.map.core.len());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::{RandomState, DefaultHasher};",
                "    let n = 5;",
                "    let hasher = DefaultHasher::new();",
                "    let set: super::IndexSet<(), DefaultHasher> = super::IndexSet::with_capacity_and_hasher(n, hasher);",
                "    let expected_set: super::IndexSet<(), DefaultHasher> = super::IndexSet::with_capacity_and_hasher(5, DefaultHasher::new());",
                "    assert_eq!(set.capacity(), expected_set.capacity());",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.hasher().build_hasher(), expected_set.hasher().build_hasher());",
                "    assert_eq!(set.map.core.len(), expected_set.map.core.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}