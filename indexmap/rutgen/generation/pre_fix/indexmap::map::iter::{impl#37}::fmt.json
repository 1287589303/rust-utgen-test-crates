{
  "name": "indexmap::map::iter::{impl#37}::fmt",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:318:5:321:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: K instances with valid debug implementations, V instances with valid debug implementations, non-empty vector of Bucket<K, V> elements, valid mutable reference to fmt::Formatter with sufficient capacity for formatted output.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket = Bucket {",
                "        hash: HashValue::new(1),",
                "        key: TestKey { value: 10 },",
                "        value: TestValue { value: 20 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drain.iter.as_slice().len(), 1);",
                "    assert_eq!(drain.iter.as_slice()[0].key.value, 10);",
                "    assert_eq!(drain.iter.as_slice()[0].value.value, 20);",
                "    assert!(formatter.finished());",
                "    assert!(formatter.buffer().contains(\"TestKey(10)\"));",
                "    assert!(formatter.buffer().contains(\"TestValue(20)\"));"
              ],
              "code": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket = Bucket {",
                "        hash: HashValue::new(1),",
                "        key: TestKey { value: 10 },",
                "        value: TestValue { value: 20 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "    assert_eq!(drain.iter.as_slice().len(), 1);",
                "    assert_eq!(drain.iter.as_slice()[0].key.value, 10);",
                "    assert_eq!(drain.iter.as_slice()[0].value.value, 20);",
                "    assert!(formatter.finished());",
                "    assert!(formatter.buffer().contains(\"TestKey(10)\"));",
                "    assert!(formatter.buffer().contains(\"TestValue(20)\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket1 = Bucket {",
                "        hash: HashValue::new(2),",
                "        key: TestKey { value: 1 },",
                "        value: TestValue { value: 2 },",
                "    };",
                "",
                "    let bucket2 = Bucket {",
                "        hash: HashValue::new(3),",
                "        key: TestKey { value: 3 },",
                "        value: TestValue { value: 4 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket1, bucket2];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.debug_list().entries(bucket_vec.iter().map(Bucket::refs)).finish(), Ok(()));",
                "    assert!(drain.iter.is_empty());",
                "    let drained_value = drain.iter.next();",
                "    assert_eq!(drained_value, Some(&bucket1));",
                "    assert_eq!(drain.iter.as_slice().len(), 1);",
                "    assert_eq!(drain.iter.next(), Some(&bucket2));",
                "    assert_eq!(drain.iter.as_slice().len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket1 = Bucket {",
                "        hash: HashValue::new(2),",
                "        key: TestKey { value: 1 },",
                "        value: TestValue { value: 2 },",
                "    };",
                "",
                "    let bucket2 = Bucket {",
                "        hash: HashValue::new(3),",
                "        key: TestKey { value: 3 },",
                "        value: TestValue { value: 4 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket1, bucket2];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "    assert_eq!(formatter.debug_list().entries(bucket_vec.iter().map(Bucket::refs)).finish(), Ok(()));",
                "    assert!(drain.iter.is_empty());",
                "    let drained_value = drain.iter.next();",
                "    assert_eq!(drained_value, Some(&bucket1));",
                "    assert_eq!(drain.iter.as_slice().len(), 1);",
                "    assert_eq!(drain.iter.next(), Some(&bucket2));",
                "    assert_eq!(drain.iter.as_slice().len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket = Bucket {",
                "        hash: HashValue::new(4),",
                "        key: TestKey { value: 5 },",
                "        value: TestValue { value: 6 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(formatter.to_string(), \"[TestKey(5), TestValue(6)]\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(drain.iter.len() == 0);",
                "    assert!(formatter.errors().is_none());",
                "    assert!(formatter.get_ref() == &\"[TestKey(5), TestValue(6)]\");",
                "    assert!(formatter.remaining().count() == 1);"
              ],
              "code": [
                "{",
                "    struct TestKey {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestKey {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestKey({})\", self.value)",
                "        }",
                "    }",
                "",
                "    struct TestValue {",
                "        value: i32,",
                "    }",
                "",
                "    impl fmt::Debug for TestValue {",
                "        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
                "            write!(f, \"TestValue({})\", self.value)",
                "        }",
                "    }",
                "",
                "    let bucket = Bucket {",
                "        hash: HashValue::new(4),",
                "        key: TestKey { value: 5 },",
                "        value: TestValue { value: 6 },",
                "    };",
                "",
                "    let bucket_vec = vec![bucket];",
                "    let mut drain = Drain {",
                "        iter: bucket_vec.drain(..),",
                "    };",
                "",
                "    let mut formatter = fmt::Formatter::new();",
                "    let _ = drain.fmt(&mut formatter);",
                "    assert_eq!(formatter.to_string(), \"[TestKey(5), TestValue(6)]\");",
                "    assert!(formatter.is_empty() == false);",
                "    assert!(drain.iter.len() == 0);",
                "    assert!(formatter.errors().is_none());",
                "    assert!(formatter.get_ref() == &\"[TestKey(5), TestValue(6)]\");",
                "    assert!(formatter.remaining().count() == 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}