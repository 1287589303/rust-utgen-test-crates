{
  "name": "indexmap::set::slice::{impl#1}::iter",
  "mod_info": {
    "name": "set::slice",
    "loc": "src/set.rs:5:1:5:11"
  },
  "visible": true,
  "loc": "src/set/slice.rs:114:5:116:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.entries must be a valid slice of Bucket<T> objects with various lengths, including empty slice, and Iter must return a valid iterator over this slice, including edge cases such as 0, 1, and n elements.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [] });",
                "    let iter = slice.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.as_slice(), &slice);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [] });",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice(), &slice);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let iter = slice.iter();",
                "}"
              ],
              "oracle": [
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice(), &*slice);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let iter = slice.iter();",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice(), &*slice);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "        Bucket { hash: 0, key: 3, value: 30 },",
                "    ]});",
                "    let iter = slice.iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.as_slice().len(), 3);",
                "    assert_eq!(iter.as_slice().get_index(0).unwrap().key, 1);",
                "    assert_eq!(iter.as_slice().get_index(1).unwrap().key, 2);",
                "    assert_eq!(iter.as_slice().get_index(2).unwrap().key, 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.len(), 3);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "        Bucket { hash: 0, key: 3, value: 30 },",
                "    ]});",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice().len(), 3);",
                "    assert_eq!(iter.as_slice().get_index(0).unwrap().key, 1);",
                "    assert_eq!(iter.as_slice().get_index(1).unwrap().key, 2);",
                "    assert_eq!(iter.as_slice().get_index(2).unwrap().key, 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "    ]});",
                "    let iter = slice.iter();",
                "}"
              ],
              "oracle": [
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }]});",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice().entries.len(), 2);",
                "    assert_eq!(iter.as_slice().entries[0].key, 1);",
                "    assert_eq!(iter.as_slice().entries[0].value, 10);",
                "    assert_eq!(iter.as_slice().entries[1].key, 2);",
                "    assert_eq!(iter.as_slice().entries[1].value, 20);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "    ]});",
                "    let iter = slice.iter();",
                "    let slice: Box<Slice<i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }]});",
                "    let iter = slice.iter();",
                "    assert_eq!(iter.as_slice().entries.len(), 2);",
                "    assert_eq!(iter.as_slice().entries[0].key, 1);",
                "    assert_eq!(iter.as_slice().entries[0].value, 10);",
                "    assert_eq!(iter.as_slice().entries[1].key, 2);",
                "    assert_eq!(iter.as_slice().entries[1].value, 20);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}