{
  "name": "indexmap::map::{impl#4}::try_reserve",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:350:5:352:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0, 1, MAX_ENTRIES_CAPACITY, MAX_ENTRIES_CAPACITY + 1\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    map.try_reserve(0).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.capacity() >= 1);",
                "    assert!(map.len() == 0);",
                "    assert!(map.try_reserve(10).is_ok());",
                "    assert!(map.capacity() >= 10);",
                "    assert!(map.len() == 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    map.try_reserve(0).unwrap();",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.capacity() >= 1);",
                "    assert!(map.len() == 0);",
                "    assert!(map.try_reserve(10).is_ok());",
                "    assert!(map.capacity() >= 10);",
                "    assert!(map.len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    map.try_reserve(1).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 2);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    map.try_reserve(1).unwrap();",
                "    assert_eq!(map.capacity(), 2);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
                "    map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY - map.len()).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).is_err());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
                "    map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY).unwrap();",
                "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY - map.len()).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
                "    map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(0).is_ok());",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY).is_ok());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY, RandomState::new());",
                "    map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).unwrap();",
                "    assert_eq!(map.len(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve(0).is_ok());",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.try_reserve(1).is_ok());",
                "    assert!(map.try_reserve(IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}