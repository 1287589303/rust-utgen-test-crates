{
  "name": "indexmap::set::slice::{impl#1}::binary_search_by",
  "mod_info": {
    "name": "set::slice",
    "loc": "src/set.rs:5:1:5:11"
  },
  "visible": true,
  "loc": "src/set/slice.rs:140:5:145:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Any slice of length 0 to N (inclusive) as entries, and a comparator function that can handle all key types in the slice, including edge cases such as an empty slice and slice with duplicate keys.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "}"
              ],
              "oracle": [
                "    let slice = Box::new(Slice { entries: [] });",
                "    assert_eq!(result, Err(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 3, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Err(1));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 5, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Ok(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 7, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Err(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 2, value: () }, Bucket { hash: 0, key: 5, value: () }, Bucket { hash: 0, key: 8, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Ok(1));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: () }, Bucket { hash: 0, key: 3, value: () }, Bucket { hash: 0, key: 5, value: () }, Bucket { hash: 0, key: 7, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&6));",
                "    assert_eq!(result, Err(3));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    let slice = Box::new(Slice { entries: [] });",
                "    assert_eq!(result, Err(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 3, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Err(1));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 5, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Ok(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 7, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Err(0));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 2, value: () }, Bucket { hash: 0, key: 5, value: () }, Bucket { hash: 0, key: 8, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Ok(1));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: () }, Bucket { hash: 0, key: 3, value: () }, Bucket { hash: 0, key: 5, value: () }, Bucket { hash: 0, key: 7, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&6));",
                "    assert_eq!(result, Err(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "}"
              ],
              "oracle": [
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(0));",
                "    ",
                "    let slice_empty = Box::new(Slice { entries: [] });",
                "    let result_empty = slice_empty.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result_empty, Err(0));",
                "    ",
                "    let slice_multiple = Box::new(Slice {",
                "    entries: [",
                "    Bucket { hash: HashValue::default(), key: 5, value: () },",
                "    Bucket { hash: HashValue::default(), key: 10, value: () },",
                "    Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ],",
                "    });",
                "    let result_multiple = slice_multiple.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result_multiple, Ok(1));",
                "    ",
                "    let result_greater = slice_multiple.binary_search_by(|&x| x.cmp(&12));",
                "    assert_eq!(result_greater, Err(2));",
                "    ",
                "    let result_smaller = slice_multiple.binary_search_by(|&x| x.cmp(&3));",
                "    assert_eq!(result_smaller, Err(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(0));",
                "    ",
                "    let slice_empty = Box::new(Slice { entries: [] });",
                "    let result_empty = slice_empty.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result_empty, Err(0));",
                "    ",
                "    let slice_multiple = Box::new(Slice {",
                "    entries: [",
                "    Bucket { hash: HashValue::default(), key: 5, value: () },",
                "    Bucket { hash: HashValue::default(), key: 10, value: () },",
                "    Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ],",
                "    });",
                "    let result_multiple = slice_multiple.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result_multiple, Ok(1));",
                "    ",
                "    let result_greater = slice_multiple.binary_search_by(|&x| x.cmp(&12));",
                "    assert_eq!(result_greater, Err(2));",
                "    ",
                "    let result_smaller = slice_multiple.binary_search_by(|&x| x.cmp(&3));",
                "    assert_eq!(result_smaller, Err(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "}"
              ],
              "oracle": [
                "    let result = slice.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result, Err(0));",
                "    let slice_empty = Box::new(Slice { entries: [] });",
                "    let result_empty = slice_empty.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_empty, Err(0));",
                "    let slice_multiple = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 5, value: () }, Bucket { hash: HashValue::default(), key: 15, value: () }] });",
                "    let result_exact = slice_multiple.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_exact, Ok(0));",
                "    let result_insert = slice_multiple.binary_search_by(|&x| x.cmp(&10)); assert_eq!(result_insert, Err(1));",
                "    let result_high = slice_multiple.binary_search_by(|&x| x.cmp(&20)); assert_eq!(result_high, Err(2));",
                "    let slice_with_duplicates = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 5, value: () }, Bucket { hash: HashValue::default(), key: 5, value: () }] });",
                "    let result_duplicates = slice_with_duplicates.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_duplicates, Ok(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 10, value: () }] });",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result, Err(0));",
                "    let slice_empty = Box::new(Slice { entries: [] });",
                "    let result_empty = slice_empty.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_empty, Err(0));",
                "    let slice_multiple = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 5, value: () }, Bucket { hash: HashValue::default(), key: 15, value: () }] });",
                "    let result_exact = slice_multiple.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_exact, Ok(0));",
                "    let result_insert = slice_multiple.binary_search_by(|&x| x.cmp(&10)); assert_eq!(result_insert, Err(1));",
                "    let result_high = slice_multiple.binary_search_by(|&x| x.cmp(&20)); assert_eq!(result_high, Err(2));",
                "    let slice_with_duplicates = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 5, value: () }, Bucket { hash: HashValue::default(), key: 5, value: () }] });",
                "    let result_duplicates = slice_with_duplicates.binary_search_by(|&x| x.cmp(&5)); assert_eq!(result_duplicates, Ok(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(1));",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(slice.is_empty() == false);",
                "    assert_eq!(slice.first(), Some(&5));",
                "    assert_eq!(slice.last(), Some(&15));",
                "    let (left, right) = slice.split_at(2);",
                "    assert_eq!(left.len(), 2);",
                "    assert_eq!(right.len(), 1);",
                "    let (first_elem, rest_slice) = slice.split_first().unwrap();",
                "    assert_eq!(first_elem, &5);",
                "    assert_eq!(rest_slice.len(), 2);",
                "    let (last_elem, pre_slice) = slice.split_last().unwrap();",
                "    assert_eq!(last_elem, &15);",
                "    assert_eq!(pre_slice.len(), 2);",
                "    let search_result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(search_result, Err(3));",
                "    let partition_index = slice.partition_point(|&x| x < 10);",
                "    assert_eq!(partition_index, 1);"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(1));",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(slice.is_empty() == false);",
                "    assert_eq!(slice.first(), Some(&5));",
                "    assert_eq!(slice.last(), Some(&15));",
                "    let (left, right) = slice.split_at(2);",
                "    assert_eq!(left.len(), 2);",
                "    assert_eq!(right.len(), 1);",
                "    let (first_elem, rest_slice) = slice.split_first().unwrap();",
                "    assert_eq!(first_elem, &5);",
                "    assert_eq!(rest_slice.len(), 2);",
                "    let (last_elem, pre_slice) = slice.split_last().unwrap();",
                "    assert_eq!(last_elem, &15);",
                "    assert_eq!(pre_slice.len(), 2);",
                "    let search_result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(search_result, Err(3));",
                "    let partition_index = slice.partition_point(|&x| x < 10);",
                "    assert_eq!(partition_index, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () }",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));",
                "    assert!(slice.len() == 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some(&10));",
                "    assert_eq!(slice.get_index(1), Some(&10));",
                "    assert_eq!(slice.get_index(2), Some(&15));",
                "    assert_eq!(slice.first(), Some(&10));",
                "    assert_eq!(slice.last(), Some(&15));",
                "    let (left, right) = slice.split_at(1);",
                "    assert_eq!(left.len(), 1);",
                "    assert_eq!(right.len(), 2);",
                "    assert_eq!(left.first(), Some(&10));",
                "    let (first_key, rest) = slice.split_first().unwrap();",
                "    assert_eq!(first_key, &10);",
                "    assert_eq!(rest.len(), 2);",
                "    let (last_key, rest) = slice.split_last().unwrap();",
                "    assert_eq!(last_key, &15);",
                "    assert_eq!(rest.len(), 2);",
                "    let search_result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(search_result, Err(3));",
                "    let partition_idx = slice.partition_point(|&x| x < &15);",
                "    assert_eq!(partition_idx, 2);"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () }",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(0));",
                "    assert!(slice.len() == 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some(&10));",
                "    assert_eq!(slice.get_index(1), Some(&10));",
                "    assert_eq!(slice.get_index(2), Some(&15));",
                "    assert_eq!(slice.first(), Some(&10));",
                "    assert_eq!(slice.last(), Some(&15));",
                "    let (left, right) = slice.split_at(1);",
                "    assert_eq!(left.len(), 1);",
                "    assert_eq!(right.len(), 2);",
                "    assert_eq!(left.first(), Some(&10));",
                "    let (first_key, rest) = slice.split_first().unwrap();",
                "    assert_eq!(first_key, &10);",
                "    assert_eq!(rest.len(), 2);",
                "    let (last_key, rest) = slice.split_last().unwrap();",
                "    assert_eq!(last_key, &15);",
                "    assert_eq!(rest.len(), 2);",
                "    let search_result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(search_result, Err(3));",
                "    let partition_idx = slice.partition_point(|&x| x < &15);",
                "    assert_eq!(partition_idx, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&15));",
                "}"
              ],
              "oracle": [
                "    result.unwrap() == 2",
                "    result.is_ok()",
                "    slice.binary_search_by(|&x| x.cmp(&5)).unwrap() == 0",
                "    slice.binary_search_by(|&x| x.cmp(&10)).unwrap() == 1",
                "    slice.binary_search_by(|&x| x.cmp(&20)).is_err()",
                "    slice.binary_search_by(|&x| x.cmp(&1)).is_err()",
                "    slice.binary_search_by(|&x| x.cmp(&15)).unwrap_err() == 3"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&15));",
                "    result.unwrap() == 2",
                "    result.is_ok()",
                "    slice.binary_search_by(|&x| x.cmp(&5)).unwrap() == 0",
                "    slice.binary_search_by(|&x| x.cmp(&10)).unwrap() == 1",
                "    slice.binary_search_by(|&x| x.cmp(&20)).is_err()",
                "    slice.binary_search_by(|&x| x.cmp(&1)).is_err()",
                "    slice.binary_search_by(|&x| x.cmp(&15)).unwrap_err() == 3",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(1));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&15));",
                "    assert_eq!(result, Ok(2));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(result, Err(3));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&0));",
                "    assert_eq!(result, Err(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 5, value: () },",
                "        Bucket { hash: HashValue::default(), key: 10, value: () },",
                "        Bucket { hash: HashValue::default(), key: 15, value: () },",
                "    ]});",
                "    let result = slice.binary_search_by(|&x| x.cmp(&5));",
                "    assert_eq!(result, Ok(0));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&10));",
                "    assert_eq!(result, Ok(1));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&15));",
                "    assert_eq!(result, Ok(2));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&20));",
                "    assert_eq!(result, Err(3));",
                "    let result = slice.binary_search_by(|&x| x.cmp(&0));",
                "    assert_eq!(result, Err(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}