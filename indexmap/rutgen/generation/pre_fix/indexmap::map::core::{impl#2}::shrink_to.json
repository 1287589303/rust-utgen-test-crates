{
  "name": "indexmap::map::core::{impl#2}::shrink_to",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:301:5:305:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "min_capacity: usize = 0 to IndexMapCore::MAX_ENTRIES_CAPACITY, including edge cases like 0, 1, and MAX_ENTRIES_CAPACITY\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    map.shrink_to(5);",
                "    assert!(map.len() <= 5);",
                "    assert!(map.capacity() >= 5);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(20);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.entries.len(), 1);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(0);",
                "    assert!(map.entries.is_empty());",
                "    assert!(map.indices.is_empty());",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(15);",
                "    for i in 0..15 {",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
                "    }",
                "    map.shrink_to(10);",
                "    assert_eq!(map.len(), 15);",
                "    assert!(map.entries.len() >= 10);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    map.shrink_to(5);",
                "    assert!(map.len() <= 5);",
                "    assert!(map.capacity() >= 5);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(20);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.entries.len(), 1);",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(0);",
                "    assert!(map.entries.is_empty());",
                "    assert!(map.indices.is_empty());",
                "    ",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(15);",
                "    for i in 0..15 {",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
                "    }",
                "    map.shrink_to(10);",
                "    assert_eq!(map.len(), 15);",
                "    assert!(map.entries.len() >= 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    for i in 0..5 {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(map.indices.len() < 5);",
                "    assert!(map.entries.len() == 1);",
                "    assert_eq!(map.entries[0].key, 0);",
                "    assert_eq!(map.entries[0].value, 0);",
                "    assert_eq!(map.indices.len(), 1);",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &0).is_some());",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &1).is_none());",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &4).is_none());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    for i in 0..5 {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(map.indices.len() < 5);",
                "    assert!(map.entries.len() == 1);",
                "    assert_eq!(map.entries[0].key, 0);",
                "    assert_eq!(map.entries[0].value, 0);",
                "    assert_eq!(map.indices.len(), 1);",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &0).is_some());",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &1).is_none());",
                "    assert!(map.indices.get_index_of(map.entries[0].hash, &4).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() >= IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY - 1);",
                "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() >= IndexMapCore::MAX_ENTRIES_CAPACITY - 1);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() > 0);",
                "    map.push_entry(0 as HashValue, 0, 0);",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() >= IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY - 1);",
                "    assert_eq!(map.len(), IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() >= IndexMapCore::MAX_ENTRIES_CAPACITY - 1);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() > 0);",
                "    map.push_entry(0 as HashValue, 0, 0);",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.capacity() >= 1);",
                "    map.shrink_to(1);",
                "    assert_eq!(map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() <= IndexMapCore::MAX_ENTRIES_CAPACITY);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.shrink_to(10);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= 10);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    map.shrink_to(5);",
                "    assert!(map.capacity() >= 5);",
                "    map.shrink_to(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.capacity() <= IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    for i in 0..10 {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 5);",
                "    assert!(map.capacity() <= 10);",
                "    assert!(map.capacity() >= 5);",
                "    assert!(map.get_index_of(0, &0).is_some());",
                "    assert!(map.get_index_of(4, &4).is_some());",
                "    assert!(map.get_index_of(5, &5).is_none());",
                "    assert!(map.get_index_of(6, &6).is_none());",
                "    assert!(map.get_index_of(9, &9).is_none());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    for i in 0..10 {",
                "        // Simulating adding entries",
                "        map.push_entry(i as HashValue, i, i * 10);",
                "    }",
                "    map.shrink_to(5);",
                "    assert_eq!(map.len(), 5);",
                "    assert!(map.capacity() <= 10);",
                "    assert!(map.capacity() >= 5);",
                "    assert!(map.get_index_of(0, &0).is_some());",
                "    assert!(map.get_index_of(4, &4).is_some());",
                "    assert!(map.get_index_of(5, &5).is_none());",
                "    assert!(map.get_index_of(6, &6).is_none());",
                "    assert!(map.get_index_of(9, &9).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}