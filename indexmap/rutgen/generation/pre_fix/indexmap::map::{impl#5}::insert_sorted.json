{
  "name": "indexmap::map::{impl#5}::insert_sorted",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:440:5:448:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.binary_search_keys(&key) matches Err(i) at line 444 is true\n"
      ],
      "input_infer": "key: any value not currently in the map, value: any value, map size: from 0 to maximum size (including 0) ensuring existing keys are unsorted, key must not exceed the max limit of the key type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get_index(0).unwrap().0, &10);",
                "    assert_eq!(map.get_index(0).unwrap().1, \"Ten\");",
                "    assert_eq!(map.insert_sorted(10, String::from(\"Ten Updated\")), (0, Some(String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(0).unwrap().1, \"Ten Updated\");"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get_index(0).unwrap().0, &10);",
                "    assert_eq!(map.get_index(0).unwrap().1, \"Ten\");",
                "    assert_eq!(map.insert_sorted(10, String::from(\"Ten Updated\")), (0, Some(String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(0).unwrap().1, \"Ten Updated\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(30, String::from(\"Thirty\"));",
                "    map.insert(20, String::from(\"Twenty\"));",
                "    let key = 15;",
                "    let value = String::from(\"Fifteen\");",
                "    map.insert_sorted(key, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get_index(0), Some((&15, &String::from(\"Fifteen\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
                "    assert_eq!(map.insert_sorted(15, String::from(\"Fifteen\")), (0, None));",
                "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty Updated\")), (1, Some(String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty Updated\"))));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(30, String::from(\"Thirty\"));",
                "    map.insert(20, String::from(\"Twenty\"));",
                "    let key = 15;",
                "    let value = String::from(\"Fifteen\");",
                "    map.insert_sorted(key, value);",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get_index(0), Some((&15, &String::from(\"Fifteen\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
                "    assert_eq!(map.insert_sorted(15, String::from(\"Fifteen\")), (0, None));",
                "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty Updated\")), (1, Some(String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty Updated\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(5, String::from(\"Five\"));",
                "    map.insert(15, String::from(\"Fifteen\"));",
                "    map.insert(25, String::from(\"Twenty Five\"));",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get_index(0), Some((&5, &String::from(\"Five\"))));",
                "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(2), Some((&15, &String::from(\"Fifteen\"))));",
                "    assert_eq!(map.get_index(3), Some((&25, &String::from(\"Twenty Five\"))));",
                "    assert_eq!(map.insert_sorted(10, String::from(\"Ten\")), (1, None));",
                "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty\")), (3, None));",
                "    assert_eq!(map.insert_sorted(5, String::from(\"Five Updated\")), (0, Some(String::from(\"Five\"))));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(5, String::from(\"Five\"));",
                "    map.insert(15, String::from(\"Fifteen\"));",
                "    map.insert(25, String::from(\"Twenty Five\"));",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "    assert_eq!(map.get_index(0), Some((&5, &String::from(\"Five\"))));",
                "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(2), Some((&15, &String::from(\"Fifteen\"))));",
                "    assert_eq!(map.get_index(3), Some((&25, &String::from(\"Twenty Five\"))));",
                "    assert_eq!(map.insert_sorted(10, String::from(\"Ten\")), (1, None));",
                "    assert_eq!(map.insert_sorted(20, String::from(\"Twenty\")), (3, None));",
                "    assert_eq!(map.insert_sorted(5, String::from(\"Five Updated\")), (0, Some(String::from(\"Five\"))));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(20, String::from(\"Twenty\"));",
                "    map.insert(30, String::from(\"Thirty\"));",
                "    map.insert(40, String::from(\"Forty\"));",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 4);",
                "    assert_eq!(map.get_index(0), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
                "    assert_eq!(map.get_index(3), Some((&40, &String::from(\"Forty\"))));",
                "    assert_eq!(map.binary_search_keys(&key), Err(0));",
                "    assert_eq!(map.insert_sorted(key, value), (0, None));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(20, String::from(\"Twenty\"));",
                "    map.insert(30, String::from(\"Thirty\"));",
                "    map.insert(40, String::from(\"Forty\"));",
                "    let key = 10;",
                "    let value = String::from(\"Ten\");",
                "    map.insert_sorted(key, value);",
                "    assert_eq!(map.len(), 4);",
                "    assert_eq!(map.get_index(0), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(1), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.get_index(2), Some((&30, &String::from(\"Thirty\"))));",
                "    assert_eq!(map.get_index(3), Some((&40, &String::from(\"Forty\"))));",
                "    assert_eq!(map.binary_search_keys(&key), Err(0));",
                "    assert_eq!(map.insert_sorted(key, value), (0, None));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(10, String::from(\"Ten\"));",
                "    map.insert(1, String::from(\"One\"));",
                "    let key = 20;",
                "    let value = String::from(\"Twenty\");",
                "    map.insert_sorted(key, value);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get_index(0), Some((&1, &String::from(\"One\"))));",
                "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(2), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.binary_search_keys(&20), Err(2));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, String, RandomState> = IndexMap::default();",
                "    map.insert(10, String::from(\"Ten\"));",
                "    map.insert(1, String::from(\"One\"));",
                "    let key = 20;",
                "    let value = String::from(\"Twenty\");",
                "    map.insert_sorted(key, value);",
                "    assert_eq!(map.get_index(0), Some((&1, &String::from(\"One\"))));",
                "    assert_eq!(map.get_index(1), Some((&10, &String::from(\"Ten\"))));",
                "    assert_eq!(map.get_index(2), Some((&20, &String::from(\"Twenty\"))));",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.binary_search_keys(&20), Err(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.binary_search_keys(&key) matches Ok(i) at line 444 is true\n",
        "precondition: self.binary_search_keys(&key) matches Ok(i) at line 444 is true\n",
        "expected return value/type: (i, Some(mem::replace(&mut self[i], value)))\n"
      ],
      "input_infer": "K values must be a sorted list of unique elements; V can be any datatype; key must be a value within this sorted list of K; input conditions include non-empty map, valid index range of 0 to len(map) (exclusive), and unique K elements\n",
      "answers": [
        {
          "uses": [
            "use std::hash::Hash;",
            "use std::hash::Hasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "",
                "    let result = map.insert_sorted(2, \"updated two\".to_string());",
                "}"
              ],
              "oracle": [
                "    let result = map.insert_sorted(2, \"updated two\".to_string());",
                "    assert_eq!(result.0, 1);",
                "    assert_eq!(result.1, Some(\"two\".to_string()));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "",
                "    let result = map.insert_sorted(2, \"updated two\".to_string());",
                "    let result = map.insert_sorted(2, \"updated two\".to_string());",
                "    assert_eq!(result.0, 1);",
                "    assert_eq!(result.1, Some(\"two\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "",
                "    let result = map.insert_sorted(4, \"four\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (3, None));",
                "    assert_eq!(map.get_index(3), Some((&4, &\"four\".to_string())));",
                "    assert_eq!(map.get_index(0), Some((&1, &\"one\".to_string())));",
                "    assert_eq!(map.get_index(1), Some((&2, &\"two\".to_string())));",
                "    assert_eq!(map.get_index(2), Some((&3, &\"three\".to_string())));",
                "    assert_eq!(map.len(), 4);",
                "    assert!(map.into_boxed_slice().len() == 4);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "",
                "    let result = map.insert_sorted(4, \"four\".to_string());",
                "    assert_eq!(result, (3, None));",
                "    assert_eq!(map.get_index(3), Some((&4, &\"four\".to_string())));",
                "    assert_eq!(map.get_index(0), Some((&1, &\"one\".to_string())));",
                "    assert_eq!(map.get_index(1), Some((&2, &\"two\".to_string())));",
                "    assert_eq!(map.get_index(2), Some((&3, &\"three\".to_string())));",
                "    assert_eq!(map.len(), 4);",
                "    assert!(map.into_boxed_slice().len() == 4);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "",
                "    let result = map.insert_sorted(1, \"updated one\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, (0, Some(\"one\".to_string())));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    impl Hasher for TestHasher {",
                "        fn finish(&self) -> u64 {",
                "            0",
                "        }",
                "        fn write(&mut self, _: &[u8]) {}",
                "    }",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = Self;",
                "        fn build_hasher(&self) -> Self {",
                "            TestHasher",
                "        }",
                "    }",
                "",
                "    let mut map = IndexMap::<i32, String, TestHasher>::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "",
                "    let result = map.insert_sorted(1, \"updated one\".to_string());",
                "    assert_eq!(result, (0, Some(\"one\".to_string())));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}