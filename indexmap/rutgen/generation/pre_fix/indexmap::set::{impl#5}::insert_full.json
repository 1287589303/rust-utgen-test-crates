{
  "name": "indexmap::set::{impl#5}::insert_full",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:357:5:360:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (index, existing.is_none())\n"
      ],
      "input_infer": "input: T must be Hash and Eq types, index must be non-negative, existing must be boolean indicating presence of the value\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    let (index, existing) = index_set.insert_full(10);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 0);",
                "    assert!(existing);",
                "    index_set.insert_full(20);",
                "    let (index2, existing2) = index_set.insert_full(10);",
                "    assert_eq!(index2, 0);",
                "    assert!(!existing2);",
                "    let (index3, existing3) = index_set.insert_full(30);",
                "    assert_eq!(index3, 1);",
                "    assert!(existing3);",
                "    let (index4, existing4) = index_set.insert_full(20);",
                "    assert_eq!(index4, 2);",
                "    assert!(existing4);",
                "    let (index5, existing5) = index_set.insert_full(40);",
                "    assert_eq!(index5, 3);",
                "    assert!(existing5);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    let (index, existing) = index_set.insert_full(10);",
                "    assert_eq!(index, 0);",
                "    assert!(existing);",
                "    index_set.insert_full(20);",
                "    let (index2, existing2) = index_set.insert_full(10);",
                "    assert_eq!(index2, 0);",
                "    assert!(!existing2);",
                "    let (index3, existing3) = index_set.insert_full(30);",
                "    assert_eq!(index3, 1);",
                "    assert!(existing3);",
                "    let (index4, existing4) = index_set.insert_full(20);",
                "    assert_eq!(index4, 2);",
                "    assert!(existing4);",
                "    let (index5, existing5) = index_set.insert_full(40);",
                "    assert_eq!(index5, 3);",
                "    assert!(existing5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    index_set.insert_full(20);",
                "    let (index, existing) = index_set.insert_full(20);",
                "}"
              ],
              "oracle": [
                "    (index, existing) == (0, false)",
                "    (index, existing) == (1, true)",
                "    (index, existing) == (0, false)"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    index_set.insert_full(20);",
                "    let (index, existing) = index_set.insert_full(20);",
                "    (index, existing) == (0, false)",
                "    (index, existing) == (1, true)",
                "    (index, existing) == (0, false)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    index_set.insert_full(30);",
                "    index_set.insert_full(40);",
                "    let (index_existing_value, existing) = index_set.insert_full(30);",
                "    let (index_new_value, new_existing) = index_set.insert_full(50);",
                "}"
              ],
              "oracle": [
                "    let (index_existing_value, existing) = index_set.insert_full(30);",
                "    assert_eq!(index_existing_value, 0);",
                "    assert_eq!(existing, false);",
                "    ",
                "    let (index_new_value, new_existing) = index_set.insert_full(50);",
                "    assert_eq!(index_new_value, 2);",
                "    assert_eq!(new_existing, true);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    index_set.insert_full(30);",
                "    index_set.insert_full(40);",
                "    let (index_existing_value, existing) = index_set.insert_full(30);",
                "    let (index_new_value, new_existing) = index_set.insert_full(50);",
                "    let (index_existing_value, existing) = index_set.insert_full(30);",
                "    assert_eq!(index_existing_value, 0);",
                "    assert_eq!(existing, false);",
                "    ",
                "    let (index_new_value, new_existing) = index_set.insert_full(50);",
                "    assert_eq!(index_new_value, 2);",
                "    assert_eq!(new_existing, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    let (index_zero, existing_zero) = index_set.insert_full(0);",
                "    let (index_neg_one, existing_neg_one) = index_set.insert_full(-1);",
                "}"
              ],
              "oracle": [
                "    (index_zero, existing_zero) == (0, true)",
                "    (index_neg_one, existing_neg_one) == (1, true)"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "    }",
                "",
                "    let mut index_set: super::IndexSet<i32, TestHasher> = super::IndexSet {",
                "        map: super::IndexMap { core: super::IndexMapCore::new(), hash_builder: TestHasher },",
                "    };",
                "",
                "    let (index_zero, existing_zero) = index_set.insert_full(0);",
                "    let (index_neg_one, existing_neg_one) = index_set.insert_full(-1);",
                "    (index_zero, existing_zero) == (0, true)",
                "    (index_neg_one, existing_neg_one) == (1, true)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}