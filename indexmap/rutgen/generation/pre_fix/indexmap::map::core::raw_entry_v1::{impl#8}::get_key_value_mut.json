{
  "name": "indexmap::map::core::raw_entry_v1::{impl#8}::get_key_value_mut",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:465:5:468:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.entries must be a valid mutable reference to an Entries<K, V> with at least one occupied entry; K and V must be types implementing the necessary traits for mutability. The index must be a valid index within the range of the entries, meaning 0 <= index < length of entries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::from(1), key: 1, value: \"value1\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::new(0),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    occupied_entry.get_key_value_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut 1, &mut \"value1\".to_string()));",
                "    occupied_entry.get_key_value_mut().0 = 2;",
                "    assert_eq!(occupied_entry.get_key_value_mut().0, &mut 2);",
                "    occupied_entry.get_key_value_mut().1.push_str(\" updated\");",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"value1 updated\".to_string());",
                "    assert_eq!(occupied_entry.entries.as_entries()[0].key, 2);",
                "    assert_eq!(occupied_entry.entries.as_entries()[0].value, \"value1 updated\");",
                "    assert!(occupied_entry.get_key_value_mut().0.is_some());",
                "    assert!(occupied_entry.get_key_value_mut().1.is_some());",
                "    let mut invalid_index_entry = RawOccupiedEntryMut { entries: &mut entries, index: hash_table::OccupiedEntry::new(1), hash_builder: PhantomData };",
                "    assert_panics!(invalid_index_entry.get_key_value_mut());",
                "    let invalid_entry_result = occupied_entry.get_key_value_mut();",
                "    assert_ne!(invalid_entry_result.0, &mut 1);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::from(1), key: 1, value: \"value1\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::new(0),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    occupied_entry.get_key_value_mut();",
                "    assert_eq!(occupied_entry.get_key_value_mut(), (&mut 1, &mut \"value1\".to_string()));",
                "    occupied_entry.get_key_value_mut().0 = 2;",
                "    assert_eq!(occupied_entry.get_key_value_mut().0, &mut 2);",
                "    occupied_entry.get_key_value_mut().1.push_str(\" updated\");",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"value1 updated\".to_string());",
                "    assert_eq!(occupied_entry.entries.as_entries()[0].key, 2);",
                "    assert_eq!(occupied_entry.entries.as_entries()[0].value, \"value1 updated\");",
                "    assert!(occupied_entry.get_key_value_mut().0.is_some());",
                "    assert!(occupied_entry.get_key_value_mut().1.is_some());",
                "    let mut invalid_index_entry = RawOccupiedEntryMut { entries: &mut entries, index: hash_table::OccupiedEntry::new(1), hash_builder: PhantomData };",
                "    assert_panics!(invalid_index_entry.get_key_value_mut());",
                "    let invalid_entry_result = occupied_entry.get_key_value_mut();",
                "    assert_ne!(invalid_entry_result.0, &mut 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::from(1), key: 1, value: \"value1\".to_string() },",
                "            Bucket { hash: HashValue::from(2), key: 2, value: \"value2\".to_string() },",
                "        ],",
                "    };",
                "    ",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::new(1),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    occupied_entry.get_key_value_mut();",
                "}"
              ],
              "oracle": [
                "    occupied_entry.get_key_value_mut();",
                "    assert_eq!(occupied_entry.get_key_value_mut().0, &mut 2);",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"value2\".to_string());",
                "    occupied_entry.insert(\"new_value\".to_string());",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"new_value\".to_string());",
                "    let (key_mut, value_mut) = occupied_entry.get_key_value_mut();",
                "    *key_mut = 3;",
                "    assert_eq!(entries.data[1].key, 3);",
                "    *value_mut = \"changed_value\".to_string();",
                "    assert_eq!(entries.data[1].value, \"changed_value\".to_string());",
                "    let (removed_key, removed_value) = occupied_entry.swap_remove_entry();",
                "    assert_eq!(removed_key, 3);",
                "    assert_eq!(removed_value, \"changed_value\".to_string());"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::from(1), key: 1, value: \"value1\".to_string() },",
                "            Bucket { hash: HashValue::from(2), key: 2, value: \"value2\".to_string() },",
                "        ],",
                "    };",
                "    ",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::new(1),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    occupied_entry.get_key_value_mut();",
                "    occupied_entry.get_key_value_mut();",
                "    assert_eq!(occupied_entry.get_key_value_mut().0, &mut 2);",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"value2\".to_string());",
                "    occupied_entry.insert(\"new_value\".to_string());",
                "    assert_eq!(occupied_entry.get_key_value_mut().1, &mut \"new_value\".to_string());",
                "    let (key_mut, value_mut) = occupied_entry.get_key_value_mut();",
                "    *key_mut = 3;",
                "    assert_eq!(entries.data[1].key, 3);",
                "    *value_mut = \"changed_value\".to_string();",
                "    assert_eq!(entries.data[1].value, \"changed_value\".to_string());",
                "    let (removed_key, removed_value) = occupied_entry.swap_remove_entry();",
                "    assert_eq!(removed_key, 3);",
                "    assert_eq!(removed_value, \"changed_value\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}