{
  "name": "indexmap::map::core::raw_entry_v1::{impl#8}::into_mut",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:454:5:457:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.entries[index].value\n"
      ],
      "input_infer": "self should be an instance of RawOccupiedEntryMut with a valid mutable reference to Entries<K, V> where index is a valid index for entries (0 to entries().len()-1) and V is a mutable type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries { entries: vec![",
                "        Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "        Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "",
                "    let index = 0;",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::from_index(index),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "}"
              ],
              "oracle": [
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    assert_eq!(value_mut, &mut \"value1\".to_string());",
                "    value_mut.push_str(\" updated\");",
                "    assert_eq!(entries.as_entries()[index].value, \"value1 updated\");",
                "    let new_value_mut: &mut String = occupied_entry.into_mut();",
                "    assert!(std::ptr::eq(value_mut, new_value_mut));"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries { entries: vec![",
                "        Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "        Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "",
                "    let index = 0;",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::from_index(index),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    assert_eq!(value_mut, &mut \"value1\".to_string());",
                "    value_mut.push_str(\" updated\");",
                "    assert_eq!(entries.as_entries()[index].value, \"value1 updated\");",
                "    let new_value_mut: &mut String = occupied_entry.into_mut();",
                "    assert!(std::ptr::eq(value_mut, new_value_mut));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries { entries: vec![",
                "        Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "        Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "",
                "    let index = 1;",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::from_index(index),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "}"
              ],
              "oracle": [
                "    let entries = TestEntries { entries: vec![",
                "    Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "    Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "    let index = 1;",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "    entries: &mut entries,",
                "    index: hash_table::OccupiedEntry::from_index(index),",
                "    hash_builder: PhantomData,",
                "    };",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    assert_eq!(value_mut, &mut \"value2\".to_string());",
                "    *value_mut = \"new_value\".to_string();",
                "    assert_eq!(entries.entries[index].value, \"new_value\".to_string());"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries { entries: vec![",
                "        Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "        Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "",
                "    let index = 1;",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index: hash_table::OccupiedEntry::from_index(index),",
                "        hash_builder: PhantomData,",
                "    };",
                "",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    let entries = TestEntries { entries: vec![",
                "    Bucket { hash: HashValue::from(0), key: 1, value: \"value1\".to_string() },",
                "    Bucket { hash: HashValue::from(1), key: 2, value: \"value2\".to_string() },",
                "    ]};",
                "    let index = 1;",
                "    let mut occupied_entry = RawOccupiedEntryMut {",
                "    entries: &mut entries,",
                "    index: hash_table::OccupiedEntry::from_index(index),",
                "    hash_builder: PhantomData,",
                "    };",
                "    let value_mut: &mut String = occupied_entry.into_mut();",
                "    assert_eq!(value_mut, &mut \"value2\".to_string());",
                "    *value_mut = \"new_value\".to_string();",
                "    assert_eq!(entries.entries[index].value, \"new_value\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}