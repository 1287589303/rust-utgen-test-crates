{
  "name": "indexmap::map::{impl#4}::with_hasher",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:201:5:206:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IndexMap {\n            core: IndexMapCore::new(),\n            hash_builder,\n        }\n"
      ],
      "input_infer": "hash_builder must be a valid hasher type (e.g., RandomState), and it must not be null; test the function with different valid and invalid hasher instances including edge cases like maximum and minimum capacity limits (0 and usize::MAX).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert!(map.core.entries.is_empty());",
                "    assert_eq!(map.core.indices.len(), 0);"
              ],
              "code": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_hasher(hash_builder);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert!(map.core.entries.is_empty());",
                "    assert_eq!(map.core.indices.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(usize::MAX, hash_builder);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), usize::MAX);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), usize::MAX);"
              ],
              "code": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(usize::MAX, hash_builder);",
                "    assert_eq!(map.capacity(), usize::MAX);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), usize::MAX);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(0, hash_builder);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(map.core.entries.len(), 0);",
                "    assert_eq!(map.core.indices.len(), 0);",
                "    assert!(map.core.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let map: IndexMap<usize, String, _> = IndexMap::with_capacity_and_hasher(0, hash_builder);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.hasher(), &hash_builder);",
                "    assert_eq!(map.core.len(), 0);",
                "    assert_eq!(map.core.capacity(), IndexMapCore::<usize, String>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(map.core.entries.len(), 0);",
                "    assert_eq!(map.core.indices.len(), 0);",
                "    assert!(map.core.indices.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}