{
  "name": "indexmap::set::{impl#3}::with_capacity",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:164:5:168:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IndexSet {\n            map: IndexMap::with_capacity(n),\n        }\n"
      ],
      "input_infer": "n: 0 to any positive integer, where 0 indicates no allocation and any positive integer reflects varying capacities for set creation\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0); assert_eq!(index_set.map.capacity(), 0);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(5); assert_eq!(index_set.map.capacity(), 5);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10); assert_eq!(index_set.map.capacity(), 10);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(100); assert_eq!(index_set.map.capacity(), 100);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1); assert_eq!(index_set.map.capacity(), 1);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0); assert!(index_set.map.is_empty());",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1); assert!(!index_set.map.is_empty() || index_set.map.capacity() > 0);"
              ],
              "code": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0); assert_eq!(index_set.map.capacity(), 0);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(5); assert_eq!(index_set.map.capacity(), 5);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10); assert_eq!(index_set.map.capacity(), 10);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(100); assert_eq!(index_set.map.capacity(), 100);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1); assert_eq!(index_set.map.capacity(), 1);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(0); assert!(index_set.map.is_empty());",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1); assert!(!index_set.map.is_empty() || index_set.map.capacity() > 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1);",
                "}"
              ],
              "oracle": [
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1);",
                "    assert!(index_set.map.core.is_empty());",
                "    assert_eq!(index_set.map.hash_builder.capacity(), 1);",
                "    let index_set_zero_capacity = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert!(index_set_zero_capacity.map.core.is_empty());",
                "    assert_eq!(index_set_zero_capacity.map.hash_builder.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1);",
                "    assert!(index_set.map.core.is_empty());",
                "    assert_eq!(index_set.map.hash_builder.capacity(), 1);",
                "    let index_set_zero_capacity = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert!(index_set_zero_capacity.map.core.is_empty());",
                "    assert_eq!(index_set_zero_capacity.map.hash_builder.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10);",
                "}"
              ],
              "oracle": [
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10);",
                "    assert_eq!(index_set.map.core.len(), 0);",
                "    assert_eq!(index_set.map.hash_builder.capacity(), 10);",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert_eq!(index_set_zero.map.hash_builder.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10);",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(10);",
                "    assert_eq!(index_set.map.core.len(), 0);",
                "    assert_eq!(index_set.map.hash_builder.capacity(), 10);",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert_eq!(index_set_zero.map.hash_builder.capacity(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1000);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.map.core.capacity(), 1000);",
                "    assert_eq!(index_set.map.hash_builder, RandomState::new());",
                "    assert!(index_set.map.core.is_empty());",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert_eq!(index_set_zero.map.core.capacity(), 0);",
                "    assert!(index_set_zero.map.core.is_empty());"
              ],
              "code": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(1000);",
                "    assert_eq!(index_set.map.core.capacity(), 1000);",
                "    assert_eq!(index_set.map.hash_builder, RandomState::new());",
                "    assert!(index_set.map.core.is_empty());",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert_eq!(index_set_zero.map.core.capacity(), 0);",
                "    assert!(index_set_zero.map.core.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(index_set.map.core.is_empty());",
                "    assert_eq!(index_set.map.hash_builder.capacity(), usize::MAX);",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert!(index_set_zero.map.core.is_empty());",
                "    assert_eq!(index_set_zero.map.hash_builder.capacity(), 0);",
                "    let index_set_small = IndexSet::<u32, RandomState>::with_capacity(10);",
                "    assert!(index_set_small.map.core.is_empty());",
                "    assert_eq!(index_set_small.map.hash_builder.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let index_set = IndexSet::<u32, RandomState>::with_capacity(usize::MAX);",
                "    assert!(index_set.map.core.is_empty());",
                "    assert_eq!(index_set.map.hash_builder.capacity(), usize::MAX);",
                "    let index_set_zero = IndexSet::<u32, RandomState>::with_capacity(0);",
                "    assert!(index_set_zero.map.core.is_empty());",
                "    assert_eq!(index_set_zero.map.hash_builder.capacity(), 0);",
                "    let index_set_small = IndexSet::<u32, RandomState>::with_capacity(10);",
                "    assert!(index_set_small.map.core.is_empty());",
                "    assert_eq!(index_set_small.map.hash_builder.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}