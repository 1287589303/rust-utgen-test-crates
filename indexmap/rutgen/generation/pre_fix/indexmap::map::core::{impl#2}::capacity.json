{
  "name": "indexmap::map::core::{impl#2}::capacity",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:170:5:172:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: K and V types that are valid for the Indices and Entries structures, with indices and entries holding 0 to MAX_ENTRIES_CAPACITY elements inclusive; test with fully populated, partially populated, and empty structures to evaluate capacity function under normal and edge cases.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let _ = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let _ = map.capacity();",
                "    assert_eq!(map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let hash_value = HashValue::new(0); // Assuming a method to create a HashValue",
                "    map.push_entry(hash_value, 1, 10);",
                "    let _ = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 10);",
                "    map.push_entry(hash_value, 2, 20);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.reserve(5);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.push_entry(hash_value, 3, 30);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.clear();",
                "    assert_eq!(map.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let hash_value = HashValue::new(0); // Assuming a method to create a HashValue",
                "    map.push_entry(hash_value, 1, 10);",
                "    let _ = map.capacity();",
                "    assert_eq!(map.capacity(), 10);",
                "    map.push_entry(hash_value, 2, 20);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.reserve(5);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.push_entry(hash_value, 3, 30);",
                "    assert_eq!(map.capacity(), 10);",
                "    map.clear();",
                "    assert_eq!(map.capacity(), 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "        let hash_value = HashValue::new(i as u64); // Assuming a method to create a HashValue",
                "        map.push_entry(hash_value, i, i * 10);",
                "    }",
                "    let _ = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.len() > 0);",
                "    assert!(map.capacity() > 0);",
                "    assert!(map.capacity() >= map.len());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "        let hash_value = HashValue::new(i as u64); // Assuming a method to create a HashValue",
                "        map.push_entry(hash_value, i, i * 10);",
                "    }",
                "    let _ = map.capacity();",
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.len() > 0);",
                "    assert!(map.capacity() > 0);",
                "    assert!(map.capacity() >= map.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    for i in 0..(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1) {",
                "        let hash_value = HashValue::new(i as u64); // Assuming a method to create a HashValue",
                "        map.push_entry(hash_value, i, i * 10);",
                "    }",
                "    let _ = map.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.len(), 0);",
                "    map.reserve(10);",
                "    assert!(map.capacity() >= 10);",
                "    map.reserve_exact(5);",
                "    assert_eq!(map.capacity(), 15);",
                "    map.clear();",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 15);",
                "    let initial_capacity = map.capacity();",
                "    map.truncate(0);",
                "    assert_eq!(map.capacity(), initial_capacity);",
                "    map.reserve(usize::MAX);",
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    map.push_entry(HashValue::new(123), 123, 123);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.capacity() > 0);",
                "    map.pop();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() > 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    for i in 0..(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1) {",
                "        let hash_value = HashValue::new(i as u64); // Assuming a method to create a HashValue",
                "        map.push_entry(hash_value, i, i * 10);",
                "    }",
                "    let _ = map.capacity();",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.len(), 0);",
                "    map.reserve(10);",
                "    assert!(map.capacity() >= 10);",
                "    map.reserve_exact(5);",
                "    assert_eq!(map.capacity(), 15);",
                "    map.clear();",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 15);",
                "    let initial_capacity = map.capacity();",
                "    map.truncate(0);",
                "    assert_eq!(map.capacity(), initial_capacity);",
                "    map.reserve(usize::MAX);",
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    map.push_entry(HashValue::new(123), 123, 123);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.capacity() > 0);",
                "    map.pop();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() > 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}