{
  "name": "indexmap::map::iter::{impl#57}::len",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:522:5:524:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.iter must be a valid slice iterator of type slice::Iter<'a, Bucket<K, V>> with a length in the range of 0 to N, where N is the maximum allowable length of the underlying Vec or slice.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }];",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);",
                "    let buckets_empty: Vec<Bucket<i32, i32>> = vec![];",
                "    let slice_empty: &[Bucket<i32, i32>] = &buckets_empty;",
                "    let iter_empty = Values { iter: slice_empty.iter() };",
                "    let length_empty = iter_empty.len();",
                "    assert_eq!(length_empty, 0);",
                "    let buckets_multiple = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }];",
                "    let slice_multiple: &[Bucket<i32, i32>] = &buckets_multiple;",
                "    let iter_multiple = Values { iter: slice_multiple.iter() };",
                "    let length_multiple = iter_multiple.len();",
                "    assert_eq!(length_multiple, 2);"
              ],
              "code": [
                "{",
                "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }];",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "    assert_eq!(length, 1);",
                "    let buckets_empty: Vec<Bucket<i32, i32>> = vec![];",
                "    let slice_empty: &[Bucket<i32, i32>] = &buckets_empty;",
                "    let iter_empty = Values { iter: slice_empty.iter() };",
                "    let length_empty = iter_empty.len();",
                "    assert_eq!(length_empty, 0);",
                "    let buckets_multiple = vec![Bucket { hash: HashValue::default(), key: 1, value: 10 }, Bucket { hash: HashValue::default(), key: 2, value: 20 }];",
                "    let slice_multiple: &[Bucket<i32, i32>] = &buckets_multiple;",
                "    let iter_multiple = Values { iter: slice_multiple.iter() };",
                "    let length_multiple = iter_multiple.len();",
                "    assert_eq!(length_multiple, 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets = vec![",
                "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "    ];",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 2);",
                "    assert!(length > 0);",
                "    assert!(length <= buckets.len());",
                "    assert!(length >= 0);"
              ],
              "code": [
                "{",
                "    let buckets = vec![",
                "        Bucket { hash: HashValue::default(), key: 1, value: 10 },",
                "        Bucket { hash: HashValue::default(), key: 2, value: 20 },",
                "    ];",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "    assert_eq!(length, 2);",
                "    assert!(length > 0);",
                "    assert!(length <= buckets.len());",
                "    assert!(length >= 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..100).map(|i| Bucket { hash: HashValue::default(), key: i, value: i * 10 }).collect();",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 100);"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..100).map(|i| Bucket { hash: HashValue::default(), key: i, value: i * 10 }).collect();",
                "    let slice: &[Bucket<i32, i32>] = &buckets;",
                "    let iter = Values { iter: slice.iter() };",
                "    let length = iter.len();",
                "    assert_eq!(length, 100);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}