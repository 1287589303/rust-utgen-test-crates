{
  "name": "indexmap::map::slice::{impl#21}::index_mut",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:423:5:425:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.entries[index].value\n"
      ],
      "input_infer": "index values must be within the range [0, entries.length - 1] where entries.length > 0\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "            Bucket { hash: 1, key: \"b\", value: 2 },",
                "        ],",
                "    };",
                "    let index = 0;",
                "    let value_ref = slice.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    value_ref == &mut slice.entries[0].value",
                "    slice.entries[0].value == 1",
                "    slice.index_mut(1) == &mut slice.entries[1].value",
                "    slice.entries[1].value == 2",
                "    slice.index_mut(0) = &mut 5",
                "    slice.entries[0].value == 5",
                "    slice.index_mut(1) = &mut 10",
                "    slice.entries[1].value == 10"
              ],
              "code": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "            Bucket { hash: 1, key: \"b\", value: 2 },",
                "        ],",
                "    };",
                "    let index = 0;",
                "    let value_ref = slice.index_mut(index);",
                "    value_ref == &mut slice.entries[0].value",
                "    slice.entries[0].value == 1",
                "    slice.index_mut(1) == &mut slice.entries[1].value",
                "    slice.entries[1].value == 2",
                "    slice.index_mut(0) = &mut 5",
                "    slice.entries[0].value == 5",
                "    slice.index_mut(1) = &mut 10",
                "    slice.entries[1].value == 10",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "            Bucket { hash: 1, key: \"b\", value: 2 },",
                "        ],",
                "    };",
                "    let index = 1;",
                "    let value_ref = slice.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    let mut slice = Slice { entries: [Bucket { hash: 0, key: \"a\", value: 1 }, Bucket { hash: 1, key: \"b\", value: 2 }] };",
                "    let index = 1;",
                "    let value_ref = slice.index_mut(index);",
                "    assert_eq!(*value_ref, 2);",
                "    *value_ref = 3;",
                "    assert_eq!(slice.entries[index].value, 3);"
              ],
              "code": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "            Bucket { hash: 1, key: \"b\", value: 2 },",
                "        ],",
                "    };",
                "    let index = 1;",
                "    let value_ref = slice.index_mut(index);",
                "    let mut slice = Slice { entries: [Bucket { hash: 0, key: \"a\", value: 1 }, Bucket { hash: 1, key: \"b\", value: 2 }] };",
                "    let index = 1;",
                "    let value_ref = slice.index_mut(index);",
                "    assert_eq!(*value_ref, 2);",
                "    *value_ref = 3;",
                "    assert_eq!(slice.entries[index].value, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "        ],",
                "    };",
                "    let index = usize::MAX; // Invalid index to trigger panic",
                "    let value_ref = slice.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    let slice = Slice { entries: [Bucket { hash: 0, key: \"a\", value: 1 }] };",
                "    let index = usize::MAX;",
                "    let result = std::panic::catch_unwind(|| { slice.index_mut(index) });",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "        ],",
                "    };",
                "    let index = usize::MAX; // Invalid index to trigger panic",
                "    let value_ref = slice.index_mut(index);",
                "    let slice = Slice { entries: [Bucket { hash: 0, key: \"a\", value: 1 }] };",
                "    let index = usize::MAX;",
                "    let result = std::panic::catch_unwind(|| { slice.index_mut(index) });",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "        ],",
                "    };",
                "    let index = 1; // Out of bounds index",
                "    let value_ref = slice.index_mut(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(std::panic::catch_unwind(|| slice.index_mut(index)).is_err(), true);"
              ],
              "code": [
                "{",
                "    let mut slice = Slice {",
                "        entries: [",
                "            Bucket { hash: 0, key: \"a\", value: 1 },",
                "        ],",
                "    };",
                "    let index = 1; // Out of bounds index",
                "    let value_ref = slice.index_mut(index);",
                "    assert_eq!(std::panic::catch_unwind(|| slice.index_mut(index)).is_err(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}