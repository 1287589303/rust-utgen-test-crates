{
  "name": "indexmap::map::core::entry::{impl#8}::get",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:457:5:459:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &self.map.entries[self.index].value\n"
      ],
      "input_infer": "Index must be a valid position within the map's entries slice (0 to entries.len() - 1) with a non-empty map for a valid reference return.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut key = \"key1\";",
                "    let mut value = 10;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
                "    indexed_entry.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(indexed_entry.get(), &value);",
                "    assert_eq!(indexed_entry.index(), 0);",
                "    assert_eq!(indexed_entry.key(), &key);",
                "    assert_eq!(indexed_entry.map.entries.len(), 1);",
                "    assert!(indexed_entry.map.entries[0].value == value);",
                "    assert!(indexed_entry.map.entries[0].key == key);"
              ],
              "code": [
                "{",
                "    let mut key = \"key1\";",
                "    let mut value = 10;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    let indexed_entry = IndexedEntry::new(&mut map, 0);",
                "    indexed_entry.get();",
                "    assert_eq!(indexed_entry.get(), &value);",
                "    assert_eq!(indexed_entry.index(), 0);",
                "    assert_eq!(indexed_entry.key(), &key);",
                "    assert_eq!(indexed_entry.map.entries.len(), 1);",
                "    assert!(indexed_entry.map.entries[0].value == value);",
                "    assert!(indexed_entry.map.entries[0].key == key);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut key = \"key2\";",
                "    let mut value = 20;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len() - 1);",
                "    indexed_entry.get();",
                "}"
              ],
              "oracle": [
                "    let key = \"key2\";",
                "    let value = 20;",
                "    let entries = vec![Bucket { hash: HashValue::default(), key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len() - 1);",
                "    assert_eq!(indexed_entry.get(), &value);",
                "    assert_eq!(indexed_entry.index(), entries.len() - 1);"
              ],
              "code": [
                "{",
                "    let mut key = \"key2\";",
                "    let mut value = 20;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len() - 1);",
                "    indexed_entry.get();",
                "    let key = \"key2\";",
                "    let value = 20;",
                "    let entries = vec![Bucket { hash: HashValue::default(), key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len() - 1);",
                "    assert_eq!(indexed_entry.get(), &value);",
                "    assert_eq!(indexed_entry.index(), entries.len() - 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut key = \"key3\";",
                "    let mut value = 30;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len());",
                "    indexed_entry.get();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(indexed_entry.get(), &entries[indexed_entry.index].value);",
                "    assert!(std::mem::size_of_val(indexed_entry.get()) == std::mem::size_of::<V>());",
                "    assert!(matches!(indexed_entry.get(), &value));",
                "    assert!(std::ptr::eq(indexed_entry.get(), &entries[indexed_entry.index].value));",
                "    assert!(indexed_entry.index() < entries.len());"
              ],
              "code": [
                "{",
                "    let mut key = \"key3\";",
                "    let mut value = 30;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, entries.len());",
                "    indexed_entry.get();",
                "    assert_eq!(indexed_entry.get(), &entries[indexed_entry.index].value);",
                "    assert!(std::mem::size_of_val(indexed_entry.get()) == std::mem::size_of::<V>());",
                "    assert!(matches!(indexed_entry.get(), &value));",
                "    assert!(std::ptr::eq(indexed_entry.get(), &entries[indexed_entry.index].value));",
                "    assert!(indexed_entry.index() < entries.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut key = \"key4\";",
                "    let mut value = 40;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, usize::MAX);",
                "    indexed_entry.get();",
                "}"
              ],
              "oracle": [
                "    let mut key = \"key4\";",
                "    let mut value = 40;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, usize::MAX);",
                "    assert_eq!(indexed_entry.get(), &entries[usize::MAX].value);"
              ],
              "code": [
                "{",
                "    let mut key = \"key4\";",
                "    let mut value = 40;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, usize::MAX);",
                "    indexed_entry.get();",
                "    let mut key = \"key4\";",
                "    let mut value = 40;",
                "    let mut entries = vec![Bucket { hash: HashValue::default(), key: key, value }];",
                "    let indices = &mut vec![0].into_boxed_slice();",
                "    let mut ref_mut = RefMut { indices, entries: &mut entries };",
                "    let mut map = IndexMapCore { /* initialization logic here */ };",
                "    ",
                "    let indexed_entry = IndexedEntry::new(&mut map, usize::MAX);",
                "    assert_eq!(indexed_entry.get(), &entries[usize::MAX].value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}