{
  "name": "indexmap::map::core::entry::{impl#8}::insert",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:470:5:472:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Key must be a valid type consistent with the map's key type, value must be a valid value of the map's value type, index must be a valid index within the map's range, ensuring it doesn't exceed the current number of entries; input ranges: K type should be non-null and support comparison, V type can be any value type compatible with the map, index must be within 0 to size of the map (inclusive).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value2\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(entry.get(), &\"value2\");",
                "    assert_eq!(entry.map.entries[0].value, \"value2\");",
                "    assert_eq!(entry.index(), 0);",
                "    assert_eq!(entry.key(), &\"key1\");"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value2\");",
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(entry.get(), &\"value2\");",
                "    assert_eq!(entry.map.entries[0].value, \"value2\");",
                "    assert_eq!(entry.index(), 0);",
                "    assert_eq!(entry.key(), &\"key1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value2\");",
                "",
                "    let mut entry_boundary = IndexedEntry::new(&mut map, 0);",
                "    let old_value_boundary = entry_boundary.insert(\"value3\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(old_value_boundary, \"value2\");",
                "    assert_eq!(entry.get(), \"value2\");",
                "    assert_eq!(entry_boundary.get(), \"value3\");",
                "    assert_eq!(entry.key(), &\"key1\");",
                "    assert_eq!(entry_boundary.key(), &\"key1\");"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value2\");",
                "",
                "    let mut entry_boundary = IndexedEntry::new(&mut map, 0);",
                "    let old_value_boundary = entry_boundary.insert(\"value3\");",
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(old_value_boundary, \"value2\");",
                "    assert_eq!(entry.get(), \"value2\");",
                "    assert_eq!(entry_boundary.get(), \"value3\");",
                "    assert_eq!(entry.key(), &\"key1\");",
                "    assert_eq!(entry_boundary.key(), &\"key1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    map.insert(\"key2\", \"value2\");",
                "    let mut entry = IndexedEntry::new(&mut map, 1);",
                "    let old_value = entry.insert(\"value3\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(old_value, \"value2\");",
                "    assert_eq!(entry.get(), &\"value3\");",
                "    assert_eq!(map.get(\"key2\"), Some(&\"value3\"));",
                "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    map.insert(\"key2\", \"value2\");",
                "    let mut entry = IndexedEntry::new(&mut map, 1);",
                "    let old_value = entry.insert(\"value3\");",
                "    assert_eq!(old_value, \"value2\");",
                "    assert_eq!(entry.get(), &\"value3\");",
                "    assert_eq!(map.get(\"key2\"), Some(&\"value3\"));",
                "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value4\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(old_value, Default::default());",
                "    assert_eq!(entry.get(), &\"value4\");",
                "    assert_eq!(entry.map.entries.len(), 1);",
                "    assert_eq!(entry.index(), 0);",
                "    entry.insert(\"value5\");",
                "    assert_eq!(entry.get(), &\"value5\");",
                "    assert_eq!(entry.insert(\"value6\"), \"value5\");",
                "    assert_eq!(entry.get(), &\"value6\");"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    let mut entry = IndexedEntry::new(&mut map, 0);",
                "    let old_value = entry.insert(\"value4\");",
                "    assert_eq!(old_value, Default::default());",
                "    assert_eq!(entry.get(), &\"value4\");",
                "    assert_eq!(entry.map.entries.len(), 1);",
                "    assert_eq!(entry.index(), 0);",
                "    entry.insert(\"value5\");",
                "    assert_eq!(entry.get(), &\"value5\");",
                "    assert_eq!(entry.insert(\"value6\"), \"value5\");",
                "    assert_eq!(entry.get(), &\"value6\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 1);",
                "    let old_value = entry.insert(\"value5\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&\"value5\"));",
                "    assert!(std::panic::catch_unwind(|| { IndexedEntry::new(&mut map, 0) }).is_err());"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let mut entry = IndexedEntry::new(&mut map, 1);",
                "    let old_value = entry.insert(\"value5\");",
                "    assert_eq!(map.get(\"key1\"), Some(&\"value1\"));",
                "    assert_eq!(old_value, \"value1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&\"value5\"));",
                "    assert!(std::panic::catch_unwind(|| { IndexedEntry::new(&mut map, 0) }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}