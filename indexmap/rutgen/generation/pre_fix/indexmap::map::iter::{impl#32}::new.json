{
  "name": "indexmap::map::iter::{impl#32}::new",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": false,
  "loc": "src/map/iter.rs:289:5:291:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self { iter }\n"
      ],
      "input_infer": "Valid input conditions include a non-empty vector of Bucket<K, V> instances for valid K, V types; an empty vector for boundary case; and ensuring K and V implement Hash trait for correct functionality.\n",
      "answers": [
        {
          "uses": [
            "use std::hash::Hasher;",
            "use std::hash::Hash;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    #[derive(Hash, Eq, PartialEq, Debug)]",
                "    struct TestKey(u32);",
                "    #[derive(Debug)]",
                "    struct TestValue(String);",
                "",
                "    let mut vec: Vec<Bucket<TestKey, TestValue>> = Vec::new();",
                "    vec.push(Bucket {",
                "        hash: HashValue::new(1),",
                "        key: TestKey(1),",
                "        value: TestValue(\"value1\".to_string()),",
                "    });",
                "    vec.push(Bucket {",
                "        hash: HashValue::new(2),",
                "        key: TestKey(2),",
                "        value: TestValue(\"value2\".to_string()),",
                "    });",
                "",
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "}"
              ],
              "oracle": [
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "    assert_eq!(result.iter.len(), 2);",
                "    assert_eq!(result.iter.next().unwrap().key, TestKey(1));",
                "    assert_eq!(result.iter.next().unwrap().key, TestKey(2));",
                "    assert!(result.iter.next().is_none());",
                "    assert!(matches!(result, Drain { iter: _ }));"
              ],
              "code": [
                "{",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    #[derive(Hash, Eq, PartialEq, Debug)]",
                "    struct TestKey(u32);",
                "    #[derive(Debug)]",
                "    struct TestValue(String);",
                "",
                "    let mut vec: Vec<Bucket<TestKey, TestValue>> = Vec::new();",
                "    vec.push(Bucket {",
                "        hash: HashValue::new(1),",
                "        key: TestKey(1),",
                "        value: TestValue(\"value1\".to_string()),",
                "    });",
                "    vec.push(Bucket {",
                "        hash: HashValue::new(2),",
                "        key: TestKey(2),",
                "        value: TestValue(\"value2\".to_string()),",
                "    });",
                "",
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "    assert_eq!(result.iter.len(), 2);",
                "    assert_eq!(result.iter.next().unwrap().key, TestKey(1));",
                "    assert_eq!(result.iter.next().unwrap().key, TestKey(2));",
                "    assert!(result.iter.next().is_none());",
                "    assert!(matches!(result, Drain { iter: _ }));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    #[derive(Hash, Eq, PartialEq, Debug)]",
                "    struct TestKey(u32);",
                "    #[derive(Debug)]",
                "    struct TestValue(String);",
                "",
                "    let vec: Vec<Bucket<TestKey, TestValue>> = Vec::new();",
                "",
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "}"
              ],
              "oracle": [
                "    let expected = Drain { iter: drain };",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    #[derive(Hash, Eq, PartialEq, Debug)]",
                "    struct TestKey(u32);",
                "    #[derive(Debug)]",
                "    struct TestValue(String);",
                "",
                "    let vec: Vec<Bucket<TestKey, TestValue>> = Vec::new();",
                "",
                "    let drain = vec.drain(..);",
                "    let result = Drain::new(drain);",
                "    let expected = Drain { iter: drain };",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}