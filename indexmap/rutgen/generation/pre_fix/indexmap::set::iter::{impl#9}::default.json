{
  "name": "indexmap::set::iter::{impl#9}::default",
  "mod_info": {
    "name": "set::iter",
    "loc": "src/set.rs:3:1:3:10"
  },
  "visible": true,
  "loc": "src/set/iter.rs:82:5:84:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self { iter: [].iter() }\n"
      ],
      "input_infer": "iter: any valid slice of Bucket<T> where T can be any type, including empty slice for boundary testing\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<u32> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
                "}"
              ],
              "oracle": [
                "    let iter: Iter<u32> = Iter::default();",
                "    assert_eq!(iter.iter.len(), 0);",
                "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    assert!(iter.iter.clone().next().is_none());"
              ],
              "code": [
                "{",
                "    let iter: Iter<u32> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
                "    let iter: Iter<u32> = Iter::default();",
                "    assert_eq!(iter.iter.len(), 0);",
                "    let _: SliceIter<'_, Bucket<u32>> = iter.iter;",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    assert!(iter.iter.clone().next().is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<String> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
                "}"
              ],
              "oracle": [
                "    let iter: Iter<String> = Iter::default();",
                "    assert_eq!(iter.iter.len(), 0);",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    let _: SliceIter<'_, Bucket<String>> = iter.iter;"
              ],
              "code": [
                "{",
                "    let iter: Iter<String> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
                "    let iter: Iter<String> = Iter::default();",
                "    assert_eq!(iter.iter.len(), 0);",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    let _: SliceIter<'_, Bucket<String>> = iter.iter;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<(i32, i32)> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<(i32, i32)>> = iter.iter;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.iter.as_slice(), &[]);",
                "    assert!(iter.iter.len() == 0);",
                "    assert!(iter.iter.is_empty());",
                "    assert!(iter.iter.next().is_none());"
              ],
              "code": [
                "{",
                "    let iter: Iter<(i32, i32)> = Iter::default();",
                "    let _: SliceIter<'_, Bucket<(i32, i32)>> = iter.iter;",
                "    assert_eq!(iter.iter.as_slice(), &[]);",
                "    assert!(iter.iter.len() == 0);",
                "    assert!(iter.iter.is_empty());",
                "    assert!(iter.iter.next().is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}