{
  "name": "indexmap::map::core::entry::{impl#1}::or_default",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:122:5:130:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Entry::Vacant(entry) at line 126 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => entry.insert(V::default()),\n        }\n"
      ],
      "input_infer": "self is of type Entry::Vacant with valid K and V types, and V implements Default trait.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "    ",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries = hashbrown::HashMap::new();",
                "    let key = TestKey;",
                "    let hash_value = HashValue::default(); // Assuming HashValue has a default implementation",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: hash_value,",
                "        key,",
                "    };",
                "    ",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _value_ref: &mut TestValue = entry.or_default();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_value_ref.data, 0);",
                "    assert!(entries.contains_key(&key));",
                "    assert_eq!(entries.get(&key).unwrap().data, 0);",
                "    assert_eq!(entry.index(), entries.len() - 1);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "    ",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries = hashbrown::HashMap::new();",
                "    let key = TestKey;",
                "    let hash_value = HashValue::default(); // Assuming HashValue has a default implementation",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: hash_value,",
                "        key,",
                "    };",
                "    ",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _value_ref: &mut TestValue = entry.or_default();",
                "    assert_eq!(_value_ref.data, 0);",
                "    assert!(entries.contains_key(&key));",
                "    assert_eq!(entries.get(&key).unwrap().data, 0);",
                "    assert_eq!(entry.index(), entries.len() - 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Entry::Occupied(entry) at line 126 is true\n",
        "precondition: self matches Entry::Occupied(entry) at line 126 is true\n",
        "expected return value/type: match self {\n            Entry::Occupied(entry) => entry.into_mut(),\n            Entry::Vacant(entry) => entry.insert(V::default()),\n        }\n"
      ],
      "input_infer": "Valid test input conditions include: Entry::Occupied with a valid key type K and value type V, where V implements Default; Entry::Vacant with a valid key type K and value type V, where V implements Default; scenarios with both existing entry and vacant entry, testing boundary cases with minimum and maximum possible key values as well as default construction of value type V.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
                "    let key = TestKey;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(0));",
                "    let entry = Entry::Occupied(occupied_entry);",
                "    ",
                "    let value_ref = entry.or_default();",
                "}"
              ],
              "oracle": [
                "    let entry = Entry::Occupied(occupied_entry);",
                "    let value_ref = entry.or_default();",
                "    assert_eq!(value_ref.data, 0);  // Ensure default value is returned from Empty Entry",
                "    let value_ref_occupied = entry.or_default();",
                "    assert_eq!(value_ref_occupied.data, 0);  // Verify existing value is returned from Occupied Entry",
                "    value_ref_occupied.data = 42;  // Modify the value through mutable reference",
                "    assert_eq!(value_ref_occupied.data, 42);  // Check that change is reflected in the entry",
                "    assert_eq!(entry.or_default().data, 42);  // Ensure or_default returns updated value"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
                "    let key = TestKey;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(0));",
                "    let entry = Entry::Occupied(occupied_entry);",
                "    ",
                "    let value_ref = entry.or_default();",
                "    let entry = Entry::Occupied(occupied_entry);",
                "    let value_ref = entry.or_default();",
                "    assert_eq!(value_ref.data, 0);  // Ensure default value is returned from Empty Entry",
                "    let value_ref_occupied = entry.or_default();",
                "    assert_eq!(value_ref_occupied.data, 0);  // Verify existing value is returned from Occupied Entry",
                "    value_ref_occupied.data = 42;  // Modify the value through mutable reference",
                "    assert_eq!(value_ref_occupied.data, 42);  // Check that change is reflected in the entry",
                "    assert_eq!(entry.or_default().data, 42);  // Ensure or_default returns updated value",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
                "    let key = TestKey;",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key,",
                "    };",
                "    let entry = Entry::Vacant(vacant_entry);",
                "",
                "    let value_ref = entry.or_default();",
                "}"
              ],
              "oracle": [
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(value_ref.data, 0);",
                "    assert_eq!(entries.len(), 1);",
                "    assert!(entries.contains_key(&key));",
                "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected Entry::Occupied\") };",
                "    assert_eq!(occupied_entry.get().data, 0);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue {",
                "        data: i32,",
                "    }",
                "",
                "    impl Default for TestValue {",
                "        fn default() -> Self {",
                "            TestValue { data: 0 }",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<TestKey, TestValue> = Entries::new();",
                "    let key = TestKey;",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key,",
                "    };",
                "    let entry = Entry::Vacant(vacant_entry);",
                "",
                "    let value_ref = entry.or_default();",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(value_ref.data, 0);",
                "    assert_eq!(entries.len(), 1);",
                "    assert!(entries.contains_key(&key));",
                "    let occupied_entry = if let Entry::Occupied(entry) = entry { entry } else { panic!(\"Expected Entry::Occupied\") };",
                "    assert_eq!(occupied_entry.get().data, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}