{
  "name": "indexmap::map::{impl#4}::into_keys",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:255:5:257:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: K and V types must be defined, a non-empty IndexMap must be created with at least one key-value pair, and the into_keys function should be called on that instance.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    let keys_iter = map.into_keys();",
                "    assert_eq!(keys_iter.iter.collect::<Vec<_>>(), vec![1, 2]);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    let keys_iter = map.into_keys();",
                "    assert_eq!(keys_iter.iter.collect::<Vec<_>>(), vec![1, 2]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    map.insert(3, \"three\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys_iter.collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert!(keys_iter.len() == 3);",
                "    assert!(!keys_iter.is_empty());",
                "    let keys_vec: Vec<_> = keys_iter.collect();",
                "    assert!(keys_vec.contains(&1));",
                "    assert!(keys_vec.contains(&2));",
                "    assert!(keys_vec.contains(&3));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(1, \"one\");",
                "    map.insert(2, \"two\");",
                "    map.insert(3, \"three\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "    assert_eq!(keys_iter.collect::<Vec<_>>(), vec![1, 2, 3]);",
                "    assert!(keys_iter.len() == 3);",
                "    assert!(!keys_iter.is_empty());",
                "    let keys_vec: Vec<_> = keys_iter.collect();",
                "    assert!(keys_vec.contains(&1));",
                "    assert!(keys_vec.contains(&2));",
                "    assert!(keys_vec.contains(&3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(5, \"five\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "}"
              ],
              "oracle": [
                "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(!map.is_empty());",
                "    let keys_iter = map.into_keys();",
                "    assert_eq!(keys_iter.iter.count(), 1);",
                "    assert_eq!(keys_iter.iter.next().unwrap().key, 5);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::hash::rustc_hash::default::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            Self::Hasher::default()",
                "        }",
                "    }",
                "",
                "    let mut map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    map.insert(5, \"five\");",
                "    ",
                "    let keys_iter = map.into_keys();",
                "    let map: IndexMap<i32, &str, TestHasher> = IndexMap::with_capacity_and_hasher(10, TestHasher);",
                "    assert_eq!(map.len(), 1);",
                "    assert!(!map.is_empty());",
                "    let keys_iter = map.into_keys();",
                "    assert_eq!(keys_iter.iter.count(), 1);",
                "    assert_eq!(keys_iter.iter.next().unwrap().key, 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}