{
  "name": "indexmap::set::iter::{impl#1}::into_iter",
  "mod_info": {
    "name": "set::iter",
    "loc": "src/set.rs:3:1:3:10"
  },
  "visible": true,
  "loc": "src/set/iter.rs:23:5:25:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions: A valid `IndexSet<T, S>` instance containing at least one entry and a properly implemented `IntoEntries` method that returns a non-empty `Vec<Bucket<T>>`.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"value1\" };",
                "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"value2\" };",
                "    let buckets = vec![bucket1, bucket2];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.as_slice().len(), 2);",
                "    assert_eq!(iter.as_slice()[0].key, 1);",
                "    assert_eq!(iter.as_slice()[0].value, \"value1\");",
                "    assert_eq!(iter.as_slice()[1].key, 2);",
                "    assert_eq!(iter.as_slice()[1].value, \"value2\");",
                "    assert_eq!(iter.iter.count(), 2);"
              ],
              "code": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket1 = Bucket { hash: HashValue::default(), key: 1, value: \"value1\" };",
                "    let bucket2 = Bucket { hash: HashValue::default(), key: 2, value: \"value2\" };",
                "    let buckets = vec![bucket1, bucket2];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "    assert_eq!(iter.as_slice().len(), 2);",
                "    assert_eq!(iter.as_slice()[0].key, 1);",
                "    assert_eq!(iter.as_slice()[0].value, \"value1\");",
                "    assert_eq!(iter.as_slice()[1].key, 2);",
                "    assert_eq!(iter.as_slice()[1].value, \"value2\");",
                "    assert_eq!(iter.iter.count(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"single_value\" };",
                "    let buckets = vec![bucket];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.as_slice().len(), 1);",
                "    assert_eq!(iter.iter[0].key, 1);",
                "    assert_eq!(iter.iter[0].value, \"single_value\");",
                "    assert_eq!(iter.iter[0].hash, HashValue::default());",
                "    assert!(iter.iter.iter().next().is_some());",
                "    assert!(iter.iter.iter().next().unwrap().key == 1);",
                "    assert!(iter.iter.iter().next().unwrap().value == \"single_value\");"
              ],
              "code": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket = Bucket { hash: HashValue::default(), key: 1, value: \"single_value\" };",
                "    let buckets = vec![bucket];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.as_slice().len(), 1);",
                "    assert_eq!(iter.iter[0].key, 1);",
                "    assert_eq!(iter.iter[0].value, \"single_value\");",
                "    assert_eq!(iter.iter[0].hash, HashValue::default());",
                "    assert!(iter.iter.iter().next().is_some());",
                "    assert!(iter.iter.iter().next().unwrap().key == 1);",
                "    assert!(iter.iter.iter().next().unwrap().value == \"single_value\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket = Bucket { hash: HashValue::default(), key: 0, value: \"boundary_value\" };",
                "    let buckets = vec![bucket];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "}"
              ],
              "oracle": [
                "    let bucket = Bucket { hash: HashValue::default(), key: 0, value: \"boundary_value\" };",
                "    assert_eq!(bucket.key, 0);",
                "    assert_eq!(bucket.value, \"boundary_value\");",
                "    ",
                "    let buckets = vec![bucket];",
                "    let index_set = IndexSet {",
                "    map: IndexMap {",
                "    core: IndexMapCore::new(buckets.clone()),",
                "    hash_builder: HashBuilder,",
                "    },",
                "    };",
                "    ",
                "    let iter = index_set.into_iter();",
                "    assert_eq!(iter.iter.len(), 1);",
                "    ",
                "    let first_entry = iter.as_slice()[0];",
                "    assert_eq!(first_entry.key, 0);",
                "    assert_eq!(first_entry.value, \"boundary_value\");"
              ],
              "code": [
                "{",
                "    struct HashBuilder;",
                "",
                "    let bucket = Bucket { hash: HashValue::default(), key: 0, value: \"boundary_value\" };",
                "    let buckets = vec![bucket];",
                "",
                "    let index_set = IndexSet {",
                "        map: IndexMap {",
                "            core: IndexMapCore::new(buckets.clone()),",
                "            hash_builder: HashBuilder,",
                "        },",
                "    };",
                "",
                "    let iter = index_set.into_iter();",
                "    let bucket = Bucket { hash: HashValue::default(), key: 0, value: \"boundary_value\" };",
                "    assert_eq!(bucket.key, 0);",
                "    assert_eq!(bucket.value, \"boundary_value\");",
                "    ",
                "    let buckets = vec![bucket];",
                "    let index_set = IndexSet {",
                "    map: IndexMap {",
                "    core: IndexMapCore::new(buckets.clone()),",
                "    hash_builder: HashBuilder,",
                "    },",
                "    };",
                "    ",
                "    let iter = index_set.into_iter();",
                "    assert_eq!(iter.iter.len(), 1);",
                "    ",
                "    let first_entry = iter.as_slice()[0];",
                "    assert_eq!(first_entry.key, 0);",
                "    assert_eq!(first_entry.value, \"boundary_value\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}