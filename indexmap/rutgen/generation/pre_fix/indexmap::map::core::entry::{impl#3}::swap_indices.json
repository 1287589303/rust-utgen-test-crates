{
  "name": "indexmap::map::core::entry::{impl#3}::swap_indices",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:311:5:314:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a valid OccupiedEntry instance, other must be a valid index within the bounds of the entries array, and self.index() must return an index that is also within the bounds of the entries array; thus, valid test input conditions are: self as a valid OccupiedEntry<K, V> instance and other as an integer in the range [0, entries.len() - 1] where entries is the array of entries associated with self.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "    ",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entries.as_entries(), &[(2, 3), (0, 1), (4, 5)]);",
                "    assert_eq!(entry.index(), 0);",
                "    occupied_entry.swap_indices(2);",
                "    assert_eq!(entries.as_entries(), &[(4, 5), (0, 1), (2, 3)]);",
                "    occupied_entry.swap_indices(1);",
                "    assert_eq!(entries.as_entries(), &[(4, 5), (2, 3), (0, 1)]);",
                "    let out_of_bounds_index = 3;",
                "    let result = std::panic::catch_unwind(|| occupied_entry.swap_indices(out_of_bounds_index));",
                "    assert!(result.is_err());",
                "    occupied_entry.swap_indices(occupied_entry_index);",
                "    assert_eq!(entries.as_entries(), &[(2, 3), (0, 1), (4, 5)]);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "    ",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(0);",
                "    assert_eq!(entries.as_entries(), &[(2, 3), (0, 1), (4, 5)]);",
                "    assert_eq!(entry.index(), 0);",
                "    occupied_entry.swap_indices(2);",
                "    assert_eq!(entries.as_entries(), &[(4, 5), (0, 1), (2, 3)]);",
                "    occupied_entry.swap_indices(1);",
                "    assert_eq!(entries.as_entries(), &[(4, 5), (2, 3), (0, 1)]);",
                "    let out_of_bounds_index = 3;",
                "    let result = std::panic::catch_unwind(|| occupied_entry.swap_indices(out_of_bounds_index));",
                "    assert!(result.is_err());",
                "    occupied_entry.swap_indices(occupied_entry_index);",
                "    assert_eq!(entries.as_entries(), &[(2, 3), (0, 1), (4, 5)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(3); // out of bounds",
                "}"
              ],
              "oracle": [
                "    plaintext",
                "    assert!(std::panic::catch_unwind(|| occupied_entry.swap_indices(3)).is_err());",
                "    assert_eq!(entries.as_entries(), &[(0, 1), (2, 3), (4, 5)]);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(3); // out of bounds",
                "    plaintext",
                "    assert!(std::panic::catch_unwind(|| occupied_entry.swap_indices(3)).is_err());",
                "    assert_eq!(entries.as_entries(), &[(0, 1), (2, 3), (4, 5)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(1); // swapping with itself",
                "}"
              ],
              "oracle": [
                "    assert_eq!(occupied_entry.index(), 1);",
                "    assert_eq!(entries.as_entries(), &vec![(0, 1), (2, 3), (4, 5)]);",
                "    occupied_entry.swap_indices(0);",
                "    assert_eq!(entries.as_entries(), &vec![(2, 3), (0, 1), (4, 5)]);",
                "    occupied_entry.swap_indices(2);",
                "    assert_eq!(entries.as_entries(), &vec![(4, 5), (0, 1), (2, 3)]);",
                "    let panic_msg = std::panic::catch_unwind(|| {",
                "    occupied_entry.swap_indices(3);",
                "    });",
                "    assert!(panic_msg.is_err());",
                "    occupied_entry.swap_indices(1); // swap back to original state",
                "    assert_eq!(entries.as_entries(), &vec![(4, 5), (0, 1), (2, 3)]);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<(usize, usize)>,",
                "    }",
                "    ",
                "    impl Entries for TestEntries {",
                "        type Entry = (usize, usize);",
                "        ",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "        ",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "        ",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "        ",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![(0, 1), (2, 3), (4, 5)],",
                "    };",
                "    let occupied_entry_index = 1; // valid index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(occupied_entry_index));",
                "",
                "    occupied_entry.swap_indices(1); // swapping with itself",
                "    assert_eq!(occupied_entry.index(), 1);",
                "    assert_eq!(entries.as_entries(), &vec![(0, 1), (2, 3), (4, 5)]);",
                "    occupied_entry.swap_indices(0);",
                "    assert_eq!(entries.as_entries(), &vec![(2, 3), (0, 1), (4, 5)]);",
                "    occupied_entry.swap_indices(2);",
                "    assert_eq!(entries.as_entries(), &vec![(4, 5), (0, 1), (2, 3)]);",
                "    let panic_msg = std::panic::catch_unwind(|| {",
                "    occupied_entry.swap_indices(3);",
                "    });",
                "    assert!(panic_msg.is_err());",
                "    occupied_entry.swap_indices(1); // swap back to original state",
                "    assert_eq!(entries.as_entries(), &vec![(4, 5), (0, 1), (2, 3)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}