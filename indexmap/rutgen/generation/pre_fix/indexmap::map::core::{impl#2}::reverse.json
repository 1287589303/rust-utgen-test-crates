{
  "name": "indexmap::map::core::{impl#2}::reverse",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:513:5:522:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: i in &mut self.indices at line 519 is true\n",
        "precondition: i in &mut self.indices at line 519 is false\n"
      ],
      "input_infer": "self.indices is non-empty and contains valid indices for a non-empty self.entries with lengths ranging from 1 to MAX_ENTRIES_CAPACITY; self.indices is empty (self.entries is empty).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(5);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: 1.into(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: 2.into(), key: 3, value: 30 });",
                "    map.indices.push(0);",
                "    map.indices.push(1);",
                "    map.indices.push(2);",
                "    ",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entries.len(), 3);",
                "    assert_eq!(map.entries[0].key, 3);",
                "    assert_eq!(map.entries[0].value, 30);",
                "    assert_eq!(map.entries[1].key, 2);",
                "    assert_eq!(map.entries[1].value, 20);",
                "    assert_eq!(map.entries[2].key, 1);",
                "    assert_eq!(map.entries[2].value, 10);",
                "    assert_eq!(map.indices[0], 2);",
                "    assert_eq!(map.indices[1], 1);",
                "    assert_eq!(map.indices[2], 0);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(5);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: 1.into(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: 2.into(), key: 3, value: 30 });",
                "    map.indices.push(0);",
                "    map.indices.push(1);",
                "    map.indices.push(2);",
                "    ",
                "    map.reverse();",
                "    assert_eq!(map.entries.len(), 3);",
                "    assert_eq!(map.entries[0].key, 3);",
                "    assert_eq!(map.entries[0].value, 30);",
                "    assert_eq!(map.entries[1].key, 2);",
                "    assert_eq!(map.entries[1].value, 20);",
                "    assert_eq!(map.entries[2].key, 1);",
                "    assert_eq!(map.entries[2].value, 10);",
                "    assert_eq!(map.indices[0], 2);",
                "    assert_eq!(map.indices[1], 1);",
                "    assert_eq!(map.indices[2], 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::new();",
                "    ",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.indices.is_empty());",
                "    map.reverse();",
                "    let indices_after_reverse = map.indices.clone();",
                "    assert_eq!(indices_after_reverse, vec![]);",
                "    map.insert_full(1, 10);",
                "    map.insert_full(2, 20);",
                "    map.insert_full(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.entries, vec![Bucket { hash: any_hash_value, key: 3, value: 30 }, Bucket { hash: any_hash_value, key: 2, value: 20 }, Bucket { hash: any_hash_value, key: 1, value: 10 }]);",
                "    let indices_after_reverse_nonempty = map.indices.clone();",
                "    assert_eq!(indices_after_reverse_nonempty, vec![2, 1, 0]);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::new();",
                "    ",
                "    map.reverse();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.indices.is_empty());",
                "    map.reverse();",
                "    let indices_after_reverse = map.indices.clone();",
                "    assert_eq!(indices_after_reverse, vec![]);",
                "    map.insert_full(1, 10);",
                "    map.insert_full(2, 20);",
                "    map.insert_full(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.entries, vec![Bucket { hash: any_hash_value, key: 3, value: 30 }, Bucket { hash: any_hash_value, key: 2, value: 20 }, Bucket { hash: any_hash_value, key: 1, value: 10 }]);",
                "    let indices_after_reverse_nonempty = map.indices.clone();",
                "    assert_eq!(indices_after_reverse_nonempty, vec![2, 1, 0]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.indices.push(0);",
                "    ",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.indices.push(0);",
                "    map.reverse();",
                "    assert_eq!(map.entries.len(), 1);",
                "    assert_eq!(map.indices.len(), 1);",
                "    assert_eq!(map.indices[0], 0);",
                "    ",
                "    let mut map_empty = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map_empty.reverse();",
                "    assert_eq!(map_empty.entries.len(), 0);",
                "    assert_eq!(map_empty.indices.len(), 0);",
                "    ",
                "    let mut map_multiple = IndexMapCore::<usize, usize>::with_capacity(3);",
                "    map_multiple.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map_multiple.entries.push(Bucket { hash: 1.into(), key: 2, value: 20 });",
                "    map_multiple.indices.push(0);",
                "    map_multiple.indices.push(1);",
                "    map_multiple.reverse();",
                "    assert_eq!(map_multiple.entries[0].key, 2);",
                "    assert_eq!(map_multiple.entries[1].key, 1);",
                "    assert_eq!(map_multiple.indices[0], 1);",
                "    assert_eq!(map_multiple.indices[1], 0);",
                "    ",
                "    let mut map_indices_unordered = IndexMapCore::<usize, usize>::with_capacity(2);",
                "    map_indices_unordered.entries.push(Bucket { hash: 0.into(), key: 3, value: 30 });",
                "    map_indices_unordered.entries.push(Bucket { hash: 1.into(), key: 4, value: 40 });",
                "    map_indices_unordered.indices.push(1);",
                "    map_indices_unordered.indices.push(0);",
                "    map_indices_unordered.reverse();",
                "    assert_eq!(map_indices_unordered.indices[0], 0);",
                "    assert_eq!(map_indices_unordered.indices[1], 1);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.indices.push(0);",
                "    ",
                "    map.reverse();",
                "    let mut map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map.indices.push(0);",
                "    map.reverse();",
                "    assert_eq!(map.entries.len(), 1);",
                "    assert_eq!(map.indices.len(), 1);",
                "    assert_eq!(map.indices[0], 0);",
                "    ",
                "    let mut map_empty = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    map_empty.reverse();",
                "    assert_eq!(map_empty.entries.len(), 0);",
                "    assert_eq!(map_empty.indices.len(), 0);",
                "    ",
                "    let mut map_multiple = IndexMapCore::<usize, usize>::with_capacity(3);",
                "    map_multiple.entries.push(Bucket { hash: 0.into(), key: 1, value: 10 });",
                "    map_multiple.entries.push(Bucket { hash: 1.into(), key: 2, value: 20 });",
                "    map_multiple.indices.push(0);",
                "    map_multiple.indices.push(1);",
                "    map_multiple.reverse();",
                "    assert_eq!(map_multiple.entries[0].key, 2);",
                "    assert_eq!(map_multiple.entries[1].key, 1);",
                "    assert_eq!(map_multiple.indices[0], 1);",
                "    assert_eq!(map_multiple.indices[1], 0);",
                "    ",
                "    let mut map_indices_unordered = IndexMapCore::<usize, usize>::with_capacity(2);",
                "    map_indices_unordered.entries.push(Bucket { hash: 0.into(), key: 3, value: 30 });",
                "    map_indices_unordered.entries.push(Bucket { hash: 1.into(), key: 4, value: 40 });",
                "    map_indices_unordered.indices.push(1);",
                "    map_indices_unordered.indices.push(0);",
                "    map_indices_unordered.reverse();",
                "    assert_eq!(map_indices_unordered.indices[0], 0);",
                "    assert_eq!(map_indices_unordered.indices[1], 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: i in &mut self.indices at line 519 is false\n"
      ],
      "input_infer": "Test input conditions or ranges: indices vector is empty or has length less than 1; entries vector has any number of elements; input must allow for an in-place reversal of entries without affecting indices.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.entries.is_empty());",
                "    assert!(map.indices.is_empty());",
                "    assert!(map.indices.iter().all(|&i| i == 0));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.reverse();",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.entries.is_empty());",
                "    assert!(map.indices.is_empty());",
                "    assert!(map.indices.iter().all(|&i| i == 0));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entries.len(), 1);",
                "    assert_eq!(map.entries[0].key, 1);",
                "    assert_eq!(map.entries[0].value, 10);",
                "    assert!(map.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.reverse();",
                "    assert_eq!(map.entries.len(), 1);",
                "    assert_eq!(map.entries[0].key, 1);",
                "    assert_eq!(map.entries[0].value, 10);",
                "    assert!(map.indices.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    assert_eq!(map.entries.len(), 3);",
                "    map.reverse();",
                "    assert_eq!(map.entries[0].key, 3);",
                "    assert_eq!(map.entries[1].key, 2);",
                "    assert_eq!(map.entries[2].key, 1);",
                "    assert!(map.indices.len() == 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    map.reverse();",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    assert_eq!(map.entries.len(), 3);",
                "    map.reverse();",
                "    assert_eq!(map.entries[0].key, 3);",
                "    assert_eq!(map.entries[1].key, 2);",
                "    assert_eq!(map.entries[2].key, 1);",
                "    assert!(map.indices.len() == 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(100);",
                "    for i in 0..100 {",
                "        map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
                "    }",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 100);",
                "    assert_eq!(map.entries[0].key, 99);",
                "    assert_eq!(map.entries[0].value, 990);",
                "    assert_eq!(map.entries[99].key, 0);",
                "    assert_eq!(map.entries[99].value, 0);",
                "    assert!(map.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(100);",
                "    for i in 0..100 {",
                "        map.entries.push(Bucket { hash: HashValue::default(), key: i, value: i * 10 });",
                "    }",
                "    map.reverse();",
                "    assert_eq!(map.len(), 100);",
                "    assert_eq!(map.entries[0].key, 99);",
                "    assert_eq!(map.entries[0].value, 990);",
                "    assert_eq!(map.entries[99].key, 0);",
                "    assert_eq!(map.entries[99].value, 0);",
                "    assert!(map.indices.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}