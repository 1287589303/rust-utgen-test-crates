{
  "name": "indexmap::map::{impl#4}::truncate",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:285:5:287:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 ≤ len ≤ IndexMap::len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    index_map.truncate(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(0);",
                "    assert!(index_map.is_empty());",
                "    index_map.truncate(1);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(10);",
                "    assert_eq!(index_map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(0);",
                "    assert!(index_map.is_empty());",
                "    index_map.truncate(1);",
                "    assert_eq!(index_map.len(), 0);",
                "    index_map.truncate(10);",
                "    assert_eq!(index_map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(!index_map.is_empty());",
                "    assert!(index_map.iter().count() == 5);",
                "    ",
                "    index_map.truncate(3);",
                "    assert_eq!(index_map.len(), 3);",
                "    assert_eq!(index_map.iter().collect::<Vec<_>>(), vec![(0, 0), (1, 1), (2, 2)]);",
                "    ",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(2);",
                "    assert_eq!(index_map.len(), 0);",
                "    ",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(!index_map.is_empty());",
                "    assert!(index_map.iter().count() == 5);",
                "    ",
                "    index_map.truncate(3);",
                "    assert_eq!(index_map.len(), 3);",
                "    assert_eq!(index_map.iter().collect::<Vec<_>>(), vec![(0, 0), (1, 1), (2, 2)]);",
                "    ",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(2);",
                "    assert_eq!(index_map.len(), 0);",
                "    ",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(3);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 3);",
                "    assert!(index_map.get(&3).is_none());",
                "    assert_eq!(index_map.get(&0), Some(&0));",
                "    assert_eq!(index_map.get(&1), Some(&1));",
                "    assert_eq!(index_map.get(&2), Some(&2));",
                "    assert_eq!(index_map.capacity(), 5);",
                "    index_map.truncate(0);",
                "    assert!(index_map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(3);",
                "    assert_eq!(index_map.len(), 3);",
                "    assert!(index_map.get(&3).is_none());",
                "    assert_eq!(index_map.get(&0), Some(&0));",
                "    assert_eq!(index_map.get(&1), Some(&1));",
                "    assert_eq!(index_map.get(&2), Some(&2));",
                "    assert_eq!(index_map.capacity(), 5);",
                "    index_map.truncate(0);",
                "    assert!(index_map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(10);",
                "}"
              ],
              "oracle": [
                "    let index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    index_map.len() == 5;",
                "    index_map.truncate(10);",
                "    index_map.len() == 5;",
                "    index_map.is_empty() == false;",
                "    index_map.iter().count() == 5;"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(10);",
                "    let index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    index_map.len() == 5;",
                "    index_map.truncate(10);",
                "    index_map.len() == 5;",
                "    index_map.is_empty() == false;",
                "    index_map.iter().count() == 5;",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 5);",
                "    ",
                "    index_map.truncate(3);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(10);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(2);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    for i in 0..5 {",
                "        index_map.insert(i, i);",
                "    }",
                "    index_map.truncate(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 5);",
                "    ",
                "    index_map.truncate(3);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(10);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(5);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    ",
                "    index_map.truncate(2);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}