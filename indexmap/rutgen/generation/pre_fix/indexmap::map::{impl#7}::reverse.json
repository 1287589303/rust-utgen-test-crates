{
  "name": "indexmap::map::{impl#7}::reverse",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1144:5:1146:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "key-value pairs must be present in the map (minimum 0 pairs), ensure proper handling when an empty map is input, and ensure behavior remains consistent with varying numbers of key-value pairs (e.g., 1, 2, up to maximum capacity).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(2, 20), (1, 10)]);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(1, 10), (2, 20)]);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(3, 30), (1, 10), (2, 20)]);",
                "    map.clear();",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[]);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.reverse();",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(2, 20), (1, 10)]);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(1, 10), (2, 20)]);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(3, 30), (1, 10), (2, 20)]);",
                "    map.clear();",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[]);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.insert(1, 10);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(1, 10)]);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(2, 20), (1, 10)]);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(3, 30), (1, 10), (2, 20)]);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.reverse();",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    assert_eq!(map.as_slice(), &[]);",
                "    map.insert(1, 10);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(1, 10)]);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(2, 20), (1, 10)]);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.as_slice(), &[(3, 30), (1, 10), (2, 20)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.first(), Some((&3, &30)));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    assert_eq!(map.get_index(0), Some((&3, &30)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&1, &10)));",
                "    map.clear();",
                "    assert_eq!(map.len(), 0);",
                "    map.reverse();",
                "    assert_eq!(map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.reverse();",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.first(), Some((&3, &30)));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    assert_eq!(map.get_index(0), Some((&3, &30)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&1, &10)));",
                "    map.clear();",
                "    assert_eq!(map.len(), 0);",
                "    map.reverse();",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&3, &30)));",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    assert_eq!(map.as_slice().len(), 3);",
                "    assert_eq!(map.get_index(0), Some((&3, &30)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&1, &10)));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    map.reverse();",
                "    assert_eq!(map.first(), Some((&3, &30)));",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    assert_eq!(map.as_slice().len(), 3);",
                "    assert_eq!(map.get_index(0), Some((&3, &30)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&1, &10)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    for i in 1..=10 {",
                "        map.insert(i, i * 10);",
                "    }",
                "    map.reverse();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&10, &100)));",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    assert_eq!(map.get_index(0), Some((&10, &100)));",
                "    assert_eq!(map.get_index(9), Some((&1, &10)));",
                "    assert_eq!(map.len(), 10);",
                "    assert!(map.get_index_mut(0).is_some());",
                "    assert!(map.get_index_mut(9).is_some());",
                "    assert!(map.get_index(11).is_none());",
                "    assert!(map.first_mut().is_some());",
                "    assert!(map.last_mut().is_some());",
                "    assert_eq!(map.as_slice(), &[(&10, &100), (&9, &90), (&8, &80), (&7, &70), (&6, &60), (&5, &50), (&4, &40), (&3, &30), (&2, &20), (&1, &10)]);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    for i in 1..=10 {",
                "        map.insert(i, i * 10);",
                "    }",
                "    map.reverse();",
                "    assert_eq!(map.first(), Some((&10, &100)));",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    assert_eq!(map.get_index(0), Some((&10, &100)));",
                "    assert_eq!(map.get_index(9), Some((&1, &10)));",
                "    assert_eq!(map.len(), 10);",
                "    assert!(map.get_index_mut(0).is_some());",
                "    assert!(map.get_index_mut(9).is_some());",
                "    assert!(map.get_index(11).is_none());",
                "    assert!(map.first_mut().is_some());",
                "    assert!(map.last_mut().is_some());",
                "    assert_eq!(map.as_slice(), &[(&10, &100), (&9, &90), (&8, &80), (&7, &70), (&6, &60), (&5, &50), (&4, &40), (&3, &30), (&2, &20), (&1, &10)]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}