{
  "name": "indexmap::set::iter::{impl#35}::new",
  "mod_info": {
    "name": "set::iter",
    "loc": "src/set.rs:3:1:3:10"
  },
  "visible": false,
  "loc": "src/set/iter.rs:360:5:366:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            iter: diff1.chain(diff2),\n        }\n"
      ],
      "input_infer": "set1 and set2 are non-empty IndexSet instances with distinct elements, set1 contains elements not in set2, set2 contains elements not in set1, both sets contain at least 1 element each; elements should implement Hash and Eq traits\n",
      "answers": [
        {
          "uses": [
            "use std::hash::Hash;",
            "use std::collections::hash_map::DefaultHasher;",
            "use std::hash::Hasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(3, ()), (4, ())]),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(symmetric_diff.iter.count(), 4);",
                "    assert!(symmetric_diff.iter.eq(vec![1, 2, 3, 4]));",
                "    let set3: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(1, ()), (3, ())]) };",
                "    let symmetric_diff2 = SymmetricDifference::new(&set1, &set3);",
                "    assert_eq!(symmetric_diff2.iter.count(), 3);",
                "    assert!(symmetric_diff2.iter.eq(vec![2, 3]));",
                "    let symmetric_diff3 = SymmetricDifference::new(&set2, &set3);",
                "    assert_eq!(symmetric_diff3.iter.count(), 3);",
                "    assert!(symmetric_diff3.iter.eq(vec![2, 4]));",
                "    let empty_set: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::new() };",
                "    let symmetric_diff4 = SymmetricDifference::new(&set1, &empty_set);",
                "    assert_eq!(symmetric_diff4.iter.count(), 2);",
                "    assert!(symmetric_diff4.iter.eq(vec![1, 2]));"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(3, ()), (4, ())]),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "    assert_eq!(symmetric_diff.iter.count(), 4);",
                "    assert!(symmetric_diff.iter.eq(vec![1, 2, 3, 4]));",
                "    let set3: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(1, ()), (3, ())]) };",
                "    let symmetric_diff2 = SymmetricDifference::new(&set1, &set3);",
                "    assert_eq!(symmetric_diff2.iter.count(), 3);",
                "    assert!(symmetric_diff2.iter.eq(vec![2, 3]));",
                "    let symmetric_diff3 = SymmetricDifference::new(&set2, &set3);",
                "    assert_eq!(symmetric_diff3.iter.count(), 3);",
                "    assert!(symmetric_diff3.iter.eq(vec![2, 4]));",
                "    let empty_set: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::new() };",
                "    let symmetric_diff4 = SymmetricDifference::new(&set1, &empty_set);",
                "    assert_eq!(symmetric_diff4.iter.count(), 2);",
                "    assert!(symmetric_diff4.iter.eq(vec![1, 2]));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "}"
              ],
              "oracle": [
                "    assert!(symmetric_diff.iter.clone().count() == 2);",
                "    assert!(symmetric_diff.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff.iter.clone().nth(1).unwrap() == 2);",
                "    let set3: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(2, ()), (3, ())]) };",
                "    let symmetric_diff2 = SymmetricDifference::new(&set1, &set3);",
                "    assert!(symmetric_diff2.iter.clone().count() == 2);",
                "    assert!(symmetric_diff2.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff2.iter.clone().nth(1).unwrap() == 3);",
                "    let set4: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(1, ()), (3, ())]) };",
                "    let symmetric_diff3 = SymmetricDifference::new(&set2, &set4);",
                "    assert!(symmetric_diff3.iter.clone().count() == 3);",
                "    assert!(symmetric_diff3.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff3.iter.clone().nth(1).unwrap() == 3);",
                "    assert!(symmetric_diff3.iter.clone().nth(2).is_none());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "    assert!(symmetric_diff.iter.clone().count() == 2);",
                "    assert!(symmetric_diff.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff.iter.clone().nth(1).unwrap() == 2);",
                "    let set3: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(2, ()), (3, ())]) };",
                "    let symmetric_diff2 = SymmetricDifference::new(&set1, &set3);",
                "    assert!(symmetric_diff2.iter.clone().count() == 2);",
                "    assert!(symmetric_diff2.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff2.iter.clone().nth(1).unwrap() == 3);",
                "    let set4: IndexSet<u32, HashBuilder> = IndexSet { map: IndexMap::from(vec![(1, ()), (3, ())]) };",
                "    let symmetric_diff3 = SymmetricDifference::new(&set2, &set4);",
                "    assert!(symmetric_diff3.iter.clone().count() == 3);",
                "    assert!(symmetric_diff3.iter.clone().nth(0).unwrap() == 1);",
                "    assert!(symmetric_diff3.iter.clone().nth(1).unwrap() == 3);",
                "    assert!(symmetric_diff3.iter.clone().nth(2).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(2, ()), (3, ())]),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "}"
              ],
              "oracle": [
                "    assert!(symmetric_diff.iter.len() == 2);",
                "    assert!(symmetric_diff.iter.contains(&1));",
                "    assert!(symmetric_diff.iter.contains(&3));",
                "    assert!(!symmetric_diff.iter.contains(&2));",
                "    let expected_diff: Vec<u32> = vec![1, 3];",
                "    assert_eq!(symmetric_diff.iter.collect::<Vec<_>>(), expected_diff);",
                "    assert!(symmetric_diff.iter.next().is_some());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(1, ()), (2, ())]),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::from(vec![(2, ()), (3, ())]),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "    assert!(symmetric_diff.iter.len() == 2);",
                "    assert!(symmetric_diff.iter.contains(&1));",
                "    assert!(symmetric_diff.iter.contains(&3));",
                "    assert!(!symmetric_diff.iter.contains(&2));",
                "    let expected_diff: Vec<u32> = vec![1, 3];",
                "    assert_eq!(symmetric_diff.iter.collect::<Vec<_>>(), expected_diff);",
                "    assert!(symmetric_diff.iter.next().is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(symmetric_diff.iter.count(), 0);",
                "    assert!(symmetric_diff.iter.clone().eq(vec![].into_iter()));",
                "    assert!(!symmetric_diff.iter.next().is_some());",
                "    assert!(symmetric_diff.iter.is_fused());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "    use std::hash::{Hash, Hasher};",
                "",
                "    struct HashBuilder;",
                "",
                "    impl BuildHasher for HashBuilder {",
                "        type Hasher = DefaultHasher;",
                "",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            DefaultHasher::new()",
                "        }",
                "    }",
                "",
                "    let set1: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let set2: IndexSet<u32, HashBuilder> = IndexSet {",
                "        map: IndexMap::new(),",
                "    };",
                "",
                "    let symmetric_diff = SymmetricDifference::new(&set1, &set2);",
                "    assert_eq!(symmetric_diff.iter.count(), 0);",
                "    assert!(symmetric_diff.iter.clone().eq(vec![].into_iter()));",
                "    assert!(!symmetric_diff.iter.next().is_some());",
                "    assert!(symmetric_diff.iter.is_fused());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}