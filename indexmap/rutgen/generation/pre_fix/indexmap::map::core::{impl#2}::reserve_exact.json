{
  "name": "indexmap::map::core::{impl#2}::reserve_exact",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:258:5:261:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0 to MAX_ENTRIES_CAPACITY inclusive, where MAX_ENTRIES_CAPACITY is (isize::MAX as usize) / size_of::<Bucket<K, V>> and additional should be less than or equal to available capacity minus current length.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.reserve_exact(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);",
                "    ",
                "    let initial_capacity = map.capacity();",
                "    map.reserve_exact(5);",
                "    assert!(map.capacity() >= initial_capacity);",
                "    ",
                "    let added_capacity = map.capacity();",
                "    map.reserve_exact(10);",
                "    assert!(map.capacity() >= added_capacity);",
                "    ",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), added_capacity);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);",
                "    ",
                "    let initial_capacity = map.capacity();",
                "    map.reserve_exact(5);",
                "    assert!(map.capacity() >= initial_capacity);",
                "    ",
                "    let added_capacity = map.capacity();",
                "    map.reserve_exact(10);",
                "    assert!(map.capacity() >= added_capacity);",
                "    ",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), added_capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.reserve_exact(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.reserve_exact(1);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.reserve_exact(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);",
                "    map.reserve_exact(3);",
                "    assert_eq!(map.capacity(), 5);",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.reserve_exact(5);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert_eq!(map.entries.len(), 0);",
                "    map.reserve_exact(3);",
                "    assert_eq!(map.capacity(), 5);",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(max_capacity);",
                "    map.reserve_exact(max_capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= max_capacity);",
                "    assert!(map.indices.len() <= max_capacity);",
                "    assert!(map.entries.len() <= max_capacity);",
                "    assert!(map.indices.capacity() >= max_capacity);",
                "    assert!(map.entries.capacity() >= max_capacity);"
              ],
              "code": [
                "{",
                "    let max_capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(max_capacity);",
                "    map.reserve_exact(max_capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.capacity() >= max_capacity);",
                "    assert!(map.indices.len() <= max_capacity);",
                "    assert!(map.entries.len() <= max_capacity);",
                "    assert!(map.indices.capacity() >= max_capacity);",
                "    assert!(map.entries.capacity() >= max_capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.reserve_exact(6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(std::panic::catch_unwind(|| { map.reserve_exact(6); }).is_err());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.reserve_exact(6);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(std::panic::catch_unwind(|| { map.reserve_exact(6); }).is_err());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 5);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}