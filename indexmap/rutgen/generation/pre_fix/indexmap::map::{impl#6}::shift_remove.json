{
  "name": "indexmap::map::{impl#6}::shift_remove",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:897:5:902:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Key value pairs with key as a non-null unique identifier of any hashable type, and value of any type with at least one key present in the map; include conditions for existing keys, non-existing keys, empty map scenario, and varying map sizes (including 0, 1, and multiple entries).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    ",
                "    let value = map.shift_remove(&1);",
                "    let remaining_value = map.get(&2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, Some(\"A\".to_string()));",
                "    assert_eq!(remaining_value, Some(&\"B\".to_string()));",
                "    assert_eq!(map.get(&1), None);",
                "    assert_eq!(map.len(), 1);",
                "    map.insert(3, \"C\".to_string());",
                "    let value_after_insert = map.shift_remove(&2);",
                "    assert_eq!(value_after_insert, Some(\"B\".to_string()));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.get(&2).is_none());",
                "    assert_eq!(map.get(&3), Some(&\"C\".to_string()));",
                "    let value_not_found = map.shift_remove(&4);",
                "    assert_eq!(value_not_found, None);",
                "    assert_eq!(map.len(), 1);",
                "    map.shift_remove(&3);",
                "    assert_eq!(map.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    ",
                "    let value = map.shift_remove(&1);",
                "    let remaining_value = map.get(&2);",
                "    assert_eq!(value, Some(\"A\".to_string()));",
                "    assert_eq!(remaining_value, Some(&\"B\".to_string()));",
                "    assert_eq!(map.get(&1), None);",
                "    assert_eq!(map.len(), 1);",
                "    map.insert(3, \"C\".to_string());",
                "    let value_after_insert = map.shift_remove(&2);",
                "    assert_eq!(value_after_insert, Some(\"B\".to_string()));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.get(&2).is_none());",
                "    assert_eq!(map.get(&3), Some(&\"C\".to_string()));",
                "    let value_not_found = map.shift_remove(&4);",
                "    assert_eq!(value_not_found, None);",
                "    assert_eq!(map.len(), 1);",
                "    map.shift_remove(&3);",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    ",
                "    let value = map.shift_remove(&2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, None);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    ",
                "    let value = map.shift_remove(&2);",
                "    assert_eq!(value, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    ",
                "    let value = map.shift_remove(&1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value, None);",
                "    map.insert(1, \"one\".to_string());",
                "    let value = map.shift_remove(&1);",
                "    assert_eq!(value, Some(\"one\".to_string()));",
                "    assert_eq!(map.get(&1), None);",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "    let value = map.shift_remove(&2);",
                "    assert_eq!(value, Some(\"two\".to_string()));",
                "    assert_eq!(map.get(&2), None);",
                "    assert_eq!(map.get(&3), Some(&\"three\".to_string()));",
                "    map.insert(4, \"four\".to_string());",
                "    map.insert(5, \"five\".to_string());",
                "    let value = map.shift_remove(&4);",
                "    assert_eq!(value, Some(\"four\".to_string()));",
                "    assert_eq!(map.get(&4), None);",
                "    assert_eq!(map.get(&5), Some(&\"five\".to_string()));"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    ",
                "    let value = map.shift_remove(&1);",
                "    assert_eq!(value, None);",
                "    map.insert(1, \"one\".to_string());",
                "    let value = map.shift_remove(&1);",
                "    assert_eq!(value, Some(\"one\".to_string()));",
                "    assert_eq!(map.get(&1), None);",
                "    map.insert(2, \"two\".to_string());",
                "    map.insert(3, \"three\".to_string());",
                "    let value = map.shift_remove(&2);",
                "    assert_eq!(value, Some(\"two\".to_string()));",
                "    assert_eq!(map.get(&2), None);",
                "    assert_eq!(map.get(&3), Some(&\"three\".to_string()));",
                "    map.insert(4, \"four\".to_string());",
                "    map.insert(5, \"five\".to_string());",
                "    let value = map.shift_remove(&4);",
                "    assert_eq!(value, Some(\"four\".to_string()));",
                "    assert_eq!(map.get(&4), None);",
                "    assert_eq!(map.get(&5), Some(&\"five\".to_string()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    map.insert(3, \"C\".to_string());",
                "    ",
                "    let value = map.shift_remove(&2);",
                "    let remaining_value = map.get(&1);",
                "    let remaining_value_2 = map.get(&3);",
                "}"
              ],
              "oracle": [
                "    let map = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    map.insert(3, \"C\".to_string());",
                "    assert_eq!(map.shift_remove(&2), Some(\"B\".to_string()));",
                "    assert_eq!(map.get(&1), Some(&\"A\".to_string()));",
                "    assert_eq!(map.get(&3), Some(&\"C\".to_string()));",
                "    assert_eq!(map.get(&2), None);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let mut map: IndexMap<i32, String, TestHasher> = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    map.insert(3, \"C\".to_string());",
                "    ",
                "    let value = map.shift_remove(&2);",
                "    let remaining_value = map.get(&1);",
                "    let remaining_value_2 = map.get(&3);",
                "    let map = IndexMap::new();",
                "    map.insert(1, \"A\".to_string());",
                "    map.insert(2, \"B\".to_string());",
                "    map.insert(3, \"C\".to_string());",
                "    assert_eq!(map.shift_remove(&2), Some(\"B\".to_string()));",
                "    assert_eq!(map.get(&1), Some(&\"A\".to_string()));",
                "    assert_eq!(map.get(&3), Some(&\"C\".to_string()));",
                "    assert_eq!(map.get(&2), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}