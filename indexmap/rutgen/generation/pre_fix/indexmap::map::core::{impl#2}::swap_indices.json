{
  "name": "indexmap::map::core::{impl#2}::swap_indices",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:421:5:423:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "a: usize >= 0 and a < current length of entries; b: usize >= 0 and b < current length of entries; a != b;\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    // Adding some entries for testing",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.entries.push(Bucket { key: 3, value: 30 });",
                "",
                "    index_map.swap_indices(0, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.entries[0].key, 2);",
                "    assert_eq!(index_map.entries[0].value, 20);",
                "    assert_eq!(index_map.entries[1].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 10);",
                "    assert_eq!(index_map.entries[2].key, 3);",
                "    assert_eq!(index_map.entries[2].value, 30);",
                "    assert_eq!(index_map.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    // Adding some entries for testing",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.entries.push(Bucket { key: 3, value: 30 });",
                "",
                "    index_map.swap_indices(0, 1);",
                "    assert_eq!(index_map.entries[0].key, 2);",
                "    assert_eq!(index_map.entries[0].value, 20);",
                "    assert_eq!(index_map.entries[1].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 10);",
                "    assert_eq!(index_map.entries[2].key, 3);",
                "    assert_eq!(index_map.entries[2].value, 30);",
                "    assert_eq!(index_map.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(0, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.entries[0].key, 2);",
                "    assert_eq!(index_map.entries[0].value, 20);",
                "    assert_eq!(index_map.entries[1].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 10);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(0, 1);",
                "    assert_eq!(index_map.entries[0].key, 2);",
                "    assert_eq!(index_map.entries[0].value, 20);",
                "    assert_eq!(index_map.entries[1].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.entries.push(Bucket { key: 3, value: 30 });",
                "",
                "    index_map.swap_indices(1, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert_eq!(index_map.entries[2].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 20);",
                "    assert_eq!(index_map.entries[2].value, 10);",
                "    assert_eq!(index_map.entries.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.entries.push(Bucket { key: 3, value: 30 });",
                "",
                "    index_map.swap_indices(1, 2);",
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert_eq!(index_map.entries[2].key, 1);",
                "    assert_eq!(index_map.entries[1].value, 20);",
                "    assert_eq!(index_map.entries[2].value, 10);",
                "    assert_eq!(index_map.entries.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(2, 1); // Invalid: `a` is out of bounds",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert!(std::panic::catch_unwind(|| index_map.swap_indices(2, 1)).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(2, 1); // Invalid: `a` is out of bounds",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert!(std::panic::catch_unwind(|| index_map.swap_indices(2, 1)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(1, 2); // Invalid: `b` is out of bounds",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.entries.len(), 2);",
                "    assert!(matches!(std::panic::catch_unwind(|| index_map.swap_indices(1, 2)), Err(_)));"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(1, 2); // Invalid: `b` is out of bounds",
                "    assert_eq!(index_map.entries.len(), 2);",
                "    assert!(matches!(std::panic::catch_unwind(|| index_map.swap_indices(1, 2)), Err(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(1, 1); // Invalid: `a` and `b` are equal",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.swap_indices(1, 1);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "",
                "    index_map.swap_indices(1, 1); // Invalid: `a` and `b` are equal",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "    index_map.entries.push(Bucket { key: 1, value: 10 });",
                "    index_map.entries.push(Bucket { key: 2, value: 20 });",
                "    index_map.swap_indices(1, 1);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}