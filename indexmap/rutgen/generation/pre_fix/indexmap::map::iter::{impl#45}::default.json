{
  "name": "indexmap::map::iter::{impl#45}::default",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:374:5:376:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self { iter: [].iter() }\n"
      ],
      "input_infer": "Test input conditions or ranges: No input needed, as the function has no parameters and always returns a defaulted instance of Self.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let keys: Keys<usize, usize> = Keys::default();",
                "    let _ = keys; // use to avoid unused variable warning",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys.iter.as_slice(), &[]);",
                "    assert!(keys.iter.is_empty());",
                "    assert_eq!(keys.iter.len(), 0);",
                "    assert_eq!(keys.iter.next(), None);",
                "    assert_eq!(keys.iter.size_hint(), (0, Some(0)));",
                "    assert!(keys.iter.fuse().is_fused());"
              ],
              "code": [
                "{",
                "    let keys: Keys<usize, usize> = Keys::default();",
                "    let _ = keys; // use to avoid unused variable warning",
                "    assert_eq!(keys.iter.as_slice(), &[]);",
                "    assert!(keys.iter.is_empty());",
                "    assert_eq!(keys.iter.len(), 0);",
                "    assert_eq!(keys.iter.next(), None);",
                "    assert_eq!(keys.iter.size_hint(), (0, Some(0)));",
                "    assert!(keys.iter.fuse().is_fused());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter: Iter<usize> = Iter::default();",
                "    let _ = iter; // use to avoid unused variable warning",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter.iter.len(), 0);",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    assert_eq!(iter.iter, [].iter());"
              ],
              "code": [
                "{",
                "    let iter: Iter<usize> = Iter::default();",
                "    let _ = iter; // use to avoid unused variable warning",
                "    assert_eq!(iter.iter.len(), 0);",
                "    assert!(iter.iter.as_slice().is_empty());",
                "    assert_eq!(iter.iter, [].iter());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iter_kv: Iter<usize, usize> = Iter::default();",
                "    let _ = iter_kv; // use to avoid unused variable warning",
                "}"
              ],
              "oracle": [
                "    assert_eq!(iter_kv.iter.as_slice(), [].iter().as_slice());"
              ],
              "code": [
                "{",
                "    let iter_kv: Iter<usize, usize> = Iter::default();",
                "    let _ = iter_kv; // use to avoid unused variable warning",
                "    assert_eq!(iter_kv.iter.as_slice(), [].iter().as_slice());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}