{
  "name": "indexmap::map::core::entry::{impl#8}::into_mut",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:476:5:478:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.map.entries[self.index].value\n"
      ],
      "input_infer": "&'a mut IndexMapCore<K, V> with valid index usize ranging from 0 to size of entries - 1, where 'a lifetime is valid across the scope of the IndexMapCore.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    assert_eq!(entry.key(), &\"key1\");",
                "    assert_eq!(entry.get(), &\"value1\");",
                "    assert_eq!(entry.index(), 0);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"value1\");",
                "    *value_ref = \"new_value1\";",
                "    assert_eq!(entry.get(), &\"new_value1\");"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    assert_eq!(entry.key(), &\"key1\");",
                "    assert_eq!(entry.get(), &\"value1\");",
                "    assert_eq!(entry.index(), 0);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"value1\");",
                "    *value_ref = \"new_value1\";",
                "    assert_eq!(entry.get(), &\"new_value1\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0; ",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"new_value1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0; ",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = 0;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"new_value1\");",
                "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = map.entries.len() - 1; ",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = map.entries.len() - 1;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    assert_eq!(entry.into_mut(), &mut \"value1\");",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"value1\");",
                "    *value_ref = \"new_value1\";",
                "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));"
              ],
              "code": [
                "{",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = map.entries.len() - 1; ",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    let value_ref: &mut str = entry.into_mut();",
                "    *value_ref = \"new_value1\";",
                "    let mut map = IndexMapCore::new();",
                "    map.insert(\"key1\", \"value1\");",
                "    let index = map.entries.len() - 1;",
                "    let entry = IndexedEntry::new(&mut map, index);",
                "    assert_eq!(entry.into_mut(), &mut \"value1\");",
                "    let value_ref: &mut str = entry.into_mut();",
                "    assert_eq!(value_ref, &mut \"value1\");",
                "    *value_ref = \"new_value1\";",
                "    assert_eq!(map.get(\"key1\"), Some(&\"new_value1\"));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}