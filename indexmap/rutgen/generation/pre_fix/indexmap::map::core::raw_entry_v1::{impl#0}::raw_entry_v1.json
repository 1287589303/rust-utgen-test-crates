{
  "name": "indexmap::map::core::raw_entry_v1::{impl#0}::raw_entry_v1",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:176:5:178:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: RawEntryBuilder { map: self }\n"
      ],
      "input_infer": "K: valid key type, V: valid value type, S: valid hasher type, self: non-empty IndexMap<K, V, S> instance with populated entries and indices\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let map: IndexMap<i32, String, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "",
                "    let entry_builder = map.raw_entry_v1();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entry_builder.map, &map);",
                "    assert!(entry_builder.map.entries.as_entries().len() > 0);",
                "    assert!(entry_builder.map.core.indices.is_valid());",
                "    assert!(entry_builder.map.hash_builder.is_initialized());"
              ],
              "code": [
                "{",
                "    let map: IndexMap<i32, String, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    map.insert(1, \"one\".to_string());",
                "    map.insert(2, \"two\".to_string());",
                "",
                "    let entry_builder = map.raw_entry_v1();",
                "    assert_eq!(entry_builder.map, &map);",
                "    assert!(entry_builder.map.entries.as_entries().len() > 0);",
                "    assert!(entry_builder.map.core.indices.is_valid());",
                "    assert!(entry_builder.map.hash_builder.is_initialized());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<String, f64, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    map.insert(\"pi\".to_string(), 3.14);",
                "    map.insert(\"e\".to_string(), 2.71);",
                "",
                "    let entry_builder = map.raw_entry_v1();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entry_builder.map, &map);",
                "    assert_eq!(map.raw_entry_v1(), entry_builder);",
                "    assert!(entry_builder.map.entries.as_entries().len() > 0);",
                "    assert!(entry_builder.map.core.indices.len() > 0);",
                "    assert!(entry_builder.map.hash_builder.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<String, f64, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    map.insert(\"pi\".to_string(), 3.14);",
                "    map.insert(\"e\".to_string(), 2.71);",
                "",
                "    let entry_builder = map.raw_entry_v1();",
                "    assert_eq!(entry_builder.map, &map);",
                "    assert_eq!(map.raw_entry_v1(), entry_builder);",
                "    assert!(entry_builder.map.entries.as_entries().len() > 0);",
                "    assert!(entry_builder.map.core.indices.len() > 0);",
                "    assert!(entry_builder.map.hash_builder.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u8, Vec<u8>, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    let entry_builder = map.raw_entry_v1();",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<u8, Vec<u8>, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    let entry_builder = map.raw_entry_v1();",
                "    assert_eq!(entry_builder.map, &map);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u8, Vec<u8>, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    let entry_builder = map.raw_entry_v1();",
                "    let mut map: IndexMap<u8, Vec<u8>, std::collections::hash_map::RandomState> = IndexMap::new();",
                "    let entry_builder = map.raw_entry_v1();",
                "    assert_eq!(entry_builder.map, &map);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}