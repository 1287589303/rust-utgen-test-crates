{
  "name": "indexmap::map::{impl#4}::clear",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:278:5:280:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "clear() function should be tested on an IndexMap that is empty, has one entry, has multiple entries, and after performing clear on a map with max entries capacity set to a constant.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    index_map.insert(1, 10);",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 1);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    index_map.insert(1, 10);",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(5, RandomState::new());",
                "    index_map.insert(1, 10);",
                "    index_map.insert(2, 20);",
                "    index_map.insert(3, 30);",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_capacity = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
                "    for i in 0..max_capacity {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), max_capacity);",
                "    assert_eq!(index_map.iter().count(), 0);",
                "    assert_eq!(index_map.keys().count(), 0);",
                "    assert_eq!(index_map.values().count(), 0);",
                "    assert_eq!(index_map.into_keys().count(), 0);",
                "    assert_eq!(index_map.into_values().count(), 0);"
              ],
              "code": [
                "{",
                "    let max_capacity = IndexMapCore::<i32, i32>::MAX_ENTRIES_CAPACITY;",
                "    let mut index_map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
                "    for i in 0..max_capacity {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.clear();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.is_empty());",
                "    assert_eq!(index_map.capacity(), max_capacity);",
                "    assert_eq!(index_map.iter().count(), 0);",
                "    assert_eq!(index_map.keys().count(), 0);",
                "    assert_eq!(index_map.values().count(), 0);",
                "    assert_eq!(index_map.into_keys().count(), 0);",
                "    assert_eq!(index_map.into_values().count(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}