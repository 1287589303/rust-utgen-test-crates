{
  "name": "indexmap::map::{impl#7}::get_index_entry",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1192:5:1197:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: index >= self.len() at line 1193 is true, with bound index == self.len()\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "index = self.len() and index > self.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<u32, u32, std::collections::hash_map::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let len = map.len();",
                "    let result = map.get_index_entry(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut map: crate::IndexMap<u32, u32, std::collections::hash_map::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let len = map.len();",
                "    let result = map.get_index_entry(len);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<u32, u32, std::collections::hash_map::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let len = map.len();",
                "    let result = map.get_index_entry(len + 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut map: crate::IndexMap<u32, u32, std::collections::hash_map::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let len = map.len();",
                "    let result = map.get_index_entry(len + 1);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: index >= self.len() at line 1193 is false\n",
        "expected return value/type: Some(IndexedEntry::new(&mut self.core, index))\n"
      ],
      "input_infer": "index: any value in the range [0, self.len() - 1], where self.len() is a non-negative integer\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(0);",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(0);",
                "    assert!(entry.is_some());",
                "    assert_eq!(entry.unwrap().key(), &1);",
                "    assert_eq!(entry.unwrap().get(), &10);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(0);",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(0);",
                "    assert!(entry.is_some());",
                "    assert_eq!(entry.unwrap().key(), &1);",
                "    assert_eq!(entry.unwrap().get(), &10);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let entry = map.get_index_entry(1);",
                "}"
              ],
              "oracle": [
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let entry = map.get_index_entry(1);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let entry = map.get_index_entry(1);",
                "}"
              ],
              "oracle": [
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    let entry = map.get_index_entry(1);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    let entry = map.get_index_entry(0);",
                "}"
              ],
              "oracle": [
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    let entry = map.get_index_entry(0);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 0);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    let entry = map.get_index_entry(0);",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    let entry = map.get_index_entry(0);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(1);",
                "}"
              ],
              "oracle": [
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &1);",
                "    assert_eq!(indexed_entry.get(), &10);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    let entry = map.get_index_entry(1);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 1);",
                "    assert_eq!(indexed_entry.key(), &1);",
                "    assert_eq!(indexed_entry.get(), &10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let entry = map.get_index_entry(2);",
                "}"
              ],
              "oracle": [
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 2);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);"
              ],
              "code": [
                "{",
                "    let mut map = IndexMap::<i32, i32, RandomState>::new();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let entry = map.get_index_entry(2);",
                "    assert!(entry.is_some());",
                "    let indexed_entry = entry.unwrap();",
                "    assert_eq!(indexed_entry.index(), 2);",
                "    assert_eq!(indexed_entry.key(), &2);",
                "    assert_eq!(indexed_entry.get(), &20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}