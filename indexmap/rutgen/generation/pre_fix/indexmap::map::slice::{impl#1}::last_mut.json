{
  "name": "indexmap::map::slice::{impl#1}::last_mut",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:120:5:122:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must not be empty to return Some, or it should be empty to return None. Ensure test cases include empty Slice, Slice with one entry, and Slice with multiple entries. Test mutability on the value when Slice contains entries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    let result = slice.last_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    ",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    slice.entries.push(Bucket { hash: 0, key: 1, value: 10 });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (&1, &mut 10));",
                "    ",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    slice.entries.push(Bucket { hash: 0, key: 2, value: 20 });",
                "    slice.entries.push(Bucket { hash: 0, key: 3, value: 30 });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (&3, &mut 30));"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    let result = slice.last_mut();",
                "    assert_eq!(result, None);",
                "    ",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    slice.entries.push(Bucket { hash: 0, key: 1, value: 10 });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (&1, &mut 10));",
                "    ",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice::new_mut());",
                "    slice.entries.push(Bucket { hash: 0, key: 2, value: 20 });",
                "    slice.entries.push(Bucket { hash: 0, key: 3, value: 30 });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), (&3, &mut 30));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [Bucket {",
                "            hash: HashValue::default(),",
                "            key: 1,",
                "            value: 10,",
                "        }],",
                "    });",
                "    let result = slice.last_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (key, value) = result.unwrap();",
                "    assert_eq!(*key, 1);",
                "    assert_eq!(*value, 10);",
                "    *value = 20;",
                "    assert_eq!(*value, 20);",
                "    assert_eq!(slice.entries[0].value, 20);"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [Bucket {",
                "            hash: HashValue::default(),",
                "            key: 1,",
                "            value: 10,",
                "        }],",
                "    });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    let (key, value) = result.unwrap();",
                "    assert_eq!(*key, 1);",
                "    assert_eq!(*value, 10);",
                "    *value = 20;",
                "    assert_eq!(*value, 20);",
                "    assert_eq!(slice.entries[0].value, 20);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 1,",
                "                value: 10,",
                "            },",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 2,",
                "                value: 20,",
                "            },",
                "        ],",
                "    });",
                "    let result = slice.last_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().0, &2);",
                "    assert_eq!(*result.unwrap().1, 20);"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 1,",
                "                value: 10,",
                "            },",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 2,",
                "                value: 20,",
                "            },",
                "        ],",
                "    });",
                "    let result = slice.last_mut();",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap().0, &2);",
                "    assert_eq!(*result.unwrap().1, 20);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 1,",
                "                value: 10,",
                "            },",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 2,",
                "                value: 20,",
                "            },",
                "        ],",
                "    });",
                "    if let Some((_, value)) = slice.last_mut() {",
                "        *value += 5;",
                "    }",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.last_mut().is_some(), true);",
                "    assert_eq!(slice.last_mut().unwrap().0, &2);",
                "    assert_eq!(slice.last_mut().unwrap().1, &mut 25);",
                "    assert_eq!(slice.entries[1].value, 25);",
                "    assert_eq!(slice.entries.len(), 2);",
                "    assert_eq!(slice.last_mut().unwrap().1, &mut 25);",
                "    slice.last_mut();",
                "    slice.last_mut();",
                "    assert_eq!(slice.last_mut().is_some(), true);",
                "    slice.last_mut().unwrap();",
                "    slice.last_mut().is_some();"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice {",
                "        entries: [",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 1,",
                "                value: 10,",
                "            },",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 2,",
                "                value: 20,",
                "            },",
                "        ],",
                "    });",
                "    if let Some((_, value)) = slice.last_mut() {",
                "        *value += 5;",
                "    }",
                "    assert_eq!(slice.last_mut().is_some(), true);",
                "    assert_eq!(slice.last_mut().unwrap().0, &2);",
                "    assert_eq!(slice.last_mut().unwrap().1, &mut 25);",
                "    assert_eq!(slice.entries[1].value, 25);",
                "    assert_eq!(slice.entries.len(), 2);",
                "    assert_eq!(slice.last_mut().unwrap().1, &mut 25);",
                "    slice.last_mut();",
                "    slice.last_mut();",
                "    assert_eq!(slice.last_mut().is_some(), true);",
                "    slice.last_mut().unwrap();",
                "    slice.last_mut().is_some();",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}