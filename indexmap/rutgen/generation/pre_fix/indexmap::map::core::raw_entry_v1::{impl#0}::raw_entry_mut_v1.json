{
  "name": "indexmap::map::core::raw_entry_v1::{impl#0}::raw_entry_mut_v1",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:180:5:182:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: RawEntryBuilderMut { map: self }\n"
      ],
      "input_infer": "Mutable reference to an instance of IndexMap<K, V, S> where K and V can be any type implementing Hash and Equivalent, and S is a valid hasher type, covering scenarios with an empty map, one entry, and multiple entries.\n",
      "answers": [
        {
          "uses": [
            "use std::collections::hash_map::DefaultHasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    assert_eq!(builder_mut.map, &mut map);",
                "    assert!(std::mem::size_of_val(&builder_mut) > 0);",
                "    assert!(std::any::type_name::<RawEntryBuilderMut<i32, i32, DefaultHasher>>() == \"RawEntryBuilderMut<i32, i32, DefaultHasher>\");"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    assert_eq!(builder_mut.map, &mut map);",
                "    assert!(std::mem::size_of_val(&builder_mut) > 0);",
                "    assert!(std::any::type_name::<RawEntryBuilderMut<i32, i32, DefaultHasher>>() == \"RawEntryBuilderMut<i32, i32, DefaultHasher>\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    map.insert(1, 10);",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "}"
              ],
              "oracle": [
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    assert_eq!(builder_mut.map as *const _, &mut map as *mut _);",
                "    assert!(std::ptr::eq(builder_mut.map, &mut map));",
                "    assert!(builder_mut.map.entries.len() == 1);",
                "    assert!(builder_mut.map.indices.len() == 1);"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    map.insert(1, 10);",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    assert_eq!(builder_mut.map as *const _, &mut map as *mut _);",
                "    assert!(std::ptr::eq(builder_mut.map, &mut map));",
                "    assert!(builder_mut.map.entries.len() == 1);",
                "    assert!(builder_mut.map.indices.len() == 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "}"
              ],
              "oracle": [
                "    assert!(builder_mut.map as *const _ == &mut map as *const _);"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::DefaultHasher;",
                "",
                "    let mut map: IndexMap<i32, i32, DefaultHasher> = IndexMap::default();",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.insert(3, 30);",
                "    let builder_mut = map.raw_entry_mut_v1();",
                "    assert!(builder_mut.map as *const _ == &mut map as *const _);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}