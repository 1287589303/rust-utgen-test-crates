{
  "name": "indexmap::map::{impl#7}::get_index_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1183:5:1185:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: usize in the range [0, self.len()-1] inclusive to return Some(&K, &mut V), and index values less than 0 or greater than or equal to self.len() to return None.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl TestMap {",
                "        fn new() -> Self {",
                "            Self {",
                "                data: vec![",
                "                    Bucket { hash: HashValue::default(), key: 1, value: 10 }, ",
                "                    Bucket { hash: HashValue::default(), key: 2, value: 20 }",
                "                ],",
                "            }",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut Vec<Bucket<i32, i32>> {",
                "            &mut self.data",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap::new();",
                "    map.get_index_mut(0);",
                "    map.get_index_mut(1);",
                "}"
              ],
              "oracle": [
                "    assert!(map.get_index_mut(0).is_some());",
                "    assert_eq!(map.get_index_mut(0).unwrap(), (&1, &mut 10));",
                "    assert!(map.get_index_mut(1).is_some());",
                "    assert_eq!(map.get_index_mut(1).unwrap(), (&2, &mut 20));",
                "    assert!(map.get_index_mut(2).is_none());"
              ],
              "code": [
                "{",
                "    struct TestMap {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl TestMap {",
                "        fn new() -> Self {",
                "            Self {",
                "                data: vec![",
                "                    Bucket { hash: HashValue::default(), key: 1, value: 10 }, ",
                "                    Bucket { hash: HashValue::default(), key: 2, value: 20 }",
                "                ],",
                "            }",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut Vec<Bucket<i32, i32>> {",
                "            &mut self.data",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap::new();",
                "    map.get_index_mut(0);",
                "    map.get_index_mut(1);",
                "    assert!(map.get_index_mut(0).is_some());",
                "    assert_eq!(map.get_index_mut(0).unwrap(), (&1, &mut 10));",
                "    assert!(map.get_index_mut(1).is_some());",
                "    assert_eq!(map.get_index_mut(1).unwrap(), (&2, &mut 20));",
                "    assert!(map.get_index_mut(2).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl TestMap {",
                "        fn new() -> Self {",
                "            Self {",
                "                data: vec![",
                "                    Bucket { hash: HashValue::default(), key: 1, value: 10 }, ",
                "                    Bucket { hash: HashValue::default(), key: 2, value: 20 }",
                "                ],",
                "            }",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut Vec<Bucket<i32, i32>> {",
                "            &mut self.data",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap::new();",
                "    let _ = map.get_index_mut(2); // Out of bounds case",
                "    let _ = map.get_index_mut(usize::MAX); // Also out of bounds",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.get_index_mut(0), Some((&1, &mut 10))); // Valid index",
                "    assert_eq!(map.get_index_mut(1), Some((&2, &mut 20))); // Valid index",
                "    assert_eq!(map.get_index_mut(2), None); // Out of bounds case",
                "    assert_eq!(map.get_index_mut(usize::MAX), None); // Also out of bounds case",
                "    assert_eq!(map.len(), 2); // Length check",
                "    assert!(map.as_entries_mut().len() == 2); // Check underlying entries length"
              ],
              "code": [
                "{",
                "    struct TestMap {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl TestMap {",
                "        fn new() -> Self {",
                "            Self {",
                "                data: vec![",
                "                    Bucket { hash: HashValue::default(), key: 1, value: 10 }, ",
                "                    Bucket { hash: HashValue::default(), key: 2, value: 20 }",
                "                ],",
                "            }",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut Vec<Bucket<i32, i32>> {",
                "            &mut self.data",
                "        }",
                "",
                "        fn len(&self) -> usize {",
                "            self.data.len()",
                "        }",
                "    }",
                "",
                "    let mut map = TestMap::new();",
                "    let _ = map.get_index_mut(2); // Out of bounds case",
                "    let _ = map.get_index_mut(usize::MAX); // Also out of bounds",
                "    assert_eq!(map.get_index_mut(0), Some((&1, &mut 10))); // Valid index",
                "    assert_eq!(map.get_index_mut(1), Some((&2, &mut 20))); // Valid index",
                "    assert_eq!(map.get_index_mut(2), None); // Out of bounds case",
                "    assert_eq!(map.get_index_mut(usize::MAX), None); // Also out of bounds case",
                "    assert_eq!(map.len(), 2); // Length check",
                "    assert!(map.as_entries_mut().len() == 2); // Check underlying entries length",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}