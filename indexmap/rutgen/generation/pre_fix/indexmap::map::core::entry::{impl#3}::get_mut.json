{
  "name": "indexmap::map::core::entry::{impl#3}::get_mut",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:193:5:196:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.entries[index].value\n"
      ],
      "input_infer": "`occupied_entry` pointing to a valid `Entries<K, V>` with at least one entry; valid index within the range of existing entries (0 to entries.len()-1); mutable reference to `OccupiedEntry<'a, K, V>` in a non-empty map scenario.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    let mut entries = TestEntries { entries: vec![Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() }, Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() }] };",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    let value_mut = entry.get_mut();",
                "    assert_eq!(value_mut, &mut \"one\".to_string());",
                "    *value_mut = \"updated\".to_string();",
                "    assert_eq!(entry.get_mut(), &mut \"updated\".to_string());"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "    let mut entries = TestEntries { entries: vec![Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() }, Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() }] };",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    let value_mut = entry.get_mut();",
                "    assert_eq!(value_mut, &mut \"one\".to_string());",
                "    *value_mut = \"updated\".to_string();",
                "    assert_eq!(entry.get_mut(), &mut \"updated\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 1;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value_mut, &mut \"two\".to_string());",
                "    assert!(value_mut.is_some());",
                "    value_mut.push_str(\" updated\");",
                "    assert_eq!(entry.get_mut(), &mut \"two updated\".to_string());",
                "    assert_eq!(entries.entries[index].value, \"two updated\");",
                "    entry.insert(\"new value\".to_string());",
                "    assert_eq!(entry.get_mut(), &mut \"new value\".to_string());"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "            Bucket { hash: HashValue::default(), key: 2, value: \"two\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 1;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "    assert_eq!(value_mut, &mut \"two\".to_string());",
                "    assert!(value_mut.is_some());",
                "    value_mut.push_str(\" updated\");",
                "    assert_eq!(entry.get_mut(), &mut \"two updated\".to_string());",
                "    assert_eq!(entries.entries[index].value, \"two updated\");",
                "    entry.insert(\"new value\".to_string());",
                "    assert_eq!(entry.get_mut(), &mut \"new value\".to_string());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(value_mut, &mut \"one\".to_string());",
                "    assert_eq!(value_mut.len(), 3);",
                "    value_mut.push_str(\" modified\");",
                "    assert_eq!(entry.get_mut(), &mut \"one modified\".to_string());",
                "    assert_eq!(entries.as_entries()[0].value, \"one modified\");"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        entries: Vec<Bucket<i32, String>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, String>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.entries",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.entries",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.entries",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F)",
                "        where",
                "            F: FnOnce(&mut [Self::Entry]),",
                "        {",
                "            f(&mut self.entries);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        entries: vec![",
                "            Bucket { hash: HashValue::default(), key: 1, value: \"one\".to_string() },",
                "        ],",
                "    };",
                "",
                "    let index = 0;",
                "    let occupied_entry = hash_table::OccupiedEntry::from_index(&mut entries.entries, index);",
                "    let mut entry = OccupiedEntry::new(&mut entries, occupied_entry);",
                "    ",
                "    let value_mut = entry.get_mut();",
                "    assert_eq!(value_mut, &mut \"one\".to_string());",
                "    assert_eq!(value_mut.len(), 3);",
                "    value_mut.push_str(\" modified\");",
                "    assert_eq!(entry.get_mut(), &mut \"one modified\".to_string());",
                "    assert_eq!(entries.as_entries()[0].value, \"one modified\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}