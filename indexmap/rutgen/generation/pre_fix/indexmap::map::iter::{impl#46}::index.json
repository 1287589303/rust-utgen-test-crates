{
  "name": "indexmap::map::iter::{impl#46}::index",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:441:5:443:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &self.iter.as_slice()[index].key\n"
      ],
      "input_infer": "index values must be within the range of 0 to (length of `self.iter.as_slice()` - 1), including boundary cases 0 and (length - 1) for valid keys, and values less than 0 or greater than (length - 1) to trigger panics.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert_panics!(|| keys_iter.index(2));",
                "    assert_eq!(keys_iter.index(0), &keys_iter.iter.as_slice()[0].key);",
                "    assert_eq!(keys_iter.index(1), &keys_iter.iter.as_slice()[1].key);"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(0);",
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert_panics!(|| keys_iter.index(2));",
                "    assert_eq!(keys_iter.index(0), &keys_iter.iter.as_slice()[0].key);",
                "    assert_eq!(keys_iter.index(1), &keys_iter.iter.as_slice()[1].key);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(1);",
                "}"
              ],
              "oracle": [
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "    Bucket { hash: 0, key: 1, value: \"one\" },",
                "    Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    assert_eq!(*keys_iter.index(0), 1);",
                "    assert_eq!(*keys_iter.index(1), 2);",
                "    let out_of_bounds_access = std::panic::catch_unwind(|| {",
                "    keys_iter.index(2);",
                "    });",
                "    assert!(out_of_bounds_access.is_err());"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(1);",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "    Bucket { hash: 0, key: 1, value: \"one\" },",
                "    Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    assert_eq!(*keys_iter.index(0), 1);",
                "    assert_eq!(*keys_iter.index(1), 2);",
                "    let out_of_bounds_access = std::panic::catch_unwind(|| {",
                "    keys_iter.index(2);",
                "    });",
                "    assert!(out_of_bounds_access.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(3); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(usize::MAX); }).is_err());"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(2);",
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(3); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(usize::MAX); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(usize::MAX); }).is_err());"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, &str>> = vec![",
                "        Bucket { hash: 0, key: 1, value: \"one\" },",
                "        Bucket { hash: 0, key: 2, value: \"two\" },",
                "    ];",
                "    let keys_iter = Keys { iter: buckets.iter() };",
                "    let _ = keys_iter.index(usize::MAX);",
                "    assert_eq!(keys_iter.index(0), &1);",
                "    assert_eq!(keys_iter.index(1), &2);",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { keys_iter.index(usize::MAX); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}