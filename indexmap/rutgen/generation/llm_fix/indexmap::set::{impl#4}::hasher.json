{
  "name": "indexmap::set::{impl#4}::hasher",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:203:5:205:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: self.map.hasher()\n"
      ],
      "input_infer": "S: a valid hash builder type implementing BuildHasher; self: an instance of IndexSet with an initialized map.\n",
      "answers": [
        {
          "uses": [
            "use std::collections::hash_map::RandomState;",
            "use std::hash::BuildHasher;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "}"
              ],
              "oracle": [
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    assert_eq!(index_set.hasher(), &hash_builder);",
                "    let hash_builder_clone = index_set.hasher().clone();",
                "    let index_set_clone: IndexSet<i32, _> = IndexSet::with_hasher(hash_builder_clone);",
                "    assert_eq!(index_set_clone.hasher(), index_set.hasher());",
                "    let empty_index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "    assert_eq!(empty_index_set.hasher(), &RandomState::new());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    assert_eq!(index_set.hasher(), &hash_builder);",
                "    let hash_builder_clone = index_set.hasher().clone();",
                "    let index_set_clone: IndexSet<i32, _> = IndexSet::with_hasher(hash_builder_clone);",
                "    assert_eq!(index_set_clone.hasher(), index_set.hasher());",
                "    let empty_index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, RandomState::new());",
                "    assert_eq!(empty_index_set.hasher(), &RandomState::new());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::hash::BuildHasher;",
                "    ",
                "    struct CustomHasher;",
                "    ",
                "    impl BuildHasher for CustomHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        ",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let hash_builder = CustomHasher;",
                "    let index_set: IndexSet<i32, CustomHasher> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "}"
              ],
              "oracle": [
                "    let hash_builder = CustomHasher;",
                "    let index_set: IndexSet<i32, CustomHasher> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let hasher_ref = index_set.hasher();",
                "    assert_eq!(std::mem::size_of_val(hasher_ref), std::mem::size_of::<CustomHasher>());",
                "    assert!(hasher_ref.build_hasher().finish() >= 0);",
                "    assert!(index_set.hasher() as *const _ != std::ptr::null());"
              ],
              "code": [
                "{",
                "    use std::hash::BuildHasher;",
                "    ",
                "    struct CustomHasher;",
                "    ",
                "    impl BuildHasher for CustomHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        ",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "    ",
                "    let hash_builder = CustomHasher;",
                "    let index_set: IndexSet<i32, CustomHasher> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "    let hash_builder = CustomHasher;",
                "    let index_set: IndexSet<i32, CustomHasher> = IndexSet::with_capacity_and_hasher(10, hash_builder);",
                "    let hasher_ref = index_set.hasher();",
                "    assert_eq!(std::mem::size_of_val(hasher_ref), std::mem::size_of::<CustomHasher>());",
                "    assert!(hasher_ref.build_hasher().finish() >= 0);",
                "    assert!(index_set.hasher() as *const _ != std::ptr::null());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "}"
              ],
              "oracle": [
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, hash_builder);",
                "    let hasher = index_set.hasher();",
                "    assert_eq!(hasher.build_hasher(), index_set.map.hash_builder.build_hasher());",
                "    assert!(hasher.is_some());",
                "    assert_eq!(std::mem::size_of_val(hasher), std::mem::size_of::<RandomState>());",
                "    assert!(index_set.hasher() as *const _ != std::ptr::null());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(0, hash_builder);",
                "    let hasher = index_set.hasher();",
                "    assert_eq!(hasher.build_hasher(), index_set.map.hash_builder.build_hasher());",
                "    assert!(hasher.is_some());",
                "    assert_eq!(std::mem::size_of_val(hasher), std::mem::size_of::<RandomState>());",
                "    assert!(index_set.hasher() as *const _ != std::ptr::null());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(1000, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "}"
              ],
              "oracle": [
                "    assert!(_hasher.is::<RandomState>());",
                "    assert_eq!(_hasher, index_set.map.hasher());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let hash_builder = RandomState::new();",
                "    let index_set: IndexSet<i32, RandomState> = IndexSet::with_capacity_and_hasher(1000, hash_builder);",
                "    let _hasher = index_set.hasher();",
                "    assert!(_hasher.is::<RandomState>());",
                "    assert_eq!(_hasher, index_set.map.hasher());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}