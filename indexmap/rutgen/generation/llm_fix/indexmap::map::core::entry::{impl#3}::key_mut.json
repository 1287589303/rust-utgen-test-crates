{
  "name": "indexmap::map::core::entry::{impl#3}::key_mut",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:179:5:182:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: &mut self.entries[index].key\n"
      ],
      "input_infer": "self should be an instance of OccupiedEntry with a valid mutable reference to Entries containing at least one element; index should be within the bounds of the entries slice (0 to entries.len() - 1).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F) ",
                "        where ",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::new(0), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::new(1), key: 2, value: 20 },",
                "        ],",
                "    };",
                "    ",
                "    let index = 0; // within bounds",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "",
                "    // Implicitly checks if the mutable reference was successfully retrieved",
                "    *key_mut_ref = 100; ",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entries.data[0].key, 100);",
                "    assert_eq!(entries.data[1].key, 2);",
                "    assert_eq!(occupied_entry.index(), 0);",
                "    let key_mut_ref_2 = occupied_entry.key_mut();",
                "    *key_mut_ref_2 = 200;",
                "    assert_eq!(entries.data[0].key, 200);",
                "    let key_mut_ref_3 = occupied_entry.key_mut();",
                "    assert_eq!(*key_mut_ref_3, 200);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F) ",
                "        where ",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::new(0), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::new(1), key: 2, value: 20 },",
                "        ],",
                "    };",
                "    ",
                "    let index = 0; // within bounds",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "",
                "    // Implicitly checks if the mutable reference was successfully retrieved",
                "    *key_mut_ref = 100; ",
                "    assert_eq!(entries.data[0].key, 100);",
                "    assert_eq!(entries.data[1].key, 2);",
                "    assert_eq!(occupied_entry.index(), 0);",
                "    let key_mut_ref_2 = occupied_entry.key_mut();",
                "    *key_mut_ref_2 = 200;",
                "    assert_eq!(entries.data[0].key, 200);",
                "    let key_mut_ref_3 = occupied_entry.key_mut();",
                "    assert_eq!(*key_mut_ref_3, 200);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F) ",
                "        where ",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::new(0), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::new(1), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = 1; // last index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "",
                "    // Implicitly checks if the mutable reference was successfully retrieved",
                "    *key_mut_ref = 200; ",
                "}"
              ],
              "oracle": [
                "    let mut entries = TestEntries { data: vec![Bucket { hash: HashValue::new(0), key: 1, value: 10 }, Bucket { hash: HashValue::new(1), key: 2, value: 20 }] };",
                "    let index = 1;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "    assert_eq!(*key_mut_ref, 2);",
                "    *key_mut_ref = 300;",
                "    assert_eq!(entries.as_entries()[index].key, 300);",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "    assert_eq!(key_mut_ref as *mut _, &mut entries.data[index].key as *mut _);",
                "    assert_eq!(occupied_entry.index(), index);",
                "    assert!(!std::ptr::eq(key_mut_ref, &mut entries.data[0].key));",
                "    assert!(key_mut_ref != &mut entries.data[0].key);"
              ],
              "code": [
                "{",
                "    struct TestEntries {",
                "        data: Vec<Bucket<i32, i32>>,",
                "    }",
                "",
                "    impl Entries for TestEntries {",
                "        type Entry = Bucket<i32, i32>;",
                "",
                "        fn into_entries(self) -> Vec<Self::Entry> {",
                "            self.data",
                "        }",
                "",
                "        fn as_entries(&self) -> &[Self::Entry] {",
                "            &self.data",
                "        }",
                "",
                "        fn as_entries_mut(&mut self) -> &mut [Self::Entry] {",
                "            &mut self.data",
                "        }",
                "",
                "        fn with_entries<F>(&mut self, f: F) ",
                "        where ",
                "            F: FnOnce(&mut [Self::Entry]) {",
                "            f(&mut self.data);",
                "        }",
                "    }",
                "",
                "    let mut entries = TestEntries {",
                "        data: vec![",
                "            Bucket { hash: HashValue::new(0), key: 1, value: 10 },",
                "            Bucket { hash: HashValue::new(1), key: 2, value: 20 },",
                "        ],",
                "    };",
                "",
                "    let index = 1; // last index",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "",
                "    // Implicitly checks if the mutable reference was successfully retrieved",
                "    *key_mut_ref = 200; ",
                "    let mut entries = TestEntries { data: vec![Bucket { hash: HashValue::new(0), key: 1, value: 10 }, Bucket { hash: HashValue::new(1), key: 2, value: 20 }] };",
                "    let index = 1;",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::new(index));",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "    assert_eq!(*key_mut_ref, 2);",
                "    *key_mut_ref = 300;",
                "    assert_eq!(entries.as_entries()[index].key, 300);",
                "    let key_mut_ref = occupied_entry.key_mut();",
                "    assert_eq!(key_mut_ref as *mut _, &mut entries.data[index].key as *mut _);",
                "    assert_eq!(occupied_entry.index(), index);",
                "    assert!(!std::ptr::eq(key_mut_ref, &mut entries.data[0].key));",
                "    assert!(key_mut_ref != &mut entries.data[0].key);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}