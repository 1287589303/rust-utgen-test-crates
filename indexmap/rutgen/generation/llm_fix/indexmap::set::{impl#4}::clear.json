{
  "name": "indexmap::set::{impl#4}::clear",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:229:5:231:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "- Test the `clear` method with an `IndexSet` that has varying sizes: 0, 1, and multiple elements (e.g., 10, 100, 1000), ensuring to verify that the capacity remains unchanged after calling clear().\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    set.clear();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    assert_eq!(set.iter().count(), 0);",
                "    set.clear();",
                "    assert!(set.is_empty());",
                "    set.reserve(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.clear();",
                "    assert_eq!(set.capacity(), 10);"
              ],
              "code": [
                "{",
                "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    set.clear();",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    assert_eq!(set.iter().count(), 0);",
                "    set.clear();",
                "    assert!(set.is_empty());",
                "    set.reserve(10);",
                "    assert!(set.capacity() >= 10);",
                "    set.clear();",
                "    assert_eq!(set.capacity(), 10);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1, ());",
                "    set.insert(1);",
                "    let capacity_before = set.capacity();",
                "    set.clear();",
                "    assert_eq!(set.capacity(), capacity_before);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert!(set.iter().count() == 0);",
                "    assert_eq!(set.capacity(), capacity_before);"
              ],
              "code": [
                "{",
                "   let mut set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
                "   set.insert(1);",
                "   let capacity_before = set.capacity();",
                "   set.clear();",
                "   assert_eq!(set.capacity(), capacity_before);",
                "   assert_eq!(set.len(), 0);",
                "   assert!(set.is_empty());",
                "   assert!(set.iter().count() == 0);",
                "   assert_eq!(set.capacity(), capacity_before);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(10, ());",
                "    for i in 0..10 {",
                "        set.insert(i);",
                "    }",
                "    let capacity_before = set.capacity();",
                "    set.clear();",
                "    assert_eq!(set.capacity(), capacity_before);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.iter().count(), 0);",
                "    set.clear();",
                "    assert_eq!(set.len(), 0);"
              ],
              "code": [
                "{",
                "   let mut set: super::IndexSet<i32> = super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());  ",
                "   for i in 0..10 {  ",
                "       set.insert(i);  ",
                "   }  ",
                "   let capacity_before = set.capacity();  ",
                "   set.clear();  ",
                "   assert_eq!(set.capacity(), capacity_before);  ",
                "   assert_eq!(set.len(), 0);  ",
                "   assert!(set.is_empty());  ",
                "   assert_eq!(set.iter().count(), 0);  ",
                "   set.clear();  ",
                "   assert_eq!(set.len(), 0);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<i32, ()> = super::IndexSet::with_capacity_and_hasher(1000, ());",
                "    for i in 0..1000 {",
                "        set.insert(i);",
                "    }",
                "    let capacity_before = set.capacity();",
                "    set.clear();",
                "    assert_eq!(set.capacity(), capacity_before);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.iter().count(), 0);"
              ],
              "code": [
                "{",
                "   let mut set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());  ",
                "   for i in 0..1000 {  ",
                "       set.insert(i);  ",
                "   }  ",
                "   let capacity_before = set.capacity();  ",
                "   set.clear();  ",
                "   assert_eq!(set.capacity(), capacity_before);  ",
                "   assert_eq!(set.len(), 0);  ",
                "   assert!(set.is_empty());  ",
                "   assert_eq!(set.iter().count(), 0);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}