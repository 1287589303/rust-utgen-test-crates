{
  "name": "indexmap::map::slice::{impl#4}::into_iter",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:297:5:299:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "test input conditions or ranges: Box<Slice<K, V>> with varying sizes of entries (0, 1, 10, MAX) containing valid Bucket<K, V> data, ensuring K implements Hash and Eq traits, and V can be any type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let _iter = slice.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.as_slice().len(), 0);",
                "    assert!(_iter.as_slice().is_empty());",
                "    assert_eq!(_iter.as_mut_slice().len(), 0);",
                "    assert!(_iter.as_mut_slice().is_empty());"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let _iter = slice.into_iter();",
                "    assert_eq!(_iter.as_slice().len(), 0);",
                "    assert!(_iter.as_slice().is_empty());",
                "    assert_eq!(_iter.as_mut_slice().len(), 0);",
                "    assert!(_iter.as_mut_slice().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 100 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [bucket] });",
                "    let _iter = slice.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(_iter.as_slice().len(), 1);",
                "    assert_eq!(_iter.as_slice().first(), Some((&1, &100)));",
                "    assert_eq!(_iter.as_slice().last(), Some((&1, &100)));",
                "    assert!(!_iter.as_slice().is_empty());",
                "    assert_eq!(_iter.as_slice().get_index(0), Some((&1, &100)));",
                "    assert_eq!(_iter.as_slice().get_index(1), None);",
                "    assert!(matches!(_iter.as_mut_slice().first_mut(), Some((_, _))));",
                "    assert!(matches!(_iter.as_mut_slice().last_mut(), Some((_, _))));",
                "    assert_eq!(_iter.as_mut_slice().get_range(0..1), Some(_iter.as_slice()));",
                "    assert_eq!(_iter.partition_point(|&k, _| k < &1), 0);"
              ],
              "code": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 100 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [bucket] });",
                "    let _iter = slice.into_iter();",
                "    assert_eq!(_iter.as_slice().len(), 1);",
                "    assert_eq!(_iter.as_slice().first(), Some((&1, &100)));",
                "    assert_eq!(_iter.as_slice().last(), Some((&1, &100)));",
                "    assert!(!_iter.as_slice().is_empty());",
                "    assert_eq!(_iter.as_slice().get_index(0), Some((&1, &100)));",
                "    assert_eq!(_iter.as_slice().get_index(1), None);",
                "    assert!(matches!(_iter.as_mut_slice().first_mut(), Some((_, _))));",
                "    assert!(matches!(_iter.as_mut_slice().last_mut(), Some((_, _))));",
                "    assert_eq!(_iter.as_mut_slice().get_range(0..1), Some(_iter.as_slice()));",
                "    assert_eq!(_iter.partition_point(|&k, _| k < &1), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..10).map(|i| Bucket { hash: i, key: i, value: i * 10 }).collect();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: buckets.try_into().unwrap() });",
                "    let _iter = slice.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert!(_iter.len() == 10);",
                "    assert!(!_iter.is_empty());",
                "    assert_eq!(_iter.next(), Some((0, 0)));",
                "    assert_eq!(_iter.next(), Some((1, 10)));",
                "    assert_eq!(_iter.next(), Some((2, 20)));",
                "    assert_eq!(_iter.next(), Some((3, 30)));",
                "    assert_eq!(_iter.next(), Some((4, 40)));",
                "    assert_eq!(_iter.next(), Some((5, 50)));",
                "    assert_eq!(_iter.next(), Some((6, 60)));",
                "    assert_eq!(_iter.next(), Some((7, 70)));",
                "    assert_eq!(_iter.next(), Some((8, 80)));",
                "    assert_eq!(_iter.next(), Some((9, 90)));",
                "    assert_eq!(_iter.next(), None);"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..10).map(|i| Bucket { hash: i, key: i, value: i * 10 }).collect();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: buckets.try_into().unwrap() });",
                "    let _iter = slice.into_iter();",
                "    assert!(_iter.len() == 10);",
                "    assert!(!_iter.is_empty());",
                "    assert_eq!(_iter.next(), Some((0, 0)));",
                "    assert_eq!(_iter.next(), Some((1, 10)));",
                "    assert_eq!(_iter.next(), Some((2, 20)));",
                "    assert_eq!(_iter.next(), Some((3, 30)));",
                "    assert_eq!(_iter.next(), Some((4, 40)));",
                "    assert_eq!(_iter.next(), Some((5, 50)));",
                "    assert_eq!(_iter.next(), Some((6, 60)));",
                "    assert_eq!(_iter.next(), Some((7, 70)));",
                "    assert_eq!(_iter.next(), Some((8, 80)));",
                "    assert_eq!(_iter.next(), Some((9, 90)));",
                "    assert_eq!(_iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_size = std::usize::MAX;",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..max_size as i32).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: buckets.try_into().unwrap() });",
                "    let _iter = slice.into_iter();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.len(), max_size);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0).unwrap(), (&0, &0));",
                "    assert_eq!(slice.get_index(max_size - 1).unwrap(), (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));",
                "    assert_eq!(slice.first().unwrap(), (&0, &0));",
                "    assert_eq!(slice.last().unwrap(), (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));",
                "    assert_eq!(slice.get_range(0..1).unwrap().len(), 1);",
                "    assert!(slice.get_range(max_size..max_size + 1).is_none());",
                "    assert_eq!(slice.get_range_mut(0..2).unwrap().len(), 2);",
                "    let (first_half, second_half) = slice.split_at(max_size / 2);",
                "    assert_eq!(first_half.len(), max_size / 2);",
                "    assert_eq!(second_half.len(), max_size - max_size / 2);",
                "    let (first, rest) = slice.split_first().unwrap();",
                "    assert_eq!(first, (&0, &0));",
                "    let (last, rest) = slice.split_last().unwrap();",
                "    assert_eq!(last, (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));"
              ],
              "code": [
                "{",
                "    let max_size = std::usize::MAX;",
                "    let buckets: Vec<Bucket<i32, i32>> = (0..max_size as i32).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: buckets.try_into().unwrap() });",
                "    let _iter = slice.into_iter();",
                "    assert_eq!(slice.len(), max_size);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0).unwrap(), (&0, &0));",
                "    assert_eq!(slice.get_index(max_size - 1).unwrap(), (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));",
                "    assert_eq!(slice.first().unwrap(), (&0, &0));",
                "    assert_eq!(slice.last().unwrap(), (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));",
                "    assert_eq!(slice.get_range(0..1).unwrap().len(), 1);",
                "    assert!(slice.get_range(max_size..max_size + 1).is_none());",
                "    assert_eq!(slice.get_range_mut(0..2).unwrap().len(), 2);",
                "    let (first_half, second_half) = slice.split_at(max_size / 2);",
                "    assert_eq!(first_half.len(), max_size / 2);",
                "    assert_eq!(second_half.len(), max_size - max_size / 2);",
                "    let (first, rest) = slice.split_first().unwrap();",
                "    assert_eq!(first, (&0, &0));",
                "    let (last, rest) = slice.split_last().unwrap();",
                "    assert_eq!(last, (&(max_size as i32 - 1), &(max_size as i32 - 1) * 10));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}