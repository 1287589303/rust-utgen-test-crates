{
  "name": "indexmap::map::slice::{impl#1}::split_first_mut",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:152:5:158:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: let [first, rest @ ..] = &mut self.entries at line 153 is true\n",
        "expected return value/type: Some((first.ref_mut(), Self::from_mut_slice(rest)))\n"
      ],
      "input_infer": "Slice with at least one entry in `entries` array where length is 1 or more, allowing mutable access to the first entry value.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Slice<i32, i32> = Slice {",
                "        entries: [Bucket {",
                "            hash: HashValue::default(),",
                "            key: 1,",
                "            value: 10,",
                "        }],",
                "    };",
                "    slice.split_first_mut();",
                "}"
              ],
              "oracle": [
                "    assert!(slice.split_first_mut().is_some());",
                "    let first_mut = slice.split_first_mut().unwrap();",
                "    assert_eq!(first_mut.0.0, &1);",
                "    assert_eq!(*first_mut.0.1, 10);",
                "    assert!(first_mut.1.is_empty());"
              ],
              "code": [
                "{",
                "    let mut slice: Slice<i32, i32> = Slice {",
                "        entries: [Bucket {",
                "            hash: HashValue::default(),",
                "            key: 1,",
                "            value: 10,",
                "        }],",
                "    };",
                "    slice.split_first_mut();",
                "    assert!(slice.split_first_mut().is_some());",
                "    let first_mut = slice.split_first_mut().unwrap();",
                "    assert_eq!(first_mut.0.0, &1);",
                "    assert_eq!(*first_mut.0.1, 10);",
                "    assert!(first_mut.1.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Slice<i32, i32> = Slice {",
                "        entries: [",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 1,",
                "                value: 10,",
                "            },",
                "            Bucket {",
                "                hash: HashValue::default(),",
                "                key: 2,",
                "                value: 20,",
                "            },",
                "        ],",
                "    };",
                "    slice.split_first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.split_first_mut().is_some(), true);",
                "    assert_eq!(slice.entries.len(), 2);",
                "    assert_eq!(slice.split_first_mut().unwrap().0, (&1, &mut 10));",
                "    assert_eq!(slice.split_first_mut().unwrap().1.entries.len(), 1);",
                "    assert_eq!(slice.split_first_mut().unwrap().1.entries[0].key, 2);",
                "    assert_eq!(slice.split_first_mut().unwrap().1.entries[0].value, 20);"
              ],
              "code": [
                "{",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let [first, rest @ ..] = &mut self.entries at line 153 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.entries must be an empty slice or a slice with only one element (tail undefined or non-existent)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first_mut();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 2 }] });",
                "    let result = slice.split_first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 2 }] });",
                "    let result = slice.split_first_mut();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}