{
  "name": "indexmap::map::{impl#6}::swap_remove",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:834:5:839:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "key: Any valid key type K that is contained in the map, as well as a key that is not contained to test for the None case. Additionally, cases with a very large K, empty map, and a filled map with up to the maximum capacity.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    map.insert(TestKey(2), TestValue(20));",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert!(!map.contains_key(&TestKey(1)));",
                "    assert_eq!(map.get(&TestKey(2)), Some(&TestValue(20)));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.swap_remove(&TestKey(3)), None);"
              ],
              "code": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    map.insert(TestKey(2), TestValue(20));",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert!(!map.contains_key(&TestKey(1)));",
                "    assert_eq!(map.get(&TestKey(2)), Some(&TestValue(20)));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.swap_remove(&TestKey(3)), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    map.insert(TestKey(2), TestValue(20));",
                "    ",
                "    let result = map.swap_remove(&TestKey(3));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, Some(TestValue(30)));",
                "    assert_eq!(map.get(&TestKey(3)), None);",
                "    assert_eq!(map.len(), 2);",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&TestKey(2)));",
                "    assert!(!map.contains_key(&TestKey(1)));"
              ],
              "code": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    map.insert(TestKey(2), TestValue(20));",
                "    ",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, Some(TestValue(30)));",
                "    assert_eq!(map.get(&TestKey(3)), None);",
                "    assert_eq!(map.len(), 2);",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.len(), 1);",
                "    assert!(map.contains_key(&TestKey(2)));",
                "    assert!(!map.contains_key(&TestKey(1)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.contains_key(&TestKey(1)), false);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(TestKey(2), TestValue(20));",
                "    let result2 = map.swap_remove(&TestKey(2));",
                "    assert_eq!(result2, Some(TestValue(20)));",
                "    assert_eq!(map.contains_key(&TestKey(2)), false);",
                "    assert_eq!(map.len(), 0);",
                "    let result3 = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result3, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    map.insert(TestKey(4), TestValue(40));",
                "    let result4 = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result4, Some(TestValue(30)));",
                "    assert_eq!(map.contains_key(&TestKey(3)), false);",
                "    assert_eq!(map.len(), 1);",
                "    let result5 = map.swap_remove(&TestKey(4));",
                "    assert_eq!(result5, Some(TestValue(40)));",
                "    assert_eq!(map.contains_key(&TestKey(4)), false);",
                "    assert_eq!(map.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(1), TestValue(10));",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.contains_key(&TestKey(1)), false);",
                "    assert_eq!(map.len(), 0);",
                "    map.insert(TestKey(2), TestValue(20));",
                "    let result2 = map.swap_remove(&TestKey(2));",
                "    assert_eq!(result2, Some(TestValue(20)));",
                "    assert_eq!(map.contains_key(&TestKey(2)), false);",
                "    assert_eq!(map.len(), 0);",
                "    let result3 = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result3, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    map.insert(TestKey(4), TestValue(40));",
                "    let result4 = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result4, Some(TestValue(30)));",
                "    assert_eq!(map.contains_key(&TestKey(3)), false);",
                "    assert_eq!(map.len(), 1);",
                "    let result5 = map.swap_remove(&TestKey(4));",
                "    assert_eq!(result5, Some(TestValue(40)));",
                "    assert_eq!(map.contains_key(&TestKey(4)), false);",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(1), TestValue(10));",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.contains_key(&TestKey(1)), false);",
                "    map.insert(TestKey(2), TestValue(20));",
                "    let result = map.swap_remove(&TestKey(2));",
                "    assert_eq!(result, Some(TestValue(20)));",
                "    assert_eq!(map.contains_key(&TestKey(2)), false);",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    map.insert(TestKey(4), TestValue(40));",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, Some(TestValue(30)));",
                "    let result = map.swap_remove(&TestKey(4));",
                "    assert_eq!(result, Some(TestValue(40)));"
              ],
              "code": [
                "{",
                "    struct TestKey(i32);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    ",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(1), TestValue(10));",
                "    let result = map.swap_remove(&TestKey(1));",
                "    assert_eq!(result, Some(TestValue(10)));",
                "    assert_eq!(map.contains_key(&TestKey(1)), false);",
                "    map.insert(TestKey(2), TestValue(20));",
                "    let result = map.swap_remove(&TestKey(2));",
                "    assert_eq!(result, Some(TestValue(20)));",
                "    assert_eq!(map.contains_key(&TestKey(2)), false);",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, None);",
                "    map.insert(TestKey(3), TestValue(30));",
                "    map.insert(TestKey(4), TestValue(40));",
                "    let result = map.swap_remove(&TestKey(3));",
                "    assert_eq!(result, Some(TestValue(30)));",
                "    let result = map.swap_remove(&TestKey(4));",
                "    assert_eq!(result, Some(TestValue(40)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(i64);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(i64::MAX), TestValue(100));",
                "    ",
                "    let result = map.swap_remove(&TestKey(i64::MAX));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(TestValue(100)));",
                "    assert!(!map.contains_key(&TestKey(i64::MAX)));",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.swap_remove(&TestKey(i64::MAX)), None);",
                "    map.insert(TestKey(i64::MAX), TestValue(200));",
                "    let result2 = map.swap_remove(&TestKey(i64::MAX));",
                "    assert_eq!(result2, Some(TestValue(200)));",
                "    assert_eq!(map.len(), 0);"
              ],
              "code": [
                "{",
                "    struct TestKey(i64);",
                "    struct TestValue(i32);",
                "",
                "    let mut map: IndexMap<TestKey, TestValue, RandomState> = IndexMap::new();",
                "    map.insert(TestKey(i64::MAX), TestValue(100));",
                "    ",
                "    let result = map.swap_remove(&TestKey(i64::MAX));",
                "    assert_eq!(result, Some(TestValue(100)));",
                "    assert!(!map.contains_key(&TestKey(i64::MAX)));",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.swap_remove(&TestKey(i64::MAX)), None);",
                "    map.insert(TestKey(i64::MAX), TestValue(200));",
                "    let result2 = map.swap_remove(&TestKey(i64::MAX));",
                "    assert_eq!(result2, Some(TestValue(200)));",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}