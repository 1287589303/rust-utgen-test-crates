{
  "name": "indexmap::map::core::{impl#2}::try_reserve_entries",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:277:5:288:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: try_add > additional at line 282 is true\n",
        "precondition: self.entries.try_reserve_exact(try_add).is_ok() at line 282 is true\n",
        "expected return value/type: Ok(())\n"
      ],
      "input_infer": "additional: 0 to (new_capacity - 1) where new_capacity equals the minimum of self.indices.capacity() and IndexMapCore::MAX_ENTRIES_CAPACITY\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let additional = 0;",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "}"
              ],
              "oracle": [
                "    index_map.try_reserve_entries(0).unwrap();",
                "    assert_eq!(index_map.entries.len(), 0);",
                "    assert_eq!(index_map.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_entries(1).unwrap();",
                "    assert!(index_map.entries.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).is_ok());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let additional = 0;",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "    index_map.try_reserve_entries(0).unwrap();",
                "    assert_eq!(index_map.entries.len(), 0);",
                "    assert_eq!(index_map.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_entries(1).unwrap();",
                "    assert!(index_map.entries.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 10);",
                "    assert!(index_map.entries.try_reserve_exact(10).is_ok());",
                "    assert!(index_map.try_reserve_entries(9).is_ok());",
                "    assert_eq!(index_map.try_reserve_entries(9).unwrap(), Ok(()));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 10);",
                "    assert!(index_map.entries.try_reserve_exact(10).is_ok());",
                "    assert!(index_map.try_reserve_entries(9).is_ok());",
                "    assert_eq!(index_map.try_reserve_entries(9).unwrap(), Ok(()));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 4; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "}"
              ],
              "oracle": [
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 4;",
                "    let result = index_map.try_reserve_entries(additional);",
                "    assert_eq!(result, Ok(()));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 4; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 4;",
                "    let result = index_map.try_reserve_entries(additional);",
                "    assert_eq!(result, Ok(()));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.indices.capacity() >= 10);",
                "    assert!(index_map.entries.capacity() >= 10);",
                "    assert!(index_map.try_reserve_entries(additional).is_ok());",
                "    assert!(matches!(index_map.try_reserve_entries(additional), Ok(())));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(10);",
                "    let additional = 9; // new_capacity will be at least 10, so try_add = 10",
                "    index_map.try_reserve_entries(additional).unwrap();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert!(index_map.indices.capacity() >= 10);",
                "    assert!(index_map.entries.capacity() >= 10);",
                "    assert!(index_map.try_reserve_entries(additional).is_ok());",
                "    assert!(matches!(index_map.try_reserve_entries(additional), Ok(())));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: try_add > additional at line 282 is true\n",
        "precondition: self.entries.try_reserve_exact(try_add).is_ok() at line 282 is false\n"
      ],
      "input_infer": "additional: 0 to (MAX_ENTRIES_CAPACITY - len) where len < MAX_ENTRIES_CAPACITY and self.entries.try_reserve_exact(additional) fails under capacity constraints \n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    let additional = 0;",
                "    let _ = map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(matches!(map.try_reserve_entries(additional), Err(TryReserveError { .. })));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    let additional = 0;",
                "    let _ = map.try_reserve_entries(additional);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(matches!(map.try_reserve_entries(additional), Err(TryReserveError { .. })));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    let additional = 1;",
                "    let _ = map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 2);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(map.entries.try_reserve_exact(1).is_err());",
                "    assert!(map.indices.capacity() >= map.entries.len());",
                "    assert!(map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(2);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    let additional = 1;",
                "    let _ = map.try_reserve_entries(additional);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), 2);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(map.entries.try_reserve_exact(1).is_err());",
                "    assert!(map.indices.capacity() >= map.entries.len());",
                "    assert!(map.indices.capacity() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "",
                "    let additional = 2; // triggers capacity constraints",
                "    let _ = map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.indices.capacity() > additional);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.entries.try_reserve_exact(additional).is_err());",
                "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.entries.try_reserve_exact(map.indices.capacity() - map.entries.len()).is_ok());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "",
                "    let additional = 2; // triggers capacity constraints",
                "    let _ = map.try_reserve_entries(additional);",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.indices.capacity() > additional);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.entries.try_reserve_exact(additional).is_err());",
                "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.entries.try_reserve_exact(map.indices.capacity() - map.entries.len()).is_ok());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 3,
      "prompt_conds": [
        "precondition: try_add > additional at line 282 is false, with bound try_add == additional\n"
      ],
      "input_infer": "try_add == additional, where try_add is calculated as new_capacity - entries.len(), with additional being 0 to MAX_ENTRIES_CAPACITY inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(0);",
                "    let additional = 0;",
                "    map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.try_reserve_entries(additional).is_ok());",
                "    assert_eq!(map.entries.len(), 0);",
                "    assert_eq!(map.entries.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(0);",
                "    let additional = 0;",
                "    map.try_reserve_entries(additional);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.try_reserve_entries(additional).is_ok());",
                "    assert_eq!(map.entries.len(), 0);",
                "    assert_eq!(map.entries.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    let additional = 1;",
                "    map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_ok());",
                "    assert_eq!(map.capacity(), 1);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.entries.try_reserve_exact(additional).is_err());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(map.try_reserve_entries(2).is_ok());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    let additional = 1;",
                "    map.try_reserve_entries(additional);",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_ok());",
                "    assert_eq!(map.capacity(), 1);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.entries.try_reserve_exact(additional).is_err());",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 1);",
                "    assert!(map.try_reserve_entries(additional).is_err());",
                "    assert!(map.try_reserve_entries(2).is_ok());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
                "    map.try_reserve_entries(additional);",
                "}"
              ],
              "oracle": [
                "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
                "    let try_add = map.indices.capacity() - map.entries.len();",
                "    assert!(try_add == additional);",
                "    let result = map.try_reserve_entries(additional);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(TryReserveError { .. })));",
                "    assert_eq!(map.entries.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
                "    map.try_reserve_entries(additional);",
                "    let additional = IndexMapCore::MAX_ENTRIES_CAPACITY;",
                "    let try_add = map.indices.capacity() - map.entries.len();",
                "    assert!(try_add == additional);",
                "    let result = map.try_reserve_entries(additional);",
                "    assert!(result.is_err());",
                "    assert!(matches!(result, Err(TryReserveError { .. })));",
                "    assert_eq!(map.entries.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}