{
  "name": "indexmap::map::iter::{impl#44}::fmt",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:368:5:370:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Input with valid, non-empty instances of Keys with keys and values of types implementing fmt::Debug; input with empty instances of Keys; input where Keys contains multiple entries with various key and value types implementing fmt::Debug.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key = \"key1\";",
                "    let value = \"value1\";",
                "    let bucket = Bucket {",
                "        hash: HashValue::default(),",
                "        key,",
                "        value,",
                "    };",
                "    let buckets = vec![bucket];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(format!(\"{:?}\", iter), \"[\\\"key1\\\"]\");",
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.iter[0].key, \"key1\");",
                "    assert_eq!(iter.iter[0].value, \"value1\");",
                "    assert_ne!(iter.iter[0].hash, HashValue::default());"
              ],
              "code": [
                "{",
                "    let key = \"key1\";",
                "    let value = \"value1\";",
                "    let bucket = Bucket {",
                "        hash: HashValue::default(),",
                "        key,",
                "        value,",
                "    };",
                "    let buckets = vec![bucket];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "    assert_eq!(format!(\"{:?}\", iter), \"[\\\"key1\\\"]\");",
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(iter.iter.len(), 1);",
                "    assert_eq!(iter.iter[0].key, \"key1\");",
                "    assert_eq!(iter.iter[0].value, \"value1\");",
                "    assert_ne!(iter.iter[0].hash, HashValue::default());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<&str, &str>> = Vec::new();",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "}"
              ],
              "oracle": [
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).to_string(), \"[]\");",
                "    let buckets: Vec<Bucket<&str, &str>> = vec![Bucket { hash: some_hash_value, key: \"key\", value: \"value\" }];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).to_string(), \"[(\\\"key\\\", \\\"value\\\")]\");"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<&str, &str>> = Vec::new();",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).to_string(), \"[]\");",
                "    let buckets: Vec<Bucket<&str, &str>> = vec![Bucket { hash: some_hash_value, key: \"key\", value: \"value\" }];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    assert!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).is_ok());",
                "    assert_eq!(fmt::Debug::fmt(&iter, &mut fmt::Formatter::new()).to_string(), \"[(\\\"key\\\", \\\"value\\\")]\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let key1 = \"key1\";",
                "    let value1 = \"value1\";",
                "    let bucket1 = Bucket {",
                "        hash: HashValue::default(),",
                "        key: key1,",
                "        value: value1,",
                "    };",
                "    ",
                "    let key2 = \"key2\";",
                "    let value2 = \"value2\";",
                "    let bucket2 = Bucket {",
                "        hash: HashValue::default(),",
                "        key: key2,",
                "        value: value2,",
                "    };",
                "",
                "    let buckets = vec![bucket1, bucket2];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(format!(\"{:?}\", iter), \"[key1, key2]\");",
                "    assert!(iter.iter.len() == 2);",
                "    assert!(iter.iter().next().unwrap().key == key1);",
                "    assert!(iter.iter().nth(1).unwrap().key == key2);"
              ],
              "code": [
                "{",
                "    let key1 = \"key1\";",
                "    let value1 = \"value1\";",
                "    let bucket1 = Bucket {",
                "        hash: HashValue::default(),",
                "        key: key1,",
                "        value: value1,",
                "    };",
                "    ",
                "    let key2 = \"key2\";",
                "    let value2 = \"value2\";",
                "    let bucket2 = Bucket {",
                "        hash: HashValue::default(),",
                "        key: key2,",
                "        value: value2,",
                "    };",
                "",
                "    let buckets = vec![bucket1, bucket2];",
                "    let slice = buckets.as_slice();",
                "    let iter = Keys { iter: slice.iter() };",
                "    let _ = fmt::Debug::fmt(&iter, &mut fmt::Formatter::new());",
                "    assert_eq!(format!(\"{:?}\", iter), \"[key1, key2]\");",
                "    assert!(iter.iter.len() == 2);",
                "    assert!(iter.iter().next().unwrap().key == key1);",
                "    assert!(iter.iter().nth(1).unwrap().key == key2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}