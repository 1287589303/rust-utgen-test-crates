{
  "name": "indexmap::map::core::{impl#2}::get_index_of",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:319:5:325:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "hash must be a valid HashValue representing an existing key hash; key must be an equivalent key type matching K; expected return value is Some(index) if key exists or None if key does not exist; valid input ranges for hash vary based on hash distribution while key must be a valid reference.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    index_map.push_entry(hash, key, \"value\");",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some(0));"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            true",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    index_map.push_entry(hash, key, \"value\");",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "    assert_eq!(result, Some(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let index_map = IndexMapCore::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let index_map = IndexMapCore::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(usize);",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, other: &TestKey) -> bool {",
                "            self.0 == other.0",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::new();",
                "    let hash1 = HashValue(1);",
                "    let key1 = TestKey(1);",
                "    index_map.push_entry(hash1, key1.clone(), \"value1\");",
                "",
                "    let hash2 = HashValue(2);",
                "    let key2 = TestKey(2);",
                "    index_map.push_entry(hash2, key2.clone(), \"value2\");",
                "",
                "    let result1 = index_map.get_index_of(hash1, &key1);",
                "    let result2 = index_map.get_index_of(hash2, &key2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result1, Some(0));",
                "    assert_eq!(result2, Some(1));",
                "    assert_eq!(index_map.get_index_of(hash1, &TestKey(3)), None);",
                "    assert_eq!(index_map.get_index_of(hash2, &TestKey(1)), None);",
                "    assert_eq!(index_map.get_index_of(hash1, &TestKey(1)), Some(0));",
                "    assert_eq!(index_map.get_index_of(hash2, &TestKey(2)), Some(1));"
              ],
              "code": [
                "{",
                "    struct TestKey(usize);",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, other: &TestKey) -> bool {",
                "            self.0 == other.0",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::new();",
                "    let hash1 = HashValue(1);",
                "    let key1 = TestKey(1);",
                "    index_map.push_entry(hash1, key1.clone(), \"value1\");",
                "",
                "    let hash2 = HashValue(2);",
                "    let key2 = TestKey(2);",
                "    index_map.push_entry(hash2, key2.clone(), \"value2\");",
                "",
                "    let result1 = index_map.get_index_of(hash1, &key1);",
                "    let result2 = index_map.get_index_of(hash2, &key2);",
                "    assert_eq!(result1, Some(0));",
                "    assert_eq!(result2, Some(1));",
                "    assert_eq!(index_map.get_index_of(hash1, &TestKey(3)), None);",
                "    assert_eq!(index_map.get_index_of(hash2, &TestKey(1)), None);",
                "    assert_eq!(index_map.get_index_of(hash1, &TestKey(1)), Some(0));",
                "    assert_eq!(index_map.get_index_of(hash2, &TestKey(2)), Some(1));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey(usize);",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, other: &TestKey) -> bool {",
                "            self.0 == other.0",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::<TestKey, &str>::new();",
                "    let hash = HashValue(0);",
                "    let key = TestKey(0);",
                "",
                "    index_map.push_entry(hash, key, \"value\");",
                "",
                "    let result = index_map.get_index_of(hash, &TestKey(0));",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 0);",
                "    let result_none = index_map.get_index_of(hash, &TestKey(1));",
                "    assert!(result_none.is_none());"
              ],
              "code": [
                "{",
                "    struct TestKey(usize);",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, other: &TestKey) -> bool {",
                "            self.0 == other.0",
                "        }",
                "    }",
                "",
                "    let mut index_map = IndexMapCore::<TestKey, &str>::new();",
                "    let hash = HashValue(0);",
                "    let key = TestKey(0);",
                "",
                "    index_map.push_entry(hash, key, \"value\");",
                "",
                "    let result = index_map.get_index_of(hash, &TestKey(0));",
                "    assert!(result.is_some());",
                "    assert_eq!(result.unwrap(), 0);",
                "    let result_none = index_map.get_index_of(hash, &TestKey(1));",
                "    assert!(result_none.is_none());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let index_map = IndexMapCore::<TestKey, &str>::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    impl Equivalent<TestKey> for TestKey {",
                "        fn equivalent(&self, _other: &TestKey) -> bool {",
                "            false",
                "        }",
                "    }",
                "",
                "    let index_map = IndexMapCore::<TestKey, &str>::new();",
                "    let hash = HashValue(1);",
                "    let key = TestKey;",
                "",
                "    let result = index_map.get_index_of(hash, &key);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}