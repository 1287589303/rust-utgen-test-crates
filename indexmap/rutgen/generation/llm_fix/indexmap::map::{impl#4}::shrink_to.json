{
  "name": "indexmap::map::{impl#4}::shrink_to",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:376:5:378:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "min_capacity: 0 to IndexMap::MAX_ENTRIES_CAPACITY, inclusive\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(5);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(10);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(1);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(5);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(10);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(1);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(map.len() <= 5);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(10);",
                "    assert_eq!(map.capacity(), 10);",
                "    assert!(map.len() <= 10);",
                "    map.shrink_to(5);",
                "    assert_eq!(map.capacity(), 5);",
                "    map.shrink_to(7);",
                "    assert_eq!(map.capacity(), 5);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(5);",
                "    assert_eq!(map.capacity(), 5);",
                "    assert!(map.len() <= 5);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(10);",
                "    assert_eq!(map.capacity(), 10);",
                "    assert!(map.len() <= 10);",
                "    map.shrink_to(5);",
                "    assert_eq!(map.capacity(), 5);",
                "    map.shrink_to(7);",
                "    assert_eq!(map.capacity(), 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(IndexMap::MAX_ENTRIES_CAPACITY, RandomState::new());",
                "    map.shrink_to(IndexMap::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), IndexMap::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.len() <= IndexMap::MAX_ENTRIES_CAPACITY);",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.shrink_to(10);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "    map.reserve(5);",
                "    assert!(map.len() == 5);",
                "    map.shrink_to(3);",
                "    assert_eq!(map.capacity(), 3);",
                "    assert!(map.len() == 5);",
                "    map.shrink_to(20);",
                "    assert_eq!(map.capacity(), 20);",
                "    assert!(map.len() == 5);"
              ],
              "code": [
                "{",
                "   const MAX_ENTRIES_CAPACITY: usize = 10; // Define the constant for maximum entries capacity  ",
                "   let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(MAX_ENTRIES_CAPACITY, RandomState::new());  ",
                "   map.shrink_to(MAX_ENTRIES_CAPACITY);  ",
                "   assert_eq!(map.capacity(), MAX_ENTRIES_CAPACITY);  ",
                "   assert!(map.len() <= MAX_ENTRIES_CAPACITY);  ",
                "   map.shrink_to(0);  ",
                "   assert_eq!(map.capacity(), 0);  ",
                "   assert!(map.is_empty());  ",
                "   map.shrink_to(10);  ",
                "   assert_eq!(map.capacity(), 0);  ",
                "   assert!(map.is_empty());  ",
                "   map.reserve(5);  ",
                "   assert!(map.len() == 5);  ",
                "   map.shrink_to(3);  ",
                "   assert_eq!(map.capacity(), 3);  ",
                "   assert!(map.len() == 5);  ",
                "   map.shrink_to(20);  ",
                "   assert_eq!(map.capacity(), 20);  ",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(8, RandomState::new());",
                "    map.shrink_to(8);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 8);",
                "    assert!(map.len() == 0 || map.capacity() >= map.len());",
                "    map.shrink_to(4);",
                "    assert_eq!(map.capacity(), 4);",
                "    assert!(map.len() == 0 || map.capacity() >= map.len());",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(8, RandomState::new());",
                "    map.shrink_to(8);",
                "    assert_eq!(map.capacity(), 8);",
                "    assert!(map.len() == 0 || map.capacity() >= map.len());",
                "    map.shrink_to(4);",
                "    assert_eq!(map.capacity(), 4);",
                "    assert!(map.len() == 0 || map.capacity() >= map.len());",
                "    map.shrink_to(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(11); // This should panic as it exceeds MAX_ENTRIES_CAPACITY",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(11);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(11); // This should panic as it exceeds MAX_ENTRIES_CAPACITY",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.shrink_to(11);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}