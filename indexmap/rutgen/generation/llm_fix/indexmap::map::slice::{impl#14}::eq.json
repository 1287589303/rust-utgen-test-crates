{
  "name": "indexmap::map::slice::{impl#14}::eq",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:375:5:377:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must be a Slice containing N Bucket entries with keys of type K and values of type V, and other must be an array of tuples of length N consisting of keys of type K2 and values of type V2 where K implements PartialEq for K2 and V implements PartialEq for V2\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(1), ValueType(10)),",
                "        (KeyType(2), ValueType(20)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);",
                "    let other_different_key: [(KeyType, ValueType); 2] = [(KeyType(3), ValueType(30)), (KeyType(2), ValueType(20))];",
                "    let result_different_key = slice.eq(&other_different_key);",
                "    assert_eq!(result_different_key, false);",
                "    let other_different_value: [(KeyType, ValueType); 2] = [(KeyType(1), ValueType(11)), (KeyType(2), ValueType(20))];",
                "    let result_different_value = slice.eq(&other_different_value);",
                "    assert_eq!(result_different_value, false);",
                "    let other_different_length: [(KeyType, ValueType); 1] = [(KeyType(1), ValueType(10))];",
                "    let result_different_length = slice.eq(&other_different_length);",
                "    assert_eq!(result_different_length, false);"
              ],
              "code": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(1), ValueType(10)),",
                "        (KeyType(2), ValueType(20)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "    assert_eq!(result, true);",
                "    let other_different_key: [(KeyType, ValueType); 2] = [(KeyType(3), ValueType(30)), (KeyType(2), ValueType(20))];",
                "    let result_different_key = slice.eq(&other_different_key);",
                "    assert_eq!(result_different_key, false);",
                "    let other_different_value: [(KeyType, ValueType); 2] = [(KeyType(1), ValueType(11)), (KeyType(2), ValueType(20))];",
                "    let result_different_value = slice.eq(&other_different_value);",
                "    assert_eq!(result_different_value, false);",
                "    let other_different_length: [(KeyType, ValueType); 1] = [(KeyType(1), ValueType(10))];",
                "    let result_different_length = slice.eq(&other_different_length);",
                "    assert_eq!(result_different_length, false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(3), ValueType(30)),",
                "        (KeyType(4), ValueType(40)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.eq(&[]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(2), ValueType(20)), (KeyType(1), ValueType(10))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(25))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(3), ValueType(30)), (KeyType(4), ValueType(40))]), false);"
              ],
              "code": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(3), ValueType(30)),",
                "        (KeyType(4), ValueType(40)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "    assert_eq!(slice.eq(&[]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(2), ValueType(20)), (KeyType(1), ValueType(10))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(25))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(3), ValueType(30)), (KeyType(4), ValueType(40))]), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(1), ValueType(10)),",
                "        (KeyType(3), ValueType(30)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(3), ValueType(30))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(15)), (KeyType(2), ValueType(20))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(0), ValueType(10)), (KeyType(2), ValueType(20))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20)), (KeyType(3), ValueType(30))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(2), ValueType(20)), (KeyType(1), ValueType(10))]), true);",
                "    assert_eq!(slice.eq(&[]), false);"
              ],
              "code": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice = Slice {",
                "        entries: [",
                "            Bucket { hash: HashValue::default(), key: KeyType(1), value: ValueType(10) },",
                "            Bucket { hash: HashValue::default(), key: KeyType(2), value: ValueType(20) },",
                "        ],",
                "    };",
                "",
                "    let other: [(KeyType, ValueType); 2] = [",
                "        (KeyType(1), ValueType(10)),",
                "        (KeyType(3), ValueType(30)),",
                "    ];",
                "",
                "    let result = slice.eq(&other);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20))]), true);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(3), ValueType(30))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(15)), (KeyType(2), ValueType(20))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(0), ValueType(10)), (KeyType(2), ValueType(20))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(1), ValueType(10)), (KeyType(2), ValueType(20)), (KeyType(3), ValueType(30))]), false);",
                "    assert_eq!(slice.eq(&[(KeyType(2), ValueType(20)), (KeyType(1), ValueType(10))]), true);",
                "    assert_eq!(slice.eq(&[]), false);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice: Slice<KeyType, ValueType> = Slice { entries: [] };",
                "",
                "    let other: [(KeyType, ValueType); 0] = [];",
                "",
                "    let result = slice.eq(&other);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, true);"
              ],
              "code": [
                "{",
                "    struct KeyType(i32);",
                "    struct ValueType(i32);",
                "    ",
                "    let slice: Slice<KeyType, ValueType> = Slice { entries: [] };",
                "",
                "    let other: [(KeyType, ValueType); 0] = [];",
                "",
                "    let result = slice.eq(&other);",
                "    assert_eq!(result, true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}