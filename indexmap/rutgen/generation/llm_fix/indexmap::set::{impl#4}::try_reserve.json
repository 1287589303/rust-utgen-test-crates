{
  "name": "indexmap::set::{impl#4}::try_reserve",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:300:5:302:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0 to maximum usize value (0, 1, max usize)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    let result = set.try_reserve(0);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    assert_eq!(set.hasher(), &());"
              ],
              "code": [
                "{",
                "    let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    let result = set.try_reserve(0);",
                "    assert!(result.is_ok());",
                "    assert_eq!(set.len(), 0);",
                "    assert!(set.is_empty());",
                "    assert_eq!(set.capacity(), 0);",
                "    assert_eq!(set.hasher(), &());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    let result = set.try_reserve(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 1);",
                "    assert!(!set.is_empty());",
                "    result = set.try_reserve(0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 1);",
                "    result = set.try_reserve(2);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    result = set.try_reserve_exact(1);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    set.truncate(0);",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    set.shrink_to_fit();",
                "    assert_eq!(set.capacity(), 0);"
              ],
              "code": [
                "{",
                "   let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "   let mut result = set.try_reserve(1);",
                "   assert_eq!(result, Ok(()));",
                "   assert_eq!(set.len(), 0);",
                "   assert_eq!(set.capacity(), 1);",
                "   assert!(!set.is_empty());",
                "   result = set.try_reserve(0);",
                "   assert_eq!(result, Ok(()));",
                "   assert_eq!(set.len(), 0);",
                "   assert_eq!(set.capacity(), 1);",
                "   result = set.try_reserve(2);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    result = set.try_reserve_exact(1);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    set.truncate(0);",
                "    assert_eq!(set.len(), 0);",
                "    assert_eq!(set.capacity(), 3);",
                "    set.shrink_to_fit();",
                "    assert_eq!(set.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    let result = set.try_reserve(usize::MAX);",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, TryReserveErrorKind::CapacityOverflow);"
              ],
              "code": [
                "{",
                "    let mut set: super::IndexSet<usize, ()> = super::IndexSet::with_capacity_and_hasher(0, ());",
                "    let result = set.try_reserve(usize::MAX);",
                "    assert!(result.is_err());",
                "    assert_eq!(result.unwrap_err().kind, TryReserveErrorKind::CapacityOverflow);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}