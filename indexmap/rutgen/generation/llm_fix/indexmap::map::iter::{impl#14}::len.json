{
  "name": "indexmap::map::iter::{impl#14}::len",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:137:5:139:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "1 to 1000 (number of buckets in an `IndexMap`), specifically testing values at 0, 1, and 1000 to validate boundary conditions.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let empty_buckets: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let iter = IterMut {",
                "        iter: empty_buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let empty_buckets: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let iter = IterMut {",
                "        iter: empty_buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 1 }];",
                "    let iter = IterMut {",
                "        iter: buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);",
                "    assert!(length > 0);",
                "    assert!(length <= buckets.len());",
                "    assert!(length.is_zero() || length.is_positive());"
              ],
              "code": [
                "{",
                "    let buckets = vec![Bucket { hash: HashValue::default(), key: 1, value: 1 }];",
                "    let iter = IterMut {",
                "        iter: buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "    assert_eq!(length, 1);",
                "    assert!(length > 0);",
                "    assert!(length <= buckets.len());",
                "    assert!(length.is_zero() || length.is_positive());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (1..=1000).map(|i| Bucket { hash: HashValue::default(), key: i, value: i }).collect();",
                "    let iter = IterMut {",
                "        iter: buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1000);",
                "    assert_eq!(iter.len(), length);",
                "    assert!(length > 0);",
                "    assert!(length <= 1000);",
                "    assert!(iter.len() == iter.iter.len());"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<i32, i32>> = (1..=1000).map(|i| Bucket { hash: HashValue::default(), key: i, value: i }).collect();",
                "    let iter = IterMut {",
                "        iter: buckets.iter_mut(),",
                "    };",
                "    let length = iter.len();",
                "    assert_eq!(length, 1000);",
                "    assert_eq!(iter.len(), length);",
                "    assert!(length > 0);",
                "    assert!(length <= 1000);",
                "    assert!(iter.len() == iter.iter.len());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}