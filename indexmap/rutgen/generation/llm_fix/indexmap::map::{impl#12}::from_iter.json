{
  "name": "indexmap::map::{impl#12}::from_iter",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1499:5:1505:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: map\n"
      ],
      "input_infer": "empty iterable, iterable with one key-value pair, iterable with multiple key-value pairs, iterable with duplicate keys, iterable with keys of varying types, iterable with zero capacity, iterable with maximum allowable length for keys and values\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable: Vec<(i32, i32)> = Vec::new();",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable: Vec<(i32, i32)> = Vec::new();",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let iterable: Vec<(i32, i32)> = Vec::new();",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    let iterable: Vec<(i32, i32)> = Vec::new();",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable = vec![(1, \"one\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    map.len() == 1",
                "    map.get(&1) == Some(&\"one\")",
                "    map.is_empty() == false",
                "    map.capacity() >= 1",
                "    map.iter().count() == 1",
                "    map.keys().cloned().collect::<Vec<_>>() == vec![1]",
                "    map.values().cloned().collect::<Vec<_>>() == vec![\"one\"]",
                "    map.into_keys().collect::<Vec<_>>() == vec![1]",
                "    map.into_values().collect::<Vec<_>>() == vec![\"one\"]"
              ],
              "code": [
                "{",
                "  let iterable = vec![(1, \"one\")];",
                "  let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "  assert!(map.len() == 1);",
                "  assert!(map.get(&1) == Some(&\"one\"));",
                "  assert!(map.is_empty() == false);",
                "  assert!(map.capacity() >= 1);",
                "  assert!(map.iter().count() == 1);",
                "  assert!(map.keys().cloned().collect::<Vec<_>>() == vec![1]);",
                "  assert!(map.values().cloned().collect::<Vec<_>>() == vec![\"one\"]);",
                "  assert!(map.clone().into_keys().collect::<Vec<_>>() == vec![1]);",
                "  assert!(map.clone().into_values().collect::<Vec<_>>() == vec![\"one\"]);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.capacity() >= 3, true);",
                "    assert_eq!(map.get(&1), Some(&\"one\"));",
                "    assert_eq!(map.get(&2), Some(&\"two\"));",
                "    assert_eq!(map.get(&3), Some(&\"three\"));",
                "    assert_eq!(map.is_empty(), false);",
                "    let keys: Vec<_> = map.keys().collect();",
                "    assert_eq!(keys, vec![1, 2, 3]);",
                "    let values: Vec<_> = map.values().collect();",
                "    assert_eq!(values, vec![\"one\", \"two\", \"three\"]);"
              ],
              "code": [
                "{",
                "    let iterable = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    let iterable = vec![(1, \"one\"), (2, \"two\"), (3, \"three\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.capacity() >= 3, true);",
                "    assert_eq!(map.get(&1), Some(&\"one\"));",
                "    assert_eq!(map.get(&2), Some(&\"two\"));",
                "    assert_eq!(map.get(&3), Some(&\"three\"));",
                "    assert_eq!(map.is_empty(), false);",
                "    let keys: Vec<_> = map.keys().collect();",
                "    assert_eq!(keys, vec![1, 2, 3]);",
                "    let values: Vec<_> = map.values().collect();",
                "    assert_eq!(values, vec![\"one\", \"two\", \"three\"]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable = vec![(1, \"one\"), (1, \"uno\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable = vec![(1, \"one\"), (1, \"uno\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&\"uno\"));",
                "    assert!(map.contains_key(&1));",
                "    assert!(!map.is_empty());",
                "    let map_empty: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(vec![]);",
                "    assert_eq!(map_empty.len(), 0);",
                "    assert!(map_empty.is_empty());",
                "    let iterable_multiple = vec![(2, \"two\"), (3, \"three\"), (2, \"dos\")];",
                "    let map_multiple: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable_multiple);",
                "    assert_eq!(map_multiple.len(), 2);",
                "    assert_eq!(map_multiple.get(&2), Some(&\"dos\"));",
                "    assert_eq!(map_multiple.get(&3), Some(&\"three\"));",
                "    assert!(map_multiple.contains_key(&2));",
                "    assert!(map_multiple.contains_key(&3));"
              ],
              "code": [
                "{",
                "    let iterable = vec![(1, \"one\"), (1, \"uno\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    let iterable = vec![(1, \"one\"), (1, \"uno\")];",
                "    let map: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get(&1), Some(&\"uno\"));",
                "    assert!(map.contains_key(&1));",
                "    assert!(!map.is_empty());",
                "    let map_empty: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(vec![]);",
                "    assert_eq!(map_empty.len(), 0);",
                "    assert!(map_empty.is_empty());",
                "    let iterable_multiple = vec![(2, \"two\"), (3, \"three\"), (2, \"dos\")];",
                "    let map_multiple: IndexMap<i32, &str, RandomState> = IndexMap::from_iter(iterable_multiple);",
                "    assert_eq!(map_multiple.len(), 2);",
                "    assert_eq!(map_multiple.get(&2), Some(&\"dos\"));",
                "    assert_eq!(map_multiple.get(&3), Some(&\"three\"));",
                "    assert!(map_multiple.contains_key(&2));",
                "    assert!(map_multiple.contains_key(&3));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable: Vec<(String, usize)> = vec![",
                "        (\"one\".to_string(), 1),",
                "        (\"two\".to_string(), 2),",
                "    ];",
                "    let map: IndexMap<String, usize, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable: Vec<(String, usize)> = vec![(\"one\".to_string(), 1), (\"two\".to_string(), 2)];",
                "    let map: IndexMap<String, usize, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(map.get(\"one\"), Some(&1));",
                "    assert_eq!(map.get(\"two\"), Some(&2));",
                "    assert!(map.get(\"three\").is_none());",
                "    assert!(!map.is_empty());"
              ],
              "code": [
                "{",
                " let iterable: Vec<(std::string::String, usize)> = vec![  ",
                "     (\"one\".to_string(), 1),  ",
                "     (\"two\".to_string(), 2),  ",
                " ];  ",
                " let map: IndexMap<std::string::String, usize, RandomState> = IndexMap::from_iter(iterable);  ",
                " ",
                "   assert_eq!(map.len(), 2);  ",
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(map.get(\"one\"), Some(&1));",
                "    assert_eq!(map.get(\"two\"), Some(&2));",
                "    assert!(map.get(\"three\").is_none());",
                "    assert!(!map.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable: Vec<(i32, i32)> = Vec::with_capacity(0);",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable: Vec<(i32, i32)> = Vec::with_capacity(0);",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let iterable: Vec<(i32, i32)> = Vec::with_capacity(0);",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    let iterable: Vec<(i32, i32)> = Vec::with_capacity(0);",
                "    let map: IndexMap<i32, i32, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let iterable: Vec<(String, String)> = (0..usize::MAX)",
                "        .map(|i| (format!(\"key{}\", i), format!(\"value{}\", i)))",
                "        .collect();",
                "    let map: IndexMap<String, String, RandomState> = IndexMap::from_iter(iterable);",
                "}"
              ],
              "oracle": [
                "    let iterable: Vec<(String, String)> = (0..10)",
                "    .map(|i| (format!(\"key{}\", i), format!(\"value{}\", i)))",
                "    .collect();",
                "    let map: IndexMap<String, String, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 10);",
                "    assert_eq!(map.get(\"key0\"), Some(&\"value0\".to_string()));",
                "    assert_eq!(map.get(\"key5\"), Some(&\"value5\".to_string()));",
                "    assert!(map.get(\"key10\").is_none());",
                "    ",
                "    let empty_iter: Vec<(String, String)> = Vec::new();",
                "    let empty_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(empty_iter);",
                "    assert!(empty_map.is_empty());",
                "    ",
                "    let single_item_iter: Vec<(String, String)> = vec![(String::from(\"key1\"), String::from(\"value1\"))];",
                "    let single_item_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(single_item_iter);",
                "    assert_eq!(single_item_map.len(), 1);",
                "    assert_eq!(single_item_map.get(\"key1\"), Some(&\"value1\".to_string()));",
                "    ",
                "    let large_pair_iter: Vec<(String, String)> = (0..1_000).map(|i| {",
                "    (format!(\"key{}\", i), format!(\"value{}\", i))",
                "    }).collect();",
                "    let large_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(large_pair_iter);",
                "    assert_eq!(large_map.len(), 1_000);",
                "    for i in 0..1_000 {",
                "    assert_eq!(large_map.get(&format!(\"key{}\", i)), Some(&format!(\"value{}\", i)));",
                "    }"
              ],
              "code": [
                "{",
                "    let iterable: Vec<(String, String)> = (0..usize::MAX)",
                "        .map(|i| (format!(\"key{}\", i), format!(\"value{}\", i)))",
                "        .collect();",
                "    let map: IndexMap<String, String, RandomState> = IndexMap::from_iter(iterable);",
                "    let iterable: Vec<(String, String)> = (0..10)",
                "    .map(|i| (format!(\"key{}\", i), format!(\"value{}\", i)))",
                "    .collect();",
                "    let map: IndexMap<String, String, RandomState> = IndexMap::from_iter(iterable);",
                "    assert_eq!(map.len(), 10);",
                "    assert_eq!(map.get(\"key0\"), Some(&\"value0\".to_string()));",
                "    assert_eq!(map.get(\"key5\"), Some(&\"value5\".to_string()));",
                "    assert!(map.get(\"key10\").is_none());",
                "    ",
                "    let empty_iter: Vec<(String, String)> = Vec::new();",
                "    let empty_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(empty_iter);",
                "    assert!(empty_map.is_empty());",
                "    ",
                "    let single_item_iter: Vec<(String, String)> = vec![(String::from(\"key1\"), String::from(\"value1\"))];",
                "    let single_item_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(single_item_iter);",
                "    assert_eq!(single_item_map.len(), 1);",
                "    assert_eq!(single_item_map.get(\"key1\"), Some(&\"value1\".to_string()));",
                "    ",
                "    let large_pair_iter: Vec<(String, String)> = (0..1_000).map(|i| {",
                "    (format!(\"key{}\", i), format!(\"value{}\", i))",
                "    }).collect();",
                "    let large_map: IndexMap<String, String, RandomState> = IndexMap::from_iter(large_pair_iter);",
                "    assert_eq!(large_map.len(), 1_000);",
                "    for i in 0..1_000 {",
                "    assert_eq!(large_map.get(&format!(\"key{}\", i)), Some(&format!(\"value{}\", i)));",
                "    }",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}