{
  "name": "indexmap::map::core::{impl#2}::rebuild_hash_table",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:508:5:511:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "the Indices should be initialized and have a capacity greater than or equal to the length of Entries, and Entries should not be empty before calling rebuild_hash_table. The test input conditions or ranges include: Indices capacity >= 1, Entries length >= 1, Indices must be mutable, and Entries must contain valid Bucket<K, V> items.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBucket {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "    ",
                "    let entry1 = TestBucket { hash: HashValue::new(10), key: 1, value: 100 };",
                "    let entry2 = TestBucket { hash: HashValue::new(20), key: 2, value: 200 };",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(2);",
                "    index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "    index_map.entries.push(Bucket { hash: entry2.hash, key: entry2.key, value: entry2.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.indices.len(), 2);",
                "    assert_eq!(index_map.indices.capacity(), 2);",
                "    assert!(index_map.indices.contains_key(&entry1.hash.get()));",
                "    assert!(index_map.indices.contains_key(&entry2.hash.get()));",
                "    assert!(index_map.entries.len() == 2);",
                "    assert_eq!(index_map.entries[0].key, entry1.key);",
                "    assert_eq!(index_map.entries[0].value, entry1.value);",
                "    assert_eq!(index_map.entries[1].key, entry2.key);",
                "    assert_eq!(index_map.entries[1].value, entry2.value);"
              ],
              "code": [
                "{",
                "   struct TestBucket {  ",
                "       hash: HashValue,  ",
                "       key: usize,  ",
                "       value: usize,  ",
                "   }  ",
                "   ",
                "   let entry1 = TestBucket { hash: HashValue(10), key: 1, value: 100 };  ",
                "   let entry2 = TestBucket { hash: HashValue(20), key: 2, value: 200 };  ",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(2);",
                "    index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "    index_map.entries.push(Bucket { hash: entry2.hash, key: entry2.key, value: entry2.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "    assert_eq!(index_map.indices.len(), 2);",
                "    assert_eq!(index_map.indices.capacity(), 2);",
                "    assert!(index_map.indices.contains_key(&entry1.hash.get()));",
                "    assert!(index_map.indices.contains_key(&entry2.hash.get()));",
                "    assert!(index_map.entries.len() == 2);",
                "    assert_eq!(index_map.entries[0].key, entry1.key);",
                "    assert_eq!(index_map.entries[0].value, entry1.value);",
                "    assert_eq!(index_map.entries[1].key, entry2.key);",
                "    assert_eq!(index_map.entries[1].value, entry2.value);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBucket {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "    ",
                "    let entry = TestBucket { hash: HashValue::new(10), key: 1, value: 100 };",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    index_map.entries.push(Bucket { hash: entry.hash, key: entry.key, value: entry.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.indices.len(), 1);",
                "    assert_eq!(index_map.entries.len(), 1);",
                "    assert_eq!(index_map.entries[0].hash.get(), 10);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[0].value, 100);",
                "    assert!(index_map.indices.capacity() >= index_map.entries.len());",
                "    assert!(index_map.indices.len() > 0);",
                "    assert!(index_map.indices.get(0).is_some());"
              ],
              "code": [
                "{",
                "   struct TestBucket {",
                "       hash: HashValue,",
                "       key: usize,",
                "       value: usize,",
                "   }",
                "   ",
                "   let entry = TestBucket { hash: HashValue(10), key: 1, value: 100 };",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    index_map.entries.push(Bucket { hash: entry.hash, key: entry.key, value: entry.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "    assert_eq!(index_map.indices.len(), 1);",
                "    assert_eq!(index_map.entries.len(), 1);",
                "    assert_eq!(index_map.entries[0].hash.get(), 10);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[0].value, 100);",
                "    assert!(index_map.indices.capacity() >= index_map.entries.len());",
                "    assert!(index_map.indices.len() > 0);",
                "    assert!(index_map.indices.get(0).is_some());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBucket {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "    ",
                "    let entry1 = TestBucket { hash: HashValue::new(10), key: 1, value: 100 };",
                "    let entry2 = TestBucket { hash: HashValue::new(20), key: 2, value: 200 };",
                "    let entry3 = TestBucket { hash: HashValue::new(30), key: 3, value: 300 };",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(3);",
                "    index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "    index_map.entries.push(Bucket { hash: entry2.hash, key: entry2.key, value: entry2.value });",
                "    index_map.entries.push(Bucket { hash: entry3.hash, key: entry3.key, value: entry3.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.indices.len(), 3);",
                "    assert_eq!(index_map.indices.capacity(), 3);",
                "    assert_eq!(index_map.entries.len(), 3);",
                "    assert_eq!(index_map.entries[0].hash.get(), 10);",
                "    assert_eq!(index_map.entries[1].hash.get(), 20);",
                "    assert_eq!(index_map.entries[2].hash.get(), 30);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[0].value, 100);",
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert_eq!(index_map.entries[1].value, 200);",
                "    assert_eq!(index_map.entries[2].key, 3);",
                "    assert_eq!(index_map.entries[2].value, 300);"
              ],
              "code": [
                "{",
                " struct TestBucket {  ",
                "     hash: HashValue,  ",
                "     key: usize,  ",
                "     value: usize,  ",
                " }  ",
                " ",
                " let entry1 = TestBucket { hash: HashValue(10), key: 1, value: 100 };  ",
                " let entry2 = TestBucket { hash: HashValue(20), key: 2, value: 200 };  ",
                " let entry3 = TestBucket { hash: HashValue(30), key: 3, value: 300 };  ",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(3);",
                "    index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "    index_map.entries.push(Bucket { hash: entry2.hash, key: entry2.key, value: entry2.value });",
                "    index_map.entries.push(Bucket { hash: entry3.hash, key: entry3.key, value: entry3.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "    assert_eq!(index_map.indices.len(), 3);",
                "    assert_eq!(index_map.indices.capacity(), 3);",
                "    assert_eq!(index_map.entries.len(), 3);",
                "    assert_eq!(index_map.entries[0].hash.get(), 10);",
                "    assert_eq!(index_map.entries[1].hash.get(), 20);",
                "    assert_eq!(index_map.entries[2].hash.get(), 30);",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[0].value, 100);",
                "    assert_eq!(index_map.entries[1].key, 2);",
                "    assert_eq!(index_map.entries[1].value, 200);",
                "    assert_eq!(index_map.entries[2].key, 3);",
                "    assert_eq!(index_map.entries[2].value, 300);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestBucket {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "    ",
                "    let entry1 = TestBucket { hash: HashValue::new(10), key: 1, value: 100 };",
                "    ",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "    ",
                "    index_map.rebuild_hash_table();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.indices.len(), 1);",
                "    assert_eq!(index_map.entries.len(), 1);",
                "    assert_eq!(index_map.entries[0].hash, HashValue::new(10));",
                "    assert_eq!(index_map.entries[0].key, 1);",
                "    assert_eq!(index_map.entries[0].value, 100);"
              ],
              "code": [
                "{",
                "  struct TestBucket {",
                "      hash: HashValue,",
                "      key: usize,",
                "      value: usize,",
                "  }",
                "  ",
                "  let entry1 = TestBucket { hash: HashValue(10), key: 1, value: 100 };",
                "   ",
                "   let mut index_map = IndexMapCore::<usize, usize>::with_capacity(1);",
                "   index_map.entries.push(Bucket { hash: entry1.hash, key: entry1.key, value: entry1.value });",
                "   ",
                "   index_map.rebuild_hash_table();",
                "   assert_eq!(index_map.indices.len(), 1);",
                "   assert_eq!(index_map.entries.len(), 1);",
                "   assert_eq!(index_map.entries[0].hash, HashValue(10));",
                "   assert_eq!(index_map.entries[0].key, 1);",
                "   assert_eq!(index_map.entries[0].value, 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}