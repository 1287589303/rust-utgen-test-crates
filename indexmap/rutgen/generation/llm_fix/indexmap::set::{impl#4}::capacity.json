{
  "name": "indexmap::set::{impl#4}::capacity",
  "mod_info": {
    "name": "set",
    "loc": "src/lib.rs:124:1:124:13"
  },
  "visible": true,
  "loc": "src/set.rs:198:5:200:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Valid inputs for `capacity` should include a state where the `IndexSet` is initialized with various capacities, specifically testing with capacities of 0, 1, and any large positive integer (e.g., 1000) using different hash builders; also verify after adding elements to ensure it reflects current capacities post-modifications.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.capacity(), 0);"
              ],
              "code": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "    assert_eq!(index_set.capacity(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.capacity(), 1);",
                "    let index_set_empty: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
                "    assert_eq!(index_set_empty.capacity(), 0);",
                "    let index_set_large: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
                "    assert_eq!(index_set_large.capacity(), 100);",
                "    let index_set_default: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_hasher(std::collections::hash_map::RandomState::new());",
                "    assert!(index_set_default.capacity() >= 0);"
              ],
              "code": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(1, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "    assert_eq!(index_set.capacity(), 1);",
                "    let index_set_empty: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_capacity_and_hasher(0, std::collections::hash_map::RandomState::new());",
                "    assert_eq!(index_set_empty.capacity(), 0);",
                "    let index_set_large: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_capacity_and_hasher(100, std::collections::hash_map::RandomState::new());",
                "    assert_eq!(index_set_large.capacity(), 100);",
                "    let index_set_default: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "    super::IndexSet::with_hasher(std::collections::hash_map::RandomState::new());",
                "    assert!(index_set_default.capacity() >= 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_set.capacity(), 1000);"
              ],
              "code": [
                "{",
                "    let index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(1000, std::collections::hash_map::RandomState::new());",
                "    let _cap = index_set.capacity();",
                "    assert_eq!(index_set.capacity(), 1000);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
                "    index_set.reserve(5);",
                "    let _cap = index_set.capacity();",
                "}"
              ],
              "oracle": [
                "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
                "    index_set.reserve(5);",
                "    assert_eq!(index_set.capacity(), 10);",
                "    index_set.reserve(0);",
                "    assert_eq!(index_set.capacity(), 10);",
                "    index_set.shrink_to_fit();",
                "    assert!(index_set.capacity() >= index_set.len());"
              ],
              "code": [
                "{",
                "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> =",
                "        super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
                "    index_set.reserve(5);",
                "    let _cap = index_set.capacity();",
                "    let mut index_set: super::IndexSet<i32, std::collections::hash_map::RandomState> = super::IndexSet::with_capacity_and_hasher(10, std::collections::hash_map::RandomState::new());",
                "    index_set.reserve(5);",
                "    assert_eq!(index_set.capacity(), 10);",
                "    index_set.reserve(0);",
                "    assert_eq!(index_set.capacity(), 10);",
                "    index_set.shrink_to_fit();",
                "    assert!(index_set.capacity() >= index_set.len());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}