{
  "name": "indexmap::map::core::{impl#2}::swap_remove_index",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:443:5:445:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "index: usize in the range [0, len) where len is the current length of entries, with len >= 0, including boundary cases for empty entries (len = 0) and maximum index (len - 1 when len > 0)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = index_map.swap_remove_index(0);",
                "}"
              ],
              "oracle": [
                "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.swap_remove_index(0), None);",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1);",
                "    assert_eq!(result, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 1);",
                "    let result_for_zero = index_map.swap_remove_index(0);",
                "    assert_eq!(result_for_zero, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = index_map.swap_remove_index(0);",
                "    let index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.swap_remove_index(0), None);",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1);",
                "    assert_eq!(result, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 1);",
                "    let result_for_zero = index_map.swap_remove_index(0);",
                "    assert_eq!(result_for_zero, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(0);",
                "}"
              ],
              "oracle": [
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(0);",
                "    assert_eq!(result, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(0);",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(0);",
                "    assert_eq!(result, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    index_map.push_entry(2, 3, 30);",
                "    let result1 = index_map.swap_remove_index(1);",
                "    let result2 = index_map.swap_remove_index(0);",
                "    let result3 = index_map.swap_remove_index(1); // after previous removals, this index is now 1.",
                "}"
              ],
              "oracle": [
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    index_map.push_entry(2, 3, 30);",
                "    let result1 = index_map.swap_remove_index(1);",
                "    assert_eq!(result1, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 2);",
                "    let result2 = index_map.swap_remove_index(0);",
                "    assert_eq!(result2, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 1);",
                "    let result3 = index_map.swap_remove_index(1);",
                "    assert_eq!(result3, None);",
                "    assert_eq!(index_map.len(), 1);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    index_map.push_entry(2, 3, 30);",
                "    let result1 = index_map.swap_remove_index(1);",
                "    let result2 = index_map.swap_remove_index(0);",
                "    let result3 = index_map.swap_remove_index(1); // after previous removals, this index is now 1.",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    index_map.push_entry(2, 3, 30);",
                "    let result1 = index_map.swap_remove_index(1);",
                "    assert_eq!(result1, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 2);",
                "    let result2 = index_map.swap_remove_index(0);",
                "    assert_eq!(result2, Some((1, 10)));",
                "    assert_eq!(index_map.len(), 1);",
                "    let result3 = index_map.swap_remove_index(1);",
                "    assert_eq!(result3, None);",
                "    assert_eq!(index_map.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(2);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(2);",
                "    result.is_none()",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(2);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    let result = index_map.swap_remove_index(2);",
                "    result.is_none()",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1); // this should remove the last element",
                "}"
              ],
              "oracle": [
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1);",
                "    assert_eq!(result, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.get_index_of(index_map.entries[0].hash, &1), Some(0));",
                "    assert_eq!(index_map.pop(), Some((1, 10)));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1); // this should remove the last element",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.push_entry(0, 1, 10);",
                "    index_map.push_entry(1, 2, 20);",
                "    let result = index_map.swap_remove_index(1);",
                "    assert_eq!(result, Some((2, 20)));",
                "    assert_eq!(index_map.len(), 1);",
                "    assert_eq!(index_map.get_index_of(index_map.entries[0].hash, &1), Some(0));",
                "    assert_eq!(index_map.pop(), Some((1, 10)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}