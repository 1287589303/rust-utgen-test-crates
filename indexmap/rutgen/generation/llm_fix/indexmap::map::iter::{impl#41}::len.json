{
  "name": "indexmap::map::iter::{impl#41}::len",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:351:5:353:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: Length of slice iter must be between 0 and maximum usize value (0 <= self.iter.len() <= usize::MAX) with a valid Bucket<K, V> structure, including edge cases of empty slice and single element slice.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets: Vec<Bucket<u32, u32>> = vec![];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 0);"
              ],
              "code": [
                "{",
                "    let buckets: Vec<Bucket<u32, u32>> = vec![];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "    assert_eq!(length, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets = vec![Bucket { hash: 0, key: 1, value: 2 }];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 1);"
              ],
              "code": [
                "{",
                "    let buckets = vec![Bucket { hash: 0, key: 1, value: 2 }];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "    assert_eq!(length, 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let buckets = vec![",
                "        Bucket { hash: 0, key: 1, value: 2 },",
                "        Bucket { hash: 1, key: 3, value: 4 },",
                "        Bucket { hash: 2, key: 5, value: 6 },",
                "    ];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(length, 3);"
              ],
              "code": [
                "{",
                "    let buckets = vec![",
                "        Bucket { hash: 0, key: 1, value: 2 },",
                "        Bucket { hash: 1, key: 3, value: 4 },",
                "        Bucket { hash: 2, key: 5, value: 6 },",
                "    ];",
                "    let keys = Keys { iter: buckets.iter() };",
                "    let length = keys.len();",
                "    assert_eq!(length, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}