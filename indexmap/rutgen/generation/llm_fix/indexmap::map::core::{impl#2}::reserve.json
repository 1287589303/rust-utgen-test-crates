{
  "name": "indexmap::map::core::{impl#2}::reserve",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:249:5:255:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: additional > self.entries.capacity() - self.entries.len() at line 252 is true\n"
      ],
      "input_infer": "additional values: 1 to MAX_ENTRIES_CAPACITY (non-inclusive) where self.entries.len() is less than self.entries.capacity() and self.entries.capacity() is less than or equal to MAX_ENTRIES_CAPACITY\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(2);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    ",
                "    // Initial capacity is 2, len is 2, so additional must be > 0",
                "    let additional = 1; ",
                "    map.reserve(additional);",
                "}"
              ],
              "oracle": [
                "    assert!(map.entries.capacity() > 2);",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert!(map.entries.len() + 1 <= map.entries.capacity());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(2);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    ",
                "    // Initial capacity is 2, len is 2, so additional must be > 0",
                "    let additional = 1; ",
                "    map.reserve(additional);",
                "    assert!(map.entries.capacity() > 2);",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert_eq!(map.indices.len(), 0);",
                "    assert!(map.entries.len() + 1 <= map.entries.capacity());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    ",
                "    // Initial capacity is 3, len is 3, additional must be 1",
                "    let additional = 1; ",
                "    map.reserve(additional);",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    assert_eq!(map.entries.capacity(), 3);",
                "    assert_eq!(map.entries.len(), 3);",
                "    let additional = 1;",
                "    map.reserve(additional);",
                "    assert!(map.entries.capacity() >= 4);",
                "    assert_eq!(map.entries.len(), 3);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    ",
                "    // Initial capacity is 3, len is 3, additional must be 1",
                "    let additional = 1; ",
                "    map.reserve(additional);",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(3);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 30 });",
                "    assert_eq!(map.entries.capacity(), 3);",
                "    assert_eq!(map.entries.len(), 3);",
                "    let additional = 1;",
                "    map.reserve(additional);",
                "    assert!(map.entries.capacity() >= 4);",
                "    assert_eq!(map.entries.len(), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    ",
                "    // Initial capacity is 5, len is 2, additional can be 3",
                "    let additional = 3; ",
                "    map.reserve(additional);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.entries.capacity(), 8);",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.indices.capacity() >= 5);",
                "    assert!(map.indices.len() == 0);",
                "    assert!(map.entries[0].key == 1);",
                "    assert!(map.entries[0].value == 10);",
                "    assert!(map.entries[1].key == 2);",
                "    assert!(map.entries[1].value == 20);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<i32, i32> = IndexMapCore::with_capacity(5);",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 10 });",
                "    map.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 20 });",
                "    ",
                "    // Initial capacity is 5, len is 2, additional can be 3",
                "    let additional = 3; ",
                "    map.reserve(additional);",
                "    assert_eq!(map.entries.capacity(), 8);",
                "    assert_eq!(map.entries.len(), 2);",
                "    assert!(map.indices.capacity() >= 5);",
                "    assert!(map.indices.len() == 0);",
                "    assert!(map.entries[0].key == 1);",
                "    assert!(map.entries[0].value == 10);",
                "    assert!(map.entries[1].key == 2);",
                "    assert!(map.entries[1].value == 20);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: additional > self.entries.capacity() - self.entries.len() at line 252 is false, with bound additional == self.entries.capacity() - self.entries.len()\n"
      ],
      "input_infer": "additional = self.entries.capacity() - self.entries.len() for edge case; additional = self.entries.capacity() - self.entries.len() + 1 for boundary case; additional = 0 for zero capacity or empty entries case.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.reserve(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert!(index_map.indices.is_empty());",
                "    assert!(index_map.entries.as_entries().is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.reserve(0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert!(index_map.indices.is_empty());",
                "    assert!(index_map.entries.as_entries().is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.reserve(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.indices.len(), 0);",
                "    assert!(index_map.entries.is_empty());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    index_map.reserve(0);",
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.indices.len(), 0);",
                "    assert!(index_map.entries.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    index_map.reserve(5);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 5);",
                "    assert!(index_map.indices.capacity() >= 5);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    index_map.reserve(5);",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 5);",
                "    assert!(index_map.indices.capacity() >= 5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    index_map.reserve(6);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.indices.len(), 0);",
                "    assert_eq!(index_map.entries.len(), 0);",
                "    assert_eq!(index_map.entries.capacity(), 5);",
                "    assert!(index_map.entries.len() < index_map.entries.capacity());",
                "    assert!(index_map.entries.capacity() - index_map.entries.len() >= 1);",
                "    assert!(index_map.entries.capacity() - index_map.entries.len() == 5);",
                "    assert!(index_map.indices.capacity() >= 6);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    index_map.reserve(6);",
                "    assert_eq!(index_map.indices.len(), 0);",
                "    assert_eq!(index_map.entries.len(), 0);",
                "    assert_eq!(index_map.entries.capacity(), 5);",
                "    assert!(index_map.entries.len() < index_map.entries.capacity());",
                "    assert!(index_map.entries.capacity() - index_map.entries.len() >= 1);",
                "    assert!(index_map.entries.capacity() - index_map.entries.len() == 5);",
                "    assert!(index_map.indices.capacity() >= 6);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}