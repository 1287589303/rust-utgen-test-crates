{
  "name": "indexmap::{impl#3}::from_hashbrown",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:2:1:271:46"
  },
  "visible": true,
  "loc": "src/lib.rs:239:5:250:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: error matches hashbrown::TryReserveError::AllocError { layout } at line 241 is true\n",
        "expected return value/type: Self {\n            kind: match error {\n                hashbrown::TryReserveError::CapacityOverflow => {\n                    TryReserveErrorKind::CapacityOverflow\n                }\n                hashbrown::TryReserveError::AllocError { layout } => {\n                    TryReserveErrorKind::AllocError { layout }\n                }\n            },\n        }\n"
      ],
      "input_infer": "hashbrown::TryReserveError with AllocError variant, including varying layouts (e.g., small, large, complex)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "}"
              ],
              "oracle": [
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });"
              ],
              "code": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1024, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "}"
              ],
              "oracle": [
                "    let layout = alloc::alloc::Layout::from_size_align(1024, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let expected = TryReserveError { kind: TryReserveErrorKind::AllocError { layout } };",
                "    assert_eq!(result, expected);"
              ],
              "code": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1024, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    let layout = alloc::alloc::Layout::from_size_align(1024, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let expected = TryReserveError { kind: TryReserveErrorKind::AllocError { layout } };",
                "    assert_eq!(result, expected);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(256, 16).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });"
              ],
              "code": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(256, 16).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: error matches hashbrown::TryReserveError::CapacityOverflow at line 241 is true\n",
        "precondition: error matches hashbrown::TryReserveError::CapacityOverflow at line 241 is true\n",
        "expected return value/type: Self {\n            kind: match error {\n                hashbrown::TryReserveError::CapacityOverflow => {\n                    TryReserveErrorKind::CapacityOverflow\n                }\n                hashbrown::TryReserveError::AllocError { layout } => {\n                    TryReserveErrorKind::AllocError { layout }\n                }\n            },\n        }\n"
      ],
      "input_infer": "hashbrown::TryReserveError with CapacityOverflow variant or hashbrown::TryReserveError with AllocError variant containing any valid alloc::alloc::Layout\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let error = hashbrown::TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_hashbrown(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::CapacityOverflow);"
              ],
              "code": [
                "{",
                "    let error = hashbrown::TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::CapacityOverflow);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });",
                "    let error = hashbrown::TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::CapacityOverflow);"
              ],
              "code": [
                "{",
                "    let layout = alloc::alloc::Layout::from_size_align(1, 1).unwrap();",
                "    let error = hashbrown::TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::AllocError { layout });",
                "    let error = hashbrown::TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_hashbrown(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::CapacityOverflow);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}