{
  "name": "indexmap::map::{impl#7}::partition_point",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1134:5:1139:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Self must be a sorted map containing entries with key-value pairs, the predicate function must be valid and must return a boolean, valid ranges for key-value pairs, and the expected return value should be a valid index within the bounds of the map's entries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 0);",
                "    map.insert(5, 100);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(10, 200);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(15, 300);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(0, 400);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    map.insert(9, 500);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "    map.clear();",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.insert(5, 100);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(10, 200);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(15, 300);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(0, 400);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    map.insert(9, 500);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "    map.clear();",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(5, 1);",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 1);",
                "    map.insert(10, 2);",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    let pred = |key: &i32, _: &i32| *key < 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.insert(1, 4);",
                "    let pred = |key: &i32, _: &i32| *key <= 1;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    map.reverse();",
                "    let pred = |key: &i32, _: &i32| *key > 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(5, 1);",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(10, 2);",
                "    let pred = |key: &i32, _: &i32| *key < 10;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    let pred = |key: &i32, _: &i32| *key < 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.insert(1, 4);",
                "    let pred = |key: &i32, _: &i32| *key <= 1;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    map.reverse();",
                "    let pred = |key: &i32, _: &i32| *key > 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(2, 2);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 3);",
                "    assert!(map.get_index(index).is_none());",
                "    assert!(map.get_index(index - 1).is_some());",
                "    assert!(map.get_index(index - 1).unwrap().0 < &5);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(2, 2);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "    assert!(map.get_index(index).is_none());",
                "    assert!(map.get_index(index - 1).is_some());",
                "    assert!(map.get_index(index - 1).unwrap().0 < &5);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(2, 2);",
                "    map.insert(10, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 2);",
                "    assert_eq!(map.first(), Some((&1, &1)));",
                "    assert_eq!(map.get_index(index), None);",
                "    assert_eq!(map.get_index(index - 1), Some((&10, &3)));",
                "    assert_eq!(map.partition_point(|key: &i32, _: &i32| *key < 0), 0);",
                "    map.clear();",
                "    assert_eq!(map.partition_point(pred), 0);",
                "    map.insert(0, 5);",
                "    assert_eq!(map.partition_point(pred), 1);",
                "    map.insert(4, 6);",
                "    assert_eq!(map.partition_point(pred), 2);",
                "    map.insert(5, 7);",
                "    assert_eq!(map.partition_point(pred), 2);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(2, 2);",
                "    map.insert(10, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    assert_eq!(map.first(), Some((&1, &1)));",
                "    assert_eq!(map.get_index(index), None);",
                "    assert_eq!(map.get_index(index - 1), Some((&10, &3)));",
                "    assert_eq!(map.partition_point(|key: &i32, _: &i32| *key < 0), 0);",
                "    map.clear();",
                "    assert_eq!(map.partition_point(pred), 0);",
                "    map.insert(0, 5);",
                "    assert_eq!(map.partition_point(pred), 1);",
                "    map.insert(4, 6);",
                "    assert_eq!(map.partition_point(pred), 2);",
                "    map.insert(5, 7);",
                "    assert_eq!(map.partition_point(pred), 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(5, 1);",
                "    map.insert(6, 2);",
                "    map.insert(7, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 0);",
                "    map.insert(4, 0);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(8, 4);",
                "    map.insert(3, -1);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    let pred = |key: &i32, _: &i32| *key < 6;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "    map.insert(2, -2);",
                "    let pred = |key: &i32, _: &i32| *key <= 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 4);",
                "    map.insert(1, -3);",
                "    let pred = |key: &i32, _: &i32| *key < 1;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.clear();",
                "    let pred = |key: &i32, _: &i32| *key > 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(5, 1);",
                "    map.insert(6, 2);",
                "    map.insert(7, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.insert(4, 0);",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 1);",
                "    map.insert(8, 4);",
                "    map.insert(3, -1);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    let pred = |key: &i32, _: &i32| *key < 6;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 3);",
                "    map.insert(2, -2);",
                "    let pred = |key: &i32, _: &i32| *key <= 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 4);",
                "    map.insert(1, -3);",
                "    let pred = |key: &i32, _: &i32| *key < 1;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "    map.clear();",
                "    let pred = |key: &i32, _: &i32| *key > 0;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(4, 2);",
                "    map.insert(7, 3);",
                "    map.insert(10, 4);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 2);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(4, 2);",
                "    map.insert(7, 3);",
                "    map.insert(10, 4);",
                "    let pred = |key: &i32, _: &i32| *key < 5;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(1, 2);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 2;",
                "    let index = map.partition_point(pred);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 2);",
                "    let pred1 = |key: &i32, _: &i32| *key < 1;",
                "    let index1 = map.partition_point(pred1);",
                "    assert_eq!(index1, 0);",
                "    let pred2 = |key: &i32, _: &i32| *key > 4;",
                "    let index2 = map.partition_point(pred2);",
                "    assert_eq!(index2, 3);",
                "    let pred3 = |key: &i32, _: &i32| *key == 3;",
                "    let index3 = map.partition_point(pred3);",
                "    assert_eq!(index3, 3);",
                "    let pred4 = |key: &i32, _: &i32| *key <= 3;",
                "    let index4 = map.partition_point(pred4);",
                "    assert_eq!(index4, 3);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32> = IndexMap::new();",
                "    map.insert(1, 1);",
                "    map.insert(1, 2);",
                "    map.insert(3, 3);",
                "    let pred = |key: &i32, _: &i32| *key < 2;",
                "    let index = map.partition_point(pred);",
                "    assert_eq!(index, 2);",
                "    let pred1 = |key: &i32, _: &i32| *key < 1;",
                "    let index1 = map.partition_point(pred1);",
                "    assert_eq!(index1, 0);",
                "    let pred2 = |key: &i32, _: &i32| *key > 4;",
                "    let index2 = map.partition_point(pred2);",
                "    assert_eq!(index2, 3);",
                "    let pred3 = |key: &i32, _: &i32| *key == 3;",
                "    let index3 = map.partition_point(pred3);",
                "    assert_eq!(index3, 3);",
                "    let pred4 = |key: &i32, _: &i32| *key <= 3;",
                "    let index4 = map.partition_point(pred4);",
                "    assert_eq!(index4, 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}