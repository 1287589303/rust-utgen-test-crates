{
  "name": "indexmap::set::slice::{impl#1}::partition_point",
  "mod_info": {
    "name": "set::slice",
    "loc": "src/set.rs:5:1:5:11"
  },
  "visible": true,
  "loc": "src/set/slice.rs:169:5:174:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "Test input conditions or ranges: a non-empty slice of T with sorted keys, a predicate function P that returns a boolean for each element of T, and T being comparable (implementing Ord).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "        Bucket { hash: HashValue::default(), key: 2, value: 'b' },",
                "        Bucket { hash: HashValue::default(), key: 3, value: 'c' },",
                "    ]});",
                "    ",
                "    let index = slice.partition_point(|&x| x < 0);",
                "}"
              ],
              "oracle": [
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 'a' }, Bucket { hash: HashValue::default(), key: 2, value: 'b' }, Bucket { hash: HashValue::default(), key: 3, value: 'c' }] });",
                "    let index = slice.partition_point(|&x| x < 0);",
                "    assert_eq!(index, 0);"
              ],
              "code": [
                "{",
                "   let slice = Box::new(Slice { entries: [  ",
                "       Bucket { hash: HashValue::default(), key: 1, value: () },  ",
                "       Bucket { hash: HashValue::default(), key: 2, value: () },  ",
                "       Bucket { hash: HashValue::default(), key: 3, value: () },  ",
                "   ]});  ",
                "    ",
                "    let index = slice.partition_point(|&x| x < 0);",
                "    let slice = Box::new(Slice { entries: [Bucket { hash: HashValue::default(), key: 1, value: 'a' }, Bucket { hash: HashValue::default(), key: 2, value: 'b' }, Bucket { hash: HashValue::default(), key: 3, value: 'c' }] });",
                "    let index = slice.partition_point(|&x| x < 0);",
                "    assert_eq!(index, 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "        Bucket { hash: HashValue::default(), key: 2, value: 'b' },",
                "        Bucket { hash: HashValue::default(), key: 3, value: 'c' },",
                "    ]});",
                "    ",
                "    let index = slice.partition_point(|&x| x < 4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index, 3);"
              ],
              "code": [
                "{",
                "   let slice = Box::new(Slice { entries: [  ",
                "       Bucket { hash: HashValue::default(), key: 1, value: () },  ",
                "       Bucket { hash: HashValue::default(), key: 2, value: () },  ",
                "       Bucket { hash: HashValue::default(), key: 3, value: () },  ",
                "   ]});  ",
                "    ",
                "    let index = slice.partition_point(|&x| x < 4);",
                "    assert_eq!(index, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "        Bucket { hash: HashValue::default(), key: 3, value: 'b' },",
                "        Bucket { hash: HashValue::default(), key: 5, value: 'c' },",
                "    ]});",
                "    ",
                "    let index = slice.partition_point(|&x| x < 4);",
                "}"
              ],
              "oracle": [
                "    let slice = Box::new(Slice { entries: [",
                "    Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "    Bucket { hash: HashValue::default(), key: 3, value: 'b' },",
                "    Bucket { hash: HashValue::default(), key: 5, value: 'c' },",
                "    ]});",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some(&1));",
                "    assert_eq!(slice.get_index(1), Some(&3));",
                "    assert_eq!(slice.get_index(2), Some(&5));",
                "    assert!(slice.get_index(3).is_none());",
                "    assert_eq!(slice.first(), Some(&1));",
                "    assert_eq!(slice.last(), Some(&5));",
                "    assert_eq!(slice.partition_point(|&x| x < 4), 2);"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "        Bucket { hash: HashValue::default(), key: 3, value: 'b' },",
                "        Bucket { hash: HashValue::default(), key: 5, value: 'c' },",
                "    ]});",
                "    ",
                "    let index = slice.partition_point(|&x| x < 4);",
                "    let slice = Box::new(Slice { entries: [",
                "    Bucket { hash: HashValue::default(), key: 1, value: 'a' },",
                "    Bucket { hash: HashValue::default(), key: 3, value: 'b' },",
                "    Bucket { hash: HashValue::default(), key: 5, value: 'c' },",
                "    ]});",
                "    assert_eq!(slice.len(), 3);",
                "    assert!(!slice.is_empty());",
                "    assert_eq!(slice.get_index(0), Some(&1));",
                "    assert_eq!(slice.get_index(1), Some(&3));",
                "    assert_eq!(slice.get_index(2), Some(&5));",
                "    assert!(slice.get_index(3).is_none());",
                "    assert_eq!(slice.first(), Some(&1));",
                "    assert_eq!(slice.last(), Some(&5));",
                "    assert_eq!(slice.partition_point(|&x| x < 4), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [] });",
                "    ",
                "    let index = slice.partition_point(|&x| x < 0);",
                "}"
              ],
              "oracle": [
                "    let slice = Box::new(Slice { entries: [] });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 0);",
                "    let entries = vec![Bucket { hash: HashValue::default(), key: 1, value: 1 }];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 1);",
                "    let entries = vec![Bucket { hash: HashValue::default(), key: 0, value: 0 }];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 1), 0);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: 0, value: 0 },",
                "    Bucket { hash: HashValue::default(), key: 1, value: 1 },",
                "    Bucket { hash: HashValue::default(), key: 2, value: 2 }",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 2), 2);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: 1, value: 1 },",
                "    Bucket { hash: HashValue::default(), key: 3, value: 3 },",
                "    Bucket { hash: HashValue::default(), key: 5, value: 5 }",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 4), 2);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: -1, value: -1 },",
                "    Bucket { hash: HashValue::default(), key: 0, value: 0 },",
                "    Bucket { hash: HashValue::default(), key: 1, value: 1 }",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 1);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: -5, value: -5 },",
                "    Bucket { hash: HashValue::default(), key: -3, value: -3 },",
                "    Bucket { hash: HashValue::default(), key: -1, value: -1 }",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 3);"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [] });",
                "    ",
                "    let index = slice.partition_point(|&x| x < 0);",
                "    let slice = Box::new(Slice { entries: [] });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 0);",
                "    let entries = vec![Bucket { hash: HashValue::default(), key: 1, value: 1 }];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 1);",
                "    let entries = vec![Bucket { hash: HashValue::default(), key: 0, value: 0 }];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 1), 0);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: 0, value: 0 },",
                "    Bucket { hash: HashValue::default(), key: 1, value: 1 },",
                "    Bucket { hash: HashValue::default(), key: 2, value: 2 }",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 2), 2);",
                "    let entries = vec![",
                "    Bucket { hash: HashValue::default(), key: 1, value: 1 },",
                "   Bucket { hash: HashValue::default(), key: 3, value: () },  ",
                "   Bucket { hash: HashValue::default(), key: 5, value: () }  ",
                "    ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 4), 2);",
                "    let entries = vec![",
                " Bucket { hash: HashValue::default(), key: -1, value: () },  ",
                " Bucket { hash: HashValue::default(), key: 0, value: () },  ",
                "  Bucket { hash: HashValue::default(), key: 1, value: () }  ",
                "   ];",
                "   let slice = Box::new(Slice { entries });",
                "   assert_eq!(slice.partition_point(|&x| x < 0), 1);",
                "   let entries = vec![",
                "  Bucket { hash: HashValue::default(), key: -5, value: () },",
                "  Bucket { hash: HashValue::default(), key: -3, value: () },",
                "  Bucket { hash: HashValue::default(), key: -1, value: () },",
                "  ];",
                "    let slice = Box::new(Slice { entries });",
                "    assert_eq!(slice.partition_point(|&x| x < 0), 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}