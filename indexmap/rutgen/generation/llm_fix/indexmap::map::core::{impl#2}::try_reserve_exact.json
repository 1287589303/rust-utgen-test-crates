{
  "name": "indexmap::map::core::{impl#2}::try_reserve_exact",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:291:5:298:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.indices\n            .try_reserve(additional, get_hash(&self.entries))\n            .map_err(TryReserveError::from_hashbrown)? at line 292 is Err/None\n"
      ],
      "input_infer": "additional: 0 to MAX_ENTRIES_CAPACITY (inclusive), ensuring self.indices is pre-allocated to allow for at least 'additional' entries without exceeding isize::MAX for available capacity\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "    index_map.try_reserve_exact(0).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert!(index_map.indices.try_reserve(0, get_hash(&index_map.entries)).is_ok());",
                "    assert!(index_map.entries.try_reserve_exact(0).is_ok());",
                "    assert!(matches!(index_map.try_reserve_exact(100), Ok(_)));"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::new();",
                "    index_map.try_reserve_exact(0).unwrap();",
                "    assert_eq!(index_map.len(), 0);",
                "    assert_eq!(index_map.capacity(), 0);",
                "    assert!(index_map.indices.try_reserve(0, get_hash(&index_map.entries)).is_ok());",
                "    assert!(index_map.entries.try_reserve_exact(0).is_ok());",
                "    assert!(matches!(index_map.try_reserve_exact(100), Ok(_)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).unwrap();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.try_reserve_exact(0), Ok(()));",
                "    assert_eq!(index_map.try_reserve_exact(1), Ok(()));",
                "    assert_eq!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY), Ok(()));",
                "    assert!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).unwrap();",
                "    assert_eq!(index_map.try_reserve_exact(0), Ok(()));",
                "    assert_eq!(index_map.try_reserve_exact(1), Ok(()));",
                "    assert_eq!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY), Ok(()));",
                "    assert!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).unwrap_err();",
                "}"
              ],
              "oracle": [
                "    assert!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "    assert_eq!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1), Err(TryReserveError { kind: TryReserveErrorKind::CapacityOverflow }));",
                "    assert!(index_map.len() == 0);",
                "    assert!(index_map.capacity() == IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).unwrap_err();",
                "    assert!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1).is_err());",
                "    assert_eq!(index_map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY + 1), Err(TryReserveError { kind: TryReserveErrorKind::CapacityOverflow }));",
                "    assert!(index_map.len() == 0);",
                "    assert!(index_map.capacity() == IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.indices\n            .try_reserve(additional, get_hash(&self.entries))\n            .map_err(TryReserveError::from_hashbrown)? at line 292 is Ok/Some\n"
      ],
      "input_infer": "additional: 0 to (IndexMapCore::MAX_ENTRIES_CAPACITY - current_entries), where current_entries is the current length of self.entries\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.try_reserve_exact(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    let result = map.try_reserve_exact(10);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(map.capacity() >= 10);",
                "    let result = map.try_reserve_exact(usize::MAX);",
                "    assert!(result.is_err());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.try_reserve_exact(0);",
                "    assert_eq!(result, Ok(()));",
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), 0);",
                "    let result = map.try_reserve_exact(10);",
                "    assert_eq!(result, Ok(()));",
                "    assert!(map.capacity() >= 10);",
                "    let result = map.try_reserve_exact(usize::MAX);",
                "    assert!(result.is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(capacity);",
                "    let result = map.try_reserve_exact(capacity - map.len());",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_ok());",
                "    assert_eq!(map.capacity(), capacity);",
                "    assert_eq!(map.len(), 0);"
              ],
              "code": [
                "{",
                "    let capacity = IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY;",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(capacity);",
                "    let result = map.try_reserve_exact(capacity - map.len());",
                "    assert!(result.is_ok());",
                "    assert_eq!(map.capacity(), capacity);",
                "    assert_eq!(map.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.try_reserve_exact(10).unwrap(); // Reserving some capacity to ensure it works",
                "    let result = map.try_reserve_exact(5); // Test reserving additional capacity",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(()));",
                "    assert!(map.indices.len() >= 5);",
                "    assert!(map.entries.capacity() >= 15);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.try_reserve_exact(10).unwrap(); // Reserving some capacity to ensure it works",
                "    let result = map.try_reserve_exact(5); // Test reserving additional capacity",
                "    assert_eq!(result, Ok(()));",
                "    assert!(map.indices.len() >= 5);",
                "    assert!(map.entries.capacity() >= 15);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.try_reserve_exact(1).unwrap(); // Ensure the first case works",
                "    let result = map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - map.len() - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve_exact(0).is_ok());",
                "    assert!(map.try_reserve_exact(2).is_err());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(1);",
                "    map.try_reserve_exact(1).unwrap(); // Ensure the first case works",
                "    let result = map.try_reserve_exact(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - map.len() - 1);",
                "    assert_eq!(result.is_ok(), true);",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(map.try_reserve_exact(0).is_ok());",
                "    assert!(map.try_reserve_exact(2).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}