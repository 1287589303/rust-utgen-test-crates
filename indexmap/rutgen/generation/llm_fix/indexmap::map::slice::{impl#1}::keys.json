{
  "name": "indexmap::map::slice::{impl#1}::keys",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:191:5:193:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self.entries must be a valid non-null slice of Bucket<K, V> objects, can be empty or contain any number of elements, with K and V types being any valid Rust types satisfying the Bucket struct constraints; test cases should include empty slice, single element slice, and multi-element slices (including edge cases of maximum slice length if applicable).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let keys = slice.keys();",
                "}"
              ],
              "oracle": [
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.len(), 0);",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.next(), Some(&1));",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
                "    let keys = slice.keys();",
                "    let keys_vec: Vec<_> = keys.iter.collect();",
                "    assert_eq!(keys_vec, vec![1, 2]);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let keys = slice.keys();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.len(), 0);",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.next(), Some(&1));",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }, Bucket { hash: 0, key: 2, value: 20 }] });",
                "    let keys = slice.keys();",
                "    let keys_vec: Vec<_> = keys.iter.collect();",
                "    assert_eq!(keys_vec, vec![1, 2]);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let keys = slice.keys();",
                "}"
              ],
              "oracle": [
                "    keys().len() == 1",
                "    keys().next() == Some(&1)"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [Bucket { hash: 0, key: 1, value: 10 }] });",
                "    let keys = slice.keys();",
                "    keys().len() == 1",
                "    keys().next() == Some(&1)",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "        Bucket { hash: 0, key: 3, value: 30 },",
                "    ]});",
                "    let keys = slice.keys();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys.iter.len(), 3);",
                "    assert_eq!(keys.iter.next(), Some(&1));",
                "    assert_eq!(keys.iter.next(), Some(&2));",
                "    assert_eq!(keys.iter.next(), Some(&3));",
                "    assert_eq!(keys.iter.next(), None);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: 10 },",
                "        Bucket { hash: 0, key: 2, value: 20 },",
                "        Bucket { hash: 0, key: 3, value: 30 },",
                "    ]});",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.len(), 3);",
                "    assert_eq!(keys.iter.next(), Some(&1));",
                "    assert_eq!(keys.iter.next(), Some(&2));",
                "    assert_eq!(keys.iter.next(), Some(&3));",
                "    assert_eq!(keys.iter.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let entries = (0..1024).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect::<Vec<Bucket<i32, i32>>>();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: entries.try_into().unwrap() });",
                "    let keys = slice.keys();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(keys.iter.len(), 1024);",
                "    assert_eq!(keys.iter().next(), Some(&0));",
                "    assert_eq!(keys.iter().last(), Some(&1023));",
                "    assert_eq!(keys.iter().collect::<Vec<_>>(), (0..1024).collect::<Vec<_>>());",
                "    assert_eq!(slice.len(), 1024);",
                "    assert!(!slice.is_empty());"
              ],
              "code": [
                "{",
                "    let entries = (0..1024).map(|i| Bucket { hash: i as u64, key: i, value: i * 10 }).collect::<Vec<Bucket<i32, i32>>>();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: entries.try_into().unwrap() });",
                "    let keys = slice.keys();",
                "    assert_eq!(keys.iter.len(), 1024);",
                "    assert_eq!(keys.iter().next(), Some(&0));",
                "    assert_eq!(keys.iter().last(), Some(&1023));",
                "    assert_eq!(keys.iter().collect::<Vec<_>>(), (0..1024).collect::<Vec<_>>());",
                "    assert_eq!(slice.len(), 1024);",
                "    assert!(!slice.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}