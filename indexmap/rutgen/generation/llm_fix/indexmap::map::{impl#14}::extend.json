{
  "name": "indexmap::map::{impl#14}::extend",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1542:5:1558:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.is_empty() at line 1549 is true\n"
      ],
      "input_infer": "iterable must be an IntoIterator containing key-value pairs of (K, V) types with a size hint of at least 1, where K is a Hash + Eq + Copy type and V is a Copy type.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input = vec![(1, 10)];",
                "    map.extend(input);",
                "}"
              ],
              "oracle": [
                "    map.len() == 1",
                "    map.is_empty() == false",
                "    map.keys().collect::<Vec<_>>() == vec![1]",
                "    map.values().collect::<Vec<_>>() == vec![10]"
              ],
              "code": [
                "{",
                "   let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "   let input = vec![(1, 10)];",
                "   map.extend(input);",
                "   assert_eq!(map.len(), 1);",
                "   assert!(!map.is_empty());",
                "   assert_eq!(map.keys().collect::<Vec<_>>(), vec![1]);",
                "   assert_eq!(map.values().collect::<Vec<_>>(), vec![10]);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input = vec![(1, 10), (2, 20), (3, 30)];",
                "    map.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert!(map.len() == 3);",
                "    assert!(map.get(&1) == Some(&10));",
                "    assert!(map.get(&2) == Some(&20));",
                "    assert!(map.get(&3) == Some(&30));",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.capacity() >= 3);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input = vec![(1, 10), (2, 20), (3, 30)];",
                "    map.extend(input);",
                "    assert!(map.len() == 3);",
                "    assert!(map.get(&1) == Some(&10));",
                "    assert!(map.get(&2) == Some(&20));",
                "    assert!(map.get(&3) == Some(&30));",
                "    assert!(map.is_empty() == false);",
                "    assert!(map.capacity() >= 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input = vec![(1, 10), (1, 15), (2, 20)];",
                "    map.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(map.get(&1), Some(&15));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert!(map.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input = vec![(1, 10), (1, 15), (2, 20)];",
                "    map.extend(input);",
                "    assert_eq!(map.len(), 2);",
                "    assert_eq!(map.get(&1), Some(&15));",
                "    assert_eq!(map.get(&2), Some(&20));",
                "    assert!(map.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input: Vec<(i32, i32)> = vec![];",
                "    map.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.iter().count(), 0);",
                "    assert_eq!(map.keys().count(), 0);",
                "    assert_eq!(map.values().count(), 0);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input: Vec<(i32, i32)> = vec![];",
                "    map.extend(input);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.iter().count(), 0);",
                "    assert_eq!(map.keys().count(), 0);",
                "    assert_eq!(map.values().count(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input: Vec<(i32, i32)> = (1..1000).map(|i| (i, i * 10)).collect();",
                "    map.extend(input);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 999);",
                "    assert_eq!(map.capacity(), 500);",
                "    assert_eq!(map.get(&1), Some(&10));",
                "    assert_eq!(map.get(&500), Some(&5000));",
                "    assert_eq!(map.get(&999), Some(&9990));",
                "    assert!(map.keys().eq(1..1000));",
                "    assert!(map.values().eq((10..9900).step_by(10)));",
                "    assert!(map.is_empty() == false);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_hasher(RandomState::new());",
                "    let input: Vec<(i32, i32)> = (1..1000).map(|i| (i, i * 10)).collect();",
                "    map.extend(input);",
                "    assert_eq!(map.len(), 999);",
                "    assert_eq!(map.capacity(), 500);",
                "    assert_eq!(map.get(&1), Some(&10));",
                "    assert_eq!(map.get(&500), Some(&5000));",
                "    assert_eq!(map.get(&999), Some(&9990));",
                "   assert!(map.keys().map(|&k| k).eq(1..1000));",
                "   assert!(map.values().map(|&v| v).eq((10..9900).step_by(10)));",
                "   assert!(map.is_empty() == false);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.is_empty() at line 1549 is false\n"
      ],
      "input_infer": "iterable size hint should be in the range [1, 1000] with K and V being valid types for keys and values, respectively, and may include duplicate keys to test value updates.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100)]);",
                "}"
              ],
              "oracle": [
                "    map.len() == 1;",
                "    map.keys().collect::<Vec<_>>() == vec![&1];",
                "    map.values().collect::<Vec<_>>() == vec![&100];",
                "    map.capacity() >= 10;",
                "    map.is_empty() == false;"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100)]);",
                "    map.len() == 1;",
                "    map.keys().collect::<Vec<_>>() == vec![&1];",
                "    map.values().collect::<Vec<_>>() == vec![&100];",
                "    map.capacity() >= 10;",
                "    map.is_empty() == false;",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100), (2, 200), (3, 300)]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.capacity(), 10);",
                "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&1, &2, &3]);",
                "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&100, &200, &300]);",
                "    assert_eq!(map.iter().count(), 3);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100), (2, 200), (3, 300)]);",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get(&1), Some(&100));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.capacity(), 10);",
                "    assert_eq!(map.keys().collect::<Vec<_>>(), vec![&1, &2, &3]);",
                "    assert_eq!(map.values().collect::<Vec<_>>(), vec![&100, &200, &300]);",
                "    assert_eq!(map.iter().count(), 3);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100), (2, 200), (1, 150), (3, 300)]);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get(&1), Some(&150));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&4));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    map.extend(vec![(1, 100), (2, 200), (1, 150), (3, 300)]);",
                "    assert_eq!(map.len(), 3);",
                "    assert_eq!(map.get(&1), Some(&150));",
                "    assert_eq!(map.get(&2), Some(&200));",
                "    assert_eq!(map.get(&3), Some(&300));",
                "    assert!(map.contains_key(&1));",
                "    assert!(map.contains_key(&2));",
                "    assert!(map.contains_key(&3));",
                "    assert!(!map.contains_key(&4));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    let items: Vec<(i32, i32)> = (1..=1000).map(|i| (i, i * 10)).collect();",
                "    map.extend(items);",
                "}"
              ],
              "oracle": [
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.len(), 1000);",
                "    assert_eq!(map.get(&1), Some(&10));",
                "    assert_eq!(map.get(&500), Some(&5000));",
                "    assert_eq!(map.get(&1000), Some(&10000));",
                "    assert_eq!(map.keys().count(), 1000);",
                "    assert_eq!(map.values().count(), 1000);",
                "    // Ensure values are in the expected order",
                "    assert_eq!(map.values().collect::<Vec<_>>(), (1..=1000).map(|i| i * 10).collect::<Vec<_>>());",
                "    assert_eq!(map.iter().count(), 1000);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::with_capacity_and_hasher(10, RandomState::new());",
                "    let items: Vec<(i32, i32)> = (1..=1000).map(|i| (i, i * 10)).collect();",
                "    map.extend(items);",
                "    assert!(!map.is_empty());",
                "    assert_eq!(map.len(), 1000);",
                "    assert_eq!(map.get(&1), Some(&10));",
                "    assert_eq!(map.get(&500), Some(&5000));",
                "    assert_eq!(map.get(&1000), Some(&10000));",
                "    assert_eq!(map.keys().count(), 1000);",
                "    assert_eq!(map.values().count(), 1000);",
                "    // Ensure values are in the expected order",
                "    assert_eq!(map.values().collect::<Vec<_>>(), (1..=1000).map(|i| i * 10).collect::<Vec<_>>());",
                "    assert_eq!(map.iter().count(), 1000);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}