{
  "name": "indexmap::map::core::{impl#3}::swap_remove_index",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": false,
  "loc": "src/map/core.rs:613:5:621:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self.entries.get(index) matches Some(entry) at line 614 is true\n",
        "precondition: self.entries.get(index) matches Some(entry) at line 614 is true\n",
        "expected return value/type: Some(self.swap_remove_finish(index))\n"
      ],
      "input_infer": "self.entries must contain at least one entry, index must be a valid index within the range 0 to self.entries.len() - 1, and hash value must be valid for the entry at that index\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "        Bucket { hash: HashValue(2), key: 1, value: 20 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "}"
              ],
              "oracle": [
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result.is_some(), true);",
                "    let (key, value) = result.unwrap();",
                "    assert_eq!(key, entries[1].key);",
                "    assert_eq!(value, entries[1].value);",
                "    assert_eq!(entries.len(), 1);",
                "    assert_eq!(entries[0].key, 1);",
                "    assert_eq!(entries[0].value, 20);"
              ],
              "code": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "        Bucket { hash: HashValue(2), key: 1, value: 20 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result.is_some(), true);",
                "    let (key, value) = result.unwrap();",
                "    assert_eq!(key, entries[1].key);",
                "    assert_eq!(value, entries[1].value);",
                "    assert_eq!(entries.len(), 1);",
                "    assert_eq!(entries[0].key, 1);",
                "    assert_eq!(entries[0].value, 20);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "}"
              ],
              "oracle": [
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "    Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result, Some((0, 10)));",
                "    assert_eq!(entries.len(), 0);",
                "    assert!(indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "    Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = 0;",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result, Some((0, 10)));",
                "    assert_eq!(entries.len(), 0);",
                "    assert!(indices.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "        Bucket { hash: HashValue(2), key: 1, value: 20 },",
                "        Bucket { hash: HashValue(3), key: 2, value: 30 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 1;",
                "    let result = ref_mut.swap_remove_index(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((1, 20)));",
                "    assert_eq!(entries.len(), 2);",
                "    assert_eq!(entries[1].key, 2);",
                "    assert_eq!(entries[1].value, 30);",
                "    assert_eq!(indices.len(), expected_length);",
                "    assert_eq!(indices.find_entry(HashValue(2).get(), move |&i| i == 1), None);",
                "    assert_eq!(indices.find_entry(HashValue(1).get(), move |&i| i == 0).is_ok(), true);",
                "    assert_eq!(indices.find_entry(HashValue(3).get(), move |&i| i == 1).is_ok(), true);"
              ],
              "code": [
                "{",
                "    let mut indices: Indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = vec![",
                "        Bucket { hash: HashValue(1), key: 0, value: 10 },",
                "        Bucket { hash: HashValue(2), key: 1, value: 20 },",
                "        Bucket { hash: HashValue(3), key: 2, value: 30 },",
                "    ];",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "",
                "    let index = 1;",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result, Some((1, 20)));",
                "    assert_eq!(entries.len(), 2);",
                "    assert_eq!(entries[1].key, 2);",
                "    assert_eq!(entries[1].value, 30);",
                "    assert_eq!(indices.len(), expected_length);",
                "    assert_eq!(indices.find_entry(HashValue(2).get(), move |&i| i == 1), None);",
                "    assert_eq!(indices.find_entry(HashValue(1).get(), move |&i| i == 0).is_ok(), true);",
                "    assert_eq!(indices.find_entry(HashValue(3).get(), move |&i| i == 1).is_ok(), true);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self.entries.get(index) matches None at line 614 is true\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "index: usize < 0 or index >= self.entries.len()\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = usize::MAX; // Out of bounds",
                "    let result = ref_mut.swap_remove_index(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = usize::MAX; // Out of bounds",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = entries.len(); // Index equals length of entries, which is out of bounds",
                "    let result = ref_mut.swap_remove_index(index);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let mut indices = hash_table::HashTable::new();",
                "    let mut entries: Vec<Bucket<usize, usize>> = Vec::new();",
                "    let mut ref_mut = RefMut::new(&mut indices, &mut entries);",
                "    let index = entries.len(); // Index equals length of entries, which is out of bounds",
                "    let result = ref_mut.swap_remove_index(index);",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}