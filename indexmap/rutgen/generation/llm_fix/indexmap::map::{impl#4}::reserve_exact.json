{
  "name": "indexmap::map::{impl#4}::reserve_exact",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:343:5:345:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "additional: 0 to MAX_ENTRIES_CAPACITY, where MAX_ENTRIES_CAPACITY is defined as (isize::MAX as usize) / mem::size_of::<Bucket<K, V>>.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    map.reserve_exact(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(0, RandomState::new());",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), 0);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    map.reserve_exact(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), 2);",
                "    assert_eq!(map.len(), 0);",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), 2);",
                "    map.reserve_exact(5);",
                "    assert_eq!(map.capacity(), 6);",
                "    map.reserve_exact(100);",
                "    assert!(map.capacity() >= 100);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(1, RandomState::new());",
                "    map.reserve_exact(1);",
                "    assert_eq!(map.capacity(), 2);",
                "    assert_eq!(map.len(), 0);",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.capacity(), 2);",
                "    map.reserve_exact(5);",
                "    assert_eq!(map.capacity(), 6);",
                "    map.reserve_exact(100);",
                "    assert!(map.capacity() >= 100);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let max_capacity = IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY;",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
                "    map.reserve_exact(max_capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.capacity(), max_capacity);",
                "    assert_eq!(map.len(), 0);",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "   let max_capacity = (isize::MAX as usize) / std::mem::size_of::<Bucket<u32, u32>>();",
                "   let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(max_capacity, RandomState::new());",
                "   map.reserve_exact(max_capacity);",
                "   assert_eq!(map.capacity(), max_capacity);",
                "   assert_eq!(map.len(), 0);",
                "   assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mid_capacity = IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY / 2;",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(mid_capacity, RandomState::new());",
                "    map.reserve_exact(mid_capacity);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), 0);",
                "    assert_eq!(map.capacity(), mid_capacity);",
                "    map.reserve_exact(10);",
                "    assert!(map.capacity() >= mid_capacity + 10);",
                "    map.reserve_exact(0);",
                "    assert_eq!(map.len(), 0);",
                "    map.reserve_exact(mid_capacity);",
                "    assert!(map.capacity() >= mid_capacity);"
              ],
              "code": [
                "{",
                "   let mid_capacity = (isize::MAX as usize) / mem::size_of::<Bucket<u32, u32>>() / 2;",
                "   let mut map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity_and_hasher(mid_capacity, RandomState::new());",
                "   map.reserve_exact(mid_capacity);",
                "   assert_eq!(map.len(), 0);",
                "   assert_eq!(map.capacity(), mid_capacity);",
                "   map.reserve_exact(10);",
                "   assert!(map.capacity() >= mid_capacity + 10);",
                "   map.reserve_exact(0);",
                "   assert_eq!(map.len(), 0);",
                "   map.reserve_exact(mid_capacity);",
                "   assert!(map.capacity() >= mid_capacity);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}