{
  "name": "indexmap::map::{impl#7}::move_index",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1301:5:1303:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "from: 0 to: MAX_ENTRIES_CAPACITY-1 (0 to 2^30 - 1 for sizes up to 2^31-1) and from â‰¤ to (valid range is from < to; from = to; to < from; boundary cases as 0, 1, MAX_ENTRIES_CAPACITY-1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    index_map.move_index(1, 3);",
                "    assert_eq!(index_map.get_index(3), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    index_map.move_index(3, 0);",
                "    assert_eq!(index_map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(1), Some((&0, &0)));",
                "    index_map.move_index(4, 0);",
                "    assert!(index_map.get_index(0).is_some());",
                "    assert_eq!(index_map.len(), 5);",
                "    index_map.move_index(3, 4);",
                "    assert!(index_map.get_index(4).is_some());",
                "    index_map.move_index(0, 4);",
                "    assert!(index_map.get_index(0).is_some());",
                "    assert!(index_map.get_index(4).is_some());",
                "    index_map.move_index(5, 1); // should panic due to index out of bounds",
                "    index_map.move_index(0, 5); // should panic due to index out of bounds"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 2);",
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    index_map.move_index(1, 3);",
                "    assert_eq!(index_map.get_index(3), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    index_map.move_index(3, 0);",
                "    assert_eq!(index_map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(1), Some((&0, &0)));",
                "    index_map.move_index(4, 0);",
                "    assert!(index_map.get_index(0).is_some());",
                "    assert_eq!(index_map.len(), 5);",
                "    index_map.move_index(3, 4);",
                "    assert!(index_map.get_index(4).is_some());",
                "    index_map.move_index(0, 4);",
                "    assert!(index_map.get_index(0).is_some());",
                "    assert!(index_map.get_index(4).is_some());",
                "    index_map.move_index(5, 1); // should panic due to index out of bounds",
                "    index_map.move_index(0, 5); // should panic due to index out of bounds",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 4);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.get_index(4), Some((&2, &20)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(2), Some((&4, &40)));",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(index_map.get_index(5).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(5, 4)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(2, 5)).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 4);",
                "    assert_eq!(index_map.get_index(4), Some((&2, &20)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(2), Some((&4, &40)));",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(index_map.get_index(5).is_none());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(5, 4)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(2, 5)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(4, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.get_index(2), Some((&4, &40)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(4), Some((&2, &20)));",
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(index_map.get_index(5).is_none());",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(4, 2);",
                "    assert_eq!(index_map.get_index(2), Some((&4, &40)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(4), Some((&2, &20)));",
                "    assert_eq!(index_map.len(), 5);",
                "    assert!(index_map.get_index(5).is_none());",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(5, 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), 5);",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(4), Some((&4, &40)));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(5, 2);",
                "    assert_eq!(index_map.len(), 5);",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.get_index(2), Some((&2, &20)));",
                "    assert_eq!(index_map.get_index(3), Some((&3, &30)));",
                "    assert_eq!(index_map.get_index(4), Some((&4, &40)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 5);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "    index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 5);",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 5);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    for i in 0..5 {",
                "    index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(2, 5);",
                "    }).is_err());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    index_map.insert(0, 0);",
                "    index_map.insert(1, 10);",
                "    index_map.move_index(0, 0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.first(), Some((&0, &0)));",
                "    assert_eq!(index_map.last(), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(0, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(3, 1)).is_err());",
                "    index_map.move_index(1, 0);",
                "    assert_eq!(index_map.first(), Some((&1, &10)));",
                "    assert_eq!(index_map.last(), Some((&0, &0)));",
                "    assert_eq!(index_map.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    index_map.insert(0, 0);",
                "    index_map.insert(1, 10);",
                "    index_map.move_index(0, 0);",
                "    assert_eq!(index_map.first(), Some((&0, &0)));",
                "    assert_eq!(index_map.last(), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(0, 2)).is_err());",
                "    assert!(std::panic::catch_unwind(|| index_map.move_index(3, 1)).is_err());",
                "    index_map.move_index(1, 0);",
                "    assert_eq!(index_map.first(), Some((&1, &10)));",
                "    assert_eq!(index_map.last(), Some((&0, &0)));",
                "    assert_eq!(index_map.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1, IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);",
                "    let last_entry = index_map.get_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1).unwrap();",
                "    assert_eq!(last_entry.0, &(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1));",
                "    assert_eq!(last_entry.1, &(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1) * 10);",
                "    index_map.move_index(0, 0);",
                "    let first_entry = index_map.get_index(0).unwrap();",
                "    assert_eq!(first_entry.0, &0);",
                "    assert_eq!(first_entry.1, &0);",
                "    index_map.move_index(1, 0);",
                "    let new_first_entry = index_map.get_index(0).unwrap();",
                "    assert_eq!(new_first_entry.0, &1);",
                "    assert_eq!(new_first_entry.1, &10);",
                "    assert!(std::panic::catch_unwind(|| { index_map.move_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, 0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { index_map.move_index(0, IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY); }).is_err());"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::with_capacity(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY {",
                "        index_map.insert(i, i * 10);",
                "    }",
                "    index_map.move_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1, IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1);",
                "    assert_eq!(index_map.len(), IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY);",
                "    let last_entry = index_map.get_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1).unwrap();",
                "    assert_eq!(last_entry.0, &(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1));",
                "    assert_eq!(last_entry.1, &(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY - 1) * 10);",
                "    index_map.move_index(0, 0);",
                "    let first_entry = index_map.get_index(0).unwrap();",
                "    assert_eq!(first_entry.0, &0);",
                "    assert_eq!(first_entry.1, &0);",
                "    index_map.move_index(1, 0);",
                "    let new_first_entry = index_map.get_index(0).unwrap();",
                "    assert_eq!(new_first_entry.0, &1);",
                "    assert_eq!(new_first_entry.1, &10);",
                "    assert!(std::panic::catch_unwind(|| { index_map.move_index(IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY, 0); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { index_map.move_index(0, IndexMapCore::<u32, u32>::MAX_ENTRIES_CAPACITY); }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    index_map.insert(0, 0);",
                "    index_map.insert(1, 10);",
                "    index_map.move_index(1, 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.first(), Some((&0, &0)));",
                "    assert_eq!(index_map.last(), Some((&1, &10)));"
              ],
              "code": [
                "{",
                "    let mut index_map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    index_map.insert(0, 0);",
                "    index_map.insert(1, 10);",
                "    index_map.move_index(1, 1);",
                "    assert_eq!(index_map.get_index(0), Some((&0, &0)));",
                "    assert_eq!(index_map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(index_map.len(), 2);",
                "    assert_eq!(index_map.first(), Some((&0, &0)));",
                "    assert_eq!(index_map.last(), Some((&1, &10)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}