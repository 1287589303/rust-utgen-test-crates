{
  "name": "indexmap::map::{impl#7}::sort_unstable_by",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1043:5:1050:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The input must include a mutable reference to an IndexMap with at least one entry, a valid comparator function of type F that takes two key-value pairs and returns an Ordering, and the keys must implement the Ord trait for the sorting to be applicable.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "}"
              ],
              "oracle": [
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(2, 20);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(0, 5);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.get_index(0), Some((&0, &5)));",
                "    assert_eq!(map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(map.get_index(2), Some((&2, &20)));",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    Ordering::Greater",
                "    });",
                "    assert_eq!(map.get_index(0), Some((&2, &20)));",
                "    assert_eq!(map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(map.get_index(2), Some((&0, &5)));"
              ],
              "code": [
                "{",
                "   let mut map: crate::IndexMap<i32, i32, std::hash::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "   let mut map: crate::IndexMap<i32, i32, std::hash::RandomState> = crate::IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(2, 20);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(0, 5);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.get_index(0), Some((&0, &5)));",
                "    assert_eq!(map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(map.get_index(2), Some((&2, &20)));",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    Ordering::Greater",
                "    });",
                "    assert_eq!(map.get_index(0), Some((&2, &20)));",
                "    assert_eq!(map.get_index(1), Some((&1, &10)));",
                "    assert_eq!(map.get_index(2), Some((&0, &5)));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "}"
              ],
              "oracle": [
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal });",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &30)));"
              ],
              "code": [
                "{",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(3, 30);",
                "   map.insert(1, 10);",
                "   map.insert(2, 20);",
                "   ",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "       if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "   });",
                "   ",
                "   // Function call complete, no assertion.",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal });",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &30)));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    map.insert(3, 20);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "}"
              ],
              "oracle": [
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    map.insert(3, 20);",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &20)));"
              ],
              "code": [
                "{",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    map.insert(3, 20);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    map.insert(3, 20);",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &20)));",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if k1 > k2 { Ordering::Less } else if k1 < k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "}"
              ],
              "oracle": [
                "    let map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    assert_eq!(map.first(), None);",
                "    map.insert(3, 30);",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 > k2 { Ordering::Less } else if k1 < k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&3, &30)));"
              ],
              "code": [
                "{",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(3, 30);",
                "   map.insert(2, 20);",
                "   map.insert(1, 10);",
                "   ",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "       if k1 > k2 { Ordering::Less } else if k1 < k2 { Ordering::Greater } else { Ordering::Equal }",
                "   });",
                "   ",
                "   // Function call complete, no assertion.",
                "   let map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "    assert_eq!(map.first(), None);",
                "    map.insert(3, 30);",
                "    map.insert(2, 20);",
                "    map.insert(1, 10);",
                "    assert_eq!(map.last(), Some((&1, &10)));",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 > k2 { Ordering::Less } else if k1 < k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&3, &30)));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    ",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "        if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    ",
                "    // Function call complete, no assertion.",
                "}"
              ],
              "oracle": [
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(2, 3);",
                "    map.insert(1, 4);",
                "    map.insert(3, 2);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &4)));",
                "    assert_eq!(map.last(), Some((&3, &2)));",
                "    ",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(2, 3);",
                "    map.insert(3, 1);",
                "    map.insert(1, 5);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    Ordering::Greater",
                "    });",
                "    assert_eq!(map.first(), Some((&3, &1)));",
                "    assert_eq!(map.last(), Some((&1, &5)));",
                "    ",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(5, 5);",
                "    map.insert(5, 6);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    Ordering::Equal",
                "    });",
                "    assert_eq!(map.get_index(0), Some((&5, &5)));",
                "    assert_eq!(map.get_index(1), Some((&5, &6)));",
                "    ",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.insert(4, 8);",
                "    map.insert(2, 7);",
                "    map.insert(1, 1);",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "    });",
                "    assert_eq!(map.first(), Some((&1, &1)));",
                "    assert_eq!(map.last(), Some((&4, &8)));",
                "    ",
                "    let mut map: crate::IndexMap<i32, i32, crate::RandomState> = crate::IndexMap::new();",
                "    map.sort_unstable_by(|k1, v1, k2, v2| {",
                "    Ordering::Less",
                "    });",
                "    assert!(map.is_empty());"
              ],
              "code": [
                "{",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   ",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "       if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "   });",
                "   ",
                "   // Function call complete, no assertion.",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(2, 3);",
                "   map.insert(1, 4);",
                "   map.insert(3, 2);",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "   if k1 < k2 { Ordering::Less } else if k1 > k2 { Ordering::Greater } else { Ordering::Equal }",
                "   });",
                "   assert_eq!(map.first(), Some((&1, &4)));",
                "   assert_eq!(map.last(), Some((&3, &2)));",
                "   ",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(2, 3);",
                "   map.insert(3, 1);",
                "   map.insert(1, 5);",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "   Ordering::Greater",
                "   });",
                "   assert_eq!(map.first(), Some((&3, &1)));",
                "   assert_eq!(map.last(), Some((&1, &5)));",
                "   ",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(5, 5);",
                "   map.insert(5, 6);",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "   Ordering::Equal",
                "   });",
                "   assert_eq!(map.get_index(0), Some((&5, &5)));",
                "   assert_eq!(map.get_index(1), Some((&5, &6)));",
                "   ",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.insert(4, 8);",
                "   map.insert(2, 7);",
                "   map.insert(1, 1);",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "   if v1 < v2 { Ordering::Less } else if v1 > v2 { Ordering::Greater } else { Ordering::Equal }",
                "   });",
                "   assert_eq!(map.first(), Some((&1, &1)));",
                "   assert_eq!(map.last(), Some((&4, &8)));",
                "   ",
                "   let mut map: crate::IndexMap<i32, i32, RandomState> = crate::IndexMap::new();",
                "   map.sort_unstable_by(|k1, v1, k2, v2| {",
                "   Ordering::Less",
                "   });",
                "   assert!(map.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}