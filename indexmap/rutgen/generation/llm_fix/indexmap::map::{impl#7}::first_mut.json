{
  "name": "indexmap::map::{impl#7}::first_mut",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1232:5:1234:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "self must contain at least one entry to return Some(&K, &mut V), and if empty, it should return None. Test with varying numbers of entries including 0, 1, and more than 1; check with different key and value types for K and V, including edge cases like empty keys or values.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: Vec::new() };",
                "    let result = map.first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, None);",
                "    ",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 10)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 10)));",
                "    ",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 10), (2, 20)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 10)));",
                "    *result.unwrap().1 += 5;",
                "    assert_eq!(map.entries[0].1, 15);",
                "    ",
                "    let mut map: TestMap<&str, i32> = TestMap { entries: vec![(\"key1\", 10)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&\"key1\", &mut 10)));"
              ],
              "code": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: Vec::new() };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, None);",
                "    ",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 10)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 10)));",
                "    ",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 10), (2, 20)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 10)));",
                "    *result.unwrap().1 += 5;",
                "    assert_eq!(map.entries[0].1, 15);",
                "    ",
                "    let mut map: TestMap<&str, i32> = TestMap { entries: vec![(\"key1\", 10)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&\"key1\", &mut 10)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 2)] };",
                "    let result = map.first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&1, &mut 2)));",
                "    assert_eq!(map.entries.len(), 1);",
                "    let (_, value_mut) = result.unwrap();",
                "    *value_mut += 1;",
                "    assert_eq!(map.entries[0].1, 3);"
              ],
              "code": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 2)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 2)));",
                "    assert_eq!(map.entries.len(), 1);",
                "    let (_, value_mut) = result.unwrap();",
                "    *value_mut += 1;",
                "    assert_eq!(map.entries[0].1, 3);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 2), (2, 3), (3, 4)] };",
                "    let result = map.first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&1, &mut 2)));",
                "    result.unwrap().1 += 1;",
                "    assert_eq!(map.entries[0].1, 3);",
                "    let mut empty_map: TestMap<i32, i32> = TestMap { entries: vec![] };",
                "    let empty_result = empty_map.first_mut();",
                "    assert_eq!(empty_result, None);"
              ],
              "code": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, i32> = TestMap { entries: vec![(1, 2), (2, 3), (3, 4)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut 2)));",
                "    result.unwrap().1 += 1;",
                "    assert_eq!(map.entries[0].1, 3);",
                "    let mut empty_map: TestMap<i32, i32> = TestMap { entries: vec![] };",
                "    let empty_result = empty_map.first_mut();",
                "    assert_eq!(empty_result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<String, i32> = TestMap { entries: vec![(\"\".to_string(), 2)] };",
                "    let result = map.first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&\"\".to_string(), &mut 2)));"
              ],
              "code": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<String, i32> = TestMap { entries: vec![(\"\".to_string(), 2)] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&\"\".to_string(), &mut 2)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, String> = TestMap { entries: vec![(1, \"\".to_string())] };",
                "    let result = map.first_mut();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Some((&1, &mut \"\".to_string())));",
                "    let mut map_empty: TestMap<i32, String> = TestMap { entries: vec![] };",
                "    let result_empty = map_empty.first_mut();",
                "    assert_eq!(result_empty, None);",
                "    map.entries.push((2, \"second\".to_string()));",
                "    let result_after_push = map.first_mut();",
                "    assert_eq!(result_after_push, Some((&1, &mut \"\".to_string())));",
                "    let result_mutated = map.first_mut().map(|(_, v)| *v = \"updated\".to_string());",
                "    assert_eq!(map.entries[0].1, \"updated\");"
              ],
              "code": [
                "{",
                "    struct TestMap<K, V> {",
                "        entries: Vec<(K, V)>,",
                "    }",
                "    ",
                "    impl<K, V> TestMap<K, V> {",
                "        pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {",
                "            self.entries.first_mut()",
                "        }",
                "    }",
                "",
                "    let mut map: TestMap<i32, String> = TestMap { entries: vec![(1, \"\".to_string())] };",
                "    let result = map.first_mut();",
                "    assert_eq!(result, Some((&1, &mut \"\".to_string())));",
                "    let mut map_empty: TestMap<i32, String> = TestMap { entries: vec![] };",
                "    let result_empty = map_empty.first_mut();",
                "    assert_eq!(result_empty, None);",
                "    map.entries.push((2, \"second\".to_string()));",
                "    let result_after_push = map.first_mut();",
                "    assert_eq!(result_after_push, Some((&1, &mut \"\".to_string())));",
                "    let result_mutated = map.first_mut().map(|(_, v)| *v = \"updated\".to_string());",
                "    assert_eq!(map.entries[0].1, \"updated\");",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}