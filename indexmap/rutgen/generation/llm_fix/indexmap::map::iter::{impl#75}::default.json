{
  "name": "indexmap::map::iter::{impl#75}::default",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:641:5:645:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            iter: Vec::new().into_iter(),\n        }\n"
      ],
      "input_infer": "Test input conditions or ranges: None (testing the default function does not require any input parameters, it should always return a default instance with an empty iterator).\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let default_values: IntoValues<(), ()> = IntoValues::default();",
                "    let empty_iter = default_values.iter;",
                "}"
              ],
              "oracle": [
                "    assert_eq!(default_values.iter.len(), 0);",
                "    assert!(default_values.iter.next().is_none());",
                "    assert!(default_values.iter.is_fused());",
                "    assert!(default_values.iter.is_empty());",
                "    assert_eq!(default_values.iter, Vec::new().into_iter());"
              ],
              "code": [
                "{",
                "    let default_values: IntoValues<(), ()> = IntoValues::default();",
                "    let empty_iter = default_values.iter;",
                "    assert_eq!(default_values.iter.len(), 0);",
                "    assert!(default_values.iter.next().is_none());",
                "    assert!(default_values.iter.is_fused());",
                "    assert!(default_values.iter.is_empty());",
                "    assert_eq!(default_values.iter, Vec::new().into_iter());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let default_values: IntoValues<i32, String> = IntoValues::default();",
                "    let empty_iter = default_values.iter;",
                "}"
              ],
              "oracle": [
                "    let default_values: IntoValues<i32, String> = IntoValues::default();",
                "    assert!(default_values.iter.len() == 0);",
                "    let empty_iter = default_values.iter;",
                "    assert!(empty_iter.eq(Vec::<Bucket<i32, String>>::new().into_iter()));",
                "    assert!(empty_iter.is_fused());"
              ],
              "code": [
                "   fn test_default_01()  ",
                "   {  ",
                "       let default_values: IntoValues<i32, String> = IntoValues::default();  ",
                "       let empty_iter = default_values.iter;  ",
                "       let default_values: IntoValues<i32, String> = IntoValues::default();  ",
                "       assert!(default_values.iter.len() == 0);  ",
                "       let empty_iter = default_values.iter;  ",
                "       assert!(empty_iter.eq(Vec::<Bucket<i32, String>>::new().into_iter()));  ",
                "       assert!(empty_iter.is_fused());  ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}