{
  "name": "indexmap::map::iter::{impl#76}::new",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": false,
  "loc": "src/map/iter.rs:671:5:682:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            map,\n            tail,\n            drain,\n            replace_with,\n        }\n"
      ],
      "input_infer": "test input conditions: mutable reference to an IndexMap<K, V, S>, range of type RangeBounds<usize> covering valid indices of the entries, and an iterator replace_with of type Iterator<Item = (K, V)> with values that can validly replace entries in the given range\n",
      "answers": [
        {
          "uses": [
            "use std::collections::hash_map::RandomState;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 0..2;",
                "    let replace_with = vec![(100, 100), (200, 200)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries.len(), 2);",
                "    assert_eq!(splice.tail.entries[0].key, 0);",
                "    assert_eq!(splice.tail.entries[0].value, 10);",
                "    assert_eq!(splice.tail.entries[1].key, 1);",
                "    assert_eq!(splice.tail.entries[1].value, 20);",
                "    assert_eq!(splice.drain.len(), 0);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 0..2;",
                "    let replace_with = vec![(100, 100), (200, 200)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries.len(), 2);",
                "    assert_eq!(splice.tail.entries[0].key, 0);",
                "    assert_eq!(splice.tail.entries[0].value, 10);",
                "    assert_eq!(splice.tail.entries[1].key, 1);",
                "    assert_eq!(splice.tail.entries[1].value, 20);",
                "    assert_eq!(splice.drain.len(), 0);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "",
                "    let range = 0..0;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    let range = 0..0;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &map);",
                "    assert_eq!(splice.tail.entries.len(), 0);",
                "    assert!(splice.drain.is_empty());",
                "    assert!(splice.replace_with.next().is_some());",
                "    assert_eq!(splice.replace_with.next(), None);"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "",
                "    let range = 0..0;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    let range = 0..0;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &map);",
                "    assert_eq!(splice.tail.entries.len(), 0);",
                "    assert!(splice.drain.is_empty());",
                "    assert!(splice.replace_with.next().is_some());",
                "    assert_eq!(splice.replace_with.next(), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 0..3;",
                "    let replace_with = vec![(100, 100), (200, 200), (300, 300)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "    ",
                "    let range = 0..3;",
                "    let replace_with = vec![(100, 100), (200, 200), (300, 300)].into_iter();",
                "    ",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &mut map);",
                "    assert!(splice.tail.entries.is_empty());",
                "    assert_eq!(splice.drain.len(), 3);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 0..3;",
                "    let replace_with = vec![(100, 100), (200, 200), (300, 300)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "    ",
                "    let range = 0..3;",
                "    let replace_with = vec![(100, 100), (200, 200), (300, 300)].into_iter();",
                "    ",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &mut map);",
                "    assert!(splice.tail.entries.is_empty());",
                "    assert_eq!(splice.drain.len(), 3);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    ",
                "    let range = 0..1;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    let range = 0..1;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries, vec![(0, 10)]);",
                "    assert_eq!(splice.drain.len(), 1);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    ",
                "    let range = 0..1;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    let range = 0..1;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries, vec![(0, 10)]);",
                "    assert_eq!(splice.drain.len(), 1);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "",
                "    let range = 2..4;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    let range = 2..4;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries, map.core.entries);",
                "    assert!(splice.drain.len() > 0);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "",
                "    let range = 2..4;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    let range = 2..4;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "    assert_eq!(splice.map, &mut map);",
                "    assert_eq!(splice.tail.entries, map.core.entries);",
                "    assert!(splice.drain.len() > 0);",
                "    assert_eq!(splice.replace_with.next(), Some((100, 100)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 1..2;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "}"
              ],
              "oracle": [
                "    let expected_map = &mut map;",
                "    let expected_tail = vec![(1, 20)].into_iter();",
                "    let expected_drain = vec![(0, 10), (2, 30)].into_iter();",
                "    let expected_replace_with = vec![(100, 100)].into_iter();",
                "    assert_eq!(splice.map, expected_map);",
                "    assert_eq!(splice.tail.entries, expected_tail.collect::<Vec<_>>());",
                "    assert_eq!(splice.drain.collect::<Vec<_>>(), expected_drain.collect::<Vec<_>>());",
                "    assert_eq!(splice.replace_with.collect::<Vec<_>>(), expected_replace_with.collect::<Vec<_>>());"
              ],
              "code": [
                "{",
                "    use std::collections::hash_map::RandomState;",
                "",
                "    let mut map: IndexMap<i32, i32, RandomState> = IndexMap::new();",
                "    map.insert(0, 10);",
                "    map.insert(1, 20);",
                "    map.insert(2, 30);",
                "",
                "    let range = 1..2;",
                "    let replace_with = vec![(100, 100)].into_iter();",
                "",
                "    let splice = Splice::new(&mut map, range, replace_with);",
                "    let expected_map = &mut map;",
                "    let expected_tail = vec![(1, 20)].into_iter();",
                "    let expected_drain = vec![(0, 10), (2, 30)].into_iter();",
                "    let expected_replace_with = vec![(100, 100)].into_iter();",
                "    assert_eq!(splice.map, expected_map);",
                "    assert_eq!(splice.tail.entries, expected_tail.collect::<Vec<_>>());",
                "    assert_eq!(splice.drain.collect::<Vec<_>>(), expected_drain.collect::<Vec<_>>());",
                "    assert_eq!(splice.replace_with.collect::<Vec<_>>(), expected_replace_with.collect::<Vec<_>>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}