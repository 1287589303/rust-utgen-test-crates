{
  "name": "indexmap::map::{impl#7}::sort_by",
  "mod_info": {
    "name": "map",
    "loc": "src/lib.rs:123:1:123:13"
  },
  "visible": true,
  "loc": "src/map.rs:1000:5:1007:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "For the `sort_by` function, the inferred test input conditions or ranges are:\n- A mutable reference to an `IndexMap<K, V, S>` containing at least one entry where `K` implements `Ord`, and valid comparison function `cmp` that takes two key-value pairs and returns an `Ordering`. Test also with empty map, single entry, and edge case with maximum `usize` entries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "}"
              ],
              "oracle": [
                "    assert!(map.first().is_none());",
                "    map.insert(3, 1);",
                "    map.insert(1, 2);",
                "    map.insert(2, 3);",
                "    map.sort_by(|k1, _, k2, _| k1.cmp(k2));",
                "    assert_eq!(map.get_index(0), Some((&1, &2)));",
                "    assert_eq!(map.get_index(1), Some((&2, &3)));",
                "    assert_eq!(map.get_index(2), Some((&3, &1)));",
                "    map.sort_by(|k1, v1, k2, v2| v1.cmp(v2));",
                "    assert_eq!(map.get_index(0), Some((&3, &1)));",
                "    assert_eq!(map.get_index(1), Some((&2, &3)));",
                "    assert_eq!(map.get_index(2), Some((&1, &2)));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert!(map.first().is_none());",
                "    map.insert(3, 1);",
                "    map.insert(1, 2);",
                "    map.insert(2, 3);",
                "    map.sort_by(|k1, _, k2, _| k1.cmp(k2));",
                "    assert_eq!(map.get_index(0), Some((&1, &2)));",
                "    assert_eq!(map.get_index(1), Some((&2, &3)));",
                "    assert_eq!(map.get_index(2), Some((&3, &1)));",
                "    map.sort_by(|k1, v1, k2, v2| v1.cmp(v2));",
                "    assert_eq!(map.get_index(0), Some((&3, &1)));",
                "    assert_eq!(map.get_index(1), Some((&2, &3)));",
                "    assert_eq!(map.get_index(2), Some((&1, &2)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(2, 20);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    map.insert(0, 5);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&0, &5)));",
                "    let expected_order = vec![(&0, &5), (&1, &10), (&2, &20)];",
                "    let result: Vec<_> = map.as_slice().iter().collect();",
                "    assert_eq!(result, expected_order);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.insert(1, 10);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    map.insert(2, 20);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.last(), Some((&2, &20)));",
                "    map.insert(0, 5);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&0, &5)));",
                "    let expected_order = vec![(&0, &5), (&1, &10), (&2, &20)];",
                "    let result: Vec<_> = map.as_slice().iter().collect();",
                "    assert_eq!(result, expected_order);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&3, &30)));",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &30)));",
                "    assert!(map.binary_search_keys(&2).is_ok());",
                "    assert_eq!(map.partition_point(|k, _| *k < 2), 1);"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<u32, u32, RandomState> = IndexMap::new();",
                "    map.insert(3, 30);",
                "    map.insert(1, 10);",
                "    map.insert(2, 20);",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&1, &10)));",
                "    assert_eq!(map.last(), Some((&3, &30)));",
                "    assert_eq!(map.get_index(0), Some((&1, &10)));",
                "    assert_eq!(map.get_index(1), Some((&2, &20)));",
                "    assert_eq!(map.get_index(2), Some((&3, &30)));",
                "    assert!(map.binary_search_keys(&2).is_ok());",
                "    assert_eq!(map.partition_point(|k, _| *k < 2), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<&str, u32, RandomState> = IndexMap::new();",
                "    map.insert(\"apple\", 3);",
                "    map.insert(\"orange\", 1);",
                "    map.insert(\"banana\", 2);",
                "    map.sort_by(|k1, v1, k2, v2| v1.cmp(v2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some((&\"orange\", &1)));",
                "    assert_eq!(map.last(), Some((&\"apple\", &3)));",
                "    assert_eq!(map.get_index(0), Some((&\"orange\", &1)));",
                "    assert_eq!(map.get_index(1), Some((&\"banana\", &2)));",
                "    assert_eq!(map.get_index(2), Some((&\"apple\", &3)));",
                "    assert_eq!(map.get_index(3), None);",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.as_slice().iter().all(|(k, v)| {",
                "    match k {",
                "    &\"orange\" => *v == 1,",
                "    &\"banana\" => *v == 2,",
                "    &\"apple\" => *v == 3,",
                "    _ => false",
                "    }",
                "    }));",
                "    map.sort_by(|k1, _, k2, _| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&\"apple\", &3)));",
                "    assert_eq!(map.last(), Some((&\"orange\", &1)));"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<&str, u32, RandomState> = IndexMap::new();",
                "    map.insert(\"apple\", 3);",
                "    map.insert(\"orange\", 1);",
                "    map.insert(\"banana\", 2);",
                "    map.sort_by(|k1, v1, k2, v2| v1.cmp(v2));",
                "    assert_eq!(map.first(), Some((&\"orange\", &1)));",
                "    assert_eq!(map.last(), Some((&\"apple\", &3)));",
                "    assert_eq!(map.get_index(0), Some((&\"orange\", &1)));",
                "    assert_eq!(map.get_index(1), Some((&\"banana\", &2)));",
                "    assert_eq!(map.get_index(2), Some((&\"apple\", &3)));",
                "    assert_eq!(map.get_index(3), None);",
                "    assert_eq!(map.len(), 3);",
                "    assert!(map.as_slice().iter().all(|(k, v)| {",
                "    match k {",
                "    &\"orange\" => *v == 1,",
                "    &\"banana\" => *v == 2,",
                "    &\"apple\" => *v == 3,",
                "    _ => false",
                "    }",
                "    }));",
                "    map.sort_by(|k1, _, k2, _| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some((&\"apple\", &3)));",
                "    assert_eq!(map.last(), Some((&\"orange\", &1)));",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMap<usize, usize, RandomState> = IndexMap::new();",
                "    for i in 0..usize::MAX {",
                "        map.insert(i, i);",
                "    }",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.first(), Some(&(0, 0)));",
                "    assert_eq!(map.last(), Some(&(usize::MAX - 1, usize::MAX - 1)));",
                "    assert!(map.is_sorted_by(|k1, _, k2, _| k1.cmp(k2)));",
                "    assert!(map.len() == usize::MAX as usize);",
                "    assert!(map.get_index(0).is_some());",
                "    assert!(map.get_index(usize::MAX as usize - 1).is_some());",
                "    assert!(map.get_index(usize::MAX as usize).is_none());",
                "    assert!(map.get_range(0..10).is_some());",
                "    assert!(map.get_range(usize::MAX as usize..).is_none());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMap<usize, usize, RandomState> = IndexMap::new();",
                "    for i in 0..usize::MAX {",
                "        map.insert(i, i);",
                "    }",
                "    map.sort_by(|k1, v1, k2, v2| k1.cmp(k2));",
                "    assert_eq!(map.first(), Some(&(0, 0)));",
                "    assert_eq!(map.last(), Some(&(usize::MAX - 1, usize::MAX - 1)));",
                "    assert!(map.is_sorted_by(|k1, _, k2, _| k1.cmp(k2)));",
                "    assert!(map.len() == usize::MAX as usize);",
                "    assert!(map.get_index(0).is_some());",
                "    assert!(map.get_index(usize::MAX as usize - 1).is_some());",
                "    assert!(map.get_index(usize::MAX as usize).is_none());",
                "    assert!(map.get_range(0..10).is_some());",
                "    assert!(map.get_range(usize::MAX as usize..).is_none());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}