{
  "name": "indexmap::map::core::{impl#2}::with_capacity",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:157:5:162:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: IndexMapCore {\n            indices: Indices::with_capacity(n),\n            entries: Vec::with_capacity(n),\n        }\n"
      ],
      "input_infer": "n should be in the range [0, IndexMapCore::MAX_ENTRIES_CAPACITY]\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(result.indices.is_empty());",
                "    assert!(result.entries.is_empty());",
                "    ",
                "    let result_capacity_10 = IndexMapCore::<usize, usize>::with_capacity(10);",
                "    assert_eq!(result_capacity_10.len(), 0);",
                "    assert_eq!(result_capacity_10.capacity(), 10);",
                "    assert!(result_capacity_10.indices.is_empty());",
                "    assert!(result_capacity_10.entries.is_empty());"
              ],
              "code": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(0);",
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(result.indices.is_empty());",
                "    assert!(result.entries.is_empty());",
                "    ",
                "    let result_capacity_10 = IndexMapCore::<usize, usize>::with_capacity(10);",
                "    assert_eq!(result_capacity_10.len(), 0);",
                "    assert_eq!(result_capacity_10.capacity(), 10);",
                "    assert!(result_capacity_10.indices.is_empty());",
                "    assert!(result_capacity_10.entries.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), 1);",
                "    assert!(result.indices.is_empty());",
                "    assert_eq!(result.entries.len(), 0);",
                "    assert_eq!(result.entries.capacity(), 1);"
              ],
              "code": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(1);",
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), 1);",
                "    assert!(result.indices.is_empty());",
                "    assert_eq!(result.entries.len(), 0);",
                "    assert_eq!(result.entries.capacity(), 1);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(result.indices.is_empty());",
                "    assert!(result.entries.is_empty());",
                "    ",
                "    let result_n = IndexMapCore::<usize, usize>::with_capacity(10);",
                "    assert_eq!(result_n.len(), 0);",
                "    assert_eq!(result_n.capacity(), 10);",
                "    assert!(result_n.indices.is_empty());",
                "    assert!(result_n.entries.is_empty());"
              ],
              "code": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(result.len(), 0);",
                "    assert_eq!(result.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert!(result.indices.is_empty());",
                "    assert!(result.entries.is_empty());",
                "    ",
                "    let result_n = IndexMapCore::<usize, usize>::with_capacity(10);",
                "    assert_eq!(result_n.len(), 0);",
                "    assert_eq!(result_n.capacity(), 10);",
                "    assert!(result_n.indices.is_empty());",
                "    assert!(result_n.entries.is_empty());",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "    assert_eq!(result.entries.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "    assert_eq!(result.len(), 0);"
              ],
              "code": [
                "{",
                "    let result = IndexMapCore::<usize, usize>::with_capacity(IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "    assert_eq!(result.indices.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "    assert_eq!(result.entries.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY / 2);",
                "    assert_eq!(result.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}