{
  "name": "indexmap::map::slice::{impl#1}::binary_search_by_key",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:251:5:257:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "The key input conditions for testing binary_search_by_key include: \n- A non-empty `Slice<K, V>` with a sorted order based on key comparisons.\n- Various types of keys `K` that implement `Ord`, including edge cases like maximum and minimum values.\n- Values `V` can be of any type, but the provided extraction function must correctly transform keys and values into a comparable type `B` that also implements `Ord`.\n- Input for `b` should include values present in the slice, as well as values less than and greater than existing keys to test both found and insertion positions.\n- The function should be tested for boundary cases, including:\n  - Searching the first key (smallest).\n  - Searching the last key (largest).\n  - Searching a key that is less than the first key.\n  - Searching a key that is greater than the last key.\n  - Searching keys that are equal to existing keys to ensure proper position is returned.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result, Ok(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&3, |k, _| *k);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(2));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&3, |k, _| *k);",
                "    assert_eq!(result, Ok(2));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&2, |k, _| *k);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Ok(1));  // Verify that the search found the key at the correct index.",
                "    ",
                "    let result = slice.binary_search_by_key(&0, |k, _| *k);",
                "    assert_eq!(result, Err(0));  // Verify that the search can insert before the first element.",
                "    ",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result, Err(3));  // Verify that the search can insert after the last element.",
                "    ",
                "    let result = slice.binary_search_by_key(&3, |k, _| *k);",
                "    assert_eq!(result, Ok(2));  // Verify that the search found the key at the correct index for the last element.",
                "    ",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result, Ok(0));  // Verify that the search found the key at the start."
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&2, |k, _| *k);",
                "    assert_eq!(result, Ok(1));  // Verify that the search found the key at the correct index.",
                "    ",
                "    let result = slice.binary_search_by_key(&0, |k, _| *k);",
                "    assert_eq!(result, Err(0));  // Verify that the search can insert before the first element.",
                "    ",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result, Err(3));  // Verify that the search can insert after the last element.",
                "    ",
                "    let result = slice.binary_search_by_key(&3, |k, _| *k);",
                "    assert_eq!(result, Ok(2));  // Verify that the search found the key at the correct index for the last element.",
                "    ",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result, Ok(0));  // Verify that the search found the key at the start.",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&0, |k, _| *k);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(0));",
                "    ",
                "    let result = slice.binary_search_by_key(&2, |k, _| *k);",
                "    assert_eq!(result, Ok(1));",
                "    ",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result, Err(3));",
                "    ",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result, Ok(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&0, |k, _| *k);",
                "    assert_eq!(result, Err(0));",
                "    ",
                "    let result = slice.binary_search_by_key(&2, |k, _| *k);",
                "    assert_eq!(result, Ok(1));",
                "    ",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result, Err(3));",
                "    ",
                "    let result = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result, Ok(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(3));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result, Err(3));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&2.5, |k, _| *k as f64);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result, Err(2));",
                "    let result_not_found = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result_not_found, Err(3));",
                "    let result_at_start = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result_at_start, Ok(0));",
                "    let result_at_end = slice.binary_search_by_key(&3, |k, _| *k);",
                "    assert_eq!(result_at_end, Ok(2));",
                "    let result_empty = Slice::<i32, &str>::new().binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result_empty, Err(0));"
              ],
              "code": [
                "{",
                "    let slice = Box::new(Slice { entries: [",
                "        Bucket { hash: 0, key: 1, value: \"a\" },",
                "        Bucket { hash: 0, key: 2, value: \"b\" },",
                "        Bucket { hash: 0, key: 3, value: \"c\" },",
                "    ] });",
                "    let result = slice.binary_search_by_key(&2.5, |k, _| *k as f64);",
                "    assert_eq!(result, Err(2));",
                "    let result_not_found = slice.binary_search_by_key(&4, |k, _| *k);",
                "    assert_eq!(result_not_found, Err(3));",
                "    let result_at_start = slice.binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result_at_start, Ok(0));",
                "    let result_at_end = slice.binary_search_by_key(&3, |k, _| *k);",
                "    assert_eq!(result_at_end, Ok(2));",
                "    let result_empty = Slice::<i32, &str>::new().binary_search_by_key(&1, |k, _| *k);",
                "    assert_eq!(result_empty, Err(0));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}