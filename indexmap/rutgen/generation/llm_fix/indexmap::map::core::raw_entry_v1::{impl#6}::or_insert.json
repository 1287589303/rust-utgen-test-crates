{
  "name": "indexmap::map::core::raw_entry_v1::{impl#6}::or_insert",
  "mod_info": {
    "name": "map::core::raw_entry_v1",
    "loc": "src/map/core.rs:12:1:12:22"
  },
  "visible": true,
  "loc": "src/map/core/raw_entry_v1.rs:338:5:347:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: self matches Self::Vacant(entry) at line 343 is true\n"
      ],
      "input_infer": "self must be a RawEntryMut::Vacant variant with associated Entries having no existing keys and default_key and default_value must be valid types K and V respectively, while S should be a valid BuildHasher implementation.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(42, 100);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*key, 42);",
                "    assert_eq!(*value, 100);",
                "    assert_eq!(entries.len(), 1);",
                "    assert_eq!(entries.get(&42), Some(&100));"
              ],
              "code": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(42, 100);",
                "    assert_eq!(*key, 42);",
                "    assert_eq!(*value, 100);",
                "    assert_eq!(entries.len(), 1);",
                "    assert_eq!(entries.get(&42), Some(&100));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(\"default_key\".to_string(), \"default_value\".to_string());",
                "}"
              ],
              "oracle": [
                "    assert_eq!(key, \"default_key\");",
                "    assert_eq!(value, \"default_value\");",
                "    assert!(entries.contains_key(&key));",
                "    assert_eq!(entries.get(&key).unwrap(), &value);"
              ],
              "code": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(\"default_key\".to_string(), \"default_value\".to_string());",
                "    assert_eq!(key, \"default_key\");",
                "    assert_eq!(value, \"default_value\");",
                "    assert!(entries.contains_key(&key));",
                "    assert_eq!(entries.get(&key).unwrap(), &value);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(3.14, 1.61);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*key, 3.14);",
                "    assert_eq!(*value, 1.61);",
                "    assert!(entries.len() > 0);",
                "    assert!(entries.contains_key(&3.14));",
                "    assert!(entries.get(&3.14).unwrap() == &1.61);"
              ],
              "code": [
                "{",
                "    let mut entries = Entries::new();",
                "    let hash_builder = std::collections::hash_map::RandomState::new();",
                "    let vacant_entry = RawEntryMut::Vacant(RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &hash_builder,",
                "    });",
                "    let (key, value) = vacant_entry.or_insert(3.14, 1.61);",
                "    assert_eq!(*key, 3.14);",
                "    assert_eq!(*value, 1.61);",
                "    assert!(entries.len() > 0);",
                "    assert!(entries.contains_key(&3.14));",
                "    assert!(entries.get(&3.14).unwrap() == &1.61);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: self matches Self::Occupied(entry) at line 343 is true\n",
        "precondition: self matches Self::Occupied(entry) at line 343 is true\n"
      ],
      "input_infer": "self is of type RawEntryMut with a state of Occupied, key and value types are valid hashes, and default_key and default_value are valid inputs.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let key: i32 = 10;",
                "    let value: String = String::from(\"value10\");",
                "    entries.insert(key, value.clone());",
                "",
                "    let index = entries.get_index_of(&key).unwrap();",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index,",
                "        hash_builder: PhantomData::<TestHasher>,",
                "    };",
                "",
                "    let raw_entry = RawEntryMut::Occupied(occupied_entry);",
                "",
                "    let (mut k, mut v) = raw_entry.or_insert(20, String::from(\"default_value\"));",
                "    *k = 30;",
                "    *v = String::from(\"new_value\");",
                "}"
              ],
              "oracle": [
                "    assert_eq!(entries.get(&key).unwrap(), \"new_value\");",
                "    assert_eq!(entries.get(&30).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&30).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&key).unwrap(), index);",
                "    assert_eq!(entries.get(&key).unwrap(), \"new_value\");",
                "    assert!(entries.len() == 1);",
                "    assert_eq!(entries.get_index_of(&20).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&10).unwrap(), index);",
                "    assert_eq!(entries.get_index_of(&key).unwrap(), index);",
                "    assert!(matches!(raw_entry, RawEntryMut::Occupied(_)));",
                "    assert_eq!(raw_entry.index(), index);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let key: i32 = 10;",
                "    let value: String = String::from(\"value10\");",
                "    entries.insert(key, value.clone());",
                "",
                "    let index = entries.get_index_of(&key).unwrap();",
                "    let occupied_entry = RawOccupiedEntryMut {",
                "        entries: &mut entries,",
                "        index,",
                "        hash_builder: PhantomData::<TestHasher>,",
                "    };",
                "",
                "    let raw_entry = RawEntryMut::Occupied(occupied_entry);",
                "",
                "    let (mut k, mut v) = raw_entry.or_insert(20, String::from(\"default_value\"));",
                "    *k = 30;",
                "    *v = String::from(\"new_value\");",
                "    assert_eq!(entries.get(&key).unwrap(), \"new_value\");",
                "    assert_eq!(entries.get(&30).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&30).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&key).unwrap(), index);",
                "    assert_eq!(entries.get(&key).unwrap(), \"new_value\");",
                "    assert!(entries.len() == 1);",
                "    assert_eq!(entries.get_index_of(&20).is_none(), true);",
                "    assert_eq!(entries.get_index_of(&10).unwrap(), index);",
                "    assert_eq!(entries.get_index_of(&key).unwrap(), index);",
                "    assert!(matches!(raw_entry, RawEntryMut::Occupied(_)));",
                "    assert_eq!(raw_entry.index(), index);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let key: i32 = 20;",
                "    let value: String = String::from(\"value20\");",
                "",
                "    let vacant_entry = RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &TestHasher,",
                "    };",
                "",
                "    let raw_entry = RawEntryMut::Vacant(vacant_entry);",
                "",
                "    let (mut k, mut v) = raw_entry.or_insert(key, value);",
                "    *k = 40;",
                "    *v = String::from(\"inserted_value\");",
                "}"
              ],
              "oracle": [
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let occupied_entry = RawOccupiedEntryMut { entries: &mut entries, index: /* initialize as occupied */, hash_builder: PhantomData };",
                "    let raw_entry = RawEntryMut::Occupied(occupied_entry);",
                "    let (k, v) = raw_entry.or_insert(key, value);",
                "    assert_eq!(*k, /* expected key value */);",
                "    assert_eq!(*v, /* expected value */);",
                "    ",
                "    let new_value = String::from(\"new_value\");",
                "    let (k, v) = raw_entry.or_insert(key, new_value);",
                "    assert_eq!(*k, /* expected key value after re-insertion */);",
                "    assert_eq!(*v, /* expected value after re-insertion */);"
              ],
              "code": [
                "{",
                "    struct TestHasher;",
                "    impl BuildHasher for TestHasher {",
                "        type Hasher = std::collections::hash_map::RandomState;",
                "        fn build_hasher(&self) -> Self::Hasher {",
                "            std::collections::hash_map::RandomState::new()",
                "        }",
                "    }",
                "",
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let key: i32 = 20;",
                "    let value: String = String::from(\"value20\");",
                "",
                "    let vacant_entry = RawVacantEntryMut {",
                "        map: RefMut::new(&mut entries),",
                "        hash_builder: &TestHasher,",
                "    };",
                "",
                "    let raw_entry = RawEntryMut::Vacant(vacant_entry);",
                "",
                "    let (mut k, mut v) = raw_entry.or_insert(key, value);",
                "    *k = 40;",
                "    *v = String::from(\"inserted_value\");",
                "    let mut entries: Entries<i32, String> = Entries::new();",
                "    let occupied_entry = RawOccupiedEntryMut { entries: &mut entries, index: /* initialize as occupied */, hash_builder: PhantomData };",
                "    let raw_entry = RawEntryMut::Occupied(occupied_entry);",
                "    let (k, v) = raw_entry.or_insert(key, value);",
                "    assert_eq!(*k, /* expected key value */);",
                "    assert_eq!(*v, /* expected value */);",
                "    ",
                "    let new_value = String::from(\"new_value\");",
                "    let (k, v) = raw_entry.or_insert(key, new_value);",
                "    assert_eq!(*k, /* expected key value after re-insertion */);",
                "    assert_eq!(*v, /* expected value after re-insertion */);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}