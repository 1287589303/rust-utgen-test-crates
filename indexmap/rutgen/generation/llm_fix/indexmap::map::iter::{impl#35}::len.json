{
  "name": "indexmap::map::iter::{impl#35}::len",
  "mod_info": {
    "name": "map::iter",
    "loc": "src/map.rs:5:1:5:10"
  },
  "visible": true,
  "loc": "src/map/iter.rs:310:5:312:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "0 <= self.iter.len() <= N, where N is the maximum capacity of the underlying vector, and self.iter must be a valid state of a Drain iterator containing 0 to N elements.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drain.len(), 0);",
                "    let bucket: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 10 }];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    assert_eq!(drain.len(), 1);",
                "    let _ = drain.iter.next();",
                "    assert_eq!(drain.len(), 0);"
              ],
              "code": [
                "{",
                "    let bucket: Vec<Bucket<i32, i32>> = Vec::new();",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "    assert_eq!(drain.len(), 0);",
                "    let bucket: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 10 }];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    assert_eq!(drain.len(), 1);",
                "    let _ = drain.iter.next();",
                "    assert_eq!(drain.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drain.len(), 1);",
                "    bucket.clear();",
                "    let drain_empty = Drain { iter: bucket.drain(..) };",
                "    assert_eq!(drain_empty.len(), 0);",
                "    let mut bucket_multiple: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 1, key: 2, value: 200 }];",
                "    let drain_multiple = Drain { iter: bucket_multiple.drain(..) };",
                "    assert_eq!(drain_multiple.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "    assert_eq!(drain.len(), 1);",
                "    bucket.clear();",
                "    let drain_empty = Drain { iter: bucket.drain(..) };",
                "    assert_eq!(drain_empty.len(), 0);",
                "    let mut bucket_multiple: Vec<Bucket<i32, i32>> = vec![Bucket { hash: 0, key: 1, value: 100 }, Bucket { hash: 1, key: 2, value: 200 }];",
                "    let drain_multiple = Drain { iter: bucket_multiple.drain(..) };",
                "    assert_eq!(drain_multiple.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![",
                "        Bucket { hash: 0, key: 1, value: 100 },",
                "        Bucket { hash: 1, key: 2, value: 200 },",
                "        Bucket { hash: 2, key: 3, value: 300 },",
                "    ];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drain.len(), 3);",
                "    bucket.push(Bucket { hash: 3, key: 4, value: 400 });",
                "    let drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    assert_eq!(drain.len(), 4);",
                "    drop(drain);",
                "    assert_eq!(bucket.len(), 2);"
              ],
              "code": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![",
                "        Bucket { hash: 0, key: 1, value: 100 },",
                "        Bucket { hash: 1, key: 2, value: 200 },",
                "        Bucket { hash: 2, key: 3, value: 300 },",
                "    ];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "    assert_eq!(drain.len(), 3);",
                "    bucket.push(Bucket { hash: 3, key: 4, value: 400 });",
                "    let drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    assert_eq!(drain.len(), 4);",
                "    drop(drain);",
                "    assert_eq!(bucket.len(), 2);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = (0..10).map(|i| Bucket { hash: i, key: i, value: i * 10 }).collect();",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(drain.len(), 10);",
                "    bucket.drain(..);",
                "    assert_eq!(drain.len(), 10);",
                "    bucket.pop();",
                "    assert_eq!(drain.len(), 9);",
                "    bucket.clear();",
                "    assert_eq!(drain.len(), 0);",
                "    bucket.push(Bucket { hash: 11, key: 11, value: 110 });",
                "    assert_eq!(drain.len(), 0);",
                "    assert_eq!(drain.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = (0..10).map(|i| Bucket { hash: i, key: i, value: i * 10 }).collect();",
                "    let mut drain_iter = bucket.drain(..);",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "    assert_eq!(drain.len(), 10);",
                "    bucket.drain(..);",
                "    assert_eq!(drain.len(), 10);",
                "    bucket.pop();",
                "    assert_eq!(drain.len(), 9);",
                "    bucket.clear();",
                "    assert_eq!(drain.len(), 0);",
                "    bucket.push(Bucket { hash: 11, key: 11, value: 110 });",
                "    assert_eq!(drain.len(), 0);",
                "    assert_eq!(drain.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![",
                "        Bucket { hash: 0, key: 1, value: 100 },",
                "        Bucket { hash: 1, key: 2, value: 200 },",
                "    ];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let _ = drain.len();",
                "    let _ = drain_iter.next(); // Drain one element",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(bucket.len(), 2);",
                "    assert_eq!(drain.len(), 2);",
                "    let _ = drain_iter.next();",
                "    assert_eq!(drain.len(), 1);",
                "    let _ = drain_iter.next();",
                "    assert_eq!(drain.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut bucket: Vec<Bucket<i32, i32>> = vec![",
                "        Bucket { hash: 0, key: 1, value: 100 },",
                "        Bucket { hash: 1, key: 2, value: 200 },",
                "    ];",
                "    let mut drain_iter = bucket.drain(..);",
                "    let _ = drain.len();",
                "    let _ = drain_iter.next(); // Drain one element",
                "    let drain = Drain { iter: drain_iter };",
                "    let _ = drain.len();",
                "    assert_eq!(bucket.len(), 2);",
                "    assert_eq!(drain.len(), 2);",
                "    let _ = drain_iter.next();",
                "    assert_eq!(drain.len(), 1);",
                "    let _ = drain_iter.next();",
                "    assert_eq!(drain.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}