{
  "name": "indexmap::map::slice::{impl#1}::split_at",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:127:5:130:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (Self::from_slice(first), Self::from_slice(second))\n"
      ],
      "input_infer": "index: 0 to len, including 0 and len boundaries\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: &Slice<i32, i32> = Slice::new();",
                "    let result = slice.split_at(0);",
                "}"
              ],
              "oracle": [
                "    let slice: &Slice<i32, i32> = Slice::new();",
                "    let result = slice.split_at(0);",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.1.len(), 0);",
                "    assert!(result.0.is_empty());",
                "    assert!(result.1.is_empty());",
                "    let slice_with_entries = Slice::from_slice(&[Bucket { hash: 1, key: 1, value: 2 }, Bucket { hash: 2, key: 3, value: 4 }]);",
                "    let result_non_empty = slice_with_entries.split_at(1);",
                "    assert_eq!(result_non_empty.0.len(), 1);",
                "    assert_eq!(result_non_empty.1.len(), 1);",
                "    assert_eq!(result_non_empty.0.get_index(0).unwrap(), (&1, &2));",
                "    assert_eq!(result_non_empty.1.get_index(0).unwrap(), (&3, &4));",
                "    let panic_result = std::panic::catch_unwind(|| slice.split_at(2));",
                "    assert!(panic_result.is_err());"
              ],
              "code": [
                "{",
                "    let slice: &Slice<i32, i32> = Slice::new();",
                "    let result = slice.split_at(0);",
                "    let slice: &Slice<i32, i32> = Slice::new();",
                "    let result = slice.split_at(0);",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.1.len(), 0);",
                "    assert!(result.0.is_empty());",
                "    assert!(result.1.is_empty());",
                "    let slice_with_entries = Slice::from_slice(&[Bucket { hash: 1, key: 1, value: 2 }, Bucket { hash: 2, key: 3, value: 4 }]);",
                "    let result_non_empty = slice_with_entries.split_at(1);",
                "    assert_eq!(result_non_empty.0.len(), 1);",
                "    assert_eq!(result_non_empty.1.len(), 1);",
                "    assert_eq!(result_non_empty.0.get_index(0).unwrap(), (&1, &2));",
                "    assert_eq!(result_non_empty.1.get_index(0).unwrap(), (&3, &4));",
                "    let panic_result = std::panic::catch_unwind(|| slice.split_at(2));",
                "    assert!(panic_result.is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 0);",
                "    assert!(result.1.is_empty());",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.1.first(), None);",
                "    assert_eq!(slice.entries.len(), 1);",
                "    assert!(std::panic::catch_unwind(|| { slice.split_at(2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { slice.split_at(0); }).is_ok());",
                "    assert_eq!(result.0, slice);",
                "    assert_eq!(result.0.split_at(0), (result.0, result.1));",
                "    assert_eq!(slice.split_at(0), (Slice::new(), slice));"
              ],
              "code": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(1);",
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 0);",
                "    assert!(result.1.is_empty());",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.1.first(), None);",
                "    assert_eq!(slice.entries.len(), 1);",
                "    assert!(std::panic::catch_unwind(|| { slice.split_at(2); }).is_err());",
                "    assert!(std::panic::catch_unwind(|| { slice.split_at(0); }).is_ok());",
                "    assert_eq!(result.0, slice);",
                "    assert_eq!(result.0.split_at(0), (result.0, result.1));",
                "    assert_eq!(slice.split_at(0), (Slice::new(), slice));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "}"
              ],
              "oracle": [
                "    assert!(std::panic::catch_unwind(|| {",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "    true",
                "    }).is_err());"
              ],
              "code": [
                "{",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "    assert!(std::panic::catch_unwind(|| {",
                "    let bucket = Bucket { hash: 0, key: 1, value: 10 };",
                "    let entries = [bucket];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "    true",
                "    }).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket1 = Bucket { hash: 0, key: 1, value: 10 };",
                "    let bucket2 = Bucket { hash: 0, key: 2, value: 20 };",
                "    let entries = [bucket1, bucket2];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.1.first(), Some((&2, &20)));",
                "    assert!(result.0.is_empty() == false);",
                "    assert!(result.1.is_empty() == false);",
                "    assert_eq!(result.0.get_index(0), Some((&1, &10)));",
                "    assert_eq!(result.1.get_index(0), Some((&2, &20)));"
              ],
              "code": [
                "{",
                "    let bucket1 = Bucket { hash: 0, key: 1, value: 10 };",
                "    let bucket2 = Bucket { hash: 0, key: 2, value: 20 };",
                "    let entries = [bucket1, bucket2];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(1);",
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.1.first(), Some((&2, &20)));",
                "    assert!(result.0.is_empty() == false);",
                "    assert!(result.1.is_empty() == false);",
                "    assert_eq!(result.0.get_index(0), Some((&1, &10)));",
                "    assert_eq!(result.1.get_index(0), Some((&2, &20)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let bucket1 = Bucket { hash: 0, key: 1, value: 10 };",
                "    let bucket2 = Bucket { hash: 0, key: 2, value: 20 };",
                "    let bucket3 = Bucket { hash: 0, key: 3, value: 30 };",
                "    let entries = [bucket1, bucket2, bucket3];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.len(), 2);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.0.last(), Some((&2, &20)));",
                "    assert_eq!(result.1.first(), Some((&3, &30)));",
                "    assert_eq!(result.1.last(), Some((&3, &30)));",
                "    assert!(std::panic::catch_unwind(|| slice.split_at(4)).is_err());"
              ],
              "code": [
                "{",
                "    let bucket1 = Bucket { hash: 0, key: 1, value: 10 };",
                "    let bucket2 = Bucket { hash: 0, key: 2, value: 20 };",
                "    let bucket3 = Bucket { hash: 0, key: 3, value: 30 };",
                "    let entries = [bucket1, bucket2, bucket3];",
                "    let slice: &Slice<i32, i32> = Slice::from_slice(&entries);",
                "    let result = slice.split_at(2);",
                "    assert_eq!(result.0.len(), 2);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert_eq!(result.0.first(), Some((&1, &10)));",
                "    assert_eq!(result.0.last(), Some((&2, &20)));",
                "    assert_eq!(result.1.first(), Some((&3, &30)));",
                "    assert_eq!(result.1.last(), Some((&3, &30)));",
                "    assert!(std::panic::catch_unwind(|| slice.split_at(4)).is_err());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}