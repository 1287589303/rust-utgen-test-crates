{
  "name": "indexmap::map::core::{impl#2}::split_splice",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:226:5:238:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: (Self { indices, entries }, drained.into_iter())\n"
      ],
      "input_infer": "Empty range, valid range of (0, 0) for an empty IndexMapCore, valid ranges from (0, len) where len is the current length of entries, valid ranges from (start, len) for partial splits, and ranges where start is less than or equal to end (inclusive) within the bounds of existing entries.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.split_splice(0..0);",
                "}"
              ],
              "oracle": [
                "    let result = map.split_splice(0..0);",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.0.capacity(), 0);",
                "    assert!(result.1.is_empty());",
                "    let result = map.split_splice(0..1);",
                "    assert!(result.0.is_empty());",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.0.capacity(), 0);",
                "    let result = map.split_splice(..1);",
                "    assert!(result.1.is_empty());",
                "    let result = map.split_splice(..);",
                "    assert!(result.1.is_empty());",
                "    let result = map.split_splice(1..1);",
                "    assert!(result.1.is_empty());"
              ],
              "code": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.split_splice(0..0);",
                "    let result = map.split_splice(0..0);",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.0.capacity(), 0);",
                "   assert_eq!(result.1.len(), 0);",
                "   let result = map.split_splice(0..1);",
                "   assert!(result.0.entries.is_empty());",
                "   assert_eq!(result.0.entries.len(), 0);",
                "   assert_eq!(result.0.entries.capacity(), 0);",
                "   let result = map.split_splice(..1);",
                "   assert_eq!(result.1.len(), 0);",
                "   let result = map.split_splice(..);",
                "   assert_eq!(result.1.len(), 0);",
                "   let result = map.split_splice(1..1);",
                "   assert_eq!(result.1.len(), 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.insert_full(0, 1, 2);",
                "    let result = map.split_splice(0..1);",
                "}"
              ],
              "oracle": [
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    map.insert_full(0, 1, 2);",
                "    let result = map.split_splice(0..1);",
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert!(result.0.indices.len() > 0);",
                "    assert!(result.0.entries.len() > 0);",
                "    assert_eq!(result.0.entries[0].key, 1);",
                "    assert_eq!(result.0.entries[0].value, 2);",
                "    assert!(result.0.indices.capacity() >= 1);",
                "    assert!(result.0.indices.len() == 1);",
                "    assert!(map.len() == 0);"
              ],
              "code": [
                "{",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "   map.insert_full(HashValue(0), 1, 2);",
                "   let result = map.split_splice(0..1);",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "   map.insert_full(HashValue(0), 1, 2);",
                "    let result = map.split_splice(0..1);",
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.1.len(), 1);",
                "    assert!(result.0.indices.len() > 0);",
                "    assert!(result.0.entries.len() > 0);",
                "    assert_eq!(result.0.entries[0].key, 1);",
                "    assert_eq!(result.0.entries[0].value, 2);",
                "    assert!(result.0.indices.capacity() >= 1);",
                "    assert!(result.0.indices.len() == 1);",
                "    assert!(map.len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.insert_full(0, 1, 2);",
                "    map.insert_full(1, 2, 3);",
                "    let result = map.split_splice(0..2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.0.len(), 1);",
                "    assert_eq!(result.0.entries.len(), 1);",
                "    assert_eq!(result.0.indices.len(), 1);",
                "    assert_eq!(result.0.entries[0].key, 2);",
                "    assert_eq!(result.0.entries[0].value, 3);",
                "    assert_eq!(result.1.len(), 2);",
                "    assert_eq!(result.1.next(), Some(Bucket { hash: 0, key: 1, value: 2 }));",
                "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: 2, value: 3 }));",
                "    assert_eq!(result.0.len(), 1);"
              ],
              "code": [
                "{",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "  map.insert_full(HashValue(0), 1, 2);",
                "  map.insert_full(HashValue(1), 2, 3);",
                "  let result = map.split_splice(0..2);",
                "   assert_eq!(result.0.len(), 1);",
                "   assert_eq!(result.0.entries.len(), 1);",
                "   assert_eq!(result.0.indices.len(), 1);",
                "   assert_eq!(result.0.entries[0].key, 2);",
                "   assert_eq!(result.0.entries[0].value, 3);",
                "   assert_eq!(result.1.len(), 2);",
                "   assert_eq!(result.1.next(), Some(Bucket { hash: HashValue(0), key: 1, value: 2 }));",
                "   assert_eq!(result.1.next(), Some(Bucket { hash: HashValue(1), key: 2, value: 3 }));",
                "   assert_eq!(result.0.len(), 1);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "    map.insert_full(0, 1, 2);",
                "    map.insert_full(1, 2, 3);",
                "    let result = map.split_splice(1..2);",
                "}"
              ],
              "oracle": [
                "    let expected_length = 1;",
                "    let expected_indices_capacity = 1;",
                "    let expected_first_entry_key = 1;",
                "    let expected_first_entry_value = 2;",
                "    let result_indices = result.0.indices.len();",
                "    let result_entries = result.0.entries.len();",
                "    assert_eq!(result_indices, expected_indices_capacity);",
                "    assert_eq!(result_entries, expected_length);",
                "    assert_eq!(result.1.next(), Some(Bucket { hash: 1, key: expected_first_entry_key, value: expected_first_entry_value }));",
                "    assert_eq!(map.len(), 1);",
                "    assert_eq!(map.get_index_of(0, &0), Some(0));",
                "    assert_eq!(map.get_index_of(1, &1), None);"
              ],
              "code": [
                "{",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::with_capacity(5);",
                "   map.insert_full(HashValue(0), 1, 2);",
                "   map.insert_full(HashValue(1), 2, 3);",
                "   let result = map.split_splice(1..2);",
                "    let expected_length = 1;",
                "    let expected_indices_capacity = 1;",
                "    let expected_first_entry_key = 1;",
                "    let expected_first_entry_value = 2;",
                "    let result_indices = result.0.indices.len();",
                "    let result_entries = result.0.entries.len();",
                "    assert_eq!(result_indices, expected_indices_capacity);",
                "    assert_eq!(result_entries, expected_length);",
                "  assert_eq!(result.1.next(), Some(Bucket { hash: HashValue(1), key: expected_first_entry_key, value: expected_first_entry_value }));",
                "    assert_eq!(map.len(), 1);",
                "   assert_eq!(map.get_index_of(HashValue(0), &0), Some(0));",
                "   assert_eq!(map.get_index_of(HashValue(1), &1), None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.split_splice(1..2);",
                "}"
              ],
              "oracle": [
                "    let map: IndexMapCore<usize, usize> = IndexMapCore::new();",
                "    let result = map.split_splice(1..2);",
                "    assert_eq!(result.0.len(), 0);",
                "    assert_eq!(result.1.len(), 0);",
                "    assert!(map.len() == 0);"
              ],
              "code": [
                "{",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();  ",
                "   let result = map.split_splice(1..2);  ",
                "   let mut map: IndexMapCore<usize, usize> = IndexMapCore::new();  ",
                "   let result = map.split_splice(1..2);  ",
                "   assert_eq!(result.0.len(), 0);  ",
                "   assert_eq!(result.1.len(), 0);  ",
                "   assert!(map.len() == 0);",
                "}"
              ],
              "can_compile": true,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}