{
  "name": "indexmap::map::core::entry::{impl#1}::key",
  "mod_info": {
    "name": "map::core::entry",
    "loc": "src/map/core.rs:10:1:10:11"
  },
  "visible": true,
  "loc": "src/map/core/entry.rs:100:5:105:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: *self matches Entry::Vacant(ref entry) at line 101 is true\n",
        "expected return value/type: match *self {\n            Entry::Occupied(ref entry) => entry.key(),\n            Entry::Vacant(ref entry) => entry.key(),\n        }\n"
      ],
      "input_infer": "Entry::Vacant with a defined key of type K from a non-empty map\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key,",
                "    };",
                "",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _key_ref = entry.key();",
                "}"
              ],
              "oracle": [
                "    let key_ref = entry.key();",
                "    assert_eq!(key_ref, &key);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key,",
                "    };",
                "",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _key_ref = entry.key();",
                "    let key_ref = entry.key();",
                "    assert_eq!(key_ref, &key);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    entries.insert(key, value);",
                "",
                "    let vacant_key = TestKey;",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key: vacant_key,",
                "    };",
                "",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _key_ref = entry.key();",
                "}"
              ],
              "oracle": [
                "    assert_eq!(*_key_ref, vacant_key);",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert!(matches!(entry, Entry::Vacant(ref e) if e.key() == &vacant_key));",
                "    assert!(entry.key() as *const _ != std::ptr::null());",
                "    assert_eq!(std::mem::size_of_val(_key_ref), std::mem::size_of::<TestKey>());",
                "    assert!(std::any::TypeId::of::<K>() == std::any::TypeId::of::<TestKey>());"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let key = TestKey;",
                "    let value = TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    entries.insert(key, value);",
                "",
                "    let vacant_key = TestKey;",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::default(),",
                "        key: vacant_key,",
                "    };",
                "",
                "    let entry = Entry::Vacant(vacant_entry);",
                "    let _key_ref = entry.key();",
                "    assert_eq!(*_key_ref, vacant_key);",
                "    assert!(matches!(entry, Entry::Vacant(_)));",
                "    assert!(matches!(entry, Entry::Vacant(ref e) if e.key() == &vacant_key));",
                "    assert!(entry.key() as *const _ != std::ptr::null());",
                "    assert_eq!(std::mem::size_of_val(_key_ref), std::mem::size_of::<TestKey>());",
                "    assert!(std::any::TypeId::of::<K>() == std::any::TypeId::of::<TestKey>());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: *self matches Entry::Occupied(ref entry) at line 101 is true\n",
        "precondition: *self matches Entry::Occupied(ref entry) at line 101 is true\n",
        "expected return value/type: match *self {\n            Entry::Occupied(ref entry) => entry.key(),\n            Entry::Vacant(ref entry) => entry.key(),\n        }\n"
      ],
      "input_infer": "Entry::Occupied with valid occupied index and key type K\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let index = hashbrown::hash_table::OccupiedEntry::from_index(0);",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, index);",
                "    let entry = Entry::Occupied(occupied_entry);",
                "",
                "    let key = entry.key();",
                "}"
              ],
              "oracle": [
                "    let key = entry.key();",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(key, &occupied_entry.key());"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let index = hashbrown::hash_table::OccupiedEntry::from_index(0);",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, index);",
                "    let entry = Entry::Occupied(occupied_entry);",
                "",
                "    let key = entry.key();",
                "    let key = entry.key();",
                "    assert!(matches!(entry, Entry::Occupied(_)));",
                "    assert_eq!(key, &occupied_entry.key());",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::new(),",
                "        key: TestKey,",
                "    };",
                "    let entry = Entry::Vacant(vacant_entry);",
                "",
                "    let key = entry.key();",
                "}"
              ],
              "oracle": [
                "    let test_key = TestKey;",
                "    let test_value = TestValue;",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::from(0));",
                "    let entry = Entry::Occupied(occupied_entry);",
                "    let key = entry.key();",
                "    assert_eq!(key, &test_key);"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let vacant_entry = VacantEntry {",
                "        map: RefMut::new(&mut entries),",
                "        hash: HashValue::new(),",
                "        key: TestKey,",
                "    };",
                "    let entry = Entry::Vacant(vacant_entry);",
                "",
                "    let key = entry.key();",
                "    let test_key = TestKey;",
                "    let test_value = TestValue;",
                "    let mut entries = Entries::<TestKey, TestValue>::new();",
                "    let occupied_entry = OccupiedEntry::new(&mut entries, hash_table::OccupiedEntry::from(0));",
                "    let entry = Entry::Occupied(occupied_entry);",
                "    let key = entry.key();",
                "    assert_eq!(key, &test_key);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}