{
  "name": "indexmap::map::core::{impl#2}::drain",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:187:5:194:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [],
      "input_infer": "drain a valid range that is within the bounds of the entries length (0 to entries.len()), drain a range that starts and ends at the same index, drain a range that is unbounded (start: Unbounded, end: Unbounded), drain a range that is out of bounds (negative start), drain a range that starts after entries length (start > entries.len()), drain a range that has start greater than end, drain a range of maximum size (0..MAX_ENTRIES_CAPACITY)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 200 });",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 300 });",
                "    let _drained = core.drain(0..2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.len(), 3);",
                "    assert_eq!(core.capacity(), 3);",
                "    assert_eq!(core.entries.len(), 3);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[1].key, 2);",
                "    assert_eq!(core.entries[2].key, 3);",
                "    assert_eq!(core.entries.len(), 3);",
                "    assert_eq!(core.entries[0].hash, HashValue::default());",
                "    assert_eq!(core.entries[1].hash, HashValue::default());",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_eq!(core.entries[1].value, 200);",
                "    assert_eq!(core.entries[2].value, 300);"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 2, value: 200 });",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 3, value: 300 });",
                "    let _drained = core.drain(0..2);",
                "    assert_eq!(core.len(), 3);",
                "    assert_eq!(core.capacity(), 3);",
                "    assert_eq!(core.entries.len(), 3);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[1].key, 2);",
                "    assert_eq!(core.entries[2].key, 3);",
                "    assert_eq!(core.entries.len(), 3);",
                "    assert_eq!(core.entries[0].hash, HashValue::default());",
                "    assert_eq!(core.entries[1].hash, HashValue::default());",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_eq!(core.entries[1].value, 200);",
                "    assert_eq!(core.entries[2].value, 300);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(1..1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.len(), 1);",
                "    assert!(core.entries.is_empty());",
                "    assert_eq!(core.indices.len(), 1);",
                "    assert_eq!(core.capacity(), 1);",
                "    assert_eq!(_drained.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(1..1);",
                "    assert_eq!(core.len(), 1);",
                "    assert!(core.entries.is_empty());",
                "    assert_eq!(core.indices.len(), 1);",
                "    assert_eq!(core.capacity(), 1);",
                "    assert_eq!(_drained.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(..);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.len(), 1);",
                "    assert_eq!(core.entries.len(), 1);",
                "    assert!(core.entries.is_empty() == false);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_matches!(_drained, vec::Drain { .. });",
                "    assert_eq!(core.entries.len(), 0);"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(..);",
                "    assert_eq!(core.len(), 1);",
                "    assert_eq!(core.entries.len(), 1);",
                "    assert!(core.entries.is_empty() == false);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_matches!(_drained, vec::Drain { .. });",
                "    assert_eq!(core.entries.len(), 0);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    let _drained = core.drain(-1..1);",
                "}"
              ],
              "oracle": [
                "    assert!(core.len() == 0);",
                "    assert!(core.capacity() == 0);",
                "    assert!(core.entries.len() == 0);",
                "    assert!(core.indices.is_empty());"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    let _drained = core.drain(-1..1);",
                "    assert!(core.len() == 0);",
                "    assert!(core.capacity() == 0);",
                "    assert!(core.entries.len() == 0);",
                "    assert!(core.indices.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(2..3);",
                "}"
              ],
              "oracle": [
                "    assert_panics!(|| {",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    core.drain(2..3);",
                "    });"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(2..3);",
                "    assert_panics!(|| {",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    core.drain(2..3);",
                "    });",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [
                "#[should_panic]"
              ],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(1..0);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.len(), 1);",
                "    assert_eq!(core.entries.len(), 1);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_eq!(core.indices.len(), 1);",
                "    assert!(core.indices.capacity() > 0);",
                "    assert!(core.try_reserve(1).is_ok());",
                "    assert!(core.drain(1..1).is_empty());",
                "    panic!(\"Expected range start index 1 to be <= range end index 0, but it is not.\");"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    core.entries.push(Bucket { hash: HashValue::default(), key: 1, value: 100 });",
                "    let _drained = core.drain(1..0);",
                "    assert_eq!(core.len(), 1);",
                "    assert_eq!(core.entries.len(), 1);",
                "    assert_eq!(core.entries[0].key, 1);",
                "    assert_eq!(core.entries[0].value, 100);",
                "    assert_eq!(core.indices.len(), 1);",
                "    assert!(core.indices.capacity() > 0);",
                "    assert!(core.try_reserve(1).is_ok());",
                "    assert!(core.drain(1..1).is_empty());",
                "    panic!(\"Expected range start index 1 to be <= range end index 0, but it is not.\");",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "        core.entries.push(Bucket { hash: HashValue::default(), key: i, value: i as usize });",
                "    }",
                "    let _drained = core.drain(0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(core.len(), 0);",
                "    assert!(core.entries.is_empty());",
                "    assert!(core.indices.is_empty());",
                "    assert_eq!(core.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(core.entries.len(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "    assert_eq!(core.entries[i].key, i);",
                "    assert_eq!(core.entries[i].value, i as usize);",
                "    }",
                "    assert_eq!(core.drain(0..0).count(), 0);",
                "    assert_eq!(core.drain(0..1).count(), 1);",
                "    assert_eq!(core.len(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - 1);",
                "    assert!(core.entries.get(0).is_none());",
                "    assert_eq!(core.drain(0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).count(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
              ],
              "code": [
                "{",
                "    let mut core = IndexMapCore::<usize, usize>::new();",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "        core.entries.push(Bucket { hash: HashValue::default(), key: i, value: i as usize });",
                "    }",
                "    let _drained = core.drain(0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(core.len(), 0);",
                "    assert!(core.entries.is_empty());",
                "    assert!(core.indices.is_empty());",
                "    assert_eq!(core.capacity(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    assert_eq!(core.entries.len(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "    for i in 0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY {",
                "    assert_eq!(core.entries[i].key, i);",
                "    assert_eq!(core.entries[i].value, i as usize);",
                "    }",
                "    assert_eq!(core.drain(0..0).count(), 0);",
                "    assert_eq!(core.drain(0..1).count(), 1);",
                "    assert_eq!(core.len(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY - 1);",
                "    assert!(core.entries.get(0).is_none());",
                "    assert_eq!(core.drain(0..IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY).count(), IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}