{
  "name": "indexmap::{impl#3}::from_alloc",
  "mod_info": {
    "name": "",
    "loc": "src/lib.rs:2:1:271:46"
  },
  "visible": true,
  "loc": "src/lib.rs:233:5:237:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "expected return value/type: Self {\n            kind: TryReserveErrorKind::Std(error),\n        }\n"
      ],
      "input_infer": "alloc::collections::TryReserveError instances covering normal cases, edge cases for capacity limits, and scenarios triggering AllocError with various layouts.\n",
      "answers": [
        {
          "uses": [
            "use alloc::alloc::Layout;",
            "use alloc::collections::TryReserveError;"
          ],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let result = TryReserveError::from_alloc(error);",
                "}"
              ],
              "oracle": [
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let expected_kind = TryReserveErrorKind::Std(error);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert!(matches!(result.kind, TryReserveErrorKind::Std(_)));"
              ],
              "code": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let result = TryReserveError::from_alloc(error);",
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let expected_kind = TryReserveErrorKind::Std(error);",
                "    assert_eq!(result.kind, expected_kind);",
                "    assert!(matches!(result.kind, TryReserveErrorKind::Std(_)));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_alloc(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityOverflow));"
              ],
              "code": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityOverflow;",
                "    let result = TryReserveError::from_alloc(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityOverflow));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    use alloc::alloc::Layout;",
                "",
                "    let layout = Layout::new::<u32>();",
                "    let error = TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_alloc(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(error));"
              ],
              "code": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    use alloc::alloc::Layout;",
                "",
                "    let layout = Layout::new::<u32>();",
                "    let error = TryReserveError::AllocError { layout };",
                "    let result = TryReserveError::from_alloc(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(error));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let result = TryReserveError::from_alloc(error);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityLimitExceeded));"
              ],
              "code": [
                "{",
                "    use alloc::collections::TryReserveError;",
                "    let error = TryReserveError::CapacityLimitExceeded;",
                "    let result = TryReserveError::from_alloc(error);",
                "    assert_eq!(result.kind, TryReserveErrorKind::Std(TryReserveError::CapacityLimitExceeded));",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}