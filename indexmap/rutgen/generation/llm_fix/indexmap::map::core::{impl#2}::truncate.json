{
  "name": "indexmap::map::core::{impl#2}::truncate",
  "mod_info": {
    "name": "map::core",
    "loc": "src/map.rs:4:1:4:10"
  },
  "visible": true,
  "loc": "src/map/core.rs:179:5:184:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: len < self.len() at line 180 is true\n"
      ],
      "input_infer": "len: 0 to (self.len() - 1) where self.len() represents the current number of entries in the IndexMapCore instance\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..5 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), current_len - 1);",
                "    assert!(map.entries.len() <= current_len - 1);",
                "    assert!(map.indices.len() <= current_len - 1);",
                "    assert!(map.entries.len() < current_len);"
              ],
              "code": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..5 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 1);",
                "    assert_eq!(map.len(), current_len - 1);",
                "    assert!(map.entries.len() <= current_len - 1);",
                "    assert!(map.indices.len() <= current_len - 1);",
                "    assert!(map.entries.len() < current_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..3 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 1);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), current_len - 1);",
                "    assert!(map.entries.len() == current_len - 1);",
                "    assert!(map.indices.len() < current_len);",
                "    assert!(map.entries.get(current_len - 1).is_none());",
                "    assert!(map.entries.get(current_len - 2).is_some());",
                "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);"
              ],
              "code": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..3 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 1);",
                "    assert_eq!(map.len(), current_len - 1);",
                "    assert!(map.entries.len() == current_len - 1);",
                "    assert!(map.indices.len() < current_len);",
                "    assert!(map.entries.get(current_len - 1).is_none());",
                "    assert!(map.entries.get(current_len - 2).is_some());",
                "    assert!(map.entries.len() <= IndexMapCore::<usize, usize>::MAX_ENTRIES_CAPACITY);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..10 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 2);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(map.len(), current_len - 2);",
                "    assert_eq!(map.entries.len(), current_len - 2);",
                "    assert!(map.indices.len() <= current_len - 2);",
                "    assert!(map.entries.iter().all(|entry| entry.key < current_len));",
                "    assert!(map.entries.iter().all(|entry| entry.value < current_len));",
                "    assert!(map.len() < current_len);",
                "    assert!(map.entries.len() < current_len);",
                "    assert!(map.indices.len() < current_len);"
              ],
              "code": [
                "{",
                "    struct TestEntry {",
                "        hash: HashValue,",
                "        key: usize,",
                "        value: usize,",
                "    }",
                "",
                "    let mut map = IndexMapCore::new();",
                "    for i in 0..10 {",
                "        map.push_entry(HashValue::from(i), i, i);",
                "    }",
                "    let current_len = map.len();",
                "",
                "    map.truncate(current_len - 2);",
                "    assert_eq!(map.len(), current_len - 2);",
                "    assert_eq!(map.entries.len(), current_len - 2);",
                "    assert!(map.indices.len() <= current_len - 2);",
                "    assert!(map.entries.iter().all(|entry| entry.key < current_len));",
                "    assert!(map.entries.iter().all(|entry| entry.value < current_len));",
                "    assert!(map.len() < current_len);",
                "    assert!(map.entries.len() < current_len);",
                "    assert!(map.indices.len() < current_len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: len < self.len() at line 180 is false, with bound len == self.len()\n"
      ],
      "input_infer": "len = self.len() (where self.len() > 0), with possible values for len as 0, and edge case where len equals MAX_ENTRIES_CAPACITY.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::with_capacity(5);",
                "    let hash = HashValue::default();",
                "    index_map.push_entry(hash, 1, \"value1\");",
                "    index_map.push_entry(hash, 2, \"value2\");",
                "    ",
                "    let len = index_map.len();",
                "    index_map.truncate(len);",
                "}"
              ],
              "oracle": [
                "    index_map.len() == len",
                "    index_map.entries.len() == 2",
                "    index_map.indices.len() == 2",
                "    index_map.capacity() >= 5"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::with_capacity(5);",
                "    let hash = HashValue::default();",
                "    index_map.push_entry(hash, 1, \"value1\");",
                "    index_map.push_entry(hash, 2, \"value2\");",
                "    ",
                "    let len = index_map.len();",
                "    index_map.truncate(len);",
                "    index_map.len() == len",
                "    index_map.entries.len() == 2",
                "    index_map.indices.len() == 2",
                "    index_map.capacity() >= 5",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let mut index_map = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    let hash = HashValue::default();",
                "    ",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        index_map.push_entry(hash, i, format!(\"value{}\", i));",
                "    }",
                "    ",
                "    let len = index_map.len();",
                "    index_map.truncate(len);",
                "}"
              ],
              "oracle": [
                "    assert_eq!(index_map.len(), len);",
                "    assert_eq!(index_map.entries.len(), len);",
                "    assert!(!index_map.entries.is_empty());",
                "    assert!(index_map.indices.len() <= len);"
              ],
              "code": [
                "{",
                "    let mut index_map = IndexMapCore::with_capacity(IndexMapCore::MAX_ENTRIES_CAPACITY);",
                "    let hash = HashValue::default();",
                "    ",
                "    for i in 0..IndexMapCore::MAX_ENTRIES_CAPACITY {",
                "        index_map.push_entry(hash, i, format!(\"value{}\", i));",
                "    }",
                "    ",
                "    let len = index_map.len();",
                "    index_map.truncate(len);",
                "    assert_eq!(index_map.len(), len);",
                "    assert_eq!(index_map.entries.len(), len);",
                "    assert!(!index_map.entries.is_empty());",
                "    assert!(index_map.indices.len() <= len);",
                "}"
              ],
              "can_compile": false,
              "repaired": false
            }
          ]
        }
      ]
    }
  ]
}