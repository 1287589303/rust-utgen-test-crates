{
  "name": "indexmap::map::slice::{impl#1}::split_first",
  "mod_info": {
    "name": "map::slice",
    "loc": "src/map.rs:7:1:7:11"
  },
  "visible": true,
  "loc": "src/map/slice.rs:142:5:148:6",
  "fn_tests": [
    {
      "chain_id": 1,
      "prompt_conds": [
        "precondition: let [first, rest @ ..] = &self.entries at line 143 is true\n",
        "expected return value/type: Some((first.refs(), Self::from_slice(rest)))\n"
      ],
      "input_infer": "Input conditions or ranges: non-empty Slice with at least one entry (e.g., Slice with 1 to N Bucket<K, V>) where Bucket<K, V> contains valid key-value pairs, ensuring K and V types are correctly instantiated.\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let entries = [",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "    ];",
                "",
                "    let slice = Slice { entries };",
                "    ",
                "    let result = slice.split_first();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (first_pair, rest_slice) = result.unwrap();",
                "    assert_eq!(first_pair.0, &slice.entries[0].key);",
                "    assert_eq!(first_pair.1, &slice.entries[0].value);",
                "    assert_eq!(rest_slice.len(), 1);",
                "    assert_eq!(rest_slice.get_index(0).unwrap(), (&slice.entries[1].key, &slice.entries[1].value));"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let entries = [",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "    ];",
                "",
                "    let slice = Slice { entries };",
                "    ",
                "    let result = slice.split_first();",
                "    assert!(result.is_some());",
                "    let (first_pair, rest_slice) = result.unwrap();",
                "    assert_eq!(first_pair.0, &slice.entries[0].key);",
                "    assert_eq!(first_pair.1, &slice.entries[0].value);",
                "    assert_eq!(rest_slice.len(), 1);",
                "    assert_eq!(rest_slice.get_index(0).unwrap(), (&slice.entries[1].key, &slice.entries[1].value));",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let entries = [",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "    ];",
                "",
                "    let slice = Slice { entries };",
                "    ",
                "    let result = slice.split_first();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (first, rest) = result.unwrap();",
                "    assert_eq!(first, (&TestKey, &TestValue));",
                "    assert!(rest.is_empty());"
              ],
              "code": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let entries = [",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "    ];",
                "",
                "    let slice = Slice { entries };",
                "    ",
                "    let result = slice.split_first();",
                "    assert!(result.is_some());",
                "    let (first, rest) = result.unwrap();",
                "    assert_eq!(first, (&TestKey, &TestValue));",
                "    assert!(rest.is_empty());",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    struct TestKey;",
                "    struct TestValue;",
                "",
                "    let entries = [",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "        Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },",
                "    ];",
                "",
                "    let slice = Slice { entries };",
                "    ",
                "    let result = slice.split_first();",
                "}"
              ],
              "oracle": [
                "    assert!(result.is_some());",
                "    let (first_pair, rest_slice) = result.unwrap();",
                "    assert_eq!(first_pair, (&TestKey, &TestValue));",
                "    assert_eq!(rest_slice.len(), 2);"
              ],
              "code": [
                "{",
                " #[derive(Debug, PartialEq)]  ",
                " struct TestKey;  ",
                " #[derive(Debug, PartialEq)]  ",
                " struct TestValue;  ",
                "  let entries = [  ",
                "      Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },  ",
                "      Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },  ",
                "      Bucket { hash: HashValue::default(), key: TestKey, value: TestValue },  ",
                "  ];  ",
                " ",
                "  let slice = Slice { entries };  ",
                " ",
                "  let result = slice.split_first();  ",
                "  assert!(result.is_some());  ",
                "  let (first_pair, rest_slice) = result.unwrap();  ",
                " assert_eq!(first_pair, (&TestKey, &TestValue));  ",
                " ",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    },
    {
      "chain_id": 2,
      "prompt_conds": [
        "precondition: let [first, rest @ ..] = &self.entries at line 143 is false\n",
        "expected return value/type: None\n"
      ],
      "input_infer": "self.entries is an empty slice or self.entries has only one element (i.e., size 0 or 1)\n",
      "answers": [
        {
          "uses": [],
          "has_test_mod": false,
          "common": [],
          "chain_tests": [
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first();",
                "}"
              ],
              "oracle": [
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first();",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            },
            {
              "attrs": [],
              "prefix": [
                "{",
                "    let entry = Bucket { hash: HashValue::default(), key: 1, value: 2 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [entry] });",
                "    let result = slice.split_first();",
                "}"
              ],
              "oracle": [
                "    let entry = Bucket { hash: HashValue::default(), key: 1, value: 2 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first();",
                "    assert_eq!(result, None);"
              ],
              "code": [
                "{",
                "    let entry = Bucket { hash: HashValue::default(), key: 1, value: 2 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [entry] });",
                "    let result = slice.split_first();",
                "    let entry = Bucket { hash: HashValue::default(), key: 1, value: 2 };",
                "    let slice: Box<Slice<i32, i32>> = Box::new(Slice { entries: [] });",
                "    let result = slice.split_first();",
                "    assert_eq!(result, None);",
                "}"
              ],
              "can_compile": false,
              "repaired": true
            }
          ]
        }
      ]
    }
  ]
}