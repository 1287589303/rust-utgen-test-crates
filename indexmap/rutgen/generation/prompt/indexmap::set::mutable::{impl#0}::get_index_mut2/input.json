{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/set/mutable.rs\n// crate name is indexmap\nuse core::hash::{BuildHasher, Hash};\nuse super::{Equivalent, IndexSet};\nuse crate::map::MutableKeys;\npub trait MutableValues: private::Sealed {\n    type Value;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Value>;\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Value) -> bool;\n}\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait Sealed {}\n#[cfg(not(feature = \"std\"))]\npub struct IndexSet<T, S> {\n    pub(crate) map: IndexMap<T, (), S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\nimpl<T, S> MutableValues for IndexSet<T, S>\nwhere\n    S: BuildHasher,\n{\n    type Value = T;\n    fn get_full_mut2<Q>(&mut self, value: &Q) -> Option<(usize, &mut T)>\n    where\n        Q: ?Sized + Hash + Equivalent<T>,\n    {}\n    fn get_index_mut2(&mut self, index: usize) -> Option<&mut T> {\n        match self.map.get_index_mut2(index) {\n            Some((value, ())) => Some(value),\n            None => None,\n        }\n    }\n    fn retain2<F>(&mut self, mut keep: F)\n    where\n        F: FnMut(&mut T) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n67 fn get_index_mut2(&mut self, index: usize) -> Option<&mut T> {\n68     match self.map.get_index_mut2(index) {\n69         Some((value, ())) => Some(value),\n70         None => None,\n71     }\n72 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}