{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map.rs\n// crate name is indexmap\npub use self::core::raw_entry_v1::{self, RawEntryApiV1};\npub use self::core::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\npub use self::iter::{\n    Drain, IntoIter, IntoKeys, IntoValues, Iter, IterMut, IterMut2, Keys, Splice, Values,\n    ValuesMut,\n};\npub use self::mutable::MutableEntryKey;\npub use self::mutable::MutableKeys;\npub use self::slice::Slice;\n#[cfg(feature = \"rayon\")]\npub use crate::rayon::map as rayon;\nuse ::core::cmp::Ordering;\nuse ::core::fmt;\nuse ::core::hash::{BuildHasher, Hash, Hasher};\nuse ::core::mem;\nuse ::core::ops::{Index, IndexMut, RangeBounds};\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\n#[cfg(feature = \"std\")]\nuse std::collections::hash_map::RandomState;\nuse self::core::IndexMapCore;\nuse crate::util::{third, try_simplify_range};\nuse crate::{Bucket, Entries, Equivalent, HashValue, TryReserveError};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\npub trait RawEntryApiV1<K, V, S>: private::Sealed {\n    fn raw_entry_v1(&self) -> RawEntryBuilder<'_, K, V, S>;\n    fn raw_entry_mut_v1(&mut self) -> RawEntryBuilderMut<'_, K, V, S>;\n}\npub trait MutableKeys: private::Sealed {\n    type Key;\n    type Value;\n    fn get_full_mut2<Q>(\n        &mut self,\n        key: &Q,\n    ) -> Option<(usize, &mut Self::Key, &mut Self::Value)>\n    where\n        Q: ?Sized + Hash + Equivalent<Self::Key>;\n    fn get_index_mut2(\n        &mut self,\n        index: usize,\n    ) -> Option<(&mut Self::Key, &mut Self::Value)>;\n    fn iter_mut2(&mut self) -> IterMut2<'_, Self::Key, Self::Value>;\n    fn retain2<F>(&mut self, keep: F)\n    where\n        F: FnMut(&mut Self::Key, &mut Self::Value) -> bool;\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\npub struct VacantEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    hash: HashValue,\n    key: K,\n}\npub struct OccupiedEntry<'a, K, V> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\npub enum Entry<'a, K, V> {\n    /// Existing slot with equivalent key.\n    Occupied(OccupiedEntry<'a, K, V>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(VacantEntry<'a, K, V>),\n}\nimpl<K, V, S> IndexMap<K, V, S>\nwhere\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    pub fn insert(&mut self, key: K, value: V) -> Option<V> {}\n    pub fn insert_full(&mut self, key: K, value: V) -> (usize, Option<V>) {}\n    pub fn insert_sorted(&mut self, key: K, value: V) -> (usize, Option<V>)\n    where\n        K: Ord,\n    {}\n    #[track_caller]\n    pub fn insert_before(\n        &mut self,\n        mut index: usize,\n        key: K,\n        value: V,\n    ) -> (usize, Option<V>) {\n        let len = self.len();\n        assert!(\n            index <= len,\n            \"index out of bounds: the len is {len} but the index is {index}. Expected index <= len\"\n        );\n        match self.entry(key) {\n            Entry::Occupied(mut entry) => {\n                if index > entry.index() {\n                    index -= 1;\n                }\n                let old = mem::replace(entry.get_mut(), value);\n                entry.move_index(index);\n                (index, Some(old))\n            }\n            Entry::Vacant(entry) => {\n                entry.shift_insert(index, value);\n                (index, None)\n            }\n        }\n    }\n    #[track_caller]\n    pub fn shift_insert(&mut self, index: usize, key: K, value: V) -> Option<V> {}\n    pub fn entry(&mut self, key: K) -> Entry<'_, K, V> {\n        let hash = self.hash(&key);\n        self.core.entry(hash, key)\n    }\n    #[track_caller]\n    pub fn splice<R, I>(\n        &mut self,\n        range: R,\n        replace_with: I,\n    ) -> Splice<'_, I::IntoIter, K, V, S>\n    where\n        R: RangeBounds<usize>,\n        I: IntoIterator<Item = (K, V)>,\n    {}\n    pub fn append<S2>(&mut self, other: &mut IndexMap<K, V, S2>) {}\n}\nimpl<'a, K, V> VacantEntry<'a, K, V> {\n    pub fn index(&self) -> usize {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn into_key(self) -> K {}\n    pub fn insert(self, value: V) -> &'a mut V {}\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {}\n    pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)\n    where\n        K: Ord,\n    {}\n    pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {\n        self.map.shift_insert_unique(index, self.hash, self.key, value);\n        &mut self.map.entries[index].value\n    }\n}\nimpl<'a, K, V> OccupiedEntry<'a, K, V> {\n    pub(crate) fn new(\n        entries: &'a mut Entries<K, V>,\n        index: hash_table::OccupiedEntry<'a, usize>,\n    ) -> Self {\n        Self { entries, index }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {\n        *self.index.get()\n    }\n    #[inline]\n    fn into_ref_mut(self) -> RefMut<'a, K, V> {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {\n        let index = self.index();\n        &mut self.entries[index].value\n    }\n    pub fn into_mut(self) -> &'a mut V {}\n    pub(super) fn into_muts(self) -> (&'a mut K, &'a mut V) {}\n    pub fn insert(&mut self, value: V) -> V {}\n    #[deprecated(\n        note = \"`remove` disrupts the map order -- \\\n        use `swap_remove` or `shift_remove` for explicit behavior.\"\n    )]\n    pub fn remove(self) -> V {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[deprecated(\n        note = \"`remove_entry` disrupts the map order -- \\\n        use `swap_remove_entry` or `shift_remove_entry` for explicit behavior.\"\n    )]\n    pub fn remove_entry(self) -> (K, V) {}\n    pub fn swap_remove_entry(self) -> (K, V) {}\n    pub fn shift_remove_entry(self) -> (K, V) {}\n    #[track_caller]\n    pub fn move_index(self, to: usize) {\n        let index = self.index();\n        self.into_ref_mut().move_index(index, to);\n    }\n    pub fn swap_indices(self, other: usize) {}\n}\nimpl<K, V, S> IndexMap<K, V, S> {\n    #[inline]\n    pub fn with_capacity_and_hasher(n: usize, hash_builder: S) -> Self {\n        if n == 0 {\n            Self::with_hasher(hash_builder)\n        } else {\n            IndexMap {\n                core: IndexMapCore::with_capacity(n),\n                hash_builder,\n            }\n        }\n    }\n    pub const fn with_hasher(hash_builder: S) -> Self {\n        IndexMap {\n            core: IndexMapCore::new(),\n            hash_builder,\n        }\n    }\n    pub fn capacity(&self) -> usize {}\n    pub fn hasher(&self) -> &S {}\n    #[inline]\n    pub fn len(&self) -> usize {\n        self.core.len()\n    }\n    #[inline]\n    pub fn is_empty(&self) -> bool {}\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    pub fn into_keys(self) -> IntoKeys<K, V> {}\n    pub fn values(&self) -> Values<'_, K, V> {}\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    pub fn into_values(self) -> IntoValues<K, V> {}\n    pub fn clear(&mut self) {}\n    pub fn truncate(&mut self, len: usize) {}\n    #[track_caller]\n    pub fn drain<R>(&mut self, range: R) -> Drain<'_, K, V>\n    where\n        R: RangeBounds<usize>,\n    {}\n    #[track_caller]\n    pub fn split_off(&mut self, at: usize) -> Self\n    where\n        S: Clone,\n    {\n        Self {\n            core: self.core.split_off(at),\n            hash_builder: self.hash_builder.clone(),\n        }\n    }\n    pub fn reserve(&mut self, additional: usize) {}\n    pub fn reserve_exact(&mut self, additional: usize) {}\n    pub fn try_reserve(&mut self, additional: usize) -> Result<(), TryReserveError> {}\n    pub fn try_reserve_exact(\n        &mut self,\n        additional: usize,\n    ) -> Result<(), TryReserveError> {}\n    pub fn shrink_to_fit(&mut self) {}\n    pub fn shrink_to(&mut self, min_capacity: usize) {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Insert a key-value pair in the map before the entry at the given index, or at the end.\n///\n/// If an equivalent key already exists in the map: the key remains and\n/// is moved to the new position in the map, its corresponding value is updated\n/// with `value`, and the older value is returned inside `Some(_)`. The returned index\n/// will either be the given index or one less, depending on how the entry moved.\n/// (See [`shift_insert`](Self::shift_insert) for different behavior here.)\n///\n/// If no equivalent key existed in the map: the new key-value pair is\n/// inserted exactly at the given index, and `None` is returned.\n///\n/// ***Panics*** if `index` is out of bounds.\n/// Valid indices are `0..=map.len()` (inclusive).\n///\n/// Computes in **O(n)** time (average).\n///\n/// See also [`entry`][Self::entry] if you want to insert *or* modify,\n/// perhaps only using the index for new entries with [`VacantEntry::shift_insert`].\n///\n/// # Examples\n///\n/// ```\n/// use indexmap::IndexMap;\n/// let mut map: IndexMap<char, ()> = ('a'..='z').map(|c| (c, ())).collect();\n///\n/// // The new key '*' goes exactly at the given index.\n/// assert_eq!(map.get_index_of(&'*'), None);\n/// assert_eq!(map.insert_before(10, '*', ()), (10, None));\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Moving the key 'a' up will shift others down, so this moves *before* 10 to index 9.\n/// assert_eq!(map.insert_before(10, 'a', ()), (9, Some(())));\n/// assert_eq!(map.get_index_of(&'a'), Some(9));\n/// assert_eq!(map.get_index_of(&'*'), Some(10));\n///\n/// // Moving the key 'z' down will shift others up, so this moves to exactly 10.\n/// assert_eq!(map.insert_before(10, 'z', ()), (10, Some(())));\n/// assert_eq!(map.get_index_of(&'z'), Some(10));\n/// assert_eq!(map.get_index_of(&'*'), Some(11));\n///\n/// // Moving or inserting before the endpoint is also valid.\n/// assert_eq!(map.len(), 27);\n/// assert_eq!(map.insert_before(map.len(), '*', ()), (26, Some(())));\n/// assert_eq!(map.get_index_of(&'*'), Some(26));\n/// assert_eq!(map.insert_before(map.len(), '+', ()), (27, None));\n/// assert_eq!(map.get_index_of(&'+'), Some(27));\n/// assert_eq!(map.len(), 28);\n/// ```\n499 pub fn insert_before(&mut self, mut index: usize, key: K, value: V) -> (usize, Option<V>) {\n500     let len = self.len();\n501 \n502     assert!(\n503         index <= len,\n504         \"index out of bounds: the len is {len} but the index is {index}. Expected index <= len\"\n505     );\n506 \n507     match self.entry(key) {\n508         Entry::Occupied(mut entry) => {\n509             if index > entry.index() {\n510                 // Some entries will shift down when this one moves up,\n511                 // so \"insert before index\" becomes \"move to index - 1\",\n512                 // keeping the entry at the original index unmoved.\n513                 index -= 1;\n514             }\n515             let old = mem::replace(entry.get_mut(), value);\n516             entry.move_index(index);\n517             (index, Some(old))\n518         }\n519         Entry::Vacant(entry) => {\n520             entry.shift_insert(index, value);\n521             (index, None)\n522         }\n523     }\n524 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}