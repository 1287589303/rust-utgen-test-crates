{
  "system_pt": "As a software testing expert, please generate Rust test functions based on the following guidelines, focusing solely on constructing test inputs and calling the functions under test:\n1. Provide the code in plain text format, without explanations or Markdown.\n2. If the method under test belongs to a trait, construct appropriate structs within the test function, but avoid method overrides. If the method under test uses generics, instantiate them with suitable types based on the context.\n3. Generate test code with minimal scope: avoid creating external structures or implementations. Instead, define any necessary helper structures or implementations directly within the test function when required.\n4. Whenever possible, initialize the corresponding data structures using the initialization methods provided in the context.\n5. Ensure the generated function is fully implemented and can be compiled and executed directly without any missing parts.\n6. Create a minimal yet complete set of test functions, ensuring they adhere to all provided preconditions and cover boundary conditions, and reference the inferred test input conditions or ranges.\n7. Ensure the test inputs are designed to cover the inferred test input conditions or ranges as comprehensively as possible, with particular emphasis on boundary cases.\n8. Focus on crafting test inputs that effectively reveal potential bugs while meeting the specified requirements.\n9. Omit test oracles and assertions; concentrate on generating test inputs and function calls.\n10. Do not create a test module, but include intrinsic attributes like #[test] or #[should_panic] where necessary.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/slice.rs\n// crate name is indexmap\nuse super::{\n    Bucket, Entries, IndexMap, IntoIter, IntoKeys, IntoValues, Iter, IterMut, Keys,\n    Values, ValuesMut,\n};\nuse crate::util::{slice_eq, try_simplify_range};\nuse alloc::boxed::Box;\nuse alloc::vec::Vec;\nuse core::cmp::Ordering;\nuse core::fmt;\nuse core::hash::{Hash, Hasher};\nuse core::ops::{self, Bound, Index, IndexMut, RangeBounds};\n#[repr(transparent)]\npub struct Slice<K, V> {\n    pub(crate) entries: [Bucket<K, V>],\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<K, V> Slice<K, V> {\n    pub(crate) fn into_entries(self: Box<Self>) -> Vec<Bucket<K, V>> {}\n    pub const fn new<'a>() -> &'a Self {\n        Self::from_slice(&[])\n    }\n    pub fn new_mut<'a>() -> &'a mut Self {\n        Self::from_mut_slice(&mut [])\n    }\n    #[inline]\n    pub const fn len(&self) -> usize {}\n    #[inline]\n    pub const fn is_empty(&self) -> bool {}\n    pub fn get_index(&self, index: usize) -> Option<(&K, &V)> {}\n    pub fn get_index_mut(&mut self, index: usize) -> Option<(&K, &mut V)> {}\n    pub fn get_range<R: RangeBounds<usize>>(&self, range: R) -> Option<&Self> {\n        let range = try_simplify_range(range, self.entries.len())?;\n        self.entries.get(range).map(Slice::from_slice)\n    }\n    pub fn get_range_mut<R: RangeBounds<usize>>(\n        &mut self,\n        range: R,\n    ) -> Option<&mut Self> {\n        let range = try_simplify_range(range, self.entries.len())?;\n        self.entries.get_mut(range).map(Slice::from_mut_slice)\n    }\n    pub fn first(&self) -> Option<(&K, &V)> {}\n    pub fn first_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn last(&self) -> Option<(&K, &V)> {}\n    pub fn last_mut(&mut self) -> Option<(&K, &mut V)> {}\n    pub fn split_at(&self, index: usize) -> (&Self, &Self) {\n        let (first, second) = self.entries.split_at(index);\n        (Self::from_slice(first), Self::from_slice(second))\n    }\n    pub fn split_at_mut(&mut self, index: usize) -> (&mut Self, &mut Self) {\n        let (first, second) = self.entries.split_at_mut(index);\n        (Self::from_mut_slice(first), Self::from_mut_slice(second))\n    }\n    pub fn split_first(&self) -> Option<((&K, &V), &Self)> {\n        if let [first, rest @ ..] = &self.entries {\n            Some((first.refs(), Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_first_mut(&mut self) -> Option<((&K, &mut V), &mut Self)> {\n        if let [first, rest @ ..] = &mut self.entries {\n            Some((first.ref_mut(), Self::from_mut_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_last(&self) -> Option<((&K, &V), &Self)> {\n        if let [rest @ .., last] = &self.entries {\n            Some((last.refs(), Self::from_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn split_last_mut(&mut self) -> Option<((&K, &mut V), &mut Self)> {\n        if let [rest @ .., last] = &mut self.entries {\n            Some((last.ref_mut(), Self::from_mut_slice(rest)))\n        } else {\n            None\n        }\n    }\n    pub fn iter(&self) -> Iter<'_, K, V> {}\n    pub fn iter_mut(&mut self) -> IterMut<'_, K, V> {}\n    pub fn keys(&self) -> Keys<'_, K, V> {}\n    pub fn into_keys(self: Box<Self>) -> IntoKeys<K, V> {}\n    pub fn values(&self) -> Values<'_, K, V> {}\n    pub fn values_mut(&mut self) -> ValuesMut<'_, K, V> {}\n    pub fn into_values(self: Box<Self>) -> IntoValues<K, V> {}\n    pub fn binary_search_keys(&self, x: &K) -> Result<usize, usize>\n    where\n        K: Ord,\n    {}\n    #[inline]\n    pub fn binary_search_by<'a, F>(&'a self, mut f: F) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> Ordering,\n    {}\n    #[inline]\n    pub fn binary_search_by_key<'a, B, F>(\n        &'a self,\n        b: &B,\n        mut f: F,\n    ) -> Result<usize, usize>\n    where\n        F: FnMut(&'a K, &'a V) -> B,\n        B: Ord,\n    {}\n    #[must_use]\n    pub fn partition_point<P>(&self, mut pred: P) -> usize\n    where\n        P: FnMut(&K, &V) -> bool,\n    {}\n}\n#[allow(unsafe_code)]\nimpl<K, V> Slice<K, V> {\n    pub(super) const fn from_slice(entries: &[Bucket<K, V>]) -> &Self {\n        unsafe { &*(entries as *const [Bucket<K, V>] as *const Self) }\n    }\n    pub(super) fn from_mut_slice(entries: &mut [Bucket<K, V>]) -> &mut Self {\n        unsafe { &mut *(entries as *mut [Bucket<K, V>] as *mut Self) }\n    }\n    pub(super) fn from_boxed(entries: Box<[Bucket<K, V>]>) -> Box<Self> {\n        unsafe { Box::from_raw(Box::into_raw(entries) as *mut Self) }\n    }\n    fn into_boxed(self: Box<Self>) -> Box<[Bucket<K, V>]> {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Divides one mutable slice into two at an index.\n///\n/// ***Panics*** if `index > len`.\n135 pub fn split_at_mut(&mut self, index: usize) -> (&mut Self, &mut Self) {\n136     let (first, second) = self.entries.split_at_mut(index);\n137     (Self::from_mut_slice(first), Self::from_mut_slice(second))\n138 }\n\nGenerate each test function in such a manner that it concurrently satisfies all the following preconditions:\n",
  "depend_pt": ""
}