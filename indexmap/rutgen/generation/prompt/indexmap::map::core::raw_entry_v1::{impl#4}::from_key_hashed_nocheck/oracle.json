{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawEntryBuilderMut<'a, K, V, S> {\n    map: &'a mut IndexMap<K, V, S>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\npub enum RawEntryMut<'a, K, V, S> {\n    /// Existing slot with equivalent key.\n    Occupied(RawOccupiedEntryMut<'a, K, V, S>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(RawVacantEntryMut<'a, K, V, S>),\n}\nimpl<'a, K, V, S> RawEntryBuilderMut<'a, K, V, S> {\n    pub fn from_key<Q>(self, key: &Q) -> RawEntryMut<'a, K, V, S>\n    where\n        S: BuildHasher,\n        Q: ?Sized + Hash + Equivalent<K>,\n    {}\n    pub fn from_key_hashed_nocheck<Q>(\n        self,\n        hash: u64,\n        key: &Q,\n    ) -> RawEntryMut<'a, K, V, S>\n    where\n        Q: ?Sized + Equivalent<K>,\n    {\n        self.from_hash(hash, |k| Q::equivalent(key, k))\n    }\n    pub fn from_hash<F>(self, hash: u64, mut is_match: F) -> RawEntryMut<'a, K, V, S>\n    where\n        F: FnMut(&K) -> bool,\n    {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Access an entry by a key and its hash.\n278 pub fn from_key_hashed_nocheck<Q>(self, hash: u64, key: &Q) -> RawEntryMut<'a, K, V, S>\n279 where\n280     Q: ?Sized + Equivalent<K>,\n281 {\n282     self.from_hash(hash, |k| Q::equivalent(key, k))\n283 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}