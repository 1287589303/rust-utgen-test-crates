{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nfn reserve_entries<K, V>(\n    entries: &mut Entries<K, V>,\n    additional: usize,\n    try_capacity: usize,\n) {\n    let try_capacity = try_capacity.min(IndexMapCore::<K, V>::MAX_ENTRIES_CAPACITY);\n    let try_add = try_capacity - entries.len();\n    if try_add > additional && entries.try_reserve_exact(try_add).is_ok() {\n        return;\n    }\n    entries.reserve_exact(additional);\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Reserve entries capacity, rounded up to match the indices (via `try_capacity`).\n526 fn reserve_entries<K, V>(entries: &mut Entries<K, V>, additional: usize, try_capacity: usize) {\n527     // Use a soft-limit on the maximum capacity, but if the caller explicitly\n528     // requested more, do it and let them have the resulting panic.\n529     let try_capacity = try_capacity.min(IndexMapCore::<K, V>::MAX_ENTRIES_CAPACITY);\n530     let try_add = try_capacity - entries.len();\n531     if try_add > additional && entries.try_reserve_exact(try_add).is_ok() {\n532         return;\n533     }\n534     entries.reserve_exact(additional);\n535 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}