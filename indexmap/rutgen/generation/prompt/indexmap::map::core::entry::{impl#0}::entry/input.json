{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\npub struct OccupiedEntry<'a, K, V> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n}\npub struct VacantEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    hash: HashValue,\n    key: K,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\npub enum Entry<'a, K, V> {\n    /// Existing slot with equivalent key.\n    Occupied(OccupiedEntry<'a, K, V>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(VacantEntry<'a, K, V>),\n}\nimpl<K, V> IndexMapCore<K, V> {\n    pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>\n    where\n        K: Eq,\n    {\n        let entries = &mut self.entries;\n        let eq = equivalent(&key, entries);\n        match self.indices.find_entry(hash.get(), eq) {\n            Ok(index) => Entry::Occupied(OccupiedEntry { entries, index }),\n            Err(absent) => {\n                Entry::Vacant(VacantEntry {\n                    map: RefMut::new(absent.into_table(), entries),\n                    hash,\n                    key,\n                })\n            }\n        }\n    }\n}\nimpl HashValue {\n    #[inline(always)]\n    fn get(self) -> u64 {\n        self.0 as u64\n    }\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {}\n    fn increment_indices(&mut self, start: usize, end: usize) {}\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {}\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n#[inline]\nfn equivalent<'a, K, V, Q: ?Sized + Equivalent<K>>(\n    key: &'a Q,\n    entries: &'a [Bucket<K, V>],\n) -> impl Fn(&usize) -> bool + 'a {\n    move |&i| Q::equivalent(key, &entries[i].key)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n 7 pub(crate) fn entry(&mut self, hash: HashValue, key: K) -> Entry<'_, K, V>\n 8 where\n 9     K: Eq,\n10 {\n11     let entries = &mut self.entries;\n12     let eq = equivalent(&key, entries);\n13     match self.indices.find_entry(hash.get(), eq) {\n14         Ok(index) => Entry::Occupied(OccupiedEntry { entries, index }),\n15         Err(absent) => Entry::Vacant(VacantEntry {\n16             map: RefMut::new(absent.into_table(), entries),\n17             hash,\n18             key,\n19         }),\n20     }\n21 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}