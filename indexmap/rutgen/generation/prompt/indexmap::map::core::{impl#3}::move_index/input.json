{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core.rs\n// crate name is indexmap\ntype Indices = hash_table::HashTable<usize>;\ntype Entries<K, V> = Vec<Bucket<K, V>>;\nuse hashbrown::hash_table;\nuse crate::vec::{self, Vec};\nuse crate::TryReserveError;\nuse core::mem;\nuse core::ops::RangeBounds;\nuse crate::util::simplify_range;\nuse crate::{Bucket, Equivalent, HashValue};\npub use entry::{Entry, IndexedEntry, OccupiedEntry, VacantEntry};\ntrait Entries {\n    type Entry;\n    fn into_entries(self) -> Vec<Self::Entry>;\n    fn as_entries(&self) -> &[Self::Entry];\n    fn as_entries_mut(&mut self) -> &mut [Self::Entry];\n    fn with_entries<F>(&mut self, f: F)\n    where\n        F: FnOnce(&mut [Self::Entry]);\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\n#[derive(Clone, Copy, Debug, PartialEq)]\nstruct HashValue(usize);\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<'a, K, V> RefMut<'a, K, V> {\n    #[inline]\n    fn new(indices: &'a mut Indices, entries: &'a mut Entries<K, V>) -> Self {\n        Self { indices, entries }\n    }\n    #[inline]\n    fn reserve_entries(&mut self, additional: usize) {}\n    fn insert_unique(\n        self,\n        hash: HashValue,\n        key: K,\n        value: V,\n    ) -> OccupiedEntry<'a, K, V> {}\n    fn shift_insert_unique(&mut self, index: usize, hash: HashValue, key: K, value: V) {}\n    fn shift_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn shift_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn swap_remove_index(&mut self, index: usize) -> Option<(K, V)> {}\n    fn swap_remove_finish(&mut self, index: usize) -> (K, V) {}\n    fn decrement_indices(&mut self, start: usize, end: usize) {\n        let shifted_entries = &self.entries[start..end];\n        if shifted_entries.len() > self.indices.capacity() / 2 {\n            for i in &mut *self.indices {\n                if start <= *i && *i < end {\n                    *i -= 1;\n                }\n            }\n        } else {\n            for (i, entry) in (start..end).zip(shifted_entries) {\n                update_index(self.indices, entry.hash, i, i - 1);\n            }\n        }\n    }\n    fn increment_indices(&mut self, start: usize, end: usize) {\n        let shifted_entries = &self.entries[start..end];\n        if shifted_entries.len() > self.indices.capacity() / 2 {\n            for i in &mut *self.indices {\n                if start <= *i && *i < end {\n                    *i += 1;\n                }\n            }\n        } else {\n            for (i, entry) in (start..end).zip(shifted_entries).rev() {\n                update_index(self.indices, entry.hash, i, i + 1);\n            }\n        }\n    }\n    #[track_caller]\n    fn move_index(&mut self, from: usize, to: usize) {\n        let from_hash = self.entries[from].hash;\n        let _ = self.entries[to];\n        if from != to {\n            update_index(self.indices, from_hash, from, usize::MAX);\n            if from < to {\n                self.decrement_indices(from + 1, to + 1);\n                self.entries[from..=to].rotate_left(1);\n            } else if to < from {\n                self.increment_indices(to, from);\n                self.entries[to..=from].rotate_right(1);\n            }\n            update_index(self.indices, from_hash, usize::MAX, to);\n        }\n    }\n    #[track_caller]\n    fn swap_indices(&mut self, a: usize, b: usize) {}\n}\n#[inline]\nfn update_index(table: &mut Indices, hash: HashValue, old: usize, new: usize) {\n    let index = table.find_mut(hash.get(), move |&i| i == old).expect(\"index not found\");\n    *index = new;\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n688 fn move_index(&mut self, from: usize, to: usize) {\n689     let from_hash = self.entries[from].hash;\n690     let _ = self.entries[to]; // explicit bounds check\n691     if from != to {\n692         // Use a sentinel index so other indices don't collide.\n693         update_index(self.indices, from_hash, from, usize::MAX);\n694 \n695         // Update all other indices and rotate the entry positions.\n696         if from < to {\n697             self.decrement_indices(from + 1, to + 1);\n698             self.entries[from..=to].rotate_left(1);\n699         } else if to < from {\n700             self.increment_indices(to, from);\n701             self.entries[to..=from].rotate_right(1);\n702         }\n703 \n704         // Change the sentinel index to its final position.\n705         update_index(self.indices, from_hash, usize::MAX, to);\n706     }\n707 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}