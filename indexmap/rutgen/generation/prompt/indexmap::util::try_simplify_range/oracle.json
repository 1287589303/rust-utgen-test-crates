{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\npub(crate) fn try_simplify_range<R>(range: R, len: usize) -> Option<Range<usize>>\nwhere\n    R: RangeBounds<usize>,\n{\n    let start = match range.start_bound() {\n        Bound::Unbounded => 0,\n        Bound::Included(&i) if i <= len => i,\n        Bound::Excluded(&i) if i < len => i + 1,\n        _ => return None,\n    };\n    let end = match range.end_bound() {\n        Bound::Unbounded => len,\n        Bound::Excluded(&i) if i <= len => i,\n        Bound::Included(&i) if i < len => i + 1,\n        _ => return None,\n    };\n    if start > end {\n        return None;\n    }\n    Some(start..end)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n38 pub(crate) fn try_simplify_range<R>(range: R, len: usize) -> Option<Range<usize>>\n39 where\n40     R: RangeBounds<usize>,\n41 {\n42     let start = match range.start_bound() {\n43         Bound::Unbounded => 0,\n44         Bound::Included(&i) if i <= len => i,\n45         Bound::Excluded(&i) if i < len => i + 1,\n46         _ => return None,\n47     };\n48     let end = match range.end_bound() {\n49         Bound::Unbounded => len,\n50         Bound::Excluded(&i) if i <= len => i,\n51         Bound::Included(&i) if i < len => i + 1,\n52         _ => return None,\n53     };\n54     if start > end {\n55         return None;\n56     }\n57     Some(start..end)\n58 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}