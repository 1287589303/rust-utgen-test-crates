{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\npub(crate) fn try_simplify_range<R>(range: R, len: usize) -> Option<Range<usize>>\nwhere\n    R: RangeBounds<usize>,\n{\n    let start = match range.start_bound() {\n        Bound::Unbounded => 0,\n        Bound::Included(&i) if i <= len => i,\n        Bound::Excluded(&i) if i < len => i + 1,\n        _ => return None,\n    };\n    let end = match range.end_bound() {\n        Bound::Unbounded => len,\n        Bound::Excluded(&i) if i <= len => i,\n        Bound::Included(&i) if i < len => i + 1,\n        _ => return None,\n    };\n    if start > end {\n        return None;\n    }\n    Some(start..end)\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n38 pub(crate) fn try_simplify_range<R>(range: R, len: usize) -> Option<Range<usize>>\n39 where\n40     R: RangeBounds<usize>,\n41 {\n42     let start = match range.start_bound() {\n43         Bound::Unbounded => 0,\n44         Bound::Included(&i) if i <= len => i,\n45         Bound::Excluded(&i) if i < len => i + 1,\n46         _ => return None,\n47     };\n48     let end = match range.end_bound() {\n49         Bound::Unbounded => len,\n50         Bound::Excluded(&i) if i <= len => i,\n51         Bound::Included(&i) if i < len => i + 1,\n52         _ => return None,\n53     };\n54     if start > end {\n55         return None;\n56     }\n57     Some(start..end)\n58 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}