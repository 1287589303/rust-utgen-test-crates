{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/raw_entry_v1.rs\n// crate name is indexmap\nuse super::{Entries, RefMut};\nuse crate::{Equivalent, HashValue, IndexMap};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash, Hasher};\nuse core::marker::PhantomData;\nuse core::mem;\nuse hashbrown::hash_table;\npub struct RawVacantEntryMut<'a, K, V, S> {\n    map: RefMut<'a, K, V>,\n    hash_builder: &'a S,\n}\nstruct RefMut<'a, K, V> {\n    indices: &'a mut Indices,\n    entries: &'a mut Entries<K, V>,\n}\nimpl<'a, K, V, S> RawVacantEntryMut<'a, K, V, S> {\n    pub fn index(&self) -> usize {}\n    pub fn insert(self, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {}\n    pub fn insert_hashed_nocheck(\n        self,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {}\n    pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)\n    where\n        K: Hash,\n        S: BuildHasher,\n    {\n        let mut h = self.hash_builder.build_hasher();\n        key.hash(&mut h);\n        self.shift_insert_hashed_nocheck(index, h.finish(), key, value)\n    }\n    pub fn shift_insert_hashed_nocheck(\n        mut self,\n        index: usize,\n        hash: u64,\n        key: K,\n        value: V,\n    ) -> (&'a mut K, &'a mut V) {\n        let hash = HashValue(hash as usize);\n        self.map.shift_insert_unique(index, hash, key, value);\n        self.map.entries[index].muts()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Inserts the given key and value into the map at the given index,\n/// shifting others to the right, and returns mutable references to them.\n///\n/// ***Panics*** if `index` is out of bounds.\n///\n/// Computes in **O(n)** time (average).\n632 pub fn shift_insert(self, index: usize, key: K, value: V) -> (&'a mut K, &'a mut V)\n633 where\n634     K: Hash,\n635     S: BuildHasher,\n636 {\n637     let mut h = self.hash_builder.build_hasher();\n638     key.hash(&mut h);\n639     self.shift_insert_hashed_nocheck(index, h.finish(), key, value)\n640 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}