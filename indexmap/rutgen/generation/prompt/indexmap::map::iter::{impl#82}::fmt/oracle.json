{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/iter.rs\n// crate name is indexmap\nuse super::core::IndexMapCore;\nuse super::{Bucket, Entries, IndexMap, Slice};\nuse alloc::vec::{self, Vec};\nuse core::fmt;\nuse core::hash::{BuildHasher, Hash};\nuse core::iter::FusedIterator;\nuse core::ops::{Index, RangeBounds};\nuse core::slice;\npub struct Splice<'a, I, K, V, S>\nwhere\n    I: Iterator<Item = (K, V)>,\n    K: Hash + Eq,\n    S: BuildHasher,\n{\n    map: &'a mut IndexMap<K, V, S>,\n    tail: IndexMapCore<K, V>,\n    drain: vec::IntoIter<Bucket<K, V>>,\n    replace_with: I,\n}\n#[derive(Clone)]\npub struct IntoIter<K, V> {\n    iter: vec::IntoIter<Bucket<K, V>>,\n}\n#[derive(Debug)]\npub(crate) struct IndexMapCore<K, V> {\n    /// indices mapping from the entry hash to its index.\n    indices: Indices,\n    /// entries is a dense vec maintaining entry order.\n    entries: Entries<K, V>,\n}\n#[derive(Clone)]\npub struct IntoIter<T> {\n    iter: vec::IntoIter<Bucket<T>>,\n}\n#[cfg(not(feature = \"std\"))]\npub struct IndexMap<K, V, S> {\n    pub(crate) core: IndexMapCore<K, V>,\n    hash_builder: S,\n}\n#[derive(Copy, Debug)]\nstruct Bucket<K, V> {\n    hash: HashValue,\n    key: K,\n    value: V,\n}\nimpl<I, K, V, S> fmt::Debug for Splice<'_, I, K, V, S>\nwhere\n    I: fmt::Debug + Iterator<Item = (K, V)>,\n    K: fmt::Debug + Hash + Eq,\n    V: fmt::Debug,\n    S: BuildHasher,\n{\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n        f.debug_struct(\"Splice\")\n            .field(\"drain\", &self.drain)\n            .field(\"replace_with\", &self.replace_with)\n            .finish()\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n769 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n770     // Follow `vec::Splice` in only printing the drain and replacement\n771     f.debug_struct(\"Splice\")\n772         .field(\"drain\", &self.drain)\n773         .field(\"replace_with\", &self.replace_with)\n774         .finish()\n775 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}