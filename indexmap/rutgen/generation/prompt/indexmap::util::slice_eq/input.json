{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\npub(crate) fn slice_eq<T, U>(\n    left: &[T],\n    right: &[U],\n    eq: impl Fn(&T, &U) -> bool,\n) -> bool {\n    if left.len() != right.len() {\n        return false;\n    }\n    for i in 0..left.len() {\n        if !eq(&left[i], &right[i]) {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n62 pub(crate) fn slice_eq<T, U>(left: &[T], right: &[U], eq: impl Fn(&T, &U) -> bool) -> bool {\n63     if left.len() != right.len() {\n64         return false;\n65     }\n66 \n67     // Implemented as explicit indexing rather\n68     // than zipped iterators for performance reasons.\n69     // See PR https://github.com/rust-lang/rust/pull/116846\n70     for i in 0..left.len() {\n71         // bound checks are optimized away\n72         if !eq(&left[i], &right[i]) {\n73             return false;\n74         }\n75     }\n76 \n77     true\n78 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}