{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/util.rs\n// crate name is indexmap\nuse core::ops::{Bound, Range, RangeBounds};\npub(crate) fn slice_eq<T, U>(\n    left: &[T],\n    right: &[U],\n    eq: impl Fn(&T, &U) -> bool,\n) -> bool {\n    if left.len() != right.len() {\n        return false;\n    }\n    for i in 0..left.len() {\n        if !eq(&left[i], &right[i]) {\n            return false;\n        }\n    }\n    true\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n62 pub(crate) fn slice_eq<T, U>(left: &[T], right: &[U], eq: impl Fn(&T, &U) -> bool) -> bool {\n63     if left.len() != right.len() {\n64         return false;\n65     }\n66 \n67     // Implemented as explicit indexing rather\n68     // than zipped iterators for performance reasons.\n69     // See PR https://github.com/rust-lang/rust/pull/116846\n70     for i in 0..left.len() {\n71         // bound checks are optimized away\n72         if !eq(&left[i], &right[i]) {\n73             return false;\n74         }\n75     }\n76 \n77     true\n78 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}