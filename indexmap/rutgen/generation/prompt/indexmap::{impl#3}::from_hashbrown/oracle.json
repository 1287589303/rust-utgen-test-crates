{
  "system_pt": "As a software testing expert, please generate accurate test oracles code based on the provided information. Follow these guidelines:\n1. Generate executable test oracle codes in plain text format, one per line. Do not output complete test functions, avoid additional explanations, and do not use Markdown.\n2. Combine the given function under test, context, relevant documentation, preconditions, expected return values or types, test input conditions or ranges, and existing test function prefixes to infer and generate corresponding test oracles code.\n3. Only generate necessary test oracles to ensure comprehensive validation.\n",
  "static_pt": "The context for the focal function is as follows:\n// src/lib.rs\n// crate name is indexmap\nuse alloc::vec::{self, Vec};\npub use crate::map::IndexMap;\npub use crate::set::IndexSet;\npub use equivalent::Equivalent;\n#[derive(Clone, PartialEq, Eq, Debug)]\npub struct TryReserveError {\n    kind: TryReserveErrorKind,\n}\n#[derive(Clone, PartialEq, Eq, Debug)]\nenum TryReserveErrorKind {\n    Std(alloc::collections::TryReserveError),\n    CapacityOverflow,\n    AllocError { layout: alloc::alloc::Layout },\n}\nimpl TryReserveError {\n    fn from_alloc(error: alloc::collections::TryReserveError) -> Self {\n        Self {\n            kind: TryReserveErrorKind::Std(error),\n        }\n    }\n    fn from_hashbrown(error: hashbrown::TryReserveError) -> Self {\n        Self {\n            kind: match error {\n                hashbrown::TryReserveError::CapacityOverflow => {\n                    TryReserveErrorKind::CapacityOverflow\n                }\n                hashbrown::TryReserveError::AllocError { layout } => {\n                    TryReserveErrorKind::AllocError {\n                        layout,\n                    }\n                }\n            },\n        }\n    }\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n239 fn from_hashbrown(error: hashbrown::TryReserveError) -> Self {\n240     Self {\n241         kind: match error {\n242             hashbrown::TryReserveError::CapacityOverflow => {\n243                 TryReserveErrorKind::CapacityOverflow\n244             }\n245             hashbrown::TryReserveError::AllocError { layout } => {\n246                 TryReserveErrorKind::AllocError { layout }\n247             }\n248         },\n249     }\n250 }\n\nThe path conditions that the generated test functions should satisfy are as follows:\n"
}