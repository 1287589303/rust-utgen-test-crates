{
  "system_pt": "As a software testing expert, infer the test input conditions or ranges based on the provided information. Follow these guidelines:\n1. Provide test input conditions or ranges in one line in plain text only, without additional explanations or Markdown formatting\n2. Analyze the function under test, context, preconditions, and expected return values or types to determine appropriate test input conditions or ranges\n3. The inferred test input conditions or ranges should comprehensively satisfy all provided preconditions simultaneously.\n4. Ensure the test input conditions or ranges cover boundary cases and edge scenarios\n",
  "static_pt": "The context for the focal function is as follows:\n// src/map/core/entry.rs\n// crate name is indexmap\nuse super::{equivalent, Entries, IndexMapCore, RefMut};\nuse crate::HashValue;\nuse core::{fmt, mem};\nuse hashbrown::hash_table;\npub struct OccupiedEntry<'a, K, V> {\n    entries: &'a mut Entries<K, V>,\n    index: hash_table::OccupiedEntry<'a, usize>,\n}\npub struct VacantEntry<'a, K, V> {\n    map: RefMut<'a, K, V>,\n    hash: HashValue,\n    key: K,\n}\npub enum Entry<'a, K, V> {\n    /// Existing slot with equivalent key.\n    Occupied(OccupiedEntry<'a, K, V>),\n    /// Vacant slot (no equivalent key in the map).\n    Vacant(VacantEntry<'a, K, V>),\n}\nimpl<'a, K, V> Entry<'a, K, V> {\n    pub fn index(&self) -> usize {\n        match *self {\n            Entry::Occupied(ref entry) => entry.index(),\n            Entry::Vacant(ref entry) => entry.index(),\n        }\n    }\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {}\n    pub fn or_insert(self, default: V) -> &'a mut V {}\n    pub fn or_insert_with<F>(self, call: F) -> &'a mut V\n    where\n        F: FnOnce() -> V,\n    {}\n    pub fn or_insert_with_key<F>(self, call: F) -> &'a mut V\n    where\n        F: FnOnce(&K) -> V,\n    {}\n    pub fn key(&self) -> &K {}\n    pub fn and_modify<F>(mut self, f: F) -> Self\n    where\n        F: FnOnce(&mut V),\n    {\n        if let Entry::Occupied(entry) = &mut self {\n            f(entry.get_mut());\n        }\n        self\n    }\n    pub fn or_default(self) -> &'a mut V\n    where\n        V: Default,\n    {}\n}\nimpl<'a, K, V> OccupiedEntry<'a, K, V> {\n    pub(crate) fn new(\n        entries: &'a mut Entries<K, V>,\n        index: hash_table::OccupiedEntry<'a, usize>,\n    ) -> Self {\n        Self { entries, index }\n    }\n    #[inline]\n    pub fn index(&self) -> usize {\n        *self.index.get()\n    }\n    #[inline]\n    fn into_ref_mut(self) -> RefMut<'a, K, V> {}\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn get(&self) -> &V {}\n    pub fn get_mut(&mut self) -> &mut V {}\n    pub fn into_mut(self) -> &'a mut V {}\n    pub(super) fn into_muts(self) -> (&'a mut K, &'a mut V) {}\n    pub fn insert(&mut self, value: V) -> V {}\n    #[deprecated(\n        note = \"`remove` disrupts the map order -- \\\n        use `swap_remove` or `shift_remove` for explicit behavior.\"\n    )]\n    pub fn remove(self) -> V {}\n    pub fn swap_remove(self) -> V {}\n    pub fn shift_remove(self) -> V {}\n    #[deprecated(\n        note = \"`remove_entry` disrupts the map order -- \\\n        use `swap_remove_entry` or `shift_remove_entry` for explicit behavior.\"\n    )]\n    pub fn remove_entry(self) -> (K, V) {}\n    pub fn swap_remove_entry(self) -> (K, V) {}\n    pub fn shift_remove_entry(self) -> (K, V) {}\n    #[track_caller]\n    pub fn move_index(self, to: usize) {}\n    pub fn swap_indices(self, other: usize) {}\n}\nimpl<'a, K, V> VacantEntry<'a, K, V> {\n    pub fn index(&self) -> usize {\n        self.map.indices.len()\n    }\n    pub fn key(&self) -> &K {}\n    pub(crate) fn key_mut(&mut self) -> &mut K {}\n    pub fn into_key(self) -> K {}\n    pub fn insert(self, value: V) -> &'a mut V {}\n    pub fn insert_entry(self, value: V) -> OccupiedEntry<'a, K, V> {}\n    pub fn insert_sorted(self, value: V) -> (usize, &'a mut V)\n    where\n        K: Ord,\n    {}\n    pub fn shift_insert(mut self, index: usize, value: V) -> &'a mut V {}\n}\n\nThe function to be tested is presented with each line formatted as 'line number + code':\n/// Return the index where the key-value pair exists or will be inserted.\n35 pub fn index(&self) -> usize {\n36     match *self {\n37         Entry::Occupied(ref entry) => entry.index(),\n38         Entry::Vacant(ref entry) => entry.index(),\n39     }\n40 }\n\nWhen inferring test input conditions or ranges, consider the following preconditions and expected return values or types:\n"
}